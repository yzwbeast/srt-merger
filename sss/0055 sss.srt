1
00:00:00,240 --> 00:00:02,100
Hey guys, welcome today.

2
00:00:02,130 --> 00:00:05,700
55 of a hundred days of code today.

3
00:00:05,760 --> 00:00:10,020
We've got yet another jam packed day for you because we're going to be diving

4
00:00:10,020 --> 00:00:13,820
right deeper into web development with flask. And along the way,

5
00:00:13,850 --> 00:00:16,460
we're going to be learning some new concepts as well,

6
00:00:17,000 --> 00:00:22,000
including how to render HTML on your website that you serve up using flask.

7
00:00:24,020 --> 00:00:25,130
And in addition,

8
00:00:25,130 --> 00:00:30,130
how to get hold of and pass the URL that the user typed in finally,

9
00:00:31,010 --> 00:00:33,980
right? It also going to be looking into advanced decorators,

10
00:00:34,010 --> 00:00:39,010
so decorators where we can pass in inputs as positional and keyword arguments.

11
00:00:39,770 --> 00:00:42,080
And we're going to be doing some exercises around that.

12
00:00:42,680 --> 00:00:47,540
But what all of this knowledge is going to culminate into is a guest,

13
00:00:47,540 --> 00:00:51,650
the number of web, right? All right. When we go to the, a home route,

14
00:00:51,650 --> 00:00:53,990
so just a single slash afterwards,

15
00:00:54,260 --> 00:00:57,080
it asks us to guess a number between zero and nine.

16
00:00:57,560 --> 00:01:02,420
And then if we type in eight guests into the path, let's say,

17
00:01:02,420 --> 00:01:07,010
we decide to guess the number three, it tells us to low try again.

18
00:01:07,460 --> 00:01:11,510
So this is HTML with styling with an H one,

19
00:01:11,690 --> 00:01:14,690
as well as a gift being rendered. Now,

20
00:01:14,720 --> 00:01:19,370
what if we try too high or, you know, a gift? And then finally,

21
00:01:19,370 --> 00:01:22,070
if we land onto the correct number,

22
00:01:22,520 --> 00:01:26,450
then we get a scene that tells us we found the correct number.

23
00:01:27,170 --> 00:01:28,580
So that's the goal.

24
00:01:28,730 --> 00:01:32,150
Once you already heard of it to the next lesson and let's get started.


25
00:00:00,810 --> 00:00:04,110
Now, one of the first things I want to tackle is getting it out.

26
00:00:04,160 --> 00:00:07,430
Hold on the user typed in too, the URL,

27
00:00:07,700 --> 00:00:11,330
or rather known as parsing a URL in this case,

28
00:00:11,360 --> 00:00:16,360
if the user typed in ww.mysite.com and then they had a forward slash with a

29
00:00:18,050 --> 00:00:19,400
path, for example,

30
00:00:19,400 --> 00:00:24,400
forward slash Angela or forward slash mail forward slash messages forward slash

31
00:00:25,010 --> 00:00:29,900
pictures, then we want to be able to get hold of the information in that path,

32
00:00:30,380 --> 00:00:34,190
because we might be able to do something different with it and render something

33
00:00:34,190 --> 00:00:38,840
specific. Based on that URL previously,

34
00:00:38,840 --> 00:00:43,840
we already saw that we could change the route of our website by serving up

35
00:00:45,020 --> 00:00:48,290
different information. So if the user went to the home route,

36
00:00:48,290 --> 00:00:51,440
which is just the URL and then a forward slash,

37
00:00:51,680 --> 00:00:55,670
then we would show them something. But if they went to a different route,

38
00:00:55,670 --> 00:00:59,480
for example, forward slash hello, then we could show them something else.

39
00:01:00,710 --> 00:01:04,220
This is where we left off in our previous lessons.

40
00:01:04,849 --> 00:01:09,850
If I wanted to create a BI function that just simply returns by

41
00:01:13,400 --> 00:01:16,880
then I could set up the route decorator.

42
00:01:16,880 --> 00:01:21,880
So this is the decorator function to look for when the user goes to a specific

43
00:01:23,240 --> 00:01:26,120
path, for example, for what slash buy,

44
00:01:27,140 --> 00:01:29,960
remember that this is a decorator function,

45
00:01:29,960 --> 00:01:32,810
which lives inside a App Object,

46
00:01:32,900 --> 00:01:37,190
which is declared in the flask class. Now,

47
00:01:37,190 --> 00:01:39,680
if all of that sounded like it didn't make any sense,

48
00:01:39,710 --> 00:01:44,270
then be sure to review the lessons that we did in previous days on classes and

49
00:01:44,270 --> 00:01:45,020
methods.

50
00:01:45,020 --> 00:01:48,950
I'm going to assume that all of this is pretty straightforward to you by now.

51
00:01:49,910 --> 00:01:51,620
Now when we run this website,

52
00:01:51,860 --> 00:01:56,860
we can now go to the URL and we can go to the homepage,

53
00:01:57,350 --> 00:02:01,430
which says, hello world. And we could go to the buy route,

54
00:02:01,490 --> 00:02:06,380
which just says, buy with an exclamation. Okay. What if we want,

55
00:02:06,380 --> 00:02:09,860
I wanted to have a variable in that route.

56
00:02:10,130 --> 00:02:15,020
What if we want to get hold of what the user types in him, for example,

57
00:02:15,170 --> 00:02:20,170
let's say that instead of just catching by and forward slash what if we wanted

58
00:02:21,170 --> 00:02:22,610
to greet our user,

59
00:02:22,880 --> 00:02:27,880
let's say I create a greet function that takes their name and it returns

60
00:02:28,730 --> 00:02:32,540
something like hello, but then it adds the name.

61
00:02:33,800 --> 00:02:36,740
Let's turn this into an F string to make that work.

62
00:02:37,430 --> 00:02:40,640
The question is how would we create the route?

63
00:02:41,390 --> 00:02:46,160
Would it be forward slash name or would it be something else?

64
00:02:46,670 --> 00:02:51,410
Well, this is what is described in this section of variable rules.

65
00:02:51,950 --> 00:02:55,580
We can add variable sections to a URL.

66
00:02:55,640 --> 00:03:00,640
So basically it's the equivalent of creating a variable that URL by marking it

67
00:03:01,990 --> 00:03:03,400
with this syntax.

68
00:03:03,760 --> 00:03:07,210
So putting some angle brackets around the variable name,

69
00:03:08,020 --> 00:03:11,740
then all function is going to receive the variable name.

70
00:03:11,890 --> 00:03:14,680
Once the decorator is done with it,

71
00:03:15,250 --> 00:03:18,520
and then we can use it inside our function.

72
00:03:19,240 --> 00:03:20,470
So for example,

73
00:03:20,800 --> 00:03:25,030
let's say that we had a route which is forward slash username,

74
00:03:25,390 --> 00:03:29,170
and then forward slash the actual name of the user,

75
00:03:29,920 --> 00:03:32,620
which we'll put inside some angle brackets.

76
00:03:32,980 --> 00:03:37,180
This means a flask is now going to turn, whatever it is that comes after.

77
00:03:37,180 --> 00:03:41,500
Use a name forward slash into a variable for us to tap into.

78
00:03:41,980 --> 00:03:44,440
And that variable has the name of name.

79
00:03:44,980 --> 00:03:48,310
So now when our greet function goes through that decorator,

80
00:03:48,550 --> 00:03:53,440
it's going to receive that value and we can use it in this greet function.

81
00:03:54,130 --> 00:03:56,890
Now, if I go ahead and rerun my code

82
00:03:59,350 --> 00:04:04,350
and go back to that URL and I go to user name forward slash,

83
00:04:06,730 --> 00:04:09,550
and then I'll put in a user name, for example, Angela,

84
00:04:10,060 --> 00:04:15,060
then that Angela is going to be taken and it's going to be rendered dynamically

85
00:04:15,430 --> 00:04:19,089
into my webpage. So it doesn't matter what it is I put here.

86
00:04:19,120 --> 00:04:24,120
It's always going to respond accordingly and treat this as if it was the value

87
00:04:25,060 --> 00:04:25,960
to a variable.

88
00:04:28,060 --> 00:04:32,650
Now notice how every single time we update our code. So for example,

89
00:04:32,650 --> 00:04:37,420
if I didn't want this to be under the route forward slash username fall in slash

90
00:04:37,450 --> 00:04:38,170
name,

91
00:04:38,170 --> 00:04:43,170
instead if I just wanted to put it at forward slash name,

92
00:04:43,810 --> 00:04:48,340
this is not going to work as it is. It's going to give us a four Oh four,

93
00:04:48,340 --> 00:04:49,450
which is not found.

94
00:04:50,020 --> 00:04:55,020
And the reason for this is because we have to stop and refresh all server for

95
00:04:56,320 --> 00:04:58,570
these changes to be reflected.

96
00:04:59,110 --> 00:05:02,590
So I have to stop and then rerun my server.

97
00:05:02,680 --> 00:05:07,680
And now if I go to here and I start typing something like John,

98
00:05:08,860 --> 00:05:11,920
then this update to the route is now live.

99
00:05:12,550 --> 00:05:16,960
If we are testing and developing our website, this is really painful.

100
00:05:16,960 --> 00:05:21,820
Having to stop and rerun the server every single time we make a change in our

101
00:05:21,820 --> 00:05:22,900
server file.

102
00:05:23,470 --> 00:05:27,340
So one of the things that you might notice here is that there is something

103
00:05:27,340 --> 00:05:31,900
called a debug mode, and we can set this to be on or off.

104
00:05:32,380 --> 00:05:37,380
Now there's a couple advantages of having the debug mode on and it's described

105
00:05:38,020 --> 00:05:42,520
in the Quickstart. It allows us to activate the debugger,

106
00:05:42,610 --> 00:05:46,000
which helps us narrow down on any issues.

107
00:05:46,450 --> 00:05:51,450
It activates the automatic reloader so that whenever we edit off a file and hit

108
00:05:52,090 --> 00:05:55,810
save, it's going to reload our server. And finally,

109
00:05:55,810 --> 00:05:59,630
it also enables debug mode on the flask application.

110
00:06:00,230 --> 00:06:05,060
Let's give that a go in order to change our app to run on debug mode.

111
00:06:05,270 --> 00:06:07,610
All we have to do is to change right,

112
00:06:07,660 --> 00:06:10,600
the debug property to true, right?

113
00:06:11,530 --> 00:06:15,610
And now if I go ahead and rerun this application,

114
00:06:16,150 --> 00:06:19,000
then you can see my debug mode is now on.

115
00:06:19,540 --> 00:06:24,520
And I've got this debugger is active and also a debug, a pin,

116
00:06:24,580 --> 00:06:28,480
which we'll come back to in just a minute. If I go to my website,

117
00:06:29,440 --> 00:06:34,270
you can see that I can go there two, a route like this,

118
00:06:34,330 --> 00:06:35,470
and it still works.

119
00:06:35,890 --> 00:06:40,330
But if I was to change something in my code,

120
00:06:40,630 --> 00:06:43,990
for example, just adding a new word into the return.

121
00:06:44,440 --> 00:06:49,440
If I go ahead and hit command S on Mac or control us on windows to save this

122
00:06:49,960 --> 00:06:51,850
file, then it will right.

123
00:06:51,910 --> 00:06:56,440
Reload the server because it's tech did a change in that file,

124
00:06:56,680 --> 00:07:01,600
and it's going to reload our server automatically so that we don't have to stop

125
00:07:01,600 --> 00:07:04,360
and start all over again. So now,

126
00:07:04,360 --> 00:07:08,050
if we go back over here and we refresh this page,

127
00:07:08,230 --> 00:07:11,650
then you can see that update in the code is now reflected.

128
00:07:12,220 --> 00:07:16,780
This is pretty neat. But in addition, we could also do other things.

129
00:07:16,930 --> 00:07:21,580
For example, if we actually need to debug an issue, for example,

130
00:07:21,580 --> 00:07:25,360
let's say that here in my variable path,

131
00:07:25,420 --> 00:07:28,930
instead of saying name, I quote it username.

132
00:07:29,320 --> 00:07:30,940
But then in my greed function,

133
00:07:30,970 --> 00:07:33,850
I'm still trying to tap into this variable code name.

134
00:07:34,450 --> 00:07:36,220
So now if I hit save,

135
00:07:36,220 --> 00:07:40,870
it's going to reload my server and you can see that there's actually nothing

136
00:07:40,870 --> 00:07:44,320
wrong with what I've done. This is all syntactically valid.

137
00:07:44,890 --> 00:07:48,250
But if I go to my website here and I hit enter,

138
00:07:48,670 --> 00:07:51,460
I actually get the flight task debug view.

139
00:07:52,000 --> 00:07:56,140
So it's it actually telling me in this nicely formatted way?

140
00:07:56,200 --> 00:08:00,160
What is the issue? So the main issue, right, is that I got a type II error.

141
00:08:00,730 --> 00:08:01,570
Yeah, it happens.

142
00:08:01,570 --> 00:08:06,570
If we scroll through the bottom is that the green function got an unexpected

143
00:08:06,580 --> 00:08:08,980
keyword argument called username.

144
00:08:10,210 --> 00:08:14,440
So that debugger might help us to figure out that, Oh, actually,

145
00:08:14,770 --> 00:08:16,360
I've named this wrong.

146
00:08:17,110 --> 00:08:21,340
Now this is an issue with the path here. But alternatively,

147
00:08:21,370 --> 00:08:25,420
I could have made an error in my code as well. For example,

148
00:08:25,420 --> 00:08:29,020
let's say that we want to take the name that's being passed in him.

149
00:08:29,020 --> 00:08:33,220
We decided that we were going to add 12, two, it for some reason or other. Now,

150
00:08:33,220 --> 00:08:38,020
if I hit save so that my server reloads and I tried to refresh this website,

151
00:08:38,440 --> 00:08:43,059
you can see again, I've got a type II error. And this time though,

152
00:08:43,059 --> 00:08:46,330
it's telling me that I can only concatenate string,

153
00:08:46,360 --> 00:08:50,500
not an integer to a string. And if we go through these files,

154
00:08:50,530 --> 00:08:55,000
you can see one of these lines, the first to a file that we wrote, hello, dot.

155
00:08:55,860 --> 00:08:59,370
And it tells us that online 18 in the greet function,

156
00:08:59,760 --> 00:09:03,210
this is the line. That's tripping it up. Now,

157
00:09:03,210 --> 00:09:07,290
one of the things I can do at this point is I can actually open up the flask,

158
00:09:07,290 --> 00:09:11,070
a debugger. And I do that by clicking on this button right here.

159
00:09:11,880 --> 00:09:15,570
And what this is going to ask is for that pin that I showed you earlier on,

160
00:09:15,780 --> 00:09:17,760
which is in our console.

161
00:09:18,420 --> 00:09:21,510
This means that if somebody else is accessing your website,

162
00:09:21,660 --> 00:09:24,780
live on the internet and you happen to have it in debug mode,

163
00:09:25,050 --> 00:09:27,270
they can't just go and mess around with your code.

164
00:09:27,930 --> 00:09:32,930
Let's go and scroll to the bottom and copy our debugging code and then paste it

165
00:09:33,690 --> 00:09:38,190
in here as the pin, and then confirm to gain access to the debugger.

166
00:09:38,850 --> 00:09:39,240
Now,

167
00:09:39,240 --> 00:09:44,240
what it's done is basically its open up a console that is live on this line.

168
00:09:45,660 --> 00:09:48,870
So now what I can do is I can print out for example,

169
00:09:48,870 --> 00:09:52,590
the variables that it could access on that line, for example, name,

170
00:09:52,950 --> 00:09:57,360
and it tells me that name is Angela. I can start diagnosing, well,

171
00:09:57,600 --> 00:10:00,960
why is this wrong? So if I wanted you to add name to 12,

172
00:10:01,380 --> 00:10:03,030
well I can narrow it down.

173
00:10:03,120 --> 00:10:07,800
And it shows me that you can only add a string to a string or an integer to an

174
00:10:07,800 --> 00:10:09,900
integer. You can't mix up the types.

175
00:10:10,350 --> 00:10:15,350
So that might make me realize that actually I need to change this also to a

176
00:10:15,750 --> 00:10:19,260
strength. Now,

177
00:10:19,260 --> 00:10:21,060
if I go ahead and refresh,

178
00:10:21,150 --> 00:10:25,290
you can see there's no problems there and I've managed to fix the problem with

179
00:10:25,290 --> 00:10:27,450
the help of the flask debugger.

180
00:10:29,160 --> 00:10:31,800
Now just a few more things on this URL.

181
00:10:32,400 --> 00:10:36,960
One of the things that we could do is we could add some texts to the path

182
00:10:36,990 --> 00:10:41,880
before. So you remember that I said username slash name. So that works.

183
00:10:42,180 --> 00:10:44,400
We can also add paths afterwards.

184
00:10:44,640 --> 00:10:48,120
So it could be one or two, whatever it may be.

185
00:10:48,480 --> 00:10:53,480
And we can now access this route by going to our URL and then going to the first

186
00:10:54,030 --> 00:10:56,010
part, which was username.

187
00:10:56,580 --> 00:10:59,370
And then it was the variable that we could put in.

188
00:10:59,640 --> 00:11:03,180
And then finally we can add even more to the path afterwards.

189
00:11:03,450 --> 00:11:06,720
So we're in our case, the path is one. So now if I hit enter,

190
00:11:06,750 --> 00:11:08,730
you can see it still goes to the same page,

191
00:11:08,970 --> 00:11:13,970
but it's only this middle pot that's being taken as the value to this name

192
00:11:14,520 --> 00:11:17,820
variable. Now,

193
00:11:17,820 --> 00:11:20,580
if we go back to the flask Quickstart,

194
00:11:20,910 --> 00:11:25,200
you can see that the final thing you mentioned is there is something called a

195
00:11:25,230 --> 00:11:27,720
converter on the converter,

196
00:11:27,750 --> 00:11:32,750
basically converts the URL into any data type that you specify by default,

197
00:11:33,930 --> 00:11:37,380
it converts that variable value into a string,

198
00:11:37,860 --> 00:11:42,660
which means it's going to accept any text without a slash. Now,

199
00:11:42,690 --> 00:11:46,440
if you want to keep the slash, because if you are using a path,

200
00:11:46,470 --> 00:11:49,500
then that might be quite important. So for example,

201
00:11:49,500 --> 00:11:54,130
you wanted to get this entire part as your variable slash Juan.

202
00:11:54,580 --> 00:11:59,170
Well then in that case, instead of using this, you would have to specify, well,

203
00:11:59,170 --> 00:12:03,460
the data type is going to be a path and then I'm gonna save that as the name.

204
00:12:03,970 --> 00:12:07,300
So now if I hit save and I use this same URL,

205
00:12:07,330 --> 00:12:12,330
you can see the rest of that path is now being rendered in my variable and it's

206
00:12:12,910 --> 00:12:16,420
being pulled in for whatever it is that I may need it for.

207
00:12:18,280 --> 00:12:22,840
Now, alternatively, you can also have more than one variable, of course.

208
00:12:23,200 --> 00:12:27,250
So maybe this first part, I'm going to keep it as a name,

209
00:12:27,280 --> 00:12:30,910
which is a string. And then the second part, I want a number.

210
00:12:30,910 --> 00:12:35,530
So maybe I'll keep it as the datatype integer and I'll give the variable a name,

211
00:12:35,560 --> 00:12:36,580
a code number.

212
00:12:37,120 --> 00:12:42,120
So now I can tap into the name and then I can also tap into a number like,

213
00:12:45,220 --> 00:12:47,920
so now coming back here,

214
00:12:47,950 --> 00:12:51,160
if I change this URL with a bit and I hit enter,

215
00:12:51,460 --> 00:12:54,280
you can see it's taken this and placed it here.

216
00:12:54,520 --> 00:12:56,590
It's taken this and placed it here.

217
00:12:57,670 --> 00:13:02,670
So that's a quick little bit on how we can extract the parts that we want from a

218
00:13:02,920 --> 00:13:07,920
URL by using these variable paths in the next lesson,

219
00:13:08,320 --> 00:13:13,030
we're going to see how we can control the HTML that gets rendered instead of

220
00:13:13,030 --> 00:13:15,820
just letting flask render what is the default.

221
00:13:16,510 --> 00:13:19,510
So for all of that and more, I'll see you on the next lesson.


222
00:00:00,150 --> 00:00:01,470
Now in the last lesson,

223
00:00:01,530 --> 00:00:05,910
we talked a little bit about how to get different routes to work by using the

224
00:00:05,910 --> 00:00:07,470
app dot route decorator,

225
00:00:08,039 --> 00:00:13,040
as well as how we can create variable paths by using this angle bracket syntax

226
00:00:13,530 --> 00:00:18,530
and how we can convert the path into a pre-specified data type by using this

227
00:00:19,830 --> 00:00:21,840
particular structure. Now,

228
00:00:21,840 --> 00:00:26,840
we also looked at how to run the App in debug mode so that we can auto reload

229
00:00:26,970 --> 00:00:31,530
our server and also get access to the flask debugger. Now,

230
00:00:31,560 --> 00:00:32,340
in this lesson,

231
00:00:32,340 --> 00:00:36,630
I want to talk a little bit about how we can render actual HTML,

232
00:00:36,840 --> 00:00:38,040
because at the moment,

233
00:00:38,070 --> 00:00:43,070
what happens is we're simply just returning a string and we're getting flask to

234
00:00:43,530 --> 00:00:46,710
do whatever it wants with it. And what that means.

235
00:00:46,710 --> 00:00:48,900
If we go into the Chrome inspector,

236
00:00:48,930 --> 00:00:53,930
by going to view and then developer and then develop a tools is we can see it.

237
00:00:55,130 --> 00:00:57,290
It just stuffed that whole

238
00:00:57,380 --> 00:01:02,380
F-string into a body tag without any real HTML tags that gives it structure.

239
00:01:04,190 --> 00:01:08,240
So that's usually not what you would want when you're creating a website.

240
00:01:08,840 --> 00:01:13,010
So let's see if we can start creating some HTML. Instead.

241
00:01:13,760 --> 00:01:18,760
Now the simplest way to do this is flask actually accepts HTML in the return.

242
00:01:20,510 --> 00:01:23,450
So we could just a simply say,

243
00:01:23,450 --> 00:01:28,450
if we wanted to create an H one by adding an H one opening and closing tag here,

244
00:01:29,510 --> 00:01:34,430
and if I hit save to refresh my server and then go to my home route,

245
00:01:34,730 --> 00:01:38,900
then you can see this is now inside and H one inside the body.

246
00:01:40,010 --> 00:01:43,670
Now, of course you can change this to whatever target is you want,

247
00:01:43,880 --> 00:01:46,520
and it should still work. Now,

248
00:01:46,520 --> 00:01:48,920
once we can start rendering HTML,

249
00:01:48,950 --> 00:01:52,610
we can also start using the HTML attributes, by the way,

250
00:01:52,670 --> 00:01:57,670
if any of this that I'm talking about HTML or CSS or attributes or tags sounds

251
00:01:58,220 --> 00:02:02,600
unfamiliar, it might be because you've skipped the sessions on each balance CSS,

252
00:02:02,840 --> 00:02:04,130
which we went through a few,

253
00:02:04,130 --> 00:02:06,360
Two days ago. So have a quick search for that.

254
00:02:06,470 --> 00:02:10,639
If all of this is confusing and it might be a good time to do a revision on

255
00:02:10,639 --> 00:02:14,600
that. Anyways. Now coming back to my H one tag,

256
00:02:15,050 --> 00:02:19,280
let's say I wanted to give it some CSS, which is just inline CSS.

257
00:02:19,760 --> 00:02:24,110
So I'm going to set the style and give it some CSS code. For example,

258
00:02:24,170 --> 00:02:28,610
I could set the text, the line CSS property to center,

259
00:02:29,120 --> 00:02:32,780
and now if I hit save and I refresh on my homepage,

260
00:02:33,200 --> 00:02:35,870
my text is now center aligned,

261
00:02:36,950 --> 00:02:39,590
and you can see if I select this H one,

262
00:02:39,860 --> 00:02:43,130
you can see that style being applied right here.

263
00:02:44,840 --> 00:02:49,840
Anything that we can do with inline styling that you saw in the CSS modules or

264
00:02:49,970 --> 00:02:54,970
changing the code to any sort of HTML tag we can do in the return.

265
00:02:55,910 --> 00:03:00,400
Now, what if you wanted to render more than one HTML element? Well,

266
00:03:00,460 --> 00:03:05,020
that's possible as well. All you have to do is just continue typing.

267
00:03:05,020 --> 00:03:09,220
So let's say we wanted to create a paragraph tag. Well,

268
00:03:09,250 --> 00:03:11,230
we could simply create it like this.

269
00:03:11,410 --> 00:03:16,210
So if I hit save and refresh, you can see, this is my H one,

270
00:03:16,270 --> 00:03:17,890
and this is a paragraph,

271
00:03:18,700 --> 00:03:22,210
and this is the updated structure of my HTML file

272
00:03:23,860 --> 00:03:28,860
now because pie charm doesn't really like you going too far over and creating

273
00:03:29,230 --> 00:03:32,350
very long lines of code because it's difficult to read.

274
00:03:32,650 --> 00:03:36,880
One of the neat tricks that it has is if you want to split a string at any

275
00:03:36,880 --> 00:03:39,040
point, all you have to do is hit enter,

276
00:03:39,400 --> 00:03:41,470
and it will add in this backslash for you,

277
00:03:41,770 --> 00:03:45,820
which basically is the equivalent of the same code that we had before.

278
00:03:46,090 --> 00:03:47,830
But it's now much easier to read.

279
00:03:48,280 --> 00:03:52,630
So you can add in as many lines of HTML as you want in this fashion.

280
00:03:54,280 --> 00:03:57,490
For example, if we wanted to add a another line,

281
00:03:57,910 --> 00:04:02,910
then we would go inside the paragraph quotation Mark hit enter to insert another

282
00:04:04,210 --> 00:04:07,870
line. And here we can add our image element.

283
00:04:09,160 --> 00:04:13,000
Our image element is a self closing tags. We don't need the closing tag,

284
00:04:13,240 --> 00:04:15,010
but it does need a source.

285
00:04:15,640 --> 00:04:19,120
And this source could be a image that we find online.

286
00:04:19,540 --> 00:04:24,100
So let's see if we can find a picture of a kitten.

287
00:04:24,940 --> 00:04:26,140
This one looks pretty good.

288
00:04:26,170 --> 00:04:29,740
Let's go ahead and copy the image address here by right clicking.

289
00:04:30,100 --> 00:04:34,750
And then let's piece that in here as the image source. Now,

290
00:04:34,780 --> 00:04:39,190
if I go ahead and hit, save and go back to my website and reload it,

291
00:04:39,490 --> 00:04:42,220
you can see that is my little cat.

292
00:04:42,970 --> 00:04:47,410
Now you can add other attributes, do the image tag. For example,

293
00:04:47,470 --> 00:04:52,470
you can change the width to you only 200 pixels so that it would fit in to this

294
00:04:52,810 --> 00:04:56,860
site a little bit better, or you can manipulate it in any way you want.

295
00:04:57,610 --> 00:05:02,230
Now, the great thing about the image tag is we can also add gifts as well,

296
00:05:02,320 --> 00:05:04,120
and it'll be rendered in our browser.

297
00:05:04,630 --> 00:05:09,490
So Giphy is a great source of gifts from all over the internet.

298
00:05:09,850 --> 00:05:12,880
So let's find an animated kitten on him.

299
00:05:16,120 --> 00:05:20,770
This one is very cute. If we go to copy link and then copy the gift link,

300
00:05:21,220 --> 00:05:23,530
and we replace this URL,

301
00:05:23,560 --> 00:05:28,330
that's currently inside the source with this new URL,

302
00:05:28,750 --> 00:05:33,010
then we would end up with our gift of being rendered as an image. Now,

303
00:05:33,010 --> 00:05:37,900
one thing to note is that as we're changing these source attributes or the style

304
00:05:37,900 --> 00:05:38,733
attributes,

305
00:05:38,860 --> 00:05:43,270
the tax let's going in there is going in as a string with the quotation marks.

306
00:05:43,720 --> 00:05:47,200
So this will clash with any outer quotation marks.

307
00:05:47,560 --> 00:05:52,560
So be sure that if you've got a return as a single quoted string,

308
00:05:53,590 --> 00:05:56,260
that in the middle, if you need to have quotes,

309
00:05:56,500 --> 00:06:00,440
it will be double quotes basically has to be opposite of each other.

310
00:06:01,490 --> 00:06:03,500
If you have single quotes on the outside,

311
00:06:03,530 --> 00:06:05,750
then you're going to be using double quotes on the inside.

312
00:06:05,990 --> 00:06:07,550
If you are using the opposite,

313
00:06:07,580 --> 00:06:10,610
then it's double quotes on the outside that it has to be single quote on the

314
00:06:10,610 --> 00:06:14,300
insight let's hit, save and see if this worked,

315
00:06:14,510 --> 00:06:17,270
go back to our home page, hit refresh,

316
00:06:17,510 --> 00:06:22,510
and you can see there is a fairy cute kitten being rendered in HTML from a flask

317
00:06:25,250 --> 00:06:26,083
server.

318
00:06:27,440 --> 00:06:32,180
So we've now leveled up a website a little bit more. We can now render HTML.

319
00:06:32,210 --> 00:06:36,890
We can put an inline styling and we can add HTML elements to our heart's

320
00:06:36,920 --> 00:06:41,600
content. Now in the next lesson, I've got a little bit of a challenge for you.

321
00:06:42,110 --> 00:06:46,670
And the idea is for you to practice what you learned yesterday about decorators.

322
00:06:47,120 --> 00:06:51,560
It's a bit of a advanced topic, but once you get used to it, it's really,

323
00:06:51,560 --> 00:06:56,090
really handy. So for all of that and more head of it in the next lesson,


324
00:00:00,570 --> 00:00:03,570
All right guys. So in yesterday's lessons that we talked about,

325
00:00:03,570 --> 00:00:07,980
Python decorators, and we did quite a few exercises around that.

326
00:00:08,520 --> 00:00:09,000
Now,

327
00:00:09,000 --> 00:00:11,850
in order to test your knowledge and make sure that you haven't forgotten how to

328
00:00:11,850 --> 00:00:16,710
use it, I've got a challenge for you to apply your knowledge of decorators.

329
00:00:17,370 --> 00:00:21,240
Here's the challenge in this route that I've got here,

330
00:00:21,270 --> 00:00:23,550
which is just forward slash bye.

331
00:00:24,330 --> 00:00:28,860
One of the things that we learnt in the last lesson is that we can turn this

332
00:00:28,890 --> 00:00:33,450
into an HTML element by simply wrapping it around HTML tags.

333
00:00:33,870 --> 00:00:34,950
So for example,

334
00:00:35,010 --> 00:00:39,090
if I wanted to turn this BI into a bolded,

335
00:00:39,150 --> 00:00:42,210
by that I could add the B tag around it.

336
00:00:42,630 --> 00:00:47,630
So now if I hit save and I go to my forest slash buy route,

337
00:00:48,150 --> 00:00:52,500
then you can see that this text is now bolded. Like, so

338
00:00:54,030 --> 00:00:57,600
now I can continue wrapping the text around more tags.

339
00:00:58,140 --> 00:01:02,520
If I wanted a turn in a tallit, then I can wrap it around some emphasis tags.

340
00:01:02,550 --> 00:01:07,260
So the EMT tag, and this will make it look like this.

341
00:01:07,680 --> 00:01:08,550
And finally,

342
00:01:08,550 --> 00:01:13,550
I can also make it underlined by wrapping it inside a you tag like this.

343
00:01:15,060 --> 00:01:18,480
So now it's bold emphasized and underlined,

344
00:01:18,540 --> 00:01:23,250
which looks like this. Now, what I want to do though,

345
00:01:23,250 --> 00:01:28,250
is I don't really want to add all of this using strings because it's prone to

346
00:01:29,370 --> 00:01:33,870
errors and it could be making typos, and it's just a bit of a pain to edit.

347
00:01:34,440 --> 00:01:39,440
So what I want to do instead is under the first App dot route decorator,

348
00:01:40,740 --> 00:01:45,740
which is important to identify the route to render what's in this method.

349
00:01:46,590 --> 00:01:49,950
I want to be able to add some other decorators. For example,

350
00:01:49,950 --> 00:01:54,950
let's say I added a decorator that I created somewhere up there called make

351
00:01:55,050 --> 00:01:59,760
bolt. And if I hit save, you can see it's done the same thing.

352
00:01:59,760 --> 00:02:02,610
It's added the B tag around that text.

353
00:02:03,090 --> 00:02:06,270
I can also add some my other ones that I made earlier,

354
00:02:06,540 --> 00:02:09,870
like make emphasis and make underlined.

355
00:02:10,380 --> 00:02:14,610
So now I can add a whole bunch of decorators to my by function.

356
00:02:15,060 --> 00:02:18,810
And once that's rendered, you can see it's got the bold,

357
00:02:18,870 --> 00:02:21,810
it's got the emphasis and it's got the underline.

358
00:02:22,710 --> 00:02:26,580
And that was much easier because I've got the auto suggest from PI jam.

359
00:02:26,910 --> 00:02:30,150
And also I've got my decorator working in the background.

360
00:02:30,690 --> 00:02:32,220
So your task is this,

361
00:02:32,310 --> 00:02:36,000
your task is to create these three decorators,

362
00:02:36,390 --> 00:02:39,330
which each will achieve the named effect.

363
00:02:39,600 --> 00:02:44,340
So either making the text bold, making emphasize, or making an underlined.

364
00:02:44,850 --> 00:02:47,490
So this is a bit of a revision and a bit of a challenge.

365
00:02:47,670 --> 00:02:50,640
I'll let you pause the video and complete this challenge.

366
00:02:51,090 --> 00:02:55,710
And in the next lesson, I'll reveal the solution code. Give that 10 minutes,

367
00:02:55,770 --> 00:02:58,830
give it a good go and see if you can complete this challenge.


368
00:00:00,450 --> 00:00:04,500
Previously, we looked at simple Python decorator functions.

369
00:00:05,070 --> 00:00:08,970
And the reason why it's simple is because all that we're doing when we're

370
00:00:08,970 --> 00:00:13,350
calling the function in the decorator is we're just calling it straight up.

371
00:00:14,040 --> 00:00:18,480
But this doesn't take into account in the cases where, for example,

372
00:00:18,480 --> 00:00:23,480
we want to add a condition before we called the function or even more advanced.

373
00:00:23,910 --> 00:00:27,510
What if we needed to call the function with some sort of inputs?

374
00:00:27,690 --> 00:00:31,860
How would we get hold of that? If it was inside a decorator?

375
00:00:32,369 --> 00:00:36,510
So let's say that we had a class called user.

376
00:00:37,140 --> 00:00:39,090
Now, if you are not familiar with classes,

377
00:00:39,150 --> 00:00:43,260
I strongly recommend going back to the lessons where we covered classes and

378
00:00:43,260 --> 00:00:45,180
Object in great detail.

379
00:00:45,220 --> 00:00:48,960
We did over several days just to make sure that you're up to date with that

380
00:00:49,020 --> 00:00:52,830
before you continue. But this is a pretty simple class.

381
00:00:53,130 --> 00:00:56,910
All it does is it has two properties, a name, property,

382
00:00:57,120 --> 00:00:58,890
and it is logged in property.

383
00:00:59,430 --> 00:01:03,240
So basically what we're trying to simulate is a condition where let's say we had

384
00:01:03,240 --> 00:01:08,240
a blog website and we had these user objects and the user has a username and

385
00:01:09,540 --> 00:01:12,660
also some sort of property that keeps track of whether,

386
00:01:12,660 --> 00:01:16,950
or if the user is going onto the website and not logged in,

387
00:01:17,070 --> 00:01:19,110
or whether if they all have already logged in.

388
00:01:20,520 --> 00:01:23,280
So certain methods on the website,

389
00:01:23,370 --> 00:01:27,840
you can only be achieved by users who are logged in it's. For example,

390
00:01:27,840 --> 00:01:30,540
if they wanted you to create a new blog post we'll,

391
00:01:30,540 --> 00:01:33,270
then that user has to be checked.

392
00:01:33,660 --> 00:01:38,660
And we have to make sure that they are in fact logged in and authenticated to

393
00:01:39,180 --> 00:01:41,310
create a new blog post.

394
00:01:41,790 --> 00:01:46,790
If I go ahead and create a new user from the user class,

395
00:01:47,580 --> 00:01:50,940
then I can give it a name, which I'll put as Angela.

396
00:01:51,540 --> 00:01:56,540
And then I could create the blog post and pass in my user.

397
00:01:58,080 --> 00:02:01,710
Now, when I hit run, you'll see, this is Angela's new blog,

398
00:02:01,740 --> 00:02:04,230
post being printed right here.

399
00:02:05,460 --> 00:02:10,050
Now what if I wanted to create a decorator function that could be used to

400
00:02:10,050 --> 00:02:14,970
decorate any function on our website that requires authentication.

401
00:02:15,150 --> 00:02:20,150
So it requires that this users is logged in property is set to true.

402
00:02:22,260 --> 00:02:26,400
So let's say that I decided to create my decorator function right here,

403
00:02:26,430 --> 00:02:30,600
which I'll call the is authenticated decorator.

404
00:02:32,220 --> 00:02:36,690
And this is of course going to need to take a function as an input.

405
00:02:37,020 --> 00:02:39,960
And then inside, we've got our wrapper function.

406
00:02:41,190 --> 00:02:46,110
Now inside our wrapper function is where we call this function.

407
00:02:46,110 --> 00:02:48,090
That's the past and right here.

408
00:02:48,810 --> 00:02:51,660
And finally to complete our decorator.

409
00:02:51,690 --> 00:02:56,690
We have to return the wrapper as a function without the parentheses.

410
00:02:57,990 --> 00:03:01,540
Now, in order to check for the is authenticated,

411
00:03:01,600 --> 00:03:04,450
what we actually want to do is we want to say, well,

412
00:03:04,480 --> 00:03:09,480
if the user.is logged in is equal to true will in that case,

413
00:03:12,040 --> 00:03:16,570
we're going to trigger the function. But if it's actually not true, well,

414
00:03:16,570 --> 00:03:19,390
then we're not going to trigger the function. Now,

415
00:03:19,420 --> 00:03:23,080
the only problem here is that this user is undefined.

416
00:03:23,800 --> 00:03:26,650
We were only able to pass in the function,

417
00:03:27,040 --> 00:03:32,040
but what if we needed to pass in some arguments associated with that function?

418
00:03:33,730 --> 00:03:38,170
Notice here that all function create blog posts, which is what we want to add.

419
00:03:38,170 --> 00:03:42,910
The decorator to accepts an input in the form of the user. Object.

420
00:03:43,480 --> 00:03:48,280
If I decorate this function with the is authenticated decorator,

421
00:03:48,850 --> 00:03:50,830
and I tried to run this,

422
00:03:51,190 --> 00:03:55,840
then it's not really gonna work because that user is not defined.

423
00:03:56,440 --> 00:04:01,440
And it tells us that the wrapper function takes zero positional arguments,

424
00:04:03,460 --> 00:04:05,590
but one was given.

425
00:04:06,220 --> 00:04:09,580
And the one that's given is this user right here,

426
00:04:10,990 --> 00:04:15,990
this era might already be a good hint for us to figure out how to fix this.

427
00:04:17,709 --> 00:04:22,710
One of the things that we talked about in previous lessons is the concept of OGs

428
00:04:22,990 --> 00:04:26,470
and clogs, unlimited positional arguments.

429
00:04:26,890 --> 00:04:29,830
Normally all add it in as asterix,

430
00:04:29,890 --> 00:04:34,890
OGs and unlimited keyword arguments are usually added in as two Astrix and then

431
00:04:37,360 --> 00:04:41,380
Crocs. So now we can have all function,

432
00:04:41,740 --> 00:04:45,130
which is decorated with this decorate to function.

433
00:04:45,790 --> 00:04:47,590
And when we call the function,

434
00:04:47,740 --> 00:04:52,740
we could provide some inputs and those inputs can be tapped into via these OGs

435
00:04:55,390 --> 00:04:57,820
and Crocs. Now, in this case,

436
00:04:57,850 --> 00:05:02,170
this is a positional argument and it's the argument App positions zero.

437
00:05:02,800 --> 00:05:06,790
So instead of using this user, which is what we would do,

438
00:05:06,790 --> 00:05:09,910
if we were inside this function, instead,

439
00:05:09,940 --> 00:05:12,400
we would use the wrappers OGs,

440
00:05:13,330 --> 00:05:17,260
and then we would use the position set to zero.

441
00:05:18,040 --> 00:05:23,040
So now it's going to look at the function that is going to be passed in which is

442
00:05:24,430 --> 00:05:26,170
going to have some inputs.

443
00:05:26,740 --> 00:05:31,740
And it's going to take that first position input and then see if it is logged in

444
00:05:32,380 --> 00:05:33,970
property is equal to true.

445
00:05:35,320 --> 00:05:39,760
Now that my wrapper is taking positional arguments and keyword arguments,

446
00:05:40,120 --> 00:05:45,120
and I can tap into the first positional argument by using Oxy zero.

447
00:05:45,700 --> 00:05:48,490
Well inside the rapt function,

448
00:05:48,820 --> 00:05:53,820
I can now also use this first argument in order to give it as an input to that

449
00:05:54,610 --> 00:05:55,443
function.

450
00:05:55,630 --> 00:06:00,440
Remember that this function is simply this create blog post function without the

451
00:06:00,440 --> 00:06:04,370
decorator. Now, if I go ahead and hit run,

452
00:06:05,240 --> 00:06:10,240
you will see that nothing happens unless I change this users is logged in

453
00:06:11,420 --> 00:06:15,740
property to equal. True. And now that that's true,

454
00:06:15,890 --> 00:06:18,080
then it's going to be checked right here.

455
00:06:18,410 --> 00:06:23,410
And then it's going to call the function because that user is now logged in this

456
00:06:24,740 --> 00:06:28,280
idea of being able to pass in positional arguments,

457
00:06:28,340 --> 00:06:30,170
as well as keyword arguments,

458
00:06:30,500 --> 00:06:34,310
by simply adding the odds and quarks to the wrapper function,

459
00:06:34,640 --> 00:06:39,640
and then using it inside the wrapper or using it to call the function itself is

460
00:06:40,670 --> 00:06:45,110
one step higher in terms of understanding Python,

461
00:06:45,110 --> 00:06:46,340
decorator functions.

462
00:06:47,120 --> 00:06:50,420
I recommend spending a few minutes looking at this code,

463
00:06:50,690 --> 00:06:54,350
which you can access at this URL, which is in the course resources,

464
00:06:54,830 --> 00:06:59,510
and then trying to recreate this functionality from scratch based on your

465
00:06:59,510 --> 00:07:03,680
understanding of what we just talked about in the next lesson,

466
00:07:03,740 --> 00:07:08,360
I've got a coding exercise for you so that you can try out this new advanced

467
00:07:08,360 --> 00:07:12,200
form of Python decorators and try creating one yourself.


