1
00:00:00,430 --> 00:00:02,800
All right guys, well done for sticking it through.

2
00:00:02,830 --> 00:00:06,220
You are now on day 5 of 100 Days of code.

3
00:00:06,610 --> 00:00:09,190
And today I've got a fun project for you.

4
00:00:09,730 --> 00:00:13,660
And the inspiration for the project comes from the fact that all sorts of

5
00:00:13,660 --> 00:00:17,440
companies seem to be getting hacked these days. Everything from Ashley

6
00:00:17,440 --> 00:00:18,820
Madison to Verizon,

7
00:00:18,850 --> 00:00:22,690
everybody seems to be really bad at keeping your password safe.

8
00:00:23,200 --> 00:00:28,200
So, how can we make sure that these hackers who are in hoodies and wearing face

9
00:00:29,110 --> 00:00:33,200
masks, don't get to you and your account? I

10
00:00:33,220 --> 00:00:36,640
don't know why hackers are always portrayed like this? I mean,

11
00:00:36,670 --> 00:00:40,630
they're in their own house. They don't have to hide their face.

12
00:00:41,410 --> 00:00:44,620
But at least they are conscious of not spreading germs and staying warm.

13
00:00:44,650 --> 00:00:49,210
So that's good. But how do these hackers get into your account anyways?

14
00:00:49,630 --> 00:00:50,050
Well,

15
00:00:50,050 --> 00:00:55,050
one of the most common reasons is password reuse. Using the same password on 20

16
00:00:55,540 --> 00:00:58,960
different sites from Google to Facebook, to Skype, to Spotify,

17
00:00:59,230 --> 00:01:01,600
to all the random services that we sign up to.

18
00:01:02,110 --> 00:01:04,480
The problem is that when one of these sites get hacked,

19
00:01:04,629 --> 00:01:09,190
then the email and password combination you used to signup is compromised.

20
00:01:09,400 --> 00:01:13,600
So all a hacker has to do is try out those credentials on a bunch of other

21
00:01:13,600 --> 00:01:17,200
websites and see if they work. So how would you know,

22
00:01:17,200 --> 00:01:21,610
if your email and password is on a database somewhere? You can head over to have

23
00:01:21,610 --> 00:01:24,520
ibeenpwned.com, notice the spelling there,

24
00:01:24,910 --> 00:01:29,410
and type in your email to see if it was involved in a website that had been

25
00:01:29,410 --> 00:01:30,243
hacked.

26
00:01:30,280 --> 00:01:35,050
So let's try an email here: elon@tesla.com

27
00:01:36,850 --> 00:01:40,210
And it tells us, Oh, no, it seems like this email has been pwned.

28
00:01:40,810 --> 00:01:43,570
And these where the websites which got hacked

29
00:01:43,630 --> 00:01:48,040
potentially leaking this email and it's associated password.

30
00:01:48,850 --> 00:01:52,150
I actually recommend you to try out your own email addresses right now and see

31
00:01:52,150 --> 00:01:55,300
which services you signed up to have been compromised.

32
00:01:55,600 --> 00:01:57,490
But if you want better security,

33
00:01:57,550 --> 00:02:01,630
then you'll actually need unique passwords for each and every website.

34
00:02:02,380 --> 00:02:06,340
And they should really be strong passwords, not 12345

35
00:02:06,340 --> 00:02:10,810
6, or qwerty. If I just called out your password,

36
00:02:11,080 --> 00:02:11,913
please change it.

37
00:02:13,390 --> 00:02:17,890
Now what we're going to be building is exactly that. We're going to be building a

38
00:02:17,920 --> 00:02:19,600
password generator,

39
00:02:19,870 --> 00:02:24,870
something that's going to generate strong passwords with letters and symbols and

40
00:02:25,450 --> 00:02:29,860
numbers. First, they ask us how many letters would you like in your password?

41
00:02:30,160 --> 00:02:34,270
I would like 12. How many symbols would you like? I would like 2.

42
00:02:34,930 --> 00:02:38,050
And I would also like 2 numbers in my password.

43
00:02:38,560 --> 00:02:43,560
And then I hit enter and it gives me the password that it has generated with two

44
00:02:45,100 --> 00:02:49,150
symbols, two numbers and 12 letters.

45
00:02:49,210 --> 00:02:52,000
So that's a pretty strong looking password

46
00:02:52,300 --> 00:02:57,300
if you asked me. Now I can use this and update my passwords to something very

47
00:02:58,210 --> 00:03:00,040
strong and very secure.

48
00:03:00,610 --> 00:03:05,470
So this is what we'll be building by the end of today. But in order to do it,

49
00:03:05,530 --> 00:03:09,580
we first need to learn some new skills and new concepts.

50
00:03:09,760 --> 00:03:12,400
So head over to the next lesson and let's get started.

1
00:00:00,280 --> 00:00:04,300
The first topic I want to talk about today is the concept of loops,

2
00:00:04,660 --> 00:00:07,450
things that have to happen over and over and over again.

3
00:00:08,020 --> 00:00:11,560
The first type of loop I want to introduce you to is something called the For

4
00:00:11,560 --> 00:00:16,560
loop. And it can be used really easily in combination with something we learned

5
00:00:16,960 --> 00:00:21,520
in yesterday's lessons, which is lists. By using a

6
00:00:21,520 --> 00:00:22,600
for loop like this

7
00:00:22,660 --> 00:00:26,860
we can go through each item in a list and perform some action with each

8
00:00:26,890 --> 00:00:27,880
individual item.

9
00:00:28,600 --> 00:00:32,290
So let's try it out in practice. In order to follow along

10
00:00:32,590 --> 00:00:36,730
go ahead and fork the day 5 start rebel.

11
00:00:37,210 --> 00:00:41,200
And once I've explained the concept, then I want you to try it out yourself.

12
00:00:41,920 --> 00:00:46,920
But first, let's say we had a list called fruits and it contained three items,

13
00:00:48,430 --> 00:00:50,320
apple, peach, and pear.

14
00:00:51,370 --> 00:00:55,660
If we wanted to access each item in this list individually and print it out one

15
00:00:55,660 --> 00:00:58,390
by one, then we would use a for loop.

16
00:00:59,290 --> 00:01:01,270
So if we start out with the keyword for,

17
00:01:01,720 --> 00:01:05,620
and then we give a name to a single item.

18
00:01:06,250 --> 00:01:09,160
So in this case, we might call it fruit.

19
00:01:09,880 --> 00:01:12,130
And then we use the in keyword

20
00:01:12,430 --> 00:01:15,640
and finally the list that we want to loop through,

21
00:01:16,090 --> 00:01:17,860
which is our fruits here.

22
00:01:18,580 --> 00:01:23,580
Now we cap it off with a colon and we go on to the next line and notice how it's

23
00:01:24,730 --> 00:01:25,690
indented there.

24
00:01:26,770 --> 00:01:31,770
Now I'm going to go ahead and print the value of each of the fruit variables.

25
00:01:35,080 --> 00:01:36,520
And if I run this code,

26
00:01:36,580 --> 00:01:41,580
you'll see that it loops through my list of fruits and for each of the fruits

27
00:01:42,370 --> 00:01:46,540
inside the list, it prints it out into the console,

28
00:01:46,780 --> 00:01:50,260
apple, peach, pear, in that order. Now,

29
00:01:50,290 --> 00:01:54,670
the important thing to realize here is that basically you can imagine that

30
00:01:54,670 --> 00:01:58,170
behind the scenes, what this code is doing is

31
00:01:58,170 --> 00:02:00,670
it's taking this list of fruits

32
00:02:01,060 --> 00:02:05,140
and it's a signing a variable name, fruit, to each of them.

33
00:02:05,260 --> 00:02:09,039
So the first time this runs fruit is equal to apple,

34
00:02:09,190 --> 00:02:12,100
the second time this runs fruit is equal to peach,

35
00:02:12,610 --> 00:02:15,160
and we can see this even more clearly

36
00:02:15,220 --> 00:02:17,650
if you run it through the Thonny IDE,

37
00:02:17,680 --> 00:02:21,250
which I told you about at the beginning of the course. Now,

38
00:02:21,280 --> 00:02:25,870
if I go ahead and click on the debug icon and I step into each of the steps,

39
00:02:26,170 --> 00:02:31,060
you can see first it establishes that we have a list of three strings,

40
00:02:31,090 --> 00:02:34,750
apple, peach, pear, and then we go into the for loop.

41
00:02:35,170 --> 00:02:40,120
Now notice on the right here I've got all the variables being accounted for.

42
00:02:40,420 --> 00:02:43,300
And the first one it's noticed is the variable fruits,

43
00:02:43,540 --> 00:02:46,870
which holds a list of strings. Now,

44
00:02:46,930 --> 00:02:49,090
as I continue into the for loop,

45
00:02:49,510 --> 00:02:53,530
notice how it's going to look through this list of fruits

46
00:02:54,160 --> 00:02:59,160
and it's going to assign the variable name fruit to each of the items starting

47
00:03:00,460 --> 00:03:01,930
from the first one apple.

48
00:03:02,410 --> 00:03:05,950
So now by the time it's reached line 3,

49
00:03:06,130 --> 00:03:08,260
we've already got this variable called fruit

50
00:03:08,620 --> 00:03:12,790
that's been assigned to the value of apple. And so at this point,

51
00:03:12,820 --> 00:03:15,640
printing out the value of this fruit

52
00:03:15,880 --> 00:03:20,200
it's obviously going to print out apple and you'll see in the next step.

53
00:03:21,880 --> 00:03:25,000
There we go. Now, once I'm done here,

54
00:03:25,120 --> 00:03:28,510
then it's going to loop back to the start of the for loop

55
00:03:28,960 --> 00:03:33,960
and now this variable fruit is going to be assigned to the next value inside the

56
00:03:34,540 --> 00:03:35,410
list of fruits.

57
00:03:35,800 --> 00:03:40,180
So now notice how the variable fruit is attached to the value peach,

58
00:03:40,570 --> 00:03:45,570
and then it continues this and so on and so forth until it prints out each one

59
00:03:46,720 --> 00:03:47,553
of the fruits.

60
00:03:49,390 --> 00:03:53,020
And this really emphasizes the most important aspect of loops.

61
00:03:53,410 --> 00:03:57,940
The loop allows us to execute the same line of code multiple times.

62
00:03:58,390 --> 00:04:01,600
In this case, we're executing the print statement three times,

63
00:04:01,960 --> 00:04:05,590
but our for loop isn't limited to just executing a single statement.

64
00:04:06,010 --> 00:04:08,950
We don't just have to print out the name of an item in the list.

65
00:04:09,310 --> 00:04:12,460
We can execute a whole block of statements multiple times,

66
00:04:12,910 --> 00:04:17,769
and we can do many things inside this for loop and by inside, I mean indented.

67
00:04:18,790 --> 00:04:21,820
So let's say that in addition to printing out the fruit,

68
00:04:22,240 --> 00:04:26,980
I'm going to write another print statement and I'm going to not only print out

69
00:04:26,980 --> 00:04:27,940
the name of the fruit,

70
00:04:28,240 --> 00:04:33,240
but I'm also going to say fruit + + "Pie."

71
00:04:33,820 --> 00:04:36,940
So when I run this code, what do you think will happen?

72
00:04:39,730 --> 00:04:44,680
Well, it prints out apple, and then it prints out Apple Pie

73
00:04:45,220 --> 00:04:49,270
And then it goes back to the start and it assigns the variable fruit to the next

74
00:04:49,270 --> 00:04:52,360
item, peach peach pie, pear pear pie.

75
00:04:53,080 --> 00:04:58,080
So this is how we can implement a simple for loop that loops through a list

76
00:04:58,930 --> 00:05:03,370
and assigns a variable name to each of the items in the list in order,

77
00:05:03,760 --> 00:05:07,870
and then inside the for loop after the colon, after some indentation,

78
00:05:08,140 --> 00:05:13,140
we can do something with that temporary variable for each of the items.

79
00:05:14,470 --> 00:05:19,470
Now I've been talking a lot about the concept of being inside a for loop versus

80
00:05:20,530 --> 00:05:25,210
being outside a for loop. And this is really, really important.

81
00:05:25,510 --> 00:05:30,130
Whenever you see a colon say in our if statement that we saw previously,

82
00:05:30,190 --> 00:05:32,350
or the for loop that we're using here,

83
00:05:32,860 --> 00:05:35,380
the indentation is really,

84
00:05:35,380 --> 00:05:38,470
really important because if it's indented,

85
00:05:38,770 --> 00:05:42,760
then it means that it's inside the for loop and these instructions

86
00:05:42,820 --> 00:05:47,320
all get carried out for as many times as the for-loop will need to repeat.

87
00:05:47,920 --> 00:05:52,540
Now, if I decided that I wanted to say print my,

88
00:05:52,600 --> 00:05:54,250
uh, fruits,

89
00:05:54,430 --> 00:05:59,430
so my list of fruits up here, and I put it inside my for loop,

90
00:05:59,510 --> 00:06:03,410
so indented after the for loop, then as you can imagine,

91
00:06:03,410 --> 00:06:07,160
it's going to print that for as many times as the loop runs,

92
00:06:07,430 --> 00:06:12,290
which is going to be three because there's three items in our list. Now,

93
00:06:12,320 --> 00:06:15,800
if I had indented that back to the beginning,

94
00:06:16,160 --> 00:06:18,860
so now it's no longer inside the for loop,

95
00:06:19,340 --> 00:06:24,340
then it's only going to print once and it's going to print it after the for 

96
00:06:24,800 --> 00:06:29,480
loop is done. So notice how it's doing the whole Apple, Apple pie,

97
00:06:29,480 --> 00:06:32,090
et cetera. And then once the loop is finished,

98
00:06:32,150 --> 00:06:36,770
then it jumps to the next line and carries out this instruction.

99
00:06:37,280 --> 00:06:39,500
So the indentation is really, really important,

100
00:06:39,500 --> 00:06:41,450
and you have to be really careful with this.

101
00:06:42,620 --> 00:06:44,630
Have a play around with this code

102
00:06:44,870 --> 00:06:47,300
and if you're still struggling to see how it works

103
00:06:47,300 --> 00:06:52,160
then move the code over to Thonny and step through each step one at a time and

104
00:06:52,160 --> 00:06:53,120
see how it works.

105
00:06:53,600 --> 00:06:57,260
But I hope you're starting to see how loops are really handy at executing an

106
00:06:57,260 --> 00:06:59,600
instruction over and over and over again,

107
00:06:59,990 --> 00:07:02,510
getting the computer to save us time and energy.

108
00:07:03,110 --> 00:07:07,970
A really good example of when loops would come in really handy is,

109
00:07:08,000 --> 00:07:09,920
you know, how Bart Simpson gets punished

110
00:07:09,920 --> 00:07:14,450
and it has to write out a sentence over and over again on the Blackboard. Well,

111
00:07:14,600 --> 00:07:19,070
if only Bart was a programmer, then he would be able to use loops to do this

112
00:07:19,310 --> 00:07:22,520
and he would be able to chill in the corner. Now,

113
00:07:22,760 --> 00:07:24,890
once you're happy with this type of for-loop,

114
00:07:25,190 --> 00:07:28,730
then head over to the next lesson where I've got a coding exercise

115
00:07:28,940 --> 00:07:31,370
that's going to put your knowledge to the test. All right.

116
00:07:31,370 --> 00:07:32,150
So I'll see you there.

1
00:00:00,570 --> 00:00:04,740
Head over to day 5.1, the average height exercise.

2
00:00:06,000 --> 00:00:09,300
Now the instructions are that you're going to write a program

3
00:00:09,390 --> 00:00:13,470
that's going to calculate the average student height from a list of heights.

4
00:00:13,830 --> 00:00:14,880
So for example,

5
00:00:14,940 --> 00:00:18,420
let's say we had a list of student heights that looks something like this,

6
00:00:18,780 --> 00:00:21,150
then you're going to be using a for loop,

7
00:00:21,420 --> 00:00:24,030
hopefully, to figure out the average.

8
00:00:24,690 --> 00:00:29,160
And the average can be calculated by adding up everybody's height and then dividing

9
00:00:29,160 --> 00:00:31,770
it by the number of students inside the list.

10
00:00:32,369 --> 00:00:35,730
And then I want you to round it to the nearest whole number.

11
00:00:37,620 --> 00:00:38,010
Now,

12
00:00:38,010 --> 00:00:40,350
notice how we've got some starting code here.

13
00:00:40,590 --> 00:00:45,590
And this is just for us to be able to input a list of student heights for testing

14
00:00:46,200 --> 00:00:50,160
and see if your code actually works. So if you go ahead and run the code,

15
00:00:50,430 --> 00:00:54,180
then you'll notice that it asks you for a list of student heights.

16
00:00:54,660 --> 00:00:57,410
And the input is going to look something like this.

17
00:00:57,420 --> 00:01:00,810
They're just going to be a bunch of numbers separated by a space.

18
00:01:01,140 --> 00:01:04,560
So if I go ahead and paste that in there, then I hit enter,

19
00:01:04,890 --> 00:01:09,890
then notice how this line on line five is going to print it out just as a normal

20
00:01:10,380 --> 00:01:13,290
list full of numbers. Now,

21
00:01:13,320 --> 00:01:17,040
Python has some really useful functions as we've seen.

22
00:01:17,100 --> 00:01:22,100
We've seen that we could use the len function to calculate the size of a

23
00:01:22,770 --> 00:01:23,760
particular list.

24
00:01:24,180 --> 00:01:28,440
So if I go ahead and print my length of student heights,

25
00:01:29,490 --> 00:01:32,160
and then I paste my student heights in here,

26
00:01:32,490 --> 00:01:37,080
then you can see that I get five printed by calculating the number of items in

27
00:01:37,080 --> 00:01:41,310
here. Now, Python also has something called sum,

28
00:01:41,820 --> 00:01:46,820
and this gives us the total of all the items from a list.

29
00:01:48,330 --> 00:01:51,840
So in this case, all of these added up would be 857.

30
00:01:52,590 --> 00:01:53,760
Now your job though,

31
00:01:53,790 --> 00:01:58,140
is to figure out how these functions actually work under the hood.

32
00:01:58,680 --> 00:02:01,020
In order to fully complete this challenge,

33
00:02:01,440 --> 00:02:06,180
you can't use the len function or the sum function.

34
00:02:06,510 --> 00:02:11,190
Instead, you have to figure out another way through the use of for loops

35
00:02:11,580 --> 00:02:15,720
where you can add each of the items inside the list together,

36
00:02:16,320 --> 00:02:21,320
and you can use a for loop to figure out how many items there are in this list

37
00:02:22,470 --> 00:02:27,470
and use that to calculate the average. So you can't use either of these

38
00:02:27,510 --> 00:02:28,343
functions

39
00:02:28,560 --> 00:02:32,130
and instead, you have to rely on what you learned in the last lesson to complete

40
00:02:32,130 --> 00:02:36,360
this challenge. So have a think about it, and once you are ready, give that a go.

41
00:02:42,980 --> 00:02:43,250
Now,

42
00:02:43,250 --> 00:02:46,460
we know that we can't use either of these functions,

43
00:02:46,520 --> 00:02:50,330
the sum function or the length function, because if we could,

44
00:02:50,360 --> 00:02:54,620
then this challenge would be super easy and we would be able to calculate the

45
00:02:54,620 --> 00:02:58,910
average by getting the total height, by getting the

46
00:02:59,890 --> 00:03:03,100
sum of all of the items inside student heights.

47
00:03:03,610 --> 00:03:06,610
And then we can calculate the number of students

48
00:03:09,040 --> 00:03:10,930
by using the length function

49
00:03:10,990 --> 00:03:14,620
to calculate the number of items inside the list.

50
00:03:15,070 --> 00:03:16,810
And then we would get the average height

51
00:03:19,000 --> 00:03:22,900
by dividing the total height by the numbers of students.

52
00:03:23,230 --> 00:03:28,230
And then we would be able to round this value off and print it out.

53
00:03:30,520 --> 00:03:34,390
But this, as you noticed, doesn't use a single for loop.

54
00:03:34,750 --> 00:03:37,990
And the last thing we learned about was a for loop.

55
00:03:38,080 --> 00:03:43,080
So this is definitely not the right way to solve the challenge. It works,

56
00:03:43,360 --> 00:03:48,360
but what I wanted you to do is to figure out how the sum and the len functions

57
00:03:48,940 --> 00:03:52,960
work under the hood. How is it actually implemented?

58
00:03:53,560 --> 00:03:56,530
And to do that, we have to use a for loop.

59
00:03:56,920 --> 00:04:00,340
So let's have a think about how we would first tackle this one,

60
00:04:00,940 --> 00:04:05,940
where we get the total of all the items inside student heights.

61
00:04:06,970 --> 00:04:11,970
So we basically want to add each of them together until we get the total.

62
00:04:12,730 --> 00:04:16,839
Now, we can do this by simply using a for loop as you've learned in the last

63
00:04:16,839 --> 00:04:20,649
lesson. So if we start off total_height as zero,

64
00:04:21,160 --> 00:04:26,160
and then we write a for loop and we say for height in student_heights,

65
00:04:29,350 --> 00:04:30,850
and then we add a colon,

66
00:04:31,540 --> 00:04:35,350
then now we're going to loop through each of the heights inside this list

67
00:04:35,620 --> 00:04:37,930
and we're going to add it to our total height.

68
00:04:38,200 --> 00:04:43,200
So we can say total_height equals previous value of total_height plus height.

69
00:04:44,170 --> 00:04:45,730
Or as you might remember,

70
00:04:45,760 --> 00:04:50,740
the shortened version of this is just total height plus equals each of the

71
00:04:50,740 --> 00:04:51,573
heights.

72
00:04:51,790 --> 00:04:56,790
So now we can go ahead and check whether if this works by printing out the final

73
00:04:57,970 --> 00:05:02,410
value of total_height. And notice how I'm doing it outside the loop

74
00:05:02,530 --> 00:05:05,500
by making sure that it's not indented like this.

75
00:05:05,980 --> 00:05:10,980
So let's run our code and I'm going to paste in those numbers as the demo

76
00:05:12,310 --> 00:05:15,340
numbers. And then we get the value

77
00:05:15,340 --> 00:05:20,230
total_height is 857, which if you take a calculator,

78
00:05:20,560 --> 00:05:23,170
you'll be able to verify its exactly right.

79
00:05:23,980 --> 00:05:27,940
So now we've basically replicated how the sum function works.

80
00:05:28,450 --> 00:05:31,900
And now that we can try and replicate how the len function works.

81
00:05:32,380 --> 00:05:32,920
We know that

82
00:05:32,920 --> 00:05:37,630
basically the len function figures out how many items are in a particular list.

83
00:05:38,200 --> 00:05:42,490
How can we do this using a for loop instead? Well,

84
00:05:42,490 --> 00:05:46,360
what if we do something similar to what we did above where we start off the

85
00:05:46,360 --> 00:05:48,340
numbers of students as zero,

86
00:05:48,820 --> 00:05:53,820
and then we write a for loop for students in student heights, and inside our for

87
00:05:55,450 --> 00:05:55,990
loop

88
00:05:55,990 --> 00:06:00,990
all that we do is that we add one to our numbers of students each time

89
00:06:02,600 --> 00:06:06,440
our for loop runs. And if you remember from the last lesson,

90
00:06:06,440 --> 00:06:11,440
I said that the for loop will run for as many times as there are items inside

91
00:06:12,320 --> 00:06:15,440
the list. If there are five items inside the list,

92
00:06:15,740 --> 00:06:18,530
then the for loop is going to run five times,

93
00:06:18,770 --> 00:06:22,220
which means this line of code is going to be called five times,

94
00:06:22,460 --> 00:06:26,450
which means we add five to our numbers of students

95
00:06:26,750 --> 00:06:30,140
and we end up with the total_length of the list.

96
00:06:31,070 --> 00:06:36,070
So now let's go ahead and print this number of students out and run our code.

97
00:06:38,300 --> 00:06:40,310
And I'm going to paste in the same

98
00:06:40,310 --> 00:06:43,580
five numbers in the example input.

99
00:06:44,180 --> 00:06:49,180
And you can see that the first value that comes out is my total height,

100
00:06:49,760 --> 00:06:54,050
the second value is the length of the list, the number of items in the list

101
00:06:54,080 --> 00:06:58,550
which is five, we can verify that. And the final one is the average

102
00:06:58,610 --> 00:07:00,740
which matches up with the example output.

103
00:07:01,310 --> 00:07:05,720
So now let's get rid of our print statements by commenting them out.

104
00:07:08,210 --> 00:07:08,510
Now,

105
00:07:08,510 --> 00:07:12,290
one of the things I want to point out to you that you might've noticed is that

106
00:07:12,620 --> 00:07:17,150
in the first for loop, even though we're looping through the same list,

107
00:07:17,600 --> 00:07:20,150
I've called each of the items height.

108
00:07:20,600 --> 00:07:24,140
And in the second for-loop I've called them students. Now,

109
00:07:24,140 --> 00:07:29,030
whatever we name each of the items inside the list, it's totally up to you.

110
00:07:29,030 --> 00:07:32,240
If you could call it h, you could call it x,

111
00:07:32,270 --> 00:07:34,700
you could call it basically anything you want

112
00:07:35,030 --> 00:07:38,780
as long as you are consistent with using it inside the for loop.

113
00:07:39,260 --> 00:07:42,200
So if you're calling each of the items inside the list

114
00:07:42,320 --> 00:07:45,530
h, then when you're using it inside the for loop,

115
00:07:45,530 --> 00:07:47,660
when you're modifying it or doing something with it,

116
00:07:47,960 --> 00:07:50,870
then you are going to refer to it by the same name. Now,

117
00:07:51,020 --> 00:07:54,380
usually it's a good idea to give it the name

118
00:07:54,620 --> 00:07:59,180
which is the singular form of each of the items in the list.

119
00:07:59,540 --> 00:08:04,520
For example, previously, we had a list of fruits. So each item was called fruit,

120
00:08:04,580 --> 00:08:08,480
the singular form. And in this case, we have a bunch of heights,

121
00:08:08,750 --> 00:08:12,560
so each of them I've called height. In the second for loop

122
00:08:12,740 --> 00:08:17,030
I've decided to call each of the items a student. Now, in this case,

123
00:08:17,360 --> 00:08:21,380
even though you have two for loops, you can call them the same thing.

124
00:08:21,950 --> 00:08:26,360
But sometimes I find it a little bit confusing to have the same name in two

125
00:08:26,360 --> 00:08:29,780
for loops. I prefer it this way, but it's totally up to you.

126
00:08:30,050 --> 00:08:34,850
Just follow the good practice of using a singular form of whatever is contained

127
00:08:34,850 --> 00:08:37,549
in a list when you write a for loop like this,

128
00:08:37,730 --> 00:08:39,320
and you'll have less trouble down the line.

1
00:00:00,030 --> 00:00:02,850
So now that you've gotten a taste for for loops,

2
00:00:03,120 --> 00:00:05,670
it's time to complete another challenge

3
00:00:05,880 --> 00:00:10,880
which is going to stretch you a little bit further. Head over to day 5.2 highest

4
00:00:12,060 --> 00:00:12,893
score,

5
00:00:13,350 --> 00:00:17,640
and we're going to get a list of students scores,

6
00:00:18,210 --> 00:00:20,700
and it's a list of numbers again.

7
00:00:21,390 --> 00:00:23,760
The idea is that you are going to write some code

8
00:00:24,060 --> 00:00:27,690
that's going to output the highest score in the class.

9
00:00:28,050 --> 00:00:30,150
So you're going to look through this list

10
00:00:30,420 --> 00:00:35,420
using a for loop and figure out which of the scores inside the list is the

11
00:00:36,090 --> 00:00:40,470
highest value. Now we can see pretty much at a glance that inside this list,

12
00:00:40,500 --> 00:00:44,670
91 is the highest. But remember that when you test your code,

13
00:00:45,090 --> 00:00:49,200
you won't be able to see the input. So you won't be able to cheat that way.

14
00:00:49,650 --> 00:00:54,480
Instead, you have to do this using code. Now, just as in the last lesson

15
00:00:54,480 --> 00:00:58,560
I mentioned that Python has some pretty useful functions that help us do a lot

16
00:00:58,560 --> 00:01:01,890
of these commonly needed things very easily

17
00:01:02,100 --> 00:01:05,580
such as the sum and the len functions, well, in this case,

18
00:01:05,910 --> 00:01:08,700
there's actually something called the max function.

19
00:01:09,240 --> 00:01:11,400
So if we pass a list,

20
00:01:11,460 --> 00:01:15,810
let's say the student_scores list into a max function

21
00:01:16,290 --> 00:01:21,290
and then I go ahead and print out the maximum value from my list of student_

22
00:01:22,590 --> 00:01:26,700
scores. So let's run this code and I'm going to use the example input,

23
00:01:26,970 --> 00:01:31,500
so a bunch of numbers separated by a space, and hit enter,

24
00:01:31,920 --> 00:01:35,190
and you can see it tells me that 91 is the highest value.

25
00:01:35,760 --> 00:01:38,340
Now there's also the min function

26
00:01:38,820 --> 00:01:43,560
which basically will give me the lowest value inside a particular list,

27
00:01:43,830 --> 00:01:47,850
which in this case is 55, but that's too easy.

28
00:01:48,330 --> 00:01:52,530
I don't want you to use the max or the min functions. Instead,

29
00:01:52,740 --> 00:01:57,210
you have to use what you've learned about for loops to replicate the underlying

30
00:01:57,210 --> 00:02:00,150
functionality of this max function.

31
00:02:00,600 --> 00:02:04,530
Because people tend to use Python to do a lot of data manipulation,

32
00:02:04,710 --> 00:02:07,020
to do a lot of mathematical calculations.

33
00:02:07,260 --> 00:02:09,690
It has a lot of these convenient functions for you.

34
00:02:10,169 --> 00:02:14,130
But let's say you moved to a different language and you work on something else,

35
00:02:14,220 --> 00:02:15,540
then these might not exist.

36
00:02:15,900 --> 00:02:20,070
So understanding the underlying logic and being able to write out the code

37
00:02:20,340 --> 00:02:24,780
using things that every programming language has like the for loop will mean

38
00:02:24,780 --> 00:02:28,440
that you will become a much, much better programmer in the process.

39
00:02:28,980 --> 00:02:33,980
So try and replicate the functionality of the max function and the output should

40
00:02:34,470 --> 00:02:35,340
have the words

41
00:02:35,580 --> 00:02:40,580
The highest score in the class is : and then a space and then the actual max

42
00:02:42,900 --> 00:02:47,010
value. So this is what should happen. Pause the video now,

43
00:02:47,040 --> 00:02:51,510
and have a think about how you would write your code in order to get hold of the

44
00:02:51,510 --> 00:02:53,130
maximum value from a list.

45
00:02:57,990 --> 00:03:01,480
All right. So did you manage to complete this challenge? If not,

46
00:03:01,600 --> 00:03:05,470
and if you want to see how I do it, then continue watching along.

47
00:03:06,610 --> 00:03:10,960
The first thing we want to do is we probably want to get a hold of each of the

48
00:03:10,960 --> 00:03:14,140
scores inside our list of student scores.

49
00:03:14,560 --> 00:03:18,520
So I'm going to write something like for score in student_scores,

50
00:03:19,060 --> 00:03:19,630
so again,

51
00:03:19,630 --> 00:03:24,520
keeping that convention of singular from plural. Now,

52
00:03:24,610 --> 00:03:27,370
inside the loop, what can I do? Now

53
00:03:27,370 --> 00:03:30,280
let's say I had a variable called the highest_score,

54
00:03:30,820 --> 00:03:35,800
and I'm going to start it off as zero. And then inside my loop,

55
00:03:35,950 --> 00:03:40,950
I can use an if statement to check, well is the current score that I'm looping

56
00:03:42,220 --> 00:03:46,540
through greater than the highest score that I've got.

57
00:03:47,200 --> 00:03:51,760
Well then if so, that means that this current score should actually be the

58
00:03:51,760 --> 00:03:52,593
highest score.

59
00:03:52,960 --> 00:03:57,550
So I can set my highest_score to equal,

60
00:03:57,580 --> 00:04:01,210
single equals mean assign, double equals mean checking, remember?

61
00:04:01,900 --> 00:04:06,900
And this loop will continue running until I've checked through all the scores

62
00:04:08,110 --> 00:04:09,910
inside my student_scores,

63
00:04:10,360 --> 00:04:13,780
and I've got the highest score stored inside this variable.

64
00:04:14,290 --> 00:04:18,190
So now I can go ahead and print the sentence;

65
00:04:19,089 --> 00:04:22,930
The highest score is this particular value.

66
00:04:22,990 --> 00:04:27,990
So I'm going to use an f-string to insert my highest_score variable inside here.

67
00:04:30,760 --> 00:04:35,530
And if I run my code and use this example input, then you can see

68
00:04:35,530 --> 00:04:38,410
it tells me the high score in the class is 91,

69
00:04:38,860 --> 00:04:42,790
which matches exactly with the example output. Now,

70
00:04:42,820 --> 00:04:46,360
if you're at all confused about how this code works,

71
00:04:46,660 --> 00:04:50,290
then I recommend again, pasting it into Thonny like this.

72
00:04:50,320 --> 00:04:55,320
So you've got a list of scores and then you've got the code in the solution and

73
00:04:55,450 --> 00:04:56,350
click on debug.

74
00:04:56,560 --> 00:05:01,560
And you can see how we actually step through each of the stages where we start

75
00:05:02,830 --> 00:05:07,240
off with a highest score being equal to zero, so that's where it is,

76
00:05:08,320 --> 00:05:13,320
and then we continue into the loop where we go through each of the scores inside

77
00:05:13,930 --> 00:05:17,890
the student_scores, so the first one is going to be 78.

78
00:05:18,490 --> 00:05:22,960
So now we've got this variable score which is tied to the value of 78.

79
00:05:23,470 --> 00:05:27,100
And then we go and check if the score,

80
00:05:27,640 --> 00:05:32,560
which is 78, is greater than the highest score, which is zero. Well,

81
00:05:32,560 --> 00:05:36,070
that's obviously true, right? So if that's true,

82
00:05:36,070 --> 00:05:38,230
then it's going to carry out the next line of code,

83
00:05:38,620 --> 00:05:42,220
which is that the highest score is now equal to score.

84
00:05:42,910 --> 00:05:47,910
So now notice how this highest_score variable is going to update to the first

85
00:05:49,150 --> 00:05:51,940
value because 78 is greater than zero.

86
00:05:52,480 --> 00:05:55,990
Now we go back to the start of the loop and we go to the next value,

87
00:05:55,990 --> 00:06:00,990
65. And 65 is now checked against the highest score. Is 65 greater than 78?

88
00:06:04,430 --> 00:06:07,340
Well, no, that's not true. So this is false.

89
00:06:07,640 --> 00:06:12,640
And so the highest score is left alone. And we continue back to the next value.

90
00:06:13,130 --> 00:06:18,130
So now our score is equal to 89 and our highest_score is still equal to 78. Is 89

91
00:06:20,750 --> 00:06:22,730
greater than 78? Yes.

92
00:06:22,790 --> 00:06:27,290
So now we reset the highest_score to the new value,

93
00:06:27,620 --> 00:06:28,730
which is 89.

94
00:06:29,030 --> 00:06:34,030
And it continues this loop until it gets to the end and it's found the highest

95
00:06:34,220 --> 00:06:37,430
value and it prints it out into the console.

96
00:06:38,240 --> 00:06:42,410
Play around with the debug and step through each of the stages to see how it

97
00:06:42,410 --> 00:06:46,340
works and compare it with what's happening with each of the variables on the

98
00:06:46,340 --> 00:06:47,810
right. This is a really,

99
00:06:47,810 --> 00:06:51,620
really useful way of wrapping your head around all of this complex,

100
00:06:51,620 --> 00:06:56,480
looping and conditionals. And once you've understood everything that's going on,

101
00:06:56,660 --> 00:07:00,830
then you can continue to the next lesson where we're going to talk about another

102
00:07:00,830 --> 00:07:05,030
type of for loop, the for loop using a range operator.

103
00:07:05,210 --> 00:07:08,000
So for all of that and more, I'll see you in the next lesson.

1
00:00:00,580 --> 00:00:01,960
Now up to this point,

2
00:00:01,990 --> 00:00:06,640
we've only been using for loops in association with lists.

3
00:00:07,030 --> 00:00:11,830
So we've been looping through the list and getting hold of each of the items in

4
00:00:11,830 --> 00:00:14,200
the list and then doing something with it, right?

5
00:00:14,740 --> 00:00:18,940
But we're not always going to be working with lists and using for loops.

6
00:00:19,390 --> 00:00:23,920
Sometimes we might want to use a loop completely independent of a list.

7
00:00:24,640 --> 00:00:29,080
And a good example of this is when Carl Gauss the German

8
00:00:29,080 --> 00:00:32,380
mathematician was just a child when he was 10 years old,

9
00:00:32,710 --> 00:00:36,790
his math teacher gave him an exercise that she probably thought would tie him up

10
00:00:36,790 --> 00:00:37,623
for it a little while.

11
00:00:38,080 --> 00:00:43,080
And the idea was to get him to add all of the numbers from 1 to 100.

12
00:00:43,990 --> 00:00:47,470
So 1 + 2 + 3 + 4 + 5, et cetera,

13
00:00:47,710 --> 00:00:49,660
all the way until a hundred.

14
00:00:50,500 --> 00:00:54,010
And even though she thought this would keep him busy for an hour or so getting

15
00:00:54,010 --> 00:00:58,000
this young child to add up these numbers and I can have some peace and quiet

16
00:00:58,000 --> 00:00:59,020
scrolling on Facebook,

17
00:00:59,440 --> 00:01:03,160
but unfortunately he came back to her within two minutes and gave her the

18
00:01:03,160 --> 00:01:06,880
answer. So how did he work it out? Well,

19
00:01:06,910 --> 00:01:11,140
here's actually a really smart kid and he figured out that if you flip the

20
00:01:11,140 --> 00:01:14,560
numbers around, so 100 + 99 + 98,

21
00:01:14,950 --> 00:01:17,650
and you'll look at both of these two lines,

22
00:01:17,980 --> 00:01:21,700
you can see that 1 + 100 = 101, 2

23
00:01:21,700 --> 00:01:26,410
+ 99 = 101, 3 + 98 = 101, basically,

24
00:01:26,410 --> 00:01:28,450
if you tie all of these numbers together,

25
00:01:28,720 --> 00:01:31,690
there's actually 50 pairs of 101.

26
00:01:31,960 --> 00:01:36,960
So he could simply just do 50 multiplied by 101 which is 5,050.

27
00:01:38,080 --> 00:01:39,790
And that's how he figured out the answer.

28
00:01:40,450 --> 00:01:45,450
But we can actually outshine Gaus because we can do this calculation in less

29
00:01:45,670 --> 00:01:50,230
than a minute, just by writing a few lines of code. But in order to do this,

30
00:01:50,380 --> 00:01:55,380
we first have to learn about using for loops with the range function.

31
00:01:56,770 --> 00:02:00,460
Now the range function is something that is really, really helpful

32
00:02:00,760 --> 00:02:04,510
if you want to generate a range of numbers to loop through.

33
00:02:05,290 --> 00:02:08,229
And the syntax looks something like this.

34
00:02:08,410 --> 00:02:12,940
So we've still got our for and our in keywords highlighted in blue,

35
00:02:13,570 --> 00:02:16,540
but instead of looping through a list,

36
00:02:17,050 --> 00:02:21,910
we define how our loop is going to work by creating a range.

37
00:02:22,300 --> 00:02:23,050
So in this case,

38
00:02:23,050 --> 00:02:28,050
I'm creating a range between a and b and then I'm going to get hold of each

39
00:02:29,050 --> 00:02:32,320
number in that range and do something with that number.

40
00:02:33,700 --> 00:02:38,200
So for example, if I wrote for number in range,

41
00:02:38,560 --> 00:02:42,130
and then my range is going to be 1, 10.

42
00:02:42,520 --> 00:02:46,510
So this is going to be the range that I'm going to create between 1 and 10

43
00:02:46,870 --> 00:02:50,470
and then I want to get hold of each of the numbers inside that range.

44
00:02:50,980 --> 00:02:55,810
And this is going to be between 1 and 10 and not including 10.

45
00:02:56,170 --> 00:03:00,340
So if I go ahead and print out the number that I create from my for loop,

46
00:03:00,820 --> 00:03:05,800
then you'll see that what happens is it prints 1 2 3 4 5 

47
00:03:05,800 --> 00:03:10,210
6 7 8 9, but not the last digit, which I've included here.

48
00:03:10,660 --> 00:03:14,680
So if I wanted all of the numbers from 1 to 10,

49
00:03:15,010 --> 00:03:17,920
I actually have to set a range between 1 and 11.

50
00:03:18,610 --> 00:03:20,230
And now when you run the code,

51
00:03:20,290 --> 00:03:23,050
you can see that it goes from 1 all the way up to 10.

52
00:03:24,580 --> 00:03:26,320
Now by default,

53
00:03:26,380 --> 00:03:31,380
the range function will step through all the numbers from the start to the end,

54
00:03:32,710 --> 00:03:35,170
and it will increase by 1. Now,

55
00:03:35,170 --> 00:03:37,870
if you want it to increase by any other number,

56
00:03:38,020 --> 00:03:43,020
then you have to add another comma to the end of it and specify how large you

57
00:03:44,140 --> 00:03:48,910
want the step to be. So let's say we changed the step size to three.

58
00:03:49,390 --> 00:03:51,610
Now, if I rerun the same code,

59
00:03:51,850 --> 00:03:55,930
you'll see that it goes from one and then it steps by three to four and then it

60
00:03:55,930 --> 00:03:59,260
steps by three. And then it steps by three, finally to 10.

61
00:04:01,000 --> 00:04:04,180
Now let's come back to the problem that I mentioned at the beginning of this

62
00:04:04,180 --> 00:04:05,013
lesson.

63
00:04:05,170 --> 00:04:10,170
How can we add up all of the numbers from 1 to 100 by using code?

64
00:04:10,720 --> 00:04:11,020
Well,

65
00:04:11,020 --> 00:04:14,590
it's going to involve a for loop and it's going to involve the range function

66
00:04:15,070 --> 00:04:20,070
because we're going to get hold of every number in the range between 1 and

67
00:04:20,769 --> 00:04:21,490
100,

68
00:04:21,490 --> 00:04:26,050
so we need to write 101. Once we've got hold of all of these numbers,

69
00:04:26,110 --> 00:04:29,830
it's as simple as using a accumulator,

70
00:04:29,860 --> 00:04:34,810
so let's say a total = 0. And then inside the for loop,

71
00:04:34,810 --> 00:04:36,100
so that means indented,

72
00:04:36,370 --> 00:04:41,370
we're going to say total += number.

73
00:04:43,090 --> 00:04:48,090
So now it's going to add every number in this range to the total starting from

74
00:04:48,790 --> 00:04:49,623
zero.

75
00:04:49,900 --> 00:04:54,760
And this is basically going to give us the sum of every number from 1 to 100.

76
00:04:55,150 --> 00:04:59,770
So let's go ahead and print it out and see if it matches Gauss's value.

77
00:05:01,690 --> 00:05:04,570
And there you have it 5,050.

78
00:05:05,440 --> 00:05:09,160
So now that we've beaten Gauss at his own game of math using programming,

79
00:05:09,430 --> 00:05:13,240
let's head over to the next lesson and try to complete a challenge using the

80
00:05:13,240 --> 00:05:17,770
range function to see if you managed to internalize and understand everything we

81
00:05:17,770 --> 00:05:21,760
talked about in this lesson. So for all of that and more, I'll see you there.

1
00:00:00,120 --> 00:00:03,540
Click on 5.3 adding evens.

2
00:00:05,190 --> 00:00:10,190
The exercise is kind of similar to what Gauss had to do that I showed you in the

3
00:00:11,610 --> 00:00:13,890
last lesson, but in your case,

4
00:00:14,070 --> 00:00:19,070
I want you to calculate the sum of all the even numbers from 1 to 100,

5
00:00:20,310 --> 00:00:24,150
including 1 and 100. So for example,

6
00:00:24,150 --> 00:00:26,730
it might be two plus four plus six plus eight,

7
00:00:26,760 --> 00:00:29,640
and so on and so forth until you get to a hundred.

8
00:00:30,210 --> 00:00:34,260
It's a little bit more complicated than what the ten-year-old had to do.

9
00:00:34,680 --> 00:00:38,280
And the important thing to remember is that there should only be one print

10
00:00:38,280 --> 00:00:40,170
statement in your output.

11
00:00:40,410 --> 00:00:44,940
It should just print the final total and not every step of the calculation.

12
00:00:45,720 --> 00:00:48,270
So have a think about how you might solve this challenge,

13
00:00:48,660 --> 00:00:50,610
pause the video and try to give this a go.

14
00:00:56,450 --> 00:00:56,750
All right.

15
00:00:56,750 --> 00:01:00,590
So there's actually quite a few ways that you could have solved this challenge.

16
00:01:01,160 --> 00:01:01,400
Now,

17
00:01:01,400 --> 00:01:05,480
one of the ways would have been using what we learned from the last lesson and the

18
00:01:05,480 --> 00:01:09,680
ability to create a range function using a different step size.

19
00:01:09,920 --> 00:01:10,753
I'll show you what I mean.

20
00:01:11,150 --> 00:01:16,150
So let's create a full loop where we say for every number in the range between

21
00:01:16,970 --> 00:01:20,030
1 to 100, so that's 101,

22
00:01:20,720 --> 00:01:24,110
then we're going to do something with each number, right? Namely,

23
00:01:24,110 --> 00:01:27,200
we're probably going to create a variable called total

24
00:01:27,590 --> 00:01:32,590
and then we're going to add each of the even numbers together and accumulate it

25
00:01:32,930 --> 00:01:34,190
inside this variable.

26
00:01:34,940 --> 00:01:39,590
Now remember that I mentioned that the range function actually has a third thing

27
00:01:39,590 --> 00:01:42,920
that you can add to it, not just the start and the end,

28
00:01:43,160 --> 00:01:47,210
but also the step size. so we can change the step size to two,

29
00:01:47,660 --> 00:01:52,660
and then now what it's going to do is it's going to go through 1 to 100 and

30
00:01:54,440 --> 00:01:57,230
it's going to increase the step size by two.

31
00:01:58,490 --> 00:02:01,820
So that means if we print this range as it is right now,

32
00:02:01,880 --> 00:02:06,560
it's going to give us one plus two which is three, plus two

33
00:02:06,560 --> 00:02:08,840
which is five and so on and so forth.

34
00:02:09,259 --> 00:02:12,560
But if we change the range to start off from two

35
00:02:12,710 --> 00:02:16,640
which is the first number that we have to start adding in our sequence, and then

36
00:02:16,640 --> 00:02:18,860
increase it by two every single time,

37
00:02:19,130 --> 00:02:23,570
then we end up with a range that includes all of the even numbers up to a

38
00:02:23,570 --> 00:02:26,510
hundred. And I'll show you if I run this code right now.

39
00:02:27,290 --> 00:02:32,000
So the next part is simple. All we have to do is to add the number to

40
00:02:32,000 --> 00:02:35,420
the current total. So total += number.

41
00:02:35,900 --> 00:02:38,570
And then finally outside the for loop,

42
00:02:38,720 --> 00:02:42,230
you can go ahead and print that total. Now,

43
00:02:42,380 --> 00:02:46,490
when I go ahead and run this code now, it's going to give me just the total.

44
00:02:46,850 --> 00:02:50,960
Now remember that the indentation really matters because if I have it like this,

45
00:02:51,260 --> 00:02:54,800
then it's going to give me the total for every step of the calculation,

46
00:02:55,100 --> 00:03:00,100
because it's now included in the for loop and will be executed for as many times

47
00:03:00,910 --> 00:03:05,350
as the for loop runs. But if I remove the indentation, then the

48
00:03:05,350 --> 00:03:08,680
for loop is just this and this is outside of it

49
00:03:08,920 --> 00:03:12,160
so it's only going to give it to me once everything has been done

50
00:03:12,280 --> 00:03:16,360
and I've got the final total. And it's the correct solution.

51
00:03:17,140 --> 00:03:19,870
But you might have also done it in a different way.

52
00:03:20,200 --> 00:03:23,370
You might have said for a number in range,

53
00:03:24,090 --> 00:03:25,860
1 to 101,

54
00:03:26,820 --> 00:03:31,820
and you had some sort of another total, let's call it total2 

55
00:03:34,200 --> 00:03:35,460
and started at zero,

56
00:03:35,880 --> 00:03:40,880
and then we say that if the number % 2 is equal to 0,

57
00:03:41,970 --> 00:03:44,490
so if it's even essentially,

58
00:03:44,730 --> 00:03:49,350
then we're going to add this number to the total2.

59
00:03:51,060 --> 00:03:54,480
Finally, outside of the if and outside of the for,

60
00:03:54,750 --> 00:03:58,620
we're going to print the final total. Now,

61
00:03:58,650 --> 00:04:01,140
if I just run the code, then you can see

62
00:04:01,200 --> 00:04:04,350
I get exactly the same number as before.

63
00:04:05,310 --> 00:04:09,240
So if you chose to solve this challenge in either of these ways,

64
00:04:09,270 --> 00:04:11,910
then you've succeeded. They're both right.

65
00:04:12,390 --> 00:04:15,180
And there's probably even other ways that you could solve this as well.

66
00:04:15,480 --> 00:04:18,570
But these two, I suspect will be the most popular approaches.

67
00:04:19,769 --> 00:04:24,150
Now in the next lesson, I've got another coding exercise for you

68
00:04:24,330 --> 00:04:29,160
and it's probably one of the top interview questions that programmers get asked

69
00:04:29,220 --> 00:04:34,020
when they're being interviewed for a job. So head over there and give it a go.

1
00:00:00,180 --> 00:00:03,300
All right guys, I've got a fun coding challenge for you today,

2
00:00:03,570 --> 00:00:06,450
and it is a problem called fizzbuzz.

3
00:00:06,960 --> 00:00:11,910
Now this is probably one of the most asked questions at interviews for

4
00:00:11,910 --> 00:00:14,910
programmers because it tests the way that you think,

5
00:00:15,150 --> 00:00:20,150
and it allows the interviewer to see how you use your logic to solve a problem.

6
00:00:21,840 --> 00:00:24,960
And the problem we're going to tackle is a children's game called

7
00:00:24,960 --> 00:00:29,850
Fizzbuzz. Last time I checked the programmatic solution was actually up on

8
00:00:29,850 --> 00:00:30,540
Wikipedia.

9
00:00:30,540 --> 00:00:34,920
So I recommend reading the Wikipedia article only after you've solved this

10
00:00:34,920 --> 00:00:38,280
Programming challenge. The rules of fizzbuzz are really simple.

11
00:00:38,910 --> 00:00:42,990
Basically, you have a bunch of kids who sit around in a circle and going

12
00:00:42,990 --> 00:00:46,680
clockwise. The first kid says 1, the second kid says 2.

13
00:00:47,100 --> 00:00:51,810
But then when a kid encounters a number that's fully divisible by three,

14
00:00:52,320 --> 00:00:55,920
then instead of saying that number, he's going to say Fizz.

15
00:00:57,180 --> 00:00:59,310
And when the number is divisible by five,

16
00:00:59,610 --> 00:01:02,220
instead of saying the number, they should say Buzz.

17
00:01:02,820 --> 00:01:06,900
And if the number is divisible by both three and five, for example, 15,

18
00:01:07,200 --> 00:01:08,940
then they should say Fizzbuzz.

19
00:01:09,420 --> 00:01:14,420
So your program is going to replicate this for all the numbers up to and

20
00:01:14,610 --> 00:01:18,840
including a hundred. To start off, it will probably look something like this.

21
00:01:18,900 --> 00:01:20,970
It's going to print one, and then on the next line

22
00:01:20,970 --> 00:01:23,130
it will print two and then fizz,

23
00:01:23,160 --> 00:01:27,030
because three is divisible by three. And then four,

24
00:01:27,210 --> 00:01:29,760
and then five is divisible by five so it's a buzz.

25
00:01:30,390 --> 00:01:34,980
And then six is fizz because it's divisible by three and so on and so forth.

26
00:01:35,460 --> 00:01:39,030
This is what your program has to do. Take a look at the instructions,

27
00:01:39,330 --> 00:01:42,150
make sure that you understand what it is that your program has to do

28
00:01:42,510 --> 00:01:44,880
and then pause the video and try to give this a go.

29
00:01:48,920 --> 00:01:52,760
All right. So the first thing we have to do is to create a range, right?

30
00:01:52,820 --> 00:01:57,820
So let's say that for number in range, and our range is between 1 and 100,

31
00:01:59,930 --> 00:02:02,120
so we have to include 101 in here.

32
00:02:02,840 --> 00:02:07,460
And what we want to do is we want to check whether if the number's divisible by

33
00:02:07,460 --> 00:02:09,139
three, divisible by five,

34
00:02:09,410 --> 00:02:12,920
or if it's divisible by both three and five.

35
00:02:13,760 --> 00:02:18,200
Now we could write our code by doing this in order, right? We could say

36
00:02:18,260 --> 00:02:22,370
if number % 3 is equal to zero,

37
00:02:22,580 --> 00:02:24,320
then it's divisible

38
00:02:25,700 --> 00:02:26,750
by three.

39
00:02:28,700 --> 00:02:32,090
So you might think that you could write the code like this,

40
00:02:32,390 --> 00:02:35,720
but there is a crucial problem in the logic here

41
00:02:36,140 --> 00:02:40,790
namely that we know that the if, elif, else statements will stop

42
00:02:41,090 --> 00:02:44,750
once it's found one statement that's true. For example,

43
00:02:44,990 --> 00:02:47,420
if we take the number to be 15,

44
00:02:47,870 --> 00:02:50,420
15 divided by three is equal to zero

45
00:02:50,780 --> 00:02:55,130
so it's going to carry out whatever instruction is inside this if statement

46
00:02:55,430 --> 00:02:58,490
and then it's going to be done with it. It's going to skip this one

47
00:02:58,670 --> 00:03:01,180
and crucially, it's going to skip this one

48
00:03:01,510 --> 00:03:06,510
which is what we really need. Instead of structuring our code like this,

49
00:03:06,880 --> 00:03:10,030
what you might have done and what you should've done is in fact,

50
00:03:10,030 --> 00:03:12,190
have this at the top.

51
00:03:12,550 --> 00:03:17,080
So first check if it's divisible by three and by five,

52
00:03:17,740 --> 00:03:19,240
and then if that is not true,

53
00:03:19,570 --> 00:03:24,100
then check to see if it's divisible by five and then divisible by three or the

54
00:03:24,100 --> 00:03:25,300
other option works as well.

55
00:03:25,300 --> 00:03:30,250
You could do it like this. Because these two have no overlap in terms of the

56
00:03:30,250 --> 00:03:32,320
results and then it doesn't really matter.

57
00:03:32,890 --> 00:03:37,180
So now we can finally write our code because we can say, well,

58
00:03:37,180 --> 00:03:41,530
if the number that we're currently encountering is divisible by both three and

59
00:03:41,530 --> 00:03:44,140
five, then we have to print Fizzbuzz.

60
00:03:46,900 --> 00:03:50,710
If it's only divisible by three, then we're going to print fizz.

61
00:03:52,510 --> 00:03:55,780
And if it's only divisible by five, then we're going to print buzz.

62
00:03:58,470 --> 00:03:59,160
All right.

63
00:03:59,160 --> 00:04:02,400
Now that still leaves the remaining numbers, right?

64
00:04:02,430 --> 00:04:03,810
Because the remaining numbers

65
00:04:03,840 --> 00:04:07,950
which don't fit any of the criteria should just be printed out as the number.

66
00:04:08,460 --> 00:04:13,140
We can catch that quite easily with an else statement that catches basically every

67
00:04:13,140 --> 00:04:16,769
other number, in which case, we're just going to print the number.

68
00:04:17,490 --> 00:04:20,310
So now, if I go ahead and run this code,

69
00:04:20,820 --> 00:04:25,260
then you can see that all the way from 1 to 100,

70
00:04:25,620 --> 00:04:29,220
it's been able to work out which ones are fizz, which ones are buzz,

71
00:04:29,280 --> 00:04:33,390
and which ones are fizzbuzz. How did you get on with it?

72
00:04:33,750 --> 00:04:38,340
If you got stuck or if you don't understand why this logic matters,

73
00:04:38,640 --> 00:04:42,720
then I want you to try both versions that I showed you and see it

74
00:04:42,720 --> 00:04:46,650
step-by-step using the Thonny program just as we did before.

75
00:04:47,790 --> 00:04:51,780
That way you can visualize what's actually happening in terms of the logic and

76
00:04:51,780 --> 00:04:55,950
how it's flowing from one step to the next, to the next. Now,

77
00:04:55,980 --> 00:04:59,970
once you've done that, then go back to your exercise and try to complete it.

78
00:05:00,240 --> 00:05:03,990
It's really, really important that you don't just say, "Oh yeah, I understand

79
00:05:03,990 --> 00:05:07,590
now." It's a really good idea to make sure that your code actually works at the

80
00:05:07,590 --> 00:05:11,760
end of the day and to write the code yourself. Today

81
00:05:11,760 --> 00:05:16,760
we've learned all about loops and we're going to apply it in our final project.

82
00:05:17,640 --> 00:05:20,520
So that's what's waiting up for you in the next lesson.

83
00:05:20,820 --> 00:05:22,230
So head over that once you're ready.

1
00:00:00,450 --> 00:00:03,210
Now that we've learned all about loops in Python,

2
00:00:03,540 --> 00:00:06,960
we're finally ready to tackle our final project of the day,

3
00:00:07,290 --> 00:00:09,690
which is the PyPassword generator.

4
00:00:10,440 --> 00:00:14,100
Our program will ask us how many letters would you like in your password?

5
00:00:14,100 --> 00:00:17,640
So I will say I would like a long password, let's say 14.

6
00:00:18,300 --> 00:00:22,290
How many symbols, 3, how many numbers, 4,

7
00:00:22,950 --> 00:00:27,390
and it's going to generate me a password that is almost completely impossible to

8
00:00:27,390 --> 00:00:30,840
crack by any hacker, no matter how talented they are.

9
00:00:31,620 --> 00:00:35,640
So the project of today is to build this password generator.

10
00:00:36,180 --> 00:00:38,670
If you head over to this particular Repl.it,

11
00:00:38,670 --> 00:00:43,320
password-generator-start, then you'll see that here

12
00:00:43,320 --> 00:00:48,320
I've already included for you a list of all the letters in the alphabet from A

13
00:00:48,360 --> 00:00:51,630
to Z, including the uppercase and lowercase letters.

14
00:00:52,200 --> 00:00:56,850
I've got a bunch of numbers and a bunch of symbols that are usually accepted by

15
00:00:56,850 --> 00:00:58,260
websites in the passwords.

16
00:00:59,040 --> 00:01:03,330
And I've also created the inputs that you saw when we did the demo.

17
00:01:03,870 --> 00:01:07,440
So it's going to ask us how many letters, how many symbols, how many numbers,

18
00:01:07,920 --> 00:01:12,270
and then you're going to turn all of that knowledge as well as using these

19
00:01:12,270 --> 00:01:13,080
lists

20
00:01:13,080 --> 00:01:18,060
and what you've learned about loops into the same password generator that you

21
00:01:18,060 --> 00:01:19,890
saw in the final demo.

22
00:01:20,340 --> 00:01:23,160
So have a play around with the final demo yourself,

23
00:01:23,700 --> 00:01:27,900
and then have a think about how you might be able to achieve this goal of

24
00:01:27,900 --> 00:01:32,900
creating a random password for the user based on the number of letters,

25
00:01:33,330 --> 00:01:35,670
symbols, and numbers that they want.

26
00:01:37,050 --> 00:01:40,110
Now there's two levels to this project.

27
00:01:40,200 --> 00:01:45,200
You can either go for the easy version where all you have to do is generate your

28
00:01:46,680 --> 00:01:51,180
password in sequence. So for example, if the user wanted four letters,

29
00:01:51,540 --> 00:01:53,250
two symbols, and two numbers,

30
00:01:53,550 --> 00:01:58,550
then it might just look like this four letters and then two symbols and then two

31
00:02:01,080 --> 00:02:04,650
numbers. So they're in sequence right? First, you've got the letters,

32
00:02:04,950 --> 00:02:07,110
then you've got the number of required symbols,

33
00:02:07,260 --> 00:02:11,490
and then you've got the required numbers. So this is the easy level.

34
00:02:12,060 --> 00:02:17,060
And then there is the hard level. And the hard level requires you to generate the

35
00:02:18,330 --> 00:02:21,810
password in a completely random order.

36
00:02:21,840 --> 00:02:25,500
So instead of having it being, letter symbol number,

37
00:02:25,800 --> 00:02:30,800
it should be maybe letter and then a symbol and then a number,

38
00:02:30,810 --> 00:02:33,930
then a letter, then a symbol and then a number.

39
00:02:34,980 --> 00:02:37,950
But notice how this is completely random.

40
00:02:38,310 --> 00:02:40,020
Every single time you generate it,

41
00:02:40,110 --> 00:02:45,110
the order of where the symbols and where the numbers appear in your password are

42
00:02:45,450 --> 00:02:47,430
completely random. So for example,

43
00:02:47,430 --> 00:02:51,210
if you look at the demo version and I do the same thing,

44
00:02:51,210 --> 00:02:53,190
four letters, two symbols,

45
00:02:53,190 --> 00:02:58,110
two numbers, where the numbers and where the symbols occur are completely

46
00:02:58,110 --> 00:03:02,500
unpredictable. And every single time I generate a new password,

47
00:03:02,770 --> 00:03:04,240
it's going to switch it up again.

48
00:03:04,360 --> 00:03:09,220
So that's the hard level. I recommend trying the easy level first

49
00:03:09,430 --> 00:03:13,660
and then once you've managed to do it, then take yourself up to the hard level

50
00:03:13,690 --> 00:03:17,710
if you think you're up to it. But remember that if your doing the hard level,

51
00:03:17,770 --> 00:03:22,450
you might have to do a little quick Google around in order to figure out how to

52
00:03:22,450 --> 00:03:24,850
do something that you might not have seen before.

53
00:03:25,330 --> 00:03:29,560
But it's all part of the challenge and I hope you'll take it on with vigor.

54
00:03:29,710 --> 00:03:33,670
So pause the video now and try to complete the final project.

55
00:03:42,580 --> 00:03:42,870
Alright,

56
00:03:42,870 --> 00:03:47,730
so let's first tackle the easy level where we're just generating a password

57
00:03:48,090 --> 00:03:52,680
with the required number of letters and then the required number of symbols and

58
00:03:52,680 --> 00:03:54,540
then the required number of numbers.

59
00:03:55,050 --> 00:03:57,060
So let's go ahead and tackle this one first.

60
00:03:57,810 --> 00:04:01,680
Now we know that we've got these lists which we can draw from,

61
00:04:01,890 --> 00:04:06,660
and we know that we can use the random module to get hold of a random item from

62
00:04:06,660 --> 00:04:11,190
the list. So all we have to do is first get four random letters.

63
00:04:11,610 --> 00:04:14,010
So let's say that we had a password

64
00:04:14,040 --> 00:04:16,769
which just started out as an empty string.

65
00:04:17,430 --> 00:04:22,430
Then we can use a for loop to loop through all of the characters that we need to

66
00:04:23,580 --> 00:04:27,030
create for our password. For example,

67
00:04:27,030 --> 00:04:32,030
I might say for char, short for character, in the range of,

68
00:04:32,850 --> 00:04:33,360
um,

69
00:04:33,360 --> 00:04:38,100
from 1 to the number of letters that the user wanted.

70
00:04:41,010 --> 00:04:43,380
So in this case, if the user wanted four letters,

71
00:04:43,440 --> 00:04:48,240
then it will be a range from one to four, but not including four.

72
00:04:48,660 --> 00:04:50,820
So it's actually from one to three,

73
00:04:51,180 --> 00:04:54,240
which has only three characters. In order to modify this,

74
00:04:54,270 --> 00:04:56,430
we have to do what we did always before,

75
00:04:56,430 --> 00:04:59,730
which is just to add one to the end of our range.

76
00:05:00,240 --> 00:05:04,620
So now we're going to create a range based on the number of letters that the

77
00:05:04,620 --> 00:05:05,460
user wanted.

78
00:05:05,610 --> 00:05:08,640
And I'm just going to go along with the assumption that the number of letters

79
00:05:08,670 --> 00:05:11,910
equals four. Let's just pretend that's what the user will enter.

80
00:05:12,420 --> 00:05:16,200
So then this range becomes 1, 2, 4 + 1 which is 5.

81
00:05:16,470 --> 00:05:21,470
So the range is in fact going to be 1 to 4. For every single number in that

82
00:05:22,620 --> 00:05:25,050
range from one to two to three to four,

83
00:05:25,350 --> 00:05:28,200
I'm going to generate them a random letter,

84
00:05:28,260 --> 00:05:32,010
and I'm gonna pick it out of this list of letters. To do that

85
00:05:32,190 --> 00:05:37,190
I can either generate a random number and use it as the index or you might've

86
00:05:37,830 --> 00:05:38,910
seen previously

87
00:05:38,970 --> 00:05:43,970
I showed you the random.choice function. And inside this random.choice,

88
00:05:45,450 --> 00:05:47,610
we can pass a sequence

89
00:05:47,640 --> 00:05:50,760
which in our case is the letters list.

90
00:05:51,450 --> 00:05:56,450
Then it will look through this list of letters and it will give us a random item from

91
00:05:58,490 --> 00:05:59,323
that list.

92
00:05:59,780 --> 00:06:04,340
So now that random letter is going to be something that we're going to need to

93
00:06:04,340 --> 00:06:06,320
add to our password, right?

94
00:06:06,740 --> 00:06:11,210
So we can set this equal to a random character.

95
00:06:12,140 --> 00:06:14,570
And now let's go ahead and just print it out.

96
00:06:15,490 --> 00:06:16,323
Right?

97
00:06:19,690 --> 00:06:24,690
So let's say we want four letters in our password and we can type anything for

98
00:06:24,940 --> 00:06:27,910
the other ones, but notice how when the for loop runs,

99
00:06:28,000 --> 00:06:33,000
it's given us some random characters that it's picked out of our letters list.

100
00:06:34,540 --> 00:06:35,470
So there's an a,

101
00:06:35,500 --> 00:06:40,500
there's a capital P there's a d and there's a capital J. How can we add each of those

102
00:06:41,050 --> 00:06:43,900
letters to our password? Well,

103
00:06:43,900 --> 00:06:48,900
we can use the string concatenation that we learned very early on in Day 1.

104
00:06:49,720 --> 00:06:53,380
We can say password equals the previous password

105
00:06:53,710 --> 00:06:57,460
plus the random character. Of course,

106
00:06:57,460 --> 00:07:01,960
the shortened version of this is just password+= random_char.

107
00:07:02,440 --> 00:07:06,070
And now let's go ahead and instead of printing the random character,

108
00:07:06,400 --> 00:07:09,610
let's print the password at each stage of the loop.

109
00:07:14,050 --> 00:07:14,290
Right?

110
00:07:14,290 --> 00:07:14,830
And again,

111
00:07:14,830 --> 00:07:19,750
I'm going to choose four letters and you can see that the first time the loop

112
00:07:19,750 --> 00:07:24,700
runs I get an M. So password is equal to M. The second time I get a Q

113
00:07:24,700 --> 00:07:29,700
so I add the Q onto the M, I get MQ and so on and so forth until I get these four

114
00:07:30,100 --> 00:07:35,100
characters in the beginning of what seems to be my random password that's going

115
00:07:35,530 --> 00:07:36,490
to be generated.

116
00:07:38,340 --> 00:07:38,540
Right

117
00:07:38,540 --> 00:07:39,680
Now, if you wanted to,

118
00:07:39,680 --> 00:07:43,550
you can actually simplify this down to just one step,

119
00:07:43,850 --> 00:07:46,160
because instead of having this intermediary,

120
00:07:46,160 --> 00:07:48,140
which is the random character variable,

121
00:07:48,410 --> 00:07:53,060
we can simply just replace it with the code, like this.

122
00:07:53,330 --> 00:07:57,470
So in this case, we're getting a random choice from our letters list,

123
00:07:57,560 --> 00:08:01,490
so we get a random letter, and then we add that to our password.

124
00:08:02,330 --> 00:08:04,730
Now that we've done that for the letter,

125
00:08:04,910 --> 00:08:09,020
then it's pretty easy to see how we can continue doing this for the symbol and

126
00:08:09,020 --> 00:08:12,620
the numbers. We just have to keep adding it to the end of our password.

127
00:08:12,980 --> 00:08:15,140
So let me quickly write out the code for this.

128
00:08:23,510 --> 00:08:23,770
Right?

129
00:08:23,770 --> 00:08:27,880
So now when the user requests that they want four letters in their password,

130
00:08:28,240 --> 00:08:31,510
then we generate a range from one to five.

131
00:08:31,900 --> 00:08:34,570
And then for each of those positions,

132
00:08:34,600 --> 00:08:38,650
we generate a random letter in order to fill the password.

133
00:08:39,190 --> 00:08:42,730
And then we add on the required number of symbols and the required number of

134
00:08:42,730 --> 00:08:46,600
numbers. And finally, we print out the final password.

135
00:08:47,110 --> 00:08:50,830
Let's go ahead and run this code. And again,

136
00:08:50,830 --> 00:08:54,310
I'm going to choose four letters, two numbers, and two symbols.

137
00:08:54,990 --> 00:08:57,780
And I end up with my final password,

138
00:08:58,050 --> 00:09:01,920
which fits exactly that criteria and it looks pretty random.

139
00:09:02,670 --> 00:09:07,670
But the only problem is that if a hacker knew that you always have two symbols

140
00:09:08,190 --> 00:09:11,310
at this position, and two number at this position,

141
00:09:11,640 --> 00:09:16,640
then it's very easy to crack that password because in order to get the last

142
00:09:16,650 --> 00:09:20,940
digit, for example, they only have to try nine different variations, 12

143
00:09:20,940 --> 00:09:22,920
3456789.

144
00:09:23,400 --> 00:09:28,400
And this just limits the strength of your password. In order to tackle that you

145
00:09:29,460 --> 00:09:31,620
would have to tackle it at the hard level,

146
00:09:31,890 --> 00:09:36,660
which is how do you get a password that has all of these letters and numbers in

147
00:09:36,660 --> 00:09:40,500
a completely random order. To do that

148
00:09:40,650 --> 00:09:43,680
we mentioned that you have to do a bit of googling because it might require

149
00:09:43,680 --> 00:09:46,950
something that you haven't done before. But in essence,

150
00:09:47,010 --> 00:09:50,940
you've got access to everything you need to perform the logic.

151
00:09:51,480 --> 00:09:53,280
So if you haven't given that a go,

152
00:09:53,520 --> 00:09:57,210
then this might be a good time to pause and have a think about how you might

153
00:09:57,210 --> 00:10:02,210
structure the logic or how you might create a flow chart to express this logic

154
00:10:03,060 --> 00:10:05,730
that you would want. And once you've done that,

155
00:10:05,820 --> 00:10:08,490
and if you want to see the solution and walk through it with me,

156
00:10:08,670 --> 00:10:13,230
then come back here and I'll show you how to do it, but first give it a go.

157
00:10:15,870 --> 00:10:16,703
Right?

158
00:10:17,110 --> 00:10:19,720
All right. In order to tackle the hard level,

159
00:10:20,050 --> 00:10:25,050
what we essentially need to do is instead of adding each of these letters into a

160
00:10:25,300 --> 00:10:29,050
string, we actually want to add it into a list.

161
00:10:30,040 --> 00:10:32,410
So I'm going to copy all of this that's here,

162
00:10:32,500 --> 00:10:37,500
and I'm just gonna comment it out and I'm going to paste it under my hard level and

163
00:10:37,720 --> 00:10:42,250
work on it here. So instead of using a password string,

164
00:10:42,430 --> 00:10:45,280
I'm going to create a list and to better describe it

165
00:10:45,730 --> 00:10:49,660
I'll change my variable name, the password list. So now,

166
00:10:49,660 --> 00:10:54,660
instead of using password to add each of these letters and numbers and symbols,

167
00:10:55,990 --> 00:10:58,240
I'm going to be adding it to my list.

168
00:10:59,650 --> 00:11:00,420
Right,

169
00:11:00,420 --> 00:11:01,253
Right,

170
00:11:02,210 --> 00:11:03,000
Right

171
00:11:03,000 --> 00:11:05,130
Now, to add things to a list,

172
00:11:05,340 --> 00:11:09,240
you can use the same syntax that you did with strings,

173
00:11:09,660 --> 00:11:14,660
which is to add the new item into the list and to update the old list.

174
00:11:17,430 --> 00:11:20,340
You might be more familiar though with the syntax

175
00:11:20,340 --> 00:11:23,850
which is append and both of these work.

176
00:11:23,940 --> 00:11:28,110
You can use either of them if you want, but they'll end up doing the same thing,

177
00:11:28,170 --> 00:11:32,580
which is to add each of those things you've generated in the order that you've

178
00:11:32,580 --> 00:11:34,560
generated to your password.

179
00:11:34,800 --> 00:11:39,120
So we end up now with a list with four letters,

180
00:11:39,510 --> 00:11:42,030
two symbols, and two numbers,

181
00:11:42,210 --> 00:11:46,650
all stored as strings because of the quotation marks around them.

182
00:11:47,460 --> 00:11:51,360
So now that we've got a list, well, then we have to think about, well,

183
00:11:51,570 --> 00:11:53,800
how can we shuffle our list,

184
00:11:53,800 --> 00:11:56,890
how can we mess up the order of the items in our list?

185
00:11:57,730 --> 00:12:01,420
And that might take you to Google and you might search for something like how to

186
00:12:01,420 --> 00:12:05,410
change the order of items in a list.

187
00:12:05,680 --> 00:12:09,160
And then we also have to add our keyword, which is Python,

188
00:12:09,190 --> 00:12:12,490
because there's obviously a lot of other programming languages.

189
00:12:12,910 --> 00:12:15,910
And we come up against our first Stack Overflow question,

190
00:12:15,910 --> 00:12:19,930
how can I reorder a list? Well, that sounds kind of like what I want to do,

191
00:12:19,930 --> 00:12:22,450
right? So if we scroll down,

192
00:12:22,510 --> 00:12:27,510
you can see that the way to do it is either using a for loop,

193
00:12:27,910 --> 00:12:30,430
like so, or

194
00:12:30,700 --> 00:12:33,520
to simply use the shuffle function.

195
00:12:34,630 --> 00:12:39,630
This is a much simpler way because it allows us to update the existing list just

196
00:12:41,740 --> 00:12:43,990
by calling the shuffle function on it.

197
00:12:44,650 --> 00:12:49,510
And this one actually requires us to create a new list and we have to create a

198
00:12:49,510 --> 00:12:52,270
bunch of random numbers for the order,

199
00:12:52,600 --> 00:12:54,910
and then to reorder them using a four loop.

200
00:12:55,300 --> 00:12:58,840
So I'm going to go with this version and let's try it out.

201
00:12:59,350 --> 00:13:01,420
Instead of printing password_list,

202
00:13:01,480 --> 00:13:04,270
let's print the password_list before the shuffle,

203
00:13:04,600 --> 00:13:09,600
and then let's use the random.shuffle and pass in the password_list.

204
00:13:10,150 --> 00:13:13,480
And then let's print the outcome of that shuffle,

205
00:13:13,480 --> 00:13:15,640
so let's print the password_list again.

206
00:13:17,740 --> 00:13:20,380
So now you can see that we've got a version before,

207
00:13:20,590 --> 00:13:22,210
and then we've got a version after.

208
00:13:22,420 --> 00:13:26,920
So if I run my code and I write again, four letters,

209
00:13:26,980 --> 00:13:29,020
two symbols, two numbers,

210
00:13:29,590 --> 00:13:34,210
you can see that previously it was ordered in the order that we added each of

211
00:13:34,210 --> 00:13:36,580
the characters. After the shuffle

212
00:13:36,610 --> 00:13:40,570
they're now pretty much random. There's letters in random places,

213
00:13:40,600 --> 00:13:42,160
there's symbols in random places.

214
00:13:42,550 --> 00:13:45,970
So if only we could turn this back into a string,

215
00:13:46,450 --> 00:13:49,870
then we've got our password that's nicely shuffled.

216
00:13:50,260 --> 00:13:53,290
So how can we turn it back into a string? Well,

217
00:13:53,290 --> 00:13:55,720
we could simply use a for loop, right?

218
00:13:55,810 --> 00:13:59,080
We could say for each, um,

219
00:13:59,440 --> 00:14:03,910
character in the password_list,

220
00:14:04,690 --> 00:14:08,980
we're going to add it to a variable called a password,

221
00:14:09,370 --> 00:14:12,610
which is going to start off again as a empty string

222
00:14:13,240 --> 00:14:15,430
and then we're going to add to it.

223
00:14:15,460 --> 00:14:20,440
So we're going to say password += char in our password_list.

224
00:14:21,040 --> 00:14:24,790
And now if I go ahead and just print my final password,

225
00:14:25,180 --> 00:14:27,070
I'm going to add a fstring as well.

226
00:14:27,550 --> 00:14:30,310
Let's say your password is,

227
00:14:31,360 --> 00:14:33,460
and then let's insert the password.

228
00:14:34,840 --> 00:14:38,230
And now if I run my code and let's say,

229
00:14:38,230 --> 00:14:40,900
I want 12 letters, uh,

230
00:14:40,930 --> 00:14:43,330
three symbols and four numbers,

231
00:14:43,870 --> 00:14:47,530
then it's going to generate me a entire password

232
00:14:47,740 --> 00:14:52,550
that's completely randomized in terms of the orders of the symbols and the

233
00:14:52,550 --> 00:14:53,383
numbers.

234
00:14:53,660 --> 00:14:58,660
And I've now solved the hard part of this challenge project.

235
00:15:00,080 --> 00:15:03,530
Did that make sense to you? Did you manage to get it

236
00:15:03,530 --> 00:15:04,940
to do what you want it to do?

237
00:15:06,800 --> 00:15:10,070
If you're at all confused about the code that we've covered here,

238
00:15:10,370 --> 00:15:14,510
then be sure to check out the final project that I've got here,

239
00:15:14,510 --> 00:15:16,700
which is the App generator end,

240
00:15:17,150 --> 00:15:20,600
and take a look at how the easy level is implemented,

241
00:15:20,630 --> 00:15:25,160
how the hard level is implemented and try switching it around so that you really

242
00:15:25,160 --> 00:15:26,390
get to understand it.

243
00:15:26,720 --> 00:15:31,070
Try instead of maybe getting the user to tell you how many letters,

244
00:15:31,070 --> 00:15:34,970
how many symbols, how many numbers, instead just define those yourself

245
00:15:35,000 --> 00:15:37,790
or use a random number of letters, numbers,

246
00:15:37,790 --> 00:15:42,440
and symbols. Play around with the code until it starts doing what you want it to

247
00:15:42,440 --> 00:15:44,240
do and it starts making sense.

248
00:15:44,840 --> 00:15:48,770
But I hope you had fun building this project with me today and learning all

249
00:15:48,770 --> 00:15:51,440
about loops. On the next lesson

250
00:15:51,440 --> 00:15:54,800
we're going to be learning more about these things that we've been using a lot,

251
00:15:55,160 --> 00:16:00,110
which is Python functions. So I'm going to bid you goodnight for today,

252
00:16:00,200 --> 00:16:03,200
and hopefully I'll see you bright and early tomorrow,

253
00:16:03,680 --> 00:16:06,860
and we'll learn some new skills and work on some new projects.

254
00:16:07,070 --> 00:16:09,710
So that's all from me, goodnight from Angela.

