1
00:00:00,180 --> 00:00:05,040
Hey there, welcome to day 32 of 100 Days of Code. Now,

2
00:00:05,040 --> 00:00:05,670
today

3
00:00:05,670 --> 00:00:10,560
we're going to be learning about email SMTP and the date time module.

4
00:00:11,130 --> 00:00:15,930
Basically, we're going to learn how to send email using Python code.

5
00:00:16,350 --> 00:00:20,430
And we're going to determine when we send the email using this daytime time

6
00:00:20,430 --> 00:00:23,850
module. And once we've learned all of those skills,

7
00:00:24,150 --> 00:00:29,150
we're going to be building a really interesting and possibly helpful tool where

8
00:00:29,850 --> 00:00:34,850
we can automate a happy birthday email to all of our friends and family.

9
00:00:36,870 --> 00:00:41,870
So, I probably only remember a handful of people's emails off by heart and the

10
00:00:42,900 --> 00:00:47,010
rest of the time, I rely pretty much on Facebook telling me that it's so,

11
00:00:47,010 --> 00:00:51,600
and so's birthday. And I end up writing on their timeline.

12
00:00:52,080 --> 00:00:56,490
But if Facebook didn't tell me, I would probably not remember.

13
00:00:57,060 --> 00:01:01,860
Now I know some friends of mine are really good at remembering everybody's

14
00:01:02,060 --> 00:01:02,893
birthday,

15
00:01:03,110 --> 00:01:06,860
even if they don't go on the Facebook and they'll send you a message every year

16
00:01:07,280 --> 00:01:09,530
showing how good of a friend they are.

17
00:01:09,620 --> 00:01:12,770
And it always makes me feel a little bit bad inside.

18
00:01:13,280 --> 00:01:16,850
So what's our solution? To remember everybody's date of birth?

19
00:01:17,180 --> 00:01:20,750
No. We're going to build a Python program.

20
00:01:21,410 --> 00:01:26,360
And this Python program is going to be the automated birthday wisher.

21
00:01:27,110 --> 00:01:28,100
All we have to do it is

22
00:01:28,220 --> 00:01:33,020
create a spreadsheet of all of our friend's birthdays and then create a bunch of

23
00:01:33,020 --> 00:01:33,680
emails

24
00:01:33,680 --> 00:01:38,240
and we'll randomly pick an email to send to each of these friends.

25
00:01:38,990 --> 00:01:42,830
And this program is going to teach us some skills in Python

26
00:01:43,100 --> 00:01:45,140
helping us level up as a programmer.

27
00:01:45,350 --> 00:01:49,730
But it also makes us better people because our friends will feel like we

28
00:01:49,730 --> 00:01:54,410
remember their birthdays and help our friends feel more appreciated.

29
00:01:55,880 --> 00:02:00,080
Email SMTP is a module that comes pre-bundled with Python

30
00:02:00,440 --> 00:02:04,370
and it helps us send email using Python code.

31
00:02:05,210 --> 00:02:10,210
And daytime is another Python module that helps us figure out what today's date

32
00:02:10,820 --> 00:02:15,710
is or how to format a particular date and time. And in our case,

33
00:02:15,740 --> 00:02:20,330
it's going to help us figure out if today happens to be the day of one of our

34
00:02:20,330 --> 00:02:23,900
friend's birthdays, in which case we'll send them a birthday email.

35
00:02:24,500 --> 00:02:27,320
So that's the plan. Head over to the next lesson

36
00:02:27,530 --> 00:02:30,650
and we'll get started by learning how to send email.


37
00:00:00,750 --> 00:00:05,880
The first thing we have to figure out is how exactly does email work?

38
00:00:06,300 --> 00:00:11,960
We all know that we can log on to Gmail or Yahoo dot com and we can start filling out an email.

39
00:00:11,970 --> 00:00:14,820
It's pretty much second nature to everybody by now.

40
00:00:15,030 --> 00:00:18,050
But what actually happens behind the scenes?

41
00:00:18,060 --> 00:00:25,290
Well, let's say that we have a sender Angela gmail.com and a recipient Timmy at Yahoo dot com.

42
00:00:25,500 --> 00:00:32,400
Now in order to send this email from my Gmail account to another email account, what happens behind

43
00:00:32,400 --> 00:00:39,330
the scene is that there's a Gmail mail server which will receive my message and then there's a Yahoo

44
00:00:39,330 --> 00:00:46,950
Mail server which will store the message until Timmy logs on to his computer and logs on to Yahoo dot

45
00:00:46,950 --> 00:00:50,910
com, which downloads the email from the Yahoo Mail server.

46
00:00:51,540 --> 00:00:56,340
So this email is going to move between all of these steps.

47
00:00:56,430 --> 00:01:03,540
And in order to do this, it relies on something called SMTP, the simple mail transfer protocol.

48
00:01:04,200 --> 00:01:11,400
And this contains all of the rules that determine how an email is received by mail servers passed onto

49
00:01:11,400 --> 00:01:16,140
the next mail server and how email can be sent around the Internet.

50
00:01:17,190 --> 00:01:25,440
Now, a good analogy for SMTP is if you imagine these mail servers as a post office and Timmy's computer

51
00:01:25,440 --> 00:01:34,290
being the mailbox, then SMTP is basically the postman who knows how to handle the email and take it

52
00:01:34,290 --> 00:01:38,790
to various post offices and eventually put it into Timmy's computer.

53
00:01:39,520 --> 00:01:48,280
So in Python there's a module called SMTP lib, which allows us to use SMTP to send our email to any

54
00:01:48,280 --> 00:01:49,930
address on the internet.

55
00:01:50,530 --> 00:01:57,010
To start, I recommend setting up two fresh email accounts, create a new email account with Gmail,

56
00:01:57,010 --> 00:02:00,100
and also create a new email account with Yahoo!

57
00:02:00,190 --> 00:02:06,610
These new email accounts will be perfect for testing your code and following along with the video tutorials.

58
00:02:06,760 --> 00:02:11,360
Plus, we'll be making those email accounts a little bit less secure to test our code.

59
00:02:11,380 --> 00:02:15,010
So that's another reason to set up some testing email addresses for now.

60
00:02:15,670 --> 00:02:20,830
After you've set up your new email accounts, head over to the course resources and download the zip

61
00:02:20,830 --> 00:02:23,290
file with the starting code for today's lessons.

62
00:02:24,160 --> 00:02:26,920
And then we're going to open that up using PI charm.

63
00:02:27,280 --> 00:02:30,700
Now, I want you to take a look inside the starting project.

64
00:02:30,730 --> 00:02:35,980
There is a main PI file and there's also a quote text file.

65
00:02:36,010 --> 00:02:37,670
Don't worry about this file for now.

66
00:02:37,690 --> 00:02:41,230
We're going to come back to it when we explore the date time module.

67
00:02:41,500 --> 00:02:44,590
For now, we're going to be working within the main PI.

68
00:02:44,620 --> 00:02:52,960
And I want to show you how you can use this SMTP lib library to start sending emails straight from your

69
00:02:52,960 --> 00:02:53,980
Python code.

70
00:02:54,610 --> 00:03:03,670
As always, we import the module SMTP lib and then we can start using it once we've imported this SMTP

71
00:03:03,670 --> 00:03:04,460
library.

72
00:03:04,480 --> 00:03:09,150
Essentially, we can use it to create a new SMTP object.

73
00:03:09,160 --> 00:03:15,160
So we're going to call that object a new connection because it's basically a way for us to be able to

74
00:03:15,160 --> 00:03:19,690
connect to our email provider's SMTP email server.

75
00:03:19,900 --> 00:03:27,400
We're going to do this by tapping into the SMTP lib and then creating a object from the SMTP class.

76
00:03:27,640 --> 00:03:35,350
Now, when we create this object, one of the things that we should specify is the location of our email

77
00:03:35,350 --> 00:03:37,630
provider's SMTP server.

78
00:03:37,840 --> 00:03:42,900
Now, for Gmail, it's simply SMTP gmail.com.

79
00:03:43,000 --> 00:03:45,580
But it's different for every email provider.

80
00:03:45,760 --> 00:03:52,990
So that means if your email ends in at gmail.com, then this would be how you would connect to your

81
00:03:52,990 --> 00:03:54,040
email server.

82
00:03:54,340 --> 00:04:01,750
In our case, I've created a testing email called App Brewery Info at gmail.com.

83
00:04:01,960 --> 00:04:10,750
And this part that's before the ADD sign is the identity of my email account and the part after the

84
00:04:10,750 --> 00:04:14,620
ADD sign is the identity of my email provider.

85
00:04:14,710 --> 00:04:20,050
So in my case I need to connect to SMTP gmail.com.

86
00:04:20,290 --> 00:04:27,040
But if you have a different email provider, for example, if you're with Hotmail, it's SMTP, Mlive.com

87
00:04:27,040 --> 00:04:31,810
and if you're with Yahoo, it's SMTP mail, yahoo.com.

88
00:04:31,960 --> 00:04:38,530
And if you're with a completely different email provider, then simply just Google your email provider

89
00:04:38,530 --> 00:04:45,250
and the SMTP information and you should find an article somewhere that describes a URL that looks something

90
00:04:45,250 --> 00:04:46,030
like this.

91
00:04:46,570 --> 00:04:54,790
Once I've created my connection, the next thing I need to do is to go ahead and call start TLS.

92
00:04:54,940 --> 00:04:58,720
Now TLS stands for Transport Layer Security.

93
00:04:58,930 --> 00:05:03,950
And it's a way of securing our connection to our email server.

94
00:05:03,970 --> 00:05:10,360
So that way, when we're sending an email, if somebody else intercepts our email somewhere along the

95
00:05:10,360 --> 00:05:17,710
line and they try to read it because this is enabled, that message will be encrypted and it'll be impossible

96
00:05:17,710 --> 00:05:20,950
for them to read what is in the content of our email.

97
00:05:21,220 --> 00:05:24,610
So this line basically will make this connection secure.

98
00:05:25,240 --> 00:05:30,820
Now, once we've secured our connection, the next thing to do is to actually log in.

99
00:05:30,820 --> 00:05:33,220
So we'll call connection, log in.

100
00:05:33,400 --> 00:05:38,290
And here we have to provide a username and a password.

101
00:05:38,410 --> 00:05:44,710
So the username is simply the email that we use to log on to our email service.

102
00:05:44,740 --> 00:05:49,540
So in my case, it's just my email and the password.

103
00:05:49,540 --> 00:05:52,570
I've just made up a new password.

104
00:05:52,960 --> 00:05:55,570
So my made up password is ABCD.

105
00:05:55,570 --> 00:05:56,830
One, two, three, four.

106
00:05:56,950 --> 00:05:58,450
And then two brackets.

107
00:06:02,650 --> 00:06:11,530
And once I've logged in to my email provider, the final thing I want to do is to actually send my mail.

108
00:06:11,830 --> 00:06:20,260
Now the from address is my email and the to address is the person who I want to send the email to.

109
00:06:20,380 --> 00:06:30,100
So I've set up a new dummy account called App Brewery testing at Yahoo dot com and make sure that you

110
00:06:30,100 --> 00:06:39,550
haven't got any typos in your email, your password, the SMTP URL, or the recipient email address.

111
00:06:39,940 --> 00:06:43,810
Now, finally, the last thing we want to add is the message.

112
00:06:43,810 --> 00:06:47,710
So this is what we actually want to send in our email.

113
00:06:47,800 --> 00:06:53,980
And just like we did with our file when we opened it at the very end, once we're done with it, we're

114
00:06:53,980 --> 00:06:55,810
going to close it off as well.

115
00:06:56,020 --> 00:06:58,600
So now we can go ahead and hit run.

116
00:07:00,680 --> 00:07:03,980
And you might get a number of errors at this point.

117
00:07:04,070 --> 00:07:10,070
Now, it's important that if you do get an error, then you first check to make sure that you haven't

118
00:07:10,070 --> 00:07:15,680
got any typos here, here, here or here.

119
00:07:15,710 --> 00:07:21,020
But once you've checked that through, then the next thing you can do is you can actually look at this

120
00:07:21,020 --> 00:07:23,750
error code and follow the URL.

121
00:07:24,080 --> 00:07:32,150
Now, in our case, the reason is because by default, Gmail doesn't just let anybody access your email

122
00:07:32,150 --> 00:07:32,840
account.

123
00:07:33,200 --> 00:07:40,850
And you have other ways of making your account even more secure in order to send email from a Gmail

124
00:07:40,850 --> 00:07:42,320
account with Python.

125
00:07:42,350 --> 00:07:46,880
The first thing you have to do is create a special password for your application.

126
00:07:46,910 --> 00:07:52,850
This means you have to go to the security settings for your Google account.

127
00:07:52,880 --> 00:07:57,650
So if you're inside Gmail, go ahead and click on your profile.

128
00:07:57,680 --> 00:08:02,270
Go to manage your Google account and then go to security.

129
00:08:02,510 --> 00:08:07,100
Now, while you're here, you first have to turn on to step verification.

130
00:08:13,390 --> 00:08:19,120
Once you've confirmed using your phone, go ahead and turn on two step verification.

131
00:08:20,160 --> 00:08:24,300
And then go back to the security page.

132
00:08:24,300 --> 00:08:26,760
And now you should be able to see this section.

133
00:08:26,790 --> 00:08:28,710
App passwords show up.

134
00:08:28,740 --> 00:08:33,659
Go ahead and click on it and enter your password for your Google account again.

135
00:08:38,020 --> 00:08:45,940
And then go ahead and create a other type of app and we'll name it Birthday Wisher.

136
00:08:47,210 --> 00:08:48,710
And click generate.

137
00:08:49,790 --> 00:08:51,860
Now, here's the really important part.

138
00:08:51,890 --> 00:08:55,080
You're going to get your app password show up here.

139
00:08:55,160 --> 00:08:58,760
I want you to select all of it and copy it.

140
00:09:00,110 --> 00:09:04,370
And then you'll be able to paste it inside your code.

141
00:09:05,660 --> 00:09:10,810
Once we've done all of this, then we can go back and hit run again.

142
00:09:10,820 --> 00:09:17,630
And you'll see this time we see the process finish with exit code zero, which means all of the code

143
00:09:17,630 --> 00:09:19,070
ran successfully.

144
00:09:19,400 --> 00:09:25,880
And now if I take a look at my sent box, you can see that I've got this message that's been sent.

145
00:09:26,000 --> 00:09:32,660
And if I take a look at the email address which the email was sent to, then you can see that in my

146
00:09:32,660 --> 00:09:34,570
inbox there's actually nothing here.

147
00:09:34,580 --> 00:09:42,050
But if you take a look inside spam, then there is our brilliant email that came from our Python code.

148
00:09:43,410 --> 00:09:48,930
So first thing I'm going to do is change that to not spam, to make sure that it goes into the actual

149
00:09:48,930 --> 00:09:49,780
inbox.

150
00:09:49,800 --> 00:09:55,530
And the next thing we want to be able to do is how can we make our emails seem less like spam?

151
00:09:55,800 --> 00:10:02,160
So an email without a subject headline is prime target for being filtered as spam.

152
00:10:02,280 --> 00:10:07,320
So let's go into our email and see how we can add a subject line.

153
00:10:07,590 --> 00:10:08,870
It's pretty simple.

154
00:10:08,880 --> 00:10:16,590
It goes inside the message parameter and all we have to do is just write the word subject colon and

155
00:10:16,590 --> 00:10:21,960
then we can put in whatever it is that we want to use as the subject of the email like this.

156
00:10:22,350 --> 00:10:25,740
Now, how do you put in the content or the body of the email?

157
00:10:25,740 --> 00:10:32,430
Well, you add two new lines using backslash and backslash n, and then you can put the content.

158
00:10:32,430 --> 00:10:41,220
So this is the body of my email and let's just split this up so it's a little bit easier to read.

159
00:10:43,530 --> 00:10:46,470
And now I can hit run again.

160
00:10:46,680 --> 00:10:54,360
And once that's done, you can see that in my Gmail in the sent folder that this message now has a subject

161
00:10:54,360 --> 00:10:56,820
line and a body.

162
00:10:56,880 --> 00:11:00,120
And it's the same thing when I go to my.

163
00:11:05,990 --> 00:11:12,140
And when I take a look at this new email that came through, you can see the subject line and the body

164
00:11:12,140 --> 00:11:14,390
of the email being separated.

165
00:11:15,050 --> 00:11:22,460
Now we can actually avoid having to write this line connection close if we do the same trick as we did

166
00:11:22,460 --> 00:11:31,640
with file opening, we use the with keyword, so we can say that with SMTP, SMTP to create the connection,

167
00:11:31,640 --> 00:11:34,730
and then we save that as the connection.

168
00:11:34,790 --> 00:11:39,540
Then we can indent all of the rest of the code inside this block.

169
00:11:39,560 --> 00:11:46,700
And once it's done with sending the email, it will close off that connection automatically.

170
00:11:47,060 --> 00:11:51,650
So this is how you could send email using Python and SMTP lib.

171
00:11:51,680 --> 00:11:57,770
Now, there's quite a few things here that are prone to errors, especially given that we're typing

172
00:11:57,770 --> 00:12:04,310
a lot of things in plain text, like our email or password and a bunch of things.

173
00:12:04,310 --> 00:12:10,940
So if you're getting errors when you're running your code or if it's not doing what you expect it to

174
00:12:10,970 --> 00:12:17,390
make sure that you've checked against all of these strings and it's actually what you expected it to

175
00:12:17,390 --> 00:12:17,810
be.

176
00:12:18,080 --> 00:12:23,990
Secondly, make sure that whichever account you're sending from that, you actually go ahead into the

177
00:12:23,990 --> 00:12:27,170
account and modify the security settings.

178
00:12:27,410 --> 00:12:33,860
For example, let's say I wanted to send from this email address, so I'm going to put that in here.

179
00:12:33,980 --> 00:12:41,180
And then in this case, the email server I need to connect to will be Yahoo's email server, which is

180
00:12:41,180 --> 00:12:49,460
under the URL that I showed you before SMTP dot mail, dot, Yahoo dot com.

181
00:12:50,030 --> 00:12:52,550
And that is actually not enough.

182
00:12:52,550 --> 00:12:54,890
So let me just change my recipient.

183
00:12:58,290 --> 00:12:59,880
And I hit run.

184
00:12:59,910 --> 00:13:02,070
This is the error that you'll see.

185
00:13:02,190 --> 00:13:07,440
It says SMTP server disconnected connection unexpectedly closed.

186
00:13:07,470 --> 00:13:10,200
Now, this could be down to a number of reasons.

187
00:13:10,200 --> 00:13:18,660
For example, a typo in this part, but also if your account doesn't actually allow less secure apps.

188
00:13:18,660 --> 00:13:19,920
So on Yahoo!

189
00:13:19,950 --> 00:13:21,540
The process is a little bit different.

190
00:13:21,540 --> 00:13:27,210
You have to go into your account, go to account info, and then go to account security.

191
00:13:28,600 --> 00:13:31,060
And you'll have to log in again.

192
00:13:33,710 --> 00:13:37,070
And generate a new app password.

193
00:13:37,220 --> 00:13:43,610
So we're going to create a new app and we're going to give it a custom name, Python code, and then

194
00:13:43,610 --> 00:13:44,930
click generate.

195
00:13:44,930 --> 00:13:50,630
And now we have a app password to use for our Python code.

196
00:13:50,930 --> 00:13:57,470
So now back over here, we change this password to the one that we just copied over.

197
00:13:57,770 --> 00:14:04,280
And now if I hit run, that error should go away and we should get processed, finished with exit code

198
00:14:04,280 --> 00:14:04,910
zero.

199
00:14:05,180 --> 00:14:08,960
And when I take a look over here in my inbox.

200
00:14:11,330 --> 00:14:15,500
I've got my email from Apple testing at Yahoo.com.

201
00:14:17,250 --> 00:14:19,450
So check your security settings.

202
00:14:19,470 --> 00:14:24,210
Check your spam and check that you haven't made any typos.

203
00:14:24,990 --> 00:14:29,880
And if none of that works, then just simply try doing everything I did in the video.

204
00:14:30,060 --> 00:14:34,650
But with a new email account that you set up with Gmail.

205
00:14:34,920 --> 00:14:41,280
Then you can use the same SMTP address and the same process that you saw in the video to try this out.


206
00:00:00,390 --> 00:00:04,410
In this lesson, I want to talk to you about the Python datetime module.

207
00:00:04,920 --> 00:00:09,920
This is a really useful module that helps us work with dates and time.

208
00:00:11,400 --> 00:00:14,550
Going back to our day 32 start project,

209
00:00:14,640 --> 00:00:16,950
I'm going to comment out everything that's there.

210
00:00:18,360 --> 00:00:23,310
And then I'm going to import our datetime module. Now, again,

211
00:00:23,370 --> 00:00:26,010
this is the module that comes preloaded with Python

212
00:00:26,070 --> 00:00:28,800
so you don't have to install it. Now,

213
00:00:28,800 --> 00:00:33,800
one of the most useful things to get with daytime is the current date and time.

214
00:00:35,820 --> 00:00:40,820
And you can write Python code to get that from the computer. Inside this date

215
00:00:40,950 --> 00:00:41,783
time module,

216
00:00:41,790 --> 00:00:46,770
there is a class called datetime as denoted by the c here.

217
00:00:47,610 --> 00:00:51,870
And this is how you get to that class. So to get to that class,

218
00:00:51,900 --> 00:00:54,540
you tap into the datetime module

219
00:00:55,050 --> 00:00:57,900
and then you get to the datetime class.

220
00:00:58,380 --> 00:01:00,210
Now this is really confusing.

221
00:01:00,240 --> 00:01:05,239
So I prefer to rename the datetime module and give it a as so we can shorten it

222
00:01:07,020 --> 00:01:08,370
to just dt.

223
00:01:09,180 --> 00:01:12,300
And that way we can say dt.datetime

224
00:01:12,480 --> 00:01:16,920
and that looks a little bit more easier to understand than before. Nnow,

225
00:01:16,950 --> 00:01:21,330
inside this datetime class, there is a method called now,

226
00:01:21,960 --> 00:01:25,590
and this gets you the current date and time.

227
00:01:26,070 --> 00:01:30,810
So if we save this into a variable called now, and we go ahead and print

228
00:01:30,840 --> 00:01:33,270
now, then when I run this code,

229
00:01:33,300 --> 00:01:38,070
you can see it prints a very long string showing you the current year, month,

230
00:01:38,100 --> 00:01:38,850
day,

231
00:01:38,850 --> 00:01:43,850
as well as time in my local time zone with a high degree of accuracy

232
00:01:44,520 --> 00:01:45,353
here. 

233
00:01:46,880 --> 00:01:49,700
Working with that particular string is not very easy.

234
00:01:49,730 --> 00:01:54,730
If you wanted to check something like if now is the year 2020,

235
00:01:56,810 --> 00:02:00,110
then you can't really do that with just a string like that.

236
00:02:00,740 --> 00:02:03,530
That's why once you've gotten the

237
00:02:03,590 --> 00:02:08,590
now object out of this method because this method of course returns and it gets

238
00:02:09,770 --> 00:02:13,760
saved inside here, then we can tap into some of its attributes.

239
00:02:13,940 --> 00:02:17,330
So for example, we can tap into the year.

240
00:02:18,440 --> 00:02:22,610
So let's save that has the year. And if I print that, you can see

241
00:02:22,610 --> 00:02:26,000
it just gives us the year as a number.

242
00:02:26,780 --> 00:02:29,210
And if I do a type check on that,

243
00:02:29,750 --> 00:02:32,720
you can see that it has a class of integer

244
00:02:33,350 --> 00:02:36,020
whereas if I do a type check on now

245
00:02:36,230 --> 00:02:39,350
it has a class of a datetime object.

246
00:02:40,580 --> 00:02:45,290
So this way, if we managed to get hold of the year as a number,

247
00:02:45,320 --> 00:02:46,970
then we can say something like, well,

248
00:02:46,970 --> 00:02:50,960
if the current year is equal to 2020,

249
00:02:51,350 --> 00:02:53,630
then we will print something like,

250
00:02:55,670 --> 00:03:00,310
and because this rings out as true, then that gets printed out.

251
00:03:01,180 --> 00:03:06,010
In addition to the year, we've also got month, day,

252
00:03:06,190 --> 00:03:10,930
hour, minutes. So you can basically tap into anything in that date

253
00:03:10,930 --> 00:03:14,800
time string as you need. So when you write 'now.'

254
00:03:14,800 --> 00:03:19,690
you can see that there's the year, day, month, hour, minutes,

255
00:03:19,720 --> 00:03:22,000
microsecond, second,

256
00:03:22,450 --> 00:03:26,530
and you can get to the specific part of that datetime that you need.

257
00:03:27,160 --> 00:03:31,510
You can even call other methods like weekday. For example,

258
00:03:33,220 --> 00:03:37,870
if we want to know which day of the week it is, so Monday, Tuesday, Wednesday,

259
00:03:38,170 --> 00:03:42,460
then we can simply tap into now and call this weekday method.

260
00:03:43,270 --> 00:03:46,390
And now if we print out this day of the week,

261
00:03:46,420 --> 00:03:49,210
you can see that it gives us a number.

262
00:03:49,600 --> 00:03:54,310
So it remember that computers start counting from zero so 1

263
00:03:54,340 --> 00:03:57,850
means that its actually the second day of the week, which is Tuesday

264
00:03:57,880 --> 00:03:58,930
as you can see up here.

265
00:04:00,280 --> 00:04:04,540
So we've seen how we can get hold of the current day, year,

266
00:04:04,540 --> 00:04:08,680
month and whichever property you're interested in for today.

267
00:04:09,040 --> 00:04:14,040
But what if we wanted to create a daytime object of our own setting it to a

268
00:04:14,800 --> 00:04:17,740
particular date of our choosing? Well,

269
00:04:17,769 --> 00:04:22,770
let's say that I wanted to create a object that stored my date of birth.

270
00:04:25,390 --> 00:04:30,390
Well then I would tap into the dt module and create a new datetime object

271
00:04:31,300 --> 00:04:35,080
from that class. Now I get to specify, well,

272
00:04:35,080 --> 00:04:38,770
what is the year? What is the month?

273
00:04:39,250 --> 00:04:41,200
What is the day?

274
00:04:41,830 --> 00:04:46,830
And I can even go even more specific like which hour was I born in?

275
00:04:48,190 --> 00:04:52,750
And you'll notice that in here, when you look at the parameters,

276
00:04:53,140 --> 00:04:55,300
the year requires an integer,

277
00:04:55,360 --> 00:04:58,390
the month requires an interger and the day requires an integer.

278
00:04:58,780 --> 00:05:03,730
But after the hour we've got this ... as does the minute and the second

279
00:05:04,060 --> 00:05:07,960
and this is because they have default values. So if I delete this,

280
00:05:09,790 --> 00:05:14,790
the only things I'm required to give when I'm creating a new datetime object is

281
00:05:15,490 --> 00:05:16,570
the year, month and day.

282
00:05:17,260 --> 00:05:22,260
Let's say that I was born in 1995 and I was born in December the 15th.

283
00:05:26,880 --> 00:05:27,713
All right.

284
00:05:30,300 --> 00:05:30,840
Now,

285
00:05:30,840 --> 00:05:35,840
if I print this date of birth object you can see that we get 1995,

286
00:05:38,190 --> 00:05:39,690
12, 15,

287
00:05:40,080 --> 00:05:45,080
and the time in hour, minute and second are set to the default values of zero.

288
00:05:46,890 --> 00:05:51,030
If I wanted to be more specific and I wanted to set my hour of birth,

289
00:05:51,060 --> 00:05:53,520
let's say I was born at 4:00 AM,

290
00:05:53,970 --> 00:05:58,700
then we can set the hour and that updates that default value.

291
00:05:59,450 --> 00:06:04,450
So now we've seen how we can tap into the current date time and also create any

292
00:06:05,210 --> 00:06:07,150
datetime object from scratch

293
00:06:07,510 --> 00:06:12,310
then it's time to put this into practice and use it in our project.


294
00:00:00,270 --> 00:00:04,740
Now let's put what you've learned into practice by creating a Monday

295
00:00:04,740 --> 00:00:08,700
motivational quote email application. To get warmed up,

296
00:00:08,850 --> 00:00:13,850
we're going to create a application that looks at the current date and time

297
00:00:15,270 --> 00:00:19,260
and if it happens to be a particular day of the week,

298
00:00:19,650 --> 00:00:21,360
let's say a Tuesday,

299
00:00:21,510 --> 00:00:26,370
then we're going to email ourselves a motivational quote.

300
00:00:27,240 --> 00:00:32,240
So I found 101 Monday motivational !uotes from a place called the positivity

301
00:00:33,090 --> 00:00:35,910
blog and I'll link to this as well.

302
00:00:36,240 --> 00:00:41,190
But the idea is that we all need a little bit of boost on Monday mornings and

303
00:00:41,190 --> 00:00:45,510
getting an email from Albert Einstein might just be the little nudge that we

304
00:00:45,510 --> 00:00:48,870
need in order to push us onto a successful week.

305
00:00:49,350 --> 00:00:50,550
So that's the idea.

306
00:00:51,000 --> 00:00:55,590
And if you take a look in the starting project that you've already downloaded

307
00:00:55,590 --> 00:00:58,980
and opened up, that should be a quotes.txt file.

308
00:00:59,580 --> 00:01:02,010
And here on each line,

309
00:01:02,070 --> 00:01:05,880
I've placed the quote from the positivity blog,

310
00:01:06,270 --> 00:01:10,950
and it's got the quote and person on the same line.

311
00:01:11,580 --> 00:01:16,470
So you can use what you've learned before where we went into how to read files,

312
00:01:16,470 --> 00:01:17,430
how to open files,

313
00:01:17,730 --> 00:01:22,730
how to create a list of all of the lines inside a particular text file.

314
00:01:25,410 --> 00:01:30,410
And you can use that along with what you've learned about sending emails to

315
00:01:30,750 --> 00:01:35,750
check and make sure that the day of the week is your current day of the week

316
00:01:36,420 --> 00:01:40,440
because obviously you need to test this. Instead of setting it to check for

317
00:01:40,440 --> 00:01:43,770
Monday, I want you to check for the current day that you are on.

318
00:01:44,190 --> 00:01:47,580
So if it happens to be Tuesday, then check for Tuesday, if it Saturday,

319
00:01:47,580 --> 00:01:51,600
then check for a Saturday and I want your Python code to make that check

320
00:01:51,990 --> 00:01:54,840
and if it matches today's weekday,

321
00:01:55,170 --> 00:01:59,940
then to send an email with a random quote from the quotes

322
00:01:59,940 --> 00:02:02,010
.txt. That's the goal.

323
00:02:02,340 --> 00:02:05,100
So I want you to pause the video and give it a go.

324
00:02:11,450 --> 00:02:11,900
Yeah.

325
00:02:11,900 --> 00:02:15,170
All right. So in order to complete this mini project,

326
00:02:15,200 --> 00:02:19,910
we first have to import those two modules we learned about; smtplib

327
00:02:20,210 --> 00:02:23,510
and also the datetime module. And again,

328
00:02:23,540 --> 00:02:27,950
I'm going to import it as dt, so give it an alias. Next

329
00:02:28,010 --> 00:02:32,750
we're going to tap into the dt module and we're going to get today's date and

330
00:02:32,750 --> 00:02:35,750
time. So we're going to use this now method.

331
00:02:36,380 --> 00:02:38,540
If now is equal to this,

332
00:02:38,930 --> 00:02:43,930
then today in terms of the weekday is equal to now.weekday.

333
00:02:45,830 --> 00:02:49,190
And once we've gotten hold of that, then we can check well,

334
00:02:49,220 --> 00:02:53,000
if the weekday is equal to say Monday

335
00:02:53,060 --> 00:02:54,500
which would be zero,

336
00:02:55,040 --> 00:03:00,040
then that means we're going to activate the rest of our code and send ourselves

337
00:03:00,190 --> 00:03:03,820
the email. But of course, in order to test our code,

338
00:03:04,150 --> 00:03:08,920
unless you have the patience to wait until next Monday and test your code once

339
00:03:08,920 --> 00:03:09,730
every week,

340
00:03:09,730 --> 00:03:14,200
then we probably want to set this to equal to the weekday that we're on

341
00:03:14,200 --> 00:03:18,700
today. So in my case, I'm on Tuesday so I'm going to set that to equal to 1,

342
00:03:19,000 --> 00:03:22,390
at least while I'm testing my code. And once I'm done with everything,

343
00:03:22,420 --> 00:03:24,820
I can reset that to 0 for Monday.

344
00:03:25,750 --> 00:03:28,540
If the weekday is equal to 1,

345
00:03:29,020 --> 00:03:32,260
then we're going to initiate our email sending mission.

346
00:03:32,860 --> 00:03:36,010
But first we have to figure out what we're going to send.

347
00:03:36,520 --> 00:03:41,520
So we're going to open up our quotes.txt and I'm going to use the with

348
00:03:42,310 --> 00:03:47,310
and then I'm going to use the open method to open the quotes.txt file that

349
00:03:48,550 --> 00:03:49,510
I've got right here.

350
00:03:49,900 --> 00:03:54,900
And I'm going to call this the quote_file. Iside this quote_file

351
00:03:55,600 --> 00:03:59,500
I've got a bunch of quotes, one on each line.

352
00:03:59,920 --> 00:04:04,920
So we can use the method called readlines in order to get a list of all of the

353
00:04:07,630 --> 00:04:11,380
lines in this quote_file and I'm gonna save it into all_quotes.

354
00:04:12,280 --> 00:04:17,279
Now we can import the random module and we can tap into a random quote.

355
00:04:20,200 --> 00:04:25,200
So we'll use random.choice and we'll get a random quote from this list of

356
00:04:26,890 --> 00:04:27,723
quotes.

357
00:04:28,840 --> 00:04:32,800
Now that we've created our quote inside this with block,

358
00:04:33,040 --> 00:04:37,360
we can actually go outside of the with block and we can still access our 

359
00:04:37,360 --> 00:04:40,630
quote. So if I go ahead and print our quote,

360
00:04:40,870 --> 00:04:44,590
you can see we've picked out a random quote. If you want to make an easy job

361
00:04:44,590 --> 00:04:48,730
seem mighty hard just keep putting off doing it by Olin Miller.

362
00:04:49,300 --> 00:04:54,300
And this is what we're going to try and send to ourselves using the smtplib.

363
00:04:55,120 --> 00:05:00,040
Again, inside the same if statement, we're going to create a new connection

364
00:05:00,460 --> 00:05:05,460
which is created from the smtplib and the SMTP class.

365
00:05:06,160 --> 00:05:10,390
Now, once we create this class, we have to provide a host.

366
00:05:10,630 --> 00:05:14,800
So that's the URL of the email server that we're going to use.

367
00:05:15,370 --> 00:05:19,870
Again, I'm going to use my email as my testing Gmail

368
00:05:20,230 --> 00:05:25,230
that was appbreweryinfo@gmail.com.

369
00:05:26,080 --> 00:05:31,080
And then I'm going to put in my password as well as a constant

370
00:05:31,720 --> 00:05:35,770
so this was abcd1234, and then brackets.

371
00:05:36,550 --> 00:05:41,550
And then we can add our SMTP URL. Because we know that we're sending it from the

372
00:05:42,820 --> 00:05:44,200
Gmail email service

373
00:05:44,530 --> 00:05:49,530
then I'm going to tap into the Gmail SMTP server so that's smtp.gmail.com.

374
00:05:53,230 --> 00:05:56,200
And instead of saving this as a connection,

375
00:05:56,260 --> 00:06:01,260
I'm going to use the width method with SMTP as the connection.

376
00:06:03,230 --> 00:06:07,900
Then using this connection, I'm going to firstly secure it.

377
00:06:08,230 --> 00:06:11,050
So I'm going to starttls

378
00:06:11,740 --> 00:06:15,640
and then I'm going to get this connection to log me in.

379
00:06:16,180 --> 00:06:21,180
So the username is my email and the password is my password.

380
00:06:23,830 --> 00:06:26,560
Once I've logged in to this connection,

381
00:06:26,590 --> 00:06:31,150
then I'm going to finally send my email. Now, in this case,

382
00:06:31,180 --> 00:06:34,570
the from address is going to be my email

383
00:06:35,050 --> 00:06:38,350
and the to address is also my email.

384
00:06:38,350 --> 00:06:41,230
I'm just sending an email from myself to myself,

385
00:06:41,590 --> 00:06:44,770
but it's going to have a different piece of content every time it sends it.

386
00:06:45,370 --> 00:06:49,690
And that message is going to contain that content.

387
00:06:50,200 --> 00:06:53,770
So I'm going to change this into an f-string because firstly,

388
00:06:53,770 --> 00:06:58,570
I want to have a subject which I'll call Monday Motivation

389
00:06:59,080 --> 00:07:04,080
and then we know that we can add the content by adding two line breaks.

390
00:07:05,260 --> 00:07:09,010
So let's format this so that it's easier for you to see.

391
00:07:10,570 --> 00:07:13,270
And I'm going to put it on two separate lines like this.

392
00:07:13,870 --> 00:07:17,260
Now after these two new lines comes my content

393
00:07:17,560 --> 00:07:20,200
which is basically going to be my f-string

394
00:07:20,240 --> 00:07:23,140
that's going to insert my quote right here.

395
00:07:23,800 --> 00:07:28,800
So now with all of that done and making sure that our weekday is set as the same

396
00:07:29,230 --> 00:07:31,420
day as today, so weekday ==

397
00:07:31,450 --> 00:07:35,440
1, that is Tuesday. weekday == 0 means it's Monday.

398
00:07:35,860 --> 00:07:39,490
Then we can be sort of sure that this code is actually going to run.

399
00:07:40,390 --> 00:07:42,700
So now if we run our code,

400
00:07:42,850 --> 00:07:47,850
you can see the quote being printed out here by Bertrand Russell.

401
00:07:48,490 --> 00:07:50,740
And if we go to our email,

402
00:07:50,770 --> 00:07:54,520
you can see that email from ourselves. Monday motivation.

403
00:07:54,910 --> 00:07:58,360
One of the symptoms of an approaching nervous breakdown is the belief that one's

404
00:07:58,360 --> 00:07:59,950
work is terribly important.

405
00:08:00,310 --> 00:08:04,390
So I guess today's motivation is to not take ourselves too seriously.

406
00:08:05,110 --> 00:08:08,650
But this is essentially what we're looking to achieve.

407
00:08:09,190 --> 00:08:12,220
So hopefully you managed to get that working. If not,

408
00:08:12,280 --> 00:08:14,350
you can take a look at my finished code

409
00:08:14,590 --> 00:08:18,040
including all of the previous actions on smtplib

410
00:08:18,070 --> 00:08:19,990
sending the email as well as date

411
00:08:19,990 --> 00:08:24,990
time in the day 32 ending code that you'll find on the course resources page.

412
00:08:26,920 --> 00:08:30,070
Now we're pretty much ready to tackle our final project,

413
00:08:30,160 --> 00:08:34,900
which is the automated birthday wisher. So for that,

414
00:08:34,990 --> 00:08:36,700
and more, I'll see you on the next lesson.


415
00:00:00,420 --> 00:00:05,420
Now it's finally time to put all of our skills to use by creating our automated

416
00:00:05,850 --> 00:00:06,870
birthday wisher

417
00:00:07,200 --> 00:00:10,920
which is going to send our family or friends

418
00:00:11,340 --> 00:00:15,660
a "Happy Birthday" email on their birthday automatically.

419
00:00:15,960 --> 00:00:19,980
Now the idea for this project actually came from my mum. Well,

420
00:00:20,040 --> 00:00:20,970
inadvertently.

421
00:00:21,360 --> 00:00:25,350
Now I love my mom to death and she is my biggest source of motivation and

422
00:00:25,380 --> 00:00:28,590
inspiration. But on her birthday,

423
00:00:28,830 --> 00:00:33,830
she always expects me to send her some form of "Happy Birthday" by like 8:00 AM

424
00:00:37,710 --> 00:00:38,120
And

425
00:00:38,120 --> 00:00:42,380
if I send her a message at, like, 8:05,

426
00:00:42,380 --> 00:00:44,600
or 9 o'clock, God forbid,

427
00:00:44,630 --> 00:00:47,900
then I am deemed as a *bad child*.

428
00:00:48,350 --> 00:00:51,470
I don't know if this is true for you. Um,

429
00:00:51,530 --> 00:00:55,010
maybe other Asian kids out there can relate,

430
00:00:55,040 --> 00:01:00,040
but my mom has this thing about being wished a "happy birthday" promptly on her

431
00:01:00,170 --> 00:01:02,870
birthday. And you know, I always remember her birthday,

432
00:01:02,870 --> 00:01:07,790
but I just might remember it at 10 o'clock or, you know, at lunchtime.

433
00:01:07,820 --> 00:01:12,080
And I always panic, um, thinking that I've forgotten or missed

434
00:01:12,110 --> 00:01:16,580
the crucial eight o'clock in the morning time slot.

435
00:01:17,180 --> 00:01:19,130
So what did I decide to do?

436
00:01:19,160 --> 00:01:19,700
Um,

437
00:01:19,700 --> 00:01:24,700
I decided to use Python to create a automated way of wishing her a happy

438
00:01:25,280 --> 00:01:30,280
birthday at 8:00 AM on the spot or even seven o'clock or five o'clock. That way

439
00:01:31,640 --> 00:01:33,830
she'll think that I wake up really early and

440
00:01:34,310 --> 00:01:38,300
I am working really hard in life. But

441
00:01:38,630 --> 00:01:43,610
let me demonstrate to you what this app is going to do. This is the birthday

442
00:01:43,610 --> 00:01:44,510
wisher demo,

443
00:01:44,630 --> 00:01:48,500
and I'm not going to show you the code in my main.py cause that is what

444
00:01:48,500 --> 00:01:49,640
you're going to create.

445
00:01:50,120 --> 00:01:55,100
But what I've got here is a CSV file called birthdays.csv.

446
00:01:56,240 --> 00:02:01,220
Now, here, I'm going to change one of these rows of data to test it.

447
00:02:01,610 --> 00:02:05,570
And I'm going to change the month to the current month

448
00:02:05,600 --> 00:02:09,889
which is July and the day to the current day, which has 14.

449
00:02:10,009 --> 00:02:11,210
So I'll change this

450
00:02:11,450 --> 00:02:16,450
which corresponds to this column of data to 7 and then the day to 14.

451
00:02:18,350 --> 00:02:21,410
And then I'm going to hit save to save that data.

452
00:02:21,980 --> 00:02:24,560
And now I'm going to run this code

453
00:02:24,920 --> 00:02:29,920
and what it will do is it'll check against all of these dates inside my

454
00:02:30,530 --> 00:02:31,580
birthdays.csv,

455
00:02:31,910 --> 00:02:36,910
it'll find that one of these rows of data actually has a month and day that

456
00:02:36,980 --> 00:02:38,150
matches today.

457
00:02:38,540 --> 00:02:43,540
And it will pick a random letter from one of these text files and replace this

458
00:02:44,300 --> 00:02:44,840
name

459
00:02:44,840 --> 00:02:49,840
placeholder with the name of the row of data that actually matched today's

460
00:02:50,450 --> 00:02:55,010
date. And then it's going to send that as an email to this email.

461
00:02:55,700 --> 00:02:58,040
So now if I go ahead and hit run,

462
00:02:58,870 --> 00:03:03,610
and once that process is finished, we can go and check our email.

463
00:03:05,650 --> 00:03:10,650
And you can see that email show up here with a subject line of Happy Birthday!,

464
00:03:11,200 --> 00:03:16,200
and it's replaced the name of the person whose birthday it is right here inside

465
00:03:18,040 --> 00:03:21,760
that name placeholder, it sent the rest of the message

466
00:03:22,120 --> 00:03:26,560
and this was all done automatically. As you can imagine,

467
00:03:26,560 --> 00:03:29,140
if I change this back to a random date,

468
00:03:29,620 --> 00:03:32,740
if our code was running in the background every single day

469
00:03:33,010 --> 00:03:36,790
checking to see if today's date matched one of these dates,

470
00:03:36,970 --> 00:03:40,390
then the day when it actually matches or on their birthday,

471
00:03:40,660 --> 00:03:44,500
it's going to pick out their name, insert it into one of these letters randomly,

472
00:03:44,860 --> 00:03:46,780
and then send it to them as an email.

473
00:03:47,260 --> 00:03:50,710
And the reason why we have three letters is just because so that they don't

474
00:03:51,310 --> 00:03:56,050
actually clock onto the fact that it's the same letter being sent every single

475
00:03:56,050 --> 00:03:56,883
year.

476
00:03:57,640 --> 00:04:01,780
The ethics of this whole project is really up to you to decide. Um,

477
00:04:01,840 --> 00:04:05,200
I don't actually do this in reality. Um,

478
00:04:05,230 --> 00:04:10,230
I just live with being told I'm a bad child by wishing my mom happy birthday at

479
00:04:10,480 --> 00:04:14,290
10:00 AM instead of 8:00 AM. But in terms of Python Programming,

480
00:04:14,320 --> 00:04:18,850
this is going to be a really interesting project because it's going to use a lot

481
00:04:18,850 --> 00:04:20,470
of the things that you've learned before

482
00:04:20,470 --> 00:04:24,970
like pandas to read CSVs or replacing texts,

483
00:04:25,030 --> 00:04:28,150
doing mail merge, using built in Python

484
00:04:28,150 --> 00:04:32,530
ways of opening and reading files, and also of course what we learned recently

485
00:04:32,530 --> 00:04:35,260
which is the datetime module and the smtplib.

486
00:04:36,460 --> 00:04:41,020
Now the starting project I've split into three difficulty levels.

487
00:04:41,380 --> 00:04:46,180
So depending on how comfortable you feel with the things that you've learned in

488
00:04:46,180 --> 00:04:47,890
all of these 32 days,

489
00:04:48,070 --> 00:04:52,660
you can pick which level of starting project you want to use.

490
00:04:53,200 --> 00:04:57,430
Obviously, if you go for the extra hard starting project,

491
00:04:57,730 --> 00:04:59,680
it's not going to have a lot of hints in there.

492
00:04:59,710 --> 00:05:03,190
It's going to tell you generally what the program needs to do

493
00:05:03,310 --> 00:05:08,020
and it's your job to figure out how to actually implement it using maybe a

494
00:05:08,020 --> 00:05:12,100
Google search or Stack Overflow or looking through some of the path lessons.

495
00:05:12,250 --> 00:05:15,340
This is going to be the extra hard version.

496
00:05:15,790 --> 00:05:19,240
And then there's the hard version with some hints, but not a lot.

497
00:05:19,630 --> 00:05:23,650
And there's the normal version where I've put in a lot more hints that will make

498
00:05:23,650 --> 00:05:26,560
it a little bit easier for you to write out all the code.

499
00:05:27,250 --> 00:05:31,600
So depending on how confident you feel, head over to the course resources,

500
00:05:31,960 --> 00:05:36,010
pic the difficulty level for your starting project

501
00:05:36,700 --> 00:05:39,190
and then go ahead and try to complete this project.


502
00:00:00,630 --> 00:00:04,770
Now I hope you've given this project a good go because I'm going to now go

503
00:00:04,770 --> 00:00:08,910
through the solution for the normal starting project. Now,

504
00:00:08,940 --> 00:00:13,770
the important thing to stress here is that if you used one of the hard starting 

505
00:00:13,770 --> 00:00:16,140
project or the extra hard starting project,

506
00:00:16,500 --> 00:00:20,850
you might have ended up with a different method of doing the same thing.

507
00:00:21,450 --> 00:00:24,360
And often I get students asking me,

508
00:00:24,360 --> 00:00:26,520
what is the right way of doing things?

509
00:00:26,820 --> 00:00:31,050
And this is not really the thing that you should focus on. Instead,

510
00:00:31,160 --> 00:00:33,950
use your creativity, you use your skills

511
00:00:34,430 --> 00:00:38,090
and make sure that your program does what you want it to.

512
00:00:38,510 --> 00:00:40,760
There is no real right answer.

513
00:00:40,880 --> 00:00:45,880
It really depends on your preferences or even what it is that you know how to

514
00:00:45,890 --> 00:00:46,670
do.

515
00:00:46,670 --> 00:00:51,500
If you can get this project to work using just your own skills and a bit of

516
00:00:51,500 --> 00:00:55,550
Googling, a bit of Stack Overflow, as long as you managed to get it to work,

517
00:00:55,580 --> 00:01:00,200
it's way more important than what is the right way of doing things.

518
00:01:00,680 --> 00:01:04,129
So all of that, I'm trying to say that I'm going to go through the solution,

519
00:01:04,370 --> 00:01:08,870
but don't view this as the ultimate solution. And if you did it a different way,

520
00:01:08,900 --> 00:01:13,850
that's totally fine as long as it works. Alright, let's get started. So here,

521
00:01:13,850 --> 00:01:17,420
I've got these starting files for the normal starting project,

522
00:01:17,960 --> 00:01:22,340
and I'm going to go through each of the lines line by line to create our final

523
00:01:22,400 --> 00:01:23,750
birthday wisher project.

524
00:01:24,320 --> 00:01:28,610
The first thing the instruction tells us to do is to go into this birthdays

525
00:01:28,610 --> 00:01:33,610
.csv and update this with some birthdays of our friends and family.

526
00:01:34,670 --> 00:01:37,100
So I'm going to replace all the data that's currently in here,

527
00:01:37,550 --> 00:01:41,660
and I'm going to add some data of my own. Now,

528
00:01:41,720 --> 00:01:45,980
the thing that we have to do in order to test this code is to make sure that one

529
00:01:45,980 --> 00:01:50,390
of these rows of data actually matches an email that we can access

530
00:01:50,780 --> 00:01:53,330
and also today's month and day.

531
00:01:53,840 --> 00:01:56,090
So today is July 14th

532
00:01:56,120 --> 00:02:00,140
so I'm going to update those two numbers and the year doesn't matter so much in

533
00:02:00,140 --> 00:02:02,480
this case. Once I've done that,

534
00:02:02,480 --> 00:02:07,340
I'm going to hit save, command + s or just go to file and go to save all.

535
00:02:08,270 --> 00:02:13,270
And you can also see the shortcut for your particular operating system there as

536
00:02:13,310 --> 00:02:16,490
well. Now, inside my main.py,

537
00:02:16,490 --> 00:02:20,300
I've now completed this step. So I'm going to go ahead and delete it.

538
00:02:22,220 --> 00:02:24,080
Now, step 2 is the hardest.

539
00:02:24,410 --> 00:02:29,410
And here we have to check if today's date matches a birthday in the birthday

540
00:02:30,170 --> 00:02:31,003
CSV.

541
00:02:31,400 --> 00:02:35,540
The first thing I'm going to do is I'm going to import datetime

542
00:02:35,990 --> 00:02:39,830
because that's going to be crucial for me to be able to figure out what today's

543
00:02:39,830 --> 00:02:43,880
date actually is. And in fact, that is what hint one says.

544
00:02:44,300 --> 00:02:48,530
It says to create a tuple from today's month and day using the datetime

545
00:02:48,530 --> 00:02:51,200
module. This is essentially what we want to create.

546
00:02:51,440 --> 00:02:53,840
So how do we get hold of today's month? Well,

547
00:02:53,870 --> 00:02:57,650
we can use the datetime module and then the datetime class,

548
00:02:57,710 --> 00:03:02,710
and then we can call now and we can get hold of the month like this.

549
00:03:04,870 --> 00:03:07,230
Now we can simplify this in a number of ways.

550
00:03:07,250 --> 00:03:11,680
We can create a alias for datetime as dt.

551
00:03:12,040 --> 00:03:15,610
So then we can shorten this by a little bit, or

552
00:03:15,610 --> 00:03:20,610
you can shorten it even more just by saying, well, from the datetime module

553
00:03:20,650 --> 00:03:24,220
let's go ahead and import just the datetime class.

554
00:03:24,790 --> 00:03:29,790
That way you can actually set this to simply as datetime.now.month.

555
00:03:31,450 --> 00:03:36,250
Then we have to get hold of today's day so we could copy this

556
00:03:36,310 --> 00:03:38,920
and instead of getting the month we could get the day.

557
00:03:39,640 --> 00:03:44,620
So now we've created today. Now you can of course split this into two parts

558
00:03:44,620 --> 00:03:46,510
if you find it easier to understand.

559
00:03:46,840 --> 00:03:51,010
You could say that today well is equal to datetime.now,

560
00:03:51,670 --> 00:03:55,000
and then today_tuple is equal to a tuple

561
00:03:55,030 --> 00:04:00,030
which is today.month, today.day.

562
00:04:00,760 --> 00:04:04,600
So this is another variation and there's millions of variations out there

563
00:04:04,600 --> 00:04:08,860
of course. So I think we're now done with hint 1 so let's go and delete it.

564
00:04:09,340 --> 00:04:10,870
Now we're onto hint 2.

565
00:04:11,050 --> 00:04:14,260
We're going to use pandas to read from the birthday CSV.

566
00:04:14,620 --> 00:04:19,480
So we're going to import pandas. And once we've imported that,

567
00:04:19,510 --> 00:04:24,510
we're going to use pandas to read CSV and then provide our file name

568
00:04:25,030 --> 00:04:27,490
which is birthdays.csv.

569
00:04:28,000 --> 00:04:31,720
So I'm going to save this as a variable called data. And remember,

570
00:04:31,750 --> 00:04:33,910
this is now a pandas dataframe

571
00:04:34,420 --> 00:04:39,280
which we can use to do a number of things with including using these

572
00:04:39,280 --> 00:04:42,610
instructions to create a birthday dictionary.

573
00:04:43,330 --> 00:04:47,530
So what we're going to do is we're going to create a dictionary comprehension,

574
00:04:48,100 --> 00:04:52,960
and I provided the template here for you already. So you can use that

575
00:04:53,050 --> 00:04:58,050
iterrows in order to iterate through our dataframe that was created here,

576
00:04:58,480 --> 00:05:00,100
so data.iterrows,

577
00:05:00,310 --> 00:05:05,260
and then we'll get hold of the index of each of those rows and also the data in

578
00:05:05,260 --> 00:05:06,160
each of the rows.

579
00:05:06,760 --> 00:05:11,760
And then we could create a new dictionary with a new key and a new value from

580
00:05:12,040 --> 00:05:14,470
all of these things that we've iterated through.

581
00:05:15,130 --> 00:05:19,450
What is that new key going to be? Well, it's going to look something like this,

582
00:05:19,480 --> 00:05:20,313
right?

583
00:05:20,590 --> 00:05:25,570
We're hoping to create this birthday dictionary using this particular format.

584
00:05:26,140 --> 00:05:31,140
Now the key is going to be a tuple that consists of the birthday month and the

585
00:05:31,600 --> 00:05:32,433
birthday day

586
00:05:32,830 --> 00:05:37,830
so let's replace that new key with a tuple. And the birthday month is of course

587
00:05:38,050 --> 00:05:41,710
going to come from our data row. So that we're going to say data_row

588
00:05:42,040 --> 00:05:43,930
and then we can either use square brackets

589
00:05:43,960 --> 00:05:48,960
or we can use the dot notation to get hold of the data in this month column.

590
00:05:50,440 --> 00:05:55,440
So you can either say data_row.month or data_row square brackets

591
00:05:56,050 --> 00:05:59,540
and then month, like this. So it's totally up to you.

592
00:06:00,200 --> 00:06:04,790
And then the next item in the tuple which is still in the key,

593
00:06:04,790 --> 00:06:09,080
so we're still before the colon here, is going to be the birthday_day.

594
00:06:09,110 --> 00:06:10,970
So that's going to be the data_row

595
00:06:11,330 --> 00:06:14,540
and then we have to pass in the name of the day column,

596
00:06:14,570 --> 00:06:16,670
which is just the word day.

597
00:06:19,370 --> 00:06:20,600
Now, once we've done that,

598
00:06:20,720 --> 00:06:25,720
then we have to provide what is the value for each of these key value pairs in

599
00:06:26,000 --> 00:06:29,690
our dictionary. Well, what we actually want is the data row,

600
00:06:29,690 --> 00:06:34,400
so the entire row of data, and we want it to look a bit like this.

601
00:06:34,430 --> 00:06:37,730
So we have our tuple with our month and our day as the key

602
00:06:38,060 --> 00:06:40,820
and then the value is just the entire row of data.

603
00:06:41,270 --> 00:06:46,070
So we can simply replace this value with our data row like this.

604
00:06:46,730 --> 00:06:51,730
Now we're pretty much done with this part and we can delete all of these bits of

605
00:06:51,950 --> 00:06:56,420
hints and comments, and I can delete this example code as well.

606
00:06:57,080 --> 00:06:59,300
Now that we've got our birthday dictionary,

607
00:06:59,390 --> 00:07:04,390
the next thing we want to do is we want to check to see if today matches a

608
00:07:04,490 --> 00:07:06,170
birthday in the birthdays.csv.

609
00:07:06,470 --> 00:07:11,120
So you wanna check if this tuple exists inside this birthday_dict

610
00:07:11,510 --> 00:07:15,830
and if it matches one of the actual birthday month and days.

611
00:07:16,310 --> 00:07:20,720
So we can do something like this; if today_month, today_

612
00:07:20,720 --> 00:07:23,660
day is in our birthdays dictionary.

613
00:07:24,200 --> 00:07:28,580
Now this today_month today_day is of course going to be our today_

614
00:07:28,670 --> 00:07:31,940
tuple. And this way with this

615
00:07:31,970 --> 00:07:36,970
if statement we can check to see if this today_tuple with the month and day

616
00:07:37,400 --> 00:07:42,200
actually exists as one of our friends and family's birthdays inside this

617
00:07:42,200 --> 00:07:45,890
birthdays_dict. And once we've done that,

618
00:07:46,010 --> 00:07:51,010
then we can get rid of step 2 and move on to step 3. In step 3

619
00:07:51,290 --> 00:07:55,130
we're saying, well, if there is a match, so if this if statement is true,

620
00:07:55,580 --> 00:07:58,970
then we're gonna pick a random letter out of letter_1, 2,

621
00:07:58,970 --> 00:08:03,970
3, from our letter templates inside here. To do that,

622
00:08:04,070 --> 00:08:06,830
we're going to need to think about the relative file path.

623
00:08:06,830 --> 00:08:10,850
So we have to access the letter template folder to get to

624
00:08:10,850 --> 00:08:11,960
each of these files.

625
00:08:12,440 --> 00:08:17,440
The file path will look something like this.

626
00:08:17,870 --> 00:08:21,740
It will be letter_template/ one of these letters for example,

627
00:08:21,740 --> 00:08:25,910
letter_1.txt or letter_2 or 3. In fact,

628
00:08:25,940 --> 00:08:30,380
this particular number is going to be something that we're going to generate

629
00:08:30,440 --> 00:08:33,559
randomly and we're going to put in there as a f-string.

630
00:08:34,159 --> 00:08:38,780
So I need to now import the random module in addition to everything else.

631
00:08:39,320 --> 00:08:44,320
And we can go ahead and call the random module and get a randint between one and

632
00:08:46,490 --> 00:08:47,323
three.

633
00:08:47,410 --> 00:08:48,820
Like this.

634
00:08:50,140 --> 00:08:53,320
So now we've completed these two hints, and finally,

635
00:08:53,350 --> 00:08:58,350
we're going to use the replace() method to replace the name placeholder inside each of

636
00:08:58,740 --> 00:09:03,740
these letters right here with the actual name of the person whose birthday it is.

637
00:09:04,830 --> 00:09:09,030
Here I've linked it to the documentation for the replace keyword

638
00:09:09,960 --> 00:09:14,550
and this is what it looks like. For example, if we have a string like this,

639
00:09:14,580 --> 00:09:18,930
then we can say text.replace, take the word that we want to take out

640
00:09:18,990 --> 00:09:22,140
and then the word we want to put in. In our case,

641
00:09:22,290 --> 00:09:26,730
we're going to have to read the text from this file with our 

642
00:09:26,730 --> 00:09:31,110
with open, and then the file path goes in here,

643
00:09:31,440 --> 00:09:34,290
and then we'll call this the letter_file.

644
00:09:35,700 --> 00:09:37,200
And then from this letter_file,

645
00:09:37,200 --> 00:09:42,000
we're going to get the contents by reading from this letter_file.

646
00:09:42,380 --> 00:09:43,213
Right.

647
00:09:44,990 --> 00:09:49,340
Now, once we've gotten the contents, then we can say contents.replace

648
00:09:49,730 --> 00:09:54,500
and the thing that we want to replace is that hard-coded name placeholder

649
00:09:54,980 --> 00:09:59,750
and the thing we want to replace it with comes from the current matching

650
00:09:59,780 --> 00:10:00,613
birthday.

651
00:10:02,120 --> 00:10:06,800
If the today_tuple exists inside our birthday dictionary,

652
00:10:07,250 --> 00:10:10,100
then we can get hold of the entire row of data

653
00:10:10,550 --> 00:10:11,383
...

654
00:10:14,660 --> 00:10:19,660
by taking our birthday dictionary and then getting hold of the item at the key

655
00:10:21,380 --> 00:10:23,240
which matches today_tuple.

656
00:10:24,650 --> 00:10:29,240
Remember that today_tuple is the month and day as a tuple and the birthday

657
00:10:29,240 --> 00:10:34,240
dictionaries all have keys as the birthday month and birthday day as a tuple.

658
00:10:35,030 --> 00:10:39,260
So we've checked that this tuple exists as a key inside the birthday

659
00:10:39,260 --> 00:10:40,093
dictionary,

660
00:10:40,250 --> 00:10:45,200
and then we use the square bracket to actually access the data row for that

661
00:10:45,200 --> 00:10:49,130
particular match. And then we've got the birthday_person,

662
00:10:49,490 --> 00:10:51,740
so from that birthday_person

663
00:10:52,100 --> 00:10:54,740
we're going to get hold of their name.

664
00:10:55,190 --> 00:10:58,940
And the name lives under the name column here.

665
00:10:59,570 --> 00:11:01,610
As long as we put the name as a string,

666
00:11:01,970 --> 00:11:05,510
then we should be able to get hold of their actual name right here.

667
00:11:06,770 --> 00:11:09,920
And that is the end of step 3.

668
00:11:10,550 --> 00:11:13,130
So now we're finally moving on to step 4

669
00:11:13,370 --> 00:11:15,380
where we're going to send our letter

670
00:11:15,380 --> 00:11:18,650
which was generated here in our contents,

671
00:11:19,010 --> 00:11:22,400
and we're going to send it to that birthday person's email address.

672
00:11:23,840 --> 00:11:27,470
So the first thing we're going to need is to create a connection and we're going

673
00:11:27,470 --> 00:11:30,770
to use the smtplib library to do that.

674
00:11:31,130 --> 00:11:35,750
So import smtplib. And then we're going to say with smtp

675
00:11:35,750 --> 00:11:39,830
lib.SMTP, let's create an object from that

676
00:11:40,130 --> 00:11:44,480
and we have to provide the host string. So as I mentioned before,

677
00:11:44,480 --> 00:11:48,350
depending on which email provider you use, it will be different.

678
00:11:48,860 --> 00:11:53,270
Now I'm going to put in my email and password at the top as constants.

679
00:11:53,770 --> 00:11:55,420
Of course, this is not going to work for you

680
00:11:55,420 --> 00:11:58,450
so you're going to have to use your own email and password.

681
00:11:59,020 --> 00:12:01,660
And depending on which email provider you use,

682
00:12:01,690 --> 00:12:06,010
you'll have to pick the correct SMTP. So I'm sending emails

683
00:12:06,010 --> 00:12:10,120
using Gmail so I'm going to change this to smtp.gmail.com.

684
00:12:10,690 --> 00:12:15,690
And I'm going to save this connection that I create as the connection.

685
00:12:16,630 --> 00:12:21,630
Step 2 is to go ahead and call the starrttls.

686
00:12:23,050 --> 00:12:27,190
So we'll get our connection and then call starttls.

687
00:12:27,670 --> 00:12:32,670
And then step 3  is to log in to our connection by calling login.

688
00:12:35,530 --> 00:12:40,150
And then we have to provide the email that we want to log into and the password

689
00:12:40,180 --> 00:12:44,920
for that email account. Finally,

690
00:12:44,980 --> 00:12:49,980
we're going to set up the subject and the content by calling connection.

691
00:12:50,350 --> 00:12:55,060
sendmail. And the from address is MY_EMAIL,

692
00:12:55,630 --> 00:13:00,280
the to address is going to be the email of the birthday person.

693
00:13:00,730 --> 00:13:03,130
So we're going to get our birthday_person

694
00:13:03,820 --> 00:13:08,710
and then we're going to get hold of their email by looking at the name of the

695
00:13:08,740 --> 00:13:12,460
email column, which is just email actually like this.

696
00:13:12,970 --> 00:13:16,870
And then finally, we can add in the actual message.

697
00:13:18,880 --> 00:13:19,690
I'm going to again,

698
00:13:19,690 --> 00:13:23,230
format this so that it's a little bit easier to read for you.

699
00:13:25,480 --> 00:13:27,550
And then we're going to set up our message.

700
00:13:27,760 --> 00:13:32,760
This is going to be an f-string and the subject is always going to be the same.

701
00:13:33,130 --> 00:13:35,110
It's going to be happy birthday.

702
00:13:36,280 --> 00:13:40,840
And then after two of these new lines, we can add the actual message body.

703
00:13:41,350 --> 00:13:45,970
Now the message body is going to be the contents that we created because, 

704
00:13:45,970 --> 00:13:49,360
remember, that takes a random letter, reads it

705
00:13:49,420 --> 00:13:53,500
and then replaces in the name placeholder with the birthday person's name.

706
00:13:54,130 --> 00:13:55,870
So that's what we're going to put in here.

707
00:13:56,440 --> 00:13:59,860
And now that's step 4 completed as well

708
00:14:00,220 --> 00:14:04,150
and we can now go ahead and run this file.

709
00:14:04,630 --> 00:14:09,250
And hopefully it will show us process finished with exit code zero,

710
00:14:09,280 --> 00:14:13,030
which is the best thing we can see. That means everything went well.

711
00:14:13,510 --> 00:14:15,610
And remember that the birthday

712
00:14:15,610 --> 00:14:19,840
which I set to test was this row of data.

713
00:14:20,320 --> 00:14:25,320
So it should have replaced a random letter's placeholder with the name of mum

714
00:14:26,650 --> 00:14:31,540
and it should've sent that email to appbreweryinfo@gmail.com. So now

715
00:14:31,540 --> 00:14:34,870
if I take a look at my appbreweryinfo@gmail.com,

716
00:14:35,380 --> 00:14:39,280
you can see the email come through, but you might notice a bug here.

717
00:14:39,700 --> 00:14:42,820
The name was actually never replaced. Instead,

718
00:14:42,880 --> 00:14:44,710
we're still seeing this placeholder.

719
00:14:45,100 --> 00:14:48,550
So this is a really common mistake that a lot of people make

720
00:14:48,850 --> 00:14:53,850
and the reason is because the text replacement comes out as the output.

721
00:14:54,620 --> 00:14:58,880
So it doesn't actually change the original text just by calling that method.

722
00:14:59,240 --> 00:14:59,810
Instead,

723
00:14:59,810 --> 00:15:04,760
you have to save it to a new variable in order to see the replaced text.

724
00:15:05,720 --> 00:15:10,250
So in our case what that means is we can't just say content.replace.

725
00:15:10,520 --> 00:15:14,660
We actually have to say contents = contents.replace.

726
00:15:14,690 --> 00:15:19,690
So we replace the contents and then we save it back to the original variable.

727
00:15:21,260 --> 00:15:25,460
So now if I run this again, you can see that this time

728
00:15:25,490 --> 00:15:28,940
our message actually has the name replaced in here,

729
00:15:29,270 --> 00:15:34,270
it has a random letter that it's generated and it has sent it to the correct

730
00:15:34,490 --> 00:15:39,140
email address. If you want to take a look at the completed code,

731
00:15:39,200 --> 00:15:44,180
then you'll find it in the course resources as the end code for the birthday

732
00:15:44,180 --> 00:15:45,140
wisher project

733
00:15:45,530 --> 00:15:49,220
and this contains a lot of things that we've talked about so far,

734
00:15:49,520 --> 00:15:53,180
including dictionary comprehension, reading CSVs,

735
00:15:53,210 --> 00:15:57,590
creating dataframes from pandas, using and creating tuples,

736
00:15:57,980 --> 00:16:02,780
working with dictionaries, file paths, opening files,

737
00:16:02,840 --> 00:16:05,870
replacing files, reading them, and of course,

738
00:16:05,930 --> 00:16:09,920
writing and sending email as well as the datetime module.

739
00:16:10,550 --> 00:16:13,370
So if you got stuck on any of these aspects,

740
00:16:13,760 --> 00:16:18,590
then be sure to take a look at the previous lesson where we covered them

741
00:16:18,650 --> 00:16:23,650
because we covered all of these concepts in a lot of detail in previous lessons.

742
00:16:24,530 --> 00:16:28,070
So make sure that you don't just skip ahead if you actually got stuck.

743
00:16:28,160 --> 00:16:33,160
It probably is an indicator that it's a good time to revisit and review some of

744
00:16:33,800 --> 00:16:37,910
these concepts. For example, if you got stuck on dictionary comprehension,

745
00:16:38,180 --> 00:16:42,140
then go back to the lessons where we did list and dictionary comprehensions

746
00:16:42,440 --> 00:16:46,490
and try out some of the exercises again, just to refresh your mind. Now,

747
00:16:46,520 --> 00:16:51,520
if you got stuck on working with the iterrows or the data that comes from our

748
00:16:52,520 --> 00:16:57,020
pandas dataframes, then go back to those lessons where we talked about CSVs,

749
00:16:57,020 --> 00:17:00,770
and we talked about pandas because nothing here is new,

750
00:17:01,070 --> 00:17:06,069
but it does require your understanding and your ability to know how to apply the

751
00:17:06,890 --> 00:17:10,550
knowledge that you've learned before. Now,

752
00:17:10,640 --> 00:17:15,640
the final thing I want to show you in the next lesson is how to get this code to

753
00:17:16,310 --> 00:17:21,310
actually run every day so it can actually check every single day to see if it

754
00:17:22,190 --> 00:17:24,500
needs to send out a birthday email.

755
00:17:24,980 --> 00:17:27,650
So for all of that and more, I'll see you on the next lesson.


756
00:00:00,060 --> 00:00:01,170
In previous lessons,

757
00:00:01,200 --> 00:00:05,700
we completed our automated birthday wisher Python project

758
00:00:06,000 --> 00:00:10,110
and also the motivational quotes on Monday's Python project.

759
00:00:10,620 --> 00:00:11,700
But at the moment,

760
00:00:11,700 --> 00:00:16,700
you'll notice that this code is only going to work to continuously check to see

761
00:00:17,250 --> 00:00:20,970
which day it is currently, compare it against the birthdays,

762
00:00:21,300 --> 00:00:22,710
and then run the code

763
00:00:23,070 --> 00:00:26,610
if this code is actually running constantly in the background.

764
00:00:27,210 --> 00:00:30,990
Now you could of course, open up your project in PyCharm,

765
00:00:31,050 --> 00:00:35,730
hit run every single day and make sure that it works,

766
00:00:36,000 --> 00:00:39,840
but that's actually more effort than wishing somebody happy birthday manually.

767
00:00:40,380 --> 00:00:42,330
So what do we do instead? Well,

768
00:00:42,330 --> 00:00:47,330
we want some sort of way where we can host our code in the cloud and run our code

769
00:00:49,290 --> 00:00:50,670
every single day.

770
00:00:51,390 --> 00:00:55,380
So one way of doing that is using a service called Python anywhere,

771
00:00:55,830 --> 00:01:00,270
and they have a free tier where we can do exactly that without having to pay

772
00:01:00,270 --> 00:01:03,030
anything. Head over to python

773
00:01:03,030 --> 00:01:07,020
anywhere.com and go ahead and sign up for a new account.

774
00:01:07,830 --> 00:01:09,960
Now, once you've signed up and signed in,

775
00:01:10,230 --> 00:01:13,710
then you want to go ahead and start adding some files.

776
00:01:14,250 --> 00:01:16,320
Head over to the files tab right here

777
00:01:16,740 --> 00:01:21,740
and we're going to upload the files that's currently inside our birthday wisher

778
00:01:22,080 --> 00:01:26,310
project. So that's our main.y, our birthdays.csv,

779
00:01:27,480 --> 00:01:29,640
and also our letter templates.

780
00:01:30,150 --> 00:01:34,530
Now we want our letter templates to be inside a folder, so we're going to

781
00:01:34,530 --> 00:01:38,340
create a new directory called letter_templates.

782
00:01:38,760 --> 00:01:40,470
Make sure there's no typos there.

783
00:01:41,130 --> 00:01:45,360
And then inside this directory is where we're going to upload these three files.

784
00:01:45,840 --> 00:01:47,850
So letter 1, 2 and 3.

785
00:01:48,870 --> 00:01:53,700
So now we've got our letters inside hom/AppBrewery/letter_

786
00:01:53,700 --> 00:01:55,980
templates, and inside AppBrewery

787
00:01:55,980 --> 00:01:58,740
we've got our birthdays.csv and our main.py.

788
00:01:59,400 --> 00:02:04,400
So now we're going to go into our console and we're going to create a new bash

789
00:02:05,430 --> 00:02:08,280
console. So we're going to click on this link right here,

790
00:02:09,570 --> 00:02:13,470
and then once all of that's loaded and you see this dollar sign right here,

791
00:02:13,740 --> 00:02:17,550
we're going to type python3 main.py.

792
00:02:18,960 --> 00:02:23,820
Now you might see this error right here, the SMTP authentication error.

793
00:02:24,360 --> 00:02:29,360
And this is something that happens because our Python program is trying to log

794
00:02:29,370 --> 00:02:33,510
into our email, and our email provider in this case,

795
00:02:33,540 --> 00:02:38,540
it's Google, is actually blocking it. So we can copy this URL and you can see it

796
00:02:39,510 --> 00:02:40,590
ends right here

797
00:02:40,590 --> 00:02:45,590
cause there's a space there, and we can paste it into the address bar and it

798
00:02:45,930 --> 00:02:47,220
takes us to this problem.

799
00:02:47,400 --> 00:02:52,200
I can't sign into my email client, and this is essentially what our Python code

800
00:02:52,200 --> 00:02:53,033
is trying to do.

801
00:02:53,400 --> 00:02:58,400
So what we need to do is click on this link to display the unlock capture, we

802
00:02:58,830 --> 00:03:03,670
click continue, and it's now enabled our code to sign in again.

803
00:03:04,120 --> 00:03:08,830
So we have to go back and type in exactly the same as we did before, python3

804
00:03:09,190 --> 00:03:10,120
main.py.

805
00:03:11,050 --> 00:03:14,980
But this time it should complete without giving us any errors

806
00:03:15,280 --> 00:03:19,000
and it does that by showing us the dollar sign again and our prompt.

807
00:03:19,570 --> 00:03:22,600
And now if I head back into my email,

808
00:03:22,810 --> 00:03:27,810
you can see that this email was actually sent because the code was initiated

809
00:03:29,290 --> 00:03:33,340
inside Pythonanywhere. So going back to our Python

810
00:03:33,340 --> 00:03:34,570
anywhere dashboard,

811
00:03:35,080 --> 00:03:39,040
we can go to the task section to actually schedule

812
00:03:39,280 --> 00:03:43,210
a task to run. Now to set up a scheduled task,

813
00:03:43,270 --> 00:03:46,930
we're going to type the same command that we did in the console

814
00:03:47,170 --> 00:03:49,870
which is python3 main.py.

815
00:03:50,560 --> 00:03:53,590
And then we're going to schedule this at a particular time.

816
00:03:54,010 --> 00:03:56,650
And the server time is based on UTC.

817
00:03:57,160 --> 00:04:01,180
So you can take a look at the current time in UTC

818
00:04:01,210 --> 00:04:03,790
by typing in UTC now into Google

819
00:04:04,120 --> 00:04:06,310
and you can see right now it's 12:09.

820
00:04:06,910 --> 00:04:10,900
So if I go ahead and schedule this for 12:10

821
00:04:11,440 --> 00:04:13,030
and I hit create,

822
00:04:13,540 --> 00:04:17,200
then at the time when this particular time hits,

823
00:04:17,470 --> 00:04:21,970
when it becomes 12:10, then our command should be run

824
00:04:22,300 --> 00:04:26,560
and we should see a happy birthday email show up in our testing Gmail account.

825
00:04:27,460 --> 00:04:30,970
So right now UTC has just gone to 12:10.

826
00:04:31,720 --> 00:04:34,810
And so if we wait for this schedule task,

827
00:04:35,080 --> 00:04:40,080
we can click on this button to view the task log and you do have to be quite

828
00:04:41,530 --> 00:04:46,530
patient because sometimes it might take a while before that task actually gets

829
00:04:46,810 --> 00:04:51,640
executed. So just keep checking the task log until you see this happen.

830
00:04:51,940 --> 00:04:56,320
Completed task at 12:10:56, o at the end of that minute.

831
00:04:56,710 --> 00:05:01,630
Took 16.92 seconds return code was zero, which means it was successful.

832
00:05:02,110 --> 00:05:07,110
And now we can see that email show up in our Gmail account and this was

833
00:05:07,480 --> 00:05:11,770
completely automated and it was done by Python anywhere.

834
00:05:12,160 --> 00:05:16,210
So now if we have that code running in the background every day,

835
00:05:16,240 --> 00:05:21,010
you can get it to run that code at this particular time or another time of your

836
00:05:21,010 --> 00:05:23,440
choosing in fact. If you're not testing it,

837
00:05:23,530 --> 00:05:28,030
you can actually get it to run much earlier. Let's say maybe seven o'clock UTC.

838
00:05:28,930 --> 00:05:31,180
Then it'll send the email out in the morning.

839
00:05:31,780 --> 00:05:36,760
And every day it's going to check whose birthday it is in your birthday CSV

840
00:05:36,850 --> 00:05:40,210
and then send an email to them and do all of that fancy stuff

841
00:05:40,330 --> 00:05:45,330
using what we did with Python. Python anywhere has really good forums for help

842
00:05:46,210 --> 00:05:48,910
and advice. And on the free tier,

843
00:05:48,940 --> 00:05:53,830
you can only schedule one task to run, so one particular code base.

844
00:05:54,190 --> 00:05:57,220
Now I don't work for them and I have no relations to them,

845
00:05:57,610 --> 00:06:02,050
but I find it really helpful to have a really simple way of getting my Python

846
00:06:02,050 --> 00:06:05,260
scripts to run everyday at a particular time.

847
00:06:05,500 --> 00:06:09,430
So have a look at that and you can use it if you find it helpful as well.


