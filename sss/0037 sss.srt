1
00:00:00,240 --> 00:00:00,870
Hey guys,

2
00:00:00,870 --> 00:00:05,400
welcome to day 37 of 100 Days of Code. Today

3
00:00:05,430 --> 00:00:09,840
we're going to be learning about advanced authentication methods using the

4
00:00:09,840 --> 00:00:10,673
header

5
00:00:10,860 --> 00:00:15,450
and we're also going to be learning how to make POST, PUT and DELETE requests

6
00:00:15,540 --> 00:00:19,980
using the requests module. And once we've learned all of that,

7
00:00:20,040 --> 00:00:24,450
we're going to be building a habit tracker. This lady is Simone Giertz

8
00:00:24,540 --> 00:00:26,760
and she's somebody who I really admire.

9
00:00:26,760 --> 00:00:31,740
She makes all sorts of useless robots, um, that's what she says,

10
00:00:31,800 --> 00:00:33,660
but they're actually really fascinating.

11
00:00:33,750 --> 00:00:38,610
And one of the products that she brought out through Kickstarter was this habit

12
00:00:38,610 --> 00:00:39,270
tracker,

13
00:00:39,270 --> 00:00:44,270
where you could go to it every day and just tap on today's date.

14
00:00:45,540 --> 00:00:50,370
So if you wanted to meditate every day, if you wanted to read 500 pages

15
00:00:50,370 --> 00:00:54,990
of a book every day, then you could track your habit. And because it's continuous,

16
00:00:55,390 --> 00:00:59,970
it makes you really want to continue your streak and not break the line.

17
00:01:00,750 --> 00:01:05,750
So we're going to be using technology to build a digital version of that today.

18
00:01:06,390 --> 00:01:09,270
And we're going to be using an API called Pixela.

19
00:01:09,780 --> 00:01:14,160
This comes from a Japanese developer and it's really awesome.

20
00:01:14,550 --> 00:01:17,070
It allows you to track your habits,

21
00:01:17,130 --> 00:01:20,970
but not just show which days you've done your habit, which days you haven't,

22
00:01:21,360 --> 00:01:25,140
but it also shows the intensity. So for example,

23
00:01:25,170 --> 00:01:29,040
maybe you want to track how many pages you're reading every day,

24
00:01:29,040 --> 00:01:33,010
you want to build a reading habit. Well, you can see that on certain days you

25
00:01:33,010 --> 00:01:36,870
will really reading a lot and you're heading a streak, but then on other days,

26
00:01:36,900 --> 00:01:40,050
even though you are doing some breeding because the color is lighter,

27
00:01:40,350 --> 00:01:44,700
it means that you read fewer pages. And over a year's time,

28
00:01:44,730 --> 00:01:49,230
you can see your entire progress and you can see your habit being tracked day by

29
00:01:49,230 --> 00:01:52,050
day, which I think is really awesome.

30
00:01:52,740 --> 00:01:56,730
This is what we're going to end up building. You can take any example,

31
00:01:56,910 --> 00:01:59,640
any habit you want to build, so in my case,

32
00:01:59,670 --> 00:02:04,670
I want to try and cycle every day and I'm logging how much I'm cycling in terms

33
00:02:04,770 --> 00:02:05,670
of kilometers.

34
00:02:06,150 --> 00:02:10,560
And you can see that certain days I cycled a lot and other days I cycled a

35
00:02:10,560 --> 00:02:11,393
little bit less.

36
00:02:11,790 --> 00:02:16,790
But I can see which days I've missed out on cycling and try to keep up with the

37
00:02:17,760 --> 00:02:19,080
momentum and the streak.

38
00:02:19,410 --> 00:02:23,130
Maybe you want to keep track of how long you're spending every day learning to

39
00:02:23,130 --> 00:02:28,020
code, or maybe you want to track how long you're meditating every day,

40
00:02:28,590 --> 00:02:31,950
or maybe you want to track how many lengths in the pool you swam.

41
00:02:32,400 --> 00:02:34,380
Whatever habit it is you're trying to build

42
00:02:34,830 --> 00:02:37,290
I'm sure that by the end of today's project,

43
00:02:37,350 --> 00:02:40,620
you are going to have a tool that's going to help you achieve your goals.

44
00:02:40,980 --> 00:02:44,730
So once you are ready, let's get started by heading over to the next lesson.


45
00:00:00,180 --> 00:00:03,180
We've been using the requests module for a while now,

46
00:00:03,270 --> 00:00:07,590
and we've been using it to make HTTP requests across the internet.

47
00:00:08,189 --> 00:00:10,260
We've already seen the get request,

48
00:00:10,410 --> 00:00:14,940
and this is a way for us to get pieces of data from somebody else,

49
00:00:14,970 --> 00:00:16,350
like an API provider.

50
00:00:17,070 --> 00:00:22,070
Now there's also four other common types of requests that we should probably know

51
00:00:22,170 --> 00:00:24,630
about; post put and delete.

52
00:00:25,440 --> 00:00:30,440
We can use the request module to complete a get request by simply writing

53
00:00:30,480 --> 00:00:31,920
requests.get

54
00:00:32,400 --> 00:00:37,400
and then we put our parameters inside the parentheses. For the other three

55
00:00:37,470 --> 00:00:38,303
requests,

56
00:00:38,460 --> 00:00:42,900
the code looks pretty much the same. It's .post, .put, and .delete.

57
00:00:44,010 --> 00:00:49,010
Whereas a get request is made where we ask an external system for a

58
00:00:49,560 --> 00:00:53,610
particular piece of data and they give that to us in the response.

59
00:00:54,270 --> 00:00:59,220
a post request is where we give the external system some piece of data

60
00:00:59,820 --> 00:01:03,660
and we're not so interested in the response we're getting back other than

61
00:01:03,660 --> 00:01:06,960
whether if it was successful or not. For example,

62
00:01:06,990 --> 00:01:10,950
if you wanted to save a piece of data in Google sheets,

63
00:01:11,220 --> 00:01:13,440
then you might use the Google sheets API

64
00:01:13,680 --> 00:01:17,190
to you post your data into your Google sheet.

65
00:01:18,060 --> 00:01:21,450
Or maybe you want to use the Twitter API to post a tweet

66
00:01:21,780 --> 00:01:26,780
then your program is going to send your tweet through a post request to the

67
00:01:27,150 --> 00:01:29,580
Twitter API. So that's how get

68
00:01:29,610 --> 00:01:34,610
and post works. Put is where you simply update a piece of data in the

69
00:01:34,680 --> 00:01:38,100
external service. So if you had a spreadsheet in Google sheets

70
00:01:38,100 --> 00:01:41,430
and maybe you want to update some of the values in the spreadsheet,

71
00:01:41,640 --> 00:01:43,590
then you would use a put request.

72
00:01:44,010 --> 00:01:48,330
And finally delete is simply where you want to delete a piece of data in the

73
00:01:48,330 --> 00:01:49,350
external service

74
00:01:49,350 --> 00:01:53,550
like a tweet that you posted or a Facebook post. Today

75
00:01:53,550 --> 00:01:57,360
we're going to be building our habit tracker using the Pixela API.

76
00:01:57,990 --> 00:02:00,030
And in order to use this API,

77
00:02:00,090 --> 00:02:04,380
we're going to post our habit tracking data, for example,

78
00:02:04,380 --> 00:02:08,460
how many pages have a book we've read, how many kilometers we've cycled,

79
00:02:08,729 --> 00:02:11,940
and we're going to be posting that data to Pixela

80
00:02:12,030 --> 00:02:14,040
to be tracked in our graph.

81
00:02:14,730 --> 00:02:17,610
If you head over to their website and you scroll down,

82
00:02:17,850 --> 00:02:21,090
you can see that it tells you how to get started.

83
00:02:21,450 --> 00:02:24,810
And it's a series of six steps.

84
00:02:25,200 --> 00:02:27,480
So we're going to be completing these in order

85
00:02:27,930 --> 00:02:30,360
and we're going to be pairing this short form

86
00:02:30,360 --> 00:02:33,810
get started guide with their documentation.

87
00:02:34,380 --> 00:02:38,490
So we're going to have that side by side in order to see all of the

88
00:02:38,490 --> 00:02:42,300
documentation on each of the steps. Step one

89
00:02:42,300 --> 00:02:47,300
involves creating a user account. And it says you have to hit up this particular

90
00:02:48,240 --> 00:02:52,290
end point using the HTTP post request.

91
00:02:52,680 --> 00:02:55,860
So this is the first time we're making a post request.

92
00:02:56,640 --> 00:03:00,100
Now I've set up a new project in  PyCharm habit tracker

93
00:03:00,490 --> 00:03:05,110
and in my main.py, as always, that I'm going to start off by importing the

94
00:03:05,110 --> 00:03:07,090
requests module. Now,

95
00:03:07,090 --> 00:03:11,650
because this is a brand new project we're going to have to install that package

96
00:03:11,710 --> 00:03:14,020
to make this red underline go away.

97
00:03:14,620 --> 00:03:19,330
And once it's been installed successfully, we can tap into that method requests

98
00:03:19,860 --> 00:03:22,290
.post. What are we going to

99
00:03:22,410 --> 00:03:27,060
put into this parentheses, what are the parameters, what are the inputs?

100
00:03:27,420 --> 00:03:31,350
Well, the first thing is the URL endpoint, right?

101
00:03:31,440 --> 00:03:34,020
So this is the Pixela endpoint,

102
00:03:34,740 --> 00:03:38,130
and that is going to be all of this.

103
00:03:38,820 --> 00:03:42,690
Let's copy that over and paste it in as a string.

104
00:03:44,070 --> 00:03:46,410
Now, if we head over to the API document,

105
00:03:46,560 --> 00:03:50,220
you can see that there's an index of the API on the right,

106
00:03:50,580 --> 00:03:52,650
and also at the beginning of the docs.

107
00:03:53,010 --> 00:03:56,130
So what we want to do is first create a user,

108
00:03:56,130 --> 00:03:58,350
 That's step one.

109
00:03:58,440 --> 00:04:01,200
Now, this API is actually really well-documented,

110
00:04:01,590 --> 00:04:04,950
especially given the fact that it's actually not a big development team behind

111
00:04:04,950 --> 00:04:08,790
this. If we take a look, this is the end point,

112
00:04:09,090 --> 00:04:12,150
and this is what we've got in our code. Next,

113
00:04:12,180 --> 00:04:14,160
we're going to make our post request

114
00:04:14,190 --> 00:04:18,240
and we're going to add some parameters into the request body.

115
00:04:18,959 --> 00:04:23,100
So you can see that some of these are required and others are optional.

116
00:04:23,610 --> 00:04:28,200
So we're going to add a value for each of the required parameters;

117
00:04:28,470 --> 00:04:32,550
token, username, agreedTermsOfService, and that we're not a minor.

118
00:04:35,760 --> 00:04:35,880
Cool.

119
00:04:35,880 --> 00:04:40,380
So let's create our user_params. And the first key is our token.

120
00:04:40,920 --> 00:04:42,780
Now let's see what this token needs to be.

121
00:04:42,990 --> 00:04:47,190
It has to be a string that's used to authenticate your user

122
00:04:47,670 --> 00:04:51,510
and we're going to use it later on as well when we access our graph

123
00:04:51,540 --> 00:04:55,020
and when we add to it. So make sure you save this securely.

124
00:04:55,110 --> 00:04:59,430
This is basically like an API key that you're going to generate yourself.

125
00:05:00,090 --> 00:05:02,370
This token can contain any characters,

126
00:05:02,370 --> 00:05:05,940
so you can make up a key like this,

127
00:05:06,120 --> 00:05:10,650
but the length of the token has to be between 8 characters and 128

128
00:05:10,650 --> 00:05:14,310
characters. So I think I've definitely got more than eight characters there,

129
00:05:14,580 --> 00:05:18,270
so I can move on to the next key, which is my username.

130
00:05:19,350 --> 00:05:23,730
I'm going to try and see if I can get away with just my first name. If it fails,

131
00:05:23,730 --> 00:05:26,340
we can always try it again. Next,

132
00:05:26,370 --> 00:05:31,370
we've got agreeTermsOfService and this is going to be either yes or no.

133
00:05:32,700 --> 00:05:34,200
We're probably going to have to say yes

134
00:05:34,200 --> 00:05:36,120
if we actually want to use this service.

135
00:05:36,420 --> 00:05:39,240
And also we're going to have to say yes that we're not a minor.

136
00:05:40,680 --> 00:05:44,760
Let's make sure that we don't make any typos by simply pasting this in.

137
00:05:45,660 --> 00:05:50,660
So it's a yes for agreed to terms of service and a yes

138
00:05:51,240 --> 00:05:56,130
to the fact that I'm not a minor, sadly. Not a minor anymore.

139
00:05:56,840 --> 00:06:01,070
Once we've got our user parameters and our Pixela endpoint,

140
00:06:01,190 --> 00:06:04,910
then we're ready to make our post request. Again,

141
00:06:04,910 --> 00:06:09,710
we're going to start off with the URL which is going to be our Pixela endpoint,

142
00:06:10,370 --> 00:06:13,790
and then we're going to add a new keyword argument.

143
00:06:14,270 --> 00:06:15,770
And this is called json.

144
00:06:16,250 --> 00:06:21,250
Notice how all the data that we're posting over to Pixela is pretty much in

145
00:06:21,260 --> 00:06:24,860
the format of a JSON. String and string.

146
00:06:25,310 --> 00:06:28,670
This is basically a piece of JSON data that we're going to send over.

147
00:06:29,570 --> 00:06:33,080
And that's all there is to it. The endpoint

148
00:06:33,380 --> 00:06:36,020
and also the JSON data that we want to send over.

149
00:06:36,560 --> 00:06:41,060
So let's go ahead and save this inside a response variable just as we did

150
00:06:41,060 --> 00:06:44,060
before. And then once this is completed,

151
00:06:44,120 --> 00:06:46,910
let's go ahead and print what the response is.

152
00:06:47,420 --> 00:06:50,270
Now you can either tap into the response as a JSON,

153
00:06:50,630 --> 00:06:54,560
but given that in this case we're not really looking to do anything with the

154
00:06:54,560 --> 00:06:58,160
response. We just wanna check if it's actually successful or not.

155
00:06:58,580 --> 00:07:01,070
We can actually tap into a property called text.

156
00:07:02,060 --> 00:07:05,180
So it'll give you back the response as a piece of text.

157
00:07:05,690 --> 00:07:09,230
Let's go ahead and run this and see if I can get away with setting my username

158
00:07:09,350 --> 00:07:12,500
as angela. Wow.

159
00:07:12,650 --> 00:07:16,130
So there's actually no user called angela at the moment

160
00:07:16,550 --> 00:07:19,790
and I was able to nab that username.

161
00:07:20,360 --> 00:07:23,090
So the reason why we're interested in looking at the response is

162
00:07:23,180 --> 00:07:27,650
if there were some issues, for example, if I tried to run this again

163
00:07:27,680 --> 00:07:32,210
now that I've taken this username, I think it's probably going to fail

164
00:07:32,300 --> 00:07:36,740
and it tells us this user already exists. Now, alternatively, if we said

165
00:07:36,770 --> 00:07:40,430
no to one of these, agreed to terms of service or not minor,

166
00:07:40,670 --> 00:07:45,110
it's probably also going to give us a message telling us why this post request

167
00:07:45,170 --> 00:07:49,490
failed. But now that I've completed this step,

168
00:07:49,550 --> 00:07:54,550
I can actually comment it out because I've now created my user.

169
00:07:55,370 --> 00:08:00,370
We've now set up ourselves with a new account on Pixela with a username and also

170
00:08:02,120 --> 00:08:06,110
a secret token that we're gonna use in the future to access this account.

171
00:08:06,560 --> 00:08:11,060
It's effectively our user name and password. So in the next lesson

172
00:08:11,120 --> 00:08:14,960
we're going to create our graph and we're going to learn how to use a more

173
00:08:14,960 --> 00:08:17,570
secure method of authentication.

174
00:08:18,080 --> 00:08:21,110
So for all of that and more, I'll see you on the next lesson.


175
00:00:00,360 --> 00:00:03,090
Previously we completed step one

176
00:00:03,330 --> 00:00:06,960
which is setting up a user account on Pixela.

177
00:00:07,590 --> 00:00:09,360
Now we can move on to step two

178
00:00:09,450 --> 00:00:13,920
which is to create a new graph on Pixela for our username.

179
00:00:14,550 --> 00:00:19,550
So notice how the endpoint is now different because in addition to /

180
00:00:20,160 --> 00:00:21,210
v1/users

181
00:00:21,480 --> 00:00:26,480
we also have to add our username now and then for /graphs.

182
00:00:27,030 --> 00:00:31,590
So let's go back to the documentation and scroll down to the relevant part of

183
00:00:31,590 --> 00:00:36,030
the API, which is this part to create a graph, that's step two.

184
00:00:37,410 --> 00:00:40,890
This is also going to be a HTTP post request,

185
00:00:41,310 --> 00:00:43,770
but the end point has now changed.

186
00:00:44,280 --> 00:00:47,160
So let's go ahead and create our new endpoint

187
00:00:47,580 --> 00:00:49,770
which is the graph endpoint.

188
00:00:51,750 --> 00:00:56,340
And this is going to be comprised of the Pixela endpoint

189
00:00:56,700 --> 00:01:00,780
and then in addition, it's going to be / our username.

190
00:01:01,770 --> 00:01:03,090
So let's take out our

191
00:01:03,090 --> 00:01:07,050
username and our token and put it as a constant at the top.

192
00:01:07,130 --> 00:01:07,963
Right

193
00:01:14,840 --> 00:01:17,720
Now we can add that in here using an f-string

194
00:01:20,630 --> 00:01:23,300
and then finally it's /graphs.

195
00:01:25,700 --> 00:01:27,920
Now, remember if you're doing this along with me,

196
00:01:27,950 --> 00:01:32,750
this username is going to have to be your own unique username and the token is

197
00:01:32,750 --> 00:01:34,700
going to be your own secret token.

198
00:01:36,230 --> 00:01:38,360
Once we've created our graph end point,

199
00:01:38,600 --> 00:01:43,130
the next step is to make our post request. Again,

200
00:01:43,160 --> 00:01:48,160
we're going to use our request module and call the post method to make this

201
00:01:48,200 --> 00:01:52,760
request. This time what is the data that we want to send over?

202
00:01:53,330 --> 00:01:53,690
Well,

203
00:01:53,690 --> 00:01:58,690
we want to be able to add the ID of our new graph,

204
00:01:59,300 --> 00:02:04,300
so some way of identifying it in the URL, and then the name of the graph,

205
00:02:05,090 --> 00:02:09,590
and then the unit of measure that we're keeping track of. For example,

206
00:02:09,590 --> 00:02:11,600
if I'm keeping track of my cycling,

207
00:02:11,840 --> 00:02:14,540
then that's going to be kilometers that I've cycled,

208
00:02:14,870 --> 00:02:18,950
or if I want to keep track of how long I'm coding

209
00:02:18,980 --> 00:02:21,320
then that might be minutes or hours.

210
00:02:21,950 --> 00:02:25,850
And then the data type of the unit of measure.

211
00:02:26,240 --> 00:02:29,930
If I was tracking the number of pages I've read then they'll be whole numbers,

212
00:02:30,320 --> 00:02:32,660
if I'm tracking the number of kilometers I've ridden

213
00:02:32,900 --> 00:02:36,470
then it's probably going to be a floating point number. And then finally,

214
00:02:36,500 --> 00:02:39,530
we're going to specify the color of our graph. Here

215
00:02:39,530 --> 00:02:42,950
you have to be a little bit careful because these are strings

216
00:02:42,980 --> 00:02:46,160
which are actually in Japanese. So for example,

217
00:02:46,580 --> 00:02:48,680
momiji is autumn leaves.

218
00:02:49,250 --> 00:02:52,580
shibafu is grass, sara is sky,

219
00:02:53,300 --> 00:02:58,300
and they've got a whole bunch of poetic names for each of these colors,

220
00:02:58,790 --> 00:03:01,120
which wonderful, but it also prone to errors.

221
00:03:01,180 --> 00:03:05,590
So you have to be careful when you're typing in the color that you want.

222
00:03:05,800 --> 00:03:09,640
And if in doubt, just simply copy it from the documentation.

223
00:03:10,930 --> 00:03:14,110
So let's go ahead and create our graph configuration.

224
00:03:15,730 --> 00:03:20,080
To start off, I have to specify an ID. And in this case,

225
00:03:20,110 --> 00:03:23,590
it has to start off with some letters from A to Z,

226
00:03:23,920 --> 00:03:26,050
and then it could be letters or numbers.

227
00:03:26,500 --> 00:03:29,680
And it has to be between 1 and 16 characters.

228
00:03:30,100 --> 00:03:33,280
Let's say that the id of my graph is going to be graph1,

229
00:03:33,730 --> 00:03:38,730
notice how we can't have the number just at the beginning because of these rules.

230
00:03:40,450 --> 00:03:42,460
Next is the name of the graph.

231
00:03:44,320 --> 00:03:46,750
So mine is going to be my cycling graph,

232
00:03:47,830 --> 00:03:50,110
and then it's the unit of measure.

233
00:03:50,860 --> 00:03:55,030
So because I'm tracking my cycling, it's going to be in kilometers.

234
00:03:55,960 --> 00:04:00,880
And then it's going to be the type of data that I'm going to be posting in this

235
00:04:00,880 --> 00:04:03,310
unit. Because it's kilometers,

236
00:04:03,490 --> 00:04:06,370
I'm probably going to have some numbers after the decimal point.

237
00:04:06,640 --> 00:04:09,730
So I'm going to keep it as a float rather than an int.

238
00:04:10,780 --> 00:04:13,450
And finally, we're going to pick a color.

239
00:04:14,080 --> 00:04:18,370
I'm going to pick purple, ajisai, which is hydrangea flower.

240
00:04:18,910 --> 00:04:21,670
And just to make sure I don't make a mistake,

241
00:04:21,700 --> 00:04:24,160
I'm going to copy that and paste it in.

242
00:04:25,570 --> 00:04:30,520
That's all of my required graph config. But right now,

243
00:04:31,060 --> 00:04:33,280
if I do the same thing as I did before

244
00:04:33,310 --> 00:04:37,660
which is to put in my graph endpoint as the URL

245
00:04:38,080 --> 00:04:42,460
and then the JSON is set to equal the graph config,

246
00:04:42,970 --> 00:04:47,440
if I actually post this right now, it's not going to work.

247
00:04:47,680 --> 00:04:52,570
And if I print the response.text, you'll see the reason.

248
00:04:54,610 --> 00:04:58,750
The message tells me that the user angela does not exist.

249
00:04:59,110 --> 00:05:03,790
I know it exists because I created in this step and I got a successful response,

250
00:05:04,990 --> 00:05:09,940
or it's telling me that the token is wrong. So think about it.

251
00:05:09,970 --> 00:05:12,760
Where have we actually provided our password?

252
00:05:12,760 --> 00:05:16,750
Where if we provided our token in this request? No where.

253
00:05:17,380 --> 00:05:19,930
It's not one of the request body keys.

254
00:05:20,440 --> 00:05:24,070
So how do we provide our authentication? Well,

255
00:05:24,070 --> 00:05:26,620
it's done using the request header.

256
00:05:27,130 --> 00:05:29,080
We have to provide this key

257
00:05:29,170 --> 00:05:34,170
and it's gonna look for the token that we used to register with Pixela.

258
00:05:35,650 --> 00:05:40,060
You might have even noticed previously when we were working with the news API

259
00:05:40,390 --> 00:05:42,820
that when we were looking at the authentication,

260
00:05:43,150 --> 00:05:48,150
even though there's three methods for authentication, via a API key, query string

261
00:05:49,330 --> 00:05:50,050
parameter

262
00:05:50,050 --> 00:05:55,050
which is what we used or via the X-Api-Key HTTP header or via the authorization

263
00:05:56,750 --> 00:05:57,680
HTEP header.

264
00:05:58,160 --> 00:06:02,810
And you can see that they actually say we strongly recommend either of the

265
00:06:02,810 --> 00:06:06,350
latter two, so using the HTTP header.

266
00:06:06,830 --> 00:06:11,270
And the reason is so that your API key isn't visible to others in logs

267
00:06:11,510 --> 00:06:13,730
or if they're doing requests sniffing.

268
00:06:14,990 --> 00:06:17,720
So what exactly are these headers anyways?

269
00:06:18,020 --> 00:06:21,290
Well if you think about a letter that you might get in the mail,

270
00:06:21,530 --> 00:06:26,390
the header is the part that contains some relevant pieces of information,

271
00:06:26,390 --> 00:06:27,350
like, um,

272
00:06:27,620 --> 00:06:32,240
the phone numbers of the company or their website of the company or their logo.

273
00:06:32,780 --> 00:06:36,380
And then the body is the actual message part sesentially.

274
00:06:36,380 --> 00:06:40,610
It's the part that changes from letter to letter. Now,

275
00:06:40,640 --> 00:06:45,640
back in the previous project where we created our stock news alert application,

276
00:06:46,970 --> 00:06:51,970
you can see that we're simply sending our API key as a parameter

277
00:06:53,810 --> 00:06:58,810
along with the get request. And what this effectively looks like

278
00:06:59,510 --> 00:07:04,220
if we're doing it in the browser is we're taking the news endpoint,

279
00:07:04,670 --> 00:07:09,670
we're putting it into the URL bar and then we're adding our parameters.

280
00:07:10,700 --> 00:07:12,890
So the first one is the API key.

281
00:07:14,540 --> 00:07:18,350
And then the next one is the actual query.

282
00:07:19,550 --> 00:07:23,990
So we were querying for the company name in the title of the news piece

283
00:07:24,440 --> 00:07:26,600
and we were looking for Tesla.

284
00:07:27,320 --> 00:07:31,460
This is effectively exactly the same as our code here.

285
00:07:31,970 --> 00:07:36,200
We make a request to that URL and pass over these parameters.

286
00:07:36,560 --> 00:07:39,770
There's effectively no difference between this and that.

287
00:07:40,370 --> 00:07:45,110
As you can imagine, all our secret stuff in the request itself.

288
00:07:45,500 --> 00:07:47,450
So if anybody's monitoring this,

289
00:07:47,510 --> 00:07:51,710
then they will be able to see all of this information and they might be able to

290
00:07:51,710 --> 00:07:54,890
steal your API key. Now,

291
00:07:54,890 --> 00:07:59,890
one of the things that's reassuring is that this API is accessed via HTTPS and

292
00:08:01,880 --> 00:08:04,070
the S stands for secure.

293
00:08:04,400 --> 00:08:07,610
So this request is actually encrypted,

294
00:08:07,970 --> 00:08:12,970
but it doesn't stop somebody from installing something on your browser to look

295
00:08:13,130 --> 00:08:14,660
at what requests you're making

296
00:08:15,260 --> 00:08:20,260
and there are certain cases where this might leak your API key to somebody that

297
00:08:21,530 --> 00:08:25,370
you don't want to. So for some API providers,

298
00:08:25,400 --> 00:08:29,630
you'll see that they want you to provide the authentication in the header.

299
00:08:30,410 --> 00:08:35,240
Let's go ahead and do that. So let's take the key that they're expecting

300
00:08:35,870 --> 00:08:39,409
and let's create a dictionary called headers,

301
00:08:41,659 --> 00:08:44,210
and let's make that the key,

302
00:08:44,540 --> 00:08:47,930
and then the value is going to be our token.

303
00:08:48,270 --> 00:08:51,950
This is our top secret password. Now,

304
00:08:51,950 --> 00:08:56,950
in addition to our URL on the JSON that we're sending over to Pixela,

305
00:08:57,390 --> 00:09:02,340
we're also going to add a optional keyword argument which is called headers.

306
00:09:02,910 --> 00:09:07,860
This is not going to show up when you start typing, not like JSON or URL.

307
00:09:08,010 --> 00:09:12,990
And this is because it's one of the kwargs or keyword arguments.

308
00:09:13,590 --> 00:09:17,370
And that means you also have to spell it exactly right

309
00:09:17,460 --> 00:09:21,750
and make sure you don't make any typos. It's headers with an S at the end.

310
00:09:22,260 --> 00:09:26,370
And then we're going to pass our variable headers into this parameter.

311
00:09:27,990 --> 00:09:31,350
Now what we're going to make our request once more,

312
00:09:31,830 --> 00:09:35,640
and you can see this time when we print the response.text,

313
00:09:35,730 --> 00:09:40,730
it gives us success and we've now managed to set up our brand new cycling graph.

314
00:09:42,890 --> 00:09:45,290
So if we go back to step three,

315
00:09:45,410 --> 00:09:50,410
we can actually go ahead and look at our cycling graph by going to this URL and

316
00:09:50,840 --> 00:09:55,550
replacing this part which is the creator's username with our own,

317
00:09:55,580 --> 00:09:58,490
so mine was angela. Yours will be something else.

318
00:09:58,790 --> 00:10:02,540
And we're also going to replace this final part with our ID,

319
00:10:02,720 --> 00:10:05,090
which in my case is just graph1.

320
00:10:05,870 --> 00:10:09,890
Now we're going to finally tag on .html to the end,

321
00:10:09,980 --> 00:10:11,120
and when I hit enter,

322
00:10:11,480 --> 00:10:16,480
you'll see it go to my brand new cycling graph right here.

323
00:10:17,150 --> 00:10:20,900
And it's going to be colored in purple and it's going to look beautiful and it's

324
00:10:20,900 --> 00:10:23,840
going to start tracking my cycling data.

325
00:10:25,070 --> 00:10:29,750
So this is how we can authenticate ourselves using a header

326
00:10:30,140 --> 00:10:35,140
and the requests module makes passing over headers just as easy as passing over

327
00:10:35,990 --> 00:10:40,990
other parameters or other parts of the message body. In the next lesson,

328
00:10:41,660 --> 00:10:46,100
we're going to be moving on to step 4 so that we can finally add a

329
00:10:46,130 --> 00:10:48,740
the pixel of data to our graph.

330
00:10:49,250 --> 00:10:51,830
So head over to the next lesson and give that a go.


331
00:00:00,120 --> 00:00:03,000
So we're now finally ready to move on to the last step,

332
00:00:03,330 --> 00:00:05,939
which is posting a value to our graph.

333
00:00:06,360 --> 00:00:10,920
And this is going to create a new pixel on our habit graph.

334
00:00:11,820 --> 00:00:15,570
So I want you to pull up the relevant piece of documentation

335
00:00:15,660 --> 00:00:18,630
which is going to be posting a pixel.

336
00:00:19,320 --> 00:00:24,320
And I want you to take a look at the description and the header and the body,

337
00:00:25,470 --> 00:00:28,320
and see if you can complete the step as a challenge.

338
00:00:28,710 --> 00:00:33,330
Notice that, firstly, the endpoint is again different and everything that's

339
00:00:33,330 --> 00:00:34,163
inside

340
00:00:34,170 --> 00:00:38,520
these angle brackets need to be replaced with your actual values.

341
00:00:38,580 --> 00:00:42,660
So your actual username and your actual graph ID. In addition,

342
00:00:42,720 --> 00:00:47,720
this is again going to be a post request and it requires the authentication in

343
00:00:48,150 --> 00:00:50,670
the request header. Finally,

344
00:00:50,670 --> 00:00:55,530
you have to provide the date in the format of four characters for the year,

345
00:00:55,530 --> 00:00:58,710
two characters for the month and two characters for the day.

346
00:00:59,010 --> 00:01:01,380
So today would be 2020

347
00:01:01,410 --> 00:01:04,739
0724 in this format.

348
00:01:05,280 --> 00:01:09,750
And then you have to provide the quantity that you want to add to today's pixel.

349
00:01:10,050 --> 00:01:14,250
So if you cycled 10.5 kilometers, then it would be 10.5.

350
00:01:14,640 --> 00:01:19,080
If you originally set up your graph to track integers, for example,

351
00:01:19,080 --> 00:01:22,590
the number of pages you read in a book, then that would be the number.

352
00:01:23,310 --> 00:01:27,780
So I want you to pause the video and see if you can complete this step as a

353
00:01:27,780 --> 00:01:29,850
challenge. Have a go now.

354
00:01:33,260 --> 00:01:37,430
All right. So the first thing we're going to do is to update our end point.

355
00:01:38,720 --> 00:01:42,590
I'm gonna comment out this previous step because we've already created our graph

356
00:01:43,040 --> 00:01:45,890
and we're now going to move on to our pixel creation.

357
00:01:46,010 --> 00:01:48,890
So that's what I'm going to call my endpoint.

358
00:01:51,260 --> 00:01:55,550
Now, this pixel creation endpoint is obviously not what we need.

359
00:01:55,610 --> 00:01:59,990
We need to format this URL so that we add in the first part

360
00:02:00,110 --> 00:02:04,520
which is the pixela endpoint which goes up to /users.

361
00:02:05,330 --> 00:02:07,160
So that's all of this part.

362
00:02:07,280 --> 00:02:11,180
So we can use an f-string and add the pixel endpoint.

363
00:02:11,570 --> 00:02:16,370
And then we're going to replace the /username with our own

364
00:02:16,400 --> 00:02:19,880
username, and then it's /graphs

365
00:02:20,030 --> 00:02:23,930
and we have to replace this graph ID as well. And in my case,

366
00:02:23,930 --> 00:02:26,570
the graph ID is simply just graph1.

367
00:02:26,990 --> 00:02:30,830
So it might make sense to create a constant for that as well,

368
00:02:31,160 --> 00:02:31,993
right?

369
00:02:41,630 --> 00:02:45,950
So that we can use it at the very end of this endpoint.

370
00:02:47,090 --> 00:02:49,550
So now that we've created our end point,

371
00:02:49,940 --> 00:02:53,420
the next step is to create the request body.

372
00:02:53,780 --> 00:02:56,570
So passing over the date and the quantity.

373
00:02:57,620 --> 00:02:59,740
So I'm going to create the pixel_data,

374
00:03:00,790 --> 00:03:04,000
and this is going to first have the date,

375
00:03:04,300 --> 00:03:07,360
but it has to be formatted in the way they specified.

376
00:03:07,510 --> 00:03:11,350
So four characters for the year, which is 2020,

377
00:03:11,380 --> 00:03:13,060
and then two characters for the month,

378
00:03:13,330 --> 00:03:15,850
07, and then two characters for the day.

379
00:03:16,510 --> 00:03:21,510
But notice here that they specify the data type for the date has to be a string.

380
00:03:22,390 --> 00:03:24,640
So we can't simply leave it as a number.

381
00:03:24,790 --> 00:03:27,610
So we have to add some quotation marks around it.

382
00:03:28,480 --> 00:03:31,360
And then finally we can add the actual data

383
00:03:31,480 --> 00:03:35,140
which is going to go under the key quantity

384
00:03:35,680 --> 00:03:37,840
and this is also going to be a string

385
00:03:38,140 --> 00:03:41,830
and this is the quantity that we're going to register in the pixel

386
00:03:42,070 --> 00:03:46,360
and that's going to determine the intensity of the actual pixel.

387
00:03:47,320 --> 00:03:51,370
So in my case, I did actually go for a quick ride today. Um,

388
00:03:51,880 --> 00:03:55,480
and my stats were not fantastic, but, um,

389
00:03:55,780 --> 00:03:56,890
I'm still gonna log it.

390
00:03:57,040 --> 00:04:00,790
So that was 9.74 kilometers that I cycled.

391
00:04:01,660 --> 00:04:06,640
So that's what my quantity is going to be, 9.74. And again,

392
00:04:06,670 --> 00:04:10,690
this is a string because that's what the documentation tells us.

393
00:04:12,160 --> 00:04:14,320
And remember that when you set up your graph,

394
00:04:14,410 --> 00:04:17,079
if you set up the data type to receive floats,

395
00:04:17,380 --> 00:04:21,339
then you can actually give it a floating-point number. If you set it up as int,

396
00:04:21,350 --> 00:04:23,380
then you have to give it a whole number.

397
00:04:24,340 --> 00:04:26,650
Now that we've got our data and our endpoint,

398
00:04:26,680 --> 00:04:31,330
then we're finally ready to create our requests. So you request.posts.

399
00:04:31,690 --> 00:04:32,590
And again,

400
00:04:32,620 --> 00:04:36,910
our URL is going to be this new pixel creation endpoint.

401
00:04:38,230 --> 00:04:42,100
Our JSON that we're going to pass over is our pixel_data,

402
00:04:42,820 --> 00:04:43,990
and finally,

403
00:04:44,020 --> 00:04:47,920
we're going to reuse the headers that we had from previously,

404
00:04:48,340 --> 00:04:52,750
because it still contains the same token that we need to authenticate ourselves.

405
00:04:53,440 --> 00:04:56,350
So let's see what is the response that we get back.

406
00:04:56,470 --> 00:05:01,470
So I'm going to print out the response.text and hopefully if everything went

407
00:05:03,790 --> 00:05:07,450
well, then we should get the success message.

408
00:05:08,110 --> 00:05:10,570
But now is the most exciting part.

409
00:05:10,780 --> 00:05:14,710
You can go back to our cycling graph and then hit refresh,

410
00:05:15,040 --> 00:05:20,040
and we should see all brand new pixel show up in our graph right there.

411
00:05:22,540 --> 00:05:26,980
And it tells us today we cycled 9.74 kilometers.

412
00:05:28,300 --> 00:05:30,520
One thing you might be wondering is, well,

413
00:05:30,580 --> 00:05:33,370
how can we get this date to be automated?

414
00:05:33,400 --> 00:05:36,550
Because I don't want to have to check the date and type it in.

415
00:05:36,790 --> 00:05:40,510
We can use the date time module, right? So in the next lesson,

416
00:05:40,540 --> 00:05:45,370
I'm going to show you how you can use a method called strftime in order to

417
00:05:45,370 --> 00:05:50,370
format the date time that you get from Python into any format that you require.

418
00:05:51,820 --> 00:05:54,640
For all of that and more, I'll see you on the next lesson.


419
00:00:00,180 --> 00:00:04,170
In the previous lesson, we saw how we could create a pixel.

420
00:00:04,560 --> 00:00:08,220
But one of the things that would be nice is instead of having to type this

421
00:00:08,220 --> 00:00:09,053
manually,

422
00:00:09,240 --> 00:00:14,240
I would really like to be able to create that using the date-time module.

423
00:00:15,090 --> 00:00:19,500
I can import my datetime, so from datetime module,

424
00:00:19,530 --> 00:00:22,860
I'm going to import the datetime class.

425
00:00:23,550 --> 00:00:28,550
And now I can use it to get today's date by tapping into datetime.now.

426
00:00:30,330 --> 00:00:31,950
But if I print this out,

427
00:00:32,040 --> 00:00:37,040
you can see that this is clearly not going to be in the format that I need it to

428
00:00:37,080 --> 00:00:37,770
be.

429
00:00:37,770 --> 00:00:42,770
So I'm gonna comment out my request and I'm going to take a look at what my data

430
00:00:42,900 --> 00:00:46,260
looks like. This contains the date and time,

431
00:00:46,560 --> 00:00:49,530
and it's in a different format.

432
00:00:50,460 --> 00:00:53,910
So whenever we're encounter a new API or a new service,

433
00:00:54,180 --> 00:00:58,980
they often want the date and time in a different format. For example, in Asia,

434
00:00:58,980 --> 00:01:02,430
the year tends to come first, in the US or in the UK,

435
00:01:02,550 --> 00:01:04,440
the year tend to come at the end.

436
00:01:05,250 --> 00:01:09,660
How can we format the Python date to any format we need? Well,

437
00:01:09,720 --> 00:01:14,720
there is a really useful method called the strftime method.

438
00:01:15,630 --> 00:01:20,630
And this allows us to pass in a string that will a format

439
00:01:21,180 --> 00:01:25,680
the date that we get back from datetime into any format we need.

440
00:01:26,250 --> 00:01:27,083
For example,

441
00:01:27,180 --> 00:01:32,180
if we pass in %a then we'll get the short version of the week-

442
00:01:32,400 --> 00:01:35,700
day. If we pass in a %b,

443
00:01:35,760 --> 00:01:40,050
then we'll get the full name of the month and so on and so forth.

444
00:01:40,230 --> 00:01:45,230
So we can use this table to actually create the exact date format we need.

445
00:01:46,380 --> 00:01:51,380
Let's go ahead and take this today and let's go ahead and use the strftime

446
00:01:54,690 --> 00:01:57,300
and we're going to pass in a string. Now,

447
00:01:57,300 --> 00:02:01,260
the first string we need is the year in the full version.

448
00:02:01,290 --> 00:02:04,710
So this is going to be %Y and it's a capital Y.

449
00:02:06,120 --> 00:02:09,449
Now, if you need a dash, then you can add a dash. If you need a space,

450
00:02:09,479 --> 00:02:12,870
you can add a space. But in my case, I actually wanted it all together.

451
00:02:13,230 --> 00:02:16,140
So the next thing I want is the month as a number.

452
00:02:16,170 --> 00:02:18,360
So that's %m

453
00:02:19,980 --> 00:02:23,280
and then it's %d to get the day of the month.

454
00:02:25,980 --> 00:02:28,500
Now, if I actually print this out,

455
00:02:31,770 --> 00:02:35,760
you can see that this is formatted in the exact format I need.

456
00:02:35,850 --> 00:02:39,180
And if I wanna add in a, I dunno,

457
00:02:39,240 --> 00:02:41,940
asterix there then it'll format it like that.

458
00:02:42,240 --> 00:02:47,010
If I want to change the date to a word like Wednesday or December,

459
00:02:47,040 --> 00:02:49,200
then I can simply change that format string.

460
00:02:50,760 --> 00:02:54,900
Now that we've managed to do this, then we can get our date

461
00:02:54,900 --> 00:02:59,320
time programmatically using the datetime.now method.

462
00:02:59,860 --> 00:03:03,280
We can also use it to create any datetime of our choosing.

463
00:03:03,490 --> 00:03:07,720
So lets say I wanted a backtrack to create a pixel for yesterday.

464
00:03:08,080 --> 00:03:12,730
Well then I can simply create my datetime by specifying the year,

465
00:03:13,240 --> 00:03:17,320
the month and the day.

466
00:03:17,350 --> 00:03:18,790
So today's 24th.

467
00:03:18,820 --> 00:03:23,820
So yesterday was 23rd and then it's going to take that date and it's going to

468
00:03:23,890 --> 00:03:28,000
format it into the correct format and then post a quantity.

469
00:03:28,240 --> 00:03:30,700
So let's say that yesterday I cycled,

470
00:03:30,940 --> 00:03:34,630
I did cycle a bit more actually, let's say it was 15 kilometers.

471
00:03:35,320 --> 00:03:39,040
Now if I go ahead and uncomment this and run it again,

472
00:03:39,070 --> 00:03:43,270
it's gonna post the latest piece of data to pixela and

473
00:03:43,750 --> 00:03:45,460
if we now update our graph,

474
00:03:45,580 --> 00:03:50,580
you can see I've now got two pixels and this one is a lot heavier in terms of

475
00:03:51,730 --> 00:03:55,960
color to show that I cycled a lot further than today.

476
00:03:57,070 --> 00:04:01,150
And we've now got a total kilometer, a max, a min,

477
00:04:01,150 --> 00:04:03,610
an average and the total number of pixels.

478
00:04:04,660 --> 00:04:08,530
The last thing I want to show you before we finish off with this project is how

479
00:04:08,530 --> 00:04:13,530
we can update and delete pixels using the put and delete requests.

480
00:04:15,430 --> 00:04:17,290
That's what we're going to do in the next lesson.


481
00:00:00,150 --> 00:00:02,820
Now in the very beginning of today's lessons,

482
00:00:02,880 --> 00:00:07,880
I mentioned that we can do other requests in addition to get and post like put

483
00:00:08,580 --> 00:00:09,413
and delete.

484
00:00:09,900 --> 00:00:14,900
And we can do that using a similar format as we have done for get and post.

485
00:00:15,750 --> 00:00:20,250
Just by simply changing the method we end up with a different behavior.

486
00:00:20,850 --> 00:00:25,850
So put will change an existing piece of data and delete will delete the piece

487
00:00:26,760 --> 00:00:29,160
of data. Let's try it out for size.

488
00:00:29,790 --> 00:00:34,440
If we go into the documentation and we scroll down to all the things that we can

489
00:00:34,440 --> 00:00:36,120
do to pixels, you can see

490
00:00:36,120 --> 00:00:39,840
we can also update a pixel, which is put, and delete a pixel.

491
00:00:40,200 --> 00:00:44,850
So let's click on update first and let's say that, um,

492
00:00:44,940 --> 00:00:49,620
I decided that yesterday I didn't actually cycle 15 kilometers. I lied.

493
00:00:49,650 --> 00:00:54,330
I only cycled 4. Well, how would we do that? Well,

494
00:00:54,340 --> 00:00:59,340
we would use the documentation here and also the put method to achieve this.

495
00:01:00,660 --> 00:01:05,250
So I want you to give it a go and see if you can figure it out. Now,

496
00:01:05,310 --> 00:01:09,810
I've already told you that you need to use the put method and you know how to

497
00:01:09,840 --> 00:01:13,860
format the endpoints and provide the request body and the header.

498
00:01:14,160 --> 00:01:17,370
So pause the video and give this challenge a go.

499
00:01:19,730 --> 00:01:20,390
Right?

500
00:01:20,390 --> 00:01:20,720
All right.

501
00:01:20,720 --> 00:01:25,720
So the first thing we're going to do is to copy this new format of the end

502
00:01:25,910 --> 00:01:29,630
point and I'm going to comment out the previous part

503
00:01:29,630 --> 00:01:34,610
where we posted our pixel and I'm going to create this new endpoint.

504
00:01:34,640 --> 00:01:36,800
So this is the update_endpoint,

505
00:01:38,660 --> 00:01:42,470
and it's going to be a combination of everything up to here,

506
00:01:42,680 --> 00:01:44,450
which is our pixela

507
00:01:44,630 --> 00:01:45,463
...

508
00:01:47,480 --> 00:01:50,840
endpoint. And then it's your own username

509
00:01:53,570 --> 00:01:56,360
and then it's graphs and then the graph ID.

510
00:01:58,760 --> 00:02:00,800
And finally, it's the year,

511
00:02:00,800 --> 00:02:04,850
month and date for the piece of data that you actually want to update.

512
00:02:05,870 --> 00:02:09,530
So let's say that I'm going to update yesterday's piece of data

513
00:02:09,560 --> 00:02:11,870
which I've manually created up here.

514
00:02:11,960 --> 00:02:15,320
And I formatted using strftime right here.

515
00:02:15,830 --> 00:02:20,830
So I'm going to replace this with a set of curly brackets and paste that in

516
00:02:22,220 --> 00:02:25,460
there. Now notice,

517
00:02:25,460 --> 00:02:28,850
because I've got these two sets of double quotes,

518
00:02:28,910 --> 00:02:30,380
it's getting a little bit confused.

519
00:02:30,680 --> 00:02:34,790
So I'm going to change one of those sets to a single quote instead.

520
00:02:35,480 --> 00:02:38,960
And now I get rid of all my errors and warnings.

521
00:02:40,220 --> 00:02:42,560
So this is our update endpoint.

522
00:02:43,130 --> 00:02:46,580
And the only thing that we're going to change is the quantity.

523
00:02:47,810 --> 00:02:51,980
Let's say I create a new pixel data dictionary.

524
00:02:52,430 --> 00:02:57,430
And now my quantity instead of being 15 kilometers was, actually,  let's say 4.5.

525
00:03:03,160 --> 00:03:04,990
So this is my new pixel data,

526
00:03:05,410 --> 00:03:08,470
and now I'm ready to make my put request.

527
00:03:08,860 --> 00:03:12,040
So we're using requests.put,

528
00:03:12,340 --> 00:03:15,970
and then the URL is going to be the update endpoint,

529
00:03:16,630 --> 00:03:20,170
the JSON is going to be our new pixel data,

530
00:03:20,710 --> 00:03:25,330
and finally, the headers is going to be our headers for authentication.

531
00:03:26,550 --> 00:03:27,383
Right.

532
00:03:33,240 --> 00:03:35,880
So now let's go ahead and run this code.

533
00:03:36,480 --> 00:03:41,460
And once we get our message success, we can go back to our chart,

534
00:03:41,700 --> 00:03:42,533
refresh it,

535
00:03:42,990 --> 00:03:47,880
and you'll see that yesterday's pixel no longer is as dense.

536
00:03:47,970 --> 00:03:48,720
And in fact,

537
00:03:48,720 --> 00:03:53,610
it's now lost a bit of color and it's been updated with the new value.

538
00:03:55,290 --> 00:03:56,130
So finally,

539
00:03:56,130 --> 00:04:01,130
we have our delete method and we're going to use that to delete a pixel.

540
00:04:04,620 --> 00:04:06,690
Again, I want you to do this by yourself.

541
00:04:06,750 --> 00:04:11,750
See if you can delete one of the pixels in your graph using the endpoint and the

542
00:04:11,880 --> 00:04:12,750
documentation.

543
00:04:14,190 --> 00:04:15,023
Go!

544
00:04:16,410 --> 00:04:20,700
All right. So the endpoint is identical to the update endpoint.

545
00:04:20,730 --> 00:04:25,730
So I'm simply just going to copy it and create a new one called delete.

546
00:04:27,960 --> 00:04:32,610
And I'm also gonna comment out this request so that I use this one

547
00:04:32,610 --> 00:04:36,990
instead. Now the delete endpoint doesn't actually take any data,

548
00:04:37,170 --> 00:04:38,580
but it does need the header.

549
00:04:39,120 --> 00:04:44,120
So we can use our request module and call the delete method and pass in the end

550
00:04:45,630 --> 00:04:49,230
point which is the delete endpoint, the headers

551
00:04:49,260 --> 00:04:51,720
which is our authentication headers,

552
00:04:52,260 --> 00:04:55,830
and we can already enact our request.

553
00:05:01,920 --> 00:05:02,580
Right

554
00:05:02,580 --> 00:05:06,720
Now when we hit run, if it gives us a success message,

555
00:05:07,050 --> 00:05:10,740
then we know that we've updated our data here

556
00:05:11,280 --> 00:05:13,470
and we now no longer have two pixels.

557
00:05:13,500 --> 00:05:16,980
We only have one cause we deleted the one for yesterday.

558
00:05:17,970 --> 00:05:22,860
That's all there is to it. If now you want to be able to track your habit,

559
00:05:23,190 --> 00:05:28,190
all you have to do is to comment out all of the rest of the responses and

560
00:05:29,580 --> 00:05:34,580
reactivate the one where we post our pixel data and changing the quantity into a

561
00:05:37,140 --> 00:05:40,400
custom input. So in my case,

562
00:05:40,410 --> 00:05:45,410
it'll be how many kilometers did you cycle today?

563
00:05:47,940 --> 00:05:52,320
And then of course changing our datetime back to now.

564
00:05:54,090 --> 00:05:56,850
And now when I run my code,

565
00:05:57,680 --> 00:06:01,390
it will go ahead and ask me how many kilometers I run.

566
00:06:01,720 --> 00:06:05,350
I could type in the number, and then when I hit enter there,

567
00:06:05,440 --> 00:06:09,460
data is going to be posted to the servers. Now, of course,

568
00:06:09,460 --> 00:06:13,180
because I already have a piece of data, this is not going to let me,

569
00:06:13,570 --> 00:06:17,740
so I'm going to have to wait for tomorrow to post my updated cycling data.

570
00:06:18,550 --> 00:06:21,340
I hope you enjoyed building this project together.

571
00:06:21,730 --> 00:06:26,730
And I hope you'll have a go at trying to modify this to your own habit tracking

572
00:06:27,310 --> 00:06:31,240
and see if you can do some creative stuff with it. And as always,

573
00:06:31,360 --> 00:06:34,540
if you create something fun, be sure to share it with the rest of us.


