1
00:00:00,030 --> 00:00:00,660
Hey guys,

2
00:00:00,660 --> 00:00:05,190
welcome to Day 48 of 100 Days of Code. Today

3
00:00:05,190 --> 00:00:10,190
we're going to be introducing a new technology for advanced web scraping,

4
00:00:10,890 --> 00:00:13,200
and that is Selenium WebDriver.

5
00:00:13,680 --> 00:00:16,170
Now you might have heard of Selenium WebDriver before

6
00:00:16,200 --> 00:00:21,030
because it's probably one of the most well-known automation and testing tools

7
00:00:21,300 --> 00:00:25,200
for web developers out there. But you might be wondering, well,

8
00:00:25,230 --> 00:00:29,550
we already have Beautiful Soup. So why do we need to learn a new technology?

9
00:00:30,180 --> 00:00:30,450
Well,

10
00:00:30,450 --> 00:00:35,450
one of the things that we've really been limited by is we can't actually use all

11
00:00:35,970 --> 00:00:38,370
the capabilities that browsers can do.

12
00:00:38,580 --> 00:00:42,930
So when we load up a website with beautiful soup, we can't, for example,

13
00:00:42,990 --> 00:00:47,990
type something into the website and then click on something. And to create these

14
00:00:48,120 --> 00:00:49,920
chains of continuous actions

15
00:00:50,280 --> 00:00:55,280
where we basically automate the entire flow of a particular job or a particular

16
00:00:55,950 --> 00:00:58,320
task. To do that,

17
00:00:58,380 --> 00:01:01,230
we're going to need to use Selenium WebDriver.

18
00:01:02,070 --> 00:01:07,070
Now, this is a free tool and it basically allows us to automate the browser,

19
00:01:08,250 --> 00:01:11,520
get the browser to do things automatically

20
00:01:11,760 --> 00:01:16,760
depending on a script or a piece of code that we write. Now,

21
00:01:17,580 --> 00:01:22,580
this is going to enable us to type as well as click as well as scroll.

22
00:01:25,560 --> 00:01:30,560
Basically anything that a human pretty much can do on a website, you can do using

23
00:01:30,930 --> 00:01:33,030
a Selenium driven browser.

24
00:01:33,600 --> 00:01:37,860
It's kind of like we're building a robot and telling it what to do on a browser.

25
00:01:38,310 --> 00:01:43,290
And selenium is the tool that allows the robot to interact and communicate with

26
00:01:43,290 --> 00:01:46,080
the browser. And once we've leveled up,

27
00:01:46,140 --> 00:01:49,290
we'll be able to do all sorts of things like, for example,

28
00:01:49,590 --> 00:01:54,590
play web-based games like cookie clicker automatically to click on this cookie

29
00:01:56,820 --> 00:02:01,820
all by itself using the code instead of us having to manually do it and then to

30
00:02:02,820 --> 00:02:07,820
select upgrades and to purchase them, again, completely automatically.

31
00:02:09,090 --> 00:02:13,530
If you ever wanted to be the best at cookie-clicker or any other web-based

32
00:02:13,530 --> 00:02:18,150
game and you don't want to invest the time in scaling up and getting good at it

33
00:02:18,420 --> 00:02:23,220
yourself, well then this is where automation might help you.

34
00:02:23,940 --> 00:02:25,560
But on a more serious note,

35
00:02:25,590 --> 00:02:29,100
you might use something like selenium to automate

36
00:02:29,100 --> 00:02:34,100
filling in forms or transferring information from an Excel spreadsheet to a

37
00:02:35,190 --> 00:02:36,600
online Google form,

38
00:02:36,630 --> 00:02:40,470
or basically doing anything that is repetitive and tedious,

39
00:02:40,770 --> 00:02:42,390
and you don't want to do it yourself.

40
00:02:43,050 --> 00:02:45,690
So once you are ready, head over to the next lesson

41
00:02:45,900 --> 00:02:49,440
and let's start learning about this new superpower.


42
00:00:00,360 --> 00:00:03,360
In order to start using Selenium WebDriver,

43
00:00:03,660 --> 00:00:07,290
we're going to have to go through a number of steps in order to set up our

44
00:00:07,290 --> 00:00:11,970
browser and also to install and set up Selenium. Now,

45
00:00:12,120 --> 00:00:16,830
the first step, if you haven't already, is to install the Chrome browser.

46
00:00:17,100 --> 00:00:19,860
Now, while you can work with selenium using other browsers

47
00:00:19,880 --> 00:00:22,460
like Firefox or Safari,

48
00:00:22,850 --> 00:00:25,850
we're going to be using a number of Chrome developer tools. And also

49
00:00:26,390 --> 00:00:29,900
in order for you to work alongside, to do exactly what I'm doing,

50
00:00:30,200 --> 00:00:33,260
it'll be much easier if you're working on the same browser and the same

51
00:00:33,260 --> 00:00:36,020
technology. If you haven't already got Chrome,

52
00:00:36,050 --> 00:00:40,100
then head over to the course resources where you'll find a link to download the

53
00:00:40,100 --> 00:00:44,390
latest version for your computer. And then once you've done that,

54
00:00:44,510 --> 00:00:47,810
the next step is to download the Chrome driver.

55
00:00:48,260 --> 00:00:53,180
And this is different from the actual browser. Again, in the course resources,

56
00:00:53,210 --> 00:00:58,210
you'll find a link to all the Chromedrivers and we have to download the

57
00:00:58,280 --> 00:01:00,350
version of Chromedriver that matches

58
00:01:00,980 --> 00:01:05,690
the version of Chrome that we have. In order to find out the version of Chrome,

59
00:01:05,720 --> 00:01:08,840
all you have to do head over to the top-right corner,

60
00:01:08,870 --> 00:01:11,420
click on these three dots, go to help,

61
00:01:11,690 --> 00:01:14,930
and then go to about Google Chrome. Here

62
00:01:14,930 --> 00:01:18,170
it's going to tell you which version you are currently running.

63
00:01:18,590 --> 00:01:21,650
And because you're going to be watching the video in the future,

64
00:01:21,920 --> 00:01:26,920
this version might not be the same for you as you see right here. Currently,

65
00:01:27,080 --> 00:01:29,630
I am completely up to date, so the latest 

66
00:01:29,630 --> 00:01:33,950
version that I'm running is version 84. Now,

67
00:01:33,980 --> 00:01:38,980
all I have to do is go back here and find the version of 84 and download it.

68
00:01:39,800 --> 00:01:43,850
So I just have to click here and it will take me to a

69
00:01:43,910 --> 00:01:47,030
page where I've got three options. Now

70
00:01:47,030 --> 00:01:51,470
if I'm running a Linux computer, then I click on this one. If I'm running a Mac,

71
00:01:51,500 --> 00:01:55,160
I click on this one and Windows users will click on this one.

72
00:01:55,310 --> 00:01:59,150
So I'm running a Mac so I'm going to take that particular file.

73
00:01:59,870 --> 00:02:02,420
Now I'm going to have to unzip the file

74
00:02:02,720 --> 00:02:05,420
and I end up with the actual Chrome driver.

75
00:02:06,350 --> 00:02:11,350
Now the final step is to move this Chrome driver to a location of our choice.

76
00:02:12,800 --> 00:02:16,580
I don't recommend keeping the driver inside the downloads folder

77
00:02:16,610 --> 00:02:21,080
just because I'm sure you, as well as I, will and delete everything in the

78
00:02:21,080 --> 00:02:23,630
downloads folder without a lot of inspection.

79
00:02:24,080 --> 00:02:26,870
So we should move this Chrome driver to somewhere else,

80
00:02:26,990 --> 00:02:31,120
somewhere where it's not likely to get deleted accidentally. In my case,

81
00:02:31,250 --> 00:02:36,250
I'm going to go up a level with command up and here 

82
00:02:36,380 --> 00:02:39,350
I've got a folder that I've created called Development.

83
00:02:39,860 --> 00:02:43,730
Now you can create a folder anywhere you like, um,

84
00:02:43,820 --> 00:02:48,820
and then call it anything you like and move this Chrome driver over to the new

85
00:02:49,940 --> 00:02:53,540
location. Now, the most important thing though is

86
00:02:53,810 --> 00:02:58,810
to actually get the file path for this particular file. To do that on a Mac

87
00:02:59,800 --> 00:03:03,730
all we have to do is right-click and go to get info.

88
00:03:04,210 --> 00:03:09,210
And then where it says where we're going to copy all of that hit command+C to

89
00:03:09,850 --> 00:03:14,530
copy. And then we're going to go into a new project that we've created

90
00:03:14,650 --> 00:03:18,130
which I've named day-48. In the main.py

91
00:03:18,190 --> 00:03:23,190
I'm going to paste this entire file path and I'm gonna save it as the Chrome

92
00:03:24,070 --> 00:03:26,200
driver path like this.

93
00:03:27,790 --> 00:03:32,790
Now the final step we have to add to this path is to add a forward slash to the

94
00:03:33,850 --> 00:03:35,590
actual Chrome driver.

95
00:03:36,430 --> 00:03:39,580
PyCharm should auto suggest the name of Chrome driver,

96
00:03:39,940 --> 00:03:44,320
but this is now the full path that will take us to that particular driver.

97
00:03:45,970 --> 00:03:49,840
Now, if you are on Windows, the process is pretty much the same.

98
00:03:50,050 --> 00:03:54,820
Once you've downloaded the driver for your system, so Windows 32,

99
00:03:55,420 --> 00:03:59,980
then you're going to go ahead and open it up and unzip it.

100
00:03:59,980 --> 00:04:04,980
So click on this extract button so that you can actually extract everything

101
00:04:05,830 --> 00:04:07,900
that's inside. Now,

102
00:04:07,900 --> 00:04:12,400
it's going to ask you for a destination for where you want to put the extracted

103
00:04:12,400 --> 00:04:12,820
file.

104
00:04:12,820 --> 00:04:17,230
So we're going to click on browse and you're gonna select a location on your

105
00:04:17,230 --> 00:04:20,440
computer. Now, if you don't have a preference,

106
00:04:20,440 --> 00:04:25,440
I recommend just going to your C drive and then here creating a new folder

107
00:04:30,880 --> 00:04:32,230
called Development.

108
00:04:32,740 --> 00:04:37,210
And then inside this folder is where you're going to extract the Chrome driver.

109
00:04:38,020 --> 00:04:42,100
So go ahead and click extract. And then once that's done,

110
00:04:42,130 --> 00:04:44,800
we'll go and navigate to that location.

111
00:04:45,100 --> 00:04:49,090
So it was in the C drive and it was inside the development folder.

112
00:04:49,420 --> 00:04:53,440
And you can check and just make sure that your Chrome driver is sitting inside

113
00:04:53,440 --> 00:04:53,830
here

114
00:04:53,830 --> 00:04:58,830
and it's an application that you've extracted from the zip file. Now to find out

115
00:04:59,050 --> 00:05:03,250
its file path, we're going to right-click and go to properties.

116
00:05:03,760 --> 00:05:07,330
And then in the properties you see the location right here.

117
00:05:07,960 --> 00:05:10,180
So here is the location

118
00:05:10,240 --> 00:05:15,160
and all we have to do is just to select everything that's here and then go ahead

119
00:05:15,160 --> 00:05:17,500
and use control+c to copy it

120
00:05:18,070 --> 00:05:22,060
and then we can paste it into our file in PyCharm.

121
00:05:22,720 --> 00:05:27,190
So we're going to paste it inside a string like this. And again,

122
00:05:27,220 --> 00:05:31,540
we're going to save it into the name that is chrome_

123
00:05:31,990 --> 00:05:36,010
driver_path like this.

124
00:05:36,610 --> 00:05:39,370
And again, we're doing the same thing that we did with the Mac.

125
00:05:39,400 --> 00:05:44,400
We're going to add another backslash and then add the name of our Chrome driver

126
00:05:45,760 --> 00:05:46,593
like this.

127
00:05:47,230 --> 00:05:51,220
So now that we've installed Chrome and we've downloaded the Chrome driver,

128
00:05:51,760 --> 00:05:56,760
the next and last step is to install and set up Selenium. In my main.py

129
00:05:57,560 --> 00:06:02,560
I'm going to import Selenium. And make sure that you spelled it correctly

130
00:06:02,990 --> 00:06:04,460
so it looks like this.

131
00:06:04,820 --> 00:06:09,620
And then we're going to click on this red light bulb as always to install our

132
00:06:09,620 --> 00:06:12,020
package. Now,

133
00:06:12,020 --> 00:06:14,750
once Selenium has been installed successfully,

134
00:06:15,200 --> 00:06:17,270
I'm going to change the import statement.

135
00:06:17,600 --> 00:06:21,980
I'm going to say that from this newly installed selenium package,

136
00:06:22,280 --> 00:06:27,280
I'm going to import a module called WebDriver and it's this webdriver

137
00:06:28,310 --> 00:06:33,050
which is going to be driving the Chrome browser and doing all of our automated

138
00:06:33,050 --> 00:06:33,883
tasks.

139
00:06:34,250 --> 00:06:38,870
Let's create a new driver from that new module.

140
00:06:39,410 --> 00:06:44,410
So driver = webdriver. and then we can now instantiate any browser of our

141
00:06:45,980 --> 00:06:50,510
choice. So in our case, we're going to be creating a Chrome browser to drive,

142
00:06:50,930 --> 00:06:55,930
but you can see that you can also have Firefox or Safari and a large number of

143
00:06:56,270 --> 00:06:57,140
other browsers.

144
00:06:58,280 --> 00:07:02,930
We're going to choose Chrome and notice that this is Chrome with a capital C.

145
00:07:02,960 --> 00:07:05,150
So we're initializing a new object here.

146
00:07:05,900 --> 00:07:10,900
And the only required argument we have to give is the executable path.

147
00:07:11,450 --> 00:07:14,720
So this is the path of the executable

148
00:07:14,870 --> 00:07:17,630
that is the Chrome driver that we downloaded previously.

149
00:07:18,200 --> 00:07:22,910
This is going to be the path and notice that it's the location where that Chrome

150
00:07:22,910 --> 00:07:24,800
driver lives. And then at the very end,

151
00:07:24,830 --> 00:07:27,860
we've got the actual name of the executable

152
00:07:27,890 --> 00:07:32,750
which on a Mac is called chromedriver, on Windows it's chromedriver.exe.

153
00:07:33,590 --> 00:07:38,150
Let's go ahead and pass this in here. And now that we've created our driver,

154
00:07:38,180 --> 00:07:42,050
we're pretty much done with installing and setting up selenium WebDriver.

155
00:07:42,800 --> 00:07:45,770
But if you're wondering what this Chrome driver is, well,

156
00:07:45,800 --> 00:07:49,340
here's the way to think about it. We've got our Selenium package

157
00:07:49,580 --> 00:07:53,180
which contains code for us to be able to interact with browsers.

158
00:07:53,750 --> 00:07:57,890
Now it can interact with the Chrome browser which is what we're choosing to do,

159
00:07:58,250 --> 00:08:02,450
but it can also interact with a bunch of other ones like Safari or Firefox.

160
00:08:03,140 --> 00:08:03,500
Now,

161
00:08:03,500 --> 00:08:08,500
how do we make sure that this package which can handle all three knows

162
00:08:08,540 --> 00:08:12,800
specifically how to work with the Chrome browser? Well,

163
00:08:12,800 --> 00:08:17,800
we're going to need some sort of a bridge that bridges the selenium code to work

164
00:08:19,550 --> 00:08:21,380
with the Chrome browser.

165
00:08:21,860 --> 00:08:25,220
And this bridge is provided by the Chrome driver.

166
00:08:25,940 --> 00:08:28,280
So there'll be a different driver for a Safari,

167
00:08:28,310 --> 00:08:30,500
and there'll be a different driver for Firefox.

168
00:08:30,920 --> 00:08:33,320
And just by switching up those drivers,

169
00:08:33,620 --> 00:08:37,880
it will tell selenium how to work with the latest version of these browsers.

170
00:08:38,539 --> 00:08:40,580
All we have to do is now use it.

171
00:08:41,210 --> 00:08:45,560
So the first thing I'm going to use my driver to do is I'm just going to get it

172
00:08:45,620 --> 00:08:49,490
to open up a webpage. We'll use driver.get

173
00:08:49,640 --> 00:08:52,070
and then we can pass in the URL here.

174
00:08:52,730 --> 00:08:55,100
So it's going to be HTTPS

175
00:08:55,140 --> 00:08:59,430
and then I'm going to go to amazon.com. Now,

176
00:08:59,730 --> 00:09:02,370
if you're on Windows and you go ahead and run the code,

177
00:09:02,430 --> 00:09:06,240
then it should run without any issues. But if you're on a Mac, 

178
00:09:06,270 --> 00:09:07,530
this is what happens.

179
00:09:09,720 --> 00:09:14,040
You'll get a popup that says chromedriver cannot be opened because the developer

180
00:09:14,040 --> 00:09:18,870
cannot be verified even though we know that this is actually created by Google,

181
00:09:18,900 --> 00:09:22,860
specifically for the Chrome browser. So if this happens,

182
00:09:22,890 --> 00:09:24,210
you're going to click cancel

183
00:09:24,540 --> 00:09:29,430
and you'll get all of these errors because it's unable to access that file. Now,

184
00:09:29,460 --> 00:09:34,170
in order to enable it, we're going to go to the Apple symbol, system preferences.

185
00:09:35,940 --> 00:09:39,390
And then we're going to go to security and privacy and here,

186
00:09:39,390 --> 00:09:41,370
because we try to run it before,

187
00:09:41,610 --> 00:09:45,060
we've got something that says chromedriver was blocked from use.

188
00:09:45,450 --> 00:09:48,120
So we're going to click on the allow anyways.

189
00:09:48,690 --> 00:09:52,890
And now if we run this again, then it'll give us this popup

190
00:09:53,070 --> 00:09:55,350
and all we have to do is click open.

191
00:09:56,190 --> 00:09:58,380
And once we've done all of that,

192
00:09:58,680 --> 00:10:03,680
now it's going to finally open up the site that we wanted to go to, amazon.com,

193
00:10:05,010 --> 00:10:08,370
using this automated version of Chrome.

194
00:10:08,760 --> 00:10:11,910
And you can see this because right at the top here,

195
00:10:11,970 --> 00:10:15,330
it says Chrome is being controlled by automated test software.

196
00:10:15,630 --> 00:10:17,040
That is our selenium.

197
00:10:17,700 --> 00:10:22,700
The driver.get method effectively opens up a new browser window with the URL

198
00:10:24,300 --> 00:10:25,410
that you've specified.

199
00:10:26,040 --> 00:10:31,040
Now you'll also want to close down the window or the entire browser once you're

200
00:10:32,640 --> 00:10:37,640
done with whatever it is you may want to automate or do. To do that

201
00:10:38,010 --> 00:10:42,960
all we have to do is tap into driver and then we can call the method close.

202
00:10:43,350 --> 00:10:45,420
Now, when I hit the run button,

203
00:10:45,480 --> 00:10:48,600
you can see now it's going to open up amazon.com

204
00:10:48,930 --> 00:10:52,800
and as soon as that page loaded, it pretty much just closed it down.

205
00:10:53,550 --> 00:10:58,290
Now there's also another method called driver.quit.

206
00:10:58,740 --> 00:11:00,840
Now what's the difference between close and quit,

207
00:11:00,870 --> 00:11:05,700
you might wonder? Well, close actually just closes a single tab,

208
00:11:05,760 --> 00:11:09,510
the active tab where you've opened up a particular page.

209
00:11:09,930 --> 00:11:13,020
Now quit is actually going to quit the entire browser.

210
00:11:13,530 --> 00:11:17,280
There are certain cases where you have more than one tab running at the same

211
00:11:17,280 --> 00:11:18,113
time.

212
00:11:18,120 --> 00:11:22,830
Close will close that particular tab while quit will actually quit the entire

213
00:11:22,830 --> 00:11:26,160
program. Once I'm done using my driver,

214
00:11:26,190 --> 00:11:31,190
I prefer actually just using quit to shut down the entire browser.

215
00:11:32,040 --> 00:11:36,240
That way we can always start again from scratch and we'll have a fresh browser

216
00:11:36,240 --> 00:11:39,870
to work with. And in the next and coming lessons,

217
00:11:39,990 --> 00:11:44,040
we're going to show you how to use selenium to do basically anything that we

218
00:11:44,040 --> 00:11:46,500
could do with a mouse and keyboard as humans,

219
00:11:46,770 --> 00:11:50,880
but instead, we're going to automate the entire process and workflow.

220
00:11:51,450 --> 00:11:54,540
So for all of that and more, I'll see you in the next lesson.


221
00:00:00,180 --> 00:00:05,040
Now that we've seen how we can get started using selenium webdriver to automate

222
00:00:05,070 --> 00:00:09,330
our browser, the next step is to figure out how to use selenium

223
00:00:09,360 --> 00:00:14,360
to find and locate specific HTML elements on the webpage.

224
00:00:16,140 --> 00:00:21,140
Just between where we quit our driver and where we get hold of a particular

225
00:00:21,380 --> 00:00:22,213
page,

226
00:00:22,340 --> 00:00:27,340
I'm going to show you how easy it is to complete the previous task in day 47

227
00:00:29,090 --> 00:00:33,650
where we try to get hold of the price of a particular item on amazon.com.

228
00:00:34,940 --> 00:00:38,390
This was the item that we were interested in. This was the instant pot

229
00:00:38,480 --> 00:00:40,160
and this is the price.

230
00:00:40,430 --> 00:00:45,430
So if I go ahead and take this URL and replace this previous

231
00:00:46,010 --> 00:00:50,750
just amazon.com URL with the URL that takes us to this page,

232
00:00:51,050 --> 00:00:54,590
then, we can start inspecting on this particular element.

233
00:00:55,310 --> 00:00:57,950
So here we've got the price,

234
00:00:59,900 --> 00:01:04,900
which is that inside a span with the id of priceblock_ourprice.

235
00:01:05,600 --> 00:01:07,310
Now, if I use that,

236
00:01:07,340 --> 00:01:12,340
then I can simply say driver.find_element_by_id

237
00:01:14,810 --> 00:01:18,530
and then I can paste in the id that I found just now,

238
00:01:18,920 --> 00:01:23,420
and this is going to be equal to the price element. Now,

239
00:01:23,420 --> 00:01:24,980
if I want to get hold of the price,

240
00:01:25,010 --> 00:01:29,540
all I have to do is to print that element.text.

241
00:01:30,110 --> 00:01:31,520
And now if I hit run,

242
00:01:31,580 --> 00:01:36,580
you'll see our browser open up briefly to the page with the Instant pot

243
00:01:36,680 --> 00:01:40,520
and then it'll close down and you can see the price printed right here.

244
00:01:41,270 --> 00:01:41,900
Now,

245
00:01:41,900 --> 00:01:46,900
the reason why this is so much shorter than what you did in the last project is

246
00:01:47,240 --> 00:01:49,670
because we're driving a browser.

247
00:01:49,700 --> 00:01:52,730
So the browser is already sending all of those headers,

248
00:01:53,030 --> 00:01:58,030
all of the information that Amazon would expect from a actual user instead of

249
00:01:59,600 --> 00:02:02,660
using a get request using the request package.

250
00:02:03,260 --> 00:02:05,480
So in only three lines,

251
00:02:05,570 --> 00:02:10,250
we can do so much more than we could do with Beautiful Soup. Essentially,

252
00:02:10,250 --> 00:02:11,120
if you think about it,

253
00:02:11,150 --> 00:02:16,150
Beautiful Soup is really good for just grabbing and scraping pieces of data

254
00:02:16,790 --> 00:02:18,290
from an HTML website.

255
00:02:18,740 --> 00:02:22,190
But it gets stuck when that website is being rendered

256
00:02:22,190 --> 00:02:24,920
using JavaScript or Angular or React

257
00:02:25,220 --> 00:02:30,220
and the content that was HTML was taking time to load,

258
00:02:31,700 --> 00:02:35,540
or it requires certain conditions to load.

259
00:02:36,140 --> 00:02:37,250
Whereas in this case,

260
00:02:37,280 --> 00:02:42,200
we're effectively doing exactly the same thing as we would as a human,

261
00:02:42,590 --> 00:02:44,570
going to this particular URL,

262
00:02:44,630 --> 00:02:48,380
and then looking at this element and its value.

263
00:02:49,760 --> 00:02:54,260
I wanted to show you a couple of other ways that you could find elements because

264
00:02:54,260 --> 00:02:55,730
as soon as I write driver.

265
00:02:55,760 --> 00:03:00,190
find, you can see there's a whole bunch of ways of finding elements

266
00:03:00,250 --> 00:03:04,450
and there's a lot more methods than you have with Beautiful Soup.

267
00:03:05,050 --> 00:03:08,920
One that I want to show you that's quite useful is find_

268
00:03:08,950 --> 00:03:12,670
_element_by_name. If we go to python.org,

269
00:03:13,060 --> 00:03:18,060
you'll remember from your lessons on HTML and CSS that most forms,

270
00:03:18,700 --> 00:03:22,840
these input forms, will have a name attribute.

271
00:03:23,140 --> 00:03:28,090
So if I go ahead and inspect on this search bar, you can see its got an ID,

272
00:03:28,390 --> 00:03:31,600
it's got a name, it's got a type, it's got a role, it's got a class.

273
00:03:31,600 --> 00:03:33,490
It has got a whole bunch of attributes.

274
00:03:33,910 --> 00:03:37,660
Now I'm going to search for it by this name, which is q.

275
00:03:38,350 --> 00:03:40,030
And I can do that by saying

276
00:03:40,060 --> 00:03:44,200
find_element_by_name and then specify the name as q.

277
00:03:44,860 --> 00:03:49,860
Now of course I'll have to change this URL to actually python.org.

278
00:03:51,790 --> 00:03:55,810
And now once we've found our element by name,

279
00:03:56,020 --> 00:03:57,820
we'll call it the search_bar,

280
00:04:02,700 --> 00:04:03,450
...

281
00:04:03,450 --> 00:04:06,960
and then we'll go ahead and print out this search bar.

282
00:04:10,200 --> 00:04:11,033
Right.

283
00:04:11,070 --> 00:04:13,800
When selenium locates a particular element,

284
00:04:14,040 --> 00:04:17,040
it won't actually print out the actual HTML.

285
00:04:17,399 --> 00:04:22,320
It'll give it to you as a selenium element like this. Now,

286
00:04:22,350 --> 00:04:27,350
if you want to tap into its various attributes or text or tag name,

287
00:04:28,260 --> 00:04:30,870
then you'll actually have to do that using a dot.

288
00:04:31,530 --> 00:04:33,930
So we can say search_bar.tag_name,

289
00:04:34,050 --> 00:04:38,130
and it will give us that that is an input tag.

290
00:04:39,060 --> 00:04:42,480
Or we could say search_bar.get_attribute

291
00:04:42,570 --> 00:04:47,430
and we can specify the attribute that we want the value for. So for example,

292
00:04:47,430 --> 00:04:50,100
if I wanted to know what the placeholder value was,

293
00:04:50,370 --> 00:04:54,000
then all I have to do is put, get attribute placeholder,

294
00:04:54,060 --> 00:04:55,440
and then we can print that out.

295
00:04:56,010 --> 00:04:58,920
And it will tell us that placeholder says search.

296
00:04:59,850 --> 00:05:03,840
So that is something that you'll find people commonly use with Selenium, find

297
00:05:03,840 --> 00:05:04,830
element by name.

298
00:05:05,220 --> 00:05:10,220
And it's really useful when it comes to filling in web forms because most forms

299
00:05:10,350 --> 00:05:14,760
will have elements that are organized by name because when the form is

300
00:05:14,760 --> 00:05:15,593
submitted,

301
00:05:15,660 --> 00:05:20,010
that name is carried along with the value of the inputs.

302
00:05:20,730 --> 00:05:25,350
In addition to find element by name, you'll also see the usual ones.

303
00:05:25,350 --> 00:05:28,320
So find element by class name, for example.

304
00:05:28,980 --> 00:05:32,910
So if we wanted to get hold of this logo here,

305
00:05:33,900 --> 00:05:37,380
then it has a class of python-logo.

306
00:05:37,920 --> 00:05:40,470
So all I have to add here is the name of the class

307
00:05:40,500 --> 00:05:42,930
which is python-logo

308
00:05:43,530 --> 00:05:48,450
and this will give me that logo element. Now from the logo element,

309
00:05:48,480 --> 00:05:51,930
I can actually get hold of things even like it's size.

310
00:05:52,050 --> 00:05:54,840
So let's go ahead and print out the size of the logo.

311
00:05:55,380 --> 00:05:56,213
Right.

312
00:05:58,520 --> 00:06:02,030
It has a height of 82 and a width of 290.

313
00:06:02,480 --> 00:06:06,860
So you can see that we can do a lot more with selenium than we could with

314
00:06:06,890 --> 00:06:07,730
beautiful soup.

315
00:06:09,410 --> 00:06:13,670
So that's fine element by ID, by name, by class name,

316
00:06:14,690 --> 00:06:19,430
but there's also of course find element by CSS selector.

317
00:06:20,030 --> 00:06:24,380
And this is probably one of the easiest ways of narrowing down on a particular

318
00:06:24,380 --> 00:06:25,213
element.

319
00:06:26,300 --> 00:06:29,720
Let's say that I wanted to get hold of this link to the docs.

320
00:06:30,200 --> 00:06:33,890
Let's go ahead and inspect it, and it lives inside an anchor tag.

321
00:06:34,220 --> 00:06:36,680
But you can see that this anchor tag has no class,

322
00:06:36,710 --> 00:06:40,730
it has no ID, has no easy way of identification.

323
00:06:41,180 --> 00:06:43,220
So how do we get hold of it? Well,

324
00:06:43,220 --> 00:06:47,870
we can see that it lives in a paragraph element and then going further up,

325
00:06:47,900 --> 00:06:51,230
it's inside a div with this particular class.

326
00:06:51,710 --> 00:06:55,130
So this has a class of documentation-widget.

327
00:06:55,460 --> 00:06:59,540
So that's pretty specific. So if we wanted to get hold of that anchor tag,

328
00:06:59,570 --> 00:07:04,430
we could just say, well, inside this div of documentation-widget,

329
00:07:04,790 --> 00:07:07,250
let's go ahead and find any anchor tags.

330
00:07:08,210 --> 00:07:11,060
And to express that as a CSS selector,

331
00:07:11,060 --> 00:07:13,970
we would specify the class documentation-widget,

332
00:07:14,330 --> 00:07:18,410
and then inside the element with that class, we're looking for an anchor tag.

333
00:07:18,890 --> 00:07:22,670
So this would get us our documentation link.

334
00:07:24,290 --> 00:07:29,290
And now if I go ahead and print the documentation_link.text,

335
00:07:29,810 --> 00:07:34,810
you can see that it's actually getting hold of this particular link.

336
00:07:36,290 --> 00:07:37,040
And this is done

337
00:07:37,040 --> 00:07:42,040
even though the actual link doesn't have any easily identifiable name or class

338
00:07:43,040 --> 00:07:46,670
or ID. Now on a similar vein

339
00:07:46,790 --> 00:07:51,790
sometimes it's extremely hard to even find an element even by CSS selector.

340
00:07:52,790 --> 00:07:57,590
So if all else fails, one that will always work as the XPath.

341
00:07:58,190 --> 00:08:03,190
The XPath is a way of locating a specific HTML element by a path structure.

342
00:08:06,200 --> 00:08:09,050
So you've seen what paths look like right?

343
00:08:09,050 --> 00:08:12,320
Users/angela/Development, et cetera. Well,

344
00:08:12,320 --> 00:08:17,320
we can also express the navigation to a particular element drilling down from

345
00:08:18,800 --> 00:08:23,450
the top of the tree to a particular node using the XPath.

346
00:08:24,020 --> 00:08:28,340
Let's say I wanted to get hold of this link at the bottom, submit website bug.

347
00:08:28,890 --> 00:08:30,410
Let's go ahead and inspect on it.

348
00:08:30,710 --> 00:08:35,710
And you can see it's not particularly unique in terms of having an ID or a class

349
00:08:37,039 --> 00:08:40,789
or a name. And even in terms of its structure,

350
00:08:40,820 --> 00:08:45,820
it's sort of in this ul and then an li and it might not be that easy to get

351
00:08:47,030 --> 00:08:50,540
to it. But here's where our XPath comes in handy.

352
00:08:50,960 --> 00:08:55,680
Let's go ahead and right click on it and then go to copy, copy XPath.

353
00:08:56,310 --> 00:09:01,310
And now we can go back to our code and use it to tap into that element.

354
00:09:02,310 --> 00:09:07,110
So we'll say driver, and then we'll say, find_element_by_xpath.

355
00:09:07,530 --> 00:09:10,740
And then inside here, we're going to paste our XPath.

356
00:09:11,250 --> 00:09:15,720
Now notice that the XPath itself actually has some double quotes.

357
00:09:16,050 --> 00:09:17,580
So we have the change

358
00:09:17,610 --> 00:09:22,470
our double quotes into a single quotes so that it doesn't clash with the

359
00:09:22,500 --> 00:09:24,900
inner double quotes. So like this.

360
00:09:25,410 --> 00:09:27,930
Now once we found our bug link,

361
00:09:28,410 --> 00:09:33,410
then we're going to print out the link and I'm going to get hold of the href

362
00:09:35,730 --> 00:09:36,563
here.

363
00:09:37,170 --> 00:09:42,170
So now I'm going to print my bug_link.txt just to prove that this worked.

364
00:09:42,780 --> 00:09:43,890
And if I hit run,

365
00:09:44,190 --> 00:09:49,110
you can see it opens up our browser and you can see it's managed to get hold of

366
00:09:49,110 --> 00:09:53,490
that particular link using this very specific XPath

367
00:09:53,820 --> 00:09:58,140
which looks very much like a file path that we've been using.

368
00:09:58,650 --> 00:10:03,650
But it's essentially the way that we would navigate down through the divs,

369
00:10:03,720 --> 00:10:05,100
the uls, the lis,

370
00:10:05,220 --> 00:10:10,220
all the way down to that particular anchor tag. And the best part of all is of

371
00:10:11,400 --> 00:10:11,640
course,

372
00:10:11,640 --> 00:10:16,500
you can use this button here in Chrome to locate any element.

373
00:10:16,830 --> 00:10:19,620
And then that would select its location in the code

374
00:10:19,980 --> 00:10:24,980
and then you can right-click and then copy it XPath to get hold of that

375
00:10:25,050 --> 00:10:26,040
particular thing.

376
00:10:27,570 --> 00:10:32,570
Now I'm going to link to the documentation on XPath from w3schools.

377
00:10:33,090 --> 00:10:37,710
It goes into a little bit more detail about how XPaths are constructed,

378
00:10:38,040 --> 00:10:41,940
but you don't need to know this in order to work with them. As I've shown,

379
00:10:41,940 --> 00:10:46,830
you can simply use the Chrome developer tools and it will help you get to the

380
00:10:46,860 --> 00:10:49,050
particular item you're interested in.

381
00:10:51,030 --> 00:10:55,680
Now we've been looking at finding elements using selenium,

382
00:10:56,100 --> 00:11:01,100
but notice how we've always stuck to the singular version of that method,

383
00:11:01,140 --> 00:11:06,140
find element. Now for every single method that I've shown you,

384
00:11:06,210 --> 00:11:10,800
there's also a counterpart, which is the find elements.

385
00:11:10,980 --> 00:11:15,540
So, for example, find_elements_by_css_selector. And of course,

386
00:11:15,570 --> 00:11:19,200
this is just going to find you everything on the screen that matches your

387
00:11:19,200 --> 00:11:21,690
criteria and give it to you in a list.

388
00:11:22,140 --> 00:11:27,140
And there is a version of this for every single find method that we've shown

389
00:11:27,690 --> 00:11:30,270
so far. In the next lesson

390
00:11:30,330 --> 00:11:35,250
I've got a quick challenge for you to put into practice what you've learned and

391
00:11:35,250 --> 00:11:39,180
to be able to locate any given elements on a webpage. So

392
00:11:39,870 --> 00:11:42,630
for all of that and more I'll see you on the next lesson.


393
00:00:00,390 --> 00:00:01,770
Now in the last lesson,

394
00:00:01,800 --> 00:00:06,800
we looked at various ways of finding and locating elements on a particular HTML

395
00:00:07,920 --> 00:00:11,760
page. Now, in this lesson, we're going to put all of that to practice

396
00:00:12,030 --> 00:00:16,890
and you're going to get hold of all of these upcoming events. Now,

397
00:00:16,890 --> 00:00:19,470
because these events are time-dependent,

398
00:00:19,920 --> 00:00:23,400
the events that you'll see will of course be different from what I've got here.

399
00:00:24,120 --> 00:00:27,750
But the idea is to get hold of all of these dates,

400
00:00:27,780 --> 00:00:32,430
so all five of these, and then get hold of all five of these names,

401
00:00:32,670 --> 00:00:35,550
and we're going to create a dictionary from these events.

402
00:00:36,030 --> 00:00:40,470
And by the end of the challenge, you should be able to print out a dictionary

403
00:00:40,470 --> 00:00:41,970
that's structured like this.

404
00:00:42,510 --> 00:00:47,510
It's going to contain five items. Starting from zero to this is the first key

405
00:00:49,440 --> 00:00:54,440
and then the first value is a dictionary with a key of time and a key of name.

406
00:00:55,890 --> 00:00:59,100
And then the values corresponds to of course,

407
00:00:59,100 --> 00:01:01,950
the first date and the first name.

408
00:01:01,980 --> 00:01:06,000
So the first one we've got here is PyCon JP 2020

409
00:01:06,420 --> 00:01:10,920
and you can see down here in this section, upcoming events,

410
00:01:11,040 --> 00:01:13,110
the first one is this item.

411
00:01:13,590 --> 00:01:18,270
So we're basically converting whatever is here in the upcoming events into this

412
00:01:18,300 --> 00:01:21,720
dictionary format. That is the goal

413
00:01:21,930 --> 00:01:25,800
and you're going to be needing everything that you've learned previously.

414
00:01:26,130 --> 00:01:26,963
In addition,

415
00:01:27,090 --> 00:01:32,070
it might be worth taking a look at the documentation for locating elements with

416
00:01:32,070 --> 00:01:36,480
selenium. So I'll link to this page in the course resources as well,

417
00:01:36,870 --> 00:01:41,870
and once you're ready, get inspecting and see if you can complete this challenge

418
00:01:42,540 --> 00:01:46,200
and print out this dictionary. Pause the video now.

419
00:01:47,600 --> 00:01:48,433
All right.

420
00:01:53,180 --> 00:01:55,700
So our goal is to get hold 

421
00:01:55,700 --> 00:01:59,600
of this piece of data and this piece of data,

422
00:01:59,630 --> 00:02:00,860
but just the text.

423
00:02:01,370 --> 00:02:05,750
So we're going to have to first figure out how to locate these items.

424
00:02:06,170 --> 00:02:08,960
So if I go ahead and inspect on this date,

425
00:02:09,470 --> 00:02:13,700
you can see that it's inside a HTML element called time.

426
00:02:14,690 --> 00:02:18,230
Now, in order to get hold of this element time,

427
00:02:18,320 --> 00:02:20,960
we can of course use an XPath.

428
00:02:21,380 --> 00:02:26,380
But the problem is that this XPath will be specific for this first item.

429
00:02:27,050 --> 00:02:32,050
While we actually probably want to use a find method that can find all of the

430
00:02:33,770 --> 00:02:36,680
dates and all of the event names.

431
00:02:37,160 --> 00:02:40,880
So we're going to be using one of these multiple element finds.

432
00:02:41,120 --> 00:02:43,280
So where it says find elements.

433
00:02:44,180 --> 00:02:47,660
Now I think the easiest way here, at least for me,

434
00:02:47,870 --> 00:02:51,050
is to think about it in terms of CSS selectors.

435
00:02:51,710 --> 00:02:56,710
This is a time element that lives inside a li

436
00:02:57,290 --> 00:03:00,940
which is inside a ul, but we still haven't found anything

437
00:03:00,940 --> 00:03:04,180
that's unique to this particular structure here,

438
00:03:04,720 --> 00:03:08,680
because if you take a look over here, when we look at the latest news,

439
00:03:08,950 --> 00:03:12,100
it's also a time inside an li inside a ul.

440
00:03:12,520 --> 00:03:17,520
And none of this is unique until we get to this div where we have a blog widget

441
00:03:19,450 --> 00:03:23,740
while here we've got a event widget.

442
00:03:24,130 --> 00:03:27,190
So there finally is a unique class name.

443
00:03:27,730 --> 00:03:32,730
So we're going to use this class name and then find the time element. Back in our

444
00:03:34,840 --> 00:03:35,290
code,

445
00:03:35,290 --> 00:03:40,290
let's go ahead and tap into our driver and then use the find_elements_by_css

446
00:03:41,710 --> 00:03:46,180
selector which is going to give us a list of elements that match the selector.

447
00:03:46,630 --> 00:03:51,630
And the selector is going to be first find a div with this particular class.

448
00:03:52,330 --> 00:03:55,300
So it has to have the class event-widget,

449
00:03:55,630 --> 00:03:58,990
so we write .event-widget. And then after a space,

450
00:03:59,020 --> 00:04:02,230
we specify the next thing we want to drill down to,

451
00:04:02,650 --> 00:04:04,390
which is a time element.

452
00:04:04,840 --> 00:04:08,320
So let's go ahead and just put the name of the HTML element like this,

453
00:04:08,650 --> 00:04:13,030
and we'll get the event times as a list, hopefully.

454
00:04:13,480 --> 00:04:16,779
So let's go ahead and print this out, event_times,

455
00:04:17,260 --> 00:04:22,029
and because this is actually going to be a selenium object

456
00:04:22,060 --> 00:04:24,190
rather than the actual text,

457
00:04:24,610 --> 00:04:28,690
we'll need to use a for loop in order to actually see what it is.

458
00:04:29,020 --> 00:04:31,690
So for time in event_times,

459
00:04:31,930 --> 00:04:35,950
let's go ahead and print each of the time.text.

460
00:04:39,460 --> 00:04:41,350
So once selenium has done its thing,

461
00:04:41,380 --> 00:04:46,120
you can see it's now got hold of all five dates.

462
00:04:47,950 --> 00:04:48,280
Now,

463
00:04:48,280 --> 00:04:53,200
the next thing we need to do is to get hold of the event names,

464
00:04:53,710 --> 00:04:55,810
and we're going to use a similar method.

465
00:04:55,810 --> 00:05:00,810
So let's go ahead and inspect on the name and you can see that this is now a

466
00:05:02,200 --> 00:05:03,033
anchor tag.

467
00:05:03,580 --> 00:05:08,580
Now you might think that the solution will be just as simple as copying what we

468
00:05:08,950 --> 00:05:13,950
had before and replacing the time element with an anchor tag element.

469
00:05:14,920 --> 00:05:19,840
But you'll see as I write my for loop, for name in event_names,

470
00:05:21,370 --> 00:05:23,230
print name.text.

471
00:05:24,070 --> 00:05:29,070
This does not actually get us what we want because it also gives us the first

472
00:05:30,640 --> 00:05:34,540
anchor tag in that div with class name event-widget

473
00:05:34,900 --> 00:05:39,370
which is this 'more' link here. So if we don't want that more link,

474
00:05:39,670 --> 00:05:42,070
we're going to have to be a little bit more creative.

475
00:05:42,760 --> 00:05:47,760
This anchor tag is also inside an li while that more link is definitely not

476
00:05:50,500 --> 00:05:55,210
inside an li. So we can narrow down on our selector by saying,

477
00:05:55,270 --> 00:05:59,060
okay, so it's inside a element with class event-widget,

478
00:05:59,360 --> 00:06:03,620
but then it's inside an li and then it's inside an anchor tag.

479
00:06:04,220 --> 00:06:09,080
Now that I've updated that CSS selector, you can see when I hit print,

480
00:06:09,200 --> 00:06:12,770
it gets us the actual names of all of the conferences.

481
00:06:13,520 --> 00:06:18,520
So the final thing to do is to actually create our events dictionary.

482
00:06:20,000 --> 00:06:22,310
You could do this using dictionary comprehension,

483
00:06:22,580 --> 00:06:25,460
but I'm going to do it in a slightly more long form way

484
00:06:25,490 --> 00:06:28,070
just so that anybody who's a little bit confused

485
00:06:28,340 --> 00:06:30,290
it'll make it a little bit easier to understand.

486
00:06:31,070 --> 00:06:34,880
So we're going to create a for loop and I'm going to use n. So I'm going to say

487
00:06:34,880 --> 00:06:36,530
for n in range

488
00:06:36,860 --> 00:06:41,860
and the range is going to be from zero to the length of event_times.

489
00:06:42,590 --> 00:06:45,530
So it's basically going to be a range from zero to four.

490
00:06:46,250 --> 00:06:50,600
Once I've got that range, now I'm going to add to my events.

491
00:06:51,320 --> 00:06:55,220
The key of the event is the actual n, so the number,

492
00:06:55,610 --> 00:07:00,610
and then the value of the event is a dictionary with the key of time

493
00:07:01,460 --> 00:07:06,410
and also a key of name, like this.

494
00:07:07,010 --> 00:07:11,780
Now the time is going to be from the event times and then getting hold of the

495
00:07:11,780 --> 00:07:13,580
item at index n,

496
00:07:13,940 --> 00:07:18,940
and the name is going to be event_names and the item at index

497
00:07:19,130 --> 00:07:19,963
n.

498
00:07:21,680 --> 00:07:26,680
Now the final thing we need to do is this gets hold of a selenium object and we

499
00:07:27,290 --> 00:07:31,340
have to get hold of the actual text. So let's write .text.

500
00:07:31,700 --> 00:07:34,550
And now we can print our events dictionary.

501
00:07:36,260 --> 00:07:41,000
And once that's done, you can see this is in the exact format that we wanted.

502
00:07:41,360 --> 00:07:43,640
We've got dictionary with five items,

503
00:07:43,820 --> 00:07:47,450
each item has a dictionary in itself, time

504
00:07:47,690 --> 00:07:50,870
and name of the upcoming Python conferences.

505
00:07:52,040 --> 00:07:55,370
So did you manage to complete that challenge? If not,

506
00:07:55,460 --> 00:07:58,550
it might be worth either reviewing CSS selectors

507
00:07:58,580 --> 00:08:02,990
which we went through in previous lessons or reviewing some of the lessons

508
00:08:02,990 --> 00:08:04,760
previously where we discussed 

509
00:08:04,760 --> 00:08:09,760
how to locate and how to get hold of the text from elements using selenium.


510
00:00:00,390 --> 00:00:03,360
In this lesson, I have another super quick challenge for you

511
00:00:03,360 --> 00:00:05,700
so you can practice setting up the selenium

512
00:00:05,700 --> 00:00:10,530
webdriver in a blind project and scraping a different piece of data from a

513
00:00:10,530 --> 00:00:14,400
website. This time we're going to work with the Wikipedia main page.

514
00:00:14,970 --> 00:00:19,350
So you can head over to the course resources and find the link to this page

515
00:00:19,620 --> 00:00:23,250
or you can just type it in. Back in our project

516
00:00:23,280 --> 00:00:27,300
I'm going to create a new file and I'm going to call this

517
00:00:28,070 --> 00:00:28,903
...

518
00:00:30,110 --> 00:00:34,640
interaction.py. Now in this new Python file,

519
00:00:34,910 --> 00:00:39,910
we're going to interact with this Wikipedia webpage and as a challenge to you,

520
00:00:40,760 --> 00:00:45,680
the first thing I want you to do is to figure out how you can get hold of this

521
00:00:45,710 --> 00:00:50,420
particular number and print it out inside our interaction.py.

522
00:00:51,080 --> 00:00:56,080
Remember that you'll need to import selenium and also use the web driver to get

523
00:00:57,620 --> 00:01:02,540
hold of this page and then find this particular number and finally print it out.

524
00:01:03,050 --> 00:01:04,640
And then when you're ready to run it, all

525
00:01:04,640 --> 00:01:08,150
you have to do is right-click and then run this interaction

526
00:01:08,150 --> 00:01:09,800
.py and it'll work

527
00:01:09,860 --> 00:01:13,970
and you should see the outcome being printed in your console.

528
00:01:14,270 --> 00:01:16,640
So pause the video now and give that a go.

529
00:01:17,360 --> 00:01:18,193
Right.

530
00:01:19,880 --> 00:01:22,550
All right. So here's the solution. First,

531
00:01:22,580 --> 00:01:25,400
we're going to go into the selenium package

532
00:01:25,670 --> 00:01:27,950
which we've already installed into this project,

533
00:01:28,010 --> 00:01:29,720
so we don't have to install it again.

534
00:01:30,320 --> 00:01:35,030
And then we're going to import the web driver. Now using the web driver,

535
00:01:35,030 --> 00:01:39,830
we're going to create a new driver from the Chrome browser.

536
00:01:40,370 --> 00:01:43,460
So we're going to have to navigate to that path again.

537
00:01:44,990 --> 00:01:48,980
Now this is my path and your path might be a little bit different,

538
00:01:49,340 --> 00:01:54,110
but this is what we put to initialize a new Chrome driver. Now,

539
00:01:54,140 --> 00:01:57,650
once we've created our driver,

540
00:01:58,490 --> 00:02:02,930
now we can use the driver to navigate to our webpage

541
00:02:03,020 --> 00:02:04,850
which is done using get.

542
00:02:05,510 --> 00:02:09,259
And this is the URL which we'll copy and paste into here.

543
00:02:10,400 --> 00:02:12,350
And once we've gotten hold of this page,

544
00:02:12,740 --> 00:02:16,640
then we're going to try to narrow down on this particular element.

545
00:02:17,060 --> 00:02:19,250
So let's go ahead and inspect it.

546
00:02:19,970 --> 00:02:24,970
And you can see that it's inside an anchor tag with no particular identifiers.

547
00:02:25,820 --> 00:02:29,030
There's no id, there's no name, there's no class.

548
00:02:29,630 --> 00:02:33,500
But this anchor tag lives in a div that has an id.

549
00:02:33,530 --> 00:02:38,530
So this articlecount is going to be a unique identifier for the div that holds

550
00:02:39,890 --> 00:02:41,270
this particular anchor tag.

551
00:02:41,690 --> 00:02:45,950
So we can narrow in on this anchor tag using our CSS selectors.

552
00:02:46,400 --> 00:02:50,420
So we can say driver.find_element_by_css_selector,

553
00:02:50,720 --> 00:02:54,950
make sure that it's element not elements. And then inside here,

554
00:02:54,950 --> 00:02:56,420
we're going to put our selector

555
00:02:56,540 --> 00:03:00,280
which is first the ID of article count

556
00:03:00,910 --> 00:03:04,360
and that is going to be proceeded with a pound sign.

557
00:03:04,750 --> 00:03:07,120
And then inside that div with that id,

558
00:03:07,120 --> 00:03:09,790
we're looking for the first anchor tag.

559
00:03:11,260 --> 00:03:14,890
Now notice that inside of that div there's actually two anchor tags.

560
00:03:15,280 --> 00:03:19,030
But by using this find_element_by_css_selector,

561
00:03:19,330 --> 00:03:22,780
it's only going to give us the first one that matches this criteria.

562
00:03:23,680 --> 00:03:26,110
So this is going to be our

563
00:03:28,480 --> 00:03:29,350
article count.

564
00:03:32,230 --> 00:03:37,230
And now what we want to do is we want to print the article_count.text.

565
00:03:39,040 --> 00:03:43,510
So now let's go ahead and right-click and run our interaction.py.

566
00:03:43,870 --> 00:03:46,630
It should open up our browser to this page,

567
00:03:47,050 --> 00:03:50,350
and now it should have found and printed out that number.

568
00:03:51,310 --> 00:03:53,380
So this is what we've been doing so far,

569
00:03:53,620 --> 00:03:56,410
creating our driver, opening web pages

570
00:03:56,740 --> 00:04:01,120
and then finding specific elements and printing some sort of property.

571
00:04:01,720 --> 00:04:06,720
But the next step is to actually form some sort of interaction with the webpage,

572
00:04:07,720 --> 00:04:08,410
for example,

573
00:04:08,410 --> 00:04:13,410
clicking on a link or typing something into the search bar because after all,

574
00:04:13,630 --> 00:04:15,190
when we're working with websites,

575
00:04:15,310 --> 00:04:19,750
it's often that we'll need to interact with it in order to navigate to new pages

576
00:04:19,839 --> 00:04:24,700
and get hold of specific pieces of information that we're interested in.

577
00:04:25,510 --> 00:04:28,570
And that's what I'm going to show you in the next lesson. So I'll

578
00:04:28,570 --> 00:04:29,110
see you there.


579
00:00:00,300 --> 00:00:01,380
In the last lesson,

580
00:00:01,440 --> 00:00:06,440
we looked at how we can find elements using selenium on a webpage.

581
00:00:07,110 --> 00:00:07,890
In this lesson,

582
00:00:07,890 --> 00:00:12,890
I want to focus more on how to interact with those elements that you found.

583
00:00:13,440 --> 00:00:14,370
For example,

584
00:00:14,400 --> 00:00:19,400
typing into a input field or clicking on a button.

585
00:00:20,850 --> 00:00:24,810
The first thing I want to show you is how to click on something.

586
00:00:25,590 --> 00:00:29,100
In this case, we've already gotten hold of an anchor tag

587
00:00:29,430 --> 00:00:32,490
which is inside a div called article_count.

588
00:00:32,610 --> 00:00:36,990
It's basically this anchor tag. And if I want to click on it,

589
00:00:37,050 --> 00:00:39,870
not using my mouse, but using selenium,

590
00:00:40,260 --> 00:00:43,710
all I have to do is to get hold of the element

591
00:00:43,980 --> 00:00:48,510
which is this article_count, and then call the .click method on it.

592
00:00:48,720 --> 00:00:51,750
It's as simple as that. And once I hit run,

593
00:00:51,780 --> 00:00:54,660
you'll see that my cursor is nowhere near the link,

594
00:00:55,020 --> 00:01:00,020
but it actually clicked through and it got to the statistics page from that

595
00:01:00,270 --> 00:01:03,660
link. So its basically the equivalent of me doing this,

596
00:01:03,780 --> 00:01:06,060
but it was done automatically.

597
00:01:07,140 --> 00:01:11,790
This was one way that we could have gotten hold of a link and then clicked on it.

598
00:01:12,330 --> 00:01:16,650
Now because this is such a common requirement to click on a link on a webpage,

599
00:01:16,980 --> 00:01:21,930
selenium actually has a specific find method that makes this really easy.

600
00:01:22,650 --> 00:01:23,490
For example,

601
00:01:23,490 --> 00:01:28,490
if we wanted to click on this link that says All Portals where it lists all the

602
00:01:28,680 --> 00:01:33,210
different Wikipedia portals, basically subsections of Wikipedia,

603
00:01:33,690 --> 00:01:38,160
well, one of the things that we could do is simply get hold of this link text

604
00:01:38,460 --> 00:01:40,080
which says All Portals

605
00:01:40,530 --> 00:01:45,530
and then we can create an object using our driver by tapping into find_element_

606
00:01:45,780 --> 00:01:50,280
by_link_text. And all we have to put in there is the link text,

607
00:01:50,610 --> 00:01:52,500
which said All Portals.

608
00:01:53,160 --> 00:01:56,370
So now I can say all_portals.click

609
00:01:56,610 --> 00:01:59,670
and if we go ahead and comment out this part,

610
00:02:00,210 --> 00:02:02,820
then you can see it's going to open up our webpage

611
00:02:02,880 --> 00:02:06,330
and it's going to click on that all portals taking us to this page.

612
00:02:06,870 --> 00:02:08,669
So this is a find method

613
00:02:08,669 --> 00:02:13,670
that's pretty specific to links where we just find it by the text that is in

614
00:02:15,210 --> 00:02:18,240
between the anchor tag. So for example,

615
00:02:18,240 --> 00:02:20,460
when I inspect on that all portals,

616
00:02:20,490 --> 00:02:25,080
you can see that this is the anchor tag and the link text is the part between

617
00:02:25,080 --> 00:02:29,490
the opening and closing tags. So it's now searching by that text,

618
00:02:29,700 --> 00:02:33,450
which is a common need that you might have when you're going onto a website.

619
00:02:34,440 --> 00:02:38,010
Now that we've seen how we can click on links once we've identified them,

620
00:02:38,310 --> 00:02:39,420
what about typing?

621
00:02:39,690 --> 00:02:44,690
Let's say we wanted to search for Python in this search bar.

622
00:02:46,470 --> 00:02:47,580
How might we do that?

623
00:02:47,940 --> 00:02:51,840
Well first let's go ahead and get hold of the search bar.

624
00:02:52,230 --> 00:02:57,230
So I'm going to inspect on that and it takes me to this input element and the

625
00:02:58,050 --> 00:03:02,740
thing that we can identify it by its name, which is equal to search.

626
00:03:02,970 --> 00:03:03,803
Yeah.

627
00:03:06,150 --> 00:03:08,550
So I can use our method which is find

628
00:03:08,560 --> 00:03:13,560
_element_by_name and then pass in search as the name of the element I want to get

629
00:03:14,010 --> 00:03:17,910
hold of. Now, once I've gotten a hold of that element,

630
00:03:18,090 --> 00:03:21,630
then I can use a method called send_keys

631
00:03:21,870 --> 00:03:26,550
and this is going to be the keys from the keyboard that you want to send to this

632
00:03:26,550 --> 00:03:30,830
particular element. So let's say I wanted you to type Python in there. Well,

633
00:03:30,830 --> 00:03:34,680
all I have to do is type send keys Python.

634
00:03:34,950 --> 00:03:36,600
And now when I hit run,

635
00:03:36,960 --> 00:03:41,430
you can see that it's going to automatically go over there and type in the word

636
00:03:41,430 --> 00:03:42,263
Python.

637
00:03:42,420 --> 00:03:47,100
My hands are completely off the keyboard and my cursor is nowhere near the

638
00:03:47,100 --> 00:03:49,920
search bar. So that was all done automatically.

639
00:03:50,790 --> 00:03:52,710
Now once we've typed in Python,

640
00:03:52,770 --> 00:03:57,150
the next thing we want to do is hit the return key, right? Or the enter key.

641
00:03:57,900 --> 00:03:59,280
Now, when we wanna send a key

642
00:03:59,280 --> 00:04:03,720
that's not a letter or one of the numbers or symbols,

643
00:04:04,110 --> 00:04:07,020
then we actually have to do a separate import.

644
00:04:08,610 --> 00:04:11,970
From the selenium package inside the webdriver folder,

645
00:04:12,330 --> 00:04:17,010
there's a folder called common. And inside there, there's something called keys.

646
00:04:17,610 --> 00:04:22,610
This keys contains a class called Keys and that contains a bunch of constants.

647
00:04:24,930 --> 00:04:28,140
What we can do is we can say search.send_keys

648
00:04:28,440 --> 00:04:31,920
and the key that we're going to send comes from this keys class.

649
00:04:32,370 --> 00:04:35,100
And it's one of the constants in there which is called ENTER.

650
00:04:35,520 --> 00:04:38,640
This is basically the return key,

651
00:04:38,700 --> 00:04:43,700
but you can see there's also other ones like shift or tab,

652
00:04:43,980 --> 00:04:48,210
basically any key that you have on the keyboard can be replicated by the keys

653
00:04:48,210 --> 00:04:50,010
class. Effectively

654
00:04:50,010 --> 00:04:55,010
what we're doing here is we're finding that search bar, typing in Python and then

655
00:04:55,110 --> 00:04:59,040
hitting the enter key. So let's run this and see it in action.

656
00:05:01,950 --> 00:05:04,620
And that takes us to the search results.

657
00:05:05,550 --> 00:05:09,690
So now we've seen how we can click on buttons

658
00:05:09,720 --> 00:05:14,720
once we've located something that is clickable like a button or an anchor tag,

659
00:05:15,570 --> 00:05:20,570
we've seen how we can type something into a field using send_keys,

660
00:05:22,290 --> 00:05:26,310
and finally we've seen how we can import this class of Keys

661
00:05:26,610 --> 00:05:31,440
which contains a whole bunch of constants that represents the key codes for a

662
00:05:31,440 --> 00:05:35,700
lot of the common keys, like enter, shift, control, et cetera.

663
00:05:36,840 --> 00:05:39,060
Now I have a challenge for you.

664
00:05:39,690 --> 00:05:44,690
I want you to try and see if you can figure out yourself how to use selenium to

665
00:05:45,570 --> 00:05:50,280
automatically insert your name, your last name and email address,

666
00:05:50,340 --> 00:05:54,750
and then hit the sign up button in order to fill out this form. Now,

667
00:05:54,810 --> 00:05:57,230
if you are successful, it should take you

668
00:06:00,550 --> 00:06:02,560
to this success page.

669
00:06:02,860 --> 00:06:06,400
Now don't worry if you actually type in your real email address or not.

670
00:06:06,430 --> 00:06:10,480
This is a webpage that we created as a part of the complete web development

671
00:06:10,480 --> 00:06:12,700
course. It's another course that I do,

672
00:06:13,060 --> 00:06:17,710
which goes into detail on web technologies like JavaScript, Node, React,

673
00:06:18,100 --> 00:06:20,920
and this is a site that we built in that course. Now,

674
00:06:20,920 --> 00:06:24,700
the reason why I'm taking you to this page is because I don't want you to go

675
00:06:24,700 --> 00:06:29,700
onto a random webpage like a real website where they're actually collecting

676
00:06:30,130 --> 00:06:31,120
valid data.

677
00:06:31,510 --> 00:06:35,260
If we're doing our practices and our exercises on a real website,

678
00:06:35,290 --> 00:06:38,830
we'll end up giving them a lot of bot traffic and it's not great for the

679
00:06:38,830 --> 00:06:42,880
website. This is why I'm getting you guys to use my own website

680
00:06:43,060 --> 00:06:44,950
which is set up for testing anyways.

681
00:06:45,430 --> 00:06:49,630
So the link to the page is in the course resources, or you could type it in

682
00:06:49,870 --> 00:06:52,570
as you can see here. Now, as I mentioned,

683
00:06:52,570 --> 00:06:57,370
this is not a sign up to our actual newsletter which lives on this page,

684
00:06:57,640 --> 00:07:02,640
where every month I personally write a letter to you updating you on what we've

685
00:07:03,730 --> 00:07:04,570
been up to,

686
00:07:04,570 --> 00:07:09,100
what I've been up to and some articles that I've come across on the internet

687
00:07:09,100 --> 00:07:13,240
that I found to be really interesting in terms of Programming, design, or 

688
00:07:13,240 --> 00:07:16,570
startup culture. If you actually want to sign up to the newsletter,

689
00:07:16,600 --> 00:07:19,570
then head over to this link and put your email address here.

690
00:07:19,990 --> 00:07:24,610
But in order to test your skills on selenium, we want you to head over

691
00:07:24,610 --> 00:07:29,110
to this link and see if you can fill out this form automatically using what

692
00:07:29,110 --> 00:07:32,740
you've learned and then get your selenium to click sign up.

693
00:07:33,250 --> 00:07:36,340
Pause the video now and see if you can complete this challenge.

694
00:07:39,760 --> 00:07:40,000
Right.

695
00:07:40,000 --> 00:07:45,000
The first thing we need to do is to copy the URL and then back over here,

696
00:07:45,700 --> 00:07:50,700
I'm going to comment out everything that I've got so far and I'm going to change

697
00:07:51,100 --> 00:07:55,660
my driver to go to this new URL. Now,

698
00:07:55,690 --> 00:07:57,520
once I've gotten to the new URL,

699
00:07:57,730 --> 00:08:01,870
I want to go ahead and try to find and identify each of these fields.

700
00:08:02,350 --> 00:08:07,350
So let's click on inspect and you can see that this first field has a name of f

701
00:08:08,380 --> 00:08:09,213
Name,

702
00:08:09,460 --> 00:08:14,460
the second one has a name of lName and the final one has a name of email.

703
00:08:15,280 --> 00:08:20,280
So let's identify those using our driver.find.

704
00:08:21,430 --> 00:08:26,350
And we're going to use the find_element_by_name passing in fName

705
00:08:26,860 --> 00:08:31,860
and then it was lNname for the last name and then it was email.

706
00:08:34,240 --> 00:08:38,500
So this is going to be our first name, last name and email.

707
00:08:41,200 --> 00:08:43,360
The next step is to actually you fill it in.

708
00:08:43,390 --> 00:08:47,250
So we're going to say first_name.send_keys, and then I'll pass 

709
00:08:47,250 --> 00:08:51,760
in my first name. And then it's going to be last_name.send_keys

710
00:08:51,790 --> 00:08:56,220
and then I'll pass in my last name. And finally,

711
00:08:56,220 --> 00:09:00,450
we've got our email and I'll just pass in a dummy email.

712
00:09:03,000 --> 00:09:08,000
So now I'm going to try and find this button by inspecting on it and seeing how

713
00:09:08,700 --> 00:09:11,010
I can identify it using my code.

714
00:09:11,610 --> 00:09:16,140
So it's a button with all of these classes and a type,

715
00:09:16,350 --> 00:09:21,350
but no ID or name. Given that this is the only button element inside this form,

716
00:09:22,890 --> 00:09:26,730
then I'm going to go ahead and identify it by using CSS selector.

717
00:09:30,950 --> 00:09:31,400
Right.

718
00:09:31,400 --> 00:09:35,090
So it's inside the form and it's a button element.

719
00:09:36,530 --> 00:09:40,040
And finally, once I found it, I'm simply gonna click on it.

720
00:09:40,700 --> 00:09:42,740
So our script is going to go in order.

721
00:09:42,800 --> 00:09:46,730
So it's first going to load up the page, type in all of these things and then

722
00:09:46,730 --> 00:09:50,330
finally click on it. So let's hit run and see if that worked.

723
00:09:52,970 --> 00:09:57,970
That was lightening fast because obviously it's not me typing and it clicked on

724
00:09:58,520 --> 00:10:03,230
the button and it took us to the success page. How did you get on with that?

725
00:10:04,040 --> 00:10:08,450
So now we've seen how to use selenium to find elements, to 

726
00:10:08,510 --> 00:10:11,780
interact with them by clicking and typing,

727
00:10:12,080 --> 00:10:17,080
and also we saw how we can import the keys constant to interact with the

728
00:10:17,270 --> 00:10:19,880
website with any key on our keyboard.

729
00:10:20,870 --> 00:10:23,150
So there's quite a few methods we've gone through.

730
00:10:23,240 --> 00:10:28,100
It might be worth taking some notes and having a quick review of how we've

731
00:10:28,100 --> 00:10:32,420
managed to do all of these things using selenium because in the next lesson

732
00:10:32,450 --> 00:10:37,070
we've got the final project coming up and it's going to be all up to you to try

733
00:10:37,070 --> 00:10:41,120
and solve it. So for all of that and more, I'll see you on the next lesson.


734
00:00:00,240 --> 00:00:04,800
It's now time for the final project where we put everything into practice.

735
00:00:05,160 --> 00:00:08,430
Now, before I reveal the next message, just a word of warning.

736
00:00:08,850 --> 00:00:12,930
It has explicit content. If you are hungry,

737
00:00:12,930 --> 00:00:16,590
if you haven't eaten, if you are intermittent fasting like me,

738
00:00:17,130 --> 00:00:19,950
it might be worth skipping over the next image.

739
00:00:24,470 --> 00:00:26,630
Let us describe what we're going to do

740
00:00:26,630 --> 00:00:30,020
in this project, we're going to be baking some cookies.

741
00:00:30,620 --> 00:00:33,170
We're going to be playing the cookie clicker game,

742
00:00:33,560 --> 00:00:36,560
but we're not going to do it normally like a normal person.

743
00:00:36,560 --> 00:00:40,130
We're not going to go and click on our cookies and tirelessly end up with

744
00:00:40,130 --> 00:00:44,960
repetitive strain injury and play the game as if we're a human. No,

745
00:00:44,990 --> 00:00:49,010
we're going to play it using a Python bot created with selenium.

746
00:00:49,610 --> 00:00:54,610
So recently I've been looking on Reddit and there's a lot of posts talking about

747
00:00:54,920 --> 00:00:59,180
how addictive this cookie clicker game is. Why is this game

748
00:00:59,180 --> 00:01:03,860
so addicting, cookie clicker ruined my life. And when you think about it,

749
00:01:03,860 --> 00:01:05,960
it's such a simple game.

750
00:01:06,680 --> 00:01:11,540
All it is is a big giant cookie, you click on it as fast as you can.

751
00:01:11,990 --> 00:01:15,020
And once you've gotten a number of cookies,

752
00:01:15,230 --> 00:01:18,950
then you can buy certain upgrades like a cursor,

753
00:01:19,010 --> 00:01:22,940
which will click on the cookie automatically for you.

754
00:01:23,390 --> 00:01:27,560
And if you get even more cookies, you can end up buying other things.

755
00:01:27,800 --> 00:01:29,990
For example, once you have a hundred cookies,

756
00:01:32,660 --> 00:01:36,860
you can by a grandma which will bake more cookies for you.

757
00:01:37,760 --> 00:01:42,760
But we're not going to do it manually because I can physically not click at this

758
00:01:43,370 --> 00:01:47,210
rate. We're going to get our bot to decide which add-ons to

759
00:01:47,210 --> 00:01:51,860
buy that makes sense, and to buy as many of these add ons as we have money,

760
00:01:52,280 --> 00:01:55,760
and we're going to get all bots to continuously click the cookie to bake even

761
00:01:55,760 --> 00:01:56,593
more cookies.

762
00:01:57,110 --> 00:02:01,760
So the goal is we're trying to max out on this cookies per second rating,

763
00:02:01,820 --> 00:02:05,030
because the more of these add ons that you buy,

764
00:02:05,030 --> 00:02:07,280
the more often that you click on the cookie,

765
00:02:07,640 --> 00:02:10,729
the more cookies per seconds you can bake.

766
00:02:11,810 --> 00:02:16,810
So basically what we want to do is to not even touch our mouse and use selenium

767
00:02:18,440 --> 00:02:20,180
to play this game for us.

768
00:02:20,360 --> 00:02:24,230
And we're going to try and get some high scores by cheating basically.

769
00:02:25,160 --> 00:02:29,990
So the goal is to max out the cookies per second,

770
00:02:30,410 --> 00:02:35,410
and we're going to be playing this game by clicking on this cookie automatically

771
00:02:35,690 --> 00:02:36,680
using selenium.

772
00:02:37,100 --> 00:02:41,330
And once we've clicked for five seconds,

773
00:02:41,360 --> 00:02:45,620
we're going to see what is the highest value add on we can by,

774
00:02:45,950 --> 00:02:49,220
and then we'll buy it to help us with the game.

775
00:02:49,730 --> 00:02:54,110
So the goal at the end of the day is we're going to run the program for five

776
00:02:54,110 --> 00:02:56,240
minutes. And at the end of the five minutes,

777
00:02:56,510 --> 00:02:59,180
we're going to check our cookies per second.

778
00:02:59,800 --> 00:03:04,090
And we're going to compete with each other on that number because of course you

779
00:03:04,090 --> 00:03:08,770
can get selenium to play the game in different ways. So what I recommend first

780
00:03:08,770 --> 00:03:13,450
before you get started with the project is just to head over to this link

781
00:03:13,480 --> 00:03:15,070
which is in the course resources,

782
00:03:15,310 --> 00:03:20,310
and actually play the game first as a human so that you can understand how it

783
00:03:20,350 --> 00:03:25,350
works and see how these add ons really help us improve our rate of baking

784
00:03:25,930 --> 00:03:29,950
cookies. Pause the video now, head over to this link,

785
00:03:30,130 --> 00:03:34,090
play the game for maybe five minutes and then head over to the next lesson where

786
00:03:34,090 --> 00:03:37,720
there's the full instructions for how to complete this challenge.


