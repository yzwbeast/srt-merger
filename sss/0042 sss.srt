1
00:00:00,290 --> 00:00:07,370
Now that we've seen how HTML elements and tags work, it's time to explore the bigger picture, what's

2
00:00:07,370 --> 00:00:09,430
called the HTML boilerplate.

3
00:00:09,440 --> 00:00:16,880
And this will allow us to understand the structure of our HTML files, just like how there is structure

4
00:00:16,880 --> 00:00:19,380
to letters that you would write.

5
00:00:19,400 --> 00:00:26,030
For example, there's the section where you have your address and then you probably would include a

6
00:00:26,060 --> 00:00:32,810
dear so and so, and then you have the body of your letter and finally you would write something like

7
00:00:32,840 --> 00:00:36,660
your sincerely and then your name and signature.

8
00:00:36,680 --> 00:00:43,760
Similarly, there is a structure to our HTML files and it looks something like this.

9
00:00:43,760 --> 00:00:45,500
And this is called a boilerplate.

10
00:00:45,530 --> 00:00:50,510
It's what you usually start off with when you create any new HTML file.

11
00:00:50,660 --> 00:00:54,050
And we're going to go through it line by line so that we understand it.

12
00:00:54,080 --> 00:00:59,300
At the top of every HTML file, there should be a doctype declaration.

13
00:00:59,300 --> 00:01:01,530
And that's what this tag does.

14
00:01:01,560 --> 00:01:06,610
It tells the browser which version of the file was written in.

15
00:01:06,630 --> 00:01:15,570
Now the latest version of HTML is HTML5 and the Doctype declaration looks like this with an angle bracket,

16
00:01:15,570 --> 00:01:20,310
an exclamation mark, doctype in all caps and then HTML.

17
00:01:20,310 --> 00:01:26,850
And this line tells any browser that's reading our HTML file that we have written our code in HTML version

18
00:01:26,850 --> 00:01:27,480
five.

19
00:01:27,510 --> 00:01:31,120
The next part that we've got is the actual HTML.

20
00:01:31,140 --> 00:01:34,440
Now, this is going to be the root of the document.

21
00:01:34,470 --> 00:01:41,310
It means that everything else, every other element, no matter if it's an H1 or an image or a link,

22
00:01:41,310 --> 00:01:52,440
it's all going to go inside the opening and closing tags of the HTML element and this attribute where

23
00:01:52,440 --> 00:01:58,380
it says Lang This is the language of the text content in that element.

24
00:01:58,380 --> 00:02:05,160
So for example, if you're writing a website that is going to be targeted at English speakers, then

25
00:02:05,160 --> 00:02:07,920
you're going to set your lang to English.

26
00:02:07,950 --> 00:02:08,550
N.

27
00:02:08,580 --> 00:02:13,380
Now this isn't very important for the users who can see your website.

28
00:02:13,410 --> 00:02:20,370
It's more important for the users who can't because there are various screen readers and assistive technologies

29
00:02:20,370 --> 00:02:25,770
that will look at this language attribute so that when they read out the website, they can pronounce

30
00:02:25,770 --> 00:02:27,000
the words correctly.

31
00:02:27,150 --> 00:02:30,220
Opens profile photo follow at you.

32
00:02:30,270 --> 00:02:31,590
Angela Button.

33
00:02:31,920 --> 00:02:36,870
Now, with the HTML element, we're starting to see the beginnings of a hamburger.

34
00:02:36,900 --> 00:02:39,810
There's a bun at the top and there's a bun at the bottom.

35
00:02:39,870 --> 00:02:45,180
For those of you guys who have been my long term friends, you know how much I love food analogies,

36
00:02:45,180 --> 00:02:51,570
but this is a great one because when we have an HTML element, usually there is the opening and the

37
00:02:51,570 --> 00:02:55,920
closing and everything that belongs in it is sandwiched inside.

38
00:02:55,950 --> 00:03:00,600
Now the next part of the HTML boilerplate is the head element.

39
00:03:00,600 --> 00:03:07,590
And this is an area where important information about our website is placed that is not going to be

40
00:03:07,590 --> 00:03:09,450
displayed to the user.

41
00:03:09,480 --> 00:03:15,450
It includes things that will help the website render in the browser correctly, but it doesn't include

42
00:03:15,450 --> 00:03:19,940
any sort of content like text or images or anything that the user will see.

43
00:03:19,950 --> 00:03:27,180
So one of the things that you should always have in the head section is a meta tag for the character

44
00:03:27,180 --> 00:03:32,280
set encoding of the web page, and in this case it's set as UTF eight.

45
00:03:32,310 --> 00:03:40,110
What this does is it ensures that the characters that you're using on your website gets displayed correctly.

46
00:03:40,110 --> 00:03:46,410
So, for example, in certain character sets, it won't allow emojis to render in other character sets.

47
00:03:46,410 --> 00:03:50,580
They won't have certain symbols like multiplication and division symbols.

48
00:03:50,580 --> 00:03:54,210
And that's what this meta tag takes care of.

49
00:03:54,240 --> 00:04:01,740
Usually by convention in our HTML boilerplate, we will simply just include this tag as is using the

50
00:04:01,770 --> 00:04:05,310
UTF eight character set, which is one of the most common.

51
00:04:05,310 --> 00:04:07,260
So you don't even have to think about it.

52
00:04:07,290 --> 00:04:14,340
Now another thing that you should have in your head section is the title of your website, and that

53
00:04:14,340 --> 00:04:20,519
title is usually what gets displayed up here in the Tab Bar.

54
00:04:20,519 --> 00:04:28,380
And in fact, if you right click on any website in Chrome, you can click to view page source and you

55
00:04:28,380 --> 00:04:35,580
can see we've got our Doctype, we've got our HTML element inside it, we've got our head, our character

56
00:04:35,580 --> 00:04:36,120
set.

57
00:04:36,120 --> 00:04:42,240
And then if we scroll a little bit more, you can see we've got our title here.

58
00:04:42,240 --> 00:04:48,840
And in between the opening and closing tags of the title, it tells you what title should be displayed

59
00:04:48,840 --> 00:04:49,710
up here.

60
00:04:50,070 --> 00:04:54,150
So in our case here, the title was simply say my website.

61
00:04:54,360 --> 00:04:59,880
Now there's a lot more things that can go into the head element, as you've seen when we looked at.

62
00:04:59,960 --> 00:05:01,520
The Google Home page.

63
00:05:01,850 --> 00:05:09,050
But for now, these two are the most important things that will always go into your files.

64
00:05:09,050 --> 00:05:10,700
And it's important to know.

65
00:05:10,730 --> 00:05:13,490
We'll cover other tags as we come across them.

66
00:05:13,520 --> 00:05:19,520
Now, the next sandwich inside the sandwich, if you will, are two slices of tomatoes.

67
00:05:19,850 --> 00:05:20,990
No, just kidding.

68
00:05:20,990 --> 00:05:23,000
It's actually the body element.

69
00:05:23,030 --> 00:05:24,140
Just like a person.

70
00:05:24,140 --> 00:05:26,600
After the head element comes the body element.

71
00:05:26,720 --> 00:05:33,920
Inside the body element is where we're going to be spending the majority of our time creating and writing

72
00:05:33,920 --> 00:05:35,030
our website.

73
00:05:35,060 --> 00:05:38,530
This is where all of the content of the website goes.

74
00:05:38,540 --> 00:05:45,090
So the text, the titles, the images, the links, everything that you can do with HTML.

75
00:05:45,110 --> 00:05:53,180
Creating content and structure goes in between the opening and the closing tags of the body element.

76
00:05:53,180 --> 00:05:56,510
So somewhere inside here.

77
00:05:57,020 --> 00:05:58,580
Now what can go in here?

78
00:05:58,580 --> 00:06:06,660
Well, we've seen already how an H1 works so we can put in a heading, we can add images, we can add

79
00:06:06,660 --> 00:06:07,380
lots of things.

80
00:06:07,380 --> 00:06:13,680
And this is essentially where the meat of our website is going to live.

81
00:06:14,280 --> 00:06:21,300
Once our burger collapses down, you can see that this is what a typical website's HTML code is made

82
00:06:21,300 --> 00:06:21,990
up of.

83
00:06:22,080 --> 00:06:26,490
So no matter what you add into your body, you can vary it up.

84
00:06:26,490 --> 00:06:32,430
But by default, most websites will start off with a boilerplate that looks like this.

85
00:06:32,610 --> 00:06:39,450
When you're starting out, I often recommend students to type this out when they're creating new websites

86
00:06:39,450 --> 00:06:47,640
and in fact you can have a go doing this now by going into VS code, typing out these elements and creating

87
00:06:47,640 --> 00:06:50,400
your website entirely from scratch.

88
00:06:50,430 --> 00:06:57,900
Now we're beginning to see this idea of nesting in an HTML document, and this is going to be a concept

89
00:06:57,900 --> 00:07:02,970
that's going to become super important as we learn more and more programming.

90
00:07:02,970 --> 00:07:08,850
But it's simple to understand if we come back to this analogy of the hamburger.

91
00:07:09,000 --> 00:07:18,150
So we have our HTML element which has the opening and closing tags here, and it is exactly like our

92
00:07:18,150 --> 00:07:19,410
hamburger bun.

93
00:07:19,410 --> 00:07:26,220
So this is our top bun and this is our bottom bun and sandwich.

94
00:07:26,220 --> 00:07:30,510
In between is everything that goes inside the HTML element.

95
00:07:30,810 --> 00:07:38,040
Now, if we take a look at our body element, then you can see here we've got the opening body tag,

96
00:07:38,040 --> 00:07:43,500
which will represent with a slice of tomato and the closing body tag.

97
00:07:43,500 --> 00:07:48,570
And in between those two slices of tomato is the content for our website.

98
00:07:48,600 --> 00:07:55,890
Now you'll notice that some of the HTML tags, even though they have an opening and closing tag, they're

99
00:07:55,890 --> 00:07:58,380
not on different lines.

100
00:07:58,380 --> 00:08:04,380
And that's because if we can fit it on one line and we can see the beginning and the end very easily,

101
00:08:04,380 --> 00:08:07,230
then we don't actually need to create several lines.

102
00:08:07,230 --> 00:08:11,040
But nonetheless, it still got a beginning and an end.

103
00:08:11,070 --> 00:08:17,280
Now the important thing for us when we're writing code and we've got all of this sandwiching going on

104
00:08:17,280 --> 00:08:25,680
that we indent our code properly so that you can see that this clearly lines up with the opening tag

105
00:08:25,680 --> 00:08:26,040
here.

106
00:08:26,040 --> 00:08:29,640
So they are clearly sandwiching something in between.

107
00:08:29,640 --> 00:08:34,650
And then we have two spaces and we've got the next indentation level here.

108
00:08:34,650 --> 00:08:43,320
So this one lines up with the closing tag and through this kind of indentation you can quite easily

109
00:08:43,320 --> 00:08:52,610
visualize that this head section is clearly embedded inside the HTML section.

110
00:08:52,620 --> 00:09:00,840
So just like our lettuce is inside our hamburger, by indenting our code properly, we'll be able to

111
00:09:00,840 --> 00:09:07,180
keep our code tidy and we'll be able to see at a glance exactly what our code looks like.

112
00:09:07,200 --> 00:09:12,510
Now, finally, because we're using vs code, I want to tell you about a shortcut.

113
00:09:12,510 --> 00:09:16,580
That means you don't have to type out this boilerplate every single time.

114
00:09:16,620 --> 00:09:22,800
Once you've typed it out once or twice and you know exactly how this boilerplate looks, you can save

115
00:09:22,800 --> 00:09:26,760
a lot of time by simply typing exclamation mark.

116
00:09:26,790 --> 00:09:33,810
Hitting Enter on the first selection and then it will automatically insert all of that code for you,

117
00:09:33,840 --> 00:09:39,060
saving you a lot of time, especially when you're creating many documents.

118
00:09:39,270 --> 00:09:47,580
Now, the important thing here, though, is this only works if you have created a dot HTML website.

119
00:09:47,850 --> 00:09:55,880
So notice that when you create a new file inside vs code, if you name it and save it as something something

120
00:09:55,890 --> 00:09:59,460
dot html, then this trick will work.

121
00:09:59,550 --> 00:10:03,450
If you save it with another extension, then it won't.

122
00:10:03,960 --> 00:10:07,050
There's a couple of things here that we haven't seen before.

123
00:10:07,080 --> 00:10:11,040
Couple more meta tags and there's a lot of other meta tags.

124
00:10:11,040 --> 00:10:19,140
But here we've got one line here which says HTTP equivalent compatible content, i.e. edge.

125
00:10:19,170 --> 00:10:24,690
This basically just keeps our code compatible with Internet Explorer.

126
00:10:24,690 --> 00:10:30,150
And in fact, I normally don't write this line anymore because Internet Explorer has been deprecated

127
00:10:30,150 --> 00:10:32,270
and is no longer in use.

128
00:10:32,280 --> 00:10:38,430
So if you want to keep your code clean, you can actually delete this from your code or to generated

129
00:10:38,430 --> 00:10:39,210
boilerplate.

130
00:10:39,780 --> 00:10:48,420
Now the next one tells you the viewport and it defines how the website should be displayed relative

131
00:10:48,450 --> 00:10:51,840
to the screen that it's being rendered on.

132
00:10:51,930 --> 00:10:57,990
And this line of code just tells the browser how to display your website when it first opens.

133
00:10:58,260 --> 00:11:04,530
So now that we've learned all about HTML boilerplates, it's time to build your own boilerplate, or

134
00:11:04,530 --> 00:11:06,570
in this case, build your own burger.

135
00:11:07,080 --> 00:11:13,650
As you notice, there are endless numbers of HTML elements and we're going to be creating our own HTML

136
00:11:13,650 --> 00:11:14,400
elements.

137
00:11:14,400 --> 00:11:22,050
But the important thing here I want you to understand is how nesting works in HTML and how you can keep

138
00:11:22,050 --> 00:11:27,510
your code tidy by using good indentation and keeping good programming practices.

139
00:11:27,690 --> 00:11:33,450
If we're building our own imaginary burger, let's imagine the world's best burger.

140
00:11:33,450 --> 00:11:38,820
You can have it vegan, you can have it vegetarian, you can have bacon, you can have whatever it is

141
00:11:38,820 --> 00:11:43,950
your heart desires, but you have to write it in code.

142
00:11:44,400 --> 00:11:47,160
Let's begin by creating a bun.

143
00:11:47,250 --> 00:11:56,010
So I've got a bun element that I've created which has an opening and a closing tag, and I've added

144
00:11:56,010 --> 00:11:56,790
an attribute.

145
00:11:56,790 --> 00:11:59,490
You can add as many of these attributes as you like.

146
00:11:59,490 --> 00:12:06,780
And remember, we add attributes by giving it a name, and then after an equal sign, we give it a value.

147
00:12:06,930 --> 00:12:10,260
Now the next part is for you to invent.

148
00:12:10,260 --> 00:12:16,020
So head over to VS code and build your own burger, adding in whatever elements you want.

149
00:12:16,050 --> 00:12:24,780
Add tomatoes, add ham, but make sure that you're keeping the indentation correct and that you're working

150
00:12:24,780 --> 00:12:29,220
with this idea of opening and closing tags.

151
00:12:29,310 --> 00:12:36,660
But you can be as creative as you like, and be sure to share your code for your burger in the Q&A section.

152
00:12:36,660 --> 00:12:38,700
And if you want some inspiration.

153
00:12:38,700 --> 00:12:47,130
This is one that I made earlier, but I want you to practice making your own and doing it your way.

154
00:12:47,160 --> 00:12:51,960
Have a go at that and once you're done, head over to the next lesson.


155
00:00:00,320 --> 00:00:01,250
Hey guys.

156
00:00:01,250 --> 00:00:06,320
In the previous lesson, you've learned a lot about different types of HTML elements and you already

157
00:00:06,320 --> 00:00:08,960
got started using them to create websites.

158
00:00:08,990 --> 00:00:13,670
Now in this section we're going to take it a little bit further and explore some more intermediate and

159
00:00:13,670 --> 00:00:15,770
advanced concepts in HTML.

160
00:00:15,890 --> 00:00:21,320
We're going to get started in this lesson by learning about list elements, the ordered and unordered

161
00:00:21,320 --> 00:00:22,070
lists.

162
00:00:22,430 --> 00:00:27,170
Now, if you've spent any time around on the Internet recently, you'll notice that it's completely

163
00:00:27,170 --> 00:00:28,520
full of lists.

164
00:00:28,520 --> 00:00:36,020
If you go on to BuzzFeed or any of these sort of clickbaity articles, usually they'll create a list

165
00:00:36,020 --> 00:00:41,300
of something such as great items that must have been invented by geniuses.

166
00:00:41,300 --> 00:00:47,660
But also if you look at something like the FBI's ten Most Wanted Fugitives, this is also created in

167
00:00:47,660 --> 00:00:49,700
this website using a list.

168
00:00:49,700 --> 00:00:52,690
So how do we create these lists ourselves?

169
00:00:52,700 --> 00:00:57,080
Well, let's start off with one of the most common types, the unordered list.

170
00:00:57,080 --> 00:01:04,260
And it's super simple to create simply, you have a starting tag with UL and then have a closing tag.

171
00:01:04,260 --> 00:01:11,880
Now, normally we've had one line elements such as this where we get to add some content in between

172
00:01:11,880 --> 00:01:13,730
the open and closing tags.

173
00:01:13,740 --> 00:01:16,920
Now in this case, however, it's a little bit different.

174
00:01:16,950 --> 00:01:23,940
They actually go on separate lines because in between these two open and closing tags, we need an extra

175
00:01:23,940 --> 00:01:27,600
type of tag in order to complete this unordered list.

176
00:01:27,600 --> 00:01:30,570
And these are called list items.

177
00:01:30,570 --> 00:01:38,730
So here you can see we've got three list items and each of them contain some piece of content.

178
00:01:38,820 --> 00:01:44,270
But all three items are enclosed inside this unordered list.

179
00:01:44,280 --> 00:01:50,850
So for any list to work and display content, then you're going to have to add list items into it.

180
00:01:51,000 --> 00:01:54,150
So what does this look like if we actually run the code?

181
00:01:54,150 --> 00:01:55,770
Well, this is what you would see.

182
00:01:55,800 --> 00:02:03,420
Essentially unordered list items will create these bullet points because such as in the case of a shopping

183
00:02:03,420 --> 00:02:08,190
list here, the order of the items doesn't matter.

184
00:02:08,190 --> 00:02:11,970
So that's why an unordered list would be perfect for this situation.

185
00:02:12,390 --> 00:02:19,200
However, on the other hand, if you needed your list items to be arranged in a particular order, then

186
00:02:19,200 --> 00:02:21,060
you would create an ordered list.

187
00:02:21,210 --> 00:02:27,570
And once you've added the list items inside there, what this will do is it will give you numbers.

188
00:02:27,570 --> 00:02:35,700
So it would start from one and the number next to each list item will depend on the order that you put

189
00:02:35,700 --> 00:02:39,420
into this ordered list element.

190
00:02:39,420 --> 00:02:44,960
If this milk was down here, then it would get the number three and so on and so forth.

191
00:02:44,970 --> 00:02:46,530
That's all pretty simple.

192
00:02:46,530 --> 00:02:54,990
So if we compare the ordered list, the ol element that gives us numbers and versus the UL, the unordered

193
00:02:54,990 --> 00:02:58,830
list item, which just gives us bullet points, simple as that.

194
00:02:58,830 --> 00:03:05,310
And coming back to our FBI ten Most Wanted Fugitives website, you can see they actually created this

195
00:03:05,310 --> 00:03:07,230
website using lists.

196
00:03:07,230 --> 00:03:14,160
So when you right click on any of these images and select inspect, you can see that each of these photos

197
00:03:14,160 --> 00:03:19,170
are actually a list item placed inside an unordered list.

198
00:03:19,200 --> 00:03:23,910
Now there's a whole bunch more to this website which we're going to learn in future lessons.

199
00:03:23,910 --> 00:03:30,060
But the really important thing is for you to see that this is a really important part that you see in

200
00:03:30,060 --> 00:03:32,100
websites all over on the Internet.

201
00:03:32,100 --> 00:03:35,280
So it's really important that we understand how to use them.

202
00:03:35,520 --> 00:03:41,490
So now that we've learned a little bit about ordered and unordered lists, let's try an exercise to

203
00:03:41,490 --> 00:03:43,680
make sure that you've understood everything.

204
00:03:43,800 --> 00:03:50,400
Go ahead and download the list element zip file from this current lesson.

205
00:03:50,400 --> 00:03:57,000
And as always, if you forget how to do that, or if you just started on this lesson, then I recommend

206
00:03:57,000 --> 00:04:01,860
going to one of the earlier lessons where I show you how to download course resources.

207
00:04:01,860 --> 00:04:10,830
Now, once you've downloaded and extracted the folder 3.0 list elements and dragged it into VS code

208
00:04:10,830 --> 00:04:16,860
or your web development projects folder, then you should be able to see it here on the file Explorer

209
00:04:16,860 --> 00:04:17,790
on the left.

210
00:04:17,820 --> 00:04:24,420
If we explore some of the files for this current coding exercise, you can see we've got an index.html

211
00:04:24,450 --> 00:04:29,280
that contains some plain text which you're going to be formatting into lists.

212
00:04:29,280 --> 00:04:36,330
And if we take a look at the goal, feel free to choose whichever heading sizes you want.

213
00:04:36,330 --> 00:04:43,830
But for me, I think it made the most sense to have one H1 and then the ingredients and the instructions

214
00:04:43,830 --> 00:04:50,850
as h2's and then any other headings like this part and this part as h3's.

215
00:04:50,850 --> 00:04:56,730
But the most important thing I care about in this exercise is you manage to create these lists.

216
00:04:56,730 --> 00:04:59,690
So we've got an unordered list for.

217
00:05:00,110 --> 00:05:03,110
Section one of the ingredients to create the dough.

218
00:05:03,110 --> 00:05:07,460
And then we've got another unordered list for the filling ingredients.

219
00:05:07,460 --> 00:05:13,550
And finally, we've got all the rest of the instructions as a ordered list.

220
00:05:13,580 --> 00:05:18,710
Think about how you're going to create this and don't worry about typing all the text out because if

221
00:05:18,710 --> 00:05:23,510
you look inside the index.html, you'll see all the text typed out for you already.

222
00:05:23,510 --> 00:05:30,830
All you need to do is to add the HTML tags and to format the document into an HTML website.

223
00:05:30,830 --> 00:05:37,640
And in the end we should end up with this recipe website for creating delicious cinnamon rolls.

224
00:05:37,850 --> 00:05:44,120
Now, if you watched my recent Instagram takeover of the Udemy account, you'll see me making the same

225
00:05:44,120 --> 00:05:45,110
cinnamon rolls.

226
00:05:45,110 --> 00:05:48,920
And if you want to do the same, then this is the recipe for you.

227
00:05:49,100 --> 00:05:54,200
This is what you're aiming for and using what you've learnt about list elements.

228
00:05:54,200 --> 00:05:58,550
I want you to go ahead and pause the video and complete this challenge.

229
00:06:02,620 --> 00:06:03,040
All right.

230
00:06:03,040 --> 00:06:04,510
So did you manage to do that?

231
00:06:04,510 --> 00:06:06,970
Let's go ahead and walk through the solution together.

232
00:06:06,970 --> 00:06:12,610
So I'm going to show you the preview on the right side so you can see the website update as I type.

233
00:06:12,610 --> 00:06:15,670
First, we're going to start off with our heading tags.

234
00:06:15,670 --> 00:06:18,850
So I'm just going to add a bunch of headings in quite quickly.

235
00:06:24,090 --> 00:06:26,800
All right, so that's all the headings out of the way.

236
00:06:26,820 --> 00:06:31,320
So now we're on to the proper work, which is creating our lists.

237
00:06:31,350 --> 00:06:36,810
As I said, the ingredients don't really need an order, so we're going to create an unordered list.

238
00:06:36,840 --> 00:06:43,740
So in between our start and end UL tags, we're going to have each of these as a list item.

239
00:06:43,740 --> 00:06:46,980
So I'm going to create the list item tag.

240
00:06:46,980 --> 00:06:55,650
And once I've created that, then all I need to do is to drag my first list item in between the list

241
00:06:55,650 --> 00:06:56,360
item.

242
00:06:56,370 --> 00:07:01,440
Now, if clicking and dragging doesn't work for you, if this doesn't show up, then you can also just

243
00:07:01,440 --> 00:07:05,190
right click, copy and paste that also works.

244
00:07:05,310 --> 00:07:12,580
Now I need to do this many times, so for efficiency's sake, I'm just going to paste in another 4 or

245
00:07:12,580 --> 00:07:20,100
5 of these and drag in all of the other ingredients into each of these list items.

246
00:07:21,360 --> 00:07:26,340
Now, when you're actually coding this from scratch, you won't need to do all of this dragging because

247
00:07:26,340 --> 00:07:33,020
you'll be typing your list item and then you'll be writing your item name in here like so.

248
00:07:33,030 --> 00:07:38,790
But because we've written all the text for you, hopefully to save you some time so that you're actually

249
00:07:38,790 --> 00:07:44,040
doing more coding and less sort of busy work, then this is how we do it.

250
00:07:44,490 --> 00:07:45,780
Again for the filling.

251
00:07:45,780 --> 00:07:51,900
We've got another unordered list and then inside there are three list items.

252
00:07:51,900 --> 00:07:59,820
So let me go ahead and paste those three list items in and drag each of them in between the tags like

253
00:07:59,820 --> 00:08:00,450
so.

254
00:08:00,960 --> 00:08:08,040
So now we've got our ingredients and we've got our two unordered lists showing up perfectly.

255
00:08:08,040 --> 00:08:13,530
Now all we have to do is to create the final list, which is going to be an ordered list, because if

256
00:08:13,530 --> 00:08:16,200
you think about it, instructions have an order, right?

257
00:08:16,200 --> 00:08:20,370
You can't first bake the thing if you haven't created it yet.

258
00:08:20,400 --> 00:08:28,390
Inside this order list, we again need these list item elements and we need to create as many of them

259
00:08:28,390 --> 00:08:31,270
as we have steps.

260
00:08:31,270 --> 00:08:36,370
So I'm going to drag each of the lines into the list elements.

261
00:08:41,130 --> 00:08:42,600
And there we have it.

262
00:08:42,630 --> 00:08:50,150
We've got all of our list items and all of our instructions showing up perfectly inside an ordered list.

263
00:08:50,160 --> 00:08:55,530
And if we check against the goal, then you can see we've pretty much completed everything perfectly.

264
00:08:56,520 --> 00:09:05,850
Now, one thing to talk about at this point is notice how some HTML elements are one line and other

265
00:09:06,000 --> 00:09:08,520
HTML elements are on multiple lines.

266
00:09:08,640 --> 00:09:17,010
When you paste long lines of text in between the start and end tags of an element, sometimes vs code

267
00:09:17,010 --> 00:09:20,970
will automatically put the closing tag onto the next line.

268
00:09:21,000 --> 00:09:28,590
Now you can edit this so that it all goes onto the same line, or you can purposely make sure they're

269
00:09:28,590 --> 00:09:33,360
on different lines and you see it being sandwiched between the open and closing tags.

270
00:09:33,780 --> 00:09:39,450
Now this is a personal preference, so it really doesn't matter how you want to do this so you can do

271
00:09:39,450 --> 00:09:40,810
this however you like.

272
00:09:40,810 --> 00:09:45,310
But for me, I like to have list items all on the same line.

273
00:09:45,340 --> 00:09:53,470
This just kind of helps me see visually how many list items I have, and it doesn't clutter up the list

274
00:09:53,500 --> 00:09:55,600
with all of these list items.

275
00:09:55,600 --> 00:10:02,080
So have a think about whether, if you like to see your elements like this all on one line with the

276
00:10:02,080 --> 00:10:10,510
content enclosed or if you prefer to have it like this where things are more indented and you have the

277
00:10:10,510 --> 00:10:14,880
content in between two lines of your list item.

278
00:10:14,890 --> 00:10:20,320
In the next lesson, we're going to talk a little bit more about this type of indentation.

279
00:10:20,320 --> 00:10:22,840
So don't worry if that doesn't make sense just yet.

280
00:10:22,870 --> 00:10:27,910
We're going to talk about nesting and we're going to talk about indentation of HTML elements.

281
00:10:27,910 --> 00:10:31,690
So once you're ready, head over to the next lesson and we'll continue from there.


282
00:00:00,140 --> 00:00:04,910
Now, in the previous lesson, we learned a little bit about ordered and unordered lists.

283
00:00:04,939 --> 00:00:08,510
Now in this lesson, we're going to take that concept a little bit further.

284
00:00:08,550 --> 00:00:12,180
I want to show you how you can nest things inside others.

285
00:00:12,200 --> 00:00:21,020
For example, we saw that we could already nest the list elements inside an unordered list and you would

286
00:00:21,020 --> 00:00:23,110
see it indented like this.

287
00:00:23,120 --> 00:00:29,810
But we can actually go a step further and we can actually nest a list inside another list.

288
00:00:29,840 --> 00:00:37,520
So in this case, what you see is we've got the first unordered list that starts here, and this is

289
00:00:37,520 --> 00:00:39,260
where it ends.

290
00:00:39,470 --> 00:00:42,890
But we've also got another unordered list here.

291
00:00:42,890 --> 00:00:48,050
And this is where the second one begins and where it ends.

292
00:00:48,140 --> 00:00:51,950
When this is rendered in a website, this is what you'll see.

293
00:00:51,980 --> 00:00:55,010
You'll see it's looking like this.

294
00:00:55,010 --> 00:00:59,970
So you've got the first list that is this entire part.

295
00:00:59,970 --> 00:01:04,830
And then inside the first list, we've got a separate list.

296
00:01:04,950 --> 00:01:07,530
Under this particular bullet point.

297
00:01:07,950 --> 00:01:10,190
Now, how does the code look?

298
00:01:10,200 --> 00:01:12,380
Well, it looks quite simple.

299
00:01:12,390 --> 00:01:17,010
All you have to do is inside a list item.

300
00:01:17,010 --> 00:01:20,520
You see how the starting list item is right here.

301
00:01:20,520 --> 00:01:27,450
And the end list item is down here inside this list item.

302
00:01:27,450 --> 00:01:34,620
Instead of simply just having a single line of text such as what we've got up here, instead, we've

303
00:01:34,620 --> 00:01:38,080
actually embedded an entire unordered list.

304
00:01:38,100 --> 00:01:46,290
So first we'll write the text for the list item, and then after the text we embed our unordered list,

305
00:01:46,290 --> 00:01:49,890
just as you would see in any other normal list.

306
00:01:50,820 --> 00:01:55,770
And then we end up with what's called a nested list.

307
00:01:56,410 --> 00:02:04,690
This is the part where indentation your code becomes super important because imagine the code looked

308
00:02:04,690 --> 00:02:07,990
like this and not like this.

309
00:02:08,020 --> 00:02:16,360
When you look at this code at a glance, it's a lot harder to see that you've got a list embedded inside.

310
00:02:16,360 --> 00:02:17,410
Another list.

311
00:02:17,410 --> 00:02:17,980
Right.

312
00:02:18,070 --> 00:02:24,490
Because you have to actually read what each of these tags are instead of using the clues that's offered

313
00:02:24,490 --> 00:02:26,560
by that indentation.

314
00:02:27,100 --> 00:02:34,260
And as you can imagine, we can have even crazier nested lists like what I've got right here.

315
00:02:34,270 --> 00:02:37,480
So there's actually three lists here.

316
00:02:37,510 --> 00:02:39,550
One is up here.

317
00:02:39,580 --> 00:02:41,860
This is the first list.

318
00:02:41,950 --> 00:02:44,530
This is a unordered list.

319
00:02:44,680 --> 00:02:51,400
And then we've got a second list right here, which is again, an unordered list.

320
00:02:51,400 --> 00:02:56,000
And that's embedded under the list item for be.

321
00:02:56,300 --> 00:03:05,270
And then to complicate things, I've added a third ordered list that's listed under this second item

322
00:03:05,270 --> 00:03:06,410
right here.

323
00:03:06,650 --> 00:03:12,800
This amount of craziness starts to really highlight the issues that you're going to have reading this

324
00:03:12,800 --> 00:03:13,340
code.

325
00:03:13,370 --> 00:03:18,410
Imagine somebody else gave you this code and you had to figure out without looking at the right hand

326
00:03:18,440 --> 00:03:21,500
side, what is going on right here.

327
00:03:21,680 --> 00:03:30,860
It's a lot easier if we have it indented, right, Because we can clearly see one unordered list, the

328
00:03:30,860 --> 00:03:39,770
second unordered list and the third ordered list because they're all nicely indented and is a lot easier

329
00:03:39,770 --> 00:03:42,480
visually for when we're reading code.

330
00:03:42,500 --> 00:03:48,410
So when you're writing code, you also are thinking about how other people are going to find reading

331
00:03:48,410 --> 00:03:49,220
your code.

332
00:03:49,760 --> 00:03:53,480
Now let's try an exercise to really drill this home.

333
00:03:54,020 --> 00:03:59,840
I want you to download the nesting and indentation zip file from this current lesson, and I want you

334
00:03:59,840 --> 00:04:04,010
to open up inside vs code as you have done previously.

335
00:04:04,100 --> 00:04:10,760
Now, in this case, if we take a look at our goal is to create a super complex nested list.

336
00:04:10,880 --> 00:04:17,120
In the last lesson you already saw how you can create simple list elements, whether it's unordered

337
00:04:17,120 --> 00:04:19,370
lists or it's ordered lists.

338
00:04:19,399 --> 00:04:23,740
It's pretty simple to create just a list with some list items.

339
00:04:23,750 --> 00:04:29,460
But in this challenge, I want you to create something a lot more complicated.

340
00:04:29,480 --> 00:04:30,980
Let me walk you through it.

341
00:04:30,980 --> 00:04:40,010
So firstly, we've got a unordered list that has just three list items A, B and C, but under item

342
00:04:40,040 --> 00:04:44,720
B, notice here we've got a ordered list.

343
00:04:45,050 --> 00:04:55,850
This ordered list also has three items and under item B to the second item, we've got yet another unordered

344
00:04:55,850 --> 00:04:56,510
list.

345
00:04:56,750 --> 00:05:01,220
And inside the first item we've nested another unordered list.

346
00:05:01,220 --> 00:05:06,380
And inside the third item we've embedded another ordered list.

347
00:05:06,710 --> 00:05:12,590
This is a little bit complicated and in order to really understand it, you need to take a look at this

348
00:05:12,590 --> 00:05:20,920
part of the video because here I've got the code that will create this simpler structure.

349
00:05:20,930 --> 00:05:28,280
And the important thing to notice is that whereas normally you would probably have a list item that

350
00:05:28,280 --> 00:05:33,920
starts like this and then you would have it closed like this.

351
00:05:35,340 --> 00:05:44,370
In the case when we're embedding a list, that closing tag does not go here, but instead it goes all

352
00:05:44,370 --> 00:05:49,590
the way at the end of the nested list.

353
00:05:49,680 --> 00:05:57,000
Once we're done nesting, this unordered list right here, then do we close that list item?

354
00:05:57,000 --> 00:06:00,710
So this is a really important thing to take notice of.

355
00:06:00,720 --> 00:06:08,340
And then I want you to just study this page a little bit to see how I created this list using this code

356
00:06:08,340 --> 00:06:14,910
and then take this and apply it to the challenge in the coding exercise.

357
00:06:15,300 --> 00:06:16,800
Have a good think about it.

358
00:06:16,800 --> 00:06:19,440
Take some time to try and complete this challenge.

359
00:06:19,470 --> 00:06:25,170
I for one, believe that you can do this if you just spend some time thinking and trying it.

360
00:06:25,170 --> 00:06:32,100
And as always, remember you can use the preview feature to see how your code is turning out and shaping

361
00:06:32,100 --> 00:06:34,140
up while you're writing it.

362
00:06:34,140 --> 00:06:36,160
And I think that will help you quite a lot.

363
00:06:36,250 --> 00:06:39,310
Pause the video now and give that coding exercise a go.

364
00:06:40,800 --> 00:06:41,280
All right.

365
00:06:41,280 --> 00:06:42,330
So how did that go?

366
00:06:42,330 --> 00:06:45,630
Now, if you didn't give that a go, I want you to stop the video now.

367
00:06:45,660 --> 00:06:47,280
Make sure that you've tried it.

368
00:06:47,280 --> 00:06:50,250
You're not going to learn coding through just watching me code.

369
00:06:50,280 --> 00:06:54,540
You're only going to learn programming by actually doing it.

370
00:06:54,540 --> 00:06:59,010
Solving challenges, feeling stupid, sometimes feeling like you're not good enough.

371
00:06:59,010 --> 00:07:03,750
But at the end, when you do get it, when you do succeed, it's going to feel amazing.

372
00:07:03,750 --> 00:07:07,860
And I promise you it was the same for everybody who's gone through this journey.

373
00:07:08,040 --> 00:07:13,980
So what I'm going to do is I'm going to run through the solution and I'm going to drag my goal up over

374
00:07:13,980 --> 00:07:19,020
here so I can compare it to the preview as I go along.

375
00:07:19,020 --> 00:07:28,200
So the first step is creating the first unordered list with three items A, B and C That should be pretty

376
00:07:28,200 --> 00:07:29,190
easy to do.

377
00:07:29,190 --> 00:07:32,580
And let's go ahead and create that.

378
00:07:35,850 --> 00:07:41,670
All right, so now we've got the top of our nest, which is our A, B and C.

379
00:07:41,850 --> 00:07:44,940
If we take a look at our goal, compare it.

380
00:07:44,970 --> 00:07:48,690
We've got A, B, C inside the bullet.

381
00:07:48,720 --> 00:07:53,760
B, we're going to embed right here, a ordered list.

382
00:07:53,760 --> 00:07:58,860
So it's again going to have three items B1, B2 and B3.

383
00:07:58,860 --> 00:08:04,050
And we know it's an ordered list because it starts off with the numbers one, two and three.

384
00:08:04,920 --> 00:08:10,760
Let's go ahead and embed that inside this second B list item.

385
00:08:10,770 --> 00:08:16,830
Remember what I said when you embed a list in another one, you find the list item you want to embed

386
00:08:16,830 --> 00:08:17,340
it in.

387
00:08:17,340 --> 00:08:25,260
And after the content of the list item, which is of course, this B right here, then we go ahead and

388
00:08:25,260 --> 00:08:29,820
hit enter and that is where we create our list.

389
00:08:29,850 --> 00:08:36,280
We're going to create an ordered list in this case and it's going to have three items.

390
00:08:36,280 --> 00:08:42,520
The first one is going to be B1 and then B2 and B3.

391
00:08:43,030 --> 00:08:45,880
Now let's again compare and contrast.

392
00:08:45,910 --> 00:08:52,750
We've got our B1, B2, B3, but take a look inside this B2 item.

393
00:08:52,750 --> 00:09:01,240
Again, we're going to nest another list and here we've got a unordered list B2, a B2B and B2C.

394
00:09:01,390 --> 00:09:03,460
Let's go ahead and do that.

395
00:09:06,400 --> 00:09:14,020
Right here inside the B2 list item, we're going to create our unordered list, our UL, and we're going

396
00:09:14,020 --> 00:09:19,720
to have B2, a B2B and B2C.

397
00:09:21,100 --> 00:09:22,180
Let's compare.

398
00:09:22,180 --> 00:09:26,650
We've got B2B, B2B, B2C, so we've already got most of the parts done.

399
00:09:26,740 --> 00:09:35,140
The final nest in this big long chain is under B to A, we need to add a unordered list, B to A and

400
00:09:35,140 --> 00:09:36,010
B to a B.

401
00:09:36,430 --> 00:09:40,630
Now, the way that I've named each of these hopefully should help you with the nesting.

402
00:09:40,630 --> 00:09:46,000
If it doesn't, then you just have to compare against the goal and try matching it visually.

403
00:09:46,240 --> 00:09:51,910
In this case instead of under the second item, it's actually nested under the first item.

404
00:09:51,910 --> 00:10:03,700
And again, it's an unordered list with just two list items B to A and B to a B.

405
00:10:05,140 --> 00:10:10,180
Now we've got pretty much all of this part sorted.

406
00:10:10,300 --> 00:10:19,030
All we need to do now is just to add the final ordered list in bed under the B three list item.

407
00:10:19,600 --> 00:10:22,010
Let's find our B three list item.

408
00:10:22,010 --> 00:10:27,560
After the text, let's hit enter to create a new line and then we're going to create an ordered list

409
00:10:27,560 --> 00:10:38,540
like this and we're going to add our two list items B31 and B32.

410
00:10:39,020 --> 00:10:45,650
So now if we compare our goal and what we've got in the preview, you should see it's completely identical.

411
00:10:45,650 --> 00:10:50,210
And through this process, hopefully you've learned a little bit more about nesting.

412
00:10:50,300 --> 00:10:58,370
And one of the nice things about Visual Studio Code is that it will automatically indent things as you

413
00:10:58,370 --> 00:10:59,570
write your code.

414
00:10:59,600 --> 00:11:04,190
It knows, for example, list items, go inside a list.

415
00:11:04,190 --> 00:11:12,410
So whether if it's a UL or an O, L, when you go to file and save or use the shortcut command here,

416
00:11:12,410 --> 00:11:14,810
in my case on a mac, it's command s.

417
00:11:14,840 --> 00:11:17,420
If you're on a windows, it's probably Ctrl s.

418
00:11:17,450 --> 00:11:21,800
When you do that, it automatically re indents everything.

419
00:11:21,800 --> 00:11:29,270
So even if you kind of mess things up in a big way as you type like I've got here and you've made all

420
00:11:29,270 --> 00:11:31,520
of the structure look very weird.

421
00:11:31,760 --> 00:11:40,280
If you save Visual Studio code will re indent everything for you so you don't have to necessarily indent

422
00:11:40,310 --> 00:11:43,910
things, but it's important you understand what the indentation means.

423
00:11:43,910 --> 00:11:52,430
So here you see a line right here and it links the opening UL to the matching closing tag, and then

424
00:11:52,430 --> 00:12:02,150
it has indented these two list items over so that you can see these two items probably belong to this

425
00:12:02,180 --> 00:12:03,650
unordered list.

426
00:12:04,070 --> 00:12:09,140
And very often in HTML you will have matching tags.

427
00:12:09,140 --> 00:12:12,620
If there's an open tag, there's probably a closing tag.

428
00:12:12,620 --> 00:12:15,800
And all of these things on screen such as these lines.

429
00:12:15,800 --> 00:12:22,490
And the indentation is here to help you to understand how your code looks so that if you actually have

430
00:12:22,490 --> 00:12:29,540
an error, such as, for example, if you had forgotten to close this UL and when you see your code

431
00:12:29,540 --> 00:12:36,020
doing weird things like for example, in this case, why is my C in an ordered list when it should be

432
00:12:36,020 --> 00:12:38,960
at the top level with the other unordered list?

433
00:12:38,990 --> 00:12:40,700
What is going on here?

434
00:12:40,910 --> 00:12:44,420
Well, I can then follow these indentations.

435
00:12:44,750 --> 00:12:52,580
I can see that this UL obviously matches along this line down to this closing one.

436
00:12:52,580 --> 00:12:55,880
And then this next one is a list item.

437
00:12:55,880 --> 00:13:04,940
So these two are on one line, they're matched and then this next list item is matched up with this

438
00:13:04,940 --> 00:13:05,300
one.

439
00:13:05,300 --> 00:13:07,720
But then wait a minute, what's going on here?

440
00:13:07,730 --> 00:13:13,670
Why is this ol matched to a list item?

441
00:13:13,670 --> 00:13:17,330
Or maybe there's something missing right here?

442
00:13:17,330 --> 00:13:21,560
Well, it is, of course, the missing closing tag.

443
00:13:21,560 --> 00:13:25,730
So this way I can start to figure out where my errors come from.

444
00:13:25,730 --> 00:13:31,070
So we're going to do a lot more of this kind of error checking and mistake correction, which we call

445
00:13:31,100 --> 00:13:33,110
debugging in future lessons.

446
00:13:33,110 --> 00:13:39,860
But this is just a taster in this lesson for how you can use some of the tools to help you make sure

447
00:13:39,860 --> 00:13:43,010
that your code is working and that you're writing the correct things.

448
00:13:43,010 --> 00:13:50,750
And when you do make a mistake, as we all do, you can use the nesting in indentation in order to diagnose

449
00:13:50,750 --> 00:13:54,290
what's wrong with your code and help you fix it.

450
00:13:55,100 --> 00:13:58,400
So that's all for nesting and indentation.

451
00:13:58,400 --> 00:14:05,300
In the next lesson, we're going to learn about anchor elements and we're going to start creating hyperlinks

452
00:14:05,300 --> 00:14:06,440
in our web pages.

453
00:14:06,440 --> 00:14:09,740
So for all of that and more, I'll see you on the next lesson.


454
00:00:00,170 --> 00:00:00,770
Hey, guys.

455
00:00:00,770 --> 00:00:08,210
In this lesson, we're going to understand a bit more about another aspect of HTML, which is their

456
00:00:08,210 --> 00:00:13,850
attributes and understand that we're going to learn all about the anchor element, which allows us to

457
00:00:13,850 --> 00:00:15,240
create hyperlinks.

458
00:00:15,260 --> 00:00:21,620
This is what an anchor element looks like and similar to previous elements, we've got the opening tag

459
00:00:21,620 --> 00:00:27,620
and the closing tag, but there's something a little bit special about this one because right now if

460
00:00:27,620 --> 00:00:32,299
you wrote the code as it is here, this is not an active hyperlink.

461
00:00:32,330 --> 00:00:39,590
What you need is to add an additional attribute, and the attribute for an HTML element goes in the

462
00:00:39,590 --> 00:00:40,820
opening tag.

463
00:00:40,820 --> 00:00:49,490
It goes into the part just after the name of the tag and just before the end of the opening tag where

464
00:00:49,490 --> 00:00:51,530
we have the closing angle bracket.

465
00:00:51,740 --> 00:00:58,730
And what an attribute does is it adds additional information to this HTML element, such as in this

466
00:00:58,730 --> 00:01:01,260
case where this link should link to.

467
00:01:01,290 --> 00:01:05,069
Now, the way that we structure an attribute looks something like this.

468
00:01:05,069 --> 00:01:15,270
So we have the name of the element and then we have a space and then we have the name of the attribute.

469
00:01:15,450 --> 00:01:18,960
And afterwards we have a equal sign.

470
00:01:18,960 --> 00:01:23,640
And after the equal sign, we have the value of the attribute.

471
00:01:24,300 --> 00:01:31,350
Now you can have as many attributes as you want and all you have to do is simply separate each one of

472
00:01:31,350 --> 00:01:37,590
them with a space and make sure that they all go into the opening tag.

473
00:01:37,860 --> 00:01:45,600
Now, in the case of our image element, if you take a look on the Mozilla developer network documentation

474
00:01:45,600 --> 00:01:55,230
for the anchor element, then you can see it has the special attribute of href and href is the part

475
00:01:55,260 --> 00:02:01,380
where we add the URL that the hyperlink should go to without the attribute.

476
00:02:01,380 --> 00:02:02,820
This is what you would see.

477
00:02:02,850 --> 00:02:10,979
It is an anchor element and you do see the content in between the tags, but you do not see an active

478
00:02:10,979 --> 00:02:11,970
link when you click on it.

479
00:02:11,970 --> 00:02:13,110
Nothing happens.

480
00:02:13,140 --> 00:02:13,620
Now.

481
00:02:13,620 --> 00:02:20,910
As soon as you add that href attribute and you provide it with in this case a target.

482
00:02:20,910 --> 00:02:25,170
So where should this hyperlink go to then?

483
00:02:25,170 --> 00:02:31,980
This link actually gets styled to show you that this is now an active link in the familiar blue with

484
00:02:31,980 --> 00:02:32,970
the underline.

485
00:02:32,970 --> 00:02:40,710
And at this point, if you click on it, it is going to go straight to this URL that we've specified

486
00:02:41,100 --> 00:02:44,130
in addition to the specific attributes.

487
00:02:44,130 --> 00:02:51,720
So for example, in the anchor element documentation, we saw that it has all of these specific attributes

488
00:02:51,720 --> 00:02:55,740
which are relevant to this particular element.

489
00:02:55,770 --> 00:03:01,920
Now we're not going to be using all of them and some of them are also deprecated and no longer in use

490
00:03:01,920 --> 00:03:03,240
in HTML5.

491
00:03:03,330 --> 00:03:09,680
But in addition to these specific attributes, there are also global attributes that every single HTML

492
00:03:09,690 --> 00:03:11,370
element has access to.

493
00:03:12,000 --> 00:03:18,570
And if you look through some of these, an example is something like draggable, right?

494
00:03:19,080 --> 00:03:26,010
And it basically allows us to set true or false to say whether if the element may or may not be dragged,

495
00:03:26,520 --> 00:03:31,560
you can apply a global attribute to any given element.

496
00:03:31,560 --> 00:03:35,730
So in this case, we can apply it even to our anchor element.

497
00:03:35,730 --> 00:03:44,400
Again, we have the name of the attribute, we have the equal sign and we have the value of the attribute.

498
00:03:44,400 --> 00:03:50,610
So in this case, the name of the attribute is Draggable, and we've set it equal to true.

499
00:03:50,820 --> 00:03:57,930
So once this attribute is set, what happens is you can click and drag that anchor tag around.

500
00:03:58,020 --> 00:04:03,510
Now, if that attribute wasn't set, then when you try to drag it, it's just going to highlight the

501
00:04:03,510 --> 00:04:06,240
line and it's not going to allow that behavior.

502
00:04:06,540 --> 00:04:12,390
So we've learned that there are specific attributes which are reserved for only certain elements, such

503
00:04:12,390 --> 00:04:19,529
as the href for the anchor tag, and there are global attributes which can be used on any HTML element.

504
00:04:19,829 --> 00:04:27,150
So now let's try an exercise and see if you've understood how to use anchor elements and more specifically,

505
00:04:27,180 --> 00:04:32,070
see if you've understood how the HTML attribute is written in HTML code.

506
00:04:32,400 --> 00:04:39,390
In this exercise, we're going to create a website that shows our top five favorite websites.

507
00:04:39,840 --> 00:04:45,960
I've got the H1 already written for you, but what we're aiming for is something like this.

508
00:04:45,960 --> 00:04:54,210
So you have a list here and notice that this is actually an ordered list because it goes from one all

509
00:04:54,210 --> 00:04:59,850
the way to five and the fact that the list is not highlighted.

510
00:04:59,880 --> 00:05:09,300
Is in blue should show you that this is actually created using a list element and not a part of the

511
00:05:09,300 --> 00:05:10,470
anchor tag.

512
00:05:10,500 --> 00:05:12,510
It's not a part of the content.

513
00:05:12,510 --> 00:05:15,870
And the anchor tag only starts here.

514
00:05:16,530 --> 00:05:24,810
I want you to document your top five all time favorite websites and feel free to Google or check mine

515
00:05:24,810 --> 00:05:26,700
if you want to see what they do.

516
00:05:26,790 --> 00:05:33,420
These are some of the websites that I go to when I'm bored or when I'm trying to look for some new ideas

517
00:05:33,420 --> 00:05:34,800
and new inspiration.

518
00:05:35,160 --> 00:05:40,770
So I want you to use what you've learned previously about creating lists.

519
00:05:40,770 --> 00:05:47,100
And within those lists, I want you to create five anchor tags, each of them pointing to a different

520
00:05:47,100 --> 00:05:48,870
website that you like.

521
00:05:49,350 --> 00:05:54,240
And if you've got everything working, then you would end up with a website that looks like the goal.

522
00:05:54,240 --> 00:06:00,040
And when you click on any of these links, then they should take you to the correct website.

523
00:06:00,070 --> 00:06:00,850
Pause the video.

524
00:06:00,850 --> 00:06:06,340
Now, give this challenge a go, and once you're done, come back here and I'll go through the solution

525
00:06:06,340 --> 00:06:07,030
with you.

526
00:06:12,400 --> 00:06:12,880
All right.

527
00:06:12,880 --> 00:06:14,290
So how did that go?

528
00:06:14,500 --> 00:06:18,370
The first thing we wanted to do was to create a ordered list.

529
00:06:18,400 --> 00:06:21,330
We already saw how to do this in a previous lesson.

530
00:06:21,340 --> 00:06:27,730
We create our tags and inside we add our list elements.

531
00:06:27,880 --> 00:06:32,260
Inside the list element is where our anchor tag is going to go.

532
00:06:32,290 --> 00:06:42,220
It's an anchor tag, which is inside a list element, which is then inside a ordered list.

533
00:06:42,520 --> 00:06:46,150
So several layers of nesting that's going on here.

534
00:06:46,720 --> 00:06:53,530
Now, once you've created your anchor tag, then in between the open and closing tags, we add the text

535
00:06:53,530 --> 00:06:54,590
for our link.

536
00:06:54,610 --> 00:07:00,910
So in my case, it will be the name of my website that I'm linking to, which is called Product Hunt.

537
00:07:01,000 --> 00:07:07,720
And this is a place where you can see all the latest product launches and great websites and start ups

538
00:07:07,720 --> 00:07:09,700
that people are building every day.

539
00:07:09,940 --> 00:07:14,950
The important part comes here when we create the attribute for that anchor tag.

540
00:07:14,960 --> 00:07:23,840
So remember that the attribute for linking a anchor tag is called the href, and we're going to add

541
00:07:23,840 --> 00:07:25,970
it after the equal sign.

542
00:07:26,520 --> 00:07:31,640
As you start typing, you might see code, start suggesting what you're looking for.

543
00:07:31,650 --> 00:07:37,380
So if you pick the ref and hit enter, then it will format everything for you ready for you to enter

544
00:07:37,380 --> 00:07:38,340
the URL.

545
00:07:38,730 --> 00:07:45,690
If you're wondering why there are these quotation marks here, well, that's because it's actually a

546
00:07:45,690 --> 00:07:48,950
piece of text that we're going to add in here.

547
00:07:48,960 --> 00:07:52,230
So this is treated slightly differently in code.

548
00:07:52,230 --> 00:07:59,140
So whenever you have text, normally you will see them enclosed inside a set of double quotes.

549
00:07:59,160 --> 00:08:07,050
This is to differentiate from the reserved words like, you know, I or a or h ref.

550
00:08:07,080 --> 00:08:08,820
These are all special words.

551
00:08:08,820 --> 00:08:13,890
And in order to show that you're not creating anything special, you're just pointing to our URL, which

552
00:08:13,890 --> 00:08:15,210
is just a piece of text.

553
00:08:15,240 --> 00:08:17,670
We have our double quotes around it.

554
00:08:18,420 --> 00:08:26,380
Inside here, I'm going to paste in the URL of product hunt, and now I have myself a link and if I

555
00:08:26,380 --> 00:08:32,590
go ahead and show preview, then you should see that we've got our list item one.

556
00:08:32,590 --> 00:08:39,580
And when I click on it, it goes to the website that I have linked to.

557
00:08:39,760 --> 00:08:47,410
You can repeat this process and link to all of your five favorite websites and you should end up with

558
00:08:47,410 --> 00:08:50,680
something that looks like this.

559
00:08:50,680 --> 00:08:58,510
And as an extra challenge, I want you to head over to the developer documentation for the ordered list,

560
00:08:58,540 --> 00:09:01,750
which you're using in this current code exercise.

561
00:09:01,750 --> 00:09:03,850
And look at the attributes.

562
00:09:04,000 --> 00:09:12,130
I want you to see whether if you can change one of the attributes, the start attribute, so that your

563
00:09:12,130 --> 00:09:17,290
list, instead of starting from one starts from five.

564
00:09:17,470 --> 00:09:19,300
This is what you're aiming for.

565
00:09:19,390 --> 00:09:23,950
Pause the video, give that a go, and then afterwards we'll go through the solution together.

566
00:09:26,750 --> 00:09:28,940
Let's take a look at the documentation.

567
00:09:28,940 --> 00:09:31,400
We can see that for the ordered list.

568
00:09:31,430 --> 00:09:34,370
One of the attributes is called START.

569
00:09:34,460 --> 00:09:42,680
And in the explanation, it says, All we have to do is to set this attribute to a number for it to

570
00:09:42,680 --> 00:09:43,430
start from.

571
00:09:43,430 --> 00:09:45,020
So that's pretty simple.

572
00:09:45,020 --> 00:09:47,690
But we need to remember where our attributes go.

573
00:09:47,690 --> 00:09:55,250
So they go in the starting tag, which is here, and the name of the attribute is Start, and we can

574
00:09:55,250 --> 00:09:57,140
set it equal to five.

575
00:09:57,170 --> 00:10:02,930
Now once we've done that, if we take a look at our website, you can see the order list now starts

576
00:10:02,930 --> 00:10:07,970
from five and ends at nine because we've changed that attribute.

577
00:10:08,390 --> 00:10:12,680
Hopefully that wasn't too difficult and you managed to get it to work.

578
00:10:12,710 --> 00:10:17,390
Have a quick review of the concepts that are covered in this lesson.

579
00:10:17,390 --> 00:10:21,920
And remember, we're always trying to repeat things that we've learnt before just to make sure that

580
00:10:21,920 --> 00:10:25,830
we reinforce those pieces of knowledge from earlier on.

581
00:10:25,830 --> 00:10:32,220
And one thing I like to do as I learn is to make some notes on the things that are new to me that I

582
00:10:32,220 --> 00:10:33,600
didn't realize before.

583
00:10:33,600 --> 00:10:38,700
So if there's something new in this lesson that you want to write down, take a quick note of it and

584
00:10:38,700 --> 00:10:42,840
then head over to the next lesson where we talk about image elements.

585
00:10:43,230 --> 00:10:44,850
For all of that and more.

586
00:10:44,850 --> 00:10:45,450
I'll see you there.


587
00:00:00,170 --> 00:00:04,490
Now, a website would be pretty boring if it had no images on it, right?

588
00:00:04,490 --> 00:00:11,330
So in this lesson we're going to learn how we can add images to our website using the image element.

589
00:00:11,720 --> 00:00:13,430
Now this is what it looks like.

590
00:00:13,430 --> 00:00:14,660
It's pretty simple.

591
00:00:14,660 --> 00:00:20,630
And you'll notice that similar to the anchor tag or the anchor element that we learned about in the

592
00:00:20,630 --> 00:00:27,950
last lesson, the main component of an image tag that renders the image is this attribute, which is

593
00:00:27,950 --> 00:00:30,410
called source or SRC.

594
00:00:30,950 --> 00:00:38,810
And what this does is it tells the image element what is the source of the image.

595
00:00:39,710 --> 00:00:47,510
And that's why after the equal sign, the value is going to be the location of the image.

596
00:00:48,650 --> 00:00:56,300
One last thing to notice about the image tag is, unlike the anchor tag, it doesn't have a closing

597
00:00:56,330 --> 00:00:56,960
tag.

598
00:00:56,960 --> 00:01:03,540
Instead, it is a self closing tag, also known as a void element.

599
00:01:03,570 --> 00:01:09,390
Remember, previously we learned about void elements where we learnt that you can have horizontal rule

600
00:01:09,390 --> 00:01:12,540
elements, you can also have break elements.

601
00:01:12,540 --> 00:01:19,230
And similarly the image element is also a void element that doesn't have a closing tag.

602
00:01:19,230 --> 00:01:23,150
Because if you think about it, what is the text content of an image?

603
00:01:23,170 --> 00:01:24,390
Doesn't really make sense, right?

604
00:01:24,390 --> 00:01:29,970
The main content is actually the image that will be rendered from the source.

605
00:01:30,390 --> 00:01:31,800
What does this look like?

606
00:01:31,800 --> 00:01:39,810
Well, here's an example image element where we've set the source to a real life live photo on the Internet.

607
00:01:40,110 --> 00:01:44,940
Now, when this code is rendered in a website, it will display a random image.

608
00:01:44,940 --> 00:01:48,570
So in this case, the random image I got was a forest.

609
00:01:48,780 --> 00:01:56,430
And the reason why it's random is because I'm getting these photos from a source called pixham.photos.

610
00:01:56,430 --> 00:02:02,460
So if you type this into your browser, you should see a website and the idea is kind of like the Lorem

611
00:02:02,460 --> 00:02:05,310
ipsum for placeholder photos.

612
00:02:05,310 --> 00:02:11,220
So when you don't really care what the photo is, but you need a photo on your website as you're creating

613
00:02:11,220 --> 00:02:17,070
it in order to see what it would look like, then you could use this website and you could put in the

614
00:02:17,100 --> 00:02:21,390
URL, which is the standard one like here.

615
00:02:21,390 --> 00:02:26,040
And then after a forward slash, you can add in the size of your image.

616
00:02:26,040 --> 00:02:32,640
So in this case, I'm saying I want a square that is 200 pixels by 200 pixels.

617
00:02:32,880 --> 00:02:38,400
It gives me a random image from its data bank, for example, in this case of a forest.

618
00:02:38,670 --> 00:02:47,160
The other attribute for an image tag that's super important and one that you should always have is the

619
00:02:47,160 --> 00:02:48,480
alt attribute.

620
00:02:48,690 --> 00:02:53,820
And the alt attribute stands for Alternative Text Description.

621
00:02:54,030 --> 00:02:59,910
This is really important because people who are blind or visually impaired, they don't look at the

622
00:02:59,910 --> 00:03:01,440
Internet the same way we do.

623
00:03:01,440 --> 00:03:03,780
They often use something called a screen reader.

624
00:03:03,780 --> 00:03:10,830
And what the screen reader is going to do when it hits an image is it will look at the alternative text

625
00:03:10,830 --> 00:03:11,760
provided.

626
00:03:11,760 --> 00:03:17,460
So in this case, I've provided that this is a forest at sunset or sunrise.

627
00:03:17,460 --> 00:03:22,830
I'm not quite sure, but that means that the person with visual impairment will get this read out to

628
00:03:22,830 --> 00:03:26,760
them and it will help them understand what the website's all about.

629
00:03:26,790 --> 00:03:29,400
So what is this process like?

630
00:03:29,610 --> 00:03:36,840
As an example, I'm using the Silktide Toolbar, which is a Chrome browser extension, to simulate what

631
00:03:36,870 --> 00:03:40,530
a person with visual impairment might hear as they're browsing.

632
00:03:40,530 --> 00:03:42,420
In this case, the BBC website.

633
00:03:42,510 --> 00:03:48,300
As I click through next, you can see it describes the different things that are on screen.

634
00:03:48,300 --> 00:03:53,670
And if I go over to the image, it describes the image for me.

635
00:03:55,380 --> 00:03:58,740
Item two Dolphin leaping from the sea image.

636
00:03:58,770 --> 00:04:01,470
So where is it getting this description from?

637
00:04:01,470 --> 00:04:08,070
Well, if we right click on the image and inspect it, and if we look for the image, which I think

638
00:04:08,100 --> 00:04:14,490
should be down here, you can see as I highlight different parts, it shows me which part.

639
00:04:14,490 --> 00:04:22,350
So in this element, I'm probably going to find an image at the end right here and you can see the alt

640
00:04:22,380 --> 00:04:25,590
text saying dolphin leaping from the sea.

641
00:04:25,590 --> 00:04:30,630
And that is what gets read out from the screen reader helping somebody with blindness.

642
00:04:30,660 --> 00:04:33,570
Be able to understand what's on this website.

643
00:04:34,410 --> 00:04:40,860
Now, if you want to check out this tool, it's a Chrome browser extension called Silktide and it should

644
00:04:40,860 --> 00:04:48,030
be a free plugin, but it might only work on Mac or certain versions of Windows, but it's not so much

645
00:04:48,030 --> 00:04:55,590
about the tool, but I wanted to show you how important it is the alt text that you provide for accessibility

646
00:04:55,590 --> 00:04:58,620
and for disabled users browsing your website.

647
00:04:58,710 --> 00:04:59,730
Now let's try.

648
00:04:59,780 --> 00:05:02,930
An exercise and create some images of our own.

649
00:05:03,080 --> 00:05:10,280
Download the zip file from this current lesson and go ahead and drag it into your web development project

650
00:05:10,280 --> 00:05:13,400
folder and open it inside vs code.

651
00:05:13,610 --> 00:05:21,110
If you take a look inside the index.html, you can see I've provided to you two image URL examples that

652
00:05:21,110 --> 00:05:22,320
you can use.

653
00:05:22,340 --> 00:05:28,610
And what we're aiming for is to find out if you're a cat person or if you're a dog person.

654
00:05:28,760 --> 00:05:34,430
I want you to create a H1 that says I'm a cat person or I'm a dog person.

655
00:05:34,430 --> 00:05:39,350
And also I want you to add a image element straight afterwards.

656
00:05:39,380 --> 00:05:44,970
Now you can use the URL for the dog or for the cat.

657
00:05:44,990 --> 00:05:50,960
It doesn't really matter at the end of the day, as long as you've understood how to create images.

658
00:05:51,140 --> 00:05:52,640
That's the challenge.

659
00:05:52,670 --> 00:05:55,760
Pause the video and give that a go.

660
00:05:58,260 --> 00:05:58,680
All right.

661
00:05:58,680 --> 00:06:02,280
So personally, I'm more of a dog kind of person.

662
00:06:02,280 --> 00:06:08,680
And if you're also a dog person, then you might see my little Easter egg that I've buried in there.

663
00:06:08,700 --> 00:06:16,570
So first, let's go ahead and create our H1, and then we're going to create our image.

664
00:06:16,590 --> 00:06:22,530
Remember, we create a image tag and it's a self-closing tag.

665
00:06:22,560 --> 00:06:33,630
Then we add in our source as the image source, and we're going to put our URL right inside there.

666
00:06:34,110 --> 00:06:40,650
Now, already, if we go ahead and show preview, you can see our little dog digging in the sand.

667
00:06:40,680 --> 00:06:46,350
Because if you've noticed, this is actually a gif image.

668
00:06:46,620 --> 00:06:52,200
GIF images work exactly the same way as normal images, JPEGs or PNGs.

669
00:06:52,230 --> 00:06:57,780
As long as you put it into the source, it will be rendered in a website and it will start animating

670
00:06:57,880 --> 00:06:58,990
or by itself.

671
00:06:58,990 --> 00:07:01,810
And you get a cute little dog digging through the sand.

672
00:07:02,110 --> 00:07:08,500
Now if you're a cat person, then this is just a static jpeg because cats are more chill.

673
00:07:09,790 --> 00:07:12,880
So I hope you manage to get that part right.

674
00:07:13,120 --> 00:07:17,530
But we haven't finished creating our image element yet.

675
00:07:17,560 --> 00:07:20,530
Remember what I said about the alt tag?

676
00:07:20,530 --> 00:07:25,990
It's a good idea to always add an alt tag to describe our image when we can.

677
00:07:26,020 --> 00:07:31,990
Now, there are some cases where you don't create an alt tag because it's not really relevant to somebody

678
00:07:31,990 --> 00:07:36,400
reading through the content of a website and you can in fact leave it blank.

679
00:07:36,850 --> 00:07:38,710
But in this case, it's very simple.

680
00:07:38,710 --> 00:07:43,630
We've got a puppy who is digging through the sand.

681
00:07:44,800 --> 00:07:51,970
And now when we take a look at our preview, then nothing visually for us changes.

682
00:07:51,970 --> 00:07:57,550
But behind the scenes, we will help our visually impaired friends to be able to understand our website

683
00:07:57,550 --> 00:07:58,900
just a little bit better.

684
00:07:59,230 --> 00:08:03,310
So I hope you managed to achieve either of these goals.

685
00:08:03,310 --> 00:08:09,130
And once you're ready, we can head over to the next lesson where we've got the final project to create

686
00:08:09,160 --> 00:08:14,410
a birthday invite website using all the skills that we've learned so far.

687
00:08:14,410 --> 00:08:16,250
So all of that and more.

688
00:08:16,270 --> 00:08:17,110
I'll see you there.


689
00:00:01,040 --> 00:00:01,490
All right.

690
00:00:01,490 --> 00:00:07,060
It's time to put everything we've learned so far together and create a project.

691
00:00:07,070 --> 00:00:13,760
In this project, we're going to create a website for your next party to help you invite all your guests.

692
00:00:13,760 --> 00:00:19,880
Because paper invites and WhatsApp invites are only for people who can't create websites.

693
00:00:20,420 --> 00:00:21,230
Am I right?

694
00:00:21,710 --> 00:00:23,540
We can do it better.

695
00:00:23,570 --> 00:00:25,400
This is what we're aiming for.

696
00:00:25,430 --> 00:00:31,970
We're aiming for a retro 90s look website because we haven't learned about styling websites yet, which

697
00:00:31,970 --> 00:00:34,970
is yet to come, but this is already pretty nice.

698
00:00:34,970 --> 00:00:41,630
We're going to create a website to tell people that it's our birthday, which day it is, and we're

699
00:00:41,630 --> 00:00:43,460
going to add some images.

700
00:00:43,490 --> 00:00:46,790
We're going to tell people what to bring using lists.

701
00:00:46,790 --> 00:00:51,140
And also we're going to add an anchor tag to show people where they need to go.

702
00:00:51,320 --> 00:00:55,970
Hopefully, we're going to combine a lot of the things that you've learned in previous lessons.

703
00:00:55,970 --> 00:01:01,290
And once you're ready, head over to the course resources for this lesson.

704
00:01:01,290 --> 00:01:05,160
Download and extract the zip file in order to get started.

705
00:01:05,190 --> 00:01:12,900
When you take a look at the index.html, you can see I've provided an example image URL and an example

706
00:01:12,930 --> 00:01:14,040
Google Maps link.

707
00:01:14,040 --> 00:01:19,650
So if you take a look inside the goal, you can see what the example image will take you to.

708
00:01:19,650 --> 00:01:25,230
And if you're ready for an Easter egg slash mini surprise, you can head over to the Google map link

709
00:01:25,230 --> 00:01:27,990
and see where it's located as well.

710
00:01:28,440 --> 00:01:32,580
So this is a project and it's not a coding exercise.

711
00:01:32,580 --> 00:01:35,520
It's not something that I'm testing you on.

712
00:01:35,550 --> 00:01:36,780
Everything I'm saying.

713
00:01:36,780 --> 00:01:38,430
It's just a guideline.

714
00:01:38,430 --> 00:01:47,610
I want you to at minimum, have an image in there, have a list in there, and also have an anchor tag

715
00:01:47,610 --> 00:01:48,360
in there.

716
00:01:48,660 --> 00:01:51,120
Everything else is totally up to you.

717
00:01:51,120 --> 00:01:56,010
You can mess around with it as much as you like or change as much as you like, or keep it as simple

718
00:01:56,010 --> 00:01:56,550
as you like.

719
00:01:56,550 --> 00:01:58,110
It doesn't really matter.

720
00:01:58,140 --> 00:02:05,760
Pause the video and give this project a go and happy birthday if it is your birthday today.

721
00:02:09,050 --> 00:02:09,500
All right.

722
00:02:09,500 --> 00:02:13,190
So want to walk through one possible solution?

723
00:02:13,490 --> 00:02:16,430
I just want to say this is just one possibility.

724
00:02:16,460 --> 00:02:18,680
You can change it as much as you like.

725
00:02:18,680 --> 00:02:20,900
There is no right or wrong in the project.

726
00:02:20,930 --> 00:02:24,970
It's all about practice and also your own personal style.

727
00:02:24,980 --> 00:02:30,590
So in my case, I created an H1 for the top level heading, which is the most important thing.

728
00:02:30,590 --> 00:02:36,170
It's my birthday and then I've got some h2's and some H3.

729
00:02:36,200 --> 00:02:42,110
So for what to bring and where you need to go in the image tag.

730
00:02:42,110 --> 00:02:50,000
I've added a source to that image I provided in the starting code, and also I provided an alternative

731
00:02:50,000 --> 00:02:53,840
text to show people what this image is all about.

732
00:02:54,560 --> 00:03:01,370
If you manage to get the image source and the alternative text and your image shows up, then congratulations.

733
00:03:01,370 --> 00:03:02,600
You did a great job.

734
00:03:02,630 --> 00:03:09,720
Now the next part I've got is a unordered list to tell people what they should bring with each item

735
00:03:09,720 --> 00:03:12,660
in its own list item element.

736
00:03:12,660 --> 00:03:17,790
And finally, I created an anchor tag to tell people where they need to go.

737
00:03:17,790 --> 00:03:25,470
So I've added an href attribute and I used the link that I supplied in the starting code and I told

738
00:03:25,470 --> 00:03:33,660
people that the link text is a Google map link, which hopefully will take them to where they need to

739
00:03:33,660 --> 00:03:38,400
go, which is somewhere in Tokyo where all the pigeon people meet, apparently.

740
00:03:39,300 --> 00:03:42,660
So if you found that Easter egg, then congratulations.

741
00:03:43,020 --> 00:03:48,270
But if you're really proud of what you managed to do for your project, then be sure to take a screenshot

742
00:03:48,300 --> 00:03:51,810
of it and post it in the Q&A to share it with the rest of us.

743
00:03:51,810 --> 00:03:56,640
I would love to see what you came up with, but that's all from me for this section.

744
00:03:56,640 --> 00:04:01,710
I hope you enjoyed learning more about HTML elements and I'll see you soon.


