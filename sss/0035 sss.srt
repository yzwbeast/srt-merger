1
00:00:00,060 --> 00:00:02,370
Hey guys, welcome to day 35

2
00:00:02,400 --> 00:00:05,730
of 100 Days of Code. It's Angela here again

3
00:00:05,850 --> 00:00:09,000
and today we're going to be learning all about API keys,

4
00:00:09,240 --> 00:00:11,580
authentication, environment variables,

5
00:00:11,940 --> 00:00:15,690
and also how to send SMS using Python.

6
00:00:16,530 --> 00:00:20,190
It's going to be a pretty packed day and we're going to be learning a whole

7
00:00:20,190 --> 00:00:21,023
bunch of things.

8
00:00:21,360 --> 00:00:26,360
And the goal is the look at even more advanced ways of using APIs and

9
00:00:27,180 --> 00:00:31,710
looking at how we can authenticate ourselves with an API provider so that we can

10
00:00:31,710 --> 00:00:35,220
get access to more precious data. Now we're also going

11
00:00:35,220 --> 00:00:40,220
to be looking at how we can use an API like Twilio to send SMS messages to

12
00:00:41,370 --> 00:00:45,030
ourselves so that we can get an alert wherever we are.

13
00:00:45,750 --> 00:00:46,710
And finally,

14
00:00:46,740 --> 00:00:50,790
we're going to be taking a look at what environment variables are in association

15
00:00:50,790 --> 00:00:54,450
with how they're used for safely storing API keys.

16
00:00:55,140 --> 00:01:00,140
What all of this knowledge is going to amount to is to build a rain alert

17
00:01:00,750 --> 00:01:01,583
application.

18
00:01:01,950 --> 00:01:06,930
So we're going to be writing Python code that is going to send us a text message

19
00:01:06,990 --> 00:01:11,310
in the morning, just before we head out, telling us to bring an umbrella

20
00:01:11,580 --> 00:01:13,350
if it's going to rain in the day.

21
00:01:13,920 --> 00:01:15,960
So this way we don't have to check the weather.

22
00:01:16,320 --> 00:01:21,320
We know that our trusty application is always going to alert us via an SMS

23
00:01:21,420 --> 00:01:24,510
message if we need to bring an umbrella before we leave home.

24
00:01:25,140 --> 00:01:28,260
So that's the goal. And if you head over to the next lesson,

25
00:01:28,650 --> 00:01:33,570
we'll get started building our application and learning about API

26
00:01:33,570 --> 00:01:34,410
authentication.


27
00:00:00,060 --> 00:00:05,060
The first thing we're going to explore is how to authenticate ourselves with an

28
00:00:05,340 --> 00:00:10,340
API provider so that we can access more secure and more valuable data from the

29
00:00:11,310 --> 00:00:16,170
API providers. Up to this point, we've learned about API endpoints,

30
00:00:16,230 --> 00:00:20,720
so figuring out what is the URL that we need to hit up in order to get a

31
00:00:20,720 --> 00:00:24,830
particular piece of data. We also looked at API parameters,

32
00:00:25,100 --> 00:00:29,600
so passing in different inputs so that we can get different pieces of data

33
00:00:29,810 --> 00:00:31,460
back from the API provider.

34
00:00:32,119 --> 00:00:36,530
Now we're going to take one step further and look at how we can use APIs

35
00:00:36,530 --> 00:00:39,830
that require authentication. Previously

36
00:00:39,830 --> 00:00:43,580
all of the APIs that we've used were free APIs.

37
00:00:43,850 --> 00:00:48,850
They were provided completely free and we can access all parts of it without any

38
00:00:49,040 --> 00:00:51,110
sort of payment here. Now,

39
00:00:51,140 --> 00:00:56,140
this is because the data that's contained in those APIs are very simple and

40
00:00:56,750 --> 00:01:01,750
nobody is going to be using that data to build a very fancy or big commercial

41
00:01:02,660 --> 00:01:05,630
application. Now, on the other hand, there's 

42
00:01:05,640 --> 00:01:10,010
other types of data that are very valuable, for example, weather data,

43
00:01:10,310 --> 00:01:10,880
because it

44
00:01:10,880 --> 00:01:15,680
makes a lot of energy and time for somebody or some company to collect all of

45
00:01:15,680 --> 00:01:19,580
this data and provide it for you. In these cases,

46
00:01:19,610 --> 00:01:22,610
some of these APIs can have a paid tier.

47
00:01:23,000 --> 00:01:27,110
So you actually have to pay if you're running an application

48
00:01:27,110 --> 00:01:32,090
or if you have a company that needs to get this data very frequently and you

49
00:01:32,090 --> 00:01:33,980
need to get large amounts of the data.

50
00:01:34,820 --> 00:01:39,590
Why do people charge for API anyways? Well, if you think about something simple

51
00:01:39,590 --> 00:01:43,850
like the weather, it's not actually that simple. How do you even get 

52
00:01:43,880 --> 00:01:44,270
the weather

53
00:01:44,270 --> 00:01:49,270
if I asked you to figure out the weather without using some sort of website or tool?

54
00:01:50,660 --> 00:01:53,570
Well, in this particular case, open weather map,

55
00:01:53,780 --> 00:01:58,100
they have access to over 4,000 weather stations across the globe,

56
00:01:58,580 --> 00:02:03,580
and then their data scientists will take that weather data and look at the

57
00:02:03,680 --> 00:02:08,680
satellite images and process that data in order to figure out the weather and

58
00:02:08,720 --> 00:02:13,220
predict the weather for each city in the world. As you can imagine,

59
00:02:13,220 --> 00:02:16,610
that's going to be really resource-intensive and it's going to require a lot of

60
00:02:16,610 --> 00:02:21,440
employees and also server maintenance and electricity costs, right?

61
00:02:21,890 --> 00:02:26,000
So for all of that hassle, if they're going to provide this data for you,

62
00:02:26,270 --> 00:02:29,900
then it's reasonable that you should be paying for it, right?

63
00:02:30,380 --> 00:02:31,830
Essentially you can see a lot of

64
00:02:31,940 --> 00:02:35,660
APIs as a way of selling data.

65
00:02:36,140 --> 00:02:40,820
If you own some sort of privileged piece of data that you are constantly

66
00:02:40,820 --> 00:02:44,720
updating, or you are actively generating, for example,

67
00:02:44,720 --> 00:02:48,320
weather data from satellite images or financial data,

68
00:02:48,650 --> 00:02:52,940
then it's reasonable that you should be charging for this data

69
00:02:53,180 --> 00:02:57,260
especially if somebody is going to rely on it heavily in order to build a

70
00:02:57,290 --> 00:03:01,030
commercial app or a company. But luckily,

71
00:03:01,240 --> 00:03:06,240
most of these APIs provide a free tier that allows you to test out the

72
00:03:07,500 --> 00:03:08,333
application.

73
00:03:08,610 --> 00:03:12,150
And if you are somebody who's just learning the ropes then it doesn't make sense

74
00:03:12,150 --> 00:03:12,983
to charge you.

75
00:03:13,290 --> 00:03:18,090
It only makes sense when your application or your service has a lot of users.

76
00:03:18,480 --> 00:03:22,860
And then you start going into the paid tiers. Now,

77
00:03:22,890 --> 00:03:27,180
how do you prevent people from abusing this free tier?

78
00:03:27,210 --> 00:03:29,880
Because anybody can say, well, I'm just learning, you know.

79
00:03:30,360 --> 00:03:34,260
You can be somebody who's running a 1000 employee company

80
00:03:34,260 --> 00:03:36,900
and you could claim that you're just learning.

81
00:03:37,800 --> 00:03:42,240
So the way that they prevent people from abusing their service is through

82
00:03:42,240 --> 00:03:44,640
something known as an API key.

83
00:03:45,180 --> 00:03:50,160
And this is almost like your personal account number and password.

84
00:03:50,730 --> 00:03:55,730
This is the way how the API provider can track how much you're using their API

85
00:03:57,210 --> 00:04:01,110
and to authorize your access and deny you access

86
00:04:01,110 --> 00:04:03,720
once you've gone over the limit. Now,

87
00:04:03,780 --> 00:04:08,160
different API providers tend to have different ways that you can authenticate

88
00:04:08,160 --> 00:04:09,210
yourself with them,

89
00:04:09,630 --> 00:04:13,350
but most of them involve some sort of an API key.

90
00:04:14,100 --> 00:04:18,149
In the next lesson, I want to show you how we can implement the open weather

91
00:04:18,149 --> 00:04:19,140
map API,

92
00:04:19,500 --> 00:04:24,500
authenticate ourselves with an API key that we generate, and get the live wather

93
00:04:24,550 --> 00:04:28,500
data. So for all of that and more, I'll see you on the next lesson,


94
00:00:00,330 --> 00:00:05,330
Now whenever we start using a new API, the most important thing is to read the

95
00:00:06,300 --> 00:00:07,350
documentation.

96
00:00:07,920 --> 00:00:11,730
I know it's really tempting to skip over the instructions and just get right

97
00:00:11,730 --> 00:00:12,563
into it.

98
00:00:12,720 --> 00:00:17,250
I'm also the sort of person who buys a lawnmower and throws away the instruction

99
00:00:17,250 --> 00:00:20,820
manual. And then two days later, something breaks

100
00:00:20,820 --> 00:00:25,380
and I just want to hurt myself because it would be so much easier if I had

101
00:00:25,380 --> 00:00:29,940
actually read the instruction manual. But in this case, it is really important.

102
00:00:30,060 --> 00:00:33,300
So let's head over to openweathermap.org together

103
00:00:33,360 --> 00:00:38,360
and let's go to the API section to see their API documentation.

104
00:00:39,480 --> 00:00:44,340
As you can see, this API provider actually has several products.

105
00:00:44,370 --> 00:00:49,140
So you could look at the current weather data, the hourly forecast,

106
00:00:49,410 --> 00:00:51,240
the one call API,

107
00:00:51,250 --> 00:00:55,290
the daily forecast and a whole bunch of other things.

108
00:00:55,500 --> 00:01:00,330
So each of these have their own endpoints. And if we take a look at the API doc,

109
00:01:00,360 --> 00:01:01,800
you can see this first one

110
00:01:02,100 --> 00:01:07,100
the API is api.openweathermap.org/data/2.5/weather. That's the end

111
00:01:10,560 --> 00:01:11,393
point.

112
00:01:11,400 --> 00:01:16,400
Whereas the hourly forecast is pro.openweathermap.org/data/2.5/forecasts

113
00:01:19,830 --> 00:01:24,450
/hourly. So depending on what it is that we need,

114
00:01:24,480 --> 00:01:27,990
we can tap into each of these different APIs.

115
00:01:28,800 --> 00:01:30,450
Let's start off with an easy one.

116
00:01:30,540 --> 00:01:34,140
Let's try and get the current weather data for the city that we're in.

117
00:01:34,740 --> 00:01:37,230
You can see that this part is the end point,

118
00:01:37,290 --> 00:01:39,780
so the URL that we're going to tap into.

119
00:01:40,320 --> 00:01:42,300
And then we have some parameters.

120
00:01:42,870 --> 00:01:47,870
The parameter where we can specify the city name is q.

121
00:01:48,510 --> 00:01:52,920
So that's the name of the parameter and then we have to provide a value.

122
00:01:53,460 --> 00:01:54,420
Now, in addition,

123
00:01:54,450 --> 00:01:59,450
there's another parameter which we have to include with all of the API calls to

124
00:02:00,450 --> 00:02:04,020
this particular service. And that is an app ID.

125
00:02:04,110 --> 00:02:09,110
We have to get hold of an API key in order to use this service. And they show you

126
00:02:10,350 --> 00:02:13,230
an example here. If we click on this URL,

127
00:02:13,530 --> 00:02:17,310
it takes us to samples.openweathermap.org

128
00:02:17,610 --> 00:02:22,470
and this is just some sample data where they provided a sample App ID.

129
00:02:23,100 --> 00:02:28,100
Now we can get our own app ID for free by simply signing up to this weather

130
00:02:28,440 --> 00:02:31,980
service. And once you register and sign in,

131
00:02:32,250 --> 00:02:33,960
this is the page that you see.

132
00:02:34,320 --> 00:02:39,320
So we can now go into this section called API keys and grab our API key here.

133
00:02:41,400 --> 00:02:43,770
So you can create as many keys as you want

134
00:02:43,830 --> 00:02:48,830
and you can provide a name that's associated with the final usage for that key.

135
00:02:49,650 --> 00:02:50,940
So I've named it Python.

136
00:02:51,360 --> 00:02:56,360
And now I'm going to copy this API key and I'm gonna place it into my project.

137
00:02:57,360 --> 00:03:01,900
So I've started a new project called rain alert and inside the main.py,

138
00:03:02,260 --> 00:03:04,990
I'm going to create a api_key

139
00:03:05,170 --> 00:03:10,170
and I'm going to save that key that I copied into a set of double quotes as a

140
00:03:11,530 --> 00:03:15,310
string. Now, once I've got my API key,

141
00:03:15,370 --> 00:03:17,950
I can actually test out this API call.

142
00:03:20,320 --> 00:03:24,100
So I can replace this part with my city name

143
00:03:24,160 --> 00:03:25,450
which is London,

144
00:03:25,840 --> 00:03:30,280
and then I can add my country afterwards just to make sure that it goes to

145
00:03:30,280 --> 00:03:34,090
London UK, and not London Ontario, or somewhere else.

146
00:03:34,870 --> 00:03:35,680
And then finally,

147
00:03:35,680 --> 00:03:40,680
I'm going to paste in the API key that I copied over just now. And now when I hit

148
00:03:41,470 --> 00:03:44,230
enter and as long as my API key is valid,

149
00:03:44,560 --> 00:03:48,760
I should get a result in the format of my weather data.

150
00:03:49,510 --> 00:03:54,310
Now I want you to make sure that your API key works as well by using the same

151
00:03:54,310 --> 00:03:55,143
method.

152
00:03:55,270 --> 00:04:00,250
But remember that you have to get hold of your own API key by signing up to open

153
00:04:00,250 --> 00:04:03,130
weather map if you want this to work.

154
00:04:03,580 --> 00:04:07,330
Make sure that you replace this part with your own API key.

155
00:04:07,750 --> 00:04:12,750
Otherwise, it's not going to work. Now that we've seen that this particular API

156
00:04:13,270 --> 00:04:14,920
call actually works,

157
00:04:15,400 --> 00:04:19,360
let's see what happens if we provide the wrong API key.

158
00:04:19,839 --> 00:04:23,800
So if I just make up an API key and hit enter,

159
00:04:24,100 --> 00:04:26,740
you can see we get a code back

160
00:04:26,800 --> 00:04:29,950
which has an HTTP code called 401.

161
00:04:30,400 --> 00:04:34,780
And we can also get a message telling us that that's an invalid API key

162
00:04:35,020 --> 00:04:38,530
and we can go to this URL for more info. Now,

163
00:04:38,560 --> 00:04:40,270
remember in previous lessons,

164
00:04:40,270 --> 00:04:45,270
I mentioned that HTTP status codes are the codes that we get back when we try to

165
00:04:45,790 --> 00:04:48,610
talk to another server. So in this case,

166
00:04:48,640 --> 00:04:53,110
we got the 401 code back which means unauthorized.

167
00:04:53,680 --> 00:04:56,770
And when you get this code back and you're working with an API, it

168
00:04:57,190 --> 00:05:02,190
usually means that your API key or your way of authorizing with the API key is

169
00:05:03,580 --> 00:05:08,080
somehow not working. So that is the thing that you should examine.

170
00:05:09,520 --> 00:05:12,790
We can see that for this particular API provider,

171
00:05:13,180 --> 00:05:18,180
we have to authenticate ourselves with their server by providing the API key as

172
00:05:19,540 --> 00:05:24,340
a parameter. So now I want to give you a challenge.

173
00:05:24,700 --> 00:05:28,900
I want you to go to the API doc for their one call API.

174
00:05:29,500 --> 00:05:33,610
This one call API gives you a bunch of things. It gives you the current

175
00:05:33,610 --> 00:05:38,350
weather, the minute forecasts for the next hour, the hourly forecasts for the

176
00:05:38,350 --> 00:05:42,280
next 48 hours, and the daily forecast for seven days.

177
00:05:43,030 --> 00:05:48,030
My challenge to you is to make an API request from PyCharm to the one call API

178
00:05:48,400 --> 00:05:53,400
and to locate the hourly forecasts for the next 48 hours in the JSON response

179
00:05:53,500 --> 00:05:56,710
that you get back. Now, I could tell you exactly what to do,

180
00:05:56,740 --> 00:06:01,310
but it's really good to get some practice reading API documentation

181
00:06:01,610 --> 00:06:03,140
because, after all, in the future

182
00:06:03,140 --> 00:06:05,420
you're going to be using loads of different APIs

183
00:06:05,480 --> 00:06:08,810
and they all have different ways of working with their services.

184
00:06:10,010 --> 00:06:13,250
Have a look at this page, I'll link to it in the course resources.

185
00:06:13,640 --> 00:06:18,640
And I want you to implement this API call by providing a latitude and longitude

186
00:06:19,580 --> 00:06:21,230
of where you currently are.

187
00:06:21,860 --> 00:06:26,860
Now you can leave this exclude parameter out and make sure that you add your

188
00:06:27,560 --> 00:06:32,360
personal app ID by getting hold of your API key. Now,

189
00:06:32,390 --> 00:06:36,230
remember you can get your current latitude and longitude just by going to

190
00:06:36,230 --> 00:06:39,380
latlong.net and then typing a place name,

191
00:06:39,470 --> 00:06:43,550
and then clicking find. Don't worry if it tells you a bot is detected.

192
00:06:43,550 --> 00:06:47,600
Just go back to the website after a little while and try it again.

193
00:06:47,780 --> 00:06:51,140
At some point, it should show you your latitude and longitude

194
00:06:51,410 --> 00:06:55,940
which you can then plug in as a parameter to this particular API call.

195
00:06:56,630 --> 00:06:59,120
So if you manage to work through all the lessons yesterday,

196
00:06:59,390 --> 00:07:03,350
then this should be a piece of cake for you. Pause the video and give that a go.

197
00:07:04,360 --> 00:07:05,193
Okay. 

198
00:07:09,880 --> 00:07:11,740
All right. So if that was hard at all,

199
00:07:11,980 --> 00:07:16,090
make sure that you've not skipped yesterday's lessons because I go through in

200
00:07:16,090 --> 00:07:19,570
detail, how to hit up a API endpoint,

201
00:07:19,570 --> 00:07:23,950
how to provide parameters and how to essentially complete this challenge.

202
00:07:24,580 --> 00:07:26,170
But hopefully you managed alright

203
00:07:26,290 --> 00:07:31,290
and you're just here to check the solution. As always we're going to start off by

204
00:07:31,510 --> 00:07:33,910
importing our requests package.

205
00:07:35,200 --> 00:07:39,850
Remember that if you're creating this file from scratch and you haven't

206
00:07:39,850 --> 00:07:42,010
downloaded it from a zip file,

207
00:07:42,310 --> 00:07:45,250
then you'll have to install this module manually.

208
00:07:45,370 --> 00:07:48,790
So if you click on it in PyCharm, you get a little red light bulb.

209
00:07:48,910 --> 00:07:53,080
And then when you click on the down arrow, you can install that package.

210
00:07:53,590 --> 00:07:57,430
Simple. Now, once you've got requests installed,

211
00:07:57,700 --> 00:08:01,750
we can use the get method to pass in our endpoint.

212
00:08:02,350 --> 00:08:04,870
Now the open weather map endpoint

213
00:08:06,580 --> 00:08:11,260
is the one that we see in the API docs. So it's everything up to,

214
00:08:11,260 --> 00:08:14,500
but not including, the question mark. So all of this.

215
00:08:15,040 --> 00:08:18,220
And we can paste that in and save it as a string.

216
00:08:18,970 --> 00:08:23,530
That is what we want to make our get requests to. So OWM endpoint.

217
00:08:24,220 --> 00:08:27,130
And in addition, we're going to provide some params.

218
00:08:27,280 --> 00:08:31,870
So this is going to determine what kind of data we get back. And in this case,

219
00:08:31,900 --> 00:08:36,010
it's going to be the weather for a particular location that we're interested in.

220
00:08:36,789 --> 00:08:40,419
Let's create our weather params,

221
00:08:40,929 --> 00:08:42,760
and this is going to be a dictionary.

222
00:08:43,240 --> 00:08:48,240
And we have to follow the keys that are provided in the API docs.

223
00:08:49,090 --> 00:08:53,110
So the parameters that we can provide for this API are lat

224
00:08:53,140 --> 00:08:56,280
which is the latitude, lon which is longitude.

225
00:08:56,520 --> 00:09:00,600
And a lot of people make typos here because they add a 'g.' It's actually just lon.

226
00:09:00,600 --> 00:09:05,490
That's the name of the parameter key. And then there's exclude

227
00:09:05,760 --> 00:09:10,760
which tells you which parts of the weather data you want to exclude.

228
00:09:11,580 --> 00:09:16,230
And finally, the app ID which is your API key that you got earlier on.

229
00:09:17,760 --> 00:09:21,480
In our case, we want to provide a lat, the latitude.

230
00:09:21,690 --> 00:09:25,530
We want to provide a lon, L-O-N, which is the longitude,

231
00:09:25,890 --> 00:09:30,480
and we also want to provide our app ID. Now our app ID is

232
00:09:30,480 --> 00:09:35,070
simple. It's simply the API key that we got earlier on. And again,

233
00:09:35,100 --> 00:09:37,890
just as a reminder, this key is not going to work.

234
00:09:37,920 --> 00:09:41,940
You'll have to register and get your own for it to work. Now,

235
00:09:41,970 --> 00:09:45,270
the latitude we're going to figure out by using latlong.net.

236
00:09:45,720 --> 00:09:49,890
So I'm trying to get the weather for where I currently reside, which is London.

237
00:09:50,280 --> 00:09:54,900
So my latitude is this value and my longitude is this value.

238
00:09:55,080 --> 00:09:59,550
Make sure that you copy everything including any negative signs like this.

239
00:10:01,230 --> 00:10:03,660
So these are going to go in as floating point numbers.

240
00:10:04,140 --> 00:10:06,270
And now that we've completed our

241
00:10:06,270 --> 00:10:09,600
weather params, we're going to pass it in to this method.

242
00:10:10,290 --> 00:10:15,290
And now we can save the output that comes from this as the response,

243
00:10:16,440 --> 00:10:21,440
and we can print the response.status_code to see if it was successful.

244
00:10:24,180 --> 00:10:28,440
So now let's go ahead and run our main.py and you can see the response code

245
00:10:28,440 --> 00:10:33,210
we get back is 200, which means everything is OK. Now,

246
00:10:33,240 --> 00:10:35,880
if you get a response code that's 401,

247
00:10:36,150 --> 00:10:39,030
that means your API key is probably not valid,

248
00:10:39,450 --> 00:10:42,750
or you misspelled the name of that key.

249
00:10:42,750 --> 00:10:45,180
It should be appid all in lowercase,

250
00:10:45,540 --> 00:10:47,970
as they've shown us in their documentation.

251
00:10:49,560 --> 00:10:51,510
If you did get 200 though,

252
00:10:51,540 --> 00:10:56,400
that means everything was successful and we can now tap into the actual data.

253
00:10:56,850 --> 00:11:01,590
So let's tap into the response.json, and let's print that out.

254
00:11:03,510 --> 00:11:04,560
So they're you have it.

255
00:11:04,590 --> 00:11:09,360
We've got all of the data here that came back from that API call.

256
00:11:09,450 --> 00:11:13,950
And if you scroll, there's actually quite a lot of data that's in there.

257
00:11:16,920 --> 00:11:21,360
Now, in order to view this, it's not very easy to look at it in the console.

258
00:11:21,390 --> 00:11:26,100
So I'm going to triple-click on this and copy all of that string

259
00:11:26,610 --> 00:11:30,570
and I'm going to view it in a online JSON viewer.

260
00:11:30,810 --> 00:11:34,140
So I'll link to this as well, but you want to pace that JSON

261
00:11:34,140 --> 00:11:38,460
you got back into this and you can see, wow, what a mess. So much data.

262
00:11:38,850 --> 00:11:41,280
But if you click on viewer then you can see

263
00:11:41,280 --> 00:11:46,280
it's nicely formatted all of that data for us to get the current data,

264
00:11:47,550 --> 00:11:51,300
or you can get the hourly data or the daily data.

265
00:11:52,230 --> 00:11:56,110
So this is the data that's effective for this latitude and longitude

266
00:11:56,440 --> 00:12:00,160
and this is the current time zone we're in. So in my case,

267
00:12:00,190 --> 00:12:04,570
I want to know the hourly data for the next 12 hours.

268
00:12:04,900 --> 00:12:09,880
So I can expand this list and you can see they're 48 data points here.

269
00:12:10,630 --> 00:12:12,460
If we take a look at each of those,

270
00:12:12,520 --> 00:12:17,380
they give us a timestamp for when this predicted weather is valid,

271
00:12:17,800 --> 00:12:22,240
the temperature in Kelvins, the pressure, humidity,

272
00:12:22,510 --> 00:12:24,850
but also the actual weather data.

273
00:12:25,450 --> 00:12:30,310
The weather data is a list which contains a bunch of dictionaries. In this case

274
00:12:30,310 --> 00:12:34,510
there's only one and it's telling us that right now, where I am in London,

275
00:12:34,540 --> 00:12:38,800
there's scattered clouds, which is pretty normal

276
00:12:38,860 --> 00:12:41,620
if you've ever been to London. At least it's not raining.

277
00:12:43,030 --> 00:12:46,900
We've now managed to use this open weather app API,

278
00:12:47,290 --> 00:12:52,290
authenticate ourselves with an API key, and get the required data back from the

279
00:12:53,140 --> 00:12:55,480
service. So in the next lesson,

280
00:12:55,510 --> 00:12:57,550
we're going to dig into the data that we got back

281
00:12:57,880 --> 00:13:01,210
and we're going to use it to figure out whether if it's going to rain today.

282
00:13:01,720 --> 00:13:04,570
So for all of that and more, I'll see you on the next lesson.


283
00:00:00,450 --> 00:00:03,600
In order to create my rain alert Python script.

284
00:00:03,840 --> 00:00:07,590
I want the script to be run every morning at 7:00 AM.

285
00:00:08,039 --> 00:00:12,330
Let's say that I'm going to head out of the door at 8:00 AM in order to go to

286
00:00:12,330 --> 00:00:16,020
work, I want my script to run at 7:00 AM,

287
00:00:16,110 --> 00:00:18,570
check the weather for the next 12 hours,

288
00:00:18,720 --> 00:00:23,310
so the time when I'm going to be away from home, and then send me a text message

289
00:00:23,370 --> 00:00:24,540
if it's going to rain today

290
00:00:24,780 --> 00:00:28,980
so that I can remember to bring an umbrella. That way I'll get notified before I

291
00:00:28,980 --> 00:00:31,770
leave home and I'll know how to prepare for the day.

292
00:00:33,240 --> 00:00:37,830
The data that we got back from open weather map contains the hourly

293
00:00:37,880 --> 00:00:41,810
weather forecast for the next 48 hours.

294
00:00:42,260 --> 00:00:45,260
So it starts from zero and goes up to 47.

295
00:00:45,800 --> 00:00:49,250
Now we're only interested in the next 12 hours

296
00:00:49,340 --> 00:00:53,030
because, if you imagine, this script is run at 7:00 AM

297
00:00:53,360 --> 00:00:58,220
then plus 12 hours, that's going to be 7:00 PM. By which time,

298
00:00:58,250 --> 00:01:00,200
hopefully I'm already on the way home

299
00:01:00,500 --> 00:01:05,000
and I don't need to worry about whether if it rains or not. That's the goal.

300
00:01:05,090 --> 00:01:07,700
And if we head back into our code,

301
00:01:08,030 --> 00:01:11,600
what we want to do is firstly modify certain parts.

302
00:01:12,170 --> 00:01:14,180
Now we know that at the moment,

303
00:01:14,240 --> 00:01:18,980
the response code that we're getting back from calling this API is 200.

304
00:01:19,010 --> 00:01:22,850
So it's successful. So we're going to call raise for status

305
00:01:22,880 --> 00:01:27,880
so that if there is right a problem and we don't get a 200 code that we

306
00:01:28,400 --> 00:01:31,370
actually raise an exception. Now,

307
00:01:31,400 --> 00:01:36,400
next we want to save our response.json as the weather data.

308
00:01:38,120 --> 00:01:41,450
And then we're going to work with this data in order to get the particular

309
00:01:41,450 --> 00:01:46,370
pieces that we're interested in. So if we look at this JSON that

310
00:01:46,370 --> 00:01:50,630
we get back, firstly, we don't really care about the current weather or

311
00:01:50,980 --> 00:01:52,160
the daily weather.

312
00:01:52,610 --> 00:01:56,390
So when we look at the API documentation

313
00:01:56,780 --> 00:01:58,850
which is probably the hardest part,

314
00:01:59,090 --> 00:02:03,020
making sure that you're diligent enough to read the entire documentation,

315
00:02:03,380 --> 00:02:07,280
there's often some good nuggets in there. For example, in this case,

316
00:02:07,340 --> 00:02:10,610
we can add another parameter called exclude

317
00:02:10,970 --> 00:02:15,970
which allows us to exclude some parts of the weather data that comes from the

318
00:02:15,980 --> 00:02:20,210
API. This should speed up the API fetching process

319
00:02:20,270 --> 00:02:24,800
and it also means that we're transferring less data across the internet. So we

320
00:02:24,800 --> 00:02:28,400
can get rid of the current, minutely and daily.

321
00:02:28,430 --> 00:02:33,140
We're only interested in the hourly and we have to provide this as a comma-

322
00:02:33,140 --> 00:02:37,940
delimited list. So if we take a look at their example, you can see here,

323
00:02:37,940 --> 00:02:42,170
they've said exclude and then they've said hourly, daily.

324
00:02:42,440 --> 00:02:46,400
And notice how it says without spaces. So as I always say,

325
00:02:46,430 --> 00:02:49,100
this is like going into somebody else's house.

326
00:02:49,130 --> 00:02:52,550
Everything is different. The way that the washing machine works is different,

327
00:02:52,550 --> 00:02:54,560
the way that their dryer works is different.

328
00:02:54,830 --> 00:02:59,350
So you really have to look at the API documentation when you were working

329
00:02:59,350 --> 00:03:02,110
with a new API just so that you're not caught out

330
00:03:02,170 --> 00:03:07,170
and you understand exactly what you have to do in order to be a good API user.

331
00:03:09,040 --> 00:03:13,930
Let's go back into our code and let's provide that extra parameter.

332
00:03:14,020 --> 00:03:16,630
So that was called exclude.

333
00:03:17,560 --> 00:03:22,120
And the thing that we want to exclude is going to be provided as a string.

334
00:03:22,630 --> 00:03:25,750
So we want to get rid of current, minutely and daily.

335
00:03:25,840 --> 00:03:30,670
So we're going to add that into the string and make sure that we separate each

336
00:03:30,700 --> 00:03:32,740
with a comma and without spaces.

337
00:03:33,300 --> 00:03:34,133
okay.

338
00:03:35,460 --> 00:03:36,930
Now when we hit run

339
00:03:37,020 --> 00:03:41,010
and when we get back our weather data and we print it out

340
00:03:42,570 --> 00:03:47,550
and we copy this and put it into our online JSON viewer,

341
00:03:49,350 --> 00:03:52,170
so let's replace all of the stuff that was there before

342
00:03:52,500 --> 00:03:55,560
and you can see the JSON we're getting back is now a lot simpler.

343
00:03:55,890 --> 00:03:57,960
We're only getting back the hourly weather

344
00:03:58,380 --> 00:03:59,213
forecast.

345
00:04:00,930 --> 00:04:02,040
So that's step one done.

346
00:04:02,400 --> 00:04:07,400
The next step is to dig through this hourly forecast and get hold of the thing

347
00:04:08,280 --> 00:04:12,270
that we're interested in, which is the actual weather condition.

348
00:04:13,080 --> 00:04:17,790
The way that weather services tend to provide the weather condition is through

349
00:04:17,790 --> 00:04:18,630
an ID.

350
00:04:19,200 --> 00:04:22,800
And I know this because I read the API documentation.

351
00:04:23,610 --> 00:04:28,230
It's not because I'm some sort of weather geek. Although, I mean,

352
00:04:28,230 --> 00:04:29,550
that's not a bad thing to be

353
00:04:29,550 --> 00:04:34,110
I guess. If we take a look inside the API key,

354
00:04:35,220 --> 00:04:39,930
if we scroll down in this documentation past the examples,

355
00:04:40,230 --> 00:04:44,550
you can see it provides all of the fields in the API response. So these are

356
00:04:44,550 --> 00:04:48,600
all of the things that we could possibly get back and what they mean.

357
00:04:49,050 --> 00:04:54,050
And you can see there's some really interesting things like the UV index or you

358
00:04:54,090 --> 00:04:55,170
can get, um,

359
00:04:55,200 --> 00:04:59,940
what does the temperature feel like based on the wind chill and actual ground

360
00:04:59,940 --> 00:05:00,773
temperature.

361
00:05:01,290 --> 00:05:05,040
But what we're mostly interested in is the hourly data.

362
00:05:05,460 --> 00:05:08,250
And then inside that the hourly weather data.

363
00:05:08,820 --> 00:05:13,820
So this hourly.weather.id is a weather condition id.

364
00:05:14,880 --> 00:05:16,290
And when you click on that link,

365
00:05:16,320 --> 00:05:21,120
it takes you to this table that shows you all of the weather condition codes

366
00:05:21,120 --> 00:05:25,350
that we could possibly get back in this particular field.

367
00:05:26,400 --> 00:05:31,400
Now you can see that all the codes that start off with a two means some sort of

368
00:05:32,280 --> 00:05:35,130
thunderstorm, and then starting with three

369
00:05:35,130 --> 00:05:39,390
that means some sort of drizzling starting, with five means rain, starting with

370
00:05:39,390 --> 00:05:43,830
six means snow. And then afterward we have the seven hundreds

371
00:05:43,830 --> 00:05:47,400
so these are atmospheric. Thing's like a bit of mist, a bit of smoke,

372
00:05:47,670 --> 00:05:51,240
a bit of dust or fog. And this is also incidentally,

373
00:05:51,240 --> 00:05:56,240
the reason why this weather key actually has a value that's in the form of

374
00:05:57,230 --> 00:06:01,130
a list. You can see that's denoted by the square brackets here.

375
00:06:01,610 --> 00:06:06,610
So there could actually be multiple weather conditions for a particular place

376
00:06:06,980 --> 00:06:11,420
at a particular hour. And that's because you could maybe have, um,

377
00:06:11,450 --> 00:06:16,310
snow, but you could also have fog at the same time. Now,

378
00:06:16,310 --> 00:06:20,030
when I looked through a lot of the examples and the documentation,

379
00:06:20,330 --> 00:06:24,830
it seems like the first item in that list is the main condition.

380
00:06:25,100 --> 00:06:28,550
So if it's going to rain, then it's going to be in that first item

381
00:06:28,550 --> 00:06:32,510
in the list of weather conditions. Inside that list,

382
00:06:32,540 --> 00:06:35,390
we have a dictionary or many dictionaries.

383
00:06:35,990 --> 00:06:38,960
Each of those contain a weather condition ID,

384
00:06:39,230 --> 00:06:41,960
the main condition name and the description.

385
00:06:42,620 --> 00:06:45,770
So if we look at this ID code 802,

386
00:06:45,800 --> 00:06:50,510
we can decode it in this table and you can see it means scattered clouds,

387
00:06:50,900 --> 00:06:54,140
25 to 50% of the sky is covered in clouds basically.

388
00:06:55,730 --> 00:06:56,960
Based on this list,

389
00:06:56,990 --> 00:07:01,580
we can say that well anything that has a code less than 700,

390
00:07:01,910 --> 00:07:04,580
then we probably will need an umbrella.

391
00:07:05,090 --> 00:07:09,200
I'm not sure how you stand on the umbrella in snow situation

392
00:07:09,530 --> 00:07:13,460
but I personally do like to hold an umbrella when it's snowing,

393
00:07:13,490 --> 00:07:17,210
especially because I live in a country where the snow is not crazy.

394
00:07:17,210 --> 00:07:18,200
It's just sort of,

395
00:07:19,580 --> 00:07:24,580
it's never sort of the beautiful snow where it's thick and it gets caught on

396
00:07:24,890 --> 00:07:28,100
your eyelashes. It's is the sort of annoying slush

397
00:07:28,130 --> 00:07:32,840
that's just sort of snow, but it sort of like somebody spitting at you.

398
00:07:33,560 --> 00:07:38,240
So in my case, I would prefer to have an umbrella if it was going to snow.

399
00:07:39,020 --> 00:07:43,340
I'm going to check for the codes that we get back from the open weather map

400
00:07:43,370 --> 00:07:46,790
API, and if the code is less than 700,

401
00:07:47,060 --> 00:07:50,570
then I'm going to advise my user to bring an umbrella.

402
00:07:52,490 --> 00:07:54,440
Here's a challenge for you.

403
00:07:54,890 --> 00:07:58,940
Can you figure out how to look through the data that we get back,

404
00:07:59,000 --> 00:08:03,860
which remember looks something like this, get hold of

405
00:08:03,880 --> 00:08:06,130
the first 12

406
00:08:06,190 --> 00:08:08,830
items from that hourly list.

407
00:08:09,520 --> 00:08:14,520
And then look at the weather and the first item in the weather list and also the

408
00:08:16,540 --> 00:08:20,830
ID. So you are going to go all the way down to this, but remember,

409
00:08:20,830 --> 00:08:22,900
you're going to do that for all of the items

410
00:08:23,410 --> 00:08:26,260
and you're going to check for the condition code. Now,

411
00:08:26,290 --> 00:08:31,290
if any of those ID codes are less than 700 then you want to be able to print

412
00:08:31,900 --> 00:08:33,280
out, bring an umbrella.

413
00:08:33,880 --> 00:08:38,080
So that's the goal, and the actual implementation

414
00:08:38,140 --> 00:08:41,049
I'll leave up to you because there's quite a few ways that you can do this.

415
00:08:41,350 --> 00:08:46,350
But I'm sure by now you're well prepared with all of your tools in Python to

416
00:08:46,450 --> 00:08:51,340
figure this out. If you want to make sure that your code is actually working,

417
00:08:51,760 --> 00:08:55,860
you can switch to a latitude and longitude that is definitely raining.

418
00:08:56,430 --> 00:08:59,580
So if you go to ventusky.com,

419
00:08:59,700 --> 00:09:02,610
they actually show you the live weather forecast.

420
00:09:02,940 --> 00:09:06,480
So we can look at precipitation, which is basically rain.

421
00:09:06,870 --> 00:09:09,540
And we can find some sort of unfortunate place

422
00:09:09,570 --> 00:09:13,320
which seems to be really heavily raining. For example,

423
00:09:13,320 --> 00:09:15,300
this place in Poland, Lodz,

424
00:09:15,870 --> 00:09:18,960
and if I spell that name correctly,

425
00:09:21,890 --> 00:09:22,400
right,

426
00:09:22,400 --> 00:09:25,430
Lodz, and then I'll add the country code Poland.

427
00:09:26,120 --> 00:09:28,280
And just to make sure in the map

428
00:09:28,310 --> 00:09:32,480
it's actually found the correct place. Yep that looks pretty much it.

429
00:09:32,840 --> 00:09:37,190
Then I can switch out my latitude and longitude with this rainy place.

430
00:09:37,850 --> 00:09:42,770
And that way I know that at least one of the results I get back is definitely

431
00:09:42,770 --> 00:09:44,870
going to contain some sort of rain

432
00:09:45,380 --> 00:09:46,213
right.

433
00:09:47,960 --> 00:09:50,120
Now if we look at their hourly data,

434
00:09:50,180 --> 00:09:54,710
you can see that the weather is basically just rain, rain, rain.

435
00:09:55,370 --> 00:09:59,600
So between looking at places which are sunny and places

436
00:09:59,600 --> 00:10:00,740
which are rainy,

437
00:10:00,950 --> 00:10:05,480
you should be able to get your code to work so that it tells you in the next 12

438
00:10:05,480 --> 00:10:06,200
hours

439
00:10:06,200 --> 00:10:10,730
if any of those condition codes are less than 700,

440
00:10:10,910 --> 00:10:13,670
which means it's got some form of precipitation.

441
00:10:14,840 --> 00:10:16,550
Pause the video and give this a go.

442
00:10:21,170 --> 00:10:21,890
Now.

443
00:10:21,890 --> 00:10:24,380
All right. So let's narrow down into this

444
00:10:24,410 --> 00:10:29,390
weather. If we want to get the weather for the next hour,

445
00:10:29,510 --> 00:10:34,130
then we have to tap into the first item in our hourly list

446
00:10:34,520 --> 00:10:36,140
and then we get hold of the weather

447
00:10:36,230 --> 00:10:41,180
and then we get hold of the first item in that list. Under the ID key,

448
00:10:41,240 --> 00:10:42,560
we'll get the actual value.

449
00:10:43,220 --> 00:10:46,040
We've talked about this in detail in previous lessons.

450
00:10:46,220 --> 00:10:49,670
If you've skipped a lot of lessons and you've come here directly,

451
00:10:50,030 --> 00:10:52,160
then it's going to be a little bit confusing

452
00:10:52,250 --> 00:10:55,850
and I recommend to review the previous lessons before you continue.

453
00:10:56,780 --> 00:10:59,660
Instead of printing the weather data, let's drill down.

454
00:10:59,990 --> 00:11:03,200
Let's get to the first item here, which is hourly.

455
00:11:04,010 --> 00:11:08,990
If we provide a set of square brackets and then we can access the value inside

456
00:11:08,990 --> 00:11:11,600
the hourly key like this.

457
00:11:12,140 --> 00:11:17,140
And now we've got a list with all of the hourly data and it looks pretty much

458
00:11:18,050 --> 00:11:19,100
like this.

459
00:11:20,450 --> 00:11:25,100
Now you can confirm this by also pasting this into the JSON viewer,

460
00:11:25,460 --> 00:11:28,520
replacing the previous text that was there. You can see

461
00:11:28,520 --> 00:11:33,520
we now have our 48 items in this list of hourly data. To drill further down,

462
00:11:35,210 --> 00:11:40,210
let's get hold of the first item in that list by providing a square bracket

463
00:11:40,520 --> 00:11:42,890
and then the index, which is zero.

464
00:11:43,580 --> 00:11:48,580
Now we're into the first item and this is what the data looks like.

465
00:11:48,680 --> 00:11:49,700
It's a lot shorter.

466
00:11:50,540 --> 00:11:53,710
Now we want to tap into the weather condition.

467
00:11:54,400 --> 00:11:59,320
So that means yet another set of square brackets and then the name of the key,

468
00:11:59,380 --> 00:12:03,280
which is weather. Now, it's pretty simple.

469
00:12:03,310 --> 00:12:07,720
It's simply giving us a list with only one item.

470
00:12:08,050 --> 00:12:12,100
Let's tap into that one item by using, again,

471
00:12:12,370 --> 00:12:13,810
square brackets, zero.

472
00:12:14,590 --> 00:12:18,970
And now we've got just a simple dictionary

473
00:12:19,000 --> 00:12:21,850
essentially. So if you want to get hold of the ID,

474
00:12:21,910 --> 00:12:25,990
then its the final square brackets and the key

475
00:12:26,110 --> 00:12:31,110
which is ID. The current weather data ID code is 500 and that, of course, refers to

476
00:12:35,770 --> 00:12:36,970
light rain.

477
00:12:38,770 --> 00:12:43,770
The next problem is how do we get hold of the first 12 items that we get back in

478
00:12:44,380 --> 00:12:48,790
our weather data? In previous lessons, we covered the Python

479
00:12:48,790 --> 00:12:49,810
slice function

480
00:12:49,840 --> 00:12:54,840
which could work for this by simply providing a value and slicing a sequence

481
00:12:55,780 --> 00:13:00,780
like a list or tuple to get hold of a particular section of that list or

482
00:13:01,300 --> 00:13:06,100
tuple. Now you can also use the Python slice operator

483
00:13:06,130 --> 00:13:08,710
which is the square bracket and a colon

484
00:13:09,190 --> 00:13:12,820
and this is probably a more pythonic way of doing things.

485
00:13:13,150 --> 00:13:18,010
And you'll see more people doing this in the wild than using the slice function.

486
00:13:18,160 --> 00:13:21,640
So let's do it with this notation. We're going to use this version.

487
00:13:21,640 --> 00:13:26,640
So we're going to tap into a list and then provide a colon and then where we

488
00:13:26,680 --> 00:13:30,550
want to stop because we want to go from the beginning of the list through to

489
00:13:30,580 --> 00:13:31,750
stop-1.

490
00:13:33,190 --> 00:13:38,190
We know that it's this part of our code that gets us to our list of hourly

491
00:13:38,920 --> 00:13:43,420
weather forecasts. So we want to create a slice from that data.

492
00:13:44,260 --> 00:13:46,840
So let's copy that and comment this line out.

493
00:13:47,290 --> 00:13:50,050
And then I'm going to create my weather slice

494
00:13:50,560 --> 00:13:55,560
which is going to be generated from the weather data under the key called

495
00:13:55,990 --> 00:13:58,720
hourly. If I print this,

496
00:13:58,750 --> 00:14:03,750
you can see it starts off just simply being a list with all of the weather

497
00:14:04,120 --> 00:14:07,960
forecasts. Now, if I go ahead and slice this,

498
00:14:08,050 --> 00:14:11,920
I'll use that syntax that you saw earlier on where we have a square bracket,

499
00:14:12,370 --> 00:14:15,670
a colon, and then where we want our slice to end.

500
00:14:16,270 --> 00:14:21,270
And we want this slice to go from zero all the way up to hour 11,

501
00:14:22,330 --> 00:14:26,440
so that's 12 hours in total. So if we want to go up to 11,

502
00:14:26,470 --> 00:14:30,460
then we have to put 12 in here because it's going to be whatever number here,

503
00:14:30,520 --> 00:14:34,330
minus one. And now if we print this data that we get back,

504
00:14:34,380 --> 00:14:35,213
and

505
00:14:36,630 --> 00:14:40,440
we replaced the existing text inside our JSON viewer,

506
00:14:40,800 --> 00:14:41,880
then we take a look at it

507
00:14:41,880 --> 00:14:46,880
you can see we've got the next 12 hours of weather data from 0 to 11.

508
00:14:49,470 --> 00:14:52,520
Once we've got that slice, the next step is, well,

509
00:14:52,520 --> 00:14:54,980
how do we get the rest of the stuff, right?

510
00:14:55,400 --> 00:15:00,230
What if I created a new list that contains the condition codes?

511
00:15:01,970 --> 00:15:06,970
We know that we've got a list of all of the weather conditions for the next 12

512
00:15:07,700 --> 00:15:08,533
hours.

513
00:15:08,870 --> 00:15:13,870
How can we loop through that list to find out the actual ID of the weather

514
00:15:14,750 --> 00:15:18,500
condition for each of those hours? Well,

515
00:15:18,500 --> 00:15:23,500
we can create a for loop that looks at each of the data from the hour,

516
00:15:23,960 --> 00:15:27,350
so for hour_data in weather_slice,

517
00:15:27,680 --> 00:15:30,410
so this is going to go through each of the 12 hours.

518
00:15:30,470 --> 00:15:32,030
And then for each of those hours,

519
00:15:32,240 --> 00:15:37,240
we're going to tap into the hour_data and try to get hold of the item that is in

520
00:15:38,240 --> 00:15:42,410
the weather key. Like this.

521
00:15:43,550 --> 00:15:48,550
Now I'm going to print each of these and you can see we've now got a list of all

522
00:15:51,350 --> 00:15:55,400
of the weather conditions for each of those hours.

523
00:15:55,940 --> 00:15:58,610
Now let's narrow down that a little bit further.

524
00:15:59,000 --> 00:16:02,990
Let's get hold of the first item of each of these lists and you can see,

525
00:16:02,990 --> 00:16:05,840
in fact, there's only one item in all of these lists.

526
00:16:06,140 --> 00:16:10,490
It's very rare that you have multiple weather conditions for each hour.

527
00:16:11,600 --> 00:16:15,950
Now, that gives us a Python dictionary for each of those hours

528
00:16:16,340 --> 00:16:21,080
and we can tap into that final value we're interested in under the key id.

529
00:16:21,980 --> 00:16:26,980
So now we've looped through the next 12 hours and got hold of the weather

530
00:16:28,640 --> 00:16:32,900
condition id for each of those hours. Now,

531
00:16:32,930 --> 00:16:37,930
all we need to do is to save this instead of printing it and we'll call it the

532
00:16:39,380 --> 00:16:40,520
condition_code.

533
00:16:40,960 --> 00:16:41,793
Yeah.

534
00:16:44,440 --> 00:16:49,270
And remember previously we said that if the condition code is less than 700,

535
00:16:49,540 --> 00:16:52,240
then we're going to print bring an umbrella.

536
00:16:53,170 --> 00:16:55,780
So we can check if condition_code,

537
00:16:56,140 --> 00:16:59,350
which remember at this point is still a string

538
00:16:59,740 --> 00:17:04,740
so we have to turn that into an integer in order to be able to compare it

539
00:17:05,230 --> 00:17:06,520
against another number.

540
00:17:07,210 --> 00:17:11,410
If that condition_code as an integer is less than 700,

541
00:17:11,770 --> 00:17:15,040
then we're going to print bring an umbrella,

542
00:17:15,310 --> 00:17:16,143
right?

543
00:17:17,740 --> 00:17:20,290
And you can see that for the next 12 hours

544
00:17:20,589 --> 00:17:25,359
there's six hours which are going to rain at this particular place

545
00:17:25,510 --> 00:17:29,620
in Lodz in Poland that I've put into that latitude and longitude.

546
00:17:30,550 --> 00:17:34,840
Now, if I don't want to call this print statement many times,

547
00:17:35,410 --> 00:17:37,650
then we can define a variable outside

548
00:17:37,670 --> 00:17:42,400
the for loop called will_rain and we can set that to false

549
00:17:42,460 --> 00:17:46,360
to begin with. Now, if during the next 12 hours

550
00:17:46,360 --> 00:17:51,210
the condition_code is less than 700, then we'll switch that to equal

551
00:17:51,390 --> 00:17:53,910
true instead. Now,

552
00:17:54,690 --> 00:17:56,550
after the for loop has completed,

553
00:17:56,850 --> 00:18:01,440
then we can check to see if it will rain in the next 12 hours. And if so,

554
00:18:01,440 --> 00:18:04,980
we'll print bring an umbrella. This way

555
00:18:05,010 --> 00:18:09,420
we'll only get one print statement being called instead of every single time we

556
00:18:09,420 --> 00:18:12,090
land on a condition code for rain.

557
00:18:12,990 --> 00:18:17,990
So this involved quite a bit of JSON passing and also understanding how to work

558
00:18:20,190 --> 00:18:22,920
with parameters in APIs. Now,

559
00:18:22,950 --> 00:18:25,140
I hope you managed to get this far by yourself.

560
00:18:25,200 --> 00:18:29,970
But if not, be sure to review what I've written and fix your code as required.

561
00:18:30,420 --> 00:18:31,950
If any of it was confusing,

562
00:18:32,010 --> 00:18:35,010
be sure to review previous lessons before you continue

563
00:18:35,250 --> 00:18:39,270
because we're now building heavily on your previous knowledge that you learnt

564
00:18:39,300 --> 00:18:42,480
through the course. Now in the next lesson,

565
00:18:42,510 --> 00:18:45,930
we're going to be looking at how we can, instead of printing

566
00:18:45,960 --> 00:18:50,960
bring an umbrella, to send a SMS text message that notifies you to bring an

567
00:18:52,650 --> 00:18:56,400
umbrella instead. So for all of that and more,

568
00:18:56,700 --> 00:18:57,900
I'll see you on the next lesson.


569
00:00:00,240 --> 00:00:03,750
Now that we've got the hard part out of the way, figuring out when it's

570
00:00:03,750 --> 00:00:04,740
actually going to rain,

571
00:00:05,100 --> 00:00:10,050
the next step is to figure out how we can send this as an alert to our phone

572
00:00:10,050 --> 00:00:13,920
number, using an SMS service. So for that,

573
00:00:13,950 --> 00:00:16,230
we're going to need to use a different API.

574
00:00:16,560 --> 00:00:21,560
The Twilio API. Twilio is an API service that allows us to send text messages or

575
00:00:24,390 --> 00:00:28,740
phone calls or have a virtual phone number in any country.

576
00:00:29,070 --> 00:00:31,140
And if you take a look at their front page,

577
00:00:31,410 --> 00:00:35,310
you can see there's actually a whole bunch of things you can do with the Twilio

578
00:00:35,310 --> 00:00:35,850
API.

579
00:00:35,850 --> 00:00:40,850
You could build an ordering system, you could create a video app,

580
00:00:41,250 --> 00:00:45,330
you could have SMS to email, whole bunch of things basically. Now,

581
00:00:45,360 --> 00:00:46,830
in order to create the service,

582
00:00:46,830 --> 00:00:51,150
they obviously had to build a lot of infrastructure and they've invested a lot

583
00:00:51,360 --> 00:00:53,940
into making this seamless and work well.

584
00:00:54,360 --> 00:00:57,150
So that's why if you look at the pricing section,

585
00:00:57,330 --> 00:01:01,560
they do charge for their service if you're using it a lot.

586
00:01:02,070 --> 00:01:06,540
Now, in our case, we're going to get started using some trial credit.

587
00:01:06,840 --> 00:01:09,240
So they're going to give us $10 of trial credit

588
00:01:09,300 --> 00:01:14,100
and we can test out all of the API and use any of their features.

589
00:01:14,730 --> 00:01:17,700
First, go ahead and click on, get started for free,

590
00:01:19,350 --> 00:01:23,160
and you'll need to sign up to get a free Twilio account.

591
00:01:23,460 --> 00:01:26,280
No credit card required. Now,

592
00:01:26,310 --> 00:01:28,980
if you don't want to learn how to send a text message to yourself,

593
00:01:29,220 --> 00:01:31,710
that's also perfectly fine. You don't have to sign up.

594
00:01:31,740 --> 00:01:35,430
You can just do what we did previously using email.

595
00:01:36,240 --> 00:01:37,860
Once you've signed up with Twilio,

596
00:01:37,890 --> 00:01:42,630
you'll have to confirm your email and also confirm your actual phone number.

597
00:01:43,890 --> 00:01:48,000
Once you've completed confirming your email and your phone number,

598
00:01:48,330 --> 00:01:50,520
then it's going to take you to the console

599
00:01:50,580 --> 00:01:53,880
and it's going to ask you a few questions. Do you write code? Yes,

600
00:01:53,880 --> 00:01:57,060
of course we do. What's your preferred language? Python.

601
00:01:57,570 --> 00:01:59,370
And what's your goal today? Well,

602
00:01:59,370 --> 00:02:03,690
we're going to use Twilio in a project. And the first thing we want to do is to

603
00:02:03,690 --> 00:02:05,520
send or receive SMS.

604
00:02:06,810 --> 00:02:11,810
So now it's going to take us to our Twilio project dashboard and it starts off

605
00:02:13,170 --> 00:02:15,540
by giving us some trial money.

606
00:02:15,960 --> 00:02:20,960
So this is the money that we can use to test out and use the Twilio API.

607
00:02:22,560 --> 00:02:26,250
Let's first start by clicking on get a trial number,

608
00:02:26,940 --> 00:02:31,440
and it's going to generate for you a automatic number from the US.

609
00:02:32,070 --> 00:02:33,000
Now, if you want to,

610
00:02:33,000 --> 00:02:38,000
you can buy a number from a different country and you can start typing any of

611
00:02:38,340 --> 00:02:40,350
these numbers. But in our case,

612
00:02:40,350 --> 00:02:43,050
it doesn't actually matter where the number is from.

613
00:02:43,350 --> 00:02:48,350
We can simply just get the default number and click on choose this number.

614
00:02:51,810 --> 00:02:56,810
So now we have a new phone number based in the US. We're ready to click done and

615
00:02:57,330 --> 00:03:02,200
start using that Twilio number to send ourselves some SMS messages.

616
00:03:02,920 --> 00:03:06,700
Now we're going ahead over to docs and we're going to go over to QuickStarts.

617
00:03:08,260 --> 00:03:12,970
Now, what we want to do is to follow this guide, the programmable SMS

618
00:03:12,970 --> 00:03:16,810
quick start, in order to start sending SMS messages.

619
00:03:17,320 --> 00:03:20,710
So we're going to click on the Python section of that Quickstart,

620
00:03:21,130 --> 00:03:22,300
and you can see on the right,

621
00:03:22,660 --> 00:03:27,430
it gives us the example code that we need to implement in order to make this

622
00:03:27,460 --> 00:03:28,293
work.

623
00:03:28,840 --> 00:03:33,840
The first thing we need to do is to download the Twilio library in order to use

624
00:03:33,940 --> 00:03:36,310
it to import this client class.

625
00:03:36,880 --> 00:03:39,970
Let's go ahead and copy this into our project.

626
00:03:40,480 --> 00:03:43,630
So right below where we've got import requests,

627
00:03:44,110 --> 00:03:48,040
let's go ahead and paste this line of code that we copied.

628
00:03:48,490 --> 00:03:51,070
And you'll notice that it has some red underlines.

629
00:03:51,340 --> 00:03:54,760
This is because we need to install this Twilio module.

630
00:03:55,090 --> 00:03:57,550
So clicking on that underlined Twilio,

631
00:03:57,580 --> 00:04:01,030
we can click on the red light bulb and install this package.

632
00:04:01,840 --> 00:04:02,860
Once that's done,

633
00:04:02,860 --> 00:04:07,660
all of the errors should go away and we can now start using this client class.

634
00:04:08,380 --> 00:04:10,480
Going back to the example code.

635
00:04:10,870 --> 00:04:13,390
We need to copy down our account

636
00:04:13,390 --> 00:04:16,060
sid and our auth token.

637
00:04:16,540 --> 00:04:20,079
We can get these details from the Twilio dashboard.

638
00:04:20,529 --> 00:04:25,530
Notice here that this account sid is basically the identification for my

639
00:04:26,290 --> 00:04:30,820
Twilio account. And the auth token we'll need to get from the dashboard.

640
00:04:31,540 --> 00:04:34,090
If we go to the console here on the top right,

641
00:04:35,800 --> 00:04:38,830
and we copy this auth token here,

642
00:04:39,190 --> 00:04:41,230
or you can click on show to see it,

643
00:04:42,040 --> 00:04:46,660
then we can paste it in here and replace this auth token.

644
00:04:47,290 --> 00:04:49,480
And just for consistency sake,

645
00:04:49,510 --> 00:04:52,780
I'm going to change this single quote to double quote.

646
00:04:54,160 --> 00:04:58,390
So these are both strings. Now, as I mentioned before,

647
00:04:58,420 --> 00:05:02,710
these IDs that you see on screen are not going to work for you.

648
00:05:03,040 --> 00:05:08,020
So make sure that you've actually logged on and confirmed all your details

649
00:05:08,200 --> 00:05:11,560
so you can get your own account sid and auth token.

650
00:05:13,090 --> 00:05:17,410
Now let's head back to our quick start and we've done all of this.

651
00:05:17,980 --> 00:05:22,980
What we need to do now is to set up a Twilio client using our account sid and

652
00:05:24,040 --> 00:05:24,873
auth token.

653
00:05:25,600 --> 00:05:29,590
Let's go ahead and create our client at the point where we want to send

654
00:05:29,590 --> 00:05:31,750
ourselves a SMS message.

655
00:05:32,170 --> 00:05:36,430
So I'm going to delete all of this. And instead of the print statement,

656
00:05:36,700 --> 00:05:39,790
we're going to set up our Twilio client. Next,

657
00:05:39,820 --> 00:05:41,710
we're going to create our message.

658
00:05:41,800 --> 00:05:44,920
So this is the message that we're going to send ourselves.

659
00:05:45,550 --> 00:05:47,950
The part that we need to change is the body.

660
00:05:48,040 --> 00:05:50,740
So this is the text that we're going to send ourselves.

661
00:05:51,280 --> 00:05:52,690
And then we're going to change the

662
00:05:52,690 --> 00:05:57,690
from field to the telephone number that we got from Twilio and the to

663
00:05:58,040 --> 00:06:02,030
number to the telephone number that we signed up with Twilio with.

664
00:06:02,360 --> 00:06:06,800
So let's do one thing at a time. The message that I want to send myself is

665
00:06:07,750 --> 00:06:08,583
um,

666
00:06:11,650 --> 00:06:12,730
As always on a Mac,

667
00:06:12,760 --> 00:06:16,510
you can go to edit emojis and symbols to pull up the emoji keyboard.

668
00:06:16,840 --> 00:06:18,070
If you were in Windows or Linux,

669
00:06:18,130 --> 00:06:22,270
you can simply just head over to Google and search for an umbrella emoji and

670
00:06:22,270 --> 00:06:25,420
paste it in here. That's our message done.

671
00:06:25,810 --> 00:06:30,810
The next step is to figure out what is the telephone number that is going to be

672
00:06:31,180 --> 00:06:36,130
the sender's telephone number. Going back to our Twilio dashboard,

673
00:06:36,580 --> 00:06:39,460
we're going to copy this trial number here

674
00:06:40,330 --> 00:06:44,770
and we're going to paste it in the from field as a string.

675
00:06:45,610 --> 00:06:50,590
The next thing is the to, so this is who the message is going to be sent to.

676
00:06:51,130 --> 00:06:56,130
This has to be the phone number that you used to sign up to Twilio. On the

677
00:06:56,800 --> 00:07:01,360
Twilio trial account, you can send messages and make calls to verified numbers.

678
00:07:02,020 --> 00:07:05,410
And you can add verified numbers by clicking on this plus button

679
00:07:05,920 --> 00:07:09,820
and you can enter somebody's phone numbers, so your friends or family,

680
00:07:10,180 --> 00:07:14,530
but you have to be able to receive a message or receive a call in order to

681
00:07:14,530 --> 00:07:19,330
verify that you actually own that number, or you have access to that number.

682
00:07:21,100 --> 00:07:26,100
Any of the numbers that you see here under verified caller IDs can be used in

683
00:07:26,140 --> 00:07:26,973
your code.

684
00:07:27,580 --> 00:07:32,470
Go ahead and replace this part where it says to with your verified number.

685
00:07:33,760 --> 00:07:34,780
Now, finally,

686
00:07:34,780 --> 00:07:39,780
it asks us to print the message that we created here .sid.

687
00:07:40,540 --> 00:07:44,920
And basically what it means is that once this message has an ID created,

688
00:07:44,980 --> 00:07:49,720
it means it was sent successfully. Instead of printing the message sid,

689
00:07:49,750 --> 00:07:53,020
we're going to print the message status instead

690
00:07:53,560 --> 00:07:56,560
just to make sure that it was actually sent successfully.

691
00:07:57,190 --> 00:08:01,090
All of this code is indented inside the will_rain block

692
00:08:01,150 --> 00:08:04,990
and this is what's going to be triggered if indeed it will rain today.

693
00:08:06,400 --> 00:08:10,240
Now let's go ahead and test this. But before we can test it,

694
00:08:10,270 --> 00:08:13,210
we have to find somewhere that's actually raining.

695
00:08:13,630 --> 00:08:17,170
It seems like people in Bern are getting quite a bit of rainfall.

696
00:08:17,200 --> 00:08:22,200
So let's update our latitude and longitude to Bern in Switzerland.

697
00:08:27,760 --> 00:08:28,180
Right.

698
00:08:28,180 --> 00:08:29,920
Now that we've got somewhere that's raining,

699
00:08:30,040 --> 00:08:35,039
let's go ahead and run our code and let's take a look at what happens on the

700
00:08:35,260 --> 00:08:37,330
phone. There you have it.

701
00:08:37,600 --> 00:08:40,929
We've got our message sent from our Twilio trial account.

702
00:08:41,200 --> 00:08:45,460
It's going to rain today. Remember to bring an umbrella. Now, of course,

703
00:08:45,460 --> 00:08:49,000
you'll be able to get rid of this part where it says sent from your Twilio trial

704
00:08:49,000 --> 00:08:53,830
account if you sign up for an actual account. But for all intents and purposes,

705
00:08:53,860 --> 00:08:58,860
this is working perfectly and we're now able to receive an SMS when the weather condition

706
00:08:59,640 --> 00:09:02,460
in the next 12 hours contains some rain.

707
00:09:03,420 --> 00:09:08,420
So the very last thing we have to do is set up our Python script to run every

708
00:09:09,180 --> 00:09:10,650
morning at 7:00 AM.


709
00:00:00,480 --> 00:00:04,980
Now that we've tested our code and we've managed to get it working locally,

710
00:00:05,310 --> 00:00:10,310
the next step is to put our script online so that it can be run on schedule and

711
00:00:11,070 --> 00:00:15,270
we don't have to manually open up PyCharm and run it every morning at 7:00 AM.

712
00:00:15,960 --> 00:00:18,660
How do we do this? Well, we're going to use Python anywhere,

713
00:00:18,720 --> 00:00:23,310
the same service that we use before when we created the automatic birthday

714
00:00:23,310 --> 00:00:26,370
wisher. Now, the first thing we're going to do is of course,

715
00:00:26,400 --> 00:00:29,940
log into the service and we're going to delete all of our previous files.

716
00:00:30,270 --> 00:00:35,270
So that includes the letter template folder and also the main.

717
00:00:35,340 --> 00:00:40,200
py and the birthdays.csv. Now,

718
00:00:40,230 --> 00:00:44,070
instead of the previous main.py, we're going to upload our latest

719
00:00:44,100 --> 00:00:44,933
main.py.

720
00:00:45,270 --> 00:00:49,170
So let's go ahead and locate this in our computer,

721
00:00:50,400 --> 00:00:53,430
and then we're going to upload it to Python anywhere.

722
00:00:55,680 --> 00:00:56,513
There you go.

723
00:00:56,880 --> 00:01:01,440
Now let's open up this file and click bash console here.

724
00:01:02,250 --> 00:01:05,069
So that's going to create our console down at the bottom.

725
00:01:07,080 --> 00:01:11,790
And once it's ready, like this, we can enter the command to run this code.

726
00:01:11,910 --> 00:01:15,180
So it's pythone and then its the name of our file,

727
00:01:15,180 --> 00:01:17,070
which is main.py.

728
00:01:17,820 --> 00:01:20,790
And because it's directly within my users folder,

729
00:01:21,150 --> 00:01:23,760
I don't have to specify a file path to it.

730
00:01:24,180 --> 00:01:28,590
Now I don't recommend to have your main.py nested within other folders because

731
00:01:28,590 --> 00:01:30,900
it's going to make this a little bit more complicated.

732
00:01:31,380 --> 00:01:35,400
So as long as you've uploaded it to the same place that I have, just straight

733
00:01:35,400 --> 00:01:38,520
after your username, then we should be able to run this line of code

734
00:01:40,530 --> 00:01:43,770
and we can test out whether if this code now works,

735
00:01:43,980 --> 00:01:47,040
when it's being run from Python anywhere. Now,

736
00:01:47,040 --> 00:01:50,880
what you'll see instead of the message status however,

737
00:01:51,120 --> 00:01:56,120
is a exception and it's a connection error. And the connection error tells us

738
00:01:57,360 --> 00:02:00,360
something about this API Twilio

739
00:02:00,420 --> 00:02:03,330
max retries exceeded with URL.

740
00:02:04,410 --> 00:02:07,710
So if we go ahead and highlight that, which will copy it,

741
00:02:08,400 --> 00:02:11,670
then we can paste it into Google and figure out what's wrong.

742
00:02:12,570 --> 00:02:17,570
The first post you can see is a post from help at Python anywhere.

743
00:02:18,120 --> 00:02:21,120
And they've created this post to tell you how to get Twilio

744
00:02:21,120 --> 00:02:24,150
to work on free accounts with Python

745
00:02:24,150 --> 00:02:28,380
anywhere. As they say, if you're trying to use Twilio on a Python anywhere

746
00:02:28,380 --> 00:02:31,890
free account, you're going to run into an error that looks something like this,

747
00:02:32,160 --> 00:02:33,720
which is exactly what we got.

748
00:02:33,840 --> 00:02:37,260
And that's where Google search picked it up to show us this article.

749
00:02:38,280 --> 00:02:42,750
The reason for this is because the Twilio API basically needs to be told how to

750
00:02:42,750 --> 00:02:46,650
connect to the proxy servers that free accounts use.

751
00:02:47,250 --> 00:02:49,500
When you have a paid account on Python

752
00:02:49,500 --> 00:02:53,160
anywhere, you have an actual address to your dedicated server.

753
00:02:53,550 --> 00:02:57,000
But when you only sign up with a free account like we have here,

754
00:02:57,270 --> 00:02:59,290
we only get a proxy server.

755
00:02:59,560 --> 00:03:02,890
So we need to change the code a little bit in order for it to work.

756
00:03:03,910 --> 00:03:08,200
Even though we are actually using the latest version of Twilio, from testing

757
00:03:08,230 --> 00:03:11,650
I found that this code doesn't seem to work for me. Instead,

758
00:03:11,680 --> 00:03:15,910
we have to use this version of the fix that they've specified here.

759
00:03:16,660 --> 00:03:21,370
So the only difference from their version of code and what we have here in our

760
00:03:21,370 --> 00:03:25,030
main.py is three lines of code. First,

761
00:03:25,060 --> 00:03:30,060
we have to import this class called TwilioHttpClient from the Twilio module.

762
00:03:30,430 --> 00:03:33,880
So let's copy that and paste it below our previous lines.

763
00:03:35,410 --> 00:03:36,400
Now, in addition,

764
00:03:36,430 --> 00:03:41,430
we have to create a proxy client with the TwilioHttpClient class that we just

765
00:03:42,400 --> 00:03:46,360
imported just now. So we're going to put that in our if statement

766
00:03:46,720 --> 00:03:49,030
when we're about to create our SMS message.

767
00:03:49,840 --> 00:03:54,310
The last step is where we have our client class being created,

768
00:03:54,610 --> 00:03:59,610
we have to set this HTTP client parameter to the proxy client that we created

769
00:04:00,010 --> 00:04:03,070
just now. That's going to go right here.

770
00:04:04,000 --> 00:04:06,190
The rest of the code we can leave as is,

771
00:04:06,610 --> 00:04:10,450
and we can simply hit save to update that code.

772
00:04:11,560 --> 00:04:15,700
Now, once we've typed all of that code, you can see we get an error in here.

773
00:04:15,910 --> 00:04:17,890
It says undefined name 'os'.

774
00:04:18,250 --> 00:04:22,029
And that's because this os actually comes from an os module.

775
00:04:22,510 --> 00:04:26,020
So we should import that in order for this error to go away.

776
00:04:27,070 --> 00:04:30,040
So let's hit save again and you can see,

777
00:04:30,070 --> 00:04:32,590
we are now free of warnings and errors.

778
00:04:33,040 --> 00:04:37,570
We're now ready to go into our console and to run the same command again,

779
00:04:37,630 --> 00:04:41,950
which is python3 and then it's the name of our file, main.py.

780
00:04:42,580 --> 00:04:46,390
So now when we hit enter, you can see we get back the message queued,

781
00:04:46,450 --> 00:04:48,010
which comes from this print statement

782
00:04:48,370 --> 00:04:52,150
and that's because the status of our message has now been queued.

783
00:04:53,200 --> 00:04:57,100
And you can see I've now received the message from Twilio.

784
00:04:57,490 --> 00:04:58,270
And this is of course,

785
00:04:58,270 --> 00:05:02,920
because my main.py was run on the Python anywhere servers instead of from my

786
00:05:02,920 --> 00:05:06,850
local computer. So now that we've confirmed that this works,

787
00:05:06,940 --> 00:05:11,940
we can now finally go back to Python anywhere and go to the Tasks section in

788
00:05:14,500 --> 00:05:17,800
order to set up our task. Now here,

789
00:05:17,830 --> 00:05:22,150
I've still got my previous task set up when we created the automatic birthday

790
00:05:22,150 --> 00:05:26,560
wisher. Now because I'm demoing this with a free Python anywhere account,

791
00:05:27,010 --> 00:05:31,480
I can only create one scheduled task. If I start paying them,

792
00:05:31,570 --> 00:05:34,990
then I can schedule as many as I want and they never expire.

793
00:05:35,560 --> 00:05:37,000
But because we're just learning here,

794
00:05:37,330 --> 00:05:40,870
I don't want you to commit to a paid account just to be able to see how it

795
00:05:40,870 --> 00:05:44,530
works. So we're going to use the same schedule task. Now,

796
00:05:44,530 --> 00:05:47,680
if you don't have any task scheduled, just go ahead and create one.

797
00:05:48,010 --> 00:05:50,920
And the command is going to be the same. It's python3

798
00:05:51,190 --> 00:05:52,090
and then it's running

799
00:05:52,120 --> 00:05:55,600
our main.py. So the same command that you entered previously.

800
00:05:56,230 --> 00:06:00,560
And we're going to set the frequency to daily and it's going to run at 7:00 AM

801
00:06:00,560 --> 00:06:03,590
every day. In order to test this,

802
00:06:03,620 --> 00:06:08,620
I'm going to change the time from 7:00 AM to the current time.

803
00:06:08,660 --> 00:06:12,830
So the current server time is registering as 10:01, but in fact,

804
00:06:12,830 --> 00:06:14,240
I'm actually seeing 02.

805
00:06:14,270 --> 00:06:19,270
So I'm going to change that to 10:03 and then hit the checkmark.

806
00:06:20,840 --> 00:06:25,790
And now I'm going to wait patiently to see if that is going to be triggered

807
00:06:25,820 --> 00:06:28,340
automatically from the schedule tasks

808
00:06:28,610 --> 00:06:32,720
and I get the SMS sent to my phone. And there you have it.

809
00:06:33,230 --> 00:06:37,640
This is now being sent to me from Twilio because we made the API call,

810
00:06:37,910 --> 00:06:41,660
but it's being sent because I've got this scheduled task

811
00:06:41,840 --> 00:06:46,280
which is calling this command in order to run our main.py

812
00:06:46,670 --> 00:06:49,430
and it's being done at a time which I've specified,

813
00:06:49,790 --> 00:06:54,110
which in fact, I want to happen at probably 7:00 AM in the morning.

814
00:06:54,530 --> 00:06:56,750
Now notice that this is UTC time.

815
00:06:56,770 --> 00:07:01,400
So if you want to convert the UTC time to your local time,

816
00:07:01,430 --> 00:07:04,460
so at the moment, we're on British summer time where I'm at,

817
00:07:04,970 --> 00:07:09,290
then you can type this into Google and change this to whatever time zone you're

818
00:07:09,290 --> 00:07:10,123
in.

819
00:07:10,160 --> 00:07:15,160
And that way you can figure out what time UTC is relative to your local time.

820
00:07:17,030 --> 00:07:19,220
In my case, it's just one hour behind.

821
00:07:19,430 --> 00:07:23,960
So if I want this to run at 7:00 AM my local time that I have to change this to

822
00:07:23,960 --> 00:07:28,960
six o'clock. And now that's going to run every day at 6:00 AM without me needing

823
00:07:29,060 --> 00:07:32,810
to do anything and I'm going to get my notification on time

824
00:07:33,200 --> 00:07:34,400
if it's going to rain.


825
00:00:00,030 --> 00:00:01,800
Now that we've got our app working,

826
00:00:02,040 --> 00:00:04,770
you might think we've reached the end of today's lessons,

827
00:00:05,070 --> 00:00:08,010
but there's just one final thing I want to talk to you about.

828
00:00:08,550 --> 00:00:12,210
And that is the environment. Not the environment as a whole,

829
00:00:12,330 --> 00:00:15,510
but more precisely environment variables.

830
00:00:16,260 --> 00:00:18,510
Now what our environment variables anyways?

831
00:00:18,870 --> 00:00:20,760
If you go into your PyCharm project

832
00:00:20,880 --> 00:00:24,780
and you go into this tab where it says "Terminal", here

833
00:00:24,810 --> 00:00:27,840
if you type in env (set on Windows) and hit "Enter",

834
00:00:28,170 --> 00:00:31,020
you can see a whole bunch of variables.

835
00:00:31,050 --> 00:00:35,250
So you've got a key and a value

836
00:00:35,760 --> 00:00:39,270
and in between there is just a single equal (=) sign.

837
00:00:39,960 --> 00:00:44,790
So these are the different variables that are set in the environment in which

838
00:00:44,820 --> 00:00:45,720
your code is run.

839
00:00:46,350 --> 00:00:49,980
These variables have values which are strings

840
00:00:50,400 --> 00:00:54,300
which can be used in our applications or our code.

841
00:00:55,230 --> 00:00:56,490
Now inside Python

842
00:00:56,490 --> 00:01:00,750
anywhere you can also type env and you can see some slightly different

843
00:01:00,750 --> 00:01:05,099
environment variables which are relative to the Python anywhere environment.

844
00:01:05,580 --> 00:01:09,660
What exactly all these environment variables used for? Well,

845
00:01:09,840 --> 00:01:14,370
there's two major use cases. One is for convenience.

846
00:01:14,970 --> 00:01:18,690
Normally when you deploy a large application,

847
00:01:19,140 --> 00:01:23,340
the process is quite complicated. And once you've done it,

848
00:01:23,670 --> 00:01:28,230
you kind of don't want to mess around with the code base and update the code

849
00:01:28,230 --> 00:01:31,890
files like your main.py for example. Instead,

850
00:01:31,920 --> 00:01:36,450
you could have these environment variables, which you can change. For example,

851
00:01:36,510 --> 00:01:40,260
if you had an application that was sending you emails out to your clients,

852
00:01:40,500 --> 00:01:43,500
then your client base emails might change day to day.

853
00:01:44,070 --> 00:01:48,840
So certain variables that are being used in your code base could be set as

854
00:01:48,840 --> 00:01:49,980
environment variables

855
00:01:50,220 --> 00:01:53,640
and you can modify those variables without having to touch the code.

856
00:01:54,510 --> 00:01:57,480
A second reason might be for security.

857
00:01:58,140 --> 00:01:59,700
So when you're developing software,

858
00:01:59,730 --> 00:02:04,110
you might be uploading your code based somewhere, for example

859
00:02:04,110 --> 00:02:07,590
to store it online or to a service like PythonAnywhere.

860
00:02:08,520 --> 00:02:13,440
And it's usually not a good idea to have things like your authentication keys or

861
00:02:13,440 --> 00:02:18,440
your API keys to be stored in the same place as the rest of your code.

862
00:02:19,140 --> 00:02:21,180
That's where environment variables come in.

863
00:02:21,420 --> 00:02:26,420
So environment variables essentially allow us to separate out where we store

864
00:02:26,490 --> 00:02:28,590
our keys, our secret stuff,

865
00:02:28,800 --> 00:02:33,480
and various other variables away from where our code base is located.

866
00:02:34,140 --> 00:02:34,973
In our case,

867
00:02:35,010 --> 00:02:39,270
it doesn't really matter because we haven't got a paid account anywhere in here.

868
00:02:39,750 --> 00:02:44,370
It doesn't really matter if somebody steals our auth token or our API key,

869
00:02:44,490 --> 00:02:49,170
because none of those are linked to our payment details. Now, however,

870
00:02:49,170 --> 00:02:53,130
if we were to upgrade our accounts on open weather map's API

871
00:02:53,400 --> 00:02:54,900
or on Twilio's API,

872
00:02:55,200 --> 00:03:00,200
then we definitely want to keep these two things secret; auth token and the API

873
00:03:00,790 --> 00:03:01,623
key.

874
00:03:01,810 --> 00:03:05,860
Instead of having it located in the same place where we've got our code base

875
00:03:06,310 --> 00:03:10,210
which means you might accidentally upload it somewhere on the internet where

876
00:03:10,210 --> 00:03:12,610
other people can see it, instead,

877
00:03:12,640 --> 00:03:15,910
we can store these two things as environment variables.

878
00:03:16,600 --> 00:03:21,340
We can create an environment variable by simply typing export

879
00:03:21,760 --> 00:03:26,050
and then the name of the variable which I'll call OWM

880
00:03:26,410 --> 00:03:31,270
_API_KEY. And then it's really important that we have no spaces,

881
00:03:31,480 --> 00:03:33,640
but just a single equal sign.

882
00:03:34,360 --> 00:03:37,720
And then we're going to store everything that's in between the quotation marks.

883
00:03:38,020 --> 00:03:39,880
So I'm going to copy that from over here,

884
00:03:40,900 --> 00:03:45,430
and I'm going to paste that in here. Once I've exported that

885
00:03:46,180 --> 00:03:49,330
and then if I hit "env" again, you'll see

886
00:03:49,330 --> 00:03:51,370
now in this updated environment

887
00:03:51,430 --> 00:03:55,090
you can see that environment variable go in right there.

888
00:03:55,510 --> 00:04:00,100
And now we can tap into that environment variable in any of the code that we run

889
00:04:00,160 --> 00:04:05,160
from this particular environment. To do that we have to use this os module that

890
00:04:05,740 --> 00:04:06,573
we've already got.

891
00:04:06,940 --> 00:04:10,780
So I'm going to delete everything that's currently stored in the API key.

892
00:04:11,230 --> 00:04:15,250
And instead, I'm going to tap into os.environ,

893
00:04:16,029 --> 00:04:21,029
and then I'm going to use a method called get to get the value of a particular

894
00:04:21,070 --> 00:04:22,060
environment variable.

895
00:04:22,960 --> 00:04:26,500
The name is everything that's before the equal sign.

896
00:04:26,980 --> 00:04:31,960
So let's go ahead and paste it in here. And now when I run this code,

897
00:04:32,320 --> 00:04:36,010
so using python3 and then the name of the file,

898
00:04:36,760 --> 00:04:41,470
you can see that it successfully runs queuing our message into Twilio.

899
00:04:42,250 --> 00:04:45,730
Now go ahead and do the same thing with the auth token.

900
00:04:46,360 --> 00:04:48,520
You want to save this as an environment

901
00:04:48,520 --> 00:04:52,510
variable code auth_token in all caps,

902
00:04:52,900 --> 00:04:54,430
similar to what we've got here.

903
00:04:55,060 --> 00:04:58,390
And you want to store this value in the environment variable.

904
00:04:58,630 --> 00:05:02,850
Pause the video and give that a go. All right.

905
00:05:02,880 --> 00:05:06,090
So we're going to follow the exact same thing that we did before. We use the

906
00:05:06,090 --> 00:05:10,920
export keyword and then we type in the name of the environment variable

907
00:05:11,190 --> 00:05:15,420
which is going to be AUTH_TOKEN. And then really importantly,

908
00:05:15,450 --> 00:05:17,670
we just have an equal sign, no spaces,

909
00:05:18,090 --> 00:05:21,840
and we're going to store this value without the double-quotes

910
00:05:22,440 --> 00:05:26,970
and we're going to put it in here. Now in our environment variables,

911
00:05:27,000 --> 00:05:30,120
you can see we've got our open weather map API key.

912
00:05:30,540 --> 00:05:35,280
And if we scroll up a bit more, you can see our auth token as well.

913
00:05:36,750 --> 00:05:41,750
So now we can replace this string with our os.environ.get

914
00:05:43,560 --> 00:05:47,580
and then we pass in the name of the key which is AUTH_TOKEN.

915
00:05:48,630 --> 00:05:53,630
And now let's run our code again with python3 main.py.

916
00:05:54,090 --> 00:05:56,580
And you can see it's still works as before.

917
00:05:57,320 --> 00:06:01,730
But now if somebody comes across this particular code base on the internet,

918
00:06:02,030 --> 00:06:07,030
they won't be able to use our Twilio account or our open weather map account

919
00:06:07,460 --> 00:06:12,350
because both of these keys are now hidden. Let's go ahead and hit save.

920
00:06:13,760 --> 00:06:15,410
So now we're going to do the same thing,

921
00:06:15,680 --> 00:06:19,340
but at the point where we run our code from our task scheduler.

922
00:06:19,880 --> 00:06:24,590
So go ahead and right-click on this snake and then open the link in a new tab so

923
00:06:24,590 --> 00:06:27,470
that we can go to our tasks section.

924
00:06:27,920 --> 00:06:32,480
And here we're going to edit our command. Instead of just running Python main

925
00:06:32,480 --> 00:06:36,740
.py, we're going to export those two environment variables.

926
00:06:37,280 --> 00:06:41,810
This is why we've got two screens open up so we can actually copy the actual

927
00:06:41,900 --> 00:06:46,430
values. The first value is going to be our open weather map

928
00:06:46,460 --> 00:06:49,790
API key. So I'm going to copy that. And then here,

929
00:06:49,820 --> 00:06:54,470
I'm going to write export and then paste in that first key. Now,

930
00:06:54,500 --> 00:06:58,790
afterward, I'm going to use a semi-colon to denote a new line

931
00:06:59,210 --> 00:07:03,140
and then I'm going to export the next key. Scrolling up,

932
00:07:03,170 --> 00:07:07,220
we can see our auth token right here so we're going to copy that as well

933
00:07:07,550 --> 00:07:11,330
and we're going to export that as the other environment variable.

934
00:07:11,780 --> 00:07:14,480
And then finally, we're going to cap it off with a semicolon.

935
00:07:14,930 --> 00:07:18,860
So now you should have your export OWM_API_KEY

936
00:07:19,430 --> 00:07:23,750
and then your exporting your auth token as well. And then finally,

937
00:07:23,750 --> 00:07:26,960
on the last line, we're running our python3 main.py.

938
00:07:27,770 --> 00:07:31,550
Now let's change this to run at the current time.

939
00:07:31,550 --> 00:07:35,690
So it's going to be UTC time which happens to be 10 o'clock

940
00:07:35,720 --> 00:07:38,600
and then instead of 46, it's now 48

941
00:07:38,600 --> 00:07:43,340
so I'm going to change that to 49. And then I'm gonna hit the tick.

942
00:07:44,060 --> 00:07:47,120
And now we're going to wait to see if it actually works

943
00:07:47,330 --> 00:07:51,410
even though we've taken out the API keys from our main.py

944
00:07:51,650 --> 00:07:53,960
because we're exporting it in our command.

945
00:07:54,200 --> 00:07:56,870
Let's see if we still get the notification message.

946
00:07:58,490 --> 00:08:01,310
There you have it. It's still working as before.

947
00:08:02,180 --> 00:08:04,760
But now this is invisible to people

948
00:08:05,180 --> 00:08:07,910
if they happen to access our main.py.

949
00:08:08,510 --> 00:08:12,020
Now don't worry. The service of Python anywhere are pretty secure.

950
00:08:12,050 --> 00:08:14,000
Nobody's really going to hack into your account

951
00:08:14,300 --> 00:08:16,130
just to look into your main.py.

952
00:08:16,760 --> 00:08:20,390
The bigger problem is when you upload your own code to places like Git

953
00:08:20,390 --> 00:08:21,890
Hub or a BitBucket,

954
00:08:22,160 --> 00:08:25,580
basically places that are essentially a Dropbox for code.

955
00:08:26,150 --> 00:08:29,120
And when you have it on there, because your code could be public,

956
00:08:29,420 --> 00:08:31,280
that's where the problem happens.

957
00:08:31,580 --> 00:08:35,659
If people look at your code file and they see that you've got API keys in there,

958
00:08:35,659 --> 00:08:40,130
then they might steal them. So whenever you're uploading your code publicly,

959
00:08:40,309 --> 00:08:45,310
always be careful that you strip it of all of the API keys and instead use

960
00:08:45,560 --> 00:08:50,450
environment variables like we have here to pull it from the environment.

961
00:08:51,440 --> 00:08:56,070
All that's left to do for you is to update your latitude and longitude to your

962
00:08:56,070 --> 00:09:00,810
actual local latitude and longitude instead of the rainy place that we're

963
00:09:00,810 --> 00:09:05,550
testing. And you've now completed the rain alert application.

964
00:09:06,210 --> 00:09:08,970
Now I've showed you quite a few different APIs,

965
00:09:09,000 --> 00:09:12,300
but there's a whole world of APIs for you to explore.

966
00:09:12,810 --> 00:09:16,680
And if you have the patience to read their documentation and understand how to

967
00:09:16,680 --> 00:09:20,700
work with their APIs, then you now know how to work with their endpoints,

968
00:09:20,940 --> 00:09:25,560
how to pass parameters and also how to authenticate yourself with their servers.

969
00:09:26,100 --> 00:09:31,100
So here's a list of fun APIs that you can use to build applications with.

970
00:09:32,700 --> 00:09:37,700
I've shown you how you can make a rain alert and send yourself SMS messages,

971
00:09:38,520 --> 00:09:43,110
or how to get the location of the ISS or the sunrise and sunset times,

972
00:09:43,410 --> 00:09:48,090
but there's a whole bunch of other APIs for you to explore. For example,

973
00:09:48,090 --> 00:09:50,460
things like the open movie database API,

974
00:09:50,910 --> 00:09:53,970
which contains a whole bunch of movie related data,

975
00:09:54,390 --> 00:09:59,390
or looking up songs and artists using the Spotify API and a whole lot more.

976
00:10:00,840 --> 00:10:02,760
So I'll leave you to explore that.

977
00:10:03,090 --> 00:10:06,000
And if you come up with something innovative and interesting,

978
00:10:06,240 --> 00:10:10,380
be sure to share it with the rest of us in the Q&A below this lesson so that

979
00:10:10,380 --> 00:10:12,810
we can all check it out and admire your hard work.


