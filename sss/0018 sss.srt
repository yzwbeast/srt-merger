1
00:00:00,090 --> 00:00:04,890
Hey guys, welcome to Day 18 of 100 Days of Code. Now,

2
00:00:04,890 --> 00:00:07,680
today, we're going to learn about some really exciting things.

3
00:00:07,710 --> 00:00:10,110
We're going to look deeper into turtle graphics,

4
00:00:10,470 --> 00:00:15,120
starting to do things with graphics, with the help of the turtle module.

5
00:00:15,450 --> 00:00:19,020
And we're also going to be learning about Python tuples as well as looking

6
00:00:19,020 --> 00:00:22,200
deeper into importing modules in Python.

7
00:00:23,010 --> 00:00:24,540
By the end of today,

8
00:00:24,570 --> 00:00:29,570
we will have written some code that is capable of generating million dollar

9
00:00:31,110 --> 00:00:34,740
pieces of odd work. So we're looking at a Damien Hirst,

10
00:00:35,010 --> 00:00:38,640
which sold for 1.275

11
00:00:38,640 --> 00:00:41,970
million pounds a little while ago.

12
00:00:42,450 --> 00:00:47,450
And we're going to be using Python turtle to create a similarly beautiful dot spot

13
00:00:50,820 --> 00:00:51,653
painting,

14
00:00:51,690 --> 00:00:56,580
which could be randomized and create beautiful pieces of art

15
00:00:56,700 --> 00:00:59,550
like this one. Once you're ready,

16
00:00:59,610 --> 00:01:02,790
head over to the next lesson and let's get started.


17
00:00:00,540 --> 00:00:02,700
As I mentioned, in this section

18
00:00:02,700 --> 00:00:06,030
we're going to be working heavily with the Python turtle module.

19
00:00:06,630 --> 00:00:08,070
And as we've seen before,

20
00:00:08,130 --> 00:00:13,130
this turtle module is essentially a way for us to be able to draw graphics onto

21
00:00:13,380 --> 00:00:14,213
the screen.

22
00:00:14,520 --> 00:00:19,320
And you can imagine it as just this little wandering turtle with a pen on its

23
00:00:19,320 --> 00:00:23,160
back and everywhere it goes, it leaves a trail of line.

24
00:00:23,970 --> 00:00:28,230
So let's take a closer look at the turtle graphics module. Now here,

25
00:00:28,260 --> 00:00:33,240
I've already created a brand new PyCharm project called day-18-start,

26
00:00:33,630 --> 00:00:37,800
and I've created a blank main.py. Inside this project,

27
00:00:37,890 --> 00:00:42,450
we're going to import our turtle. So as you saw from previous lessons,

28
00:00:42,450 --> 00:00:47,070
we can import the turtle module and get hold of the turtle class

29
00:00:47,100 --> 00:00:50,220
by simply saying from the turtle module,

30
00:00:50,520 --> 00:00:55,520
import the Turtle class with the capital T. And now we can work with that class

31
00:00:56,760 --> 00:01:01,230
and we're going to use it to create a new turtle object.

32
00:01:01,680 --> 00:01:03,540
Let's call it timmy_the_turtle,

33
00:01:05,310 --> 00:01:09,210
and this is going to be created from the turtle class.

34
00:01:09,240 --> 00:01:13,410
So this is going to be a new turtle object saved inside this variable.

35
00:01:14,070 --> 00:01:16,680
Now, when we actually run our project,

36
00:01:18,630 --> 00:01:21,450
you'll see a brief flash of a window

37
00:01:21,510 --> 00:01:25,950
and then it will disappear. In order for that window to stay where it is

38
00:01:26,040 --> 00:01:29,430
and only exit when we actually click on the window,

39
00:01:29,730 --> 00:01:33,510
we have to create another object, which we'll call our screen.

40
00:01:34,020 --> 00:01:36,870
And this comes from the total module as well.

41
00:01:36,960 --> 00:01:39,690
And it's a class called Screen.

42
00:01:40,140 --> 00:01:42,720
We also have to import that if we want to use it.

43
00:01:43,260 --> 00:01:45,390
So now that we've got hold of the screen,

44
00:01:45,420 --> 00:01:49,110
we can use one of the functions called exitonclick.

45
00:01:50,520 --> 00:01:52,560
So this way, when we run our code,

46
00:01:52,590 --> 00:01:57,590
we can see our turtle show up in the middle as this little arrow and our window

47
00:01:58,200 --> 00:02:02,490
won't disappear until we click on it. That's what exitonclick does.

48
00:02:02,970 --> 00:02:06,210
So we need to keep this bit of the code at the very bottom.

49
00:02:06,330 --> 00:02:09,810
It has to happen after we've done all this stuff with turtle.

50
00:02:09,930 --> 00:02:13,920
So I'm going to move it to the bottom of the file. Now here's a question.

51
00:02:13,950 --> 00:02:18,850
How do I know how to do that? Is it because I am super experienced 

52
00:02:18,850 --> 00:02:21,450
and I remember everything off the top of my head? No.

53
00:02:21,780 --> 00:02:25,920
Is it because I'm super clever and I can just work things out? No,

54
00:02:26,070 --> 00:02:27,750
that's definitely not the answer.

55
00:02:28,170 --> 00:02:32,730
The way that programmers go about figuring out how to use these modules or

56
00:02:32,730 --> 00:02:36,240
packages is through the use of documentation.

57
00:02:36,570 --> 00:02:41,570
So let's take a look at the turtle graphics documentation.

58
00:02:42,810 --> 00:02:46,530
And this is what the documentation looks like. It's a very,

59
00:02:46,530 --> 00:02:51,530
very long document that goes through all of the things that you can do with this

60
00:02:52,560 --> 00:02:55,260
module. Now, if we scroll down,

61
00:02:55,260 --> 00:03:00,260
you've got a contents page here and you can see the various things you can do

62
00:03:00,550 --> 00:03:05,550
with the turtle. Control it's motion or control the pen or change its visibility

63
00:03:06,910 --> 00:03:11,380
or appearance. Now let's take a look at this shape function,

64
00:03:11,890 --> 00:03:16,240
and you can see the documentation explains to us that this particular function

65
00:03:16,570 --> 00:03:20,800
will set the turtles shape to one with a given name.

66
00:03:21,520 --> 00:03:26,440
And we can choose from the various shapes, including arrow, turtle, circle,

67
00:03:26,450 --> 00:03:29,370
square, triangle, and classic. So 

68
00:03:29,380 --> 00:03:34,380
let's use this knowledge and change timmy_the_turtle to have a different shape.

69
00:03:35,440 --> 00:03:38,050
So inside here, we can put any of those strings.

70
00:03:38,080 --> 00:03:42,490
So I'm going to change it to a turtle shape. This way when I run my code,

71
00:03:42,520 --> 00:03:45,610
you can see an actual turtle appear on the screen.

72
00:03:45,670 --> 00:03:49,510
It just makes it a little bit easier to visualize what's going on with this

73
00:03:49,510 --> 00:03:53,290
module. Now, of course you can change it to any of the other ones,

74
00:03:53,380 --> 00:03:57,610
test it out and see if it works. In an ideal world

75
00:03:57,640 --> 00:04:02,640
you would read through the entire documentation of a module before you start

76
00:04:02,650 --> 00:04:05,170
using it. But of course, in the real world,

77
00:04:05,170 --> 00:04:08,110
we all know that that's not quite possible.

78
00:04:08,680 --> 00:04:13,030
Very often you'll need the help of Stack Overflow. For example,

79
00:04:13,060 --> 00:04:18,060
if we wanted to look at turtle graphics and we wanted to change the shape

80
00:04:19,980 --> 00:04:21,420
of the turtle.

81
00:04:22,500 --> 00:04:26,310
Then you can see that when you actually search for this inside the Stack

82
00:04:26,310 --> 00:04:30,690
Overflow search bar, your results are not very relevant.

83
00:04:31,260 --> 00:04:36,260
But if I put the same query into google.com and at the end I tag on the keyword

84
00:04:37,530 --> 00:04:41,490
Stack Overflow, we get results that are a lot more relevant.

85
00:04:41,610 --> 00:04:43,950
So if we take a look at this post,

86
00:04:44,010 --> 00:04:48,090
you can see that it's starting to talk about this shape method.

87
00:04:48,600 --> 00:04:52,740
And down here, this answer even links to the relevant part of the documentation

88
00:04:53,100 --> 00:04:57,150
which we've already seen previously, this shape method.

89
00:04:57,600 --> 00:05:02,600
The idea is that you might need to Google around to see how to achieve a certain

90
00:05:02,940 --> 00:05:03,960
thing you want to do.

91
00:05:04,410 --> 00:05:07,710
And then once you've seen some of the methods that they mentioned in the

92
00:05:07,710 --> 00:05:08,543
answers,

93
00:05:08,580 --> 00:05:13,470
then go to the documentation and read up on it in order to actually understand

94
00:05:13,470 --> 00:05:18,120
what it does and how to use it. Coming back to our turtle,

95
00:05:18,240 --> 00:05:22,200
what if we wanted to change the color of the turtle? Well,

96
00:05:22,200 --> 00:05:26,550
this should be quite easy. We can see that in the color control section,

97
00:05:26,850 --> 00:05:31,850
we can use this color method to set the pen color and fill color.

98
00:05:32,880 --> 00:05:36,600
So for example, we could say timmy_the_turtle.color,

99
00:05:36,870 --> 00:05:39,180
and we can put in a string here like red.

100
00:05:39,690 --> 00:05:42,000
So now when I run my code,

101
00:05:42,330 --> 00:05:47,330
you can see that my turtle timmy is now red instead of the previous default

102
00:05:48,660 --> 00:05:50,760
color of black. Now,

103
00:05:50,760 --> 00:05:55,140
how do I know which colors I can use other than the ones shown in the example,

104
00:05:55,170 --> 00:05:57,350
red or green? Well,

105
00:05:57,350 --> 00:06:02,350
it says that when we want to change the color using a color string or an RGB

106
00:06:02,690 --> 00:06:07,190
color, then it accepts inputs as in pen color.

107
00:06:07,220 --> 00:06:12,220
So it basically says it's using this method to set the color. And this method

108
00:06:12,560 --> 00:06:16,880
gets the color from a Tk color specifications string.

109
00:06:17,300 --> 00:06:19,700
So let's Google and see what that is.

110
00:06:21,950 --> 00:06:23,300
If we click on the first link,

111
00:06:23,330 --> 00:06:28,330
you can see it takes us to the strings and we've got a whole bunch of names and

112
00:06:28,610 --> 00:06:31,160
their corresponding RGB values.

113
00:06:31,640 --> 00:06:34,610
So what is this Tk exactly?

114
00:06:35,390 --> 00:06:39,170
Tk is short for the module tkinter,

115
00:06:39,200 --> 00:06:40,820
which is the Tk interface.

116
00:06:40,910 --> 00:06:45,200
And this is one of the ways that you can use Python to create a graphical user

117
00:06:45,200 --> 00:06:48,350
interface, which is also known as a GUI.

118
00:06:48,680 --> 00:06:52,520
If you think back to the beginning of computer history,

119
00:06:53,060 --> 00:06:55,340
if you think about the Apple Lisa one,

120
00:06:55,400 --> 00:06:59,270
that was the first computer that had a graphical user interface,

121
00:06:59,270 --> 00:07:01,430
where it had a mouse and you can point and click.

122
00:07:01,820 --> 00:07:04,100
And this was huge back in the day.

123
00:07:04,640 --> 00:07:08,480
But before then we had text interfaces like MS-

124
00:07:08,480 --> 00:07:12,170
DOS or like our console when we're using Python.

125
00:07:12,770 --> 00:07:17,540
The text interfaces accept text commands and the graphical user interfaces can

126
00:07:17,540 --> 00:07:22,540
show images and allows you to click and drag and do all of those things by

127
00:07:23,150 --> 00:07:28,150
looking instead of just typing commands. And tkinter is what the turtle module

128
00:07:29,810 --> 00:07:34,460
actually relies on under the hood to create these graphics,

129
00:07:34,700 --> 00:07:36,860
like our turtle showing up here.

130
00:07:37,790 --> 00:07:40,520
So now that we've seen where these names come from,

131
00:07:40,970 --> 00:07:45,970
a much easier way of using these colors is through a page where they have all

132
00:07:46,550 --> 00:07:50,030
been rendered on screen. So in the course resources,

133
00:07:50,060 --> 00:07:54,680
we link to this page where you can see all the colors next to their names,

134
00:07:54,920 --> 00:07:57,290
and you can pick and choose whichever one you want.

135
00:07:57,980 --> 00:08:02,980
Have a go at changing the color of the turtle by using one of these colors that

136
00:08:03,050 --> 00:08:04,040
you see on screen.

137
00:08:05,390 --> 00:08:09,710
Now that we've seen how we can create a new turtle and change its appearance,

138
00:08:09,980 --> 00:08:14,750
it's time to look at how we can make it do certain things. In the documentation,

139
00:08:14,780 --> 00:08:18,620
you can see there's a whole bunch of things you can do in terms of moving and

140
00:08:18,620 --> 00:08:23,600
drawing. A very simple one would be to move it forward or to move it backwards.

141
00:08:26,570 --> 00:08:30,590
So we can tell it to move forwards by a hundred paces.

142
00:08:31,310 --> 00:08:33,980
And when we rerun the code, this is what we see.

143
00:08:35,059 --> 00:08:39,110
So we can get it to move forwards, move backwards, and also move left

144
00:08:39,110 --> 00:08:43,400
and right. So here, the input that it takes is an angle,

145
00:08:43,490 --> 00:08:48,490
a number between zero and 360 to tell it what angle

146
00:08:48,740 --> 00:08:51,530
to turn right or to turn left. For example,

147
00:08:51,560 --> 00:08:56,100
currently our turtle is facing East. So if we wanted to face

148
00:08:56,310 --> 00:08:56,960
South,

149
00:08:56,960 --> 00:09:01,670
then we have to get it to turn right by 90 degrees. So we can say,

150
00:09:01,910 --> 00:09:05,090
timmy_the_turtle.right and then we put 90 in here.

151
00:09:06,380 --> 00:09:10,400
And that's what it looks like. In the upcoming lessons

152
00:09:10,430 --> 00:09:13,820
we've got a whole bunch of turtle challenges for you

153
00:09:14,300 --> 00:09:18,290
that's going to test not only your knowledge of programming that you've learned so

154
00:09:18,290 --> 00:09:23,150
far, but also how well you can read and understand documentation.

155
00:09:23,630 --> 00:09:28,630
This is a key skill to acquire as a seasoned developer because after all,

156
00:09:29,390 --> 00:09:32,030
we can't always rely on other people telling us what to do.

157
00:09:32,060 --> 00:09:34,070
We have to be able to get it from the source.

158
00:09:34,490 --> 00:09:38,420
So make sure that you've got the documentation pulled up and have a glance

159
00:09:38,450 --> 00:09:39,283
through it.

160
00:09:39,320 --> 00:09:42,950
Then you can head over to the next lesson and start tackling some of these

161
00:09:42,950 --> 00:09:43,783
challenges.

162
00:09:44,390 --> 00:09:48,770
Now remember that some of these challenges can be quite a bit of a struggle,

163
00:09:49,130 --> 00:09:53,180
but keep in mind that the struggle is good. The more that you struggle,

164
00:09:53,180 --> 00:09:55,940
the stronger you get. I'll see you on the next lesson.


165
00:00:00,420 --> 00:00:01,050
All right. Now,

166
00:00:01,050 --> 00:00:05,460
the first turtle challenge I've got for you is pretty easy.

167
00:00:05,490 --> 00:00:09,060
It's kind of like doing your stretches before we get started with the proper

168
00:00:09,060 --> 00:00:14,040
workout. So in this challenge, you're going to be using turtle to draw a square.

169
00:00:14,400 --> 00:00:17,610
It's going to be a simple 100 by 100 square,

170
00:00:18,060 --> 00:00:19,980
and it doesn't matter where it is on the screen.

171
00:00:20,250 --> 00:00:24,000
As long as you can get it to draw this, then consider yourself successful.

172
00:00:24,600 --> 00:00:27,300
Pause the video, have a read through the documentation,

173
00:00:27,330 --> 00:00:30,510
have a think about the challenge and go ahead and complete it.

174
00:00:34,590 --> 00:00:34,920
All right.

175
00:00:34,920 --> 00:00:38,370
So I'm going to comment out the previous lines of code other than the line where

176
00:00:38,370 --> 00:00:39,960
we created our timmy_

177
00:00:39,960 --> 00:00:43,890
the_turtle. Now to draw a square is pretty simple.

178
00:00:43,920 --> 00:00:48,240
All we have to do is to get it to go forwards by a hundred paces,

179
00:00:48,570 --> 00:00:52,470
and then we turn left or turn right by 90 degrees.

180
00:00:52,890 --> 00:00:57,890
And then we get it to repeat this process one time for each of the sides.

181
00:00:58,320 --> 00:00:59,760
And when we run the code,

182
00:00:59,820 --> 00:01:04,680
now you can see it draws a simple square. Now,

183
00:01:04,680 --> 00:01:07,410
of course, because we're programmers and we're lazy

184
00:01:07,410 --> 00:01:11,970
and we don't like looking at repeated code, a much simpler way of doing this is

185
00:01:11,970 --> 00:01:13,920
to simply create a for loop.

186
00:01:14,280 --> 00:01:19,280
And we're going to use the range operator to say that this loop should run four

187
00:01:19,830 --> 00:01:23,040
times and then let's indent these two lines of code.

188
00:01:23,490 --> 00:01:26,640
And now it will do exactly the same as before

189
00:01:26,940 --> 00:01:31,140
but this time we've only had to write three lines of code instead of a million.

190
00:01:31,350 --> 00:01:33,720
This is probably the best solution,

191
00:01:33,810 --> 00:01:38,340
but I will also take this solution because after all,

192
00:01:38,370 --> 00:01:42,240
we're just doing the warmup right? Now, while doing that exercise

193
00:01:42,270 --> 00:01:46,260
you might have realized that it's actually really painful to keep calling our

194
00:01:46,260 --> 00:01:49,590
object timmy_the_turtle with such a long name.

195
00:01:50,100 --> 00:01:52,710
But now that we've written it in so many lines

196
00:01:52,770 --> 00:01:55,020
especially if you created this version of the code,

197
00:01:55,410 --> 00:01:58,920
it's actually quite painful to go through each of them and change its name.

198
00:01:59,400 --> 00:02:00,840
Remember in PyCharm

199
00:02:00,840 --> 00:02:05,370
we have a really simple way of changing the name of a variable or a function,

200
00:02:05,550 --> 00:02:09,840
basically anything that we've named ourselves. All we have to do is right-

201
00:02:09,840 --> 00:02:12,300
click on the name, refactor and rename,

202
00:02:12,630 --> 00:02:17,100
and we can change it to something really simple like how about Tim. Now

203
00:02:17,100 --> 00:02:21,600
we've drastically made our code look a lot simpler just by doing that one thing.

204
00:02:22,500 --> 00:02:25,440
I'll try to remind you of some of these shortcuts as we go along,

205
00:02:25,860 --> 00:02:28,530
but once you're ready, head over to the next challenge.


206
00:00:00,330 --> 00:00:04,500
So we're importing the turtle module in order to use it in our code.

207
00:00:05,010 --> 00:00:09,450
So I want to spend a few minutes just quickly talking about all the ways that we

208
00:00:09,450 --> 00:00:10,770
can import modules.

209
00:00:10,940 --> 00:00:15,940
[inaudible]

210
00:00:18,380 --> 00:00:21,740
You've already seen the basic import and it's very simple.

211
00:00:21,740 --> 00:00:23,480
We have the keyword import,

212
00:00:23,750 --> 00:00:26,300
and then we have the module name that we want to import.

213
00:00:27,320 --> 00:00:31,580
So if we had just imported our turtle module with the simple import,

214
00:00:32,000 --> 00:00:34,280
then in order to create a new turtle,

215
00:00:34,640 --> 00:00:39,620
we would have to say the module name and then the name of the class.

216
00:00:40,100 --> 00:00:42,290
And we would create a new turtle like this.

217
00:00:49,970 --> 00:00:50,630
Now this is,

218
00:00:50,630 --> 00:00:54,170
perfectly fine, but it would make it so much more convenient

219
00:00:54,200 --> 00:00:59,120
if we were using that turtle class a lot to write our code like this.

220
00:00:59,660 --> 00:01:04,099
This way, we don't have to keep writing turtle.Turtle or turtle.

221
00:01:04,129 --> 00:01:07,580
whatever else it is that we want to import. And this code is again

222
00:01:07,610 --> 00:01:11,240
pretty simple. We have the keyword from, we have the keyword import,

223
00:01:11,570 --> 00:01:13,160
we have the module name,

224
00:01:13,280 --> 00:01:16,280
and also the thing in the module that we want to import.

225
00:01:17,570 --> 00:01:21,110
As you've seen with this kind of syntax, we can simply write...

226
00:01:24,440 --> 00:01:27,890
And this means that if we were creating a lot of turtles, let's say

227
00:01:27,980 --> 00:01:30,680
instead of just creating tim, we also created tom

228
00:01:32,690 --> 00:01:33,800
and terry.

229
00:01:34,340 --> 00:01:39,020
Then we don't have to keep writing turtle.Turtle,

230
00:01:39,020 --> 00:01:41,180
turtle.Turtle every single time.

231
00:01:41,660 --> 00:01:44,510
So this from import is really helpful

232
00:01:44,510 --> 00:01:48,890
if you're going to use this thing that you're importing a lot and you don't want

233
00:01:48,890 --> 00:01:51,320
to keep writing the name of the module in front of it.

234
00:01:51,740 --> 00:01:55,430
Now you can actually go one step further. Instead of saying

235
00:01:55,430 --> 00:01:58,640
just from turtle import whatever it is you want,

236
00:01:59,000 --> 00:02:04,000
you can actually import everything by using the asterix.

237
00:02:06,020 --> 00:02:10,759
Now you can use everything that's in that module as if it were in the current

238
00:02:10,759 --> 00:02:14,870
file. And this has advantages as well as disadvantages

239
00:02:15,410 --> 00:02:20,410
because it can make it really hard to see where each of these classes or methods

240
00:02:20,630 --> 00:02:25,580
come from. So for example, if I just wrote forward, you can see, I can,

241
00:02:25,580 --> 00:02:26,420
I can do this.

242
00:02:26,720 --> 00:02:31,720
But it's really confusing to just see this method somewhere in isolation

243
00:02:32,600 --> 00:02:36,380
because it's like, well, what is moving forward? What's actually happening,

244
00:02:36,380 --> 00:02:37,550
where does this come from?

245
00:02:39,230 --> 00:02:43,640
And it's more obvious when you import a module like random.

246
00:02:43,640 --> 00:02:46,520
So from random import everything,

247
00:02:47,180 --> 00:02:49,310
and then somewhere else in our code,

248
00:02:49,340 --> 00:02:52,250
we might just write something like choice.

249
00:02:52,490 --> 00:02:57,490
And this is a method from random where we can pick a random item from a

250
00:02:57,620 --> 00:03:01,060
sequence, like a list. Now this code works

251
00:03:01,090 --> 00:03:04,990
but it's really confusing. Like, how is this choice working?

252
00:03:05,410 --> 00:03:10,150
Where does it come from? Which module enables this capability? Instead,

253
00:03:10,150 --> 00:03:13,150
we just have the method whack right in our code

254
00:03:13,510 --> 00:03:16,030
and it's very confusing as to its origins.

255
00:03:16,570 --> 00:03:18,370
So well, amongst the Python community,

256
00:03:18,400 --> 00:03:22,210
it's very unusual that you'll see good code written like this.

257
00:03:22,540 --> 00:03:26,890
I want you to know what it does because you might come across it in the wild,

258
00:03:27,130 --> 00:03:29,350
just so you understand what it's actually doing,

259
00:03:29,650 --> 00:03:32,410
but I want you to try and avoid writing code like this.

260
00:03:32,860 --> 00:03:36,610
Instead if you're using something from a module many times,

261
00:03:36,610 --> 00:03:41,380
so more than three times, then you can think about using this from import.

262
00:03:41,770 --> 00:03:44,080
But if you're only using it once or twice,

263
00:03:44,320 --> 00:03:49,320
then just import the whole module and write out this turtle.Turtle so that

264
00:03:49,380 --> 00:03:54,380
you can see that this module is the one that contains this class and that is

265
00:03:55,060 --> 00:03:58,540
imported and we're using it to create this object.

266
00:03:59,110 --> 00:04:01,960
It's just a lot more expressive in terms of the code.

267
00:04:09,240 --> 00:04:12,660
Now, the final thing I want to show you which is quite a useful thing,

268
00:04:12,870 --> 00:04:16,019
is how to alias modules. So for example,

269
00:04:16,110 --> 00:04:19,500
we can import our turtle as t.

270
00:04:19,709 --> 00:04:24,710
So what this does is we import from the turtle module and we give that module an

271
00:04:25,830 --> 00:04:27,930
alias name, so a name that we define.

272
00:04:29,700 --> 00:04:33,630
And what this means is that if you were to create your new object from the

273
00:04:33,630 --> 00:04:37,770
module turtle, instead of writing out turtle every single time,

274
00:04:37,980 --> 00:04:41,760
you can just write t and that it will represent the entire module.

275
00:04:42,030 --> 00:04:45,360
So sometimes you'll have modules which are really, really long.

276
00:04:45,360 --> 00:04:49,350
So it could have a really long name and you don't want to type it out every

277
00:04:49,350 --> 00:04:50,183
single time.

278
00:04:50,400 --> 00:04:54,780
So you give it an alias name and it will be exactly the same as referring to the

279
00:04:54,780 --> 00:04:56,490
entire name of the module.

280
00:04:57,240 --> 00:05:00,990
And you can create a turtle like this. Now,

281
00:05:01,050 --> 00:05:03,330
even though we've been writing import,

282
00:05:03,630 --> 00:05:07,170
there are some modules that you can't just import, right?

283
00:05:15,030 --> 00:05:19,560
So for example, if I wanted to import the heroes module

284
00:05:19,920 --> 00:05:24,920
which is something that I can use to generate hero names like Decepticon or 

285
00:05:26,160 --> 00:05:28,950
Leopardon, or Askew-Tronics,

286
00:05:29,310 --> 00:05:33,390
then I can use one of the functions that's in that module,

287
00:05:33,450 --> 00:05:35,310
heroes, called generate.

288
00:05:35,940 --> 00:05:40,940
But if I just go into my code and I straight up try to import this module

289
00:05:42,420 --> 00:05:45,900
which is called heroes, then you can see I get an error.

290
00:05:46,290 --> 00:05:49,830
And the error says, there's no module named heroes.

291
00:05:50,580 --> 00:05:55,170
Why is it that I can't do this but I can import turtle?

292
00:05:55,980 --> 00:06:00,620
Well, the reason is because turtle is a module that's packaged with the Python

293
00:06:00,620 --> 00:06:04,640
standard library. And this is a small library of code

294
00:06:04,940 --> 00:06:09,800
which contains just the basics to get you started like a core set when you buy a

295
00:06:09,800 --> 00:06:14,150
board game or like the basic track pieces when you buy a set of hot wheels.

296
00:06:14,810 --> 00:06:19,130
So you can imagine this library of code as like a family library,

297
00:06:19,160 --> 00:06:22,580
easily accessible, but very small. Now,

298
00:06:22,610 --> 00:06:27,140
if we wanted to access the whole world of Python modules and packages,

299
00:06:27,530 --> 00:06:32,150
then we need to go to a much bigger library. And that is,

300
00:06:32,150 --> 00:06:34,580
of course, the Python packages,

301
00:06:34,880 --> 00:06:39,470
which are hosted on the internet and we can install into our project as

302
00:06:39,470 --> 00:06:41,540
and when we need them. So this way,

303
00:06:41,540 --> 00:06:46,540
our final project doesn't become gigantic because we've got all of the modules

304
00:06:46,640 --> 00:06:48,260
loaded into it from the internet.

305
00:06:48,560 --> 00:06:51,860
Instead we only plug and play whatever it is we need.

306
00:06:52,760 --> 00:06:57,050
So PyCharm is actually already smart enough to know that I probably want a module

307
00:06:57,320 --> 00:06:58,670
that I haven't installed.

308
00:06:59,150 --> 00:07:03,740
And you can see that as soon as I click on this error with the red underline,

309
00:07:04,250 --> 00:07:08,480
I get a red light bulb over here. And if I click on it,

310
00:07:08,550 --> 00:07:12,440
it gives me the prompt to install this package called heroes.

311
00:07:12,950 --> 00:07:14,180
And once it's done,

312
00:07:14,360 --> 00:07:19,360
then we can actually tap into this module and we can say heroes.gen.

313
00:07:20,780 --> 00:07:24,200
And this is going to generate us a new hero name.

314
00:07:24,830 --> 00:07:27,080
So let's go ahead and run our code.

315
00:07:30,460 --> 00:07:33,820
And you can see we've got a name called Galvatron,

316
00:07:33,850 --> 00:07:35,680
which is not bad actually.

317
00:07:36,880 --> 00:07:41,410
So it's important to remember that when you try to import something that hasn't

318
00:07:41,410 --> 00:07:44,440
been installed, like this villains package,

319
00:07:44,800 --> 00:07:46,540
then when you try to run the code

320
00:07:46,840 --> 00:07:50,230
you'll get an error that says no module named villains.

321
00:07:50,770 --> 00:07:53,050
And this should prompt you to think, ah,

322
00:07:53,080 --> 00:07:57,460
maybe that module is not a part of the Python standard library like turtle

323
00:07:57,760 --> 00:07:59,710
and I actually have to install it.

324
00:08:00,220 --> 00:08:03,100
Just remember that before you can import a module

325
00:08:03,280 --> 00:08:06,670
sometimes if it's not bundled with the Python standard library,

326
00:08:07,030 --> 00:08:08,710
then you might have to install it.


327
00:00:00,390 --> 00:00:03,480
All right. Onwards to the next turtle challenge.

328
00:00:03,990 --> 00:00:06,960
So this one is going to be a little bit more intensive,

329
00:00:06,990 --> 00:00:08,880
but still a bit of a warmup.

330
00:00:08,910 --> 00:00:13,910
So we're just going to go for a light jog and we're going to draw a dashed line.

331
00:00:15,150 --> 00:00:18,720
You're going to get your turtle to draw a line like this

332
00:00:19,050 --> 00:00:24,000
where it's going to draw a line for 10 paces and then a gap of 10 paces,

333
00:00:24,360 --> 00:00:26,400
and then a solid line for 10 paces again

334
00:00:26,400 --> 00:00:30,150
and it's going to repeat this until it does this 50 times.

335
00:00:30,720 --> 00:00:33,270
The actual length of the line doesn't really matter,

336
00:00:33,630 --> 00:00:37,260
the actual length of each of the sections doesn't really matter.

337
00:00:37,260 --> 00:00:41,580
What's really important is you're able to get this alternating draw-

338
00:00:41,580 --> 00:00:44,850
no-draw thing going on. To complete this challenge

339
00:00:44,880 --> 00:00:49,880
you're going to need to look through the documentation and maybe also use the

340
00:00:50,760 --> 00:00:55,230
help of Google or Stack Overflow and figure out how you can get this behavior to

341
00:00:55,230 --> 00:01:00,090
happen. Have a think about it and pause the video and complete the challenge.

342
00:01:03,000 --> 00:01:06,330
All right. So if we look through the table of contents here,

343
00:01:06,720 --> 00:01:11,550
we can see that the thing that controls the pen is in this section.

344
00:01:11,670 --> 00:01:15,660
We can control it's drawing, color, filling and more.

345
00:01:16,080 --> 00:01:18,960
Now if we look at the drawing control you can see

346
00:01:18,960 --> 00:01:23,790
we can get it to pen down and pen up. When we pull the pen down,

347
00:01:23,970 --> 00:01:27,450
that means the pen is on the paper and it's going to make a mark.

348
00:01:27,840 --> 00:01:32,370
But when the pen is pulled up, then there's going to be no drawing happening

349
00:01:32,610 --> 00:01:34,740
when our turtle is moving.

350
00:01:35,700 --> 00:01:39,270
That means we can write some sort of loop, right?

351
00:01:39,270 --> 00:01:44,070
Where we get our turtle to move forwards by 10 paces

352
00:01:44,640 --> 00:01:48,720
and then we can get this to pull the pen up.

353
00:01:49,620 --> 00:01:54,300
And what this is going to do is allow us to move forwards without drawing.

354
00:01:54,720 --> 00:01:59,220
So now, while the pen is held up we're going to go forwards. Once more

355
00:01:59,310 --> 00:02:03,420
another 10 paces this is going to draw the blank. And then finally,

356
00:02:03,420 --> 00:02:06,000
we're gonna go ahead and put the pen down again.

357
00:02:07,890 --> 00:02:12,890
So now, all we need is for these four steps to repeat 15 times so we can write a

358
00:02:15,780 --> 00:02:20,280
for loop and then create a range that goes from 0 to 15.

359
00:02:20,730 --> 00:02:25,730
And then once we indent this block inside the for loop and run our code,

360
00:02:26,430 --> 00:02:29,340
then you can see it draw our dashed line.

361
00:02:30,030 --> 00:02:31,620
Did you manage to get this solution?

362
00:02:31,980 --> 00:02:36,420
Did you manage to find the relevant part of the documentation to be able to pull

363
00:02:36,420 --> 00:02:41,420
the pen up and put the pen down, or did you simply change your code so that it

364
00:02:41,790 --> 00:02:45,840
drew black and then it drew white? All of these solutions would work,

365
00:02:45,930 --> 00:02:50,930
but what I really wanted you to do is to dig through the documentation and find

366
00:02:51,540 --> 00:02:54,360
the parts which will help you to achieve your goals.

367
00:02:55,710 --> 00:02:57,000
Head over to the next lesson

368
00:02:57,120 --> 00:03:00,180
and I've got another slightly harder challenge for you.


369
00:00:00,390 --> 00:00:03,969
All right, so the next challenge gets a little bit harder.

370
00:00:04,110 --> 00:00:10,200
It's like we're doing our sit ups now. In this challenge, you're going to be drawing a triangle, square,

371
00:00:10,200 --> 00:00:13,950
pentagon, hexagon, heptagon, octagon, nonagon, and decagon.

372
00:00:14,220 --> 00:00:21,180
So from three-sided shape to ten-sided shape and each of those shapes is going to be drawn with a random

373
00:00:21,180 --> 00:00:26,340
color, and each of the sides are going to be 100 in terms of length,

374
00:00:26,700 --> 00:00:34,470
and the final outcome should look something like this. All of these shapes overlaid on each other and

375
00:00:34,470 --> 00:00:36,390
drawn out in sequence.

376
00:00:37,140 --> 00:00:42,900
So you'll have to think a little bit about this because we know that a square has 90-degree angles.

377
00:00:43,230 --> 00:00:48,980
So we could get our robot to go forwards and then turn right 90 degrees and then go forwards again.

378
00:00:49,470 --> 00:00:51,430
But what about a Pentagon?

379
00:00:51,690 --> 00:00:52,890
Well, a pentagon,

380
00:00:52,890 --> 00:00:56,210
each of the corners has a 72 degree angle.

381
00:00:57,390 --> 00:00:59,330
So what's the actual relationship?

382
00:00:59,340 --> 00:01:00,570
How can we work this out?

383
00:01:01,110 --> 00:01:05,700
Well, we know that to turn a full circle, it's 360 degrees.

384
00:01:06,150 --> 00:01:14,370
So the way you work out the angle of each of these shapes is by dividing 360 by the number of sides.

385
00:01:14,730 --> 00:01:17,410
So 360 divided by five is 72.

386
00:01:17,490 --> 00:01:20,700
So each of the corners is 72 degrees.

387
00:01:21,570 --> 00:01:27,000
Using this knowledge and what you've learned about Turtle, go ahead and see if you can complete this

388
00:01:27,000 --> 00:01:27,570
challenge.

389
00:01:27,750 --> 00:01:29,400
Pause video now and give it a go.

390
00:01:32,880 --> 00:01:36,840
All right, so I'm going to delete the previous code and we're going to write the code that's going

391
00:01:36,840 --> 00:01:43,560
to draw all of these shapes. The first thing I want to do is I want to put down that equation. So we

392
00:01:43,560 --> 00:01:51,550
know that if we have 360 degrees divided by the number of sides, then we get the angle, right?

393
00:01:51,780 --> 00:01:55,620
So let's save that into a variable called angle.

394
00:01:56,520 --> 00:02:02,840
And then all we have to do is to get our robot to go forwards

395
00:02:04,350 --> 00:02:13,800
by 100, we said. And then to get it to turn right and the angle that it's going to turn right by is

396
00:02:13,800 --> 00:02:16,320
the one that we defined at the top there.

397
00:02:17,010 --> 00:02:22,680
So then we just need this to be repeated for as many times as we have number of sides.

398
00:02:23,580 --> 00:02:25,830
So we could create a for loop, for example.

399
00:02:27,520 --> 00:02:31,120
And the range is going to take into account the number of sites.

400
00:02:32,650 --> 00:02:39,520
So now if the number of sites is equal to let's say five, let's say we're trying to draw a pentagon,

401
00:02:40,090 --> 00:02:42,050
then this would be the code.

402
00:02:42,640 --> 00:02:44,170
So let's shift that along.

403
00:02:44,530 --> 00:02:47,200
And now if we go ahead and run this code,

404
00:02:48,680 --> 00:02:56,900
you can see it draws us a pentagon, a five-sided shape. So how can we get this loop to run for the

405
00:02:56,900 --> 00:02:58,220
different sides?

406
00:02:58,700 --> 00:03:07,550
How can we get it to go from a three-sided shape, a triangle, all the way to a ten-sided shape, a decagon?

407
00:03:08,780 --> 00:03:13,220
To do this, instead of setting the number of sides statically like this,

408
00:03:13,530 --> 00:03:16,700
why don't we create a function? Let's call it draw_shape.

409
00:03:17,270 --> 00:03:24,470
And this function is going to take the number of sides that this shape has as an input.

410
00:03:24,980 --> 00:03:29,660
And then the rest of this code can be indented inside the function.

411
00:03:30,260 --> 00:03:33,890
And it probably makes sense to only calculate the angle once

412
00:03:34,130 --> 00:03:39,080
when we need to draw the shape because for the given number of sides, that angle is going to be the

413
00:03:39,080 --> 00:03:41,340
same across the entire shape.

414
00:03:42,500 --> 00:03:48,950
For example, if it was a square then we're going to go from one to four drawing this four times.

415
00:03:49,700 --> 00:03:56,960
So now later on, we can define another for loop and this for loop is going to go through all of the

416
00:03:56,960 --> 00:03:59,270
different number of sides that we need.

417
00:03:59,870 --> 00:04:06,560
Now, if we want a range of numbers between 3 and 10, we actually need to write the function 3,

418
00:04:06,560 --> 00:04:10,700
11, because the stop number is excluded

419
00:04:10,710 --> 00:04:14,150
so it'll stop at 10. As we loop through this range.

420
00:04:14,570 --> 00:04:21,010
this shape_side_n is going to take on the value depending on where we are in the range.

421
00:04:21,350 --> 00:04:26,630
So when we're first drawing this, we're going to draw a triangle with three sides so then we can pass

422
00:04:26,630 --> 00:04:33,380
this shape_side_n into our draw_shape function and that should go from 3 to 10.

423
00:04:33,920 --> 00:04:40,970
So let's run our code and see it draw our triangle first and then our square and then it just keeps

424
00:04:40,970 --> 00:04:44,000
on going until it draws all of the shapes that we need.

425
00:04:45,020 --> 00:04:51,030
Now, the very last part of the challenge is to make each of the lines a different random color.

426
00:04:51,560 --> 00:04:53,090
So how can we do this?

427
00:04:54,440 --> 00:04:59,270
So, of course, we're going to go to our good friend Google and we're going to search for the turtle

428
00:04:59,270 --> 00:05:01,140
colors in Python.

429
00:05:01,370 --> 00:05:08,510
I first tried to Google this without the python, and I got the different colors of various turtles,

430
00:05:08,840 --> 00:05:10,280
which was really fascinating

431
00:05:10,280 --> 00:05:11,980
but that's not what I wanted.

432
00:05:12,560 --> 00:05:14,270
So if we take a look at the first link

433
00:05:14,630 --> 00:05:21,260
this comes from a website called Trinket, and it has this interactive color palette where you can select

434
00:05:21,260 --> 00:05:27,740
one of these colors that you like and then you'll get the turtle name, which then you can copy and

435
00:05:27,740 --> 00:05:30,230
paste into maybe a list.

436
00:05:30,740 --> 00:05:31,910
Let's call it colors.

437
00:05:34,180 --> 00:05:39,940
And you can put as many colors into this palette as you want, and you can make it as extensive or as

438
00:05:39,940 --> 00:05:41,200
short as you want it to be.

439
00:05:41,860 --> 00:05:44,490
So here's a list that I created earlier.

440
00:05:44,950 --> 00:05:55,990
And now, if we go ahead and set our turtle's color, so let's go ahead and get Tim and set his color to

441
00:05:56,020 --> 00:06:03,160
a random color from this list which we know to be as simple as simply importing the random module

442
00:06:03,550 --> 00:06:06,880
and then we can get hold of the random. choice

443
00:06:07,240 --> 00:06:14,080
and then inside that method, we can pass in our list of colors so that it picks a random color from

444
00:06:14,080 --> 00:06:14,680
that list.

445
00:06:15,280 --> 00:06:16,990
So now let's run it again,

446
00:06:16,990 --> 00:06:23,860
and you can see each time the shape is being drawn it's picking a random color from our list of colors.

447
00:06:24,610 --> 00:06:25,680
So there you have it.

448
00:06:26,020 --> 00:06:28,680
That's the solution to this challenge.

449
00:06:29,140 --> 00:06:34,330
And this was a little bit more challenging I would say because we're doing functions and loops and

450
00:06:34,330 --> 00:06:37,780
you have to get hold of some colors and you have to figure all of that out.

451
00:06:38,050 --> 00:06:42,700
But hopefully you've managed just fine and you're ready to move on to the next challenge.


452
00:00:00,360 --> 00:00:03,330
Now, our next challenge is our press up.

453
00:00:04,170 --> 00:00:09,170
And this challenge is going to require you to draw a random walk.

454
00:00:10,080 --> 00:00:14,850
Well, it's basically your turtle making random movements North, East,

455
00:00:14,850 --> 00:00:19,620
South, or West, each time it progresses by the same distance,

456
00:00:19,950 --> 00:00:24,810
but it can at any point choose which direction it wants to go out of the four.

457
00:00:25,290 --> 00:00:29,130
And also you can see we've kept the color palette from the previous challenge,

458
00:00:29,460 --> 00:00:34,410
and I've just applied it to the random walk so that each time it walks,

459
00:00:34,470 --> 00:00:36,090
it's going to pick a different color.

460
00:00:37,110 --> 00:00:42,110
Now this random walk is something that's used often in mathematics and other

461
00:00:42,630 --> 00:00:43,463
disciplines.

462
00:00:43,650 --> 00:00:48,650
So it's a way that can be used to model various real life situations.

463
00:00:49,380 --> 00:00:50,700
Like for example

464
00:00:50,700 --> 00:00:55,700
the financial status of a gambler or things like the path of a molecule in a

465
00:00:57,270 --> 00:01:01,320
liquid or gas or the search path of a foraging animal,

466
00:01:01,380 --> 00:01:06,000
and a whole bunch of other things. Take a look at this Wikipedia article

467
00:01:06,030 --> 00:01:09,600
which I'll link to and take a look at all the applications

468
00:01:09,630 --> 00:01:14,630
including sculpture making or Physics or brain research and a whole lot more.

469
00:01:16,560 --> 00:01:17,820
So once you're ready,

470
00:01:18,030 --> 00:01:23,030
go ahead and see if you can program your turtle to create a random walk using

471
00:01:23,310 --> 00:01:24,210
random colors.

472
00:01:24,480 --> 00:01:29,480
And I want you to think about how you can get the thickness of the drawing seen

473
00:01:30,180 --> 00:01:33,600
here, so each of the lines is a lot thicker than before.

474
00:01:34,140 --> 00:01:39,140
And also see if you can figure out how you can speed up the turtle so that it

475
00:01:39,330 --> 00:01:43,050
draws much faster. And everything is of course

476
00:01:43,050 --> 00:01:47,430
going to be in the documentation somewhere for you to find. Pause the video and

477
00:01:47,430 --> 00:01:48,660
complete the challenge now.

478
00:01:52,820 --> 00:01:56,240
Alright. So I'm going to delete all the code from our previous challenge,

479
00:01:56,510 --> 00:01:59,150
but I'm going to keep my list of random colors,

480
00:01:59,450 --> 00:02:01,610
which I'm going to use for my random walk here.

481
00:02:02,510 --> 00:02:04,370
Now I'm going to keep the random import

482
00:02:04,400 --> 00:02:08,180
even though it's currently unused because, as you guessed it, our random

483
00:02:08,190 --> 00:02:10,759
walk is going to require some randomness.

484
00:02:11,780 --> 00:02:16,640
So how do we actually get our robot to move in the four different directions?

485
00:02:17,090 --> 00:02:20,240
Well, let's define another list called directions

486
00:02:20,750 --> 00:02:24,560
and this is going to have all of the different directions

487
00:02:24,590 --> 00:02:27,800
the turtle can face. So we'll start from 0

488
00:02:28,190 --> 00:02:32,240
which will be facing East and then 90,

489
00:02:32,240 --> 00:02:37,240
which will be facing North, 180 will be West and 270 will be South.

490
00:02:40,220 --> 00:02:42,800
So now that we've got these random directions,

491
00:02:42,830 --> 00:02:46,160
we can get Tim, our little turtle, to start moving.

492
00:02:46,610 --> 00:02:49,940
So every time we're going to move forward by the same distance,

493
00:02:50,630 --> 00:02:53,360
and it doesn't really matter how far you move your turtle

494
00:02:53,780 --> 00:02:56,480
as long as you set a reasonable number.

495
00:02:56,750 --> 00:03:01,750
So I'm just going to choose 30 and then I'm going to get my turtle to turn in a

496
00:03:02,560 --> 00:03:03,820
random direction.

497
00:03:04,330 --> 00:03:09,330
So I don't want to just use right all the time, so you can use left or right,

498
00:03:10,390 --> 00:03:14,710
and pick a random direction from the list. But alternatively,

499
00:03:14,710 --> 00:03:18,490
you can actually use this set heading. So for example,

500
00:03:18,520 --> 00:03:21,100
we can set it to those four directions.

501
00:03:21,640 --> 00:03:26,560
All we have to do is call setheading and then pass in one of those angles.

502
00:03:27,250 --> 00:03:28,210
That's what we're going to do here.

503
00:03:28,240 --> 00:03:33,240
We're going to use the random module and the random choice method to pick a

504
00:03:34,900 --> 00:03:36,340
random direction.

505
00:03:37,660 --> 00:03:42,660
So now this robot is going to move forwards and then it's going to turn a random

506
00:03:43,420 --> 00:03:47,230
direction. But of course, we want this to loop a few times.

507
00:03:47,320 --> 00:03:50,350
So let's say that we get it to loop 200 times.

508
00:03:50,410 --> 00:03:53,740
I think that should be enough to draw a decent sized image.

509
00:03:54,400 --> 00:03:58,600
Let's set the range to maybe 200 times for this loop to run.

510
00:03:58,930 --> 00:04:01,480
I think that should get us a decent image. Now,

511
00:04:01,480 --> 00:04:05,770
if you chose 300 or 500 or whatever the number, it doesn't matter.

512
00:04:06,190 --> 00:04:10,240
As long as you can get a decent image on screen, then it's perfectly fine.

513
00:04:10,960 --> 00:04:14,170
So we've now satisfied the basic constraints of a random walk

514
00:04:14,350 --> 00:04:18,130
and you can see our turtle is now wandering around this alleyway,

515
00:04:18,160 --> 00:04:21,820
completely aimlessly and modeling a real life process,

516
00:04:21,880 --> 00:04:23,650
like an animal that's hunting for food.

517
00:04:25,120 --> 00:04:27,370
Now let's implement the next part of this.

518
00:04:27,490 --> 00:04:32,490
Let's go ahead and change our code so that it generates a random color for each

519
00:04:32,560 --> 00:04:33,393
step.

520
00:04:33,850 --> 00:04:37,870
That's pretty simple cause we did it before in the last lesson.

521
00:04:38,200 --> 00:04:42,640
So we're going to get Tim to change his color and we're going to use the random

522
00:04:42,640 --> 00:04:43,473
module

523
00:04:45,100 --> 00:04:50,100
and the choice method to pick from all the colors that we've already got in this

524
00:04:50,800 --> 00:04:55,390
list here. Now that it's pretty much random colors,

525
00:04:55,540 --> 00:04:58,510
random walking, the next thing we want to do

526
00:04:58,780 --> 00:05:03,780
if you saw my demo of it is we want to make each of the lines a bit thicker.

527
00:05:04,570 --> 00:05:09,040
So how do we do that? Well, we have to head back to the documentation.

528
00:05:09,670 --> 00:05:12,370
So it's probably going to be one of these methods.

529
00:05:12,760 --> 00:05:15,100
And if we just read through the names of the methods,

530
00:05:15,400 --> 00:05:20,400
they should give us a bit of an indication of which one might be the one that we

531
00:05:20,680 --> 00:05:21,513
want.

532
00:05:22,540 --> 00:05:26,020
If we take a look at the drawing control for our pen,

533
00:05:26,290 --> 00:05:31,290
you can see there's a method called pen size and you can call this either pen

534
00:05:31,480 --> 00:05:35,350
size or width, but it does the same thing. Essentially

535
00:05:35,350 --> 00:05:39,130
it just sets the size of the pen which the turtle draws with.

536
00:05:40,900 --> 00:05:45,070
If we set the pen size to something a little bit wider,

537
00:05:47,380 --> 00:05:50,710
say maybe 15 in width,

538
00:05:51,370 --> 00:05:53,830
then you can see when our turtle draws,

539
00:05:53,890 --> 00:05:57,130
it's now a lot wider and it's a lot easier to

540
00:05:57,260 --> 00:05:59,420
see what it's doing. Now,

541
00:05:59,420 --> 00:06:03,290
the final trick I want to show you is how you can speed up the turtle's

542
00:06:03,290 --> 00:06:07,100
animation. So if I was to wait for it to finish drawing here,

543
00:06:07,100 --> 00:06:08,630
that's perfectly possible,

544
00:06:08,840 --> 00:06:13,840
but I can also speed it up by tapping into the speed method for turtle.

545
00:06:15,020 --> 00:06:20,020
And I can either specify this speed as an integer or as a string.

546
00:06:22,070 --> 00:06:25,940
So the strings are fastest, fast, normal, slow, slowest,

547
00:06:26,240 --> 00:06:30,950
and this determines the animation speed of the turtle as it draws.

548
00:06:31,370 --> 00:06:35,900
So I'm going to go for fastest so we can say tim.

549
00:06:35,900 --> 00:06:40,340
speed. And we'll put in that string, fastest.

550
00:06:41,480 --> 00:06:46,040
And now when we run it, you can see it animates way faster

551
00:06:46,400 --> 00:06:48,500
and it's drawing at the speed of light.

552
00:06:49,070 --> 00:06:52,580
Our little turtle is completely going nuts,

553
00:06:53,780 --> 00:06:58,610
but this means that it will take much less time to complete our 200 cycles as

554
00:06:58,630 --> 00:06:59,620
we requested. 

555
00:07:00,970 --> 00:07:04,870
So I hope you enjoyed this lesson and you managed to get your turtle to do a random

556
00:07:04,870 --> 00:07:06,130
walk. Now,

557
00:07:06,250 --> 00:07:09,760
many of you would have done this challenge and you might've thought, wouldn't it

558
00:07:09,760 --> 00:07:14,760
be nice if I could generate a completely random color rather than just selecting

559
00:07:15,070 --> 00:07:17,800
a random one from this list? Well,

560
00:07:17,920 --> 00:07:21,520
we can do that and I'll show you how in the next lesson.


561
00:00:00,330 --> 00:00:05,250
So in the last lesson, we saw how to create a turtle that does a random walk.

562
00:00:05,760 --> 00:00:07,020
Now in this lesson,

563
00:00:07,080 --> 00:00:12,080
I want to show you how you can create a random color for your turtle drawing

564
00:00:12,540 --> 00:00:16,890
rather than just using the named colors and then picking a random one out of the

565
00:00:16,890 --> 00:00:21,390
list. When you take a look at the pen color of the turtle,

566
00:00:21,810 --> 00:00:26,810
you can see that you can use a color string such as what we've been doing using

567
00:00:26,940 --> 00:00:30,420
red, yellow, or a hex string that represents the color,

568
00:00:31,020 --> 00:00:33,690
or we can use a RGB color.

569
00:00:34,170 --> 00:00:39,170
And the RGB color is going to be represented by a tuple of different amounts of

570
00:00:39,510 --> 00:00:43,560
red, green, and blue. So what exactly is a tuple?

571
00:00:44,310 --> 00:00:44,760
Well,

572
00:00:44,760 --> 00:00:49,760
a tuple is a data type in Python and it looks like this.

573
00:00:50,130 --> 00:00:52,830
It has round brackets around it

574
00:00:53,190 --> 00:00:56,970
and then each of the items inside are separated by a comma.

575
00:00:57,570 --> 00:00:59,970
So does this remind you of another data type?

576
00:01:00,600 --> 00:01:04,110
Does it not look a little bit like a list? Well,

577
00:01:04,110 --> 00:01:08,880
indeed a tuple is very similar to a list. Each of the items that go into the

578
00:01:08,880 --> 00:01:10,260
tuple are ordered.

579
00:01:10,740 --> 00:01:15,720
So let's pull up my Python console here and let's create my tuple 

580
00:01:17,130 --> 00:01:21,060
which is denoted by a set of round parentheses

581
00:01:21,450 --> 00:01:25,410
and then let's put in three items, 1, 3, and 8,

582
00:01:26,010 --> 00:01:28,320
and there we have created a new tuple.

583
00:01:28,950 --> 00:01:32,370
Now in order to get hold of any of those items in there,

584
00:01:32,460 --> 00:01:36,540
I can write the name of the variable and then using square brackets

585
00:01:36,570 --> 00:01:38,460
I can access the index.

586
00:01:38,730 --> 00:01:43,710
So 1 is going to be at position zero, 3 is going to be at position one and

587
00:01:43,740 --> 00:01:47,220
8 is going to be at position two. So if I hit enter on this,

588
00:01:47,280 --> 00:01:49,350
then you can see that's going to be equal to 8.

589
00:01:50,820 --> 00:01:52,860
And if you click this drop down on the right,

590
00:01:52,890 --> 00:01:56,700
you can see the same representation; position 0, 1,  2,

591
00:01:57,060 --> 00:02:00,510
and those pieces of data and the total length is three.

592
00:02:01,110 --> 00:02:05,760
So at this point you might be asking yourself, well, I already know about lists,

593
00:02:05,820 --> 00:02:10,320
so why do I need to know about tuples? What's the difference anyways? Well,

594
00:02:10,350 --> 00:02:14,220
a tuple is going to be carved in stone

595
00:02:14,460 --> 00:02:18,390
so you can't change the values like you can with lists.

596
00:02:19,500 --> 00:02:22,020
For example, if I wanted to say

597
00:02:22,020 --> 00:02:26,220
get hold of my tuple and instead of the 8 at position two,

598
00:02:26,610 --> 00:02:30,630
I want to change it to 12. Now, if I go ahead and hit enter,

599
00:02:30,660 --> 00:02:34,350
you can see I get a error and this is a type error.

600
00:02:34,890 --> 00:02:39,390
This particular type, tuple, does not support item assignment.

601
00:02:39,600 --> 00:02:42,720
So I can't just change it willingly like this.

602
00:02:43,290 --> 00:02:46,380
And I also can't remove items from the tuple,

603
00:02:46,620 --> 00:02:51,330
I can't change it in any way. Once you've created your tuple 

604
00:02:51,360 --> 00:02:56,360
you can consider it as carved in stone and it is what we call immutable.

605
00:02:57,150 --> 00:03:01,900
It cannot be changed. So why would you use a tuple then?

606
00:03:02,620 --> 00:03:03,880
Well, think about the times

607
00:03:04,150 --> 00:03:07,990
like say if you're creating a color scheme for your website or are you creating

608
00:03:07,990 --> 00:03:12,220
some sort of list that you want to stay constant and you don't want somebody to

609
00:03:12,220 --> 00:03:16,360
accidentally change it or accidentally mess it up, well,

610
00:03:16,360 --> 00:03:18,610
then you might want to consider using a tuple.

611
00:03:20,050 --> 00:03:23,800
And if you find yourself creating a tuple and then realizing, Oh,

612
00:03:23,830 --> 00:03:26,020
actually I need to change it well,

613
00:03:26,020 --> 00:03:29,650
then you can simply put your tuple inside a list like this,

614
00:03:30,010 --> 00:03:32,800
and you can actually convert it into a list.

615
00:03:34,150 --> 00:03:36,010
Coming back to our documentation,

616
00:03:36,400 --> 00:03:41,400
the color is represented by a tuple because if you define a color,

617
00:03:41,680 --> 00:03:43,330
you're unlikely to change it.

618
00:03:44,020 --> 00:03:46,870
And then we have a r, g, and b,

619
00:03:46,960 --> 00:03:50,380
which is in the range between zero and the color mode.

620
00:03:50,860 --> 00:03:55,860
So the mode can be between 0 and 1 or 0 and 255. In the course resources,

621
00:03:58,030 --> 00:04:01,810
I've linked to this really handy RGB calculator tool,

622
00:04:02,290 --> 00:04:06,190
which demonstrates how RGB colors work so perfectly.

623
00:04:06,610 --> 00:04:10,060
You can see that if we have zero amount of red, zero amounts of green,

624
00:04:10,090 --> 00:04:11,920
zero amounts of blue, we get black.

625
00:04:12,430 --> 00:04:17,430
But if we mix different amounts of red and different amounts of green and

626
00:04:18,670 --> 00:04:22,029
different amounts of blue, then we can get all of the colors in the rainbow.

627
00:04:22,360 --> 00:04:26,020
The three primary colors can create any color that you dream of.

628
00:04:26,620 --> 00:04:29,110
And each of these sliders,

629
00:04:29,140 --> 00:04:34,000
you can see, goes from 0 all the way up to 255.

630
00:04:34,570 --> 00:04:38,230
So more red, more green or more blue.

631
00:04:39,220 --> 00:04:42,730
And this is what the RGB color ends up looking like.

632
00:04:43,930 --> 00:04:48,790
I find it easier to think about the range between 0 and 255.

633
00:04:49,330 --> 00:04:50,200
So in turtle,

634
00:04:50,200 --> 00:04:54,880
we actually have to change the color mode to 255.

635
00:04:55,510 --> 00:04:57,340
So to do this, it's a little bit tricky

636
00:04:57,370 --> 00:04:59,920
which is why I didn't want to put this as part of the challenge.

637
00:05:00,310 --> 00:05:04,750
But we have to tap into the actual turtle module and not the turtle object,

638
00:05:04,990 --> 00:05:09,910
and then change the color mode for that module. Back in our code,

639
00:05:09,940 --> 00:05:12,490
we can tap into our turtle module

640
00:05:12,820 --> 00:05:15,910
which is known as 't' in our code.

641
00:05:17,080 --> 00:05:22,080
And then we can tap into the color mode to make it go from 0 to 255.

642
00:05:24,610 --> 00:05:29,590
So now that we've changed the color mode, we can now create a random color.

643
00:05:30,040 --> 00:05:33,280
So let's get rid of this list of colors. Instead,

644
00:05:33,280 --> 00:05:36,880
I'm going to create a new function called a random_color,

645
00:05:37,960 --> 00:05:42,960
and this function is going to return a random color using RGB.

646
00:05:44,440 --> 00:05:47,410
So let's first create a random red.

647
00:05:48,280 --> 00:05:53,280
So we use the random module and then use the randint and then generate a number

648
00:05:53,620 --> 00:05:56,740
between 0 and 255.

649
00:05:57,710 --> 00:06:02,420
And then we can repeat this process for the other two color spaces,

650
00:06:02,750 --> 00:06:05,900
so green and for blue.

651
00:06:06,920 --> 00:06:08,930
Now we've got three random numbers,

652
00:06:08,960 --> 00:06:11,480
one each representing each of the color spaces,

653
00:06:11,840 --> 00:06:15,590
and then we can generate our tuple. Here's the challenge for you.

654
00:06:15,950 --> 00:06:18,290
See if you can return from this function

655
00:06:18,350 --> 00:06:23,350
a tuple that consists of the three random integers, r, g and b,

656
00:06:24,710 --> 00:06:29,710
and then use that random color to color the turtle drawing instead of this broken

657
00:06:30,920 --> 00:06:34,070
code which relied on that previous list of colors.

658
00:06:34,610 --> 00:06:37,220
Pause the video and see if you can complete this challenge.

659
00:06:40,150 --> 00:06:42,460
All right. So we know that to create a tuple 

660
00:06:42,460 --> 00:06:45,460
we need a set of round brackets or parentheses,

661
00:06:45,940 --> 00:06:48,610
and then we're going to put each of these in order,

662
00:06:48,610 --> 00:06:53,380
so r, g and b. So here's our tuple created,

663
00:06:53,410 --> 00:06:56,860
and this is basically our new random color.

664
00:06:57,460 --> 00:07:02,460
And then this function is going to return that random color as the output.

665
00:07:03,850 --> 00:07:08,350
So now instead of using random.choice and using that previous list,

666
00:07:08,860 --> 00:07:11,770
all we have to do is get hold of a random color

667
00:07:12,160 --> 00:07:16,840
that's going to be outputted from this function and then use it to color Tim's

668
00:07:16,840 --> 00:07:19,780
drawing. So let's run this code again,

669
00:07:20,320 --> 00:07:23,380
and you should be able to see that in this random walk,

670
00:07:23,500 --> 00:07:25,780
the color is completely random.

671
00:07:26,110 --> 00:07:31,110
Pretty much every single turn is going to draw something completely different in

672
00:07:31,540 --> 00:07:32,373
terms of color.

673
00:07:33,190 --> 00:07:38,080
And this is achieved by learning a little bit about how colors work and how we

674
00:07:38,080 --> 00:07:41,860
can generate them using the random RGB colors.


675
00:00:00,180 --> 00:00:05,180
Now the final challenge for today comes courtesy of a childhood toy that you

676
00:00:05,190 --> 00:00:08,310
might've already seen. So this is going to be our training bike,

677
00:00:08,610 --> 00:00:12,330
and it's going to be the last coding exercise before we tackle our final

678
00:00:12,330 --> 00:00:16,500
project. So what are we doing? We're making a spirograph.

679
00:00:16,800 --> 00:00:19,350
Do you remember those geometric gear shaped things

680
00:00:19,350 --> 00:00:23,160
which you would draw and draw and it would make these funky circular shapes?

681
00:00:23,490 --> 00:00:25,980
Well, that's what we're going to be doing, but with turtle.

682
00:00:26,400 --> 00:00:31,400
We're going to get our turtle to draw a number of circles each with a radius of

683
00:00:32,040 --> 00:00:35,250
a hundred in distance. And once it's done,

684
00:00:35,280 --> 00:00:39,060
we should end up with something that looks like this.

685
00:00:39,900 --> 00:00:43,710
So we're going to be using our random colors and we're going to be using the

686
00:00:43,710 --> 00:00:44,640
documentation.

687
00:00:45,540 --> 00:00:50,070
I want you to dig through the documentation and see if you can figure out how to

688
00:00:50,070 --> 00:00:54,330
draw a circle and to determine how large the circle should be.

689
00:00:55,020 --> 00:00:59,910
And then I want you to figure out how you can get it to repeatedly draw a circle

690
00:01:00,180 --> 00:01:05,129
and change the tilt of the circle by a little bit each time,

691
00:01:05,370 --> 00:01:09,930
so that you end up with that effect. Pause the video and give that a go now.

692
00:01:12,960 --> 00:01:13,770
Alright. Again,

693
00:01:13,770 --> 00:01:16,530
we're going to be scrolling through all of the available methods

694
00:01:16,590 --> 00:01:18,960
looking for something that might help us.

695
00:01:19,800 --> 00:01:23,790
I think it's going to be somewhere in the turtle motion's move and draw section.

696
00:01:24,150 --> 00:01:25,740
And if you look down this list,

697
00:01:25,770 --> 00:01:30,770
you can see there is a method that allows us to draw a circle with a given

698
00:01:31,110 --> 00:01:31,943
radius.

699
00:01:32,070 --> 00:01:37,070
So we can put in the radius as one of the inputs and draw our circle. Heading

700
00:01:37,950 --> 00:01:39,420
back to our code,

701
00:01:39,450 --> 00:01:44,450
I'm going to delete some of the previous parts where we've got the directions

702
00:01:44,970 --> 00:01:46,710
and also changing the pen size.

703
00:01:47,040 --> 00:01:51,090
I'm going to leave the speed as fastest because we're going to need it to go

704
00:01:51,090 --> 00:01:53,430
pretty quick to draw all of those circles.

705
00:01:53,910 --> 00:01:56,400
And I'm also going to delete the final for loop.

706
00:01:57,270 --> 00:02:01,710
Now notice how I've got this warning here telling me that it doesn't really like

707
00:02:01,740 --> 00:02:06,740
the idea of me calling a variable the same as the name of a function.

708
00:02:07,470 --> 00:02:10,889
So why don't we just call this color instead

709
00:02:11,250 --> 00:02:16,230
and then we can return that as the output and get rid of that warning.

710
00:02:16,860 --> 00:02:20,490
Now we're ready to code up our spirograph.

711
00:02:20,820 --> 00:02:25,170
So the first thing that we're going to try and do is to draw a circle.

712
00:02:25,650 --> 00:02:29,100
Now the circle requires a radius,

713
00:02:29,130 --> 00:02:33,570
so I'm going to give it a radius of a hundred. And when I hit run,

714
00:02:33,810 --> 00:02:37,080
we can see briefly that it painted a circle.

715
00:02:37,530 --> 00:02:42,060
So let's go ahead and create our screen from t.screen.

716
00:02:42,660 --> 00:02:47,660
And then we can use that screen.exitonclick method so that when we run our

717
00:02:48,480 --> 00:02:53,130
code, it doesn't actually remove the window until we click on it.

718
00:02:53,880 --> 00:02:57,120
So I can see that I've painted my first circle

719
00:02:57,300 --> 00:03:01,750
and I would like, if possible, to make my circle

720
00:03:01,960 --> 00:03:04,060
have a different color each time.

721
00:03:04,420 --> 00:03:09,420
So I'm going to change the color to use a random color that's produced by this

722
00:03:10,030 --> 00:03:13,630
function. So now every time I run my code,

723
00:03:13,690 --> 00:03:16,270
you'll see a different colored circle.

724
00:03:17,050 --> 00:03:22,050
The turtle is basically gonna draw out this path and then go back to its

725
00:03:22,870 --> 00:03:25,600
original position facing East.

726
00:03:26,020 --> 00:03:29,740
If we wanted multiple circles to overlap with each other,

727
00:03:29,860 --> 00:03:34,150
then we're going to have to change the heading or the pointing direction of our

728
00:03:34,150 --> 00:03:37,450
turtle. If we look at this section,

729
00:03:37,750 --> 00:03:40,300
the current state of our turtle,

730
00:03:40,540 --> 00:03:43,420
you can see that you can get the current position,

731
00:03:43,450 --> 00:03:46,900
the current Y coordinate and X coordinate,

732
00:03:47,110 --> 00:03:49,450
but you can also get hold of the current heading,

733
00:03:49,480 --> 00:03:52,150
so which direction it's pointing towards.

734
00:03:52,720 --> 00:03:55,840
And all we have to do is just call this heading method.

735
00:03:56,770 --> 00:04:01,210
So now if I print my tim.heading,

736
00:04:01,720 --> 00:04:06,720
then you can see that when I run my code and I take a look inside the console,

737
00:04:07,030 --> 00:04:09,400
it's pointing at 0.0.

738
00:04:10,090 --> 00:04:15,040
What if we could change the heading to make it a little bit shifted?

739
00:04:15,670 --> 00:04:15,880
Well,

740
00:04:15,880 --> 00:04:20,740
there's actually a different method for changing the heading and getting the

741
00:04:20,740 --> 00:04:25,570
heading. For example, if we want to set the heading,

742
00:04:25,600 --> 00:04:29,590
then we have to use this method and give it a number.

743
00:04:30,370 --> 00:04:32,890
So what if I get the current heading

744
00:04:35,980 --> 00:04:39,580
and then maybe I add 5 or 10 degrees to it,

745
00:04:39,910 --> 00:04:44,050
and then I change my turtle's heading using set

746
00:04:44,050 --> 00:04:47,560
heading to the current heading plus 10.

747
00:04:49,450 --> 00:04:54,190
And then we get a new circle drawn. So let's see what this looks like.

748
00:04:55,840 --> 00:04:59,830
And you can see that I've drawn one circle and then I've tilted to the left a

749
00:04:59,830 --> 00:05:03,940
little bit and then drawn a second circle. So extrapolating this,

750
00:05:03,970 --> 00:05:06,610
you can imagine that if we had a loop that kept going,

751
00:05:06,850 --> 00:05:09,610
then we could draw our final spirograph shape.

752
00:05:10,180 --> 00:05:11,860
Let's create that loop.

753
00:05:12,160 --> 00:05:15,910
So the parts that don't need to be in the loop is setting the speed.

754
00:05:16,300 --> 00:05:18,880
But the color needs to change each time,

755
00:05:19,120 --> 00:05:23,410
the circle needs to be drawn each time and the heading needs to be updated each

756
00:05:23,410 --> 00:05:24,243
time.

757
00:05:24,280 --> 00:05:29,280
Now I'm going to simplify this line of code to contract it into a single line.

758
00:05:31,540 --> 00:05:34,870
So I'm setting Tim to a new heading

759
00:05:35,230 --> 00:05:38,290
and that is from the current heading plus 10.

760
00:05:39,250 --> 00:05:43,000
So now let's create our loop and let's say

761
00:05:43,000 --> 00:05:45,550
we're going to loop a hundred times.

762
00:05:48,540 --> 00:05:51,900
Now let's run our code and see what it looks like.

763
00:05:54,090 --> 00:05:56,910
You can see it's drawing out our spirograph.

764
00:05:56,930 --> 00:06:00,350
It's not as dense as it previously was,

765
00:06:00,830 --> 00:06:02,330
but look at what it's doing.

766
00:06:02,390 --> 00:06:06,410
It's drawing the same circle on top of a previous circle,

767
00:06:06,650 --> 00:06:08,510
cause it doesn't know when to stop.

768
00:06:09,200 --> 00:06:13,790
It's stopping only once it's gone through the hundred rotations.

769
00:06:14,270 --> 00:06:19,270
So how can we figure out a way to get it to only draw as many circles as we

770
00:06:19,730 --> 00:06:20,563
need?

771
00:06:21,740 --> 00:06:26,740
Let's say that I created a new function called draw_spirograph,

772
00:06:27,890 --> 00:06:31,520
and this function accepts a single parameter,

773
00:06:31,790 --> 00:06:35,390
which is the size of the gap.

774
00:06:37,550 --> 00:06:42,260
And that is going to be the size that's going to be in between each of these

775
00:06:42,260 --> 00:06:43,490
circles that gets drawn.

776
00:06:44,000 --> 00:06:48,230
And that's of course determined by the direction heading of my arrow.

777
00:06:48,890 --> 00:06:51,710
So if I pass in this size of gap,

778
00:06:51,740 --> 00:06:56,450
I'm going to use it here to change the tilt of my circle.

779
00:06:57,020 --> 00:07:02,020
But I can also use that because it's a degree to determine how many times my

780
00:07:02,780 --> 00:07:04,460
spirograph needs to be drawn.

781
00:07:04,910 --> 00:07:09,440
So we know that there's 360 degrees in a full circle.

782
00:07:09,980 --> 00:07:12,980
And for each circle that we're drawing,

783
00:07:13,310 --> 00:07:17,720
we're basically giving it a different offset right? And

784
00:07:17,720 --> 00:07:19,070
that's our size_of_gap.

785
00:07:19,490 --> 00:07:22,760
So if we divide 360 by each offset,

786
00:07:23,120 --> 00:07:28,120
then we'll repeat our code for as many times as we need to draw all the circles

787
00:07:28,760 --> 00:07:31,940
and complete the final spirograph. Now,

788
00:07:32,000 --> 00:07:35,960
the only problem is if I call this method,

789
00:07:36,770 --> 00:07:40,460
dra, I think I meant to write draw.

790
00:07:41,540 --> 00:07:45,410
So draw spirograph and I give it a size of five.

791
00:07:45,470 --> 00:07:47,750
So a little bit smaller than last time,

792
00:07:48,050 --> 00:07:52,100
tilting a little bit less each time. You can see that if I run this code,

793
00:07:52,490 --> 00:07:53,780
we get an error.

794
00:07:54,350 --> 00:07:59,350
And the error says that the float object can't be used as an integer

795
00:08:00,650 --> 00:08:03,380
and it's telling us where we have that float object.

796
00:08:03,950 --> 00:08:08,240
So remember that this number is going to go into here

797
00:08:08,300 --> 00:08:13,220
and then 360 divided by five is actually going to give us a floating point

798
00:08:13,220 --> 00:08:16,070
number, even though it divides cleanly

799
00:08:16,100 --> 00:08:19,340
just because this is how division works in Python. Now,

800
00:08:19,370 --> 00:08:24,370
unfortunately though our range function is going to need a whole number,

801
00:08:25,160 --> 00:08:26,030
an integer.

802
00:08:26,360 --> 00:08:30,890
It can't take a floating point number because then how many times are we

803
00:08:30,890 --> 00:08:34,070
repeating it? 3.4 times? What does that even mean?

804
00:08:34,370 --> 00:08:37,130
So this input has to be a whole number.

805
00:08:37,520 --> 00:08:42,520
So let's turn it into an integer by creating an integer and then wrapping this

806
00:08:44,059 --> 00:08:48,470
calculation inside the brackets. So now when we run our code,

807
00:08:48,500 --> 00:08:53,500
you can see it paints our spirograph, shifting by five degrees each time.

808
00:08:54,710 --> 00:08:59,670
And once it's gone through all of the iterations and the spirograph is

809
00:08:59,670 --> 00:09:02,280
complete, then it actually stops.

810
00:09:03,750 --> 00:09:07,050
Did you manage to get the solution for this challenge?

811
00:09:07,500 --> 00:09:12,500
If not, be sure to review this lesson and fix your code as needed. Once you're

812
00:09:13,020 --> 00:09:15,600
happy with everything that we've explained so far,

813
00:09:16,050 --> 00:09:19,080
then it's time to head to the final challenge.

814
00:09:19,530 --> 00:09:22,560
Let's go ahead and create a million dollar painting.

815
00:09:23,160 --> 00:09:26,400
So for all of that and more, I'll see you on the next lesson.


816
00:00:00,480 --> 00:00:02,370
This might seem a bit of an odd question,

817
00:00:02,400 --> 00:00:07,260
but have you ever been to an art museum and looked at the exhibition and thought

818
00:00:07,260 --> 00:00:08,093
to yourself,

819
00:00:08,550 --> 00:00:13,550
I think I could probably do this and don't really understand why it's considered

820
00:00:14,160 --> 00:00:16,880
art. Well, this is a piece of art

821
00:00:16,940 --> 00:00:21,320
by Goldschmied and Chiari called 'Where should we go dancing tonight?'.

822
00:00:22,130 --> 00:00:24,950
And it's meant to be a piece of concept art,

823
00:00:25,280 --> 00:00:30,110
but when the museum cleaners came here at the end of the day and looked at this

824
00:00:30,110 --> 00:00:35,110
mess of cigarette butts and shoes and random bottles,

825
00:00:35,600 --> 00:00:39,140
they thought it was rubbish and they promptly cleaned everything up.

826
00:00:39,590 --> 00:00:43,640
So this is what the exhibition looked like after the cleaners were done the next

827
00:00:43,640 --> 00:00:46,190
day. So to the museum's horror,

828
00:00:46,550 --> 00:00:51,550
their star exhibition gets cleared up and mistaken for rubbish.

829
00:00:52,880 --> 00:00:56,480
So I was talking to a friend and I said, well, you know,

830
00:00:56,540 --> 00:00:59,510
a lot of these modern art pieces, I could probably do it, right?

831
00:00:59,540 --> 00:01:03,680
We could probably get together, put some bottles on the floor, make a mess,

832
00:01:03,710 --> 00:01:07,070
call it art. And he told me, actually, no, you can't.

833
00:01:07,220 --> 00:01:10,820
And you should read this book called the $12 million stuffed shark.

834
00:01:11,360 --> 00:01:14,150
And it talks all about the economics of contemporary art.

835
00:01:14,210 --> 00:01:15,650
And it's a fascinating read.

836
00:01:15,680 --> 00:01:20,680
I've learned so much more about how contemporary art is priced and why they're

837
00:01:20,720 --> 00:01:25,670
priced the way they are. But it also led me to discover some pretty big,

838
00:01:25,700 --> 00:01:28,190
shocking discoveries. Like for example,

839
00:01:28,190 --> 00:01:33,190
the art piece that's referred to on the cover of the page is this shark.

840
00:01:33,920 --> 00:01:37,040
It's a shark that was fished off of the coast of Australia

841
00:01:37,370 --> 00:01:42,200
and then it was preserved in formaldehyde. But it was preserved really badly

842
00:01:42,200 --> 00:01:44,060
like they didn't use enough chemicals

843
00:01:44,090 --> 00:01:48,500
and the shark started going a bit green and a bit of gray in other places

844
00:01:48,500 --> 00:01:50,060
and it also started molding.

845
00:01:50,660 --> 00:01:55,660
But this moldy green shark was bought for $12 million.

846
00:01:56,510 --> 00:02:00,470
And this is not even the craziest piece. So for example,

847
00:02:00,470 --> 00:02:04,790
this diamond encrusted skull was reportedly sold for $50 million.

848
00:02:05,150 --> 00:02:07,130
And these butterfly wings

849
00:02:07,130 --> 00:02:12,130
which have been dissected and stuck to a canvas was sold for 8.5 million.

850
00:02:13,280 --> 00:02:15,920
So who exactly is this crazy man

851
00:02:15,950 --> 00:02:20,090
who's creating all of these pieces of art that's fetching these insane

852
00:02:20,090 --> 00:02:23,180
valuations? Well, it's a guy called Damien Hirst.

853
00:02:23,750 --> 00:02:28,460
And I think out of all his paintings, the craziest ones are the spot paintings,

854
00:02:28,790 --> 00:02:33,790
because it's literally spots of color that are organized randomly on a page. And

855
00:02:37,130 --> 00:02:38,060
check this out.

856
00:02:38,120 --> 00:02:43,120
This particular piece was sold for a whopping 1.275

857
00:02:43,700 --> 00:02:45,920
million pounds.

858
00:02:46,580 --> 00:02:48,950
So maybe like $1.5 million.

859
00:02:49,580 --> 00:02:53,120
It's insane for a painting of dots.

860
00:02:53,720 --> 00:02:57,770
But what I thought was even crazier is if you look at this painting,

861
00:02:57,800 --> 00:02:59,920
at least it's got quite few dots, right?

862
00:03:00,340 --> 00:03:04,150
You're getting your money's worth of dots. But look at this one!

863
00:03:04,550 --> 00:03:07,740
This is the same artist, Damien Hirst, and this painting,

864
00:03:07,770 --> 00:03:12,770
I counted only has 25 spots and this sold for half a million pounds.

865
00:03:15,390 --> 00:03:19,980
It's not even about the number of spots. So I personally still,

866
00:03:19,980 --> 00:03:22,560
as you can see, can't really work out contemporary art,

867
00:03:23,070 --> 00:03:28,070
but what I can work out is how to get Python code to crack Damien Hirst's color

868
00:03:29,520 --> 00:03:30,353
palette,

869
00:03:30,360 --> 00:03:35,360
and use those colors to generate a random canvas of spot paintings that look

870
00:03:39,540 --> 00:03:40,373
equally,

871
00:03:40,470 --> 00:03:44,670
if not more appealing than some of the original Damien Hirst.

872
00:03:45,180 --> 00:03:48,480
So this is what we're going to be making as our project.

873
00:03:49,080 --> 00:03:54,080
And we're going to be using that package, colorgram, to get hold of the color

874
00:03:54,810 --> 00:03:55,643
palette

875
00:03:55,800 --> 00:04:00,780
and then we're going to use those colors to create our own spot painting

876
00:04:01,020 --> 00:04:03,600
that's going to look like this. Firstly,

877
00:04:03,630 --> 00:04:08,630
we're going to be using a package called colorgram and colorgram is a library

878
00:04:10,560 --> 00:04:14,700
of code written in Python that lets you extract colors from images.

879
00:04:15,150 --> 00:04:18,149
So for example, if you take a look at this picture,

880
00:04:18,360 --> 00:04:23,360
once it was run through colorgram and 10 of the most common colors extracted,

881
00:04:24,690 --> 00:04:29,160
you end up with a palette that pretty much looks the same as the colors in the

882
00:04:29,160 --> 00:04:29,993
image.

883
00:04:30,360 --> 00:04:35,340
This is the example of how you would use this colorgram package.

884
00:04:35,760 --> 00:04:39,480
And in this case, they're extracting six colors from an image,

885
00:04:39,750 --> 00:04:44,670
so it basically takes two inputs, an image, and the number of colors.

886
00:04:45,510 --> 00:04:49,860
If we go into Google image search, and we search for a Hirst spot painting,

887
00:04:50,280 --> 00:04:53,940
you can see that there's a lot of spot paintings that this guy created.

888
00:04:54,480 --> 00:04:59,460
I want you to pick a painting with a color palette that you like, um,

889
00:04:59,790 --> 00:05:04,470
maybe something like this, or maybe a bit brighter like this one.

890
00:05:05,010 --> 00:05:05,850
But essentially,

891
00:05:05,910 --> 00:05:09,810
pick one of these images and then go ahead and download it.

892
00:05:10,260 --> 00:05:11,910
So save image.

893
00:05:12,600 --> 00:05:16,560
And then you're going to save that image as image.jpg, 

894
00:05:16,620 --> 00:05:20,820
so jpg. And then go ahead and hit save.

895
00:05:22,620 --> 00:05:26,070
Now go ahead and create a new PyCharm project.

896
00:05:26,130 --> 00:05:30,090
I've called mine hirst-painting, you can call yours whatever you want.

897
00:05:30,870 --> 00:05:33,720
Now we're going to drag our newly downloaded image,

898
00:05:33,990 --> 00:05:38,640
image.jpeg into this project folder, hirst-painting.

899
00:05:39,210 --> 00:05:42,120
And it's going to ask you whether if you want to move the file from,

900
00:05:42,150 --> 00:05:46,020
in my case, the downloads folder to my hirst-painting project.

901
00:05:46,620 --> 00:05:49,470
So then we're going to agree and click refactor.

902
00:05:50,040 --> 00:05:54,600
So now this painting is inside my hirst-painting project,

903
00:05:54,990 --> 00:05:59,180
and I'm ready to go ahead and create a new file called main.py

904
00:05:59,570 --> 00:06:04,160
which is what I'm going to use to extract the colors from this image.

905
00:06:05,720 --> 00:06:06,920
Here's a challenge for you.

906
00:06:07,070 --> 00:06:10,790
See if you can figure out how to use this package,

907
00:06:10,820 --> 00:06:15,820
colorgram, using their project description here and using the example code.

908
00:06:16,880 --> 00:06:21,880
What you're aiming for is to be able to print out a list of all the colors

909
00:06:22,520 --> 00:06:27,520
extracted from the image and each item in the list to be a tuple that you

910
00:06:28,610 --> 00:06:29,443
create.

911
00:06:29,690 --> 00:06:34,690
So remember previously we saw how the turtle module likes to work with color

912
00:06:34,940 --> 00:06:38,900
tuples which are created with a amount of red,

913
00:06:39,200 --> 00:06:44,200
the amount of green and the amount of blue, all contained inside a tuple.

914
00:06:44,900 --> 00:06:47,990
This is the format that you're going to try and get your data into.

915
00:06:48,340 --> 00:06:50,720
Might take a little bit of wrangling and a little bit of thought,

916
00:06:50,990 --> 00:06:54,440
but just before you get started, here's a quick heads up.

917
00:06:54,980 --> 00:06:59,630
I noticed that when I was testing this on repl.it and when I searched for color

918
00:06:59,630 --> 00:07:01,880
gram in the packages,

919
00:07:02,060 --> 00:07:06,560
I couldn't actually find the package to install into the project.

920
00:07:06,980 --> 00:07:10,790
So this is another good reason for using PyCharm.

921
00:07:11,120 --> 00:07:15,320
It just gives you all the professional tools and it has access to all the things

922
00:07:15,320 --> 00:07:18,830
that you need. So pause the video and complete this challenge.

923
00:07:20,870 --> 00:07:24,260
All right. So we know that in order to use external packages,

924
00:07:24,290 --> 00:07:28,010
ones that weren't installed with the Python standard library,

925
00:07:28,340 --> 00:07:33,340
we have to first install the package. To install a package

926
00:07:33,410 --> 00:07:38,000
we go to our preferences and then we select our project

927
00:07:38,450 --> 00:07:40,700
and then we go to our project interpreter.

928
00:07:41,240 --> 00:07:44,720
Now we click the plus button and we search for colorgram.

929
00:07:45,500 --> 00:07:49,250
And there it is. Now let's go ahead and install the package.

930
00:07:49,640 --> 00:07:54,470
And once that's installed successfully, then we can close all of this and click

931
00:07:54,500 --> 00:07:58,400
okay. Now that we've got our package,

932
00:07:58,430 --> 00:08:01,910
we can actually import it. So we'll import colorgram,

933
00:08:02,780 --> 00:08:07,780
and we can use the method that's described here called cologram.extract in

934
00:08:10,160 --> 00:08:15,050
order to get ahold of six colors. Now, if we want more colors,

935
00:08:15,620 --> 00:08:18,830
for example, in this image, that's probably a good 30 colors.

936
00:08:18,920 --> 00:08:23,060
So let's go ahead and extract 30 colors from this image.

937
00:08:23,360 --> 00:08:27,320
But of course our image is not called sweet_pic.jpg.

938
00:08:27,440 --> 00:08:29,870
Ours is actually called image.jpg.

939
00:08:30,320 --> 00:08:35,150
So let's go ahead and rename this image so that it matches with our file.

940
00:08:35,630 --> 00:08:40,520
And remember that your image has to be at the same level as your main.py for

941
00:08:40,520 --> 00:08:42,380
this kind of code to work.

942
00:08:42,590 --> 00:08:46,820
So make sure that you've got it inside the hirst-painting project folder, on the

943
00:08:46,820 --> 00:08:48,980
same indentation level as main.

944
00:08:49,400 --> 00:08:54,260
Now let's go ahead and print out our colors that are generated.

945
00:08:54,710 --> 00:08:58,620
And remember that when you hit run, this process might take a little while.

946
00:08:59,100 --> 00:09:02,370
And the author of the library says that for a

947
00:09:02,370 --> 00:09:07,170
512 by 512 image, it takes about 0.6 of a second.

948
00:09:07,770 --> 00:09:10,980
Obviously, if the image is larger, it'll probably take a bit longer.

949
00:09:11,580 --> 00:09:15,720
Let's go ahead and hit run and see what we get.

950
00:09:17,070 --> 00:09:19,350
Once the process is finished,

951
00:09:19,380 --> 00:09:24,380
you can see it's created some colors and these colors are in a list and it's got

952
00:09:26,730 --> 00:09:31,730
some different formats for the color. To understand that we have to go back to

953
00:09:32,280 --> 00:09:33,720
our documentation.

954
00:09:34,260 --> 00:09:38,610
You can see that the color that's extracted can either be a RGB color

955
00:09:38,640 --> 00:09:42,120
which is what we're interested in, or an HSL color

956
00:09:42,330 --> 00:09:44,130
which is not quite what we want.

957
00:09:44,610 --> 00:09:49,610
So let's go ahead and write a for loop that taps into each of those colors.

958
00:09:53,750 --> 00:09:56,210
So for color in colors,

959
00:09:56,810 --> 00:10:01,810
let's go ahead and create a new list called rgb_colors,

960
00:10:04,700 --> 00:10:09,470
and we'll just leave it as an empty list. And then for each of these colors,

961
00:10:09,530 --> 00:10:14,530
we're going to add to our rgb_colors by appending.

962
00:10:15,440 --> 00:10:19,550
And the thing we're going to pend is each of these individual color objects,

963
00:10:19,970 --> 00:10:22,400
and then we're going to get the RGB value.

964
00:10:23,240 --> 00:10:25,820
And once this process is done,

965
00:10:26,120 --> 00:10:29,330
then let's go ahead and print our RGB colors.

966
00:10:30,500 --> 00:10:35,480
So now you can see we've got a whole bunch of RGB colors with r equals what, g

967
00:10:35,480 --> 00:10:37,130
equals what and b equals what,

968
00:10:37,430 --> 00:10:41,870
but this is not quite the format that we need it in order to use it inside the

969
00:10:41,870 --> 00:10:45,380
turtle. We actually have to go one step further.

970
00:10:45,830 --> 00:10:47,900
We have to create a r

971
00:10:48,110 --> 00:10:53,110
which is from the color.rgb.r

972
00:10:55,520 --> 00:10:59,180
and then we repeat this process for green

973
00:11:00,890 --> 00:11:02,090
and blue.

974
00:11:04,700 --> 00:11:09,700
And then we create our tuple by creating our new_color

975
00:11:10,850 --> 00:11:14,780
which is going to be equal to a tuple with a parentheses

976
00:11:14,810 --> 00:11:19,490
and then r, g and b. Finally,

977
00:11:19,490 --> 00:11:24,490
we're going to add to our rgb_colors by appending this new color.

978
00:11:25,910 --> 00:11:29,150
Now let's print our rgb_colors.

979
00:11:34,550 --> 00:11:35,600
And you can see

980
00:11:35,600 --> 00:11:40,600
we finally got it in the format that we need, a tuple with the r value, g value

981
00:11:41,600 --> 00:11:45,530
and b value that we can use in our project.

982
00:11:46,190 --> 00:11:50,990
Now we've managed to get the first part of the problem solved so we can go ahead

983
00:11:50,990 --> 00:11:55,990
and copy this entire list and paste it into our main.py.

984
00:11:58,270 --> 00:12:01,540
I recommend actually testing out these colors

985
00:12:01,840 --> 00:12:04,780
using the w3schools RGB tool.

986
00:12:05,050 --> 00:12:09,760
Go ahead and paste your color to replace this current tuple here.

987
00:12:10,180 --> 00:12:14,230
Make sure that you still got that word rgb there, and then hit enter

988
00:12:14,680 --> 00:12:18,190
and it will insert each of these values into the r, g and b.

989
00:12:18,640 --> 00:12:22,030
So you can see the first color we got is actually a shade of white,

990
00:12:22,030 --> 00:12:24,100
so probably one of the backgrounds.

991
00:12:24,730 --> 00:12:28,630
So we can go ahead and delete that one because we're not going to be painting

992
00:12:28,630 --> 00:12:31,090
the background in our own. It's just going to be white.

993
00:12:31,510 --> 00:12:36,310
Now let's check the next one. As you can see, the closer the numbers are to

994
00:12:36,340 --> 00:12:40,450
255, the more likely it is that it's a shade of white.

995
00:12:40,840 --> 00:12:45,280
So this one is probably one of the other background colors in this image

996
00:12:45,490 --> 00:12:48,730
so we can delete that one as well. And finally,

997
00:12:48,730 --> 00:12:52,570
this last one is probably going to be also quite white-ish,

998
00:12:53,020 --> 00:12:58,020
and we can probably delete that one too. This one because of the blue that's

999
00:12:58,810 --> 00:13:03,580
109 I'm going to be pretty sure that this is actually a real color.

1000
00:13:04,270 --> 00:13:06,370
And there we go, we get this kind of sand color,

1001
00:13:06,910 --> 00:13:10,690
which looks very similar to some of these colors that we see on here.

1002
00:13:11,080 --> 00:13:13,060
So we can presume that the rest of these,

1003
00:13:13,120 --> 00:13:17,770
because they're sampled by the frequency of occurrence, are probably going to be

1004
00:13:17,770 --> 00:13:20,290
real colors that we can put into our painting.

1005
00:13:20,770 --> 00:13:24,340
Let's save this list as our color_list,

1006
00:13:27,070 --> 00:13:32,070
and we can comment out the rest of this code because we don't need to run this

1007
00:13:32,110 --> 00:13:33,970
computation every single time.

1008
00:13:34,240 --> 00:13:39,240
We just want to extract the colors and then you can delete or comment out the

1009
00:13:39,490 --> 00:13:43,030
colorgram related code. In the next lesson,

1010
00:13:43,060 --> 00:13:47,230
we're going to be using this color list to create our Hirst painting.

1011
00:13:47,650 --> 00:13:49,210
So for all of that and more, I'll see you there.


1012
00:00:00,270 --> 00:00:05,270
Now that we've used colorgram to extract all of the colors from our image

1013
00:00:06,630 --> 00:00:11,490
and we've created a list from that extraction and we've gotten rid of all the

1014
00:00:11,490 --> 00:00:12,323
white shades,

1015
00:00:12,660 --> 00:00:17,660
then we're now ready to go ahead and start using this color list to create our Hirst

1016
00:00:18,630 --> 00:00:19,463
painting.

1017
00:00:19,620 --> 00:00:23,490
So you can either delete the rest of the code or leave it commented out.

1018
00:00:24,000 --> 00:00:29,000
But the goal of the challenge is to use turtle and those colors that you've just

1019
00:00:29,400 --> 00:00:33,240
extracted to create a spot painting like this.

1020
00:00:33,750 --> 00:00:36,270
Here's the requirements of the program.

1021
00:00:36,810 --> 00:00:41,810
You're going to paint a painting with 10 by 10 rows of spots.

1022
00:00:42,900 --> 00:00:47,700
So that's going to be 10 along this side and 10 along this side.

1023
00:00:48,330 --> 00:00:53,330
Each of your dots should be around 20 in size and spaced apart by around 50

1024
00:00:53,490 --> 00:00:54,323
paces.

1025
00:00:54,990 --> 00:00:59,990
So you're going to need to look at the documentation for turtle to figure out

1026
00:01:00,060 --> 00:01:01,590
how to draw these dots.

1027
00:01:02,160 --> 00:01:06,750
You're going to have to figure out how to move your turtle so that it creates

1028
00:01:06,780 --> 00:01:11,780
this 10 by 10 pattern and paint our hundred dots using the color palette that

1029
00:01:13,260 --> 00:01:16,410
we generated. This is your chance to shine,

1030
00:01:16,710 --> 00:01:20,100
and it's time to pause the video and complete the final project.

1031
00:01:25,880 --> 00:01:30,140
So the first thing we're going to do is we're of course going to need to import

1032
00:01:30,200 --> 00:01:31,070
our turtle.

1033
00:01:31,640 --> 00:01:35,720
And I'm going to give it an alias just to make it more clear what it is that I'm

1034
00:01:35,720 --> 00:01:40,550
referring to. I'm going to create my turtle, which I'll call Tim again.

1035
00:01:40,970 --> 00:01:45,050
And it's going to be created from the turtle module and inside there,

1036
00:01:45,080 --> 00:01:46,700
there's a turtle class.

1037
00:01:47,360 --> 00:01:51,740
Now that we have our object created and saved inside Tim,

1038
00:01:52,160 --> 00:01:55,310
we're ready to go ahead and do some things with this turtle.

1039
00:01:55,880 --> 00:01:59,210
If you take a look at the documentation for turtle,

1040
00:01:59,630 --> 00:02:04,630
you can see that instead of just drawing circles or just moving forwards or left

1041
00:02:05,030 --> 00:02:07,280
or right, you can also draw a dot.

1042
00:02:07,820 --> 00:02:10,280
Now a dot takes two parameters,

1043
00:02:10,580 --> 00:02:13,310
its size and its color.

1044
00:02:13,760 --> 00:02:18,170
So we mentioned that we were going to draw a 20-size dot and then we're going to

1045
00:02:18,170 --> 00:02:22,340
pass in a random color. So let's create our dot.

1046
00:02:22,370 --> 00:02:25,040
Let's say tim.dot,

1047
00:02:25,550 --> 00:02:30,550
and then let's give it a size of 20 and then let's give it a random color. Now

1048
00:02:31,640 --> 00:02:36,640
because we're using the RGB color that has the r, g and b values between 0 and

1049
00:02:39,380 --> 00:02:40,790
255,

1050
00:02:41,330 --> 00:02:46,330
we first have to get the turtle module to change its color mode to

1051
00:02:46,610 --> 00:02:49,910
255. And we saw this in previous lessons already.

1052
00:02:50,510 --> 00:02:55,510
So now we can go into our color list and pick a random color using the random

1053
00:02:56,870 --> 00:02:57,703
module.

1054
00:02:58,160 --> 00:03:03,160
So let's tap the random module and get hold of the choice method and pass in our

1055
00:03:04,450 --> 00:03:05,320
color_list.

1056
00:03:05,830 --> 00:03:10,210
So now it's going to choose a random color from that list and then create a dot

1057
00:03:10,360 --> 00:03:15,360
hopefully. Now we don't want our painting to disappear once we hit run,

1058
00:03:15,760 --> 00:03:17,800
because right now if I run this code,

1059
00:03:18,040 --> 00:03:20,650
you can see it paints a dot and then it quickly flashes away.

1060
00:03:21,190 --> 00:03:26,190
So let's create a new screen object from the turtle module and the class is

1061
00:03:27,580 --> 00:03:28,630
called a screen.

1062
00:03:29,170 --> 00:03:34,170
And then we can get our screen to change its behavior by calling exitonclick.

1063
00:03:36,430 --> 00:03:40,030
This way when we run our code, you can see our dot painted,

1064
00:03:40,450 --> 00:03:42,910
and then only when we click does it disappear.

1065
00:03:43,450 --> 00:03:46,060
So we've managed to get our first dot onto the screen.

1066
00:03:46,570 --> 00:03:50,710
The next step is figuring out how we can get this process repeated.

1067
00:03:51,280 --> 00:03:56,280
What if we get our Tim to move forwards by say,

1068
00:03:56,500 --> 00:04:00,520
50 paces, and then we draw another dot.

1069
00:04:00,640 --> 00:04:03,100
So let's put this into a loop,

1070
00:04:04,540 --> 00:04:06,460
let's get it to run 10 times,

1071
00:04:07,090 --> 00:04:11,800
and then let's indent this block so that it goes inside the loop.

1072
00:04:12,430 --> 00:04:15,670
And now our turtle is going to draw 10 dots.

1073
00:04:16,180 --> 00:04:20,620
But notice how it goes off the screen and it kind of starts bang in the middle.

1074
00:04:21,130 --> 00:04:25,120
And there's also other problems like we're drawing the path as the turtle is

1075
00:04:25,120 --> 00:04:28,330
traveling. Let's address one thing at a time.

1076
00:04:28,390 --> 00:04:33,100
Let's try to move our starting dot so it starts somewhere down here.

1077
00:04:33,730 --> 00:04:38,730
Now there's quite a few ways of solving this. One way is simply by turning our

1078
00:04:40,120 --> 00:04:45,120
Tim, the turtle, before we go into the loop and setting its heading so that it

1079
00:04:46,000 --> 00:04:48,250
points in this direction.

1080
00:04:51,030 --> 00:04:56,030
You can have a play around with the heading and through my experimentation or

1081
00:04:56,820 --> 00:04:58,110
playing around with the code,

1082
00:04:58,140 --> 00:05:03,060
I've realized that I need to get this heading somewhere between 180 and 

1083
00:05:03,060 --> 00:05:03,893
270.

1084
00:05:04,320 --> 00:05:09,120
So what's halfway between 270 and 180? Well,

1085
00:05:09,120 --> 00:05:12,150
it's going to be 225.

1086
00:05:12,630 --> 00:05:16,080
So let's change our heading and let's try again.

1087
00:05:17,670 --> 00:05:22,320
And you can see that our turtle is now moving roughly in the right direction.

1088
00:05:22,890 --> 00:05:26,250
So we know that each time the turtle moves by 50.

1089
00:05:26,640 --> 00:05:31,530
So if we want it to start about here, ish, then we need to move it one,

1090
00:05:31,530 --> 00:05:33,480
two, three, four, five times.

1091
00:05:33,480 --> 00:05:36,840
So 50 times five is 250.

1092
00:05:37,230 --> 00:05:42,230
So we'll set our heading for Tim and then we'll get him to move forward by 250

1093
00:05:42,720 --> 00:05:47,580
paces. So that way we get started right over here.

1094
00:05:48,270 --> 00:05:49,290
Now, at this point

1095
00:05:49,290 --> 00:05:53,880
it's still going to be pointing in that direction that we set over here.

1096
00:05:54,240 --> 00:05:57,680
So we'll have to set the heading back to zero

1097
00:05:57,710 --> 00:06:00,560
if we want it to continue in this direction.

1098
00:06:03,380 --> 00:06:04,280
Now at this stage,

1099
00:06:04,310 --> 00:06:09,310
you might realize you need to do a little bit of tweaking. So we could maybe move

1100
00:06:10,220 --> 00:06:15,220
our turtle forwards a little bit more so that it starts around here and we get

1101
00:06:15,950 --> 00:06:18,440
enough space for our dots.

1102
00:06:19,640 --> 00:06:23,270
But the next important thing we need to solve before we get rid of the lines

1103
00:06:23,300 --> 00:06:25,730
because we can still see the path of our turtle

1104
00:06:25,760 --> 00:06:29,990
which is really helpful, is we need to figure out how to get the turtle to

1105
00:06:30,260 --> 00:06:33,860
turn left, move up by 50, turn left again

1106
00:06:34,220 --> 00:06:36,650
and then start creating the second row.

1107
00:06:37,580 --> 00:06:42,230
That means we need to turn Tim so that it faces up

1108
00:06:42,620 --> 00:06:45,500
which is a heading of 90,

1109
00:06:45,860 --> 00:06:48,650
or you could also just turn it left by 90 degrees.

1110
00:06:49,190 --> 00:06:53,570
And then we're going to get it to move forwards by 50 paces.

1111
00:06:54,110 --> 00:06:57,200
And then we're going to get it to turn left again.

1112
00:06:57,230 --> 00:07:01,400
So we'll set the heading to 180, which is facing left.

1113
00:07:02,270 --> 00:07:05,450
It's through these step-wise changes to your code

1114
00:07:05,660 --> 00:07:08,660
that you can actually get a good sense of what it's doing

1115
00:07:08,840 --> 00:07:12,680
because you can see it drawing and then see if it's doing what you want it to

1116
00:07:12,680 --> 00:07:16,970
do. Now we know that we have our for loop

1117
00:07:17,000 --> 00:07:20,840
which is able to draw a line of dots going from left to right.

1118
00:07:21,350 --> 00:07:25,040
Why don't we move our turtle so that it starts out here again,

1119
00:07:25,460 --> 00:07:28,100
and then it can move along and create another line?

1120
00:07:29,510 --> 00:07:31,250
So after turning it to the left,

1121
00:07:31,490 --> 00:07:36,170
we're going to get it to go forwards by one, two, three, four,

1122
00:07:36,170 --> 00:07:38,240
five, six, seven, eight, nine,

1123
00:07:38,240 --> 00:07:42,110
ten, by 10 times 50 paces.

1124
00:07:42,380 --> 00:07:44,450
So that's going to be 500.

1125
00:07:46,940 --> 00:07:51,940
So now the final thing we need to do is to change its heading so that it faces

1126
00:07:53,450 --> 00:07:56,390
right again. And now we're pretty close.

1127
00:07:56,600 --> 00:07:59,060
All we need to do is to get this

1128
00:07:59,090 --> 00:08:02,690
to repeat every single time we draw 10 dots.

1129
00:08:03,680 --> 00:08:06,830
How can we do that? Well, firstly,

1130
00:08:06,860 --> 00:08:10,460
this needs to go inside the for loop. Well,

1131
00:08:10,490 --> 00:08:15,490
let's say that we create a new variable called number_of_dots,

1132
00:08:18,170 --> 00:08:22,790
and we set it to a hundred. We're going to use that instead of the range

1133
00:08:23,390 --> 00:08:27,680
and we're going to create a range from 1 to the total number of dots we need

1134
00:08:27,680 --> 00:08:28,513
to create.

1135
00:08:28,700 --> 00:08:32,750
And then we can replace this underscore with an actual variable that we'll use

1136
00:08:32,780 --> 00:08:35,480
inside the for loop. So we'll call it

1137
00:08:36,980 --> 00:08:41,980
dot_count because this is going to represent the current number of dots that

1138
00:08:42,590 --> 00:08:46,250
have been painted. Now that we've got the dot count,

1139
00:08:46,400 --> 00:08:51,400
we can then go ahead and use an if statement to check and see if the dot_count

1140
00:08:54,720 --> 00:08:59,460
% 10 is equal to zero.

1141
00:09:00,060 --> 00:09:05,040
Then this means that the dot count is either 10 or it's 20, 30,

1142
00:09:05,040 --> 00:09:07,410
40, 50, 60, 70, 100.

1143
00:09:08,430 --> 00:09:10,680
And under those circumstances,

1144
00:09:10,740 --> 00:09:15,740
we want our tim to move so that it can go to a new line.

1145
00:09:16,770 --> 00:09:18,270
So now, if I run this,

1146
00:09:19,320 --> 00:09:24,320
you can see that Tim draws one row of dots and then swings back around,

1147
00:09:24,900 --> 00:09:29,900
start at the beginning and draws another row of dots. And then keeps on repeating

1148
00:09:30,030 --> 00:09:34,020
this until it gets to the point where it's drawn hundred dots.

1149
00:09:34,530 --> 00:09:36,300
But this is obviously very slow

1150
00:09:36,390 --> 00:09:41,390
so we could speed things up a little bit by changing the speed of Tim at the

1151
00:09:42,060 --> 00:09:44,280
very beginning to fastest.

1152
00:09:44,730 --> 00:09:49,730
So this way it'll animate a lot quicker and we can see our dots show up and it

1153
00:09:51,060 --> 00:09:53,310
takes a little bit less time to see it in action.

1154
00:09:54,060 --> 00:09:57,930
Once our painting is completed, you can see there's one other bug.

1155
00:09:58,440 --> 00:10:02,580
Our final dot is not painted. And this is of course

1156
00:10:02,580 --> 00:10:07,350
because our range operator goes from 1 to 100

1157
00:10:07,890 --> 00:10:12,890
and that means it's only going to run 99 times because 100 - 1 is equal to

1158
00:10:15,120 --> 00:10:18,330
99. So we can add one to this.

1159
00:10:21,140 --> 00:10:21,590
Yeah.

1160
00:10:21,590 --> 00:10:25,550
So once we've changed that, then we managed to get our hundredth dot,

1161
00:10:26,000 --> 00:10:29,660
which of course, again, triggers a new line. Now,

1162
00:10:29,720 --> 00:10:32,180
a lot of these lines were really useful when

1163
00:10:32,250 --> 00:10:35,540
we were trying to visualize how our turtle is moving.

1164
00:10:36,020 --> 00:10:37,970
But now that we've got our painting in place,

1165
00:10:38,180 --> 00:10:40,220
we need to try and get rid of these lines.

1166
00:10:40,880 --> 00:10:45,880
So we know that from the documentation we can use pen up and pen down. At the

1167
00:10:46,310 --> 00:10:49,310
very beginning and the moment where we've created Tim,

1168
00:10:49,610 --> 00:10:54,610
we can already get the pen to come up so that we don't draw those lines that you

1169
00:10:54,980 --> 00:10:59,420
see. By drawing dots we don't actually need the pen to go down.

1170
00:10:59,720 --> 00:11:02,000
It's just going to leave a dot and then move on.

1171
00:11:02,450 --> 00:11:05,300
So just by writing pen up and no pen down,

1172
00:11:05,540 --> 00:11:08,150
we already to get our dots being drawn.

1173
00:11:09,830 --> 00:11:14,300
Now the very last improvement that I can think of is once our painting is

1174
00:11:14,300 --> 00:11:18,440
completed, I'd really like to get rid of the shape of the turtle,

1175
00:11:18,470 --> 00:11:20,720
which in our case is a little arrow.

1176
00:11:21,170 --> 00:11:24,140
Now that's really helpful when we're trying to figure out which direction it's

1177
00:11:24,140 --> 00:11:29,090
facing or how it's moving. But at the very end, we don't really want this.

1178
00:11:31,010 --> 00:11:35,660
So again, back to the documentation, how can we get rid of our turtle?

1179
00:11:36,110 --> 00:11:39,290
Well, there's show turtle and hide turtle.

1180
00:11:39,710 --> 00:11:41,540
And this is how we make the turtle

1181
00:11:41,540 --> 00:11:46,540
invisible. It even tells us that you can do this while in the middle of a drawing because

1182
00:11:47,660 --> 00:11:50,840
hiding the turtle will speed up the drawing observably.

1183
00:11:51,320 --> 00:11:56,320
So let's go ahead and hide our turtle as well as moving the pen up.

1184
00:11:58,570 --> 00:12:01,390
And let's re-visualize this.

1185
00:12:03,400 --> 00:12:07,570
And you can see our dots being drawn without our turtle

1186
00:12:07,930 --> 00:12:12,930
and we end up with a beautiful Hirst painting that we've created completely

1187
00:12:13,930 --> 00:12:15,220
from scratch. Well,

1188
00:12:15,250 --> 00:12:18,310
maybe with a little bit of help from Damien Hirst's color palette.

1189
00:12:19,060 --> 00:12:23,920
So I hope you enjoyed this project. And I look forward to seeing you tomorrow.


