1
00:00:00,570 --> 00:00:04,950
Hey, welcome back. It's Day 9 of 100 Days of Code.

2
00:00:05,700 --> 00:00:09,690
And today we're going to be learning more about Python dictionaries

3
00:00:09,780 --> 00:00:12,900
and nesting. And by the end of today,

4
00:00:13,140 --> 00:00:16,290
you will have built a silent auction program.

5
00:00:17,130 --> 00:00:20,460
We all know that there are auctions where everybody bids and you can see

6
00:00:20,460 --> 00:00:24,380
everybody else's bid and the auctioneer gets you to bid higher and higher

7
00:00:24,380 --> 00:00:27,770
values. Now there's also a type of auction called

8
00:00:27,800 --> 00:00:32,800
a silent auction where everybody bids silently and no one knows the other

9
00:00:32,990 --> 00:00:37,990
person's bids until at the very end of the auction where the highest bid is

10
00:00:38,510 --> 00:00:40,970
revealed. That's what we're going to be building.

11
00:00:41,420 --> 00:00:43,610
And if you wanna check out the final program,

12
00:00:43,640 --> 00:00:46,880
then you can go to blind-auction-completed

13
00:00:47,180 --> 00:00:48,830
.appbrewery.repl.run.

14
00:00:49,250 --> 00:00:53,480
And here you'll not only see this amazing gavel built out of ASCII,

15
00:00:53,810 --> 00:00:57,380
but also the secret auction program. So here's how it works:

16
00:00:57,740 --> 00:01:01,940
let's say that I'm going to be the first person logging onto the program.

17
00:01:02,300 --> 00:01:05,360
I'm going to give my name and my bid. Let's say

18
00:01:05,360 --> 00:01:08,840
I'm going to bid a $53 for this item.

19
00:01:09,440 --> 00:01:12,350
And once I'm done with my bid, it asked me whether

20
00:01:12,350 --> 00:01:13,790
if there are any other bidders.

21
00:01:13,880 --> 00:01:18,880
So if I type a yes then the screen clears and I can handover the laptop to

22
00:01:20,060 --> 00:01:24,770
the next person who's going to make their bid. So let's say there's James

23
00:01:24,770 --> 00:01:28,280
who's going to bid, um, even less than I did.

24
00:01:28,940 --> 00:01:33,940
And then he's gonna make way for the final bidder who is going to bid $121.

25
00:01:35,840 --> 00:01:39,920
So now at this stage, if everybody is done, then we type no,

26
00:01:40,550 --> 00:01:45,550
and it's going to now tally up all the bids and figure out who bid the highest

27
00:01:45,980 --> 00:01:49,340
and give us a winner, printing out 'The winner is Jenny

28
00:01:49,340 --> 00:01:54,020
with a bid of $121.' There's a number of places that you could use this

29
00:01:54,290 --> 00:01:58,160
if you are auctioning some piece of art or if you're trying to outbid your

30
00:01:58,160 --> 00:02:01,370
brothers and sisters on who gets to go on the trampoline,

31
00:02:01,880 --> 00:02:05,060
or if you're trying to start an auction with your friends or coworkers.

32
00:02:05,660 --> 00:02:10,039
The silent auction has many, many uses. All right, in today's lessons,

33
00:02:10,039 --> 00:02:14,540
we're going to be focusing mostly on the Python dictionary. But in addition,

34
00:02:14,540 --> 00:02:19,370
we're also going to look at how we can nest say lists inside lists or

35
00:02:19,370 --> 00:02:23,720
dictionaries inside dictionaries and also mixing lists and dictionaries as well.

36
00:02:24,440 --> 00:02:25,273
Once you're ready,

37
00:02:25,280 --> 00:02:28,400
head over to the next lesson and let's get started with the day.

1
00:00:00,700 --> 00:00:01,020
All right.

2
00:00:01,020 --> 00:00:06,020
So the first thing I want to talk about is dictionaries in Python. Now,

3
00:00:06,300 --> 00:00:11,300
dictionaries in Python work kind of similarly to dictionaries in real life,

4
00:00:11,520 --> 00:00:15,350
right? So if you were to look up a word in the dictionary

5
00:00:15,380 --> 00:00:20,380
say the word code, then you might find the definition as something along the

6
00:00:20,690 --> 00:00:25,690
lines of program instructions for the computer. And dictionaries are really

7
00:00:25,940 --> 00:00:30,940
useful because they allow us to group together and tag related pieces of

8
00:00:31,280 --> 00:00:32,113
information.

9
00:00:32,780 --> 00:00:37,040
The way I like to think about dictionaries is in the form of a table.

10
00:00:37,610 --> 00:00:40,700
Every dictionary has two parts to it.

11
00:00:41,210 --> 00:00:43,430
On the left hand side is the key,

12
00:00:44,120 --> 00:00:47,090
and that is the equivalent of the word in the dictionary,

13
00:00:47,840 --> 00:00:52,840
and then it's also got an associated value. That would be the equivalent

14
00:00:53,120 --> 00:00:55,100
of the actual definition of the word.

15
00:00:55,970 --> 00:01:00,970
Now let's say that we took this variation simple table of definitions of

16
00:01:01,250 --> 00:01:03,380
programming words that we've come across so far

17
00:01:03,920 --> 00:01:06,620
and we go ahead and we try to convert it right into a dictionary,

18
00:01:06,920 --> 00:01:08,960
how would we do that? Let me firstly

19
00:01:08,960 --> 00:01:12,710
drop the last two rows and let's just start with the first one.

20
00:01:13,280 --> 00:01:18,280
The first thing we want to do is we want them to create a dictionary. And to do

21
00:01:19,310 --> 00:01:22,010
that in Python, this is what the syntax looks like.

22
00:01:22,520 --> 00:01:26,210
We have a set of curly braces and everything that's inside

23
00:01:26,210 --> 00:01:29,240
the curly brace is the content of our dictionary.

24
00:01:29,870 --> 00:01:34,870
The key goes first followed by a colon and then followed by the value. In our

25
00:01:36,920 --> 00:01:41,000
table we've got this word bug, which is the first key,

26
00:01:41,390 --> 00:01:46,100
so we can replace that over here in our dictionary. And the value that's 

27
00:01:46,130 --> 00:01:49,550
associated with this key is the definition for a bug.

28
00:01:49,550 --> 00:01:53,480
So an error in a program that prevents the program from running as expected,

29
00:01:53,990 --> 00:01:58,460
that becomes the value and can be replaced here after the colon.

30
00:01:58,970 --> 00:02:03,140
So now, we've created an actual dictionary using Python code.

31
00:02:04,040 --> 00:02:08,090
What if you wanted to have more than one entry in your dictionary? Well,

32
00:02:08,090 --> 00:02:12,410
you would separate each of the key value pairs using a comma,

33
00:02:12,980 --> 00:02:17,980
and then you can continue adding key and value pairs until you get to the end of

34
00:02:19,280 --> 00:02:21,830
your dictionary. All right,

35
00:02:21,830 --> 00:02:24,380
let's take a look at dictionaries in action.

36
00:02:24,890 --> 00:02:29,890
If you head over to the day nine start code file and go ahead and fork your own

37
00:02:30,710 --> 00:02:35,150
copy to work alongside me, then you can see that in here

38
00:02:35,180 --> 00:02:39,320
I've already added the dictionary that we were defining earlier on,

39
00:02:39,740 --> 00:02:44,270
and I've stored it inside of a variable called programming dictionary. Now,

40
00:02:44,300 --> 00:02:47,060
currently I've only got two entries in this dictionary,

41
00:02:47,510 --> 00:02:51,830
the definition for a bug and the definition for function. Now,

42
00:02:51,830 --> 00:02:55,730
the first thing I want to highlight is when you create a dictionary that has

43
00:02:55,730 --> 00:02:58,610
more than one element such as in this case,

44
00:02:59,110 --> 00:03:03,310
then you want to take care to format it properly so that it's more easily

45
00:03:03,310 --> 00:03:04,143
readable.

46
00:03:04,510 --> 00:03:09,250
So what you'll see Python programmers do by convention is they will start off

47
00:03:09,280 --> 00:03:12,010
the dictionary with the open curly brace at the top

48
00:03:12,580 --> 00:03:17,580
and then every subsequent entry is indented by one indent.

49
00:03:18,550 --> 00:03:22,270
And then at the very end of that entry, there's a comma

50
00:03:22,660 --> 00:03:27,250
and then we hit enter so that the next item goes onto the next line

51
00:03:27,700 --> 00:03:28,960
and finally,

52
00:03:28,990 --> 00:03:33,990
the last curly brace should go at the very beginning in line with the start of

53
00:03:34,720 --> 00:03:35,553
the dictionary.

54
00:03:36,280 --> 00:03:41,020
And another thing that's quite nice to do is to cap off all entries in your

55
00:03:41,020 --> 00:03:43,570
dictionary or list with a comma.

56
00:03:44,080 --> 00:03:47,500
This means that if you needed to add more items into the dictionary

57
00:03:47,770 --> 00:03:51,610
you can simply just hit enter and continue typing the next thing.

58
00:03:52,210 --> 00:03:54,160
And if we wanted to add another entry,

59
00:03:54,160 --> 00:03:59,160
it's a simple as adding in the key, a colon and then the value and to cap it

60
00:04:00,340 --> 00:04:02,530
off again with a comma.

61
00:04:03,250 --> 00:04:08,250
So now our dictionary represents exactly the same data as we saw in our table

62
00:04:09,760 --> 00:04:14,760
over here with a bunch of key value pairs and a total of three entries.

63
00:04:16,570 --> 00:04:16,839
Now,

64
00:04:16,839 --> 00:04:21,839
the next thing I want to do is what if I wanted to retrieve an item from the

65
00:04:21,970 --> 00:04:25,150
dictionary, because we know that if we had a list

66
00:04:25,210 --> 00:04:28,330
what we would do is we would use a set of square brackets

67
00:04:28,660 --> 00:04:32,260
and then we would give the index of the item that we wanted.

68
00:04:32,620 --> 00:04:37,620
So the item at index zero or one or two and so on and so forth. Now for

69
00:04:38,290 --> 00:04:41,590
dictionaries, it's kind of similar in terms of syntax

70
00:04:41,890 --> 00:04:46,890
but the only difference is that dictionaries have elements which are identified

71
00:04:47,230 --> 00:04:51,700
by their key. If we wanted this piece of information, for example,

72
00:04:52,030 --> 00:04:57,030
then all we have to do is tap into the dictionary and then add a set of square

73
00:04:57,700 --> 00:05:02,410
brackets and inside the square brackets, we're going to provide the key.

74
00:05:02,890 --> 00:05:07,390
So here the key is a string and it's the string bug.

75
00:05:07,840 --> 00:05:09,910
So let's go ahead and put bug in here.

76
00:05:10,960 --> 00:05:14,440
And now if I go ahead and print this,

77
00:05:14,500 --> 00:05:17,500
then you can see that it is going to give me the value,

78
00:05:17,530 --> 00:05:21,160
which is 'An error in a program that prevents the program from running as

79
00:05:21,160 --> 00:05:24,190
expected.' Now it's really,

80
00:05:24,190 --> 00:05:29,190
really important that you make sure that when you're fetching something out of a

81
00:05:29,470 --> 00:05:33,820
dictionary by it's key that you actually spell the key correctly.

82
00:05:34,570 --> 00:05:35,260
A really

83
00:05:35,260 --> 00:05:39,340
really common error is when you're trying to retrieve something out of a

84
00:05:39,340 --> 00:05:43,480
dictionary and you've just made a very simple typo. So instead of 'u'

85
00:05:43,480 --> 00:05:45,760
I'm typing 'o' here and you'll see

86
00:05:45,760 --> 00:05:50,760
we get an error. And the error tells us that it's a key error referring to this

87
00:05:51,400 --> 00:05:56,400
particular key and it highlights this line 7 where we're trying to retrieve

88
00:05:56,620 --> 00:05:59,210
something out of this dictionary by this key.

89
00:05:59,660 --> 00:06:03,680
Basically it's telling you that this key doesn't actually exist and it can't be

90
00:06:03,680 --> 00:06:08,030
found. So it doesn't know what it is that you want. Remember how

91
00:06:08,030 --> 00:06:13,030
when we had lists and when we try to retrieve something that was not inside the

92
00:06:13,490 --> 00:06:17,870
list. So for example, this particular list at index 4

93
00:06:17,870 --> 00:06:21,560
doesn't actually exist because this is zero one, two, three,

94
00:06:21,980 --> 00:06:25,310
and four is actually not a piece of data inside of this list.

95
00:06:25,910 --> 00:06:30,590
Similarly with dictionaries, if we try to put in a key that doesn't exist,

96
00:06:30,650 --> 00:06:32,420
then we get this key error.

97
00:06:33,740 --> 00:06:38,740
Now another common pitfall that students fall down into is they don't actually

98
00:06:40,370 --> 00:06:43,880
use the correct data type. So for example,

99
00:06:44,030 --> 00:06:49,030
if we defined this dictionary without putting a string around each of these

100
00:06:51,110 --> 00:06:55,640
keys, then it's going to error out and it won't even let us run.

101
00:06:55,760 --> 00:06:59,540
It's going to tell us undefined named bug because it thinks that this is a

102
00:06:59,540 --> 00:07:01,460
variable that you've declared somewhere,

103
00:07:01,640 --> 00:07:06,440
but it's not. In fact, what you wanted are these strings for keys.

104
00:07:06,680 --> 00:07:09,650
And so when you have a key that is a string,

105
00:07:10,040 --> 00:07:12,620
when you're trying to retrieve the data from that key,

106
00:07:12,650 --> 00:07:17,650
you also have to make sure that you provide the key in its actual data type.

107
00:07:18,250 --> 00:07:22,390
So for example, if this was just a number, say one, two, three,

108
00:07:22,780 --> 00:07:26,320
then, of course, all you have to write in here is just one, two, three,

109
00:07:26,830 --> 00:07:30,760
and it would know that this piece of data is what you wanted.

110
00:07:32,530 --> 00:07:37,180
So that's how you retrieve items from a dictionary by adding a square bracket

111
00:07:37,240 --> 00:07:39,340
and then giving it the key.

112
00:07:39,940 --> 00:07:44,290
And it will look for the key inside the dictionary and give you back the

113
00:07:44,290 --> 00:07:46,060
value. Now,

114
00:07:46,060 --> 00:07:50,260
what if you wanted to add a piece of data such as that loop that we had earlier

115
00:07:50,260 --> 00:07:53,110
on, but you want to do it programmatically.

116
00:07:53,260 --> 00:07:55,300
So instead of doing it

117
00:07:55,300 --> 00:07:58,510
when you were defining the dictionary at the beginning,

118
00:07:58,690 --> 00:08:02,860
what if at some later stage in your program you needed to add a new entry?

119
00:08:03,580 --> 00:08:06,070
Well, to do this, it's also really simple.

120
00:08:06,670 --> 00:08:09,880
All you have to do is to tap into the dictionary,

121
00:08:10,060 --> 00:08:14,380
which is called programming dictionary in our case and again,

122
00:08:14,410 --> 00:08:17,110
using square brackets, we define the key.

123
00:08:17,710 --> 00:08:20,500
The key I'm going to add is our loop.

124
00:08:21,070 --> 00:08:25,180
And then after a equal sign, I get to assign the value.

125
00:08:26,020 --> 00:08:29,680
So in my case, the value is going to be the definition for a loop.

126
00:08:30,370 --> 00:08:35,370
And now when this line of code is executed and we go ahead and just print the

127
00:08:37,570 --> 00:08:40,179
programming dictionary after this has happened,

128
00:08:40,539 --> 00:08:43,900
then we'll see that it's actually different from what we had before.

129
00:08:44,110 --> 00:08:49,110
So let's hit run and you can see that previously we had a programming dictionary

130
00:08:49,120 --> 00:08:51,580
that had only two items, bug and function.

131
00:08:52,090 --> 00:08:56,910
And after this line 10, where we print our programming dictionary again,

132
00:08:57,240 --> 00:09:00,540
you can see it's now got three items, bug, function, and loop.

133
00:09:01,740 --> 00:09:04,380
Now very often when you're writing code,

134
00:09:04,500 --> 00:09:09,500
it can be really helpful to start out with a empty dictionary. Just as you saw

135
00:09:09,720 --> 00:09:10,290
previously,

136
00:09:10,290 --> 00:09:15,000
you create an empty list by simply having a set of square brackets with nothing

137
00:09:15,000 --> 00:09:15,833
inside.

138
00:09:16,020 --> 00:09:21,020
You can also create an empty dictionary by simply creating a set of curly braces

139
00:09:22,950 --> 00:09:25,950
with nothing inside. And then at a later stage,

140
00:09:25,980 --> 00:09:30,630
you can add to your dictionary by using this method that you saw here.

141
00:09:32,010 --> 00:09:33,150
Now, on the other hand,

142
00:09:33,180 --> 00:09:37,710
you might actually want to wipe an entire dictionary. Here,

143
00:09:37,740 --> 00:09:42,300
I'm creating a new empty dictionary by creating this pair of curly braces with

144
00:09:42,300 --> 00:09:43,230
nothing inside.

145
00:09:43,800 --> 00:09:48,800
But I can also wipe an existing dictionary by simply doing the same thing.

146
00:09:49,530 --> 00:09:53,940
We know that this dictionary, programming_dictionary, has three items in it.

147
00:09:54,360 --> 00:09:55,980
But on line 17,

148
00:09:56,010 --> 00:09:59,490
I'm going to say programming dictionary equals empty dictionary.

149
00:10:00,030 --> 00:10:03,270
And now if I move this print statement down here,

150
00:10:03,660 --> 00:10:06,120
then you can see that when it prints out,

151
00:10:06,330 --> 00:10:08,610
it's actually going to be completely empty.

152
00:10:10,200 --> 00:10:15,030
That can be really useful if you wanted to clear out a user's progress

153
00:10:15,300 --> 00:10:18,150
or for example, if a game restarts,

154
00:10:18,210 --> 00:10:21,990
then all the scores and stats will probably have to be wiped empty.

155
00:10:22,230 --> 00:10:24,090
So this is one way that you could do that.

156
00:10:25,020 --> 00:10:29,100
Now this method of tapping into a dictionary,

157
00:10:29,730 --> 00:10:33,660
using the key to fetch the relevant item from it

158
00:10:34,260 --> 00:10:37,920
and then doing something with it goes beyond just adding.

159
00:10:38,370 --> 00:10:42,330
You can also use this to edit an item in a dictionary.

160
00:10:44,280 --> 00:10:47,880
For example, let me go ahead and comment out these two lines of code

161
00:10:48,180 --> 00:10:53,180
so we don't wipe our programming dictionary and instead I'm going to tap into

162
00:10:53,730 --> 00:10:58,730
the programming dictionary and I'm going to fetch the item that has a key of bug

163
00:11:00,090 --> 00:11:02,430
and I'm going to redefine its value.

164
00:11:02,640 --> 00:11:06,690
So currently it should be an error in a program that prevents the program from

165
00:11:06,690 --> 00:11:08,280
running as expected.

166
00:11:08,820 --> 00:11:12,810
And I can prove that if I just wrap this around a print statement.

167
00:11:14,580 --> 00:11:18,450
If instead I wanted this to be a different value,

168
00:11:18,540 --> 00:11:23,010
then I can simply use the same syntax as I did for adding new items

169
00:11:23,340 --> 00:11:24,360
but in this case

170
00:11:24,420 --> 00:11:28,440
I'm actually editing this entry because it's going to look through the

171
00:11:28,440 --> 00:11:29,273
dictionary,

172
00:11:29,370 --> 00:11:34,370
find a value with this key and then assign it to whatever I put on the right

173
00:11:34,500 --> 00:11:37,500
hand side of the equal sign. Now, on the other hand,

174
00:11:37,500 --> 00:11:39,540
if it finds nothing with that key,

175
00:11:39,870 --> 00:11:43,200
then it's going to create a new entry with the value again

176
00:11:43,230 --> 00:11:44,970
on the right hand side of the equal sign.

177
00:11:45,900 --> 00:11:50,250
Now let's say that a bug is instead 'A moth in your computer.'

178
00:11:51,930 --> 00:11:56,890
Now, if I go and print my programming dictionary once more,

179
00:11:57,160 --> 00:12:02,160
then you can see that the definition for our bug has now just been changed.

180
00:12:04,150 --> 00:12:07,540
The final thing with regards to dictionaries that I think is really,

181
00:12:07,540 --> 00:12:12,540
really useful is how you loop through a dictionary. And using your knowledge from

182
00:12:14,350 --> 00:12:18,520
lists you might think that to loop through a dictionary, you would,

183
00:12:18,670 --> 00:12:22,840
let's say we are using a for loop. And we say for, um,

184
00:12:22,900 --> 00:12:25,840
thing in programming dictionary,

185
00:12:26,290 --> 00:12:30,130
let's go ahead and print this thing each time.

186
00:12:30,790 --> 00:12:34,270
Here's a good moment to play computer and think,

187
00:12:34,300 --> 00:12:36,640
what do you expect to be printed?

188
00:12:36,820 --> 00:12:38,950
So let's comment out all of the other print statements

189
00:12:38,950 --> 00:12:42,880
so we don't get confused. And when I click run,

190
00:12:43,480 --> 00:12:45,190
what do you think will be printed?

191
00:12:47,730 --> 00:12:47,880
Right?

192
00:12:47,880 --> 00:12:50,400
All right. Is that what you expected? Because it certainly

193
00:12:50,400 --> 00:12:53,130
wasn't what I expected when I first learned Python.

194
00:12:53,700 --> 00:12:58,680
I thought it would give me each of the items in the dictionary with this key and

195
00:12:58,680 --> 00:12:59,513
its value.

196
00:12:59,940 --> 00:13:04,350
But instead this code actually just gives you the keys.

197
00:13:05,700 --> 00:13:10,380
Now, of course, once you do have access to the key, instead of thing,

198
00:13:10,560 --> 00:13:13,770
I should actually really say for key in programming_dictionary.

199
00:13:14,310 --> 00:13:18,570
If I wanted to print the key, then of course I could just write print key.

200
00:13:18,960 --> 00:13:20,940
But if I wanted to get hold of the value,

201
00:13:21,120 --> 00:13:24,720
I could equally just as easily tap into my dictionary,

202
00:13:24,960 --> 00:13:28,230
use the square brackets and pass in that key.

203
00:13:28,740 --> 00:13:32,520
So now when I hit run, you can see it's giving me first

204
00:13:32,550 --> 00:13:35,520
the key from this line and then secondly

205
00:13:35,640 --> 00:13:38,040
the value based on this line.

206
00:13:38,670 --> 00:13:42,840
I'm using that retrieval code in order to get the value.

207
00:13:44,130 --> 00:13:44,550
Of course,

208
00:13:44,550 --> 00:13:49,050
remember that you can get access to all the code that I'm writing here by

209
00:13:49,050 --> 00:13:51,270
looking at the end code of the day

210
00:13:51,480 --> 00:13:53,910
that you'll find on the course resources list.

211
00:13:54,240 --> 00:13:58,380
And if you want to, have a quick review of everything that we've gone through so

212
00:13:58,380 --> 00:13:59,190
far,

213
00:13:59,190 --> 00:14:04,190
because a lot of this knowledge is going to be tested in the next lesson where

214
00:14:04,230 --> 00:14:08,820
we do a coding exercise that will really solidify everything you've learned in

215
00:14:08,820 --> 00:14:13,410
this lesson so far. So for all of that, and more, I'll see on the next lesson.

1
00:00:00,210 --> 00:00:03,900
All right. So hopefully everything we've learned in the last lesson made sense,

2
00:00:04,230 --> 00:00:08,670
and you're ready to put your knowledge to the test by completing the first

3
00:00:08,670 --> 00:00:09,750
coding challenge today.

4
00:00:10,410 --> 00:00:13,410
And what you're going to be building is a grading program.

5
00:00:13,650 --> 00:00:17,610
So if you take a look at the day 9.1 grading program

6
00:00:17,970 --> 00:00:21,270
Repl.it coding exercise, you'll see that to begin,

7
00:00:21,330 --> 00:00:26,330
I've already created a dictionary with a bunch of student names and their test

8
00:00:26,970 --> 00:00:28,740
scores. Now,

9
00:00:28,770 --> 00:00:32,430
without changing any of the code above here or below here,

10
00:00:32,850 --> 00:00:37,850
I want you to write a program that will be able to convert these scores into a

11
00:00:38,550 --> 00:00:43,170
grade. So the grading criteria is over here in the instructions.

12
00:00:43,590 --> 00:00:46,590
So if the student's scores above 91,

13
00:00:46,980 --> 00:00:51,750
then they'll get the grade outstanding. If they score above 81,

14
00:00:51,750 --> 00:00:54,510
they get exceeds expectations and then acceptable.

15
00:00:54,840 --> 00:00:58,980
And then finally everybody's scoring 70 or a lower gets the fail grade.

16
00:00:59,790 --> 00:01:00,623
Essentially,

17
00:01:00,720 --> 00:01:04,800
what you're going to be doing is creating an empty dictionary from scratch

18
00:01:05,099 --> 00:01:06,960
which is going to be called student_grades.

19
00:01:07,440 --> 00:01:12,440
And you're going to write some code so that each of the students are represented

20
00:01:12,870 --> 00:01:14,490
inside this new dictionary.

21
00:01:14,970 --> 00:01:19,260
And instead of having scores as the value's in that dictionary,

22
00:01:19,530 --> 00:01:23,940
you are going to have the grades that correspond to the scores that they got.

23
00:01:24,540 --> 00:01:28,320
Have a read through the instructions and the hints if you need some help,

24
00:01:28,710 --> 00:01:32,460
but once you're ready, go ahead and pause the video and give this a go.

25
00:01:32,660 --> 00:01:37,660
[inaudible]

26
00:01:39,050 --> 00:01:42,440
All right. So to begin, let's first tackle this to-do 1.

27
00:01:42,950 --> 00:01:47,300
Let's create a new empty dictionary called student_grades.

28
00:01:48,560 --> 00:01:53,240
And the student_grades has to be spelled exactly the same as you see here,

29
00:01:53,510 --> 00:01:55,970
because otherwise this print statement will not work.

30
00:01:56,570 --> 00:01:58,730
The student_grades is gonna be an empty dictionary,

31
00:01:58,760 --> 00:02:01,610
which if you remember from the last lesson, we said

32
00:02:01,640 --> 00:02:05,480
it looks like this with two curly braces and nothing inside.

33
00:02:06,230 --> 00:02:08,780
Now let's move on to todo number 2.

34
00:02:09,020 --> 00:02:14,020
So we're going to write some code below so that we actually add the grades to

35
00:02:14,570 --> 00:02:16,850
this student grades dictionary.

36
00:02:17,330 --> 00:02:21,710
And we of course can get those grades by looking at each of the student's

37
00:02:21,740 --> 00:02:25,460
scores. How can we do this? Well,

38
00:02:25,460 --> 00:02:30,050
we're probably going to need a for loop because there's lots of items in this

39
00:02:30,050 --> 00:02:34,730
dictionary. Let's go ahead and loop through this student_scores dictionary,

40
00:02:35,270 --> 00:02:39,500
and I'm going to call each of the items the student,

41
00:02:39,740 --> 00:02:44,740
because remember when we have a for loop looping through a dictionary like we

42
00:02:45,320 --> 00:02:46,250
are doing here,

43
00:02:46,910 --> 00:02:51,860
each of the items that gets picked out is actually the key rather than the whole

44
00:02:51,860 --> 00:02:55,340
item. So again, we talked about this in the last lesson,

45
00:02:55,850 --> 00:03:00,670
but hopefully, this should really make it clear. But even if you didn't know,

46
00:03:00,910 --> 00:03:03,670
you could always of course just print it, right?

47
00:03:03,760 --> 00:03:07,090
So if we go ahead and use the for loop and print it,

48
00:03:07,090 --> 00:03:12,090
you can see we get all of the keys from this dictionary when we're looping

49
00:03:13,780 --> 00:03:17,080
through it. So for each of the students,

50
00:03:17,110 --> 00:03:19,210
we want to get hold of their score.

51
00:03:19,630 --> 00:03:23,200
We can calculate the score by getting hold of the value

52
00:03:23,440 --> 00:03:27,460
using this key from this dictionary. And to do that,

53
00:03:27,640 --> 00:03:30,520
if you remember, is tapping in to the dictionary,

54
00:03:31,000 --> 00:03:35,320
adding a set of square brackets and then giving it the key. So in this case,

55
00:03:35,320 --> 00:03:40,210
it's going to be each of the student names. And once we've got a hold of the

56
00:03:40,210 --> 00:03:43,570
score, well then we can use our if statement to check well

57
00:03:43,840 --> 00:03:46,480
if the score is greater than 90,

58
00:03:47,170 --> 00:03:48,940
so anything above 90,

59
00:03:49,270 --> 00:03:53,020
then that means they're going to end up with outstanding.

60
00:03:53,530 --> 00:03:58,530
Now, this is the part where we add a new entry to this student_grades dictionary.

61
00:03:59,230 --> 00:04:04,000
So let's tap into the dictionary, use a set of square brackets again

62
00:04:04,060 --> 00:04:06,640
to give it a key. And the key,

63
00:04:06,640 --> 00:04:10,360
of course, should still be the student name which comes from here,

64
00:04:10,900 --> 00:04:12,850
which is going to be the same as this.

65
00:04:13,360 --> 00:04:17,769
Then we can add a equal sign and followed by the value

66
00:04:18,220 --> 00:04:20,380
which is going to be outstanding.

67
00:04:21,670 --> 00:04:25,780
So now we can repeat this process for the rest of these grades.

68
00:04:26,130 --> 00:04:26,963
Yeah.

69
00:04:29,130 --> 00:04:34,020
Everybody who scored above 80 but not above 90, so remember that this

70
00:04:34,020 --> 00:04:38,640
if statement once triggered, will skip all of the rest of the elif statements.

71
00:04:41,700 --> 00:04:46,290
And then if they scored above 70, they would get acceptable. And finally,

72
00:04:46,290 --> 00:04:49,740
for everybody else, which means they scored lower than 70,

73
00:04:50,100 --> 00:04:52,710
then they're going to end up with a fail grade.

74
00:04:53,700 --> 00:04:58,590
Now it's really important that if you want the test to pass that each of these

75
00:04:58,590 --> 00:05:02,430
strings has to match what you see over here exactly.

76
00:05:03,120 --> 00:05:07,320
Now that we've done all of this hard work, manipulating our dictionary,

77
00:05:07,710 --> 00:05:12,210
it's time to actually go ahead and run our code and see what we get.

78
00:05:12,840 --> 00:05:15,060
So now our code has converted

79
00:05:15,090 --> 00:05:18,300
each of these scores to the corresponding grade.

80
00:05:18,750 --> 00:05:23,750
Harry gets exceeds expectations because his score is between 81 and 90, Ron gets

81
00:05:25,320 --> 00:05:29,340
acceptable because it's between 70 and 80, and so on and so forth.

82
00:05:30,300 --> 00:05:31,770
Now, did you manage to get it right,

83
00:05:32,220 --> 00:05:35,700
or did you have any problems working with dictionaries? Now,

84
00:05:35,760 --> 00:05:37,290
if you go beyond this lesson

85
00:05:37,320 --> 00:05:41,400
I'm going to assume that you are comfortable with editing dictionaries,

86
00:05:41,430 --> 00:05:43,500
adding to it, creating new ones.

87
00:05:43,980 --> 00:05:47,880
So if you are not yet fully there, then I recommend just going back to the last

88
00:05:47,880 --> 00:05:49,890
lesson, just reviewing it once more.

89
00:05:50,910 --> 00:05:53,280
Once you've done that, head over to the next lesson

90
00:05:53,490 --> 00:05:58,230
and we're going to talk more about nesting in dictionaries and lists. For all of that

91
00:05:58,470 --> 00:05:59,820
and more, I'll see you there.

1
00:00:00,420 --> 00:00:03,270
Now that we've seen lists as well as dictionaries

2
00:00:03,630 --> 00:00:08,630
I want to talk about a concept that you often see in both of these collection

3
00:00:09,300 --> 00:00:12,660
types and that's something called nesting. Now,

4
00:00:12,690 --> 00:00:15,930
if we imagine a list or a dictionary

5
00:00:15,960 --> 00:00:20,430
being something like a folder where lots of things can be stored inside it,

6
00:00:20,850 --> 00:00:25,850
then nesting lists and dictionaries is just a matter of putting one inside the

7
00:00:26,040 --> 00:00:28,200
other. For example,

8
00:00:28,380 --> 00:00:31,320
here;s a dictionary that is very simple,

9
00:00:31,320 --> 00:00:33,480
it's only got one key-value pair.

10
00:00:34,170 --> 00:00:39,170
Now we know that we can add multiple key-value pairs into the same dictionary by

11
00:00:40,110 --> 00:00:45,030
just adding a bunch of commas to separate them. Now, what if

12
00:00:45,180 --> 00:00:50,100
instead of having a simple value like a string or a number,

13
00:00:50,790 --> 00:00:54,270
I could also put a list as a value as well.

14
00:00:55,200 --> 00:00:56,033
Similarly,

15
00:00:56,040 --> 00:01:01,040
I could also use a dictionary as a value. In this case

16
00:01:01,170 --> 00:01:05,910
we've got a list as the value for key, this first one,

17
00:01:06,390 --> 00:01:11,390
and we've got a dictionary as the value for key2. Notice how this is a list and

18
00:01:13,410 --> 00:01:17,550
a dictionary nested inside another dictionary.

19
00:01:18,030 --> 00:01:20,490
The structure gets a little bit more complex,

20
00:01:21,090 --> 00:01:26,070
but it gives us more flexibility when we're trying to store more complex pieces

21
00:01:26,070 --> 00:01:29,580
of data. Coming back to our code,

22
00:01:30,000 --> 00:01:34,050
let's go ahead and create some sample dictionaries to see what this actually

23
00:01:34,050 --> 00:01:36,600
looks like in real life. For example,

24
00:01:36,600 --> 00:01:41,600
this could be a dictionary that contains the country as the key and the city,

25
00:01:43,350 --> 00:01:47,370
that is the capital, as the value. So for France,

26
00:01:47,400 --> 00:01:49,980
that's Paris, for Germany that's Berlin.

27
00:01:50,340 --> 00:01:54,360
This is a very simple dictionary that you've seen already. Now,

28
00:01:54,360 --> 00:01:59,360
if I wanted to nest a list in a dictionary,

29
00:02:00,180 --> 00:02:04,650
then I would be able to represent even more complex data. For example,

30
00:02:04,650 --> 00:02:09,650
if I had a travel log where I was going to collect a dictionary of all the

31
00:02:11,220 --> 00:02:15,990
cities I had been for each of the countries I've traveled to. So for example,

32
00:02:16,560 --> 00:02:21,560
if I had traveled to France and I wanted to say that I've been to multiple

33
00:02:21,600 --> 00:02:24,570
cities, I can't simply just say Paris,

34
00:02:24,630 --> 00:02:29,630
and then Lille, Dijon, that doesn't really work because each key can only have one

35
00:02:33,090 --> 00:02:37,530
value. The only way that we can make these three pieces of data

36
00:02:37,560 --> 00:02:41,430
one value is by turning it into a list, like so.

37
00:02:42,120 --> 00:02:45,300
So now in our travel log dictionary

38
00:02:45,750 --> 00:02:47,850
as represented by the curly braces,

39
00:02:48,180 --> 00:02:53,180
we have one key value pair and it just so happens that

40
00:02:53,250 --> 00:02:55,920
the value in this case is a list.

41
00:02:56,850 --> 00:03:01,570
And of course you can go on and add as many entries as you would like,

42
00:03:01,930 --> 00:03:06,930
and still preserving this kind of structure of key being a string and the value

43
00:03:07,630 --> 00:03:10,180
being a list. Now,

44
00:03:10,210 --> 00:03:14,050
this idea of nesting isn't limited dictionaries by the way.

45
00:03:14,050 --> 00:03:17,260
You could also just nest a list in a list.

46
00:03:17,800 --> 00:03:20,200
So you could have a list which is A

47
00:03:20,260 --> 00:03:25,260
and then B, and then the third item just happens to be another list which has C and D.

48
00:03:26,140 --> 00:03:28,450
This is perfectly valid Python code

49
00:03:28,990 --> 00:03:33,990
but it's not quite as useful as nesting a list in a dictionary or a dictionary

50
00:03:34,420 --> 00:03:39,310
in a dictionary, because the way that data is structured. Now,

51
00:03:39,310 --> 00:03:43,420
what if you wanted to nest a dictionary in a dictionary?

52
00:03:44,570 --> 00:03:48,130
Let's say that we wanted to expand our travel log.

53
00:03:48,790 --> 00:03:53,790
And instead of just storing the cities that I visited in each country,

54
00:03:54,280 --> 00:03:59,280
what if I wanted to also keep track of how many visits I've made to that

55
00:03:59,920 --> 00:04:00,753
country?

56
00:04:00,880 --> 00:04:05,710
Or what if I wanted to actually label what this piece of data is?

57
00:04:05,800 --> 00:04:07,660
Because at the moment it's kind of like here's

58
00:04:07,660 --> 00:04:10,540
a bunch of cities that's associated with the country,

59
00:04:10,840 --> 00:04:13,150
but it doesn't really describe this list.

60
00:04:13,900 --> 00:04:16,450
And I'd like to give this to you as a challenge,

61
00:04:16,630 --> 00:04:20,800
have a go at changing the France entry so that it contains another dictionary.

62
00:04:21,310 --> 00:04:25,330
For the nested dictionary use the key cities_visited,

63
00:04:25,600 --> 00:04:29,320
and for the value you can keep the list of Paris, Lille and Dijon.

64
00:04:29,830 --> 00:04:32,110
Pause the video now and see if you can get that to work.

65
00:04:32,130 --> 00:04:32,963
Yeah.

66
00:04:36,150 --> 00:04:39,270
All right, so here's the solution. By nesting a dictionary

67
00:04:39,300 --> 00:04:43,860
we can label the Paris, Lille and Dijon lists as cities visited.

68
00:04:44,400 --> 00:04:46,860
All I need to do is create the string,

69
00:04:46,890 --> 00:04:51,180
"cities_visited" and add a colon after it. But there's one more step.

70
00:04:51,390 --> 00:04:55,950
We have to add a pair of curly braces so that France is associated with a single

71
00:04:55,950 --> 00:04:58,560
value, namely our nested dictionary.

72
00:04:59,430 --> 00:05:03,480
Now that we have a dictionary of the travel log,

73
00:05:03,510 --> 00:05:08,510
all the countries I've been to, and each country has a value that is a dictionary

74
00:05:09,870 --> 00:05:14,100
in itself and it can store multiple pieces of data

75
00:05:14,400 --> 00:05:17,220
including the cities I've visited in that country

76
00:05:17,550 --> 00:05:21,060
as well as things such as the total number of visits,

77
00:05:22,470 --> 00:05:27,470
which in this case would have a string as the key and a

78
00:05:27,570 --> 00:05:31,110
number of as the value. Now

79
00:05:31,110 --> 00:05:35,970
have a go at creating your own travel log or modifying the second part of the

80
00:05:35,970 --> 00:05:40,970
travel log so that you also have a dictionary nested in a dictionary and you're

81
00:05:41,730 --> 00:05:44,730
able to represent something like this,

82
00:05:44,730 --> 00:05:49,730
the number of cities you visited in a list and another additional piece of data,

83
00:05:49,950 --> 00:05:50,783
if you wanted to.

84
00:05:51,330 --> 00:05:52,163
Right,

85
00:05:56,100 --> 00:05:59,630
And hopefully would have done something similar to this.

86
00:06:00,380 --> 00:06:05,380
And so now our data structure is such that we've got a list nested inside a

87
00:06:07,280 --> 00:06:12,110
dictionary, which is in itself nested in another dictionary.

88
00:06:13,190 --> 00:06:16,850
Now that we've seen nesting lists inside dictionaries, dictionaries inside

89
00:06:16,850 --> 00:06:17,683
dictionaries,

90
00:06:17,690 --> 00:06:22,520
the last thing I want to show you is nesting a dictionary inside a list.

91
00:06:22,970 --> 00:06:27,740
So we could basically have multiple dictionaries inside a single list.

92
00:06:28,430 --> 00:06:33,430
So remember that lists are ordered and they're accessed by the positions inside the

93
00:06:33,440 --> 00:06:38,060
list. So this dictionary would be the item at index zero,

94
00:06:38,450 --> 00:06:41,240
this one at index one and so on and so forth.

95
00:06:42,110 --> 00:06:43,580
Whereas inside a dictionary,

96
00:06:43,610 --> 00:06:48,380
the items are accessed by their keys like this France or Germany.

97
00:06:49,280 --> 00:06:54,140
Now I want to do the last type which is nesting a dictionary

98
00:06:56,030 --> 00:06:57,080
in a list.

99
00:06:57,620 --> 00:07:02,030
And I'm going to be working with the same travel log that we had previously,

100
00:07:02,600 --> 00:07:07,160
but I want to change it so that instead of having this being one giant

101
00:07:07,160 --> 00:07:10,160
dictionary with key-value pairs,

102
00:07:10,490 --> 00:07:15,200
I want to change it so that each of these entries are a dictionary in itself.

103
00:07:15,650 --> 00:07:19,610
Instead of having France be the key of this dictionary here,

104
00:07:20,060 --> 00:07:25,060
I want the turn it into its own key-value pair. Going inside this dictionary,

105
00:07:25,340 --> 00:07:27,440
I'm going to create a new key

106
00:07:27,440 --> 00:07:32,440
which is called country and then put France as the value for that key.

107
00:07:34,250 --> 00:07:39,110
So now I have an entire dictionary that has three pieces of data.

108
00:07:39,380 --> 00:07:41,810
The country visited, the cities visited,

109
00:07:42,110 --> 00:07:46,190
and the total number of visits. Let's do the same for Germany as well.

110
00:07:48,140 --> 00:07:53,140
So now you can see we've got two dictionaries and instead of holding these two

111
00:07:53,810 --> 00:07:55,760
dictionaries inside a dictionary,

112
00:07:56,150 --> 00:08:01,130
I'm going to change it so that it's now a list. I'm going to turn these curly

113
00:08:01,130 --> 00:08:03,380
braces into square brackets

114
00:08:03,860 --> 00:08:08,860
and this way we can add as many of these dictionaries inside the list and

115
00:08:09,260 --> 00:08:10,970
iterate through them if we need to.

116
00:08:11,690 --> 00:08:15,710
When we've been creating dictionaries that only have one or two key-value pairs,

117
00:08:15,950 --> 00:08:18,380
we've kind of just kept it all on one line.

118
00:08:18,830 --> 00:08:22,190
But once you've got more and more key-value pairs in the dictionary,

119
00:08:22,580 --> 00:08:27,580
it's usually a good idea to go ahead and separate out each of the entries,

120
00:08:28,900 --> 00:08:29,733
Right?

121
00:08:32,200 --> 00:08:33,700
Like what I'm doing here.

122
00:08:34,809 --> 00:08:39,809
Now it's a little bit easier to see that we have a list which contains two

123
00:08:40,510 --> 00:08:44,440
items, and each item is a dictionary.

124
00:08:45,010 --> 00:08:50,010
Each dictionary has three key-value pairs and they all contain different types

125
00:08:50,590 --> 00:08:54,640
of data. The first one has a value which is a string,

126
00:08:55,020 --> 00:08:58,380
the second one holds a list and the third one holds a number.

127
00:08:58,910 --> 00:09:03,890
The data types inside a dictionary can be completely mixed up if you want it to.

128
00:09:04,280 --> 00:09:09,280
But what can't change is you still need a key and a value separated by a colon.

129
00:09:11,990 --> 00:09:15,920
Now the only downside to this is you want to make sure that you're actually

130
00:09:15,920 --> 00:09:19,520
aware that later on when you try to pull out the number of visits,

131
00:09:19,790 --> 00:09:24,020
it's actually a number that you're working with rather than a string or when

132
00:09:24,020 --> 00:09:26,060
you're trying to get hold of the cities visited

133
00:09:26,330 --> 00:09:29,600
it's a list rather than a dictionary, for example.

134
00:09:30,920 --> 00:09:34,610
So now that we've the various different types of nesting,

135
00:09:35,000 --> 00:09:38,720
it's time for you to actually really understand this and get to grips with this

136
00:09:38,720 --> 00:09:43,720
concept by completing a challenge yourself. In the next lesson,

137
00:09:43,790 --> 00:09:48,710
I've got a coding challenge for you based on this travel log and you'll need to

138
00:09:48,710 --> 00:09:51,760
use what you've learned so far to be able to complete it.

139
00:09:52,130 --> 00:09:55,130
So for all of that and more, I'll see you on the next lesson.

1
00:00:00,630 --> 00:00:00,870
Now,

2
00:00:00,870 --> 00:00:05,870
if you head over to Repl.it, click on day 9.2 dictionary in list,

3
00:00:06,600 --> 00:00:08,640
this coding exercise should appear.

4
00:00:09,360 --> 00:00:14,360
And you'll see that we actually have the same list that we created at the end of the

5
00:00:14,460 --> 00:00:15,293
last lesson.

6
00:00:15,990 --> 00:00:20,990
This is a list called travel_log and it logs the countries that we've been

7
00:00:21,570 --> 00:00:23,970
to, how many times we've visited it,

8
00:00:24,330 --> 00:00:27,210
and the cities that we visited while we were there.

9
00:00:28,110 --> 00:00:31,620
This is a list of dictionaries

10
00:00:31,950 --> 00:00:34,830
which contain a list of cities.

11
00:00:35,280 --> 00:00:37,320
There's some heavy nesting going on here.

12
00:00:38,610 --> 00:00:43,610
Now your job is to make sure that this line of code on line 20 and 21 actually

13
00:00:46,680 --> 00:00:51,060
work. In order to make it work, you are going to have to write a program.

14
00:00:51,390 --> 00:00:52,830
So it's going to be a function

15
00:00:52,830 --> 00:00:57,830
that's going to go somewhere in here. And you're going to get it to be able to add

16
00:00:58,380 --> 00:01:00,330
new countries, the name,

17
00:01:00,660 --> 00:01:05,190
the number of visits and the cities that you've been to so that it gets

18
00:01:05,190 --> 00:01:09,510
populated in the travel log. And when we print travel log at the end,

19
00:01:09,540 --> 00:01:12,630
it should show us all three of these entries.

20
00:01:14,100 --> 00:01:18,630
So remember, the goal is not to modify this directly. In fact,

21
00:01:18,630 --> 00:01:22,500
I don't want you to touch this part at all. Instead,

22
00:01:22,500 --> 00:01:23,940
it should be your function

23
00:01:24,150 --> 00:01:29,150
that's going to somehow go through this travel log and add these new pieces of

24
00:01:29,550 --> 00:01:30,383
data.

25
00:01:30,600 --> 00:01:33,840
Have a think about how are you going to achieve this and then pause the

26
00:01:33,840 --> 00:01:38,520
video and give it a go. All right.

27
00:01:38,520 --> 00:01:43,140
So, because we've already defined the name of the function here, in order for our

28
00:01:43,140 --> 00:01:46,170
code to actually work and for the tests to go through,

29
00:01:46,500 --> 00:01:51,060
we also have to create the function using exactly the same name.

30
00:01:51,090 --> 00:01:53,160
So it's called add_new_country.

31
00:01:53,880 --> 00:01:58,880
And then the inputs that it's going to take are the country_visited, the times_

32
00:02:01,380 --> 00:02:02,213
visited,

33
00:02:04,800 --> 00:02:07,140
and finally the cities_visited.

34
00:02:08,430 --> 00:02:11,430
So now that we've created our new function,

35
00:02:11,880 --> 00:02:14,220
the next job is to figure out, well,

36
00:02:14,220 --> 00:02:16,890
how do we add these pieces of data

37
00:02:17,160 --> 00:02:22,160
that's going to be passed in to these parameters and get that into this travel

38
00:02:22,920 --> 00:02:23,753
log?

39
00:02:24,060 --> 00:02:28,290
So the first thing you need to notice is each of the entries inside  the

40
00:02:28,290 --> 00:02:30,390
travel_log is a dictionary.

41
00:02:30,990 --> 00:02:34,380
In order to add to that list,

42
00:02:34,650 --> 00:02:39,650
we should probably start off by creating a new dictionary that has all of these

43
00:02:40,440 --> 00:02:43,170
pieces of data in it. For example,

44
00:02:43,170 --> 00:02:47,940
we could create a new dictionary called new_country, which is an empty dictionary.

45
00:02:48,630 --> 00:02:53,630
And then we can add each of these pieces of data to the dictionary. So we

46
00:02:53,970 --> 00:02:56,670
could say new_country[]

47
00:02:57,060 --> 00:03:00,190
and then we give the key that we want to add. So in this case,

48
00:03:00,190 --> 00:03:03,130
it would be the key country as a string,

49
00:03:04,990 --> 00:03:09,130
and the data or the value that's going to go in that is going to be whatever 

50
00:03:09,130 --> 00:03:11,530
gets passed into country_visited.

51
00:03:13,990 --> 00:03:18,990
So now all we have to do is repeat the process for the other keys in the

52
00:03:19,450 --> 00:03:22,390
dictionary. So visits is the next one,

53
00:03:23,290 --> 00:03:27,940
and that's going to be set equal to the times_visited. And finally,

54
00:03:28,000 --> 00:03:32,290
we're also going to populate the final key which is cities,

55
00:03:34,990 --> 00:03:38,230
and that is going to be equal to the cities_visited.

56
00:03:39,430 --> 00:03:43,210
Now, at this point, if you were to print out new_country,

57
00:03:43,240 --> 00:03:48,240
you should see a dictionary with the three key-value pairs and the keys will

58
00:03:48,400 --> 00:03:49,390
always be the same,

59
00:03:49,750 --> 00:03:54,750
but the values will depend on which arguments were passed in when this function

60
00:03:55,090 --> 00:03:59,020
was called. So once we have that new country,

61
00:03:59,320 --> 00:04:01,750
then we can actually take our travel log,

62
00:04:02,290 --> 00:04:07,290
and remember that the travel log is actually at its base, a list.

63
00:04:08,020 --> 00:04:11,110
So instead of adding to it like we have been doing

64
00:04:11,140 --> 00:04:15,490
when we're using a dictionary, in order to add to lists if you remember,

65
00:04:15,580 --> 00:04:20,050
you should probably use the function append. And inside here,

66
00:04:20,079 --> 00:04:22,540
we can add a new item to our list.

67
00:04:23,110 --> 00:04:27,700
And that new item is, of course, going to be this dictionary called new_country.

68
00:04:28,570 --> 00:04:30,940
So now if we go ahead and click run,

69
00:04:31,270 --> 00:04:35,710
then you can see when travel_log gets printed on now line 27,

70
00:04:36,160 --> 00:04:38,110
it's now got three entries.

71
00:04:38,920 --> 00:04:41,770
The first entry is the dictionary for France,

72
00:04:42,130 --> 00:04:44,560
the second is the dictionary for Germany,

73
00:04:45,070 --> 00:04:48,010
and the last one is the dictionary for Russia.

74
00:04:48,550 --> 00:04:51,640
We have now a list with three items,

75
00:04:52,090 --> 00:04:56,200
each being a dictionary, each with a nested list inside as

76
00:04:56,200 --> 00:04:58,480
well. So if

77
00:04:58,480 --> 00:04:59,320
you wanted to,

78
00:04:59,380 --> 00:05:04,380
you now have a way of keeping track of all the places you visited.

79
00:05:05,140 --> 00:05:06,760
And later on,

80
00:05:06,850 --> 00:05:11,110
as we start building out more complex apps and web applications,

81
00:05:11,440 --> 00:05:15,880
then you can easily see how logic like this might be really useful

82
00:05:16,180 --> 00:05:20,680
if we were building a real-life website for tracking our travels.

83
00:05:21,820 --> 00:05:25,300
Have a play around with nesting, dictionaries, and lists.

84
00:05:25,660 --> 00:05:28,930
And once you're happy that you've understood everything that's going on,

85
00:05:29,320 --> 00:05:33,490
then head over to the next lesson and we're going to start tackling our final

86
00:05:33,490 --> 00:05:34,090
project.

1
00:00:00,660 --> 00:00:03,600
All right. So now that you've learned all about dictionaries,

2
00:00:03,750 --> 00:00:08,750
we're going to put all of that knowledge to test and to use by building a blind

3
00:00:09,390 --> 00:00:13,860
auction program. So here's the program. When you first run it,

4
00:00:13,890 --> 00:00:18,890
it's just going to show you the logo art and maybe a line that tells you what

5
00:00:19,500 --> 00:00:22,320
program you're in. And then it's going to ask you for your name.

6
00:00:22,320 --> 00:00:26,100
So let's say we have three bidders, right? So first go,

7
00:00:26,220 --> 00:00:31,170
I go to the computer. I type in my name, I type in my bid and I hit enter.

8
00:00:31,740 --> 00:00:34,650
It asked me if there are any other bidders, I look around the room,

9
00:00:34,680 --> 00:00:37,620
I see two other colleagues. So I type yes.

10
00:00:38,160 --> 00:00:40,080
And now it clears the entire screen.

11
00:00:40,080 --> 00:00:43,470
So the other people can't see what my bid was.

12
00:00:43,860 --> 00:00:47,940
So now I leave the computer and my colleague comes over.

13
00:00:48,270 --> 00:00:52,170
They type in their name and also their bid.

14
00:00:53,460 --> 00:00:54,270
And again,

15
00:00:54,270 --> 00:00:57,660
they look around the room and they see this one other person who wants to bid.

16
00:00:57,720 --> 00:01:01,830
So they hit yes, again, it clears their bid. And finally,

17
00:01:01,830 --> 00:01:06,480
the last person makes their bid. At this point, everybody has bid

18
00:01:06,510 --> 00:01:08,100
so she's going to type no.

19
00:01:08,640 --> 00:01:12,480
And it's at this moment when our program is going to work out

20
00:01:12,600 --> 00:01:17,600
who has made the highest bid and print out who the winner is and what their bid

21
00:01:18,300 --> 00:01:22,140
was. This way, instead of competing with each other on bids,

22
00:01:22,380 --> 00:01:25,320
we actually all just give the highest price we're willing to pay

23
00:01:25,680 --> 00:01:29,190
and this is known as quite an efficient way of making a bid.

24
00:01:29,580 --> 00:01:34,230
And you see that a lot in say the construction industry and government,

25
00:01:34,230 --> 00:01:35,063
et cetera.

26
00:01:35,610 --> 00:01:40,610
The important thing in this program is you're going to start out using the blind

27
00:01:40,740 --> 00:01:42,510
auction start replit.

28
00:01:43,380 --> 00:01:47,850
And the first thing you'll notice is that I've already imported this function

29
00:01:47,850 --> 00:01:50,400
called clear from the replit module.

30
00:01:50,520 --> 00:01:55,020
And you can basically call this function, clear, whenever you want to clear the

31
00:01:55,020 --> 00:01:59,910
output just as you saw here. Whenever we typed yes after being asked

32
00:01:59,910 --> 00:02:01,110
if there are any other bidders,

33
00:02:01,130 --> 00:02:03,290
that just calls the clear

34
00:02:03,500 --> 00:02:08,000
and then it gets rid of everything that's in the console. In addition,

35
00:02:08,000 --> 00:02:11,810
we've also got the starting art of the gavel logo

36
00:02:12,110 --> 00:02:14,210
which you're going to put into the program.

37
00:02:14,600 --> 00:02:19,600
And the most important thing of all is that I want you to create a dictionary so

38
00:02:20,750 --> 00:02:25,750
that each person's name will be the key and their bid will be the value.

39
00:02:28,520 --> 00:02:33,520
And this dictionary is going to contain many of these key-value pairs

40
00:02:34,070 --> 00:02:38,510
and at the very end of the program when everybody's done with bidding,

41
00:02:38,810 --> 00:02:42,830
then we're going to loop through that dictionary and figure out who has made the

42
00:02:42,830 --> 00:02:45,200
highest bid. If you want,

43
00:02:45,260 --> 00:02:50,260
this is a good time to analyze this completed project and see if you can

44
00:02:50,750 --> 00:02:55,040
create your own flowchart using something like draw.io that I've shown you

45
00:02:55,040 --> 00:02:59,800
before, or just take a piece of paper and a pen and draw out flowchart.

46
00:03:00,460 --> 00:03:02,200
Now, if you want a hint,

47
00:03:02,290 --> 00:03:06,790
then you can head over to the course resources and you'll get taken to the flow

48
00:03:06,790 --> 00:03:10,660
chart that I've created for this program. So spoiler alert,

49
00:03:10,690 --> 00:03:13,920
I'm about to show you that flow chart. So if you don't want to see it

50
00:03:13,940 --> 00:03:17,170
and you want to create your own because it's a relatively simple program,

51
00:03:17,380 --> 00:03:20,530
then pause the video now and complete the challenge by yourself.

52
00:03:21,190 --> 00:03:24,190
Now for everybody else, who's still here, I want to show you,

53
00:03:24,190 --> 00:03:28,030
this is the flow chart I've created to represent this program.

54
00:03:28,690 --> 00:03:33,580
So we start at the beginning. We first show the logo from that file, art.py,

55
00:03:34,000 --> 00:03:36,940
and then we ask for a name input, we ask for their price.

56
00:03:37,450 --> 00:03:41,470
Now we're gonna add the name and the bid into a dictionary with the name as the

57
00:03:41,470 --> 00:03:45,430
key and the bid as the value. Now, once we're done with that,

58
00:03:45,520 --> 00:03:49,600
then we get to ask the user for another input and see if there are any other

59
00:03:49,600 --> 00:03:52,360
users who want to bid. So if they answer yes,

60
00:03:52,600 --> 00:03:55,780
then we're going to clear the screen and we're going to go back to here,

61
00:03:55,960 --> 00:04:00,790
ask for another name, another price, and so on and so forth. But if they say, no,

62
00:04:00,790 --> 00:04:02,080
everybody's done with bidding,

63
00:04:02,410 --> 00:04:05,140
then we're going to call some sort of function that we have,

64
00:04:05,380 --> 00:04:10,000
which is going to loop through our dictionary that was created here and find the

65
00:04:10,000 --> 00:04:15,000
person who had the highest bid value and then declare them as the winner and

66
00:04:15,250 --> 00:04:18,670
print out their bid. So it's a relatively simple program,

67
00:04:18,760 --> 00:04:21,010
at least compared to other things that you've built so far.

68
00:04:21,370 --> 00:04:24,760
So this is the time to pause the video and give it a go.

69
00:04:26,050 --> 00:04:29,110
I'll see you on the next lesson where we'll go through the solution together.

1
00:00:00,120 --> 00:00:02,850
All right, so how did you get on with today's project?

2
00:00:03,210 --> 00:00:07,190
Hopefully it went really well and you're just here to see how I did it.

3
00:00:07,860 --> 00:00:13,860
As I mentioned before, it's really useful when you're trying to create a large project to break it

4
00:00:13,860 --> 00:00:18,540
down into smaller pieces so that you can tackle each of the pieces one by one.

5
00:00:18,960 --> 00:00:22,270
And a great way of doing that is by creating your own flowchart.

6
00:00:22,770 --> 00:00:28,260
So as I've shown you before in the end of the last lesson, this is the flowchart that I've created

7
00:00:28,260 --> 00:00:34,560
for this particular program, and I'm going to follow it step by step to create this final blind auction

8
00:00:34,560 --> 00:00:35,100
program.

9
00:00:35,880 --> 00:00:41,820
The first thing we're going to do is we're going to show the logo from this file art.py, and notice

10
00:00:41,820 --> 00:00:45,480
how this logo is stored inside a variable called logo.

11
00:00:46,080 --> 00:00:51,990
The first thing we have to do is to fork our own copy of the starting project, and then we're going

12
00:00:51,990 --> 00:00:58,410
to look inside the art.py module and then we're going to import that logo.

13
00:00:58,980 --> 00:01:04,030
So now I can go ahead and print my logo.

14
00:01:04,830 --> 00:01:10,790
So that's the first step done. Next we're going to ask for a name.

15
00:01:10,800 --> 00:01:13,030
So that's going to be in the form of an input.

16
00:01:13,470 --> 00:01:19,020
So let's go ahead and create a variable called name and we're going to set it to be an input.

17
00:01:19,920 --> 00:01:23,760
And the input is going to say, what is your name?

18
00:01:25,310 --> 00:01:28,950
So they're going to type in their name and that's going to be stored inside this variable.

19
00:01:29,690 --> 00:01:35,780
Now, the next thing we're going to do is ask them for their bidding price. We'll say that inside a variable

20
00:01:35,780 --> 00:01:41,540
called price and we'll create another input to ask them what is your bid?

21
00:01:42,080 --> 00:01:48,050
And at the end of this, I'm going to add a dollar sign just so that when they are typing their bids,

22
00:01:48,140 --> 00:01:49,520
they'll see this line.

23
00:01:49,860 --> 00:01:55,100
And when they start typing, the cursor should be about here so they can see the dollar symbol before

24
00:01:55,100 --> 00:01:55,730
their price.

25
00:01:57,050 --> 00:02:03,300
So now we're down to here and we have to add our name and our bidding price into a dictionary.

26
00:02:03,800 --> 00:02:10,550
Let's go ahead and create it up here and we'll call it bids and it's going to start out as an empty dictionary.

27
00:02:11,150 --> 00:02:15,680
And then later on, once we've got the name and the price, we said that the name was going to be the

28
00:02:15,680 --> 00:02:22,850
key and the price was going to be the corresponding value. To add a new entry to our bids dictionary,

29
00:02:22,970 --> 00:02:28,580
we specify the dictionary, we add a set of square brackets, and then we add the key.

30
00:02:29,060 --> 00:02:33,230
The key is going to be the name and the value is going to be the price.

31
00:02:33,410 --> 00:02:34,940
So we would write it like this.

32
00:02:36,800 --> 00:02:42,410
Now, we get down to the slightly trickier part. We're going to ask if there are any other users who

33
00:02:42,410 --> 00:02:47,840
want to bid. And if the answer is yes, then we're going to clear the screen and we're going to loop

34
00:02:47,840 --> 00:02:51,260
back to where we ask for the next name and the next bid price.

35
00:02:52,190 --> 00:02:53,990
How do we achieve this?

36
00:02:56,090 --> 00:03:01,720
Well, we can put this into a while loop. Let's go ahead and indent this.

37
00:03:02,090 --> 00:03:09,260
So I just typed command and then the right-sided square bracket. Or on Windows, it will be control and the right

38
00:03:09,260 --> 00:03:10,270
side of the square bracket.

39
00:03:10,670 --> 00:03:13,070
And then we can wrap this into a while loop.

40
00:03:13,610 --> 00:03:18,950
If we had some sort of variable that would keep track whether if the bidding is finished.

41
00:03:19,370 --> 00:03:22,190
So let's call it bidding_finished.

42
00:03:23,300 --> 00:03:25,460
And of course, it starts out being False.

43
00:03:26,120 --> 00:03:34,850
Now, while bidding is not finished, so while not bidding_finished, so basically while this is still

44
00:03:34,850 --> 00:03:39,190
false, then we're going to keep running this until forever.

45
00:03:39,770 --> 00:03:42,290
But of course, we need a way to stop this.

46
00:03:42,290 --> 00:03:49,880
So we're going to create a new input where we ask the user, "are there any other bidders?"

47
00:03:51,540 --> 00:03:54,030
Type "yes" or

48
00:03:55,360 --> 00:04:02,680
"no". This way we get to get an input which is going to be either the word yes or the word no, and

49
00:04:02,680 --> 00:04:07,400
we can save this inside a variable called maybe should_continue.

50
00:04:08,320 --> 00:04:17,740
So this way we can check this variable and we can see, well, if should_continue is equal to "no",

51
00:04:18,100 --> 00:04:24,400
well, in that case, that's when we're going to flip the switch and change this bidding_finished variable

52
00:04:24,670 --> 00:04:25,600
to true.

53
00:04:26,190 --> 00:04:32,350
So this means that when we get to the end of this block in the while loop, then when it checks this

54
00:04:32,560 --> 00:04:37,010
bidding_finished, it's not going to continue to loop anymore.

55
00:04:37,780 --> 00:04:44,620
Now, on the other hand, if should_continue was yes or in fact any other value, then we can keep continuing

56
00:04:44,620 --> 00:04:48,910
and we don't actually have to change this variable because it's already false.

57
00:04:50,500 --> 00:05:00,850
Now we have our code looping, which means that unless the user types in a 'no' at the very end and bidding

58
00:05:00,850 --> 00:05:03,700
becomes finished, this is this path.

59
00:05:04,030 --> 00:05:11,170
Otherwise then we're going to keep going through all of these lines of code which is basically all

60
00:05:11,170 --> 00:05:16,040
of this until we get to the point where this switch actually gets flipped.

61
00:05:16,780 --> 00:05:23,200
So if you notice that if the user actually answers yes, then we want to clear the screen before we

62
00:05:23,200 --> 00:05:24,040
repeat the loop.

63
00:05:24,550 --> 00:05:26,640
That means we can check to see

64
00:05:26,650 --> 00:05:30,190
well, elif should continue is equal to.

65
00:05:30,490 --> 00:05:31,140
yes,

66
00:05:31,570 --> 00:05:36,850
well, in this case, we're going to call that clear() function that I showed you in the hint at the very

67
00:05:36,850 --> 00:05:37,370
beginning.

68
00:05:37,810 --> 00:05:44,260
So this function comes from the replit module and it allows us to clear the output in the console so

69
00:05:44,260 --> 00:05:51,490
that the previous name and bid gets cleared on off the screen and it leaves a fresh start for the next

70
00:05:51,490 --> 00:05:52,030
user.

71
00:05:53,650 --> 00:06:01,090
The last thing we have to do is to actually address this right? So when they answered no, they get taken

72
00:06:01,090 --> 00:06:08,650
out of the while loop, but we still have to find the highest bidder from our dictionary and to declare

73
00:06:08,650 --> 00:06:09,860
them as the winner.

74
00:06:10,570 --> 00:06:11,770
How do we do this?

75
00:06:14,080 --> 00:06:21,340
Well, let's put this in a separate function. So we could create a new function called find_highest_bidder.

76
00:06:23,750 --> 00:06:32,870
And this is going to get the bidding_record as the inputs, so this will be the dictionary that represents

77
00:06:32,870 --> 00:06:40,400
all the bids, the names and the values. I think it's easier if we can visualize what this bidding_

78
00:06:40,400 --> 00:06:41,680
record might look like.

79
00:06:42,080 --> 00:06:51,060
So we know it's a dictionary of key-value pairs where each key is a name and each value is a number.

80
00:06:51,530 --> 00:06:55,580
So let's say we had only two bidders, Angela and James.

81
00:06:56,030 --> 00:06:58,370
Angela bid $123.

82
00:06:58,370 --> 00:07:00,990
James bid $321.

83
00:07:01,130 --> 00:07:03,700
So we can see who's clearly going to be the winner here.

84
00:07:04,250 --> 00:07:07,100
But how do we get our code to figure that out?

85
00:07:08,120 --> 00:07:14,680
We need to somehow loop through this dictionary, right? which is called bidding_record.

86
00:07:15,920 --> 00:07:25,040
We know that we can use a for loop to do this so we can say for each bidder in the bidding_record,

87
00:07:25,940 --> 00:07:33,410
and this is a good point to remember that when you use a for loop on a dictionary, instead of looping

88
00:07:33,410 --> 00:07:39,560
through each item in the dictionary, like each of these key-value pairs, it actually loops through

89
00:07:39,560 --> 00:07:40,940
each of the keys.

90
00:07:41,360 --> 00:07:47,090
And we covered this in the very first lesson of today where we talked about how the for loop works

91
00:07:47,090 --> 00:07:53,150
when we're looping through a dictionary. Now, we're going to get hold of each of the bidders inside

92
00:07:53,180 --> 00:07:54,530
this dictionary.

93
00:07:55,130 --> 00:07:56,540
So what do we do with it?

94
00:07:57,260 --> 00:08:00,410
Well, we want to use the key to get the value.

95
00:08:00,560 --> 00:08:05,630
Let's take the bidding_record and pass in the key,

96
00:08:06,890 --> 00:08:09,330
and this should give us the value.

97
00:08:09,710 --> 00:08:16,770
So now we can actually save this inside a variable which I'm going to call bid_amount.

98
00:08:17,810 --> 00:08:23,090
So the first time this for loop runs, the bid_amount is going to equal 123

99
00:08:23,690 --> 00:08:31,040
and the next time the for loop runs, the bid amount is going to be equal to 321. If we had some sort

100
00:08:31,040 --> 00:08:33,320
of way outside of the for loop

101
00:08:33,330 --> 00:08:42,110
that keeps track of the highest bid, well then we could use this number to check against the current

102
00:08:42,110 --> 00:08:42,950
bidding amount.

103
00:08:43,610 --> 00:08:45,560
We can use an if statement to check

104
00:08:45,560 --> 00:08:53,600
well, if the bid amount is greater than the highest bid, well, in that case, then the highest bid

105
00:08:53,600 --> 00:08:55,220
becomes the bid amount.

106
00:08:57,290 --> 00:09:04,700
So what this means is that we start out with a zero. The first time the for loop is run, the bidder

107
00:09:04,700 --> 00:09:06,280
is going to be equal to Angela,

108
00:09:06,470 --> 00:09:12,410
the bid amount is going to be equal to Angela as the key passed into this dictionary, which is going

109
00:09:12,410 --> 00:09:18,960
to get us the value 123. If 123 is greater than zero,

110
00:09:19,100 --> 00:09:26,960
well, then this highest bid is now going to become 123. The next time the for loop runs

111
00:09:26,960 --> 00:09:32,060
the bidder is now James and the bid amount is now 321.

112
00:09:32,570 --> 00:09:37,330
Now we're checking if 321 is greater than the highest bid.

113
00:09:37,520 --> 00:09:40,990
Remember this, in the last round, got set to 123.

114
00:09:41,330 --> 00:09:42,680
So this is going to be true.

115
00:09:42,920 --> 00:09:48,410
And this means James' bid, 321, is now going to be the highest bid.

116
00:09:49,590 --> 00:09:56,850
In addition to keeping track of the highest bid, we can keep track of the winner. If this is indeed

117
00:09:56,850 --> 00:10:04,110
true, if the current bidder has the highest bid, well then at the same time as setting the highest

118
00:10:04,110 --> 00:10:04,390
bid,

119
00:10:04,620 --> 00:10:07,650
we should also set the winner to the key,

120
00:10:07,860 --> 00:10:09,210
so the current bidder.

121
00:10:11,750 --> 00:10:18,500
And once we've gone through this for loop and we've looped through all of the records in the bidding record,

122
00:10:18,770 --> 00:10:21,380
well then finally we can actually print

123
00:10:22,670 --> 00:10:25,100
"The winner is..."

124
00:10:26,140 --> 00:10:34,750
the winner that's stored in this variable. And we're going to say they won with a bid of... and let's add

125
00:10:34,750 --> 00:10:38,830
a dollar sign and then we're going to pass in the highest_bid.

126
00:10:40,270 --> 00:10:46,990
Now, we can turn this into an fstring and it will use both of these variables, which is storying

127
00:10:46,990 --> 00:10:51,580
the highest bid and the winner's name to print out who the winner is.

128
00:10:52,060 --> 00:10:58,210
So down here, when should_continue is no going down this path,

129
00:10:58,540 --> 00:11:04,330
we can now print and declare the winner. In addition to saying that bidding finished is true,

130
00:11:04,600 --> 00:11:11,200
we're also going to call that function, find_highest_bidder, and pass in all of the bids that we

131
00:11:11,200 --> 00:11:13,240
have been keeping track of over here.

132
00:11:14,480 --> 00:11:19,940
Now, just before we run our code, let's go through each line and make sure that everything looks all

133
00:11:19,940 --> 00:11:20,270
right.

134
00:11:20,780 --> 00:11:23,160
Firstly here, where it says, 'what is your name?'

135
00:11:23,190 --> 00:11:25,940
maybe we can add a colon and then a space

136
00:11:26,240 --> 00:11:28,180
so the user starts typing here.

137
00:11:28,790 --> 00:11:30,240
Then it asks, 'what is your bid?'

138
00:11:30,320 --> 00:11:35,390
We can add a colon as well and the user will start typing after the dollar sign.

139
00:11:36,080 --> 00:11:41,720
Now, I can already see a problem that's actually going to happen because of this line 23.

140
00:11:42,050 --> 00:11:47,210
I wonder if you can spot the issue here, especially if you think about what we're going to do with

141
00:11:47,210 --> 00:11:48,560
this price later on.

142
00:11:49,730 --> 00:11:56,300
But I'm going to add one more new line here and then I'm going to run the code and we'll see what actually

143
00:11:56,300 --> 00:11:56,860
happens.

144
00:11:58,030 --> 00:11:59,950
So now let's go ahead and run the code.

145
00:12:02,930 --> 00:12:10,220
And you can see our gavel printed and then it asks us for our name, so I'm just going to put my name and

146
00:12:10,220 --> 00:12:16,440
then 123. And then one other bidder who's going to be James, 321.

147
00:12:16,460 --> 00:12:19,570
And now if I say no, there are no more bidders,

148
00:12:19,940 --> 00:12:21,650
see what happens when I hit enter.

149
00:12:22,370 --> 00:12:23,600
I get a type error

150
00:12:23,720 --> 00:12:30,790
and it tells us that the greater sign is not supported between instances of a string and an int

151
00:12:31,040 --> 00:12:33,500
and this happened on line 16.

152
00:12:35,130 --> 00:12:42,870
If we take a look at line 16, basically we're comparing the bid amount, which is the value that came

153
00:12:42,870 --> 00:12:46,490
out of the bidding record, which is what's being passed in here,

154
00:12:46,950 --> 00:12:53,760
and that, of course, is a dictionary where the keys are the names of the bidders and the value is

155
00:12:53,790 --> 00:12:54,390
the price.

156
00:12:54,780 --> 00:12:56,310
So what's actually happening here?

157
00:12:56,610 --> 00:13:02,820
Well, it's because when I took this price input in, I kept it as a normal input.

158
00:13:03,060 --> 00:13:06,780
Instead, it should be turned into an integer.

159
00:13:07,200 --> 00:13:14,370
So that way we can work with it as a number so that when we're comparing it against, say, zero or

160
00:13:14,370 --> 00:13:18,190
whatever other number later on, it can actually do the comparison.

161
00:13:18,570 --> 00:13:26,100
It doesn't actually make sense to the computer when you're comparing a string versus a number. That doesn't

162
00:13:26,100 --> 00:13:26,940
actually work.

163
00:13:26,970 --> 00:13:30,990
And this was covered when we talked about data types in Python.

164
00:13:31,680 --> 00:13:33,810
Now, if we hit run again

165
00:13:35,350 --> 00:13:42,700
and we do the same thing, and when I say no, you can see that it tells me the winner is James with

166
00:13:42,700 --> 00:13:45,160
a bid of 321.

167
00:13:46,060 --> 00:13:53,500
Essentially, the hardest part of this challenge is figuring out how to loop through a dictionary and

168
00:13:53,500 --> 00:14:00,640
get hold of each of the bidders and each of their values and compare them historically against previous

169
00:14:00,640 --> 00:14:03,070
values inside this dictionary.

170
00:14:03,790 --> 00:14:11,020
If this function is confusing to you, then I really recommend either going over to Thonny, pasting

171
00:14:11,020 --> 00:14:14,720
the code in and exploring it by going through it step by step.

172
00:14:15,250 --> 00:14:20,680
Alternatively, if you can't install Thonny or you don't have access to your normal computer, then you

173
00:14:20,680 --> 00:14:23,800
can also go to a website called pythontutor.com.

174
00:14:24,670 --> 00:14:31,420
And this also lets you visualize your code, although in a slightly more simplified way. If I go ahead

175
00:14:31,420 --> 00:14:38,740
and paste in my function, find_highest_bidder, passing in the bid record, let's go ahead and create

176
00:14:38,740 --> 00:14:41,100
a new dictionary of bids.

177
00:14:42,160 --> 00:14:47,770
So now we have a dictionary of bids with two key-value pairs just as we entered before,

178
00:14:48,160 --> 00:14:56,410
and then I'm going to call this function, find_highest_bidder, and pass in these bids.

179
00:14:57,370 --> 00:15:03,170
Now, if we go ahead and click visualize execution, you can see it's going to go line by line, and we

180
00:15:03,170 --> 00:15:06,460
can click next to see how it's jumping through this.

181
00:15:06,910 --> 00:15:12,980
Firstly, it's bypassing this function, creating this next dictionary.

182
00:15:13,750 --> 00:15:17,710
So now it's got a function stored somewhere, which is this one,

183
00:15:17,950 --> 00:15:21,010
it's got a dictionary called bids stored somewhere else.

184
00:15:21,520 --> 00:15:26,950
And now we actually get to the line, which is going to execute that function and it's going to pass

185
00:15:26,950 --> 00:15:31,330
over this dictionary of bids to this function.

186
00:15:31,990 --> 00:15:40,390
And if you step through this line by line, you can see it creating these new variables and populating

187
00:15:40,420 --> 00:15:42,720
them. The first time we run it

188
00:15:42,730 --> 00:15:50,400
the highest bidder is zero, the winner is an empty string, and the bidder in the for loop is now Angela.

189
00:15:50,410 --> 00:15:54,010
It's the first key from the dictionary as it points to here.

190
00:15:54,610 --> 00:15:55,660
Now if we keep clicking

191
00:15:55,660 --> 00:16:01,660
next, it works out the bid amount which is the value corresponding to that key, and then it works

192
00:16:01,660 --> 00:16:08,920
out the highest bid by comparing whether if the current bid amount is greater than the current highest

193
00:16:08,920 --> 00:16:09,220
bid.

194
00:16:09,610 --> 00:16:11,900
So 123 is greater than zero

195
00:16:12,190 --> 00:16:18,820
so when I click next, you'll see highest bid gets replaced with the bid amount and the winner is now

196
00:16:18,820 --> 00:16:23,830
going to be set as Angela. The next time the loop runs the bidder is

197
00:16:23,830 --> 00:16:30,040
now James, and if I keep going through this, you can see that James actually ends up with the highest

198
00:16:30,040 --> 00:16:31,960
bid and becomes the winner.

199
00:16:32,500 --> 00:16:37,990
So now the for loop is done because it's looped through all items in the dictionary and it's now going

200
00:16:37,990 --> 00:16:43,190
to print the output, which is 'The winner is James with a bid of $321.'

201
00:16:43,750 --> 00:16:48,040
This is another way that's really, really helpful to visualize your code.

202
00:16:48,550 --> 00:16:52,990
And the other great thing is that even if while you're visualizing there's still something you don't

203
00:16:52,990 --> 00:16:58,350
understand, you can actually click on this button to get live help from users across the Internet.

204
00:16:58,840 --> 00:17:05,109
And if you want to practice your own debugging, just as we did in today's lesson, you can also click

205
00:17:05,109 --> 00:17:09,160
to help some of these users who are looking for help with their code.

206
00:17:09,310 --> 00:17:14,410
And you can practice reading code, understanding code and helping other people with their bugs and

207
00:17:14,410 --> 00:17:15,119
their issues.

208
00:17:16,540 --> 00:17:22,329
Finally, if you want to take a look at the completed code for today's project, then as always, you

209
00:17:22,329 --> 00:17:27,339
can head over tor repl.it/@appbrewery/blind-auction-completed.

210
00:17:27,910 --> 00:17:34,090
And it's important to remember that this is just one way of completing this project.

211
00:17:34,120 --> 00:17:40,660
There are lots and lots of other ways. But as long as you test your program thoroughly and it works

212
00:17:40,660 --> 00:17:44,670
in the same way, then it doesn't matter too much how you've done it.

213
00:17:45,520 --> 00:17:51,940
But it's important that you've absorbed the knowledge in today's lessons, and the most important of

214
00:17:51,940 --> 00:18:00,550
which is this concept of dictionaries, adding to dictionaries, and also looping through dictionaries.

215
00:18:01,330 --> 00:18:07,030
So have a look through the completed code and also have a play around with Python Tutor, which is

216
00:18:07,030 --> 00:18:09,460
a really great resource for your learning.

217
00:18:09,940 --> 00:18:13,240
And I'll see you tomorrow for more lessons on Python.

