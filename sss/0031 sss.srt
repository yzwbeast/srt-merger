1
00:00:00,150 --> 00:00:02,160
Hey guys, welcome to day 31

2
00:00:02,160 --> 00:00:07,080
of 100 Days of Code. And you've been learning quite a lot of things

3
00:00:07,080 --> 00:00:10,470
now. We've been looking at handling exceptions,

4
00:00:10,770 --> 00:00:15,120
using the JSON data format, passing and reading CSVs

5
00:00:15,120 --> 00:00:19,950
using pandas, opening and writing to files and a whole lot more.

6
00:00:20,310 --> 00:00:24,270
So it's time for your capstone project.

7
00:00:24,960 --> 00:00:26,490
And in this capstone project,

8
00:00:26,550 --> 00:00:30,210
we're going to be building a flashcard program to help you study.

9
00:00:30,810 --> 00:00:35,490
And it's especially great with studying for languages. Now,

10
00:00:35,550 --> 00:00:36,540
when I was in school,

11
00:00:36,570 --> 00:00:41,570
I studied French and it was a lot of vocab that we had to learn for tests.

12
00:00:42,780 --> 00:00:46,070
Pomme is Apple, and I would memorize all these words,

13
00:00:47,000 --> 00:00:50,900
all of the grammar tables, and yet after four or five years,

14
00:00:51,290 --> 00:00:53,150
I couldn't really speak much French.

15
00:00:53,810 --> 00:00:58,100
So I decided to go for immersive language learning.

16
00:00:58,220 --> 00:00:59,390
I went to France,

17
00:00:59,810 --> 00:01:04,810
I hung out with friends and I tried to immerse myself in the language and

18
00:01:06,500 --> 00:01:10,520
culture. But that also failed. I had a lot of fun,

19
00:01:10,520 --> 00:01:13,670
but my French didn't seem to improve all that much.

20
00:01:14,420 --> 00:01:19,420
But then I discovered a new way of learning languages and it all started with

21
00:01:20,030 --> 00:01:24,710
looking at Chinese characters. There's a lot of Chinese characters out there.

22
00:01:24,710 --> 00:01:29,710
There's something like 50,000 Chinese characters in total from history to now.

23
00:01:31,790 --> 00:01:34,940
There's a lot of characters that you could learn. They each have a different

24
00:01:34,940 --> 00:01:37,670
meaning and they each have a different pronunciation.

25
00:01:38,450 --> 00:01:43,250
Imagine that. Trying to learn 50,000 characters. That's no easy feat.

26
00:01:43,490 --> 00:01:48,350
But then a friend told me that actually you don't really need 50,000

27
00:01:48,380 --> 00:01:52,850
characters. Your average professor, who is very eloquent,

28
00:01:53,180 --> 00:01:56,150
can write a lot of the characters and use them with ease,

29
00:01:56,510 --> 00:02:01,510
only knows about 10,000 and your average person probably only uses about 8,000

30
00:02:03,470 --> 00:02:08,240
in their day to day lives. And if you basically just want to get by in life,

31
00:02:08,300 --> 00:02:12,950
you can pretty much rely on the 3000 words that an average teenager would know.

32
00:02:13,880 --> 00:02:18,020
And finally, if you actually just want to be able to watch some simple movies,

33
00:02:18,050 --> 00:02:19,520
read some simple books,

34
00:02:19,760 --> 00:02:24,320
then you could use the average kid vocabulary of about that the 1000 characters.

35
00:02:24,920 --> 00:02:28,700
And at this point, I think to myself, 1000. That's quite doable.

36
00:02:28,970 --> 00:02:32,330
I could do 1000. If I learn just 10 characters a day,

37
00:02:32,720 --> 00:02:35,720
that will take me less than a year to learn all of these characters.

38
00:02:36,530 --> 00:02:39,980
But it's not just 1000 random characters either.

39
00:02:40,550 --> 00:02:42,920
There's such a thing as a frequency dictionary.

40
00:02:42,950 --> 00:02:46,310
So a dictionary that's not listed here by A, B, C, D,

41
00:02:46,640 --> 00:02:51,640
but it actually listed by the frequency that a particular word occurs in common

42
00:02:51,740 --> 00:02:54,170
usage. For example,

43
00:02:54,410 --> 00:02:59,410
if you take the first 1000 characters that are most commonly used,

44
00:03:00,280 --> 00:03:03,160
then you can pretty much read most of the Newspapers,

45
00:03:03,160 --> 00:03:06,160
you can watch most of the TV shows because these

46
00:03:06,160 --> 00:03:10,870
are the words that are the bread and butter of the language. It's like in English,

47
00:03:11,110 --> 00:03:14,530
the a, the, of, from, why, yes, no,

48
00:03:14,740 --> 00:03:17,920
these are words that we use every day, again and again.

49
00:03:18,430 --> 00:03:23,430
The crazy words like anti-establishment or glioblastoma.

50
00:03:24,640 --> 00:03:28,870
These are not words that you need to really know for day to day life.

51
00:03:29,770 --> 00:03:32,080
So let me show you the program that you'll build

52
00:03:32,110 --> 00:03:35,530
where you can learn the most frequently used words in any language.

53
00:03:36,130 --> 00:03:38,080
It's a flashcard program,

54
00:03:38,620 --> 00:03:43,360
and it shows you the front and the back of the card. So for example,

55
00:03:43,390 --> 00:03:48,390
French, demande. In English means request. After three seconds,

56
00:03:48,850 --> 00:03:52,990
the card flips and I can check whether if I knew the right answer.

57
00:03:53,500 --> 00:03:57,070
If I got it right I'll press the tick and if I got it wrong

58
00:03:57,100 --> 00:04:00,370
I'll press the cross. So let's try another word.

59
00:04:00,700 --> 00:04:04,840
Parti means left or to leave. Attendez

60
00:04:04,840 --> 00:04:07,360
means to wait

61
00:04:07,960 --> 00:04:12,490
and I think I knew that word. So I'm going to click the check mark.

62
00:04:12,880 --> 00:04:16,750
And what that's going to do is it's going to take the flashcard out of all of

63
00:04:16,750 --> 00:04:20,589
the list of flashcards so it doesn't show me the things I already know.

64
00:04:21,339 --> 00:04:24,070
And instead it only shows me the things I don't know

65
00:04:24,280 --> 00:04:28,840
so I can review it and say, Oh, I'm not sure what loin means

66
00:04:28,900 --> 00:04:30,490
so I'll say cross,

67
00:04:30,790 --> 00:04:35,380
and that will go back into the deck and it might come up again at some point.

68
00:04:36,100 --> 00:04:40,480
So this beautiful piece of software is what we're going to be creating.

69
00:04:40,960 --> 00:04:42,190
But more specifically,

70
00:04:42,220 --> 00:04:46,930
you're going to be creating because after all, this is your capstone project.

71
00:04:47,380 --> 00:04:48,070
But don't worry,

72
00:04:48,070 --> 00:04:53,070
I've divided up into four steps and I've got some step by step instructions for

73
00:04:53,140 --> 00:04:57,400
you in the next lesson. Now, if you're wondering,

74
00:04:57,520 --> 00:05:00,970
how did you get the most frequent words for the flashcard app in the first

75
00:05:00,970 --> 00:05:02,890
place? Well, let me show you.

76
00:05:03,520 --> 00:05:08,520
There's a Wiki for the frequency list of different languages,

77
00:05:09,010 --> 00:05:12,790
and it lists most of the common languages. If we go to French,

78
00:05:12,820 --> 00:05:17,320
you can see that there are loads of different lists that people have compiled

79
00:05:17,530 --> 00:05:21,040
that list the top, most frequently occurring words.

80
00:05:21,700 --> 00:05:26,700
And one of the ones that I thought was really relevant is the words are based on

81
00:05:26,710 --> 00:05:27,610
subtitles.

82
00:05:28,120 --> 00:05:33,120
These subtitles come from all sorts of shows and movies that are relevant to modern

83
00:05:33,730 --> 00:05:37,360
culture. And when you look at one of the subtitles,

84
00:05:37,660 --> 00:05:39,370
this is one of my favorite shows by the way,

85
00:05:39,700 --> 00:05:43,720
you can see that the subtitles are listed by language.

86
00:05:44,110 --> 00:05:48,490
And if we pick out one which is in English and we take a look at it,

87
00:05:49,960 --> 00:05:51,130
then you can see

88
00:05:51,190 --> 00:05:55,960
it's basically just all the words that are spoken in the movie or in the show

89
00:05:56,410 --> 00:05:59,780
and it's been transcribed into subtitles. Now

90
00:05:59,780 --> 00:06:04,010
then if we take all of these words that are from the most commonly watched

91
00:06:04,010 --> 00:06:07,550
movies and shows, we end up with these frequency lists.

92
00:06:08,000 --> 00:06:09,620
So if we take a look here,

93
00:06:09,620 --> 00:06:14,620
it shows the most frequent words from 1 to 5,000.

94
00:06:16,280 --> 00:06:17,330
And at the very beginning,

95
00:06:17,330 --> 00:06:22,330
it's your I, of, is, all of these things that are really common.

96
00:06:22,550 --> 00:06:25,610
And then as you scroll down, you get to some longer words.

97
00:06:26,090 --> 00:06:28,100
And if you scroll to the bottom,

98
00:06:28,340 --> 00:06:31,460
you can see you're getting some more and more niche words.

99
00:06:32,600 --> 00:06:37,600
These frequency lists are compiled by a user called Hermitd

100
00:06:38,750 --> 00:06:41,480
and Hermitdis a Hermit Dave

101
00:06:41,900 --> 00:06:46,900
And he has a GitHub repository where he's compiled all of the frequency words,

102
00:06:48,980 --> 00:06:52,190
and you can see the latest version from 2018.

103
00:06:52,910 --> 00:06:56,840
Now he's got all of the frequency words for many languages

104
00:06:56,930 --> 00:06:58,970
and it's listed by the language code,

105
00:06:59,330 --> 00:07:01,940
so French would be FR for example.

106
00:07:02,600 --> 00:07:07,600
And here you can see the top 50,000 most frequent lists or the full entire list.

107
00:07:09,950 --> 00:07:13,460
We're probably not gonna learn more than 1000,

108
00:07:13,700 --> 00:07:16,250
and I'm certainly not going to get to 50,000.

109
00:07:16,730 --> 00:07:21,620
But this data here lists all the words that he found in these subtitles and the

110
00:07:21,620 --> 00:07:23,390
frequency that they occurred.

111
00:07:23,930 --> 00:07:27,260
And once they've been sorted in order of frequency,

112
00:07:27,560 --> 00:07:29,000
this is what you end up with.

113
00:07:30,860 --> 00:07:33,710
So I've already studied some of the first 200 words.

114
00:07:34,220 --> 00:07:37,340
So if I take a hundred words from this frequency dictionary

115
00:07:37,820 --> 00:07:42,200
and I put it into a Google sheet, then I end up with something like this.

116
00:07:42,890 --> 00:07:43,130
Now,

117
00:07:43,130 --> 00:07:47,180
what I want to be able to do is to create a flashcard where the front of the

118
00:07:47,180 --> 00:07:49,670
flashcard is the word in French,

119
00:07:50,000 --> 00:07:54,170
and then on the back of the flashcard is the answer in English for what

120
00:07:54,170 --> 00:07:58,460
that word means. Instead of having to flip through a dictionary

121
00:07:58,460 --> 00:08:00,620
finding out the meaning of each of these words,

122
00:08:00,920 --> 00:08:03,920
there's actually a really neat trick in Google sheets that I want to show you.

123
00:08:04,610 --> 00:08:06,500
If you hit equals to

124
00:08:06,530 --> 00:08:10,820
start a new formula and you type in Google translate,

125
00:08:11,630 --> 00:08:13,760
you can see it expects some inputs.

126
00:08:14,180 --> 00:08:16,880
First is the piece of text that you want to translate,

127
00:08:16,880 --> 00:08:20,810
so I'm going to click on this cell, and then it's the source language.

128
00:08:20,810 --> 00:08:24,380
So this is the language as a code. So for example,

129
00:08:24,530 --> 00:08:29,530
Spanish is ES and French is FR. And then the final input.

130
00:08:30,590 --> 00:08:34,340
it expects is the language code that you want to translate it to.

131
00:08:34,730 --> 00:08:38,900
So in this case, I want to translate it to English. So I'm going to use en.

132
00:08:39,559 --> 00:08:41,570
And then we can close off the parentheses, hit

133
00:08:41,570 --> 00:08:44,690
enter and after a little while with good internet,

134
00:08:44,930 --> 00:08:48,500
you'll see the English translation for this word. And of course,

135
00:08:48,500 --> 00:08:49,520
because we're an Excel,

136
00:08:49,520 --> 00:08:54,520
we can simply just drag this cross all the way down to all of our words.

137
00:08:54,900 --> 00:08:56,550
And after a little while, bam!

138
00:08:57,240 --> 00:09:00,660
It's translated all of those words into English.

139
00:09:01,680 --> 00:09:06,540
So this is a really neat trick and I'll link to the docs for this particular

140
00:09:06,540 --> 00:09:07,373
formula.

141
00:09:07,740 --> 00:09:12,740
And also you can take a look at the language support that Google's translation

142
00:09:12,990 --> 00:09:17,400
service has and you can see the language code for each of these languages.

143
00:09:17,550 --> 00:09:21,450
So if you want to try learning Macedonian or Malay,

144
00:09:21,720 --> 00:09:23,700
and this is going to be your best bet.

145
00:09:24,390 --> 00:09:27,450
So now that I've created my Excel sheet

146
00:09:27,480 --> 00:09:29,940
essentially of a French and English words,

147
00:09:30,330 --> 00:09:35,330
I've got potentially a hundred flashcards with the front and back data already

148
00:09:35,790 --> 00:09:38,700
saved inside this Google sheet. Now,

149
00:09:38,700 --> 00:09:42,570
all I have to do is simply download it as a CSV

150
00:09:42,930 --> 00:09:46,110
and we'll be able to work with it very easily. Now,

151
00:09:46,140 --> 00:09:50,430
you don't have to worry about downloading this or getting hold of this because

152
00:09:50,430 --> 00:09:55,430
I've already included the final CSV data in the starting project for you to be

153
00:09:55,800 --> 00:09:56,633
able to use.

154
00:09:57,270 --> 00:10:02,270
So head over to the next lesson and get started building your very own study

155
00:10:02,730 --> 00:10:05,460
aid, the flashy flashcard app.


156
00:00:00,390 --> 00:00:00,780
All right.

157
00:00:00,780 --> 00:00:04,770
So hopefully you've headed over to the course resources and downloaded the

158
00:00:04,770 --> 00:00:09,480
starting zip file for today's project. So go ahead and unzip it.

159
00:00:09,660 --> 00:00:12,780
And then let's open up this folder using PyCharm.

160
00:00:16,700 --> 00:00:16,910
Okay.

161
00:00:16,910 --> 00:00:20,900
Here you've already got two folders, data and images.

162
00:00:21,260 --> 00:00:26,030
We're going to be using all of these images inside the images folder to create

163
00:00:26,090 --> 00:00:29,630
our project. So this is the front of the flashcard,

164
00:00:29,960 --> 00:00:33,860
the back of the flashcard, the right button and the wrong button.

165
00:00:35,210 --> 00:00:40,100
And we're going to be writing our code inside main.py. So notice here

166
00:00:40,100 --> 00:00:43,280
we've already got the background color hex code defined.

167
00:00:43,310 --> 00:00:47,870
So we'll be able to use it in our coding as well. This is what we're aiming for.

168
00:00:47,900 --> 00:00:50,570
This is the user interface for this program.

169
00:00:51,110 --> 00:00:56,110
It's going to have a window with a title and inside this window,

170
00:00:56,390 --> 00:01:00,980
we're going to have the card front image here showing up.

171
00:01:01,220 --> 00:01:04,489
And on that card, we're going to have two pieces of text,

172
00:01:04,970 --> 00:01:09,140
a word that says title and a piece of text that just says word.

173
00:01:09,680 --> 00:01:13,340
And these are going to be formatted according to the instructions,

174
00:01:13,370 --> 00:01:17,450
so in terms of font and size, et cetera. Finally, at the bottom,

175
00:01:17,450 --> 00:01:21,140
we've got two buttons, a cross, and a checkmark.

176
00:01:21,560 --> 00:01:26,560
And they're basically buttons that have the images right and wrong inside them.

177
00:01:27,410 --> 00:01:30,260
Let's get started. Inside main.py,

178
00:01:30,290 --> 00:01:34,640
the first thing I'm going to do is to go ahead and import tkinter.

179
00:01:35,390 --> 00:01:38,360
So I'm going to import all the classes from tkinter

180
00:01:38,810 --> 00:01:41,540
and then I'll be able to use it to create my window.

181
00:01:45,200 --> 00:01:45,590
All right.

182
00:01:45,590 --> 00:01:50,590
I'm going to set a title for my window and I'm going to give it the name of our

183
00:01:50,870 --> 00:01:51,260
app

184
00:01:51,260 --> 00:01:56,260
which is going to be called Flashy or whatever it is you want to call it. Next,

185
00:01:56,630 --> 00:01:58,370
I'm going to give this window, um,

186
00:01:58,400 --> 00:02:03,400
a configuration and I'm going to set the padding of the window to 50 pixels in

187
00:02:04,310 --> 00:02:07,310
the X and 50 pixels in the Y.

188
00:02:08,960 --> 00:02:12,290
Now this window is also going to have a background color

189
00:02:12,320 --> 00:02:15,680
which is going to be set to this BACKGROUND_COLOR

190
00:02:15,680 --> 00:02:17,450
constant that we have up here.

191
00:02:18,650 --> 00:02:21,230
So now that I'm done configuring my window,

192
00:02:21,260 --> 00:02:26,260
I can go ahead and get my window to start off in the main loop.

193
00:02:26,720 --> 00:02:31,010
And now I should be able to run this code and just check that it works.

194
00:02:31,580 --> 00:02:34,550
Here's our window with the background color

195
00:02:34,820 --> 00:02:38,030
and there's already some padding in it and making this window a little bit

196
00:02:38,030 --> 00:02:39,710
bigger. Now,

197
00:02:39,740 --> 00:02:44,740
the next thing to do is to somehow put this card front image onto our window.

198
00:02:46,490 --> 00:02:48,860
I'm going to be using a canvas object.

199
00:02:49,400 --> 00:02:54,400
And if you remember, canvas object allows us to layer lots of things on top

200
00:02:54,740 --> 00:02:57,890
of each other. So here is an image and then on top of that,

201
00:02:57,890 --> 00:02:59,770
we've got some text being created.

202
00:03:00,190 --> 00:03:03,730
And as long as we specify the position for each of these items,

203
00:03:04,000 --> 00:03:06,610
it can all be overlapped on top of each other.

204
00:03:07,420 --> 00:03:11,020
So we're creating our canvas from the canvas class

205
00:03:11,440 --> 00:03:14,680
and then I'm going to give my canvas a width and height.

206
00:03:15,190 --> 00:03:19,240
So I'm going to set the width and height to be the same as the width and height

207
00:03:19,270 --> 00:03:20,380
of my card.

208
00:03:20,740 --> 00:03:24,400
So the width is 800 and the height is 526.

209
00:03:25,600 --> 00:03:30,070
You should've seen these numbers in the instructions as well. Next,

210
00:03:30,100 --> 00:03:34,030
we're going to create our image from the photo image class.

211
00:03:34,360 --> 00:03:38,080
So let's call it card_front_img

212
00:03:38,560 --> 00:03:41,980
and this is going to be created from the photo image class

213
00:03:42,220 --> 00:03:45,910
where we have to specify a file name. Now, previously,

214
00:03:45,940 --> 00:03:49,600
all we've done is we've just said the actual name of the file,

215
00:03:49,630 --> 00:03:54,610
which in this case is card_front.png. But in our case,

216
00:03:54,880 --> 00:03:59,530
this particular file is actually inside our images folder.

217
00:03:59,950 --> 00:04:04,950
So we have to specify the full file path for this to work; images/card_

218
00:04:05,560 --> 00:04:06,550
front.png.

219
00:04:07,210 --> 00:04:11,620
And then we can get ahold of our canvas and create our image inside.

220
00:04:12,160 --> 00:04:16,420
So the image is going to be set to our card_front_img

221
00:04:16,990 --> 00:04:21,990
and then we have to specify the X and Y values of that image. Because it needs

222
00:04:22,120 --> 00:04:24,040
to go into the center of the canvas,

223
00:04:24,250 --> 00:04:28,270
we're just going to half the width for the X and half the height for the Y.

224
00:04:28,750 --> 00:04:30,760
So this goes in as a tuple

225
00:04:31,030 --> 00:04:34,630
so half of 526 is 263

226
00:04:35,470 --> 00:04:40,470
and then I'm just going to put our canvas onto the grid and I'm going to set the

227
00:04:41,110 --> 00:04:45,550
row to zero and the column to zero as well.

228
00:04:46,240 --> 00:04:50,080
Now, just be careful when you're writing strings like this,

229
00:04:50,110 --> 00:04:55,110
because it's pretty easy to make a typo like I have here. Instead,

230
00:04:56,980 --> 00:04:59,440
I prefer using PyCharm's autofill.

231
00:04:59,470 --> 00:05:02,140
So when you have a file path,

232
00:05:02,170 --> 00:05:07,030
you can type in the name of the folder forwardslash and then the name of the

233
00:05:07,060 --> 00:05:11,770
file. And we can just hit enter for it to insert it for us automatically.

234
00:05:12,880 --> 00:05:15,100
Now, if I go ahead and hit run,

235
00:05:16,630 --> 00:05:21,430
then I'll see that I've got a background which has the background color,

236
00:05:21,910 --> 00:05:26,910
and then 50 pixels of padding on all four sides, in the middle

237
00:05:27,310 --> 00:05:29,650
I've got my canvas displaying

238
00:05:29,650 --> 00:05:34,650
this card_front.png. The only thing about this card is that it's still got

239
00:05:35,380 --> 00:05:39,220
that white background. How do we get rid of that? Well,

240
00:05:39,250 --> 00:05:44,140
we can change the background into the same color as everything else,

241
00:05:44,170 --> 00:05:48,070
so this background color. Let's go ahead and get our canvas

242
00:05:48,100 --> 00:05:51,850
and then let's config it to have a background color

243
00:05:52,150 --> 00:05:56,110
that's set equal to our constant like this.

244
00:05:56,870 --> 00:05:59,270
Now the background color is the same,

245
00:05:59,780 --> 00:06:04,780
but we now have a line that is all around our canvas.

246
00:06:05,930 --> 00:06:08,510
If you remember from previous lessons,

247
00:06:08,870 --> 00:06:13,870
I told you that you can simply get rid of the highlight thickness and set it to

248
00:06:14,810 --> 00:06:18,920
zero. And that basically just gets rid of that border.

249
00:06:19,430 --> 00:06:24,430
So now we have a window with our flashcard showing up and the image has the

250
00:06:25,580 --> 00:06:29,000
shadows which I created in illustrator

251
00:06:29,270 --> 00:06:33,530
so that you'll be able to see it as a 3D card. Now,

252
00:06:33,560 --> 00:06:36,800
inside the card, not only do we have an image,

253
00:06:37,100 --> 00:06:39,440
but we also want to have some text.

254
00:06:39,770 --> 00:06:44,770
So let's go ahead and create some text. And we can set the text to say Title.

255
00:06:46,820 --> 00:06:50,150
So this is the first piece of text. In addition,

256
00:06:50,180 --> 00:06:54,020
I'm going to set the font to a tuple

257
00:06:54,050 --> 00:06:58,850
which is going to use the Arial font, and then it's going to be 40 size

258
00:06:59,060 --> 00:07:03,350
and finally I'm going to make it italic. Now,

259
00:07:03,380 --> 00:07:04,520
before we can hit run,

260
00:07:04,550 --> 00:07:09,140
we also have to specify a X and Y position for our text.

261
00:07:09,440 --> 00:07:13,190
So our image was created at 400 X, 263

262
00:07:13,190 --> 00:07:18,190
Y, our text is going to be created at 400 X and 150 Y.

263
00:07:19,700 --> 00:07:23,720
Now remember that these positions are relative to the canvas.

264
00:07:24,020 --> 00:07:27,920
So 400 makes it halfway along the width

265
00:07:28,400 --> 00:07:32,510
and then this 150 is going to make it a little bit towards the top

266
00:07:32,810 --> 00:07:36,470
so that's a good position for the title. Next,

267
00:07:36,500 --> 00:07:38,900
we're going to create another piece of text

268
00:07:39,020 --> 00:07:44,020
and this piece of text is going to be the actual word, so that the French word or

269
00:07:44,210 --> 00:07:45,043
the English word.

270
00:07:45,530 --> 00:07:49,580
So we're going to set it at the center of our canvass

271
00:07:49,910 --> 00:07:52,100
so exactly centered on the image,

272
00:07:52,520 --> 00:07:57,520
and then we're going to say that the text is going to be equal to the word for

273
00:07:59,270 --> 00:08:01,820
now anyways. Later on we'll probably change it.

274
00:08:02,240 --> 00:08:05,420
And then the font is again also Arial.

275
00:08:06,680 --> 00:08:11,680
And this time it's going to be a bit bigger and it's also going to be bold. So

276
00:08:12,110 --> 00:08:16,130
there we have it. We've got our flashcard pretty much all laid out.

277
00:08:16,790 --> 00:08:21,080
Now we just have to add our two buttons. Below our canvas

278
00:08:21,110 --> 00:08:25,520
I'm going to create two buttons. First, there's going to be the unknown button.

279
00:08:26,780 --> 00:08:29,750
This is going to be the X which the user presses

280
00:08:29,780 --> 00:08:32,360
because they don't know what's on the back of the flashcard.

281
00:08:33,020 --> 00:08:37,250
And this button is going to have a special attribute though,

282
00:08:37,610 --> 00:08:42,230
the image attribute and that image is going to be a photo image.

283
00:08:42,559 --> 00:08:45,290
So let's put this as the cross_image,

284
00:08:45,890 --> 00:08:47,870
and it's going to be a photo image

285
00:08:48,080 --> 00:08:50,960
which is going to be created from the images folder

286
00:08:51,440 --> 00:08:54,650
and it is the wrong.png.

287
00:08:55,830 --> 00:09:00,090
And that image is what's going to go inside our unknown button.

288
00:09:00,840 --> 00:09:05,010
Let's go ahead and layout our unknown button on the grid so that it'll actually

289
00:09:05,010 --> 00:09:07,350
show up. Row is going to be 1,

290
00:09:07,350 --> 00:09:11,190
so below the canvas, and then column is going to be 0.

291
00:09:12,960 --> 00:09:16,500
So now you can see our X button show up here.

292
00:09:17,340 --> 00:09:22,050
Next, I'm going to create the check_image. This is going to be the checkmark.

293
00:09:22,650 --> 00:09:24,480
And in this case, its again,

294
00:09:24,510 --> 00:09:29,010
a photo image created from a file

295
00:09:29,010 --> 00:09:33,450
which is in our images/right.png.

296
00:09:34,110 --> 00:09:38,100
And of course, you can always just double click on each of these images and view

297
00:09:38,100 --> 00:09:41,190
them and just make sure that they are the ones that you want to use.

298
00:09:42,480 --> 00:09:46,020
So once we've got our image, we can create our known_button.

299
00:09:46,800 --> 00:09:51,800
And this is going to now have a image attribute set to this check image.

300
00:09:56,550 --> 00:10:01,380
And then we can place our known_button onto the grid as well.

301
00:10:01,620 --> 00:10:06,000
So row = 1 and column is going to be equal to 1 as well.

302
00:10:06,300 --> 00:10:08,550
So its on the same row as the unknown button,

303
00:10:08,850 --> 00:10:12,630
but it's just shifted a little bit to the right. Now at this point

304
00:10:12,630 --> 00:10:13,710
if I run the code,

305
00:10:13,740 --> 00:10:18,740
you can see that our check button is all the way on the right while our canvas

306
00:10:19,350 --> 00:10:22,650
and our cross button are in the left most column.

307
00:10:23,130 --> 00:10:25,980
So you know what you need to do. You have to change

308
00:10:26,250 --> 00:10:31,200
this canvas grid to have a column span of 2.

309
00:10:31,590 --> 00:10:35,160
So it starts at column 0 but ends at column 1.

310
00:10:36,450 --> 00:10:37,620
Now when you run it,

311
00:10:37,620 --> 00:10:42,390
you can see it's nicely placed onto the screen in the way that we want it to

312
00:10:42,390 --> 00:10:46,680
look. Now, if you want to get rid of the border around the buttons,

313
00:10:47,040 --> 00:10:49,560
then the easiest way is to again,

314
00:10:49,590 --> 00:10:52,440
change the highlight thickness to 0.

315
00:10:52,920 --> 00:10:56,520
So lets add that here and here.

316
00:10:57,900 --> 00:10:59,640
But both on Mac and Windows,

317
00:10:59,690 --> 00:11:04,690
you'll see this fine line around the button and it's not easy to get rid of it

318
00:11:04,920 --> 00:11:09,720
because it's their so that you can click on the button and you can see this

319
00:11:09,750 --> 00:11:11,190
visible depression.

320
00:11:11,580 --> 00:11:16,080
That way it lets the user know that the button press was actually successful.

321
00:11:17,280 --> 00:11:18,300
But that's fine.

322
00:11:18,720 --> 00:11:23,720
And we're now pretty much done with our user interface. In the next step

323
00:11:24,360 --> 00:11:28,830
we're going to get rid of these placeholders, title and word, and we're going to

324
00:11:28,830 --> 00:11:33,600
start picking out the words from this french_words.csv,

325
00:11:33,900 --> 00:11:38,900
picking out random records like this or this so that we can put the French word

326
00:11:39,750 --> 00:11:43,620
into right here and change the title to say French.

327
00:11:44,310 --> 00:11:48,600
For all of that and more, head over to the next lesson and see the instructions.


328
00:00:00,630 --> 00:00:02,430
Now that we've created the UI,

329
00:00:02,640 --> 00:00:07,640
the next step or step 2 was to try and get the buttons to start working so

330
00:00:09,750 --> 00:00:12,300
that when we press the cross or the tick button,

331
00:00:12,570 --> 00:00:16,650
we get a new French word being shown in the middle here,

332
00:00:16,950 --> 00:00:21,750
and the title switches to the word of French. So how do we do this?

333
00:00:22,050 --> 00:00:24,930
Well, firstly, for both of these buttons

334
00:00:24,960 --> 00:00:27,090
the unknown and the known button,

335
00:00:27,450 --> 00:00:32,450
we're going to add a command. And remember the command links to a particular

336
00:00:32,850 --> 00:00:35,220
function that is going to be called.

337
00:00:35,340 --> 00:00:40,340
So we'll call that next_card and we'll add that to both the known and the

338
00:00:41,520 --> 00:00:42,510
unknown buttons.

339
00:00:44,670 --> 00:00:47,430
Now that we've got next_card added here,

340
00:00:47,520 --> 00:00:51,540
now let's go ahead and create this function next_card.

341
00:00:52,530 --> 00:00:55,770
What exactly is this function going to do? Well,

342
00:00:55,800 --> 00:01:00,630
it's going to take the words from the french_words.csv

343
00:01:01,110 --> 00:01:06,110
and it's going to get hold of some of these words and their translations.

344
00:01:06,840 --> 00:01:07,680
So it basically,

345
00:01:07,890 --> 00:01:11,760
you can imagine these as single rows that we want to get hold of.

346
00:01:12,690 --> 00:01:14,610
Now, what we need to do first though

347
00:01:14,610 --> 00:01:19,610
is we need to use pandas in order to read from that CSV.

348
00:01:20,430 --> 00:01:25,430
So we're going to first import pandas and it should already be installed in

349
00:01:25,920 --> 00:01:28,950
your project. If not, you'll see a red light bulb

350
00:01:29,010 --> 00:01:32,400
and then you can just click on it and then install that module.

351
00:01:33,000 --> 00:01:34,890
Once we've got pandas enabled though,

352
00:01:34,920 --> 00:01:39,920
we're going to use panders to read from a CSV and the CSV is our french_words.csv

353
00:01:43,110 --> 00:01:45,810
from the data folder.

354
00:01:46,590 --> 00:01:49,650
Now we're going to set this as equal to the data.

355
00:01:50,070 --> 00:01:54,240
So this is now going to be a data frame. And in fact,

356
00:01:54,240 --> 00:01:55,860
if I go ahead and print it

357
00:01:55,880 --> 00:01:56,713
now

358
00:02:00,410 --> 00:02:05,410
you can see that pandas will nicely format our table with the column headings

359
00:02:07,010 --> 00:02:09,050
and also record numbers

360
00:02:09,380 --> 00:02:14,120
and each of these rows are basically the pieces of data that we're interested

361
00:02:14,120 --> 00:02:16,910
in. Now that we've got a data frame,

362
00:02:17,030 --> 00:02:20,750
we can convert that data frame into a dictionary.

363
00:02:21,290 --> 00:02:25,310
Let's go ahead and create a dictionary which we'll call out to_learn,

364
00:02:25,580 --> 00:02:27,710
so that's the word that we need to learn,

365
00:02:28,220 --> 00:02:32,630
and this is going to be a dictionary that's created from this data

366
00:02:32,900 --> 00:02:37,430
from this french_words.csv. But notice how at the moment,

367
00:02:37,430 --> 00:02:41,570
if we just use the default method of creating a dictionary,

368
00:02:42,170 --> 00:02:46,430
what our to_learn is going to look like is like this.

369
00:02:46,670 --> 00:02:49,580
We've got French and then inside

370
00:02:49,610 --> 00:02:54,140
we've got all of the French words and then we've got a key later on called

371
00:02:54,260 --> 00:02:58,010
English and all of the corresponding English words.

372
00:02:58,490 --> 00:03:03,250
Now, that's what we want. Instead, we want to change one of the parameters

373
00:03:03,310 --> 00:03:04,480
which is orient,

374
00:03:04,810 --> 00:03:09,810
so how do we want to orient the table to create this dictionary? Now in the hints

375
00:03:11,200 --> 00:03:14,620
for step 2, I already showed you that you could use this

376
00:03:14,620 --> 00:03:19,620
orient set to records and this way it'll give you each column's values as a

377
00:03:21,670 --> 00:03:24,490
list. Let me show you what that looks like.

378
00:03:24,820 --> 00:03:27,640
So let's change this parameter orient,

379
00:03:27,970 --> 00:03:30,820
and we'll set it to equal the string records.

380
00:03:31,870 --> 00:03:33,700
Remember that there's an 's' at the end.

381
00:03:34,720 --> 00:03:39,040
And now we can compare the previous version of the dictionary

382
00:03:39,040 --> 00:03:43,330
that's generated from the data to the new version.

383
00:03:43,360 --> 00:03:48,070
So let me run the code again and you can see now we've basically got a list of

384
00:03:48,070 --> 00:03:52,390
dictionaries and each dictionary has a key, French,

385
00:03:52,750 --> 00:03:54,880
the French word, a key English,

386
00:03:54,940 --> 00:03:59,830
and then the English word and so on and so forth. This is really,

387
00:03:59,830 --> 00:04:04,830
really useful for us because we can basically pick a random entry from this list

388
00:04:05,800 --> 00:04:10,390
and we'll be able to tap into the French value and the English value later on

389
00:04:10,390 --> 00:04:15,190
when we flip our cards. That is our to_learn dictionary done.

390
00:04:15,760 --> 00:04:18,040
So when the next_card function gets called,

391
00:04:18,519 --> 00:04:23,320
then we're going to need to pick out some data from this dictionary and the way

392
00:04:23,320 --> 00:04:25,690
that we're gonna pick it out is randomly.

393
00:04:25,720 --> 00:04:30,640
So we're going to import the random module and we're going to use random.

394
00:04:30,640 --> 00:04:35,640
choice in order to pick out a random item from this list of words to learn.

395
00:04:38,650 --> 00:04:43,120
And once we've got a random choice which we'll call current_card,

396
00:04:44,200 --> 00:04:49,200
then we can get hold of the data from this current_card by saying current_card

397
00:04:51,070 --> 00:04:55,510
[French]. Remember that in this french_words.csv

398
00:04:55,510 --> 00:04:58,540
we've got a capital F and a capital E.

399
00:04:58,570 --> 00:05:01,450
So our keys must match that exactly.

400
00:05:02,140 --> 00:05:04,660
So let's go ahead and print this

401
00:05:04,960 --> 00:05:09,960
and you can see now that when I press on one of these buttons,

402
00:05:11,200 --> 00:05:13,060
either the cross or the tick,

403
00:05:13,300 --> 00:05:18,300
it's going to pick out a random French word from my list of words in this

404
00:05:18,550 --> 00:05:22,390
french_words.csv. So now instead of printing it,

405
00:05:22,810 --> 00:05:26,950
let's go ahead and put it into these pieces of text on our canvas.

406
00:05:27,670 --> 00:05:28,690
In order to do that,

407
00:05:28,750 --> 00:05:33,750
I'm going to create a variable called card_title to hold on to the title and

408
00:05:37,300 --> 00:05:41,680
the card_word to hold on to the word text.

409
00:05:42,340 --> 00:05:47,020
And now I can go ahead and tap into my canvas and say

410
00:05:47,620 --> 00:05:52,390
itemconfig and the item that we want to configure is firstly

411
00:05:52,420 --> 00:05:53,830
our card_title

412
00:05:54,460 --> 00:05:59,460
and the thing we want to configure about it is to change the text to say French.

413
00:06:00,680 --> 00:06:04,670
So that's the title remember, which is the part that's up here.

414
00:06:05,360 --> 00:06:09,650
And then we're going to do the same thing using canvas.itemconfig

415
00:06:09,980 --> 00:06:12,830
but this time we're going to configure the card_word,

416
00:06:13,820 --> 00:06:17,660
and this is going to be set to exactly what we printed before,

417
00:06:17,900 --> 00:06:22,900
which is the random card that was picked out and the value under the key French.

418
00:06:25,130 --> 00:06:27,620
So now when I hit run again,

419
00:06:27,830 --> 00:06:30,440
you can see that when I press either of these buttons,

420
00:06:30,770 --> 00:06:34,610
I'm going to get a random French word showing up right here.

421
00:06:36,020 --> 00:06:39,050
But notice how when I first run the app

422
00:06:39,110 --> 00:06:43,850
you can see that it still has the placeholder title and word showing up.

423
00:06:44,330 --> 00:06:47,930
Instead, we want it to show the next card.

424
00:06:48,290 --> 00:06:52,220
So we have to call this function once we've created all of our UI

425
00:06:52,490 --> 00:06:54,410
but before we get to our main loop.

426
00:06:54,890 --> 00:06:59,300
So we'll call our next card. And this way,

427
00:06:59,300 --> 00:07:03,200
once we've created all of our images and everything else,

428
00:07:03,440 --> 00:07:05,540
then we can generate the next card,

429
00:07:05,570 --> 00:07:10,310
get the data and put it into the card title and card word. So in fact,

430
00:07:10,310 --> 00:07:11,000
if you want to,

431
00:07:11,000 --> 00:07:15,020
you can actually delete these two pieces of text because they won't actually do

432
00:07:15,020 --> 00:07:19,670
anything at the moment. And now as soon as we hit run,

433
00:07:19,700 --> 00:07:23,660
you can see the first thing we see is already a French word

434
00:07:23,810 --> 00:07:27,860
and it will keep going through all of the words that we have in our CSV.

435
00:07:28,850 --> 00:07:32,540
There you have it. We've now managed to read from the CSV,

436
00:07:32,930 --> 00:07:37,930
get a dictionary of all the records in the CSV and to randomly get the French

437
00:07:38,300 --> 00:07:43,010
word showing up in our flashcard. Our flashcard currently,

438
00:07:43,010 --> 00:07:46,370
doesn't actually flash. It doesn't change, right?

439
00:07:46,640 --> 00:07:49,910
We need a way for us to be able to set some sort of a timer,

440
00:07:50,240 --> 00:07:51,740
say a 3-second timer,

441
00:07:52,040 --> 00:07:57,040
and then for our card to show us the opposite side or the backside and to show

442
00:07:57,650 --> 00:08:00,230
us the English translation of the words.

443
00:08:00,890 --> 00:08:03,260
That is what we're going to tackle on the next lesson.

444
00:08:03,500 --> 00:08:06,920
So head over to step 3 and have a read of the instructions.


445
00:00:00,450 --> 00:00:03,750
Now that we've got our words showing up in French,

446
00:00:04,110 --> 00:00:09,110
it's time to see the other side of the card and see the English equivalent so

447
00:00:09,240 --> 00:00:12,420
that we can check our knowledge. To do this

448
00:00:12,480 --> 00:00:17,480
we're going to have to implement some sort of way of changing this card after a

449
00:00:18,660 --> 00:00:22,110
set amount of time. So we're going to flip the card

450
00:00:22,290 --> 00:00:25,110
after three seconds are up. To do that

451
00:00:25,170 --> 00:00:28,470
we're going to use the window.after method.

452
00:00:29,040 --> 00:00:32,310
Right after here where we've created a window,

453
00:00:32,610 --> 00:00:34,620
we're going to say window.after.

454
00:00:35,130 --> 00:00:38,340
And then we can specify the amount of time in milliseconds.

455
00:00:38,400 --> 00:00:41,790
So I'm going to say three seconds or 3000 milliseconds.

456
00:00:42,450 --> 00:00:45,360
And then the function that we're going to call is a function

457
00:00:45,360 --> 00:00:49,530
that's going to be called flip_card. And if we want that to work,

458
00:00:49,560 --> 00:00:52,680
then we're going to have to create it. So I'm going to create right here,

459
00:00:52,710 --> 00:00:53,543
just above.

460
00:00:53,850 --> 00:00:58,850
So I'll call it flip_card and this function is going to take care of changing the

461
00:00:59,520 --> 00:01:03,630
card to show the English word for the current card,

462
00:01:04,050 --> 00:01:08,550
and also going to change the image from the card_front to

463
00:01:08,550 --> 00:01:12,930
the card_back, and also we're going to change the color of the text as well.

464
00:01:13,620 --> 00:01:14,790
In our flip card,

465
00:01:14,820 --> 00:01:19,350
we're going to get hold of the canvas and we're going to first item.config

466
00:01:19,380 --> 00:01:24,270
the card_ title. So we're going to change the card_title to,

467
00:01:24,270 --> 00:01:26,790
instead of saying French, we're going to say, well,

468
00:01:26,790 --> 00:01:29,340
this is now the English translation,

469
00:01:30,030 --> 00:01:33,180
and then we're going to config the card word,

470
00:01:33,750 --> 00:01:36,960
and this is going to be still from the current card,

471
00:01:37,260 --> 00:01:40,770
but we want to get ahold of the value under the key English instead.

472
00:01:41,400 --> 00:01:46,320
Now at the moment, this current card is locked up inside next_card.

473
00:01:46,590 --> 00:01:51,590
So we can't actually get hold of it without creating a new random choice.

474
00:01:52,650 --> 00:01:56,340
So what we can do is we can create our current card

475
00:01:58,680 --> 00:02:01,680
and we can set it to a empty dictionary.

476
00:02:02,280 --> 00:02:07,280
And then we can change this to a global and tap into that current card to modify

477
00:02:08,880 --> 00:02:13,880
it and save this random choice from our list of French and English pairs.

478
00:02:15,720 --> 00:02:17,760
So once we've got that inside there,

479
00:02:17,760 --> 00:02:22,500
then we can tap into it inside flip_card and we can say current card

480
00:02:22,710 --> 00:02:26,370
get hold of the value under the English key.

481
00:02:27,270 --> 00:02:32,220
And that way we update both of our texts. So right now if I hit run,

482
00:02:32,250 --> 00:02:35,310
you can see that immediately after three seconds

483
00:02:35,640 --> 00:02:40,110
we switched to the opposite side and we have our English and the English

484
00:02:40,140 --> 00:02:44,970
equivalent of the same word showing up. So for example,

485
00:02:44,970 --> 00:02:47,940
in French matin, in English means morning.

486
00:02:48,120 --> 00:02:51,900
So that's how we can verify that we actually know the meaning of the card.

487
00:02:52,710 --> 00:02:57,450
In addition to changing the words, I'm also going to change the image.

488
00:02:57,750 --> 00:03:01,000
So notice how we saved the words with a variable.

489
00:03:01,240 --> 00:03:04,330
We can do the same thing for this create image method.

490
00:03:04,810 --> 00:03:09,810
We can say the card_background is equal to canvas create image.

491
00:03:10,390 --> 00:03:14,140
And in addition to creating the card front image,

492
00:03:14,350 --> 00:03:17,170
we can also create the card back image.

493
00:03:17,800 --> 00:03:20,350
Now, you have to be really careful here

494
00:03:20,380 --> 00:03:23,440
because if you create this card back image

495
00:03:23,740 --> 00:03:27,310
which is a photo image created from file,

496
00:03:27,730 --> 00:03:31,960
if you create it inside one of these functions, by the end of the function

497
00:03:31,960 --> 00:03:35,680
call, that reference to that particular image will be gone.

498
00:03:35,980 --> 00:03:40,980
And it won't work if you create this photo image inside flipcard and try to set

499
00:03:41,380 --> 00:03:45,940
it inside this method. So you have to create it outside of any of the functions.

500
00:03:46,630 --> 00:03:51,630
So let's change the file to images/card_back.png

501
00:03:53,830 --> 00:03:58,300
and now we're going to get our canvas to again,

502
00:03:58,300 --> 00:03:59,890
call itemconfig.

503
00:04:00,400 --> 00:04:03,310
And this time we're configuring the card_background.

504
00:04:04,000 --> 00:04:08,350
And the attribute that we want to configure is the image property.

505
00:04:08,860 --> 00:04:12,670
So we're going to change that to the card_back_img

506
00:04:12,700 --> 00:04:14,770
which we created right here.

507
00:04:15,910 --> 00:04:17,769
So now let's just check that again.

508
00:04:18,250 --> 00:04:21,490
Let's wait three seconds and then it's changed to

509
00:04:21,519 --> 00:04:24,370
the back of the card. On the back of the card

510
00:04:24,400 --> 00:04:28,840
we want these two pieces of text to actually have a different color.

511
00:04:28,870 --> 00:04:32,380
We want it to be white, just so that it stands out from the background.

512
00:04:33,040 --> 00:04:37,000
And to do that, we can add it along with our item config.

513
00:04:37,300 --> 00:04:39,100
Not only are we changing the text,

514
00:04:39,370 --> 00:04:43,090
but also changing the fill of the text to white.

515
00:04:44,310 --> 00:04:45,143
Okay.

516
00:04:47,550 --> 00:04:50,670
And now when our card flips over,

517
00:04:50,940 --> 00:04:54,390
you can see its a green card with a white text.

518
00:04:55,770 --> 00:04:56,100
Now,

519
00:04:56,100 --> 00:05:01,100
one of the things we have to do is every time we click on one of these buttons,

520
00:05:01,980 --> 00:05:05,040
it has the flip back to the front of the card, right?

521
00:05:05,040 --> 00:05:09,330
That means changing the text color and changing that background image.

522
00:05:09,840 --> 00:05:13,200
So that happens when we go to next card.

523
00:05:13,680 --> 00:05:17,730
So in addition to configuring the text and the words,

524
00:05:18,000 --> 00:05:23,000
we also again have to itemconfig the card_background so that we can change the

525
00:05:23,400 --> 00:05:28,170
image back to the card front image.

526
00:05:28,890 --> 00:05:33,540
In addition, we have to change these text colors to have a different fill,

527
00:05:33,780 --> 00:05:36,360
so we're going to change it back to black.

528
00:05:39,450 --> 00:05:39,750
Right.

529
00:05:39,750 --> 00:05:43,650
This way, when the card flips, it goes to green,

530
00:05:43,980 --> 00:05:47,040
white on green. And then when we go to the front of the card,

531
00:05:47,130 --> 00:05:49,200
it goes to black on white.

532
00:05:50,670 --> 00:05:53,490
Now notice how once we go to the next card,

533
00:05:53,790 --> 00:05:58,790
that card flipping mechanism has gone because we only ever call this window

534
00:05:59,150 --> 00:06:01,700
after the first time we create the window.

535
00:06:02,270 --> 00:06:05,900
So we actually need this to happen a few times. In fact,

536
00:06:05,900 --> 00:06:09,590
we need it to happen every single time we go to the next card.

537
00:06:10,070 --> 00:06:12,950
So after we've configured all the things on our card,

538
00:06:13,010 --> 00:06:16,760
we're gonna call a window.after, three seconds, flipcard.

539
00:06:17,240 --> 00:06:21,710
So this way, even if we go to the next card and we wait three seconds,

540
00:06:21,830 --> 00:06:23,990
it again goes to the back.

541
00:06:24,950 --> 00:06:29,570
Now one of the bugs you might have encountered is if you clicked this button

542
00:06:29,600 --> 00:06:33,440
many times and you go through lots of different words,

543
00:06:33,740 --> 00:06:37,130
you see immediately, that card actually flipped.

544
00:06:37,700 --> 00:06:41,690
And it's because that window.after three seconds is counting down in the

545
00:06:41,690 --> 00:06:45,350
background, waiting, waiting, waiting until three seconds

546
00:06:45,590 --> 00:06:47,300
at which point it's going to flip the card.

547
00:06:47,690 --> 00:06:52,310
It doesn't care that you've actually just gone onto a new card and you want to

548
00:06:52,310 --> 00:06:56,900
wait again, three seconds. In order to get this to work,

549
00:06:57,080 --> 00:07:02,080
we actually have to give this line of code a variable so that we'll call it the

550
00:07:02,720 --> 00:07:06,710
flip_timer. And this is now a global

551
00:07:06,890 --> 00:07:11,890
which we can tap into and we can add it after a comma over here,

552
00:07:13,430 --> 00:07:15,890
flip_timer. Alternatively,

553
00:07:15,890 --> 00:07:19,730
you can also go onto a new line and say global flip_timer.

554
00:07:20,060 --> 00:07:23,450
It doesn't really make a difference other than the fact that this probably takes

555
00:07:23,690 --> 00:07:27,920
less lines of code. Now, once we've got access to our flip_timer,

556
00:07:28,190 --> 00:07:31,580
we can say that every time we go to a new card,

557
00:07:32,180 --> 00:07:36,350
when we click on one of these buttons, we're going to invalidate this timer.

558
00:07:36,890 --> 00:07:39,140
So we can say window.after_

559
00:07:39,170 --> 00:07:43,550
cancel and then pass in the ID of our flip_timer.

560
00:07:44,300 --> 00:07:46,670
And then after we've set up this card,

561
00:07:46,760 --> 00:07:51,760
we can set up a new flip_timer so that it waits for again three seconds.

562
00:07:53,270 --> 00:07:57,260
And now once I've added that bit of code, it should fix this bug.

563
00:07:57,650 --> 00:08:02,650
So now whenever I keep going or I press the check or the crossmark,

564
00:08:03,170 --> 00:08:04,040
it doesn't really matter.

565
00:08:04,040 --> 00:08:09,040
It's not going to flip until I land on a card and wait for three seconds

566
00:08:09,620 --> 00:08:13,760
before it flips. There you have it. We've got our card

567
00:08:13,790 --> 00:08:16,940
flipping technology added to our code.

568
00:08:17,660 --> 00:08:22,430
Now all that's left is to get rid of the cards that the user says

569
00:08:22,430 --> 00:08:23,263
they know

570
00:08:23,570 --> 00:08:28,570
and to create a new CSV that is going to hold all the cards from this to_learn

571
00:08:30,440 --> 00:08:34,700
dictionary and to remove the cards that the user says they know.

572
00:08:35,240 --> 00:08:38,480
And then that way, the next time we run our app

573
00:08:38,720 --> 00:08:43,610
it will remember which words we've learned and which words we haven't so that we

574
00:08:43,610 --> 00:08:47,120
can load up only the words we have yet to learn.

575
00:08:47,870 --> 00:08:52,370
So for that, head over to the next lesson where we've got the final step of the

576
00:08:52,370 --> 00:08:53,510
flashcard project.


577
00:00:00,300 --> 00:00:04,680
We are now within sight of the finish line. We're onto the last step.

578
00:00:04,710 --> 00:00:09,240
So this is the solution for step 4. And in step 4

579
00:00:09,270 --> 00:00:14,270
we want to be able to improve our program so that the words where the user

580
00:00:14,910 --> 00:00:18,780
clicks the checkmark to means they already know that word.

581
00:00:18,810 --> 00:00:23,040
They know what it means and they don't wanna see it again in this list.

582
00:00:23,580 --> 00:00:28,580
So what we want to be able to do is to remove the words that the user knows from

583
00:00:29,010 --> 00:00:33,510
this dictionary of words to_learn. And to do that,

584
00:00:33,630 --> 00:00:38,610
we have to change this command. When the user clicks on the unknown button,

585
00:00:38,880 --> 00:00:41,340
we're going to simply just give them the next card,

586
00:00:41,370 --> 00:00:44,700
which is a random word from the list of words.

587
00:00:45,210 --> 00:00:47,850
But when they use it clicks on the known button,

588
00:00:48,000 --> 00:00:52,440
instead of clicking on next card, we're going to call a different function

589
00:00:52,710 --> 00:00:56,610
which I'm going to call is_known. Now is_known

590
00:00:56,640 --> 00:00:58,050
is going to be a function

591
00:00:58,110 --> 00:01:03,110
that's going to remove the current card from the cards that are in the list of

592
00:01:06,300 --> 00:01:07,170
words to learn.

593
00:01:07,830 --> 00:01:12,120
So what we're going to do is we're going to get hold of our list to learn,

594
00:01:13,470 --> 00:01:17,070
and then we're going to call the remove method.

595
00:01:17,610 --> 00:01:20,460
And then we're going to remove a particular element from it.

596
00:01:20,880 --> 00:01:24,240
And that happens to be the current card.

597
00:01:25,410 --> 00:01:28,770
So remember, the current card is a dictionary

598
00:01:29,040 --> 00:01:33,480
which we got by randomly choosing from our list to learn.

599
00:01:34,080 --> 00:01:36,990
So now, when the user says is_known,

600
00:01:37,320 --> 00:01:41,670
then the current card is going to be removed from the list of words to learn.

601
00:01:42,120 --> 00:01:43,560
And then after we've done that,

602
00:01:43,920 --> 00:01:48,920
then we're going to call next card from this particular method. At the moment,

603
00:01:49,440 --> 00:01:53,250
if we run this code and I just keep clicking the check mark,

604
00:01:53,670 --> 00:01:58,670
eventually, we're going to have a very small list of words that we're going to

605
00:01:59,370 --> 00:02:01,260
pick from. In fact,

606
00:02:01,290 --> 00:02:06,290
if I go ahead and print the length of my list, to_learn,

607
00:02:08,190 --> 00:02:13,190
you can see that the first time I run this code and I click on the is_known

608
00:02:14,640 --> 00:02:19,020
button, we have a hundred words. But if I keep clicking on this,

609
00:02:19,050 --> 00:02:21,090
then you'll see that every single time,

610
00:02:21,090 --> 00:02:25,050
I'm just reducing that list because I'm saying,

611
00:02:25,080 --> 00:02:27,660
I already know what this word compris means

612
00:02:28,110 --> 00:02:31,950
and that word is now taken out of my list of words to learn.

613
00:02:32,250 --> 00:02:36,630
So now that list is smaller by one entry.

614
00:02:37,530 --> 00:02:41,670
Now this works right now, but if I rerun the app,

615
00:02:41,700 --> 00:02:45,540
then you can see it goes back right to the beginning

616
00:02:45,750 --> 00:02:47,550
and it has a hundred words again.

617
00:02:48,150 --> 00:02:52,950
So in order to keep hold of the words that I still need to learn,

618
00:02:53,280 --> 00:02:57,540
I have to save this list to a new permanent file

619
00:02:57,840 --> 00:03:01,000
each time the user clicks on this is_known button.

620
00:03:01,780 --> 00:03:06,220
So the way that I'm going to do that is by using pandas again.

621
00:03:06,790 --> 00:03:10,900
I'm going to use pandas to create a new data frame.

622
00:03:11,530 --> 00:03:15,970
And that data frame is going to be created from our list to_learn.

623
00:03:17,230 --> 00:03:19,540
Now, I'm going to save this as our data,

624
00:03:20,170 --> 00:03:25,170
and then I can say data.to_csv in order to save it as a CSV file.

625
00:03:26,350 --> 00:03:31,350
So I'll call this words_to_learn.csv.

626
00:03:32,860 --> 00:03:37,860
So now, if I press my check mark

627
00:03:38,980 --> 00:03:41,740
and I take a look within my files,

628
00:03:41,770 --> 00:03:44,980
you can see that words_to_learn.csv is created.

629
00:03:45,490 --> 00:03:50,380
And at the moment it's got 89 entries. But if I keep clicking this a few times,

630
00:03:50,620 --> 00:03:52,570
it's going to reduce each time.

631
00:03:52,960 --> 00:03:57,250
So this is now a permanent storage of all the words that I have yet to learn.

632
00:03:57,940 --> 00:04:01,510
But I don't really want it randomly in the middle of my project.

633
00:04:01,750 --> 00:04:05,170
I want it to be saved alongside my french_words.csv.

634
00:04:05,740 --> 00:04:08,200
So I have to change this to a file path

635
00:04:08,230 --> 00:04:11,110
which is going to be data/words_to_learn.csv.

636
00:04:11,620 --> 00:04:16,620
So let's go ahead and delete this file and do refactor.

637
00:04:17,110 --> 00:04:18,760
And then we're going to run this again.

638
00:04:18,880 --> 00:04:22,630
And next time you'll see that it appears in the right place.

639
00:04:23,530 --> 00:04:26,590
Now, in addition to saving it to CSV,

640
00:04:26,620 --> 00:04:31,620
we also have to read from that CSV because instead of using the words from our

641
00:04:32,680 --> 00:04:35,860
original list which is our french_words.csv,

642
00:04:36,400 --> 00:04:41,400
I actually want to be able to read from my words_to_learn.csv instead,

643
00:04:42,100 --> 00:04:45,460
because that way, every single time I rerun the app,

644
00:04:45,760 --> 00:04:49,570
it's always going to give me all the words that I've yet to learn.

645
00:04:50,020 --> 00:04:53,320
So currently we're on 87. If I run this again,

646
00:04:53,560 --> 00:04:55,840
you can see that the first time I click on this,

647
00:04:55,930 --> 00:04:59,560
it's going to go to 86 instead of going back to 100.

648
00:05:00,220 --> 00:05:01,750
But there is a problem here though

649
00:05:02,080 --> 00:05:07,080
because if I delete this file, words_to_learn.csv, and I go ahead and run this, the first

650
00:05:09,250 --> 00:05:13,540
time this runs it's going to crash and we have that familiar file

651
00:05:13,540 --> 00:05:16,810
not found error. So we know how to deal with that.

652
00:05:16,840 --> 00:05:21,280
We need to catch this exception. The exception occurs right here.

653
00:05:21,940 --> 00:05:26,940
It happens when we try to get hold of this piece of data

654
00:05:27,640 --> 00:05:32,290
which may or may not exist. So if it does not exist,

655
00:05:32,470 --> 00:05:36,820
so we're going to catch this except file not found error. Well,

656
00:05:36,820 --> 00:05:40,390
in that case, we're going to be using the original data

657
00:05:41,050 --> 00:05:45,970
which comes from the french_words.csv. So we'll say pandas.

658
00:05:46,000 --> 00:05:47,050
read_csv

659
00:05:47,140 --> 00:05:52,090
and then we're going to read this file, data/french_words.csv.

660
00:05:52,660 --> 00:05:56,890
So this is always going to be there because it's preloaded with our project.

661
00:05:57,500 --> 00:06:01,070
But if we do manage to find our words_to_learn.csv,

662
00:06:01,130 --> 00:06:05,810
then that means this program has been run before and we've removed some of the

663
00:06:05,810 --> 00:06:10,610
words we already know. So we can catch that with an else statement and we can say,

664
00:06:10,610 --> 00:06:11,900
well, in this case,

665
00:06:12,260 --> 00:06:16,130
we're going to set a global variable called to_learn

666
00:06:16,310 --> 00:06:18,770
which starts out as an empty dictionary.

667
00:06:19,250 --> 00:06:23,780
And we set it to the data that comes from this CSV.

668
00:06:24,620 --> 00:06:27,620
However, if that file was not found,

669
00:06:27,950 --> 00:06:32,950
then this to_learn is going to be set to the original data.to_dict

670
00:06:34,790 --> 00:06:39,410
and we're going to orient according to records as well.

671
00:06:43,510 --> 00:06:43,660
Okay.

672
00:06:43,660 --> 00:06:47,590
Now, when we run our code, you can see we have no errors.

673
00:06:48,010 --> 00:06:49,870
And the first time that it runs,

674
00:06:49,900 --> 00:06:54,310
it's going to pick from our french_words.csv. Now,

675
00:06:54,310 --> 00:06:58,480
once I've started saying I've learned this, I've learned this,

676
00:06:58,480 --> 00:07:03,130
I've learned this, then it's going to generate a words_to_learn.csv.

677
00:07:03,580 --> 00:07:05,560
And the next time I run this code,

678
00:07:05,860 --> 00:07:10,860
it's gonna start using that words_to_learn.csv and start where I left off.

679
00:07:11,800 --> 00:07:15,430
Now, there is one slight weird bug to this.

680
00:07:15,820 --> 00:07:19,060
When you take a look at the words_to_learn.csv,

681
00:07:19,750 --> 00:07:23,590
it adds the record number to the first column

682
00:07:23,950 --> 00:07:27,850
every single time I run the code. So if I run this code again,

683
00:07:28,210 --> 00:07:31,960
you can see now I have three columns of all of the records.

684
00:07:32,500 --> 00:07:37,330
So basically when we read from this particular CSV,

685
00:07:37,780 --> 00:07:42,580
we generate a data frame. And when I read from that data frame,

686
00:07:42,940 --> 00:07:47,800
so let's delete this and run our code again,

687
00:07:49,090 --> 00:07:53,860
you can see that pandas is automatically added in these record numbers.

688
00:07:54,280 --> 00:07:59,280
So that gets then added back into our words_to_learn.csv when it saves it into

689
00:08:02,860 --> 00:08:06,790
the file. If we want to get rid of these record numbers,

690
00:08:07,000 --> 00:08:10,330
all we have to do is when we save it to the CSV,

691
00:08:10,870 --> 00:08:15,870
we can set a property called index to false. This way

692
00:08:16,150 --> 00:08:20,800
it just doesn't add the index numbers to our newly created list

693
00:08:21,160 --> 00:08:22,990
and now if I rerun this code,

694
00:08:23,440 --> 00:08:26,260
you can see that our words_to_learn.csv

695
00:08:26,560 --> 00:08:31,560
doesn't actually include an index. It only includes the actual records or

696
00:08:31,660 --> 00:08:34,480
the actual words and their English translations.

697
00:08:36,700 --> 00:08:37,059
That's

698
00:08:37,059 --> 00:08:41,770
basically it. That's all the solutions to our capstone project.

699
00:08:42,309 --> 00:08:47,140
And you've now built a fully fleshed flashcard that you can use to learn

700
00:08:47,140 --> 00:08:48,160
languages.

701
00:08:48,190 --> 00:08:52,370
So you could have the front with whatever language you want, and the back with

702
00:08:52,440 --> 00:08:56,790
English translations, or you can use it to learn Programming facts.

703
00:08:56,790 --> 00:09:01,500
You could have the front with a Programming word and the back as the meaning of

704
00:09:01,500 --> 00:09:02,520
the Programming word.

705
00:09:02,780 --> 00:09:05,540
You could use it to study History or Geography.

706
00:09:06,050 --> 00:09:10,520
And this program is going to help you manage all the things that you don't

707
00:09:10,520 --> 00:09:15,520
remember and keep showing it to you until you do. Have fun modifying this

708
00:09:16,520 --> 00:09:20,300
flashcard app and I hope it will be helpful in your studies as well.

709
00:09:21,170 --> 00:09:24,080
If you've built something particularly interesting, again,

710
00:09:24,140 --> 00:09:28,370
be sure to share with us in the Q/A so that we can all admire and

711
00:09:28,370 --> 00:09:30,350
congratulate you on your hard work.


