1
00:00:00,390 --> 00:00:01,150
Hey, guys.

2
00:00:01,170 --> 00:00:05,430
Welcome to day one of your 100 day journey.

3
00:00:05,730 --> 00:00:12,240
And today, we're going to learn about printing, commenting, debugging, string manipulation and variables.

4
00:00:12,240 --> 00:00:15,930
So it's chockablock full of really fun stuff.

5
00:00:15,990 --> 00:00:22,470
And by the end of today, you will have created a band name generator program.

6
00:00:22,950 --> 00:00:26,090
So this is the final project of today.

7
00:00:26,100 --> 00:00:31,980
And the idea is that let's say that your friend was starting a new band, a rock band or a classical

8
00:00:31,980 --> 00:00:36,150
band, and they're struggling to come up with a good name.

9
00:00:36,150 --> 00:00:40,770
So you come in to the rescue and send them your band name generator program.

10
00:00:40,860 --> 00:00:43,680
So it asks you for the name of the city that you grew up in.

11
00:00:43,680 --> 00:00:48,180
So mine was Bristol in the southwest of the UK.

12
00:00:48,510 --> 00:00:51,660
And then it'll ask you, what's the name of your pet?

13
00:00:52,110 --> 00:00:58,710
I had a pet rabbit when I was younger, and I am probably the least imaginative person.

14
00:00:58,950 --> 00:01:01,230
Classic programmer personality.

15
00:01:01,470 --> 00:01:02,490
So I called my rabbit.

16
00:01:03,180 --> 00:01:03,930
"Rabbit".

17
00:01:04,739 --> 00:01:08,880
So now when I hit "Enter", it's going to give me my band name.

18
00:01:08,940 --> 00:01:12,270
And it could be Bristol Rabbit.

19
00:01:12,900 --> 00:01:14,310
So that sounds pretty cool.

20
00:01:14,310 --> 00:01:16,140
That could be like a a rock band.

21
00:01:16,590 --> 00:01:17,810
So this is what you're going to make.

22
00:01:17,820 --> 00:01:23,670
And in the process, in order to create this, you're going to learn about printing, inputting, commenting,

23
00:01:23,670 --> 00:01:29,660
debugging, name errors, syntax errors, string manipulation variables, and a whole lot more.

24
00:01:29,670 --> 00:01:35,730
So if you feel like you can already achieve this and you can prove it by making this program yourself,

25
00:01:35,730 --> 00:01:39,140
then feel free to skip to the next day's lessons.

26
00:01:39,180 --> 00:01:43,980
But for most of you, even if you've started learning Python programming, there's probably still a

27
00:01:43,980 --> 00:01:47,040
lot of new things that you'll find in today's lessons.

28
00:01:47,580 --> 00:01:53,400
Now, as with all the projects that we're making in this course, you get to try it out before you make

29
00:01:53,400 --> 00:01:56,670
it so you can either go to the URL.

30
00:01:57,210 --> 00:02:02,730
Alternatively, if you don't want to type out the full URL, you can head over to the course content

31
00:02:02,730 --> 00:02:08,560
here and then click on the resources and click this link to head straight over there.

32
00:02:08,580 --> 00:02:14,580
And then once you're there, all you have to do is to click run and you'll be able to preview how the

33
00:02:14,580 --> 00:02:16,650
final product is going to work.

34
00:02:16,650 --> 00:02:22,650
So you can type in your own city and follow the instructions until you get to the end result.

35
00:02:22,890 --> 00:02:29,070
So once you're ready, head over to the next lesson and let's get started and get coding straight away.

36
00:00:00,270 --> 00:00:04,200
To begin open up your browser and head over to this URL.

37
00:00:04,230 --> 00:00:09,360
Now, if you didn't want to type all of that out and make some typos and errors and not get to the right

38
00:00:09,360 --> 00:00:13,710
place, then simply just head over to the course resources and click on the link there.

39
00:00:13,740 --> 00:00:15,870
It'll take you directly to this page.

40
00:00:16,730 --> 00:00:22,370
Now, once you've clicked on the link that takes you to the starting replit, you should see something

41
00:00:22,370 --> 00:00:23,800
that looks like this.

42
00:00:23,810 --> 00:00:29,210
And the first thing I want you to do is to go ahead and click on the "Fork" button.

43
00:00:29,660 --> 00:00:37,130
What this is going to do is it's going to create a version of that same replit that you'll see me

44
00:00:37,130 --> 00:00:41,480
working through in the videos, but in this case you'll be able to edit it.

45
00:00:41,930 --> 00:00:46,220
So if you want to save the work that you're doing, I recommend signing up to replit.

46
00:00:46,250 --> 00:00:47,360
It's completely free.

47
00:00:47,360 --> 00:00:49,460
You don't need any credit cards or anything.

48
00:00:49,460 --> 00:00:55,580
Once you've created your account on replit, it will take you to the previous page where you can now

49
00:00:55,580 --> 00:00:58,580
actually click the fork repl button.

50
00:00:58,580 --> 00:01:06,020
And what that will do is it will create a copy of what I've created and put it into your account, and

51
00:01:06,020 --> 00:01:11,810
then you'll be able to see a record of all of the code that you've written throughout the course.

52
00:01:12,050 --> 00:01:16,940
In this course you'll be coding along with me on replit and completing a whole bunch of interactive

53
00:01:16,940 --> 00:01:19,820
coding exercises in our replit classroom.

54
00:01:20,450 --> 00:01:28,100
So go ahead, pause the video, sign up to replit and make sure you've forked the starting copy of

55
00:01:28,100 --> 00:01:31,790
Day one printing start and you should be on a screen that looks like this.

56
00:01:33,610 --> 00:01:39,760
And once you're signed in, then you can actually go ahead and edit the name of the replit or add a

57
00:01:39,760 --> 00:01:45,340
brief description and you'll be able to access it later on through the My Repls folder.

58
00:01:45,580 --> 00:01:51,040
Now, once you've done that, then let's go ahead and walk through some of the different parts of replit

59
00:01:51,070 --> 00:01:52,270
that you'll be using.

60
00:01:52,690 --> 00:01:58,360
First, on the left-hand side pane here, you've got some files and you can see the current file that's

61
00:01:58,360 --> 00:02:04,930
open is this Python file here, and you can create new files or you can create new folders and later

62
00:02:04,930 --> 00:02:08,110
on will be using these features to organize our code.

63
00:02:08,470 --> 00:02:14,140
Now the other part of the left hand side pane that's really useful is the Settings tab here, and I

64
00:02:14,140 --> 00:02:17,950
recommend everybody to switch their font size up to large.

65
00:02:18,190 --> 00:02:22,780
This just makes it so much easier to identify mistakes and any typos you make.

66
00:02:22,810 --> 00:02:28,030
Now we're going to leave everything else as it is, and you can click on the settings button to collapse

67
00:02:28,030 --> 00:02:31,960
that pane so that you end up with more space for writing code.

68
00:02:32,230 --> 00:02:36,040
And this area here is where you're going to be doing that.

69
00:02:36,040 --> 00:02:38,470
All of your code is going to go inside here.

70
00:02:38,590 --> 00:02:43,840
And once we're done with writing our code, we'll click run and it will execute.

71
00:02:43,840 --> 00:02:48,820
And the results of our code will come up over on the console in the right here.

72
00:02:49,510 --> 00:02:54,430
And I generally prefer to code using a darker background.

73
00:02:54,430 --> 00:02:58,510
It's slightly easier on my eyes, especially when you're working at night.

74
00:02:59,230 --> 00:03:05,230
So these are some of the most important parts of replit, but the important thing is it allows us to

75
00:03:05,230 --> 00:03:06,910
just get started.

76
00:03:07,000 --> 00:03:12,580
Now remember that the whole reason why we're learning to program is to be able to tell the computer

77
00:03:12,580 --> 00:03:16,660
what it needs to do and for it to follow our commands.

78
00:03:16,750 --> 00:03:22,000
So let's go ahead and tell the computer to do something, and we're going to do that by writing our

79
00:03:22,000 --> 00:03:23,590
first line of code.

80
00:03:23,980 --> 00:03:29,470
So in this case, I'm creating something called a print function, which is just the word "print", all

81
00:03:29,470 --> 00:03:33,160
in lowercase, and then followed by a set of parentheses.

82
00:03:33,280 --> 00:03:40,480
Now inside these parentheses, I'm going to tell it what I want it to print, and hopefully it's going

83
00:03:40,480 --> 00:03:43,240
to output that inside our console.

84
00:03:44,080 --> 00:03:49,480
So I'm going to start off by writing the classic "Hello World" inside here.

85
00:03:49,690 --> 00:03:53,470
And then once you're ready, then go ahead and click Run.

86
00:03:54,130 --> 00:03:59,980
After a few seconds, you should see the computer follow your command, namely printing the words that

87
00:03:59,980 --> 00:04:04,960
you told it to print inside the console or the output area over here.

88
00:04:05,770 --> 00:04:11,800
And once it's done, it indicates that with the little orange arrow and the way that this command works

89
00:04:11,800 --> 00:04:13,020
is super simple.

90
00:04:13,030 --> 00:04:19,959
You have the keyword "print" followed by a set of parentheses, and then inside the parentheses you tell

91
00:04:19,959 --> 00:04:21,700
it what you want it to print.

92
00:04:22,120 --> 00:04:28,390
And once you've inserted that, then when this line of code gets executed by the computer, it'll know

93
00:04:28,390 --> 00:04:33,580
to simply print or output the thing that you've placed in between the parentheses.

94
00:04:35,790 --> 00:04:43,470
But notice here that it's not just the word hello world exclamation mark that I've put inside my parentheses.

95
00:04:43,800 --> 00:04:49,230
I've also added some quotation marks or double quotes around the word.

96
00:04:49,650 --> 00:04:56,970
And the reason why I've done this is so that I can tell the computer that this bit here in between the

97
00:04:56,970 --> 00:04:59,220
double quotes is not code.

98
00:04:59,220 --> 00:05:02,340
It's not like print where it's supposed to do something.

99
00:05:02,340 --> 00:05:06,510
This is just some text that I've made up that I want it to print out.

100
00:05:07,670 --> 00:05:12,620
And these pieces of text in programming lingo is known as strings.

101
00:05:12,770 --> 00:05:16,700
And you can imagine it as almost like a pearl necklace, right?

102
00:05:16,700 --> 00:05:19,550
It's a string of characters.

103
00:05:20,030 --> 00:05:29,300
And what the double quotes do is they basically show the beginning and the end of that string of characters.

104
00:05:30,300 --> 00:05:34,090
So that means you have to be really careful when you're typing.

105
00:05:34,110 --> 00:05:39,240
For example, if I go ahead and I miss out the closing double quote.

106
00:05:39,390 --> 00:05:45,390
Well, now you can see that there's some changes that have happened to our code already, namely that

107
00:05:45,390 --> 00:05:51,720
the last parentheses, instead of being coloured in white like the opening parentheses or how it used

108
00:05:51,720 --> 00:05:54,840
to be, it's now coloured in orange.

109
00:05:54,840 --> 00:05:57,090
And this is a subtle hint to us.

110
00:05:57,180 --> 00:06:03,780
You're going to get really attuned to these subtle hints because they are the clues that will tell you

111
00:06:03,780 --> 00:06:05,760
what might have gone wrong in your code.

112
00:06:05,970 --> 00:06:09,840
If I run this code as it is right now, it's going to break.

113
00:06:09,870 --> 00:06:17,280
It's going to give me a syntax error and it says something that seems like it's completely non English.

114
00:06:17,340 --> 00:06:20,370
So how can we figure out what this means?

115
00:06:21,000 --> 00:06:25,710
Now the thing I want you to know is that all programmers make mistakes.

116
00:06:25,710 --> 00:06:33,870
We all make lots of errors, like forgetting to add the double quotes at the end of the string or forgetting

117
00:06:33,870 --> 00:06:37,170
to add a closing parentheses.

118
00:06:37,290 --> 00:06:40,470
These things are just common errors because we're human.

119
00:06:40,800 --> 00:06:47,400
But the thing that differentiates great programmers is we're really good at figuring out what the problem

120
00:06:47,400 --> 00:06:48,780
is and how to fix it.

121
00:06:48,960 --> 00:06:53,430
So you can imagine that coding is just a whole bunch of problems that you have to solve.

122
00:06:53,610 --> 00:07:00,540
And in this case, when we get some sort of red text on the right and our code is not doing what we

123
00:07:00,540 --> 00:07:07,110
expect it to do, then all we have to do is take this entire error message where it says something,

124
00:07:07,110 --> 00:07:12,420
something error, and this is some sort of message that we're supposed to understand and we're simply

125
00:07:12,420 --> 00:07:14,280
going to drop it into Google.

126
00:07:14,400 --> 00:07:19,740
And usually the first link you come across will be from a website called StackOverflow.com.

127
00:07:19,860 --> 00:07:25,800
And this is basically the Q&A website that all developers will go to whenever something is wrong with

128
00:07:25,800 --> 00:07:28,620
their code or when they can't figure out how to do something.

129
00:07:29,910 --> 00:07:35,370
So if we click on this link, you can see that somebody else has also had this error.

130
00:07:35,730 --> 00:07:42,510
And some kind souls have told us that the solution might be the fact that you're missing a double quote

131
00:07:42,510 --> 00:07:44,480
before the end of the line.

132
00:07:44,490 --> 00:07:50,610
So if we take a look back at our code, the code that generated this error looks like this.

133
00:07:50,700 --> 00:07:55,560
And indeed, we are missing a double quote at the end of our string.

134
00:07:57,150 --> 00:08:02,430
As you're learning to code, as you're going through your 100 days, I want you to become more and more

135
00:08:02,430 --> 00:08:05,910
attuned to the color of your code.

136
00:08:06,000 --> 00:08:12,240
Because one of the most helpful things that code editors such as this do for us is something called

137
00:08:12,240 --> 00:08:13,980
syntax highlighting.

138
00:08:14,340 --> 00:08:20,970
For example, when I was missing that double quote, it highlighted this entire thing in this orange

139
00:08:20,970 --> 00:08:21,550
color.

140
00:08:21,660 --> 00:08:27,430
And that is basically it telling us it seems like this whole thing is some text.

141
00:08:27,450 --> 00:08:33,900
It thinks that all of this is a string and that we're missing a closing parenthesis.

142
00:08:35,039 --> 00:08:39,720
So if you notice this and you're like, Wait, actually that's not right.

143
00:08:39,720 --> 00:08:43,650
This part should be orange because this is what I want to be printed.

144
00:08:43,650 --> 00:08:48,420
But this part should match the color of the open brace, which is white.

145
00:08:48,420 --> 00:08:50,520
So there must be something wrong here.

146
00:08:50,550 --> 00:08:57,450
And indeed, if you have a look at the error message, it actually has a little carat sign right here

147
00:08:57,450 --> 00:09:04,500
showing you that there's something that's probably not right here and it might jog your memory that,

148
00:09:04,500 --> 00:09:07,980
oh, yeah, I've forgotten a closing double quote.

149
00:09:08,820 --> 00:09:12,420
And now when we run our code, you'll see that it's good as new.

150
00:09:12,600 --> 00:09:18,030
So now it's your turn to try it out in a code challenge.

151
00:09:18,150 --> 00:09:19,650
Head over to the next lesson.

152
00:09:19,650 --> 00:09:25,410
Sign up to our classroom and then I'll guide you through getting started on your first coding challenge.

153
00:09:25,410 --> 00:09:27,300
So all of that and more.

154
00:09:27,300 --> 00:09:28,710
I'll see you on the next lesson.

155
00:00:00,690 --> 00:00:06,900
Throughout this course, we'll be getting you involved in a lot of these interactive coding exercises.

156
00:00:06,900 --> 00:00:11,820
And the idea is that you're not just sitting here watching me talk, that you're actually putting everything

157
00:00:11,820 --> 00:00:13,490
you're learning into practice.

158
00:00:13,500 --> 00:00:15,840
That way it actually becomes your own.

159
00:00:15,900 --> 00:00:21,810
It's a great because we can give you instructions and show you what should happen if you write the correct

160
00:00:21,810 --> 00:00:27,840
code, what it needs to do, and you'll be able to write your code as well as see it run in the console.

161
00:00:28,110 --> 00:00:33,090
Once you're done with your code, you'll be able to submit it and see the tests run.

162
00:00:33,420 --> 00:00:37,620
And if you've written the code correctly, then all of the tests will pass.

163
00:00:38,040 --> 00:00:40,890
If your code isn't doing what it's supposed to.

164
00:00:40,920 --> 00:00:45,600
Then when you click submit, you'll get feedback and you'll see what it's meant to do and what your

165
00:00:45,600 --> 00:00:47,070
code is actually doing.

166
00:00:47,070 --> 00:00:50,490
So you'll be able to use that to figure out what's wrong and fix your code.

167
00:00:50,640 --> 00:00:55,650
And it's through a lot of these exercises that you're going to level up and you're going to become a

168
00:00:55,650 --> 00:00:56,580
better coder.

169
00:00:56,790 --> 00:01:02,280
Now, in order for you to get set up on our coding rooms, we're going to have to get you signed up

170
00:01:02,280 --> 00:01:04,500
and registered with our course.

171
00:01:04,590 --> 00:01:10,560
So in order to do this, I want you to first head over to codingrooms.com and then sign up for

172
00:01:10,560 --> 00:01:12,180
a student account.

173
00:01:12,540 --> 00:01:18,780
Now this is completely free and all you have to do is just do click, sign up, putting your email and

174
00:01:18,780 --> 00:01:24,720
password, and then you can choose student for this question Who are you?

175
00:01:24,960 --> 00:01:31,740
And then putting your first name and last name and click "Finish". Next,

176
00:01:31,740 --> 00:01:36,540
in order to get hold of the Joining Link, I want you to go to the course resources for the current

177
00:01:36,540 --> 00:01:37,950
lesson on Udemy.

178
00:01:37,950 --> 00:01:43,530
So the lesson is "[Interactive Coding Exercise] Printing", and then I want you to click on the dropdown

179
00:01:43,530 --> 00:01:48,630
list and you should see step one sign up to coding rooms, which you should have already done.

180
00:01:48,630 --> 00:01:51,780
And then step two is join our coding room.

181
00:01:51,780 --> 00:01:53,520
So I want you to click on that link.

182
00:01:53,760 --> 00:01:59,640
And once you've clicked on that link, then it should automatically enroll you into our 100 days of

183
00:01:59,640 --> 00:02:06,450
code, the Complete Python Pro Bootcamp, and you should now be able to see every day's corresponding

184
00:02:06,450 --> 00:02:08,250
interactive coding exercises.

185
00:02:08,250 --> 00:02:14,430
So for example, on day one there are four exercises and they are named exactly the same as what you

186
00:02:14,430 --> 00:02:15,690
see in Udemy.

187
00:02:15,690 --> 00:02:21,720
So this is interactive coding exercise one which is printing, debugging, practice, input, function

188
00:02:21,720 --> 00:02:27,180
and variables and you see all the same ones over here that you'll be able to attempt.

189
00:02:27,900 --> 00:02:33,090
Now the next time when you log in, all you have to do is just go into your courses and you should see

190
00:02:33,090 --> 00:02:38,880
the interactive coding exercises for the 100 days of code, and you will be able to continue where you

191
00:02:38,880 --> 00:02:39,630
left off.

192
00:02:40,020 --> 00:02:42,960
Now let's get started with the first exercise.

193
00:02:42,960 --> 00:02:45,270
That's the objective of this lesson.

194
00:02:45,450 --> 00:02:48,300
So we're going to go into day one and it might be collapsed.

195
00:02:48,300 --> 00:02:53,760
If so, just go ahead and expand it and then click on Exercise 1 - Printing.

196
00:02:53,850 --> 00:02:59,640
And here you see the instructions for what you need to do in order to complete this coding exercise.

197
00:02:59,910 --> 00:03:06,360
Now, I want you to go ahead and click on Open Assignment Workspace, and here you'll be able to see

198
00:03:06,360 --> 00:03:09,600
the instructions on one side of the pane.

199
00:03:09,600 --> 00:03:13,110
You'll be able to have your main.py, which is where you write your code.

200
00:03:13,110 --> 00:03:16,530
So all the lines below here, you can just type your code out.

201
00:03:16,530 --> 00:03:23,610
And then once you're done writing your code, I want you to test it by running your code.

202
00:03:23,610 --> 00:03:30,720
So hitting this run button and you'll see the result of your code being run in the console down here.

203
00:03:30,960 --> 00:03:36,030
Now once you think you've completed the coding exercise according to all the instructions over here,

204
00:03:36,060 --> 00:03:41,880
I want you to go ahead and test your code and you can test your code by simply hitting submit.

205
00:03:42,480 --> 00:03:47,250
Now, don't worry about all of this where it says this submission will count towards your grade for

206
00:03:47,250 --> 00:03:47,880
the assignment.

207
00:03:47,880 --> 00:03:50,400
There are no grades, there's no time limits.

208
00:03:50,400 --> 00:03:52,920
Nobody is going to check what you've done.

209
00:03:52,920 --> 00:03:59,010
It's all for the benefit of your learning so you can submit your code as many times as you like.

210
00:03:59,220 --> 00:04:04,710
So once you hit submit, it's going to run the automated test that we've set up behind the scenes,

211
00:04:04,710 --> 00:04:09,270
and it's going to check to make sure that your code is doing what it's supposed to do.

212
00:04:09,810 --> 00:04:17,579
So, for example, in this case, my tests have not passed because there's a cross here and note that

213
00:04:17,579 --> 00:04:21,570
sometimes there'll be more than one test, so you can scroll down and see the other ones.

214
00:04:21,810 --> 00:04:27,690
And the reason why I didn't pass, as they've shown here, is this is my actual output.

215
00:04:27,690 --> 00:04:32,760
This is what my code did and this is what the expected output is supposed to be.

216
00:04:32,760 --> 00:04:34,740
And there's a whole bunch of differences.

217
00:04:34,740 --> 00:04:39,870
This does not look like this, so then we have to go and fix it.

218
00:04:39,870 --> 00:04:43,800
And I've left some feedback in some of the lessons to help you in case you get stuck.

219
00:04:43,800 --> 00:04:46,440
But also there are hints in some of the instructions.

220
00:04:46,440 --> 00:04:52,410
So just make sure that you read everything now if you want to, or if you get really, really stuck,

221
00:04:52,410 --> 00:04:54,810
you can take a look at the solution.

222
00:04:54,810 --> 00:04:59,670
Now, I don't recommend looking at the solution code unless you're actually just checking to make sure

223
00:04:59,670 --> 00:04:59,940
that.

224
00:05:00,030 --> 00:05:05,400
Something hasn't gone majorly wrong or you're not completely stuck, or just for whatever reason, I

225
00:05:05,400 --> 00:05:11,190
really, really want you to persevere and try your best to actually write the code yourself and to solve

226
00:05:11,190 --> 00:05:14,520
the issues and figure out how to make all the tests pass.

227
00:05:14,760 --> 00:05:19,380
But if you need to look at the solution, they are available on replit.

228
00:05:19,380 --> 00:05:24,900
So just click on this link and it'll take you to the solution page in order to see the files.

229
00:05:24,900 --> 00:05:28,440
You can either fork the repl as you have done before.

230
00:05:28,470 --> 00:05:36,210
You'll get a copy of this solution file or what I think is much simpler is simply click on show files

231
00:05:36,210 --> 00:05:42,840
and then click on this main.py file and then you will see the solution code on this page without

232
00:05:42,840 --> 00:05:45,990
having to fork a copy of this repl.

233
00:05:45,990 --> 00:05:47,850
But you can do it any number of ways.

234
00:05:47,850 --> 00:05:50,700
Whichever way suits you best is fine.

235
00:05:50,700 --> 00:05:56,820
Now, once you have written your code correctly, you should be able to see all the tests pass and by

236
00:05:56,820 --> 00:06:01,200
passing it means that there's a little tick along each of these.

237
00:06:01,200 --> 00:06:04,320
And usually in this one there's only one test and this is passed.

238
00:06:04,320 --> 00:06:06,120
So you get a score of 100%.

239
00:06:06,300 --> 00:06:12,780
And the actual output that your code has created in the console now looks exactly the same as expected.

240
00:06:12,780 --> 00:06:18,900
So you are now done and you can go back to your other assignments and you can continue.

241
00:06:19,200 --> 00:06:25,650
So this is a really simple interface and we've switched to this from replit because replit had actually

242
00:06:25,650 --> 00:06:30,540
disabled their classroom technology, which looks basically exactly the same as this.

243
00:06:30,540 --> 00:06:35,100
And we wanted to provide you the best learning experience possible.

244
00:06:35,100 --> 00:06:40,650
So we've switched over to coding rooms and you should be able to sign up and get started without any

245
00:06:40,650 --> 00:06:41,220
issue.

246
00:06:41,250 --> 00:06:47,880
Now remember at the end of the lesson, I will go through the solution with you step by step explaining

247
00:06:47,880 --> 00:06:48,990
the solution as well.

248
00:06:48,990 --> 00:06:53,010
So if you get stuck, don't worry, I'm here for you every step of the way.

249
00:06:53,010 --> 00:06:58,740
But now it's time for you to pause the video and make sure that you've signed up for coding rooms,

250
00:06:58,740 --> 00:07:04,890
already registered for a student account, and then click on the link in step two in the course resources

251
00:07:04,890 --> 00:07:12,330
and sign up for our course and then go over to the first exercise printing and give it a go.

252
00:07:12,360 --> 00:07:13,770
All right, pause the video now.

253
00:07:14,040 --> 00:07:14,520
All right.

254
00:07:14,520 --> 00:07:15,750
How did you get on?

255
00:07:16,020 --> 00:07:20,910
I really hope you gave this a good go because it's in these moments where you're going to be learning

256
00:07:20,910 --> 00:07:21,600
the code.

257
00:07:21,630 --> 00:07:26,280
Unfortunately, no amount of listening to me talk is actually going to give you these skills.

258
00:07:26,280 --> 00:07:31,740
It's only when you actually try it out and get the computer to do the thing that you wanted to do.

259
00:07:31,740 --> 00:07:35,850
That's when you become the master of the computer, also known as a programmer.

260
00:07:36,090 --> 00:07:38,820
So in this case, the instructions are pretty simple.

261
00:07:38,820 --> 00:07:44,910
We have to use what we learn about the print statement to output these three lines and notice how in

262
00:07:44,910 --> 00:07:48,570
this gif the lines are printing out in separate lines.

263
00:07:48,750 --> 00:07:51,660
This one gets printed, then this one, then this one.

264
00:07:51,660 --> 00:07:56,790
But because it happens so fast, it seems like it as if they're getting printed as a single block.

265
00:07:56,940 --> 00:07:59,790
So we're told to write our code below this line.

266
00:08:00,390 --> 00:08:06,180
And we know that in order to print something, we use the print function with a set of parentheses,

267
00:08:06,180 --> 00:08:10,830
and inside the parentheses is where we tell it what we want it to print.

268
00:08:10,830 --> 00:08:20,430
So in the first instance, it's day one space, then it's now it's really easy to make spelling mistakes.

269
00:08:20,430 --> 00:08:26,970
But I really encourage you to actually type out anything that you put into your code rather than just

270
00:08:26,970 --> 00:08:29,160
simply copying and pasting it.

271
00:08:29,160 --> 00:08:31,680
Now, of course, it works exactly the same way.

272
00:08:31,680 --> 00:08:39,360
I could just copy and paste the code in here, but it's often in these cases where you make mistakes,

273
00:08:39,360 --> 00:08:45,690
like for example, forgetting to add the double quotes around the text that you want to print, I really

274
00:08:45,690 --> 00:08:50,490
recommend just typing out the code for practice whenever you're doing these code challenges.

275
00:08:51,480 --> 00:08:56,010
Now, the last line that we want to print is a little bit complicated.

276
00:08:56,040 --> 00:09:02,130
It's almost like print inception, because what we want to print is this function.

277
00:09:02,130 --> 00:09:09,210
This is how we write our function, and that has to go inside here, inside a set of double quotes.

278
00:09:09,210 --> 00:09:13,380
So let's open up a double quotes and then write our print statement.

279
00:09:13,530 --> 00:09:18,060
And in this case, I'm actually using a single quote.

280
00:09:18,060 --> 00:09:21,750
And I'll tell you just in a little moment why that is.

281
00:09:22,320 --> 00:09:24,030
So let's add that single quote.

282
00:09:24,030 --> 00:09:26,760
And finally, the closing parentheses.

283
00:09:26,760 --> 00:09:31,560
This now is the entire code that you would need to be able to print something out.

284
00:09:31,740 --> 00:09:37,080
And when I go ahead and click Run, you can see that the output looks exactly the same as what we've

285
00:09:37,080 --> 00:09:38,310
got here in the gif.

286
00:09:38,310 --> 00:09:39,990
This is what we want.

287
00:09:39,990 --> 00:09:46,830
And when I click submit you'll see that my tests all pass and I can now submit my assignment and I've

288
00:09:46,830 --> 00:09:48,960
now completed the coding challenge.

289
00:09:49,290 --> 00:09:55,770
Now coming back to this single quote, why is it that I've got a single quote here rather than a double

290
00:09:55,770 --> 00:09:58,380
quote, which is what we've been using all this time?

291
00:09:58,440 --> 00:09:59,340
Well, because in.

292
00:09:59,530 --> 00:10:00,070
Python.

293
00:10:00,070 --> 00:10:05,260
It doesn't actually care whether if you enclose the strings.

294
00:10:05,260 --> 00:10:13,470
So these pieces of text are not to be interpreted as code inside single quotes or inside double quotes.

295
00:10:13,480 --> 00:10:16,090
It is identical to the computer.

296
00:10:16,120 --> 00:10:18,490
This honey badger literally doesn't care.

297
00:10:18,820 --> 00:10:27,130
But if you had a set of double quotes and then you wanted another set of double quotes inside the double

298
00:10:27,130 --> 00:10:27,790
quotes.

299
00:10:27,790 --> 00:10:34,420
So, for example, if I replace this with double quotes, you'll see that already the syntax highlighting

300
00:10:34,420 --> 00:10:36,070
is already screaming out to us.

301
00:10:36,070 --> 00:10:44,230
There's something that's not quite right here because the colors are not the same as here, where the

302
00:10:44,230 --> 00:10:51,160
print function is in a particular color, the parentheses are in a particular color, and the text that

303
00:10:51,160 --> 00:10:54,820
is to be printed in, it's in a yet another different color.

304
00:10:54,850 --> 00:10:59,410
In this case, it looks all jumbled up and we're getting some errors here.

305
00:10:59,740 --> 00:11:03,490
So now if I hit run, you'll get syntax errors.

306
00:11:04,180 --> 00:11:12,910
And the problem here is, of course, this is of course, our code things at the end of this string

307
00:11:12,910 --> 00:11:13,840
is here.

308
00:11:13,990 --> 00:11:17,680
And so it doesn't know what on earth is going on afterwards.

309
00:11:18,220 --> 00:11:26,950
And instead it's seeing this as a string, this as a string, and this is being interpreted as code.

310
00:11:27,670 --> 00:11:34,330
So when we want to use some double quotes inside another set of double quotes, commonly you'll see

311
00:11:34,330 --> 00:11:38,050
people switch to single quotes instead.

312
00:11:38,200 --> 00:11:45,610
So you could, for example, write the print statement like so and use double quotes if you want to

313
00:11:45,610 --> 00:11:46,750
print those out.

314
00:11:46,990 --> 00:11:52,840
Or you can do it the other way, which is what I had before, where we use our double quotes on the

315
00:11:52,840 --> 00:11:55,150
outside and single quotes on the inside.

316
00:11:55,270 --> 00:11:58,690
So have a play around with that, if that's at all confusing.

317
00:11:58,690 --> 00:12:03,310
But once you've tried it a few times and switched it around a few times, it should become clear what

318
00:12:03,310 --> 00:12:04,450
it's actually doing.

319
00:12:04,930 --> 00:12:07,600
How did you get on with this challenge?

320
00:12:07,660 --> 00:12:11,830
If you ever need to see the solution, it's always down here as a link.

321
00:12:12,340 --> 00:12:14,200
So I hope you enjoy this challenge.

322
00:12:14,200 --> 00:12:19,240
In the next lesson, we're going to get back to learning about Python and we're going to learn about

323
00:12:19,240 --> 00:12:23,650
strings and string manipulation for all of that and more.

324
00:12:23,680 --> 00:12:24,370
I'll see you there.

325
00:00:00,160 --> 00:00:00,790
All right guys.

326
00:00:00,790 --> 00:00:05,230
Let's get back to learning about a few more things that we can do with strings.

327
00:00:05,950 --> 00:00:10,480
You saw in the last lesson that if we wanted to print things on individual

328
00:00:10,480 --> 00:00:14,830
lines, then we actually had to write them a few times, right?

329
00:00:14,830 --> 00:00:17,320
We had to write print, um,

330
00:00:17,350 --> 00:00:21,970
on three lines if we wanted it to be printed one, two, three,

331
00:00:22,060 --> 00:00:27,060
like so. Now in this lesson I want to show you a method where we can do the same

332
00:00:27,700 --> 00:00:31,120
thing, but by using a single print method.

333
00:00:31,270 --> 00:00:33,580
So saving ourselves a few characters.

334
00:00:34,180 --> 00:00:39,180
So the way that we would create a new line is by writing a backslash and the N

335
00:00:40,720 --> 00:00:41,553
character.

336
00:00:42,160 --> 00:00:47,160
And now if I go ahead and write hello world again afterward and I hit run,

337
00:00:49,150 --> 00:00:53,770
or you can always use the shortcut, which is command + enter on Mac or control +

338
00:00:53,770 --> 00:00:55,540
enter on Windows.

339
00:00:56,020 --> 00:00:59,650
And you can see that once that line of code has been executed,

340
00:01:00,100 --> 00:01:03,760
I've got hello world printed on two separate lines,

341
00:01:04,209 --> 00:01:08,290
separated by this pink \n and character,

342
00:01:08,650 --> 00:01:11,770
which gets replaced by a new line.

343
00:01:13,030 --> 00:01:16,390
So go ahead and give that a go and see if you can create another one.

344
00:01:16,540 --> 00:01:17,290
Remember though,

345
00:01:17,290 --> 00:01:22,290
it's a backslash and not a forward slash but the syntax highlighting should help

346
00:01:22,300 --> 00:01:25,740
you. All right,

347
00:01:25,800 --> 00:01:30,800
we can simply just add another \n and remember that unless you want a

348
00:01:31,080 --> 00:01:35,940
space to appear right before where your hello world appears,

349
00:01:36,210 --> 00:01:40,440
you actually don't want any gaps between each of these lines.

350
00:01:43,530 --> 00:01:46,200
There we go. We've got the same result as before,

351
00:01:46,440 --> 00:01:51,440
but now using only a single print statement and creating some new lines with the

352
00:01:52,020 --> 00:01:53,130
\n.

353
00:01:54,000 --> 00:01:59,000
Now one of the other things that we can do with strings is we can concatenate

354
00:01:59,610 --> 00:02:00,443
them.

355
00:02:00,660 --> 00:02:05,660
What this means is we combine different strings so that they will be added to

356
00:02:06,840 --> 00:02:10,380
the end of another string. Here's an example.

357
00:02:10,500 --> 00:02:15,500
Let's say that we had the word hello and I wanted to add my name to the end of

358
00:02:17,010 --> 00:02:20,640
this word to make it a single string. Well,

359
00:02:20,640 --> 00:02:25,640
I can combine two strings by simply using a plus sign. So I can write "Hello" 

360
00:02:27,240 --> 00:02:31,800
+ "Angela". Now here's a question. When this runs,

361
00:02:31,890 --> 00:02:36,030
what do you think it will look like? Do you think it'll write Hello 

362
00:02:36,060 --> 00:02:41,040
Angela or hello Angela, all in one word? Let's see what happens.

363
00:02:42,000 --> 00:02:47,000
You can see that these two strings have now been combined into one and there's

364
00:02:47,730 --> 00:02:52,730
no space in between because we don't have a space character anywhere in here.

365
00:02:54,030 --> 00:02:59,030
Pause the video and see if you can add a space in between.

366
00:03:00,220 --> 00:03:00,610
Alright,

367
00:03:00,610 --> 00:03:05,020
so there are two ways that you can do this or maybe three actually. You could add a

368
00:03:05,020 --> 00:03:08,080
space to the end of hello, you could add a space to

369
00:03:08,140 --> 00:03:13,140
the beginning of Angela or you can actually continue using string concatenation

370
00:03:14,110 --> 00:03:18,700
by simply adding another string in between these two

371
00:03:19,060 --> 00:03:23,500
and this one is just a space. So now when I run my code,

372
00:03:23,590 --> 00:03:28,590
you can see the space gets inserted and this long thing gets combined into a

373
00:03:29,320 --> 00:03:32,890
single string that looks like this

374
00:03:33,580 --> 00:03:37,150
once this bit of the code gets executed.

375
00:03:38,140 --> 00:03:42,880
If we think of strings as a string of connected characters,

376
00:03:43,540 --> 00:03:48,540
then string concatenation is simply taking those separate strings of characters

377
00:03:49,810 --> 00:03:53,800
and merging them into one. Now,

378
00:03:53,830 --> 00:03:58,830
this is a good point to mention that in Python programming spaces are really,

379
00:03:59,590 --> 00:04:00,640
really important.

380
00:04:01,510 --> 00:04:06,510
And what I mean by this is not so much the spaces that are inside strings like

381
00:04:07,120 --> 00:04:11,470
this one, but the spaces that you add in your code.

382
00:04:12,010 --> 00:04:15,550
So here, my print statement, if I hit the backspace,

383
00:04:15,610 --> 00:04:19,930
you can see that nothing happens. I can't go any further back.

384
00:04:20,560 --> 00:04:25,560
But if I added a space or if I added a tab using the TAB key,

385
00:04:28,810 --> 00:04:33,250
then you'll see that when I try to run my code, I actually get an error.

386
00:04:33,730 --> 00:04:37,000
And the type of error this time is not a syntax error anymore.

387
00:04:37,390 --> 00:04:39,790
It's now an indentation error.

388
00:04:40,540 --> 00:04:45,540
And it says that there's an unexpected indent at this position right at the

389
00:04:45,760 --> 00:04:50,380
beginning of the print statement. So when you're coding in Python,

390
00:04:50,470 --> 00:04:55,470
it's really important that you start off all of your code at the beginning of

391
00:04:55,930 --> 00:05:00,910
the line and that you don't accidentally have any spaces or any tabs that you've

392
00:05:00,910 --> 00:05:03,550
inserted in front of the line of code.

393
00:05:04,120 --> 00:05:06,850
And the next time you get an indentation error,

394
00:05:07,210 --> 00:05:11,620
then you'll be able to look at where that error is and hopefully you'll be able to

395
00:05:11,620 --> 00:05:16,620
either use Stack Overflow or just remember what this error message means and

396
00:05:16,840 --> 00:05:18,220
you'll be able to fix your code.

397
00:05:19,300 --> 00:05:22,060
Now this is the second error that we've come across.

398
00:05:22,150 --> 00:05:25,360
The last error was a syntax error for example,

399
00:05:25,360 --> 00:05:28,420
when we forgot to add the end double quotes.

400
00:05:29,050 --> 00:05:34,050
And this one is called a syntax error and this one is called an indentation error.

401
00:05:36,010 --> 00:05:38,530
And as I mentioned before, while you're coding,

402
00:05:38,620 --> 00:05:43,210
you are going to make lots and lots of these errors and other ones.

403
00:05:43,210 --> 00:05:45,310
This is the only sure thing that we know.

404
00:05:46,300 --> 00:05:51,070
So it's great that you're already learning about them and recognizing them.

405
00:05:51,490 --> 00:05:55,270
But how can we prevent this from happening in the first place? Well,

406
00:05:55,300 --> 00:05:59,870
paying attention while you're typing helps, but we all get tired and sometimes,

407
00:05:59,870 --> 00:06:03,650
especially when I'm coding at night, sometimes even when I look at my own name,

408
00:06:03,650 --> 00:06:07,070
it looks like it's spelled wrong and I can't figure out left and right.

409
00:06:07,100 --> 00:06:11,990
So in most cases, text editors have a lot of helpful features.

410
00:06:12,470 --> 00:06:16,340
If you go into the settings bar here and you scroll all the way to the bottom,

411
00:06:16,700 --> 00:06:20,780
you can see that there's something called Code Intelligence. And code

412
00:06:20,780 --> 00:06:25,310
intelligence is something that is going to help you auto-complete some of the

413
00:06:25,310 --> 00:06:30,310
functions like our print function here and give you some helpful information or

414
00:06:30,740 --> 00:06:32,060
hints as you type.

415
00:06:32,450 --> 00:06:37,450
So let's go ahead and change it to enabled and close down our settings pane.

416
00:06:38,780 --> 00:06:43,370
And you can see now if I, for example, forget to add my double quotes,

417
00:06:43,640 --> 00:06:48,230
then I already start to get a little red squiggly line here and a little red bit

418
00:06:48,290 --> 00:06:50,780
in the right hand side of the scroll bar.

419
00:06:51,350 --> 00:06:53,810
And if I hover over the red squiggly line,

420
00:06:54,140 --> 00:06:58,910
you can see that it gives me the error that I would get if I ran my code right

421
00:06:58,910 --> 00:07:02,450
now. And so it reminds me that, Oh yeah,

422
00:07:02,480 --> 00:07:06,500
there's maybe something about my string that's not quite right.

423
00:07:06,800 --> 00:07:11,800
And you can also just Google these error messages and see it in Stack Overflow

424
00:07:11,840 --> 00:07:14,840
to remind yourself of what the error might be relating to.

425
00:07:15,530 --> 00:07:20,060
And I can fix it without having to run my code and having it break.

426
00:07:20,480 --> 00:07:23,060
Because remember that when you're writing large programs,

427
00:07:23,090 --> 00:07:25,550
it's not just going to be one line of code.

428
00:07:25,670 --> 00:07:30,200
You can have multiple lines of code each with their own errors.

429
00:07:30,200 --> 00:07:33,380
For example, this one might be missing a double quote,

430
00:07:33,620 --> 00:07:36,260
this one might be missing a plus sign,

431
00:07:36,710 --> 00:07:39,470
this one might have the print function misspelled.

432
00:07:39,980 --> 00:07:44,510
The next one might have a indentation that's not meant to be there,

433
00:07:44,930 --> 00:07:49,070
and when you run your code like this, it'll only give you the first issue.

434
00:07:49,670 --> 00:07:51,260
Once you fix that issue,

435
00:07:51,290 --> 00:07:55,820
it'll continue to the next issue until you've fixed everything,

436
00:07:56,270 --> 00:08:00,920
and this is really painful. But with code intelligence enabled,

437
00:08:01,130 --> 00:08:05,330
every time we make an error such as an indentation error like this,

438
00:08:05,570 --> 00:08:09,260
then we'll be able to hover over it and you'll see unexpected indent.

439
00:08:09,560 --> 00:08:13,970
So we'll be able to fix that. If we forget to close off our print statement,

440
00:08:14,330 --> 00:08:18,020
then we'll get a little squiggly line next to it.

441
00:08:18,380 --> 00:08:21,500
And if we say misspelled our print statement,

442
00:08:21,890 --> 00:08:26,810
we'll also get errors telling us that undefined name or it doesn't know what

443
00:08:26,870 --> 00:08:31,870
this 'prnt' is and the syntax highlighting also changes and everything should

444
00:08:34,159 --> 00:08:38,990
all help you to avoid mistakes and write good solid code.

445
00:08:40,640 --> 00:08:43,970
So now it's time for another code challenge.

446
00:08:44,480 --> 00:08:45,830
And in this code challenge,

447
00:08:46,040 --> 00:08:51,040
I've got a whole bunch of broken code for you and your job is to debug or remove

448
00:08:53,060 --> 00:08:57,840
the bugs from the code and make the code run without any errors.

449
00:08:58,740 --> 00:09:03,740
This word debugging actually comes from a story where back in the 1980s a

450
00:09:04,530 --> 00:09:09,530
moth actually flew into one of the early computers and it got electrocuted

451
00:09:11,130 --> 00:09:14,370
unfortunately for the moth and for the programmer,

452
00:09:14,400 --> 00:09:18,540
it meant that his code wasn't performing as he would expect it to.

453
00:09:18,960 --> 00:09:22,500
So he actually had to go into the computer, pick out the moth,

454
00:09:22,950 --> 00:09:25,890
and fix the wires so that it would work again.

455
00:09:26,670 --> 00:09:30,330
Now we don't have any moths flying around in our code, thankfully,

456
00:09:30,750 --> 00:09:35,520
but what we do have to do is we have to pick out the errors so that our code will

457
00:09:35,520 --> 00:09:39,630
run in the way that we expect it to without any errors.

458
00:09:40,050 --> 00:09:45,050
So head over to the next lesson and try out your first debugging exercise.

459
00:00:00,030 --> 00:00:00,863
To begin,

460
00:00:00,930 --> 00:00:05,820
I want you to locate the day 1.2 debugging exercise.

461
00:00:06,960 --> 00:00:10,380
And now, as you did before, go ahead and read through the instructions.

462
00:00:10,740 --> 00:00:15,740
Be mindful that the output must match the example output precisely.

463
00:00:16,410 --> 00:00:19,980
And when you hit run, this is the outcome you're looking for.

464
00:00:20,430 --> 00:00:22,890
So there's quite a few things broken here,

465
00:00:23,130 --> 00:00:28,130
but I want you to have a go at fixing each line individually and pulling out the

466
00:00:28,590 --> 00:00:31,860
bugs from the code. So pause the video now and give that a go.

467
00:00:36,710 --> 00:00:37,130
All right.

468
00:00:37,130 --> 00:00:40,610
So how did that go? If you haven't got your computer in front of you,

469
00:00:40,610 --> 00:00:45,350
if you're traveling, if somehow you can't access the exercise, just pause

470
00:00:45,380 --> 00:00:46,790
and when you've got time,

471
00:00:46,820 --> 00:00:49,430
then complete the challenge and then come back to the course.

472
00:00:49,850 --> 00:00:53,300
It is so important that you actually do some hands-on stuff.

473
00:00:53,540 --> 00:00:57,440
And I stress that this is the only way that you are going to become the rock

474
00:00:57,440 --> 00:01:02,300
star coder that I know you can be. Let's take a look at the code below.

475
00:01:02,870 --> 00:01:06,410
You can see that when we run our code as it is right now,

476
00:01:06,590 --> 00:01:08,300
we get a new error.

477
00:01:08,780 --> 00:01:12,650
And this is going to point to the first of many errors in this file.

478
00:01:13,340 --> 00:01:17,930
And in this case, it tells us that on line three,

479
00:01:18,170 --> 00:01:22,970
so this one right here, at around this position

480
00:01:22,970 --> 00:01:27,740
or somewhere around here, um, as denoted by the little caret sign,

481
00:01:28,130 --> 00:01:31,790
there is a syntax error. If we study this closely,

482
00:01:31,790 --> 00:01:36,200
you can see that the code highlighting seems to be suggesting that all of this

483
00:01:36,200 --> 00:01:41,060
is code, but this is somehow text. So what's going on here?

484
00:01:41,510 --> 00:01:44,900
Well, notice that we've only got one double quote.

485
00:01:45,200 --> 00:01:48,770
So it thinks that what comes after this is the text,

486
00:01:49,190 --> 00:01:52,850
but what comes before it, it thought it was just a continuation of code.

487
00:01:53,330 --> 00:01:54,500
So to fix this one,

488
00:01:54,530 --> 00:01:59,530
all we have to do is add a double quote right here. That changes the text to the

489
00:02:00,200 --> 00:02:04,010
color that we're used to and this fixes this line.

490
00:02:04,190 --> 00:02:08,930
So if we run our code now, we should get a different error. And indeed we do.

491
00:02:10,190 --> 00:02:13,580
The next one tells us that on line five,

492
00:02:13,610 --> 00:02:17,720
so this one right here, there is an indentation error.

493
00:02:17,780 --> 00:02:22,610
There's an unexpected indent somewhere around here on line five.

494
00:02:23,120 --> 00:02:26,360
So let's take a look at line five and there you go.

495
00:02:26,420 --> 00:02:31,280
There's a little bit of extra space between the print and the beginning of the

496
00:02:31,280 --> 00:02:32,113
line.

497
00:02:32,240 --> 00:02:37,240
So now that we've fixed that one, let's click run. And it will point to

498
00:02:37,970 --> 00:02:40,910
another line of code that's broken. And in this case,

499
00:02:40,910 --> 00:02:43,340
it says on line seven,

500
00:02:43,400 --> 00:02:46,190
which is here where there's actually no code,

501
00:02:46,520 --> 00:02:51,260
there's the unexpected EOF while parsing. What does this mean?

502
00:02:51,650 --> 00:02:53,030
Well, if you're not sure,

503
00:02:53,060 --> 00:02:58,060
then go ahead and paste it into Google and let's take a look at what people say

504
00:03:01,240 --> 00:03:05,470
on Stack Overflow. So as this person,

505
00:03:05,740 --> 00:03:09,970
very kind, Felix, um, has explained, this index error

506
00:03:10,090 --> 00:03:11,110
unexpected EOF

507
00:03:11,110 --> 00:03:16,030
while parsing means that the end of your source code was reached before all

508
00:03:16,030 --> 00:03:20,650
code blocks were completed. What is a code block? Well,

509
00:03:20,680 --> 00:03:23,920
this is a code block because it's a print function,

510
00:03:24,160 --> 00:03:29,140
it has a beginning and it has an end. But what does this line not have?

511
00:03:29,620 --> 00:03:31,690
Well, it's got two open parentheses,

512
00:03:32,020 --> 00:03:34,630
but only one closing parentheses.

513
00:03:34,960 --> 00:03:39,960
So the computer thinks that you are going to continue writing something and then

514
00:03:40,150 --> 00:03:44,380
close it off at the end, which is not the case. In fact,

515
00:03:44,410 --> 00:03:49,410
what has happened is we simply have an extra misplaced open parenthesis.

516
00:03:51,700 --> 00:03:53,710
And now if we delete that and hit run,

517
00:03:54,010 --> 00:03:57,520
you'll see that we have everything printed.

518
00:03:57,940 --> 00:04:01,300
But at this point, notice how on line four

519
00:04:01,480 --> 00:04:03,310
which is the line that we haven't fixed yet,

520
00:04:03,820 --> 00:04:08,820
it prints string concatenation is done with the 'blank' sign.

521
00:04:10,090 --> 00:04:12,430
Whereas in fact, it should say plus sign.

522
00:04:13,360 --> 00:04:18,360
And even though we don't see any errors being printed in our console,

523
00:04:19,269 --> 00:04:23,590
you'll see that we have an output mismatch because I'm expecting to see this

524
00:04:23,590 --> 00:04:27,460
line, the String Concatenation is done with the "+" sign,

525
00:04:27,910 --> 00:04:28,743
but here,

526
00:04:28,990 --> 00:04:33,990
the output doesn't have that part. It's missing this part.

527
00:04:35,140 --> 00:04:39,700
So there's one last thing that you need to debug. And that is of course,

528
00:04:39,730 --> 00:04:40,630
on line four.

529
00:04:41,290 --> 00:04:46,290
And what's happening here is we have this part being interpreted as a string,

530
00:04:47,200 --> 00:04:49,540
this part being interpreted a string,

531
00:04:49,960 --> 00:04:54,960
and it thinks that this plus sign is just us concatenating

532
00:04:55,420 --> 00:04:57,280
these two parts together,

533
00:04:57,760 --> 00:05:01,540
which is why it printed out like this. But in fact,

534
00:05:01,640 --> 00:05:06,220
we wanted to print out is this as text down here.

535
00:05:06,850 --> 00:05:11,850
So what we have to do is to change this outer apart from double quotes

536
00:05:12,400 --> 00:05:14,320
into single quotes.

537
00:05:14,830 --> 00:05:18,370
And now you can see when it highlights this part,

538
00:05:18,460 --> 00:05:21,640
it's all the same color including the plus sign.

539
00:05:22,420 --> 00:05:26,110
Now it sees this as a complete string,

540
00:05:26,590 --> 00:05:30,850
and it's not looking at this as if it's code. So now if we run our program,

541
00:05:30,880 --> 00:05:33,580
you can see the entire sentence being printed out.

542
00:05:34,810 --> 00:05:38,650
So if you've completed the challenge and you've gotten everything right,

543
00:05:38,740 --> 00:05:41,290
then you're now done with this exercise.

544
00:05:41,950 --> 00:05:46,930
If you got stuck and you want to have a look at the solution, as always it's down

545
00:05:46,930 --> 00:05:47,763
here,

546
00:05:48,040 --> 00:05:53,040
and it might be useful to have a look at this page to see where you might've

547
00:05:53,380 --> 00:05:56,620
missed something or where you might've gotten something wrong.

548
00:05:57,730 --> 00:06:01,270
So I hope you enjoyed this code exercise. In the next lesson,

549
00:06:01,330 --> 00:06:04,060
we're going to learn about a new type of Python function,

550
00:06:04,150 --> 00:06:08,560
which is the input function. So for all of that and more, I'll see you there.

551
00:00:00,270 --> 00:00:02,550
Coming back to our Repl.it,

552
00:00:02,760 --> 00:00:07,230
the Day 1 printing repl that you should have from previously,

553
00:00:08,039 --> 00:00:10,410
I want to talk about a different function.

554
00:00:10,530 --> 00:00:15,530
So we've seen the print function and all the things that we can do to strings

555
00:00:15,870 --> 00:00:19,230
and use the print function and debug it.

556
00:00:19,710 --> 00:00:24,090
But what if we wanted to be able to enter some data?

557
00:00:24,630 --> 00:00:26,220
So if we wanted to say,

558
00:00:26,220 --> 00:00:31,020
ask the user 'what is your name?' And we run this code,

559
00:00:31,410 --> 00:00:33,180
you can see that being printed,

560
00:00:33,570 --> 00:00:38,570
but there's no way for the user on this side to be able to give our code some

561
00:00:39,150 --> 00:00:42,270
data to work with. In order to do that,

562
00:00:42,630 --> 00:00:44,970
instead of using the print function,

563
00:00:45,270 --> 00:00:49,500
we're going to use a different function and it's called the input function.

564
00:00:50,250 --> 00:00:52,470
And notice how as I'm typing,

565
00:00:52,710 --> 00:00:57,570
code intelligence is already giving me some suggestions because it thinks it

566
00:00:57,570 --> 00:00:59,670
knows what I might want and it's right.

567
00:01:00,180 --> 00:01:05,069
So this is what the input function looks like. This is the name of the function.

568
00:01:05,459 --> 00:01:09,300
And again, it's followed by some parentheses. Inside the parentheses

569
00:01:09,300 --> 00:01:12,270
is the prompt that I'm going to give the user.

570
00:01:12,990 --> 00:01:16,590
So when I run this code, it will say, what is your name?

571
00:01:17,100 --> 00:01:22,100
And then the cursor will stay at the end of this line because it's expecting

572
00:01:22,950 --> 00:01:27,300
some sort of input. If I give it my name, Angela and I hit enter,

573
00:01:27,720 --> 00:01:32,720
then this piece of data has now been passed back into my code and it now

574
00:01:33,600 --> 00:01:36,360
replaces this part of the code.

575
00:01:36,780 --> 00:01:39,180
So I'm passing data from over here,

576
00:01:39,540 --> 00:01:42,480
back to over here where I can use it in my code.

577
00:01:43,680 --> 00:01:46,890
Now notice the difference here. It looks quite similar.

578
00:01:47,100 --> 00:01:50,940
When we run print, you can see it says what is your name?

579
00:01:51,390 --> 00:01:56,190
and then the code execution ends and we know it ends because it's showing us

580
00:01:56,220 --> 00:01:57,720
this little orange arrow.

581
00:01:58,350 --> 00:02:01,290
But notice when I run input instead,

582
00:02:01,830 --> 00:02:03,570
I don't see the orange arrow.

583
00:02:03,750 --> 00:02:08,750
My program is actually paused right now in order for the user to provide an

584
00:02:09,060 --> 00:02:13,200
input and it's only when I've given the input and hit enter

585
00:02:13,680 --> 00:02:15,090
does the program end.

586
00:02:15,630 --> 00:02:19,890
The input function looks pretty much identical to the print function,

587
00:02:20,280 --> 00:02:21,990
but instead of the word print,

588
00:02:22,080 --> 00:02:26,220
it's just got the word input. And inside the parentheses,

589
00:02:26,460 --> 00:02:29,460
instead of adding what text will be printed,

590
00:02:29,760 --> 00:02:34,620
we're adding the prompt for the user to give them a hint as to what kind of data

591
00:02:34,620 --> 00:02:38,970
we want. And then when you run this code, it will print out the prompt,

592
00:02:39,240 --> 00:02:43,860
but then there will be a cursor. In some places you'll see it like a flashing

593
00:02:43,860 --> 00:02:45,390
cursor, other places,

594
00:02:45,420 --> 00:02:50,420
it'll just be a solid cursor ready for the user to type in some piece of data.

595
00:02:51,630 --> 00:02:54,960
So what can we do with this data? Well,

596
00:02:54,960 --> 00:02:57,450
we can use it inside our code.

597
00:02:58,140 --> 00:03:03,140
Remember how I said once this line of code executes and I've entered Angela as

598
00:03:03,700 --> 00:03:05,200
the response to this input,

599
00:03:05,650 --> 00:03:10,420
then this part of the code gets replaced by whatever it is that the user typed

600
00:03:10,420 --> 00:03:13,000
in. So in this case it becomes Angela.

601
00:03:13,840 --> 00:03:18,840
And what I can do with it is let's say I wanted to print something like,

602
00:03:19,450 --> 00:03:23,470
hello Angela. Well,

603
00:03:23,470 --> 00:03:28,470
then I can simply write Hello + input and then I'm going to close it off

604
00:03:32,440 --> 00:03:34,120
with another set of brackets.

605
00:03:34,990 --> 00:03:37,990
So I'm going to change my layout instead of side by side,

606
00:03:38,020 --> 00:03:39,880
I'm going to change it to stacked.

607
00:03:40,360 --> 00:03:43,870
And this means that I've got my code at the top and my console at the bottom.

608
00:03:44,230 --> 00:03:47,530
This way my line can go a little bit longer without it rapping.

609
00:03:48,190 --> 00:03:49,750
Notice what's happening here.

610
00:03:50,800 --> 00:03:55,800
This is the input function that I showed you earlier on and this is a print

611
00:03:56,020 --> 00:03:56,853
statement.

612
00:03:56,890 --> 00:04:01,890
So we've got this nested inside the other. And now when I run my code,

613
00:04:03,940 --> 00:04:07,240
what happens is it asked me what is your name?

614
00:04:07,420 --> 00:04:10,660
So I'll write my name and then when I hit enter,

615
00:04:11,230 --> 00:04:16,230
this part is replaced by Angela and it gets concatenated to the word hello and

616
00:04:18,790 --> 00:04:21,130
the entire thing gets printed out down here.

617
00:04:21,880 --> 00:04:25,990
If you find this line of code difficult to understand and to wrap your head

618
00:04:25,990 --> 00:04:26,823
around,

619
00:04:26,890 --> 00:04:31,890
then I recommend heading over to a website called thonny.org and downloading an

620
00:04:31,990 --> 00:04:35,980
application called Thonny. It's completely free and it's available for Windows,

621
00:04:35,980 --> 00:04:40,180
Mac, and Linux. And once you've installed this application,

622
00:04:40,540 --> 00:04:45,540
you can go ahead and paste your line of code here and click on this little debug

623
00:04:46,570 --> 00:04:49,750
symbol. And then we can click on this button,

624
00:04:49,840 --> 00:04:54,760
which is called the step into button to step into the execution of this line of

625
00:04:54,760 --> 00:04:55,420
code

626
00:04:55,420 --> 00:05:00,420
to see how the computer is evaluating this code here step by step.

627
00:05:01,090 --> 00:05:04,870
So you'll see the first thing it tries to do is it will try to run this print

628
00:05:04,870 --> 00:05:08,800
statement. It looks inside, these parentheses to see what it needs to print.

629
00:05:09,370 --> 00:05:11,680
So the first thing is this, Hello,

630
00:05:12,100 --> 00:05:17,020
and it turns that into a string and then it looks at the next thing after the

631
00:05:17,020 --> 00:05:19,510
plus sign to see what it should turn this into.

632
00:05:19,930 --> 00:05:24,160
And this of course is the input function. So as I continue stepping into it,

633
00:05:24,520 --> 00:05:26,410
it's actually going to execute it.

634
00:05:26,740 --> 00:05:31,360
So it's going to run this input function and show the prompt, what is your name?

635
00:05:32,050 --> 00:05:33,760
So that's what shows up down here.

636
00:05:34,300 --> 00:05:37,600
And now if I enter a value in here and hit enter,

637
00:05:38,020 --> 00:05:43,020
then that value that I put right there replaces that previous input function

638
00:05:44,800 --> 00:05:47,200
and is now held inside the print statement.

639
00:05:47,740 --> 00:05:52,740
So if I continue stepping through this code then you'll see it concatenates all of

640
00:05:53,320 --> 00:05:57,590
the pieces together, and finally it just ends up with a simple print

641
00:05:57,680 --> 00:06:01,760
Hello Angela! And if I continue stepping into it,

642
00:06:01,820 --> 00:06:06,620
you'll see that line of code executed until there are no more instructions left.

643
00:06:07,160 --> 00:06:10,040
So if you prefer seeing your code, um,

644
00:06:10,070 --> 00:06:13,490
run like this step by step so that you can see what's going on,

645
00:06:13,760 --> 00:06:15,500
then I recommend giving this a go.

646
00:06:16,580 --> 00:06:21,110
But because of how easy it is to share these Repl.it code bases so that we're

647
00:06:21,110 --> 00:06:24,950
working from the same place, I recommend to do most of your coding here

648
00:06:25,130 --> 00:06:30,130
and only if you get stuck to take a single line of code and paste it into Thonny

649
00:06:30,740 --> 00:06:35,630
to see how it's executed step-by-step. As you're learning to code,

650
00:06:35,690 --> 00:06:37,880
there's going to be new concepts covered.

651
00:06:38,090 --> 00:06:41,300
There's going to be things that take a little bit of thinking before you can

652
00:06:41,300 --> 00:06:42,230
understand it.

653
00:06:42,740 --> 00:06:47,740
So what a lot of programmers love to do is they like to comment in their code.

654
00:06:48,200 --> 00:06:48,410
Now,

655
00:06:48,410 --> 00:06:52,210
you might've seen this already throughout the coding exercises and the solutions

656
00:06:52,230 --> 00:06:54,740
I provided. But in Python,

657
00:06:55,280 --> 00:07:00,280
if you wanted a line of text to not be considered by the computer at all,

658
00:07:01,010 --> 00:07:06,010
all you have to do is add the hashtag or pound sign in front of your text and

659
00:07:08,030 --> 00:07:10,370
this turns it into a comment,

660
00:07:10,580 --> 00:07:13,730
so something that the computer will completely ignore.

661
00:07:14,180 --> 00:07:17,840
So in here you can write code as much as you like, um,

662
00:07:17,870 --> 00:07:20,840
but it won't be executed and when you click run,

663
00:07:21,050 --> 00:07:23,270
you'll see that this is completely ignored.

664
00:07:23,960 --> 00:07:28,430
What I recommend is whenever you come across a new concept in the course to make

665
00:07:28,430 --> 00:07:33,430
a comment above it so that you can explain to yourself what's actually going on

666
00:07:34,370 --> 00:07:37,610
in the line of code below. This way

667
00:07:37,640 --> 00:07:41,630
the next time you come across this line of code and you're not quite sure what's

668
00:07:41,630 --> 00:07:42,710
actually happening here,

669
00:07:43,040 --> 00:07:46,730
you can have a look at the notes that you've written for yourself in your own

670
00:07:46,730 --> 00:07:51,050
words and hopefully it'll re-jog your memory and make it much easier to

671
00:07:51,050 --> 00:07:52,280
comprehend what's going on.

672
00:07:53,720 --> 00:07:58,010
In addition to adding a pound sign manually,

673
00:07:58,160 --> 00:08:03,080
you can also highlight a line of code or simply have your cursor on a line of

674
00:08:03,080 --> 00:08:08,080
code and hold down command and forward slash if you're on Mac or control and

675
00:08:09,290 --> 00:08:11,270
forward slash if you're on Windows.

676
00:08:11,630 --> 00:08:14,240
And if you want to go back or undo your changes,

677
00:08:14,540 --> 00:08:19,160
it's simply command +z or control + z. All right,

678
00:08:19,310 --> 00:08:22,490
so in this lesson we learned about input function,

679
00:08:22,760 --> 00:08:27,680
we learned about putting functions inside other functions and being able to get

680
00:08:27,980 --> 00:08:31,790
user input from the console by using the input function.

681
00:08:32,330 --> 00:08:36,020
So now I've got a coding exercise for you in the next lesson,

682
00:08:36,559 --> 00:08:41,210
and if you've commented this line of code thoroughly and you fully understood

683
00:08:41,419 --> 00:08:45,470
how it works, then you'll be able to breeze through the next exercise.

684
00:08:46,010 --> 00:08:48,650
So for all of that and more, I'll see you there.

685
00:00:00,120 --> 00:00:01,380
All right. So again,

686
00:00:01,380 --> 00:00:05,400
it's time to put theory into practice and get some hands-on action.

687
00:00:05,760 --> 00:00:10,560
You should be able to find the day 1.3 assignment which is inputs.

688
00:00:11,070 --> 00:00:15,300
Click on it and you will see the instructions for this particular challenge.

689
00:00:15,720 --> 00:00:18,420
And the idea is that you're going to write a program

690
00:00:18,450 --> 00:00:22,950
that's going to print the number of characters in a user's name. For example,

691
00:00:22,950 --> 00:00:25,980
if I input my name, which is Angela,

692
00:00:26,370 --> 00:00:31,370
it should output the number six because there are six characters in the word,

693
00:00:32,189 --> 00:00:36,390
Angela. But remember you can't just print out the number six,

694
00:00:36,450 --> 00:00:38,430
because when I'm checking for this code,

695
00:00:38,700 --> 00:00:42,720
I'm going to try a whole bunch of different names as the input.

696
00:00:43,170 --> 00:00:46,650
And you're going to have to use a little bit of thinking,

697
00:00:47,010 --> 00:00:51,810
a little bit of Googling and also a little bit of messing around with the code

698
00:00:51,840 --> 00:00:54,570
in order to get it to work. If you need any help,

699
00:00:54,600 --> 00:00:58,140
there's a few hints down here for you. And if you really get stuck,

700
00:00:58,350 --> 00:01:00,390
then you can take a look at the solution,

701
00:01:00,450 --> 00:01:03,510
but not until you've really given it a go. And I really,

702
00:01:03,510 --> 00:01:05,400
really want to know that you've tried hard.

703
00:01:06,330 --> 00:01:09,720
And the whole point of these exercises is you sit there and scratch your head a

704
00:01:09,720 --> 00:01:12,420
little bit and actually give it a good go.

705
00:01:13,410 --> 00:01:17,940
So I'm going to stop talking now and I'm going to let you pause the video and

706
00:01:17,940 --> 00:01:20,160
try to complete this challenge. All right, good luck.

707
00:01:23,610 --> 00:01:27,720
Okay. So how did that go? If you get stuck, I want to tell you

708
00:01:27,990 --> 00:01:32,160
the programmers secret to getting unstuck

709
00:01:32,760 --> 00:01:37,170
which is go and grab yourself a cup of tea, have a quick break,

710
00:01:37,410 --> 00:01:39,240
look at something else for a little moment,

711
00:01:39,480 --> 00:01:42,990
think about something else and then come back to it. Well,

712
00:01:42,990 --> 00:01:46,140
the tea part is optional. Well, at least if you're outside of England,

713
00:01:46,170 --> 00:01:50,640
it's optional. So let's get started solving this challenge.

714
00:01:50,820 --> 00:01:54,810
So the idea is that we're going to create a program that counts the number of

715
00:01:54,810 --> 00:01:57,540
characters in any user's name.

716
00:01:58,050 --> 00:02:02,280
And that name is obviously going to come through an input function,

717
00:02:02,730 --> 00:02:07,350
and then we're going to use a function that calculates the length of a string

718
00:02:07,680 --> 00:02:10,770
and we're going to send that out as the output.

719
00:02:11,850 --> 00:02:15,600
The first thing we'll probably need is some form of input function right?

720
00:02:16,080 --> 00:02:20,460
And the prompt that we're going to give the user is what is your name or

721
00:02:20,490 --> 00:02:23,040
something similar that asks them for their name.

722
00:02:23,520 --> 00:02:28,050
And I like to add a space at the end of the prompt. This way, when you run it,

723
00:02:28,230 --> 00:02:33,180
you don't actually have that cursor straight next to the, um, the question mark

724
00:02:33,180 --> 00:02:37,980
which looks a bit weird. But either way, once we've entered an input,

725
00:02:38,340 --> 00:02:42,390
then this part gets replaced by that input

726
00:02:42,660 --> 00:02:43,950
and we're going to do something with it.

727
00:02:43,980 --> 00:02:47,220
We're going to calculate the length of that string.

728
00:02:47,700 --> 00:02:52,230
Now using our eyes, we can obviously see that it's six characters long.

729
00:02:52,560 --> 00:02:55,770
But what if you have a really a long name?

730
00:02:56,700 --> 00:03:00,940
So let's go ahead and take a look at how we might figure out,

731
00:03:01,300 --> 00:03:05,590
um, how to you get a function that calculates the length of a string.

732
00:03:06,100 --> 00:03:09,520
I've actually included the Google search that you might need to use.

733
00:03:10,300 --> 00:03:13,090
And so let's just paste that URL in here,

734
00:03:13,180 --> 00:03:17,740
and you can see that we're searching for how to get the length of the string in

735
00:03:17,800 --> 00:03:21,400
Python and we're trying to get results from Stack Overflow.

736
00:03:21,820 --> 00:03:26,820
The first result is a question that seems to pretty match match exactly what we

737
00:03:27,040 --> 00:03:31,810
want. And the answer from user 225312

738
00:03:31,810 --> 00:03:36,810
tells us that you need to use the Len function. And the way that you use it

739
00:03:37,630 --> 00:03:41,170
is by passing the string inside the parentheses.

740
00:03:41,740 --> 00:03:45,730
Now this part might look a little bit different from what you're used to with the

741
00:03:45,730 --> 00:03:46,930
equal sign and everything.

742
00:03:47,230 --> 00:03:50,140
But I have confidence that if you mess around with this code,

743
00:03:50,350 --> 00:03:51,790
you'll be able to figure it out.

744
00:03:52,840 --> 00:03:56,320
Just like what we did with print or input,

745
00:03:56,620 --> 00:04:01,620
the Len function also has a set of parentheses and it will work its magic on

746
00:04:03,010 --> 00:04:07,480
whatever it is that we put inside the parentheses. If I just put my name,

747
00:04:07,540 --> 00:04:08,373
Angela here,

748
00:04:08,440 --> 00:04:13,440
let's just comment out the previous line, and I go ahead and print the result of

749
00:04:14,260 --> 00:04:18,700
this and then I hit run, you can see that it prints 6. Now,

750
00:04:18,700 --> 00:04:22,330
if I change that to Jack, then you'll see it prints 4.

751
00:04:22,480 --> 00:04:24,970
So it will print whatever it is

752
00:04:25,000 --> 00:04:29,680
the length of the string that I've put inside the Len function.

753
00:04:30,220 --> 00:04:31,900
So we're getting close now, right?

754
00:04:32,110 --> 00:04:36,160
Because instead of printing out a string that I've hard coded here,

755
00:04:36,550 --> 00:04:40,540
what I want is to take the input that the user has given me.

756
00:04:40,960 --> 00:04:44,500
So something like this. Now, if you want to,

757
00:04:44,500 --> 00:04:49,390
you can actually add some spaces inside here just to make it a little bit

758
00:04:49,390 --> 00:04:54,390
clearer to yourself as to what's actually going on because there's three

759
00:04:54,610 --> 00:04:57,490
functions here. They are all nested inside each other.

760
00:04:57,910 --> 00:04:59,680
So this is the first one,

761
00:04:59,680 --> 00:05:03,430
this is the one that is going to get the input from the user and replace this

762
00:05:03,430 --> 00:05:06,250
part with whatever it is that they type down here.

763
00:05:06,910 --> 00:05:11,910
Then that string gets calculated using the Len function to get the length of

764
00:05:12,610 --> 00:05:16,990
that string. And then that number will get printed by the print function.

765
00:05:18,190 --> 00:05:21,640
Now let's go ahead and hit run and let's give it a go.

766
00:05:21,730 --> 00:05:24,550
So let's try Jack, hit enter.

767
00:05:24,790 --> 00:05:27,130
And it tells us that it's 4.

768
00:05:27,700 --> 00:05:29,830
But using the same line of code,

769
00:05:29,950 --> 00:05:34,180
if we try a different name Angela, then it prints out six.

770
00:05:34,930 --> 00:05:37,960
How did you get on with this? If you got stuck,

771
00:05:38,110 --> 00:05:42,160
then have a look at the solution Repl.it um,

772
00:05:42,190 --> 00:05:46,480
where you will be able to find the code that I've written here and a little bit

773
00:05:46,480 --> 00:05:47,890
of explanation as well.

774
00:05:48,730 --> 00:05:51,790
The important thing is that you really play around with this code.

775
00:05:52,150 --> 00:05:57,150
Try things and make it break and make it work and just get it to do what you

776
00:05:58,610 --> 00:05:59,443
want it to do.

777
00:06:00,020 --> 00:06:05,020
And remember that if you ever want to visualize these things and the order of

778
00:06:06,200 --> 00:06:10,700
execution, then you can always use Thonny to see that.

779
00:06:10,880 --> 00:06:12,620
So let's go ahead and step in.

780
00:06:13,010 --> 00:06:17,420
You'll see that it goes through Len, input, and then it's going to carry out this

781
00:06:17,450 --> 00:06:21,650
functionality input. I gave it my name, hit enter.

782
00:06:22,250 --> 00:06:25,580
Then it puts that inside the Len function like so,

783
00:06:25,880 --> 00:06:28,040
so now the next step is this part.

784
00:06:28,280 --> 00:06:30,590
We're going to calculate the length of this string.

785
00:06:31,100 --> 00:06:34,490
And as I continue stepping into it, you can see that become six.

786
00:06:34,820 --> 00:06:37,430
And finally we're gonna carry out the final instruction,

787
00:06:37,460 --> 00:06:41,870
which is just to print six down here. Again,

788
00:06:42,050 --> 00:06:45,890
this can be quite useful just to visualize all the steps that are happening

789
00:06:46,460 --> 00:06:47,293
if you want to.

790
00:06:48,260 --> 00:06:52,490
Once you're done, head over to the next lesson and I'm going to talk to you

791
00:06:52,730 --> 00:06:57,730
all about Python variables and how we'll be able to identify pieces of data in

792
00:06:58,070 --> 00:07:01,520
our code. So for all of that, and more, I'll see you there.

793
00:00:00,400 --> 00:00:05,320
Now in this lesson, I want to talk to you about Python variables and it's a

794
00:00:05,320 --> 00:00:09,220
really, really useful concept. But before we get started,

795
00:00:09,370 --> 00:00:14,370
first I want you to head over to the course resources and get hold of the Day

796
00:00:15,820 --> 00:00:20,820
1 variables start Repl.it sandbox or you can simply type the URL into the

797
00:00:22,330 --> 00:00:23,163
browser.

798
00:00:23,380 --> 00:00:28,380
I want you to first go ahead and fork this starting code so that you can work on

799
00:00:28,750 --> 00:00:31,990
your own version of it. Now once you've done that,

800
00:00:32,140 --> 00:00:37,140
then the first thing I want to do is to take a look at this line of code that

801
00:00:37,930 --> 00:00:41,830
you should have already. And when we run this,

802
00:00:41,860 --> 00:00:44,260
we should be pretty familiar with what happens, right?

803
00:00:44,260 --> 00:00:48,700
It will ask us for our name and when we hit enter, nothing happens.

804
00:00:49,060 --> 00:00:50,770
But behind the scenes,

805
00:00:51,160 --> 00:00:56,160
this name or this input has now been received by this function.

806
00:00:57,550 --> 00:01:02,020
But once that's done, it kind of just disappears, right?

807
00:01:02,680 --> 00:01:07,680
And there's no way for us to be able to refer to it in the future. Or is there?

808
00:01:10,980 --> 00:01:13,920
Well, this is where variables come in really handy.

809
00:01:14,520 --> 00:01:18,150
If I give the results of this action a name,

810
00:01:18,390 --> 00:01:20,940
well then I'll be able to refer to it later on.

811
00:01:21,540 --> 00:01:23,850
So at the beginning of the line,

812
00:01:23,940 --> 00:01:27,630
I'm going to call it name and then I'm going to add an equal sign

813
00:01:28,170 --> 00:01:33,170
and what this does is it assigns whatever it is that the user typed in as the

814
00:01:33,600 --> 00:01:38,600
input to this prompt to a variable called name.

815
00:01:40,350 --> 00:01:45,350
So now if I go ahead and run my code again and I enter a name,

816
00:01:47,970 --> 00:01:49,980
now once I hit enter,

817
00:01:50,040 --> 00:01:53,910
normally there's no way for me to get hold of this anymore, right?

818
00:01:54,480 --> 00:01:58,800
But now I can actually go ahead and write print.

819
00:01:59,220 --> 00:02:02,580
I'm going to print the value of this variable name.

820
00:02:03,300 --> 00:02:07,170
So now if I run my code and I write a name,

821
00:02:07,560 --> 00:02:08,393
hit enter,

822
00:02:08,759 --> 00:02:13,760
you'll see that this gets printed and I can use this at any point in my code

823
00:02:14,760 --> 00:02:19,760
just by referring to the name that's attached to this value.

824
00:02:21,510 --> 00:02:26,510
So it's almost like we've saved the data from this action to a name.

825
00:02:29,760 --> 00:02:33,660
And if you think about it, if you had a phone book, let's say,

826
00:02:33,660 --> 00:02:37,080
and you just jotted down the numbers of people,

827
00:02:37,560 --> 00:02:39,120
the next time you look at this,

828
00:02:39,150 --> 00:02:43,110
there's no way for you to know who's number that is, right?

829
00:02:43,740 --> 00:02:46,560
In a sense it's the same thing with the computer.

830
00:02:47,100 --> 00:02:50,160
Even though we've inputted this piece of data,

831
00:02:50,310 --> 00:02:55,310
there's no way for us to be able to refer to this data unless we give it a name.

832
00:02:56,760 --> 00:03:01,760
So in our phone book, we might say that this particular number is associated with

833
00:03:02,410 --> 00:03:07,410
the name James. And in programming we would call this name James a variable.

834
00:03:09,400 --> 00:03:14,400
So we could write something like James equals and then his phone number.

835
00:03:15,400 --> 00:03:19,360
And this means that in the future, if we ever need this piece of data,

836
00:03:19,570 --> 00:03:22,480
we can just refer to it by its name,

837
00:03:23,020 --> 00:03:25,900
the variable name of James. Now,

838
00:03:25,960 --> 00:03:28,750
as the name variable suggests,

839
00:03:29,470 --> 00:03:33,670
it's something that can be changed or can be varied.

840
00:03:34,270 --> 00:03:35,530
So for example,

841
00:03:35,650 --> 00:03:40,480
just because this name is set to something up here doesn't mean that I can't

842
00:03:40,480 --> 00:03:43,840
change it later on. So to make things simple,

843
00:03:43,840 --> 00:03:48,610
let's go ahead and delete the input function and let's just say name is equal to

844
00:03:48,610 --> 00:03:50,110
Jack. Print name.

845
00:03:50,320 --> 00:03:55,320
When I run that Jack is what gets printed inside the console because I'm now

846
00:03:55,720 --> 00:03:59,290
referring to that piece of data by the variable name.

847
00:04:00,100 --> 00:04:05,100
But if later on I decide to give this variable a different piece of data to hold

848
00:04:06,010 --> 00:04:06,843
on to,

849
00:04:07,000 --> 00:04:12,000
let's say Angela and I print name at this time point after I've changed it,

850
00:04:15,760 --> 00:04:18,850
what do you think these two lines will print?

851
00:04:19,450 --> 00:04:21,190
What do you think will first be printed?

852
00:04:21,250 --> 00:04:25,990
What do you think will be printed second? Let's hit command + enter or control +

853
00:04:25,990 --> 00:04:27,790
enter and see for ourselves.

854
00:04:28,390 --> 00:04:33,390
So even though they're both printing the same variable, at this point when we first

855
00:04:34,810 --> 00:04:38,080
call print, it's holding on to the value of Jack,.

856
00:04:38,500 --> 00:04:43,500
But by line 5 I've now changed it so that it's holding onto the value of

857
00:04:43,780 --> 00:04:44,613
Angela.

858
00:04:45,550 --> 00:04:50,550
This makes it a lot easier when we want to write code like what we did before.

859
00:04:51,250 --> 00:04:51,880
For example,

860
00:04:51,880 --> 00:04:55,750
this is the line of code that we had before and we knew that we were going to

861
00:04:55,750 --> 00:05:00,750
get a piece of data from this input function and then we would calculate a new

862
00:05:02,050 --> 00:05:04,510
piece of data using the Len function

863
00:05:04,990 --> 00:05:07,540
and finally we're going to print everything out.

864
00:05:08,320 --> 00:05:12,670
Instead of having such a long line of code, which can be quite confusing,

865
00:05:13,120 --> 00:05:18,100
we can, if we wanted to, use variables to store each of these steps.

866
00:05:18,550 --> 00:05:19,390
So for example,

867
00:05:19,390 --> 00:05:24,390
we could say that the name was equal to whatever the user inserted as the

868
00:05:25,120 --> 00:05:25,953
input

869
00:05:26,530 --> 00:05:30,310
and then when we wanted to calculate the length,

870
00:05:30,730 --> 00:05:35,680
then we could set that variable to equal the Len function.

871
00:05:36,070 --> 00:05:41,070
And then inside the parentheses, we'll pass in the name, the value, that's stored

872
00:05:41,800 --> 00:05:45,580
in the name variable right here. And finally,

873
00:05:45,820 --> 00:05:50,710
all that we need to do is to print the length,

874
00:05:53,620 --> 00:05:56,470
like so. So in this case,

875
00:05:56,840 --> 00:06:01,840
this data is stored under this name and then that data is what's going to be

876
00:06:02,360 --> 00:06:04,940
used in order to carry out this function

877
00:06:05,510 --> 00:06:08,780
and then the result will get stored in yet another variable

878
00:06:09,110 --> 00:06:11,360
and finally that variable will be printed out.

879
00:06:11,870 --> 00:06:16,870
So let's go ahead and run this code and type in my name.

880
00:06:17,090 --> 00:06:21,950
So Angela and hit enter and it does exactly the same thing,

881
00:06:22,460 --> 00:06:27,460
but now we've got all of these pieces of data all associated with a name that we

882
00:06:29,450 --> 00:06:34,160
can refer to at any later point in our code. Now it's time,

883
00:06:34,190 --> 00:06:36,560
you guessed it, for a code challenge.

884
00:06:36,860 --> 00:06:39,500
And I'm going to get you to apply what you've learned.

885
00:06:39,800 --> 00:06:42,860
So for all of that and more, I'll see you on the next lesson.

886
00:00:00,450 --> 00:00:04,500
All right guys, it's time for your final coding exercise.

887
00:00:04,950 --> 00:00:08,010
So click on day 1.4 variables.

888
00:00:09,690 --> 00:00:14,690
Now the aim of the game is to switch the values of these two variables around.

889
00:00:18,630 --> 00:00:21,540
So if we go ahead and run our code as it is,

890
00:00:21,690 --> 00:00:25,320
it's going to ask us for a value of a. Let's call it five.

891
00:00:25,920 --> 00:00:30,330
And then it's going to ask us a value for b. Let's call that a hundred.

892
00:00:30,870 --> 00:00:32,520
And then when I hit enter,

893
00:00:32,670 --> 00:00:37,670
what you want the code to do is to go ahead and print a equals 100 and b equals

894
00:00:40,680 --> 00:00:41,513
five.

895
00:00:41,670 --> 00:00:46,620
So, basically switch those values around. And you're going to have to write your

896
00:00:46,620 --> 00:00:49,680
code in here. And it's really,

897
00:00:49,680 --> 00:00:54,680
really important that you don't change any of the code here or the code here.

898
00:00:55,770 --> 00:01:00,770
Now it's easy enough to simply just write print a equals b and b equals a.

899
00:01:04,500 --> 00:01:08,730
But this doesn't test you on anything. This is not the solution.

900
00:01:08,730 --> 00:01:13,200
This is wrong. Don't change the code here, don't change the code here.

901
00:01:13,230 --> 00:01:14,040
Instead, all

902
00:01:14,040 --> 00:01:19,040
you have are these lines where you can write as much code or as little code as

903
00:01:19,320 --> 00:01:23,340
you need to achieve this end. And when you achieve it,

904
00:01:23,370 --> 00:01:24,990
it should look something like this.

905
00:01:25,020 --> 00:01:29,430
You type a value for a, you type a value for b. And when you hit enter,

906
00:01:29,670 --> 00:01:30,750
they get printed out,

907
00:01:30,750 --> 00:01:34,950
but switched around. Have a think about how variables work,

908
00:01:35,250 --> 00:01:39,210
how they store data. And if you get really stuck,

909
00:01:39,240 --> 00:01:43,440
imagine that you have two cups; one holds a cup of milk, one

910
00:01:43,440 --> 00:01:44,610
holds a cup of coffee,

911
00:01:44,880 --> 00:01:49,290
and you wanna switch the contents of the cup around. How would you do that in

912
00:01:49,290 --> 00:01:53,460
real life? And then try and see if you can apply that logic to the code.

913
00:01:54,090 --> 00:01:56,130
Pause the video now and give this a go.

914
00:02:00,930 --> 00:02:04,050
All right. So I hope you didn't cheat

915
00:02:04,170 --> 00:02:08,340
and instead you actually had a think about this problem. If you got stuck,

916
00:02:08,370 --> 00:02:09,330
remember how I said

917
00:02:09,360 --> 00:02:13,170
if you have a cup of coffee and you have a cup of milk and you wanna switch the

918
00:02:13,170 --> 00:02:18,090
contents of the cups around, how would you do this in real life? Well,

919
00:02:18,120 --> 00:02:21,570
you would probably get a third cup, right?

920
00:02:22,320 --> 00:02:25,410
And then you'd be able to shift the contents around.

921
00:02:25,920 --> 00:02:28,980
So that's exactly what we're going to do with our code as well.

922
00:02:29,880 --> 00:02:34,880
We can create a new variable called c and we can set that to equal the value that's

923
00:02:36,510 --> 00:02:39,960
stored inside a. And then later on,

924
00:02:40,170 --> 00:02:45,170
we can get the variable a to store the value that's currently inside b.

925
00:02:46,590 --> 00:02:47,700
And finally,

926
00:02:47,730 --> 00:02:52,730
we're now ready to get b to store the value that was previously inside a,

927
00:02:53,640 --> 00:02:58,640
which is now contained inside the variable c. These three lines achieve this

928
00:02:59,530 --> 00:03:01,360
little switch rule that we've got here.

929
00:03:01,990 --> 00:03:06,610
And this is one of the most common Programming interview questions that you will

930
00:03:06,610 --> 00:03:09,610
come across. And the code is super simple,

931
00:03:10,060 --> 00:03:13,630
but what you have to apply here is some logic.

932
00:03:13,810 --> 00:03:16,030
And I usually think about real life examples

933
00:03:16,030 --> 00:03:18,850
like the cups and I hope that helped you as well.

934
00:03:19,390 --> 00:03:21,790
If this was at all confusing,

935
00:03:22,150 --> 00:03:25,240
then have a go at trying this out in Thonny.

936
00:03:25,840 --> 00:03:28,570
But if you got it right, then congratulations.

937
00:03:28,570 --> 00:03:30,910
This was actually quite a hard challenge.

938
00:03:31,150 --> 00:03:35,440
You had to think about a lot of things and think outside the box as well.

939
00:03:35,890 --> 00:03:38,050
So give yourself a pat on the back if you've got it right.

940
00:03:38,470 --> 00:03:39,640
If you didn't get it right,

941
00:03:39,640 --> 00:03:44,640
then I really recommend to put this code inside Thonny and see how it's being

942
00:03:45,430 --> 00:03:47,110
moved around so that you really,

943
00:03:47,110 --> 00:03:49,510
really understand what's going on behind the scenes.

944
00:03:50,440 --> 00:03:55,150
And then you can move on to the next lesson where we're going to talk about some

945
00:03:55,150 --> 00:03:59,080
of the rules around naming variables. For all of that

946
00:03:59,230 --> 00:04:00,400
and more, I'll see you there.

947
00:00:00,430 --> 00:00:03,310
Now when it comes to naming your variables,

948
00:00:03,610 --> 00:00:06,580
you can pretty much call it whatever it is you want.

949
00:00:07,270 --> 00:00:09,010
So instead of calling this name,

950
00:00:09,370 --> 00:00:14,370
I could have just called it n and I could have called this l and as long as I'm

951
00:00:14,920 --> 00:00:15,790
consistent.

952
00:00:15,880 --> 00:00:20,880
So if I wanted to get the length of N then I would have to change this as well.

953
00:00:21,940 --> 00:00:25,960
And if I wanted to print out L then I have to change this as well.

954
00:00:26,590 --> 00:00:29,260
But there's a couple of rules that you should probably follow.

955
00:00:29,350 --> 00:00:34,350
And the most important one is to make your code readable. Because if you come

956
00:00:35,800 --> 00:00:38,830
back to this in six months, 12 months,

957
00:00:39,280 --> 00:00:42,730
N and L is not going to have a lot of meaning for you.

958
00:00:43,150 --> 00:00:46,450
So try to make sure that it actually makes sense to you.

959
00:00:47,590 --> 00:00:48,670
And if you want to,

960
00:00:48,670 --> 00:00:52,630
you can actually have multiple words in the name of your variable.

961
00:00:52,960 --> 00:00:55,900
So for example, if you wanted to call this username,

962
00:00:56,260 --> 00:01:00,610
then you would write the word user and then you would separate each of the words

963
00:01:00,820 --> 00:01:05,680
with an underscore. But you can't have a space in between.

964
00:01:05,710 --> 00:01:10,030
This is not valid code and if you try to run it, you'll get a syntax error.

965
00:01:10,840 --> 00:01:15,840
So the name of the variable has to be one single unit and in order to separate

966
00:01:16,810 --> 00:01:19,300
words in Python, we use the underscore.

967
00:01:20,080 --> 00:01:23,500
Now if you want to use numbers in the name of your variable,

968
00:01:23,500 --> 00:01:25,870
you can. So for example, length1,

969
00:01:25,870 --> 00:01:30,870
length2. But they can't be at the beginning of the name of the variables.

970
00:01:31,630 --> 00:01:35,200
You can't say 1length or 3length.

971
00:01:35,530 --> 00:01:39,850
That will generate a syntax error as well. Finally,

972
00:01:40,360 --> 00:01:43,720
there's certain privileged words that we use, for example,

973
00:01:43,720 --> 00:01:47,560
the names of our functions like print and input.

974
00:01:48,040 --> 00:01:53,040
And it's usually good practice to not use them as the names of your variables

975
00:01:53,530 --> 00:01:57,430
because you can see that syntax highlighting gets messed up because it thinks

976
00:01:57,670 --> 00:02:00,130
that is actually input function you're trying to create.

977
00:02:00,460 --> 00:02:04,330
And even though often when you run your app, it might not have any issues,

978
00:02:04,540 --> 00:02:07,600
this is really bad practice because it's very confusing.

979
00:02:08,680 --> 00:02:12,430
So try to make sure that all the names of your variables get highlighted,

980
00:02:12,670 --> 00:02:15,760
like the other variables in the same color. Now,

981
00:02:15,790 --> 00:02:20,170
the final thing to remember is that if you decide to call your variable this

982
00:02:20,170 --> 00:02:25,170
particular name, n-a-m-e, and at a later point you make a typo and you spell it

983
00:02:26,380 --> 00:02:31,090
wrong, so maybe instead of name you said nama,

984
00:02:31,780 --> 00:02:36,640
this is not going to work and when you run your code you'll get what's called a

985
00:02:36,670 --> 00:02:41,670
name error because it says this name is not defined. And the idea is that you

986
00:02:43,390 --> 00:02:48,390
would look at where the error is, line 2, print nama and you'll see,

987
00:02:49,090 --> 00:02:51,880
Oh that's not right. It's meant to be spelled n-a-

988
00:02:52,090 --> 00:02:57,090
m-e. So you'll have to go and fix it in order for your code to work.

989
00:02:58,000 --> 00:03:02,800
Now remember that this is not because Python is doing any sort of spell-checking

990
00:03:02,800 --> 00:03:06,730
for you. It's like, Oh, that's not how you spell name. No. In fact,

991
00:03:06,850 --> 00:03:11,850
if you decided to call this nama and you, later on, used it as name,

992
00:03:13,090 --> 00:03:16,000
there's no problems, there's no issues, no errors,.

993
00:03:16,690 --> 00:03:18,670
As long as it's consistent,

994
00:03:19,060 --> 00:03:23,830
this is the name that's associated with this piece of data. Later on,

995
00:03:23,830 --> 00:03:28,780
when you want to use this piece of data, you use this name to refer to it.

996
00:03:29,180 --> 00:03:32,290
And as long as these two spellings are identical,

997
00:03:32,500 --> 00:03:34,660
then the computer doesn't care at all.

998
00:03:35,230 --> 00:03:38,290
So when you get a name error in your code,

999
00:03:38,350 --> 00:03:43,350
you now know it's probably because you've misspelled or mistyped one of the

1000
00:03:43,570 --> 00:03:47,950
variable names somewhere in your code. Now in the next lesson,

1001
00:03:48,040 --> 00:03:52,510
I prepared a quiz for you where you'll get to select which variable names are

1002
00:03:52,540 --> 00:03:55,390
valid and which ones are not good practice.

1003
00:03:55,720 --> 00:03:58,060
Have a go at that over on the next lesson.

1004
00:00:00,330 --> 00:00:06,689
All right, guys, it's time for the final project of today. So the program that you're going to be

1005
00:00:06,689 --> 00:00:12,360
building looks a little bit like this. And you can check it out if you head over to this link, either

1006
00:00:12,360 --> 00:00:18,320
by typing it in or heading to the resources page and clicking on the corresponding link.

1007
00:00:18,840 --> 00:00:27,330
But essentially, it's a band name generator. And it asks you for a city that you grew up in and the name of your

1008
00:00:27,330 --> 00:00:27,770
pet.

1009
00:00:28,080 --> 00:00:32,080
And then it combines those together and gives you the name of your band.

1010
00:00:32,700 --> 00:00:34,290
There's a couple of things to note here.

1011
00:00:34,300 --> 00:00:41,980
Firstly is notice when this input got triggered, the cursor actually showed up on a new line.

1012
00:00:42,000 --> 00:00:46,010
So if I run this again, you can see it says "What's the name of city you grew up in?"

1013
00:00:46,020 --> 00:00:48,600
And then the cursor is on the next line.

1014
00:00:49,380 --> 00:00:54,540
And what I want you to do is to go ahead and head over to this starting project.

1015
00:00:55,050 --> 00:00:56,490
So this is the URL

1016
00:00:56,490 --> 00:00:59,490
and it's also, of course, in the course resources.

1017
00:00:59,910 --> 00:01:05,080
And once you head over here, you can fork this code and complete your own version.

1018
00:01:05,430 --> 00:01:08,580
So there's a couple of steps in here as hints.

1019
00:01:09,030 --> 00:01:14,010
If you don't want to see these and you just want to go by the end project, you can also just delete

1020
00:01:14,010 --> 00:01:14,640
all of these.

1021
00:01:15,180 --> 00:01:21,270
But the important thing is once you've completed this project, it should work exactly the same as the

1022
00:01:21,270 --> 00:01:22,550
one that you see here.

1023
00:01:23,190 --> 00:01:28,230
And in order to do this, you're going to have to apply everything that you learned today, including

1024
00:01:28,230 --> 00:01:34,960
printing inputs, variables, new lines, string manipulation, debugging and a whole lot more.

1025
00:01:35,310 --> 00:01:41,790
So this is a time to grab yourself a cup of tea 🍵 or coffee ☕️, pause the video and tackle this final project.

1026
00:01:46,510 --> 00:01:52,270
All right, guys, I hope you gave that a go and you were able to complete it. If you want to see how

1027
00:01:52,270 --> 00:01:57,970
I've implemented it or if you want to just check to see if you have any errors or if there's something

1028
00:01:57,970 --> 00:02:02,520
that you're unsure about, then continue watching and I'll go through the solution with you.

1029
00:02:03,920 --> 00:02:09,800
The first step is to create a greeting for your program, in our case, it says "Welcome to the band

1030
00:02:09,800 --> 00:02:10,720
name generator."

1031
00:02:11,090 --> 00:02:13,240
So that's exactly what I'm going to create.

1032
00:02:13,490 --> 00:02:16,720
And we print these messages using the print function.

1033
00:02:17,210 --> 00:02:22,610
So I'm going to say "Welcome to the band name generator."

1034
00:02:24,110 --> 00:02:27,560
And this when I run, it will just print that message.

1035
00:02:29,690 --> 00:02:35,330
Now, the next step is to ask the user for the city that they grew up in. So in order to get some input

1036
00:02:35,330 --> 00:02:38,540
from the user will need, of course, the input function.

1037
00:02:38,870 --> 00:02:46,820
And we're going to ask them using the prompt, which goes inside the parentheses: "Which city did you

1038
00:02:46,820 --> 00:02:49,040
grow up in?"

1039
00:02:49,610 --> 00:02:56,770
So now when I hit run, it's going to ask me for the city that I grew up in and I'm able to add a reply

1040
00:02:57,020 --> 00:02:57,620
like so.

1041
00:02:58,850 --> 00:03:06,080
Now, that data is just going to be lost to thin air unless I capture it and I give it a name, so I'm

1042
00:03:06,080 --> 00:03:09,920
going to have to create a variable to hold onto the data that the user inputted.

1043
00:03:10,280 --> 00:03:16,190
So we'll just call that "city" and then add the equal sign (=) to assign whatever it is that the user typed

1044
00:03:16,190 --> 00:03:18,200
in to this variable name.

1045
00:03:19,010 --> 00:03:27,680
And now I have access to the city variable and I can print it or use it later on if I want to, like so.

1046
00:03:30,770 --> 00:03:35,260
Now, the next step is to ask the user for the name of a pet.

1047
00:03:35,390 --> 00:03:41,840
So we'll call that variable "pet" and we'll assign it the value that the user inputs for:

1048
00:03:42,170 --> 00:03:45,140
"What is the name of a pet?"

1049
00:03:46,810 --> 00:03:52,030
Now, step 4 is to combine the name of the city and the pet and show them their band name.

1050
00:03:52,060 --> 00:03:55,860
Now, there's quite a few ways of doing this, especially if you look around on the Internet.

1051
00:03:56,230 --> 00:04:00,690
But the way that you learn in today's lessons is using string concatenation.

1052
00:04:01,120 --> 00:04:02,150
So we're going to do that.

1053
00:04:02,200 --> 00:04:07,540
So we're going to use a print statement and tell them "Your band name could be..."

1054
00:04:08,500 --> 00:04:17,410
And then we're going to add the name of the city and then add a space and then add the name of their

1055
00:04:17,410 --> 00:04:17,800
pet.

1056
00:04:18,610 --> 00:04:20,769
So now when we run our code

1057
00:04:20,769 --> 00:04:29,590
it will ask us for the name of their city and then the name of a pet, and then it should combine those

1058
00:04:29,590 --> 00:04:31,960
together and show us the name of our band.

1059
00:04:32,560 --> 00:04:39,180
Now, the final step is that the input cursor should show on a new line like this.

1060
00:04:39,190 --> 00:04:40,650
So here's the cursor.

1061
00:04:40,660 --> 00:04:42,220
But here's the input.

1062
00:04:42,550 --> 00:04:48,700
Just so that you get a bit of space and you're not typing it in directly after the prompt here like

1063
00:04:48,700 --> 00:04:49,360
what we have.

1064
00:04:49,900 --> 00:04:51,160
So how do we do that?

1065
00:04:51,430 --> 00:04:57,610
Well, you learned about modifying strings by creating a new line using the \n.

1066
00:04:58,150 --> 00:05:03,220
And we can add that both to the end of the city input and the pet input.

1067
00:05:03,530 --> 00:05:10,930
And now when we run our code, you'll see that the cursor now shows up on the next line and our program

1068
00:05:10,930 --> 00:05:12,130
looks a lot better.

1069
00:05:13,780 --> 00:05:15,030
So there you have it.

1070
00:05:15,310 --> 00:05:22,030
This is how you solve this boss challenge and this is how you create the band name generator project.

1071
00:05:22,480 --> 00:05:28,480
So I hope you had fun with me today, learning Python and a lot of the fundamentals of Python.

1072
00:05:28,930 --> 00:05:36,280
And tomorrow I've got another jam packed module of really awesome tutorials and challenges and projects

1073
00:05:36,280 --> 00:05:37,570
for you to sink your teeth into!

1074
00:05:38,080 --> 00:05:42,970
I'm looking forward to seeing you tomorrow, so I have a rest now and let your brain 🧠 work on the things

1075
00:05:42,970 --> 00:05:44,200
that you learned while you sleep.

1076
00:05:44,620 --> 00:05:46,750
And I'll see you here bright and early.

1077
00:05:46,810 --> 00:05:48,150
Good night and see you tomorrow.




1078
00:00:00,220 --> 00:00:05,170
Hey guys, welcome back to Day 2 of 100 Days of code.

1079
00:00:05,830 --> 00:00:09,670
In today's lessons, you're going to be learning about datatypes, numbers,

1080
00:00:09,670 --> 00:00:13,630
operations, type conversion, f-strings, and a whole lot more.

1081
00:00:14,110 --> 00:00:16,540
And by the end of today,

1082
00:00:16,570 --> 00:00:20,650
you will have learned enough to build a tip calculator.

1083
00:00:21,100 --> 00:00:24,760
So it looks a bit like this. It says, welcome to the tip calculator.

1084
00:00:25,060 --> 00:00:27,910
It asks you for the total bill that you need to pay.

1085
00:00:28,240 --> 00:00:33,240
So let's say it came to $124.54 we hit enter and then it asks you how many

1086
00:00:37,150 --> 00:00:39,400
people do you want to split the bill between?

1087
00:00:39,760 --> 00:00:44,590
So let's say this five of us having the meal and it asks you finally,

1088
00:00:44,890 --> 00:00:47,170
what percentage tip would you like to give?

1089
00:00:47,530 --> 00:00:50,530
So let's say we give a 12% tip.

1090
00:00:51,250 --> 00:00:54,460
Now it's going to calculate what each person should pay,

1091
00:00:54,670 --> 00:00:58,270
taking into account all of these pieces of information that you've put in.

1092
00:00:58,810 --> 00:01:01,570
So I know that I'm pretty bad at math,

1093
00:01:01,630 --> 00:01:03,550
especially when it comes to splitting bills.

1094
00:01:04,060 --> 00:01:06,700
And I'm normally the person who just says, yeah,

1095
00:01:06,700 --> 00:01:09,910
just tell me what I need to pay so I don't have to calculate it.

1096
00:01:10,300 --> 00:01:13,510
It's like the bad-at-math tax that I pay.

1097
00:01:14,110 --> 00:01:17,530
But in order to build this, you're going to need to learn some new skills,

1098
00:01:17,860 --> 00:01:22,750
including working with numbers, converting data types from one type to another,

1099
00:01:23,200 --> 00:01:27,790
and a whole lot more. So if you feel like you can tackle this, no problems.

1100
00:01:28,060 --> 00:01:30,760
Then feel free to skip today's lessons.

1101
00:01:31,030 --> 00:01:35,170
But I bet that there'll be loads of stuff that you'll come across in the

1102
00:01:35,170 --> 00:01:39,670
upcoming lessons and coding exercises that's really going to make you a better

1103
00:01:39,670 --> 00:01:42,760
developer. So once you're ready to get started,

1104
00:01:42,970 --> 00:01:45,730
head over to the next lesson and let's start coding.

1105
00:00:00,070 --> 00:00:05,070
Yesterday you saw that we could use the Len function to get the number of

1106
00:00:05,410 --> 00:00:09,640
characters in a string. So for example, when I write Len,

1107
00:00:09,670 --> 00:00:12,580
hello and I print this out,

1108
00:00:13,360 --> 00:00:17,500
we end up with 5. There's 5 characters in the string hello.

1109
00:00:18,280 --> 00:00:19,570
Now here's a question.

1110
00:00:20,170 --> 00:00:25,170
What happens if instead of counting the number of characters in a string,

1111
00:00:26,200 --> 00:00:31,200
what if I put in a number instead and I wanted to know how many digits are in

1112
00:00:31,780 --> 00:00:35,800
this number? Now if I go ahead and run this code,

1113
00:00:35,980 --> 00:00:37,810
you'll see that it actually crashes.

1114
00:00:38,260 --> 00:00:43,260
I get a whole bunch of red text and it tells me that there is a type error and

1115
00:00:44,380 --> 00:00:49,150
something about the type int. So what is all of this about?

1116
00:00:49,840 --> 00:00:54,370
Well, in order to understand it, we first have to learn about data types.

1117
00:00:55,120 --> 00:00:59,680
Now on day 1, we already explored this data type called strings.

1118
00:01:00,100 --> 00:01:03,760
Now you're probably not going to be surprised to learn that there's a whole lot

1119
00:01:03,760 --> 00:01:05,770
more other data types out there.

1120
00:01:06,250 --> 00:01:11,140
And today we're going to explore some of the most important and some of the most

1121
00:01:11,140 --> 00:01:15,820
basic data types such as strings, integers, float, and booleans.

1122
00:01:16,270 --> 00:01:18,580
And we'll explore each of these in detail.

1123
00:01:19,300 --> 00:01:24,300
So go ahead and get hold of the day 2 start coding sandbox and go ahead and

1124
00:01:25,540 --> 00:01:29,050
fork your own copy of it. Now once you've done that,

1125
00:01:29,110 --> 00:01:31,360
let's take a look at some of the data types.

1126
00:01:31,480 --> 00:01:34,240
So we already learned about strings, right?

1127
00:01:34,360 --> 00:01:38,650
And we know that this is just a string of characters.

1128
00:01:38,980 --> 00:01:43,980
So the word hello is comprised of these five characters strung together.

1129
00:01:44,320 --> 00:01:47,680
And we always know that strings, when we create them,

1130
00:01:47,890 --> 00:01:49,960
we have to create them with these double quotes around.

1131
00:01:50,440 --> 00:01:53,110
Now because this is a string of characters,

1132
00:01:53,470 --> 00:01:58,390
we can actually pull out each character individually. So we could, for example,

1133
00:01:58,570 --> 00:02:02,890
instead of just writing hello, we can add some square brackets.

1134
00:02:03,280 --> 00:02:06,220
So take a look on your keyboard and see where those are.

1135
00:02:06,730 --> 00:02:11,730
And inside the square brackets, we can put the index or the position of the

1136
00:02:12,730 --> 00:02:15,010
character that we want. So, for example,

1137
00:02:15,010 --> 00:02:19,390
if I wanted to have the first character out of this word hello,

1138
00:02:19,420 --> 00:02:21,310
I would put zero right here.

1139
00:02:21,910 --> 00:02:26,350
And if I go ahead and print what this actually will give me,

1140
00:02:26,800 --> 00:02:31,800
you'll see that you get capital H because that is the first character of this

1141
00:02:32,890 --> 00:02:33,723
string.

1142
00:02:33,970 --> 00:02:38,140
And it's really important to remember that programmers always start counting

1143
00:02:38,140 --> 00:02:42,190
from zero because we work with binary, zeros and ones.

1144
00:02:42,460 --> 00:02:46,810
So whenever you want to get hold of the first character or the first of

1145
00:02:46,810 --> 00:02:49,480
anything, it always is at zero.

1146
00:02:50,080 --> 00:02:54,910
So this method of pulling out a particular element from a string is called sub-

1147
00:02:54,910 --> 00:02:58,960
scripting. And the number in between the square brackets determines

1148
00:02:59,770 --> 00:03:01,270
which character you're going to pull out,

1149
00:03:01,600 --> 00:03:06,600
and it just goes up from zero to one to two and so on and so forth.

1150
00:03:07,240 --> 00:03:10,240
So whenever you get a result that's just off by one,

1151
00:03:10,480 --> 00:03:15,480
then remember to check whether if you've started counting from zero or if you

1152
00:03:15,580 --> 00:03:17,140
started counting from one.

1153
00:03:18,040 --> 00:03:22,360
Now you can of course extend this and get hold of the last character.

1154
00:03:22,570 --> 00:03:27,100
So pause the video and see if you can change the code so that 'o' gets printed

1155
00:03:27,100 --> 00:03:29,440
out here. All right,

1156
00:03:29,440 --> 00:03:33,760
so this is a simple as simply counting from zero, one, two, three,

1157
00:03:33,940 --> 00:03:38,020
four. So if we change this to four and we run our code,

1158
00:03:38,320 --> 00:03:41,080
then you'll see that 'o' gets printed instead of the H.

1159
00:03:41,620 --> 00:03:44,980
So by using these square brackets and putting a number inside,

1160
00:03:45,280 --> 00:03:50,280
we're able to dissect our string and pull out individual characters as and when

1161
00:03:50,980 --> 00:03:51,813
we need it.

1162
00:03:52,120 --> 00:03:55,840
And this will come in really handy in a lot of the programs that you'll write in

1163
00:03:55,840 --> 00:03:56,673
the future.

1164
00:03:57,220 --> 00:04:02,140
Now it's important to remember though that just because I can write a number

1165
00:04:02,170 --> 00:04:03,520
like "123",

1166
00:04:04,180 --> 00:04:07,660
as long as it's kept inside these double quotes,

1167
00:04:07,990 --> 00:04:11,440
then this is not treated as a number by the computer.

1168
00:04:11,440 --> 00:04:16,420
It's treated just as any other piece of text. You can't, for example, say,

1169
00:04:16,480 --> 00:04:21,040
um, what is "123" + "345".

1170
00:04:21,490 --> 00:04:25,720
If I try to print this, what do you think will happen?

1171
00:04:26,260 --> 00:04:29,110
Do you think it will give me 123 + 345

1172
00:04:29,110 --> 00:04:30,820
in the traditional sense,

1173
00:04:30,820 --> 00:04:35,410
like calculating it or do you think it'll do something else? All right,

1174
00:04:35,470 --> 00:04:39,970
let's hit run and we get 123345.

1175
00:04:40,240 --> 00:04:44,140
So it's basically just concatenated these two strings together,

1176
00:04:44,380 --> 00:04:49,330
just as we have done with other strings like hello and world, right?

1177
00:04:50,170 --> 00:04:54,700
Because it sees the datatype of these two pieces of data as strings.

1178
00:04:55,060 --> 00:04:56,650
When we use the plus sign,

1179
00:04:56,830 --> 00:05:01,450
it will actually just concatenate these two things instead of doing a

1180
00:05:01,450 --> 00:05:05,140
mathematical operation. Now if we want to do that,

1181
00:05:05,200 --> 00:05:10,120
then we actually have to declare our number as a number data type.

1182
00:05:10,450 --> 00:05:13,780
So one of the most common that you'll see is called an integer.

1183
00:05:14,200 --> 00:05:18,250
So this is programming lingo for just whole numbers, numbers

1184
00:05:18,250 --> 00:05:20,290
without any decimal places.

1185
00:05:20,860 --> 00:05:25,000
And in order to create an integer or declare an integer data type,

1186
00:05:25,300 --> 00:05:29,560
all you have to do is just write the number without anything else.

1187
00:05:30,220 --> 00:05:34,300
So now if I just write the numbers, 123 + 345

1188
00:05:34,300 --> 00:05:37,150
and then I go ahead and print this,

1189
00:05:37,720 --> 00:05:40,720
then you'll see that we actually get 468.

1190
00:05:40,720 --> 00:05:45,550
So it's actually being calculated because I've got actual numbers instead of

1191
00:05:45,670 --> 00:05:46,540
strings.

1192
00:05:47,290 --> 00:05:50,800
Just as we have some useful things that we can do with strings.

1193
00:05:51,130 --> 00:05:53,650
There's some really handy things that you can do with integers.

1194
00:05:54,400 --> 00:05:57,890
Commonly when we write large numbers,

1195
00:05:58,100 --> 00:06:02,600
at least in the UK or in the US, we'd like to put commas in between the

1196
00:06:02,600 --> 00:06:03,380
thousands.

1197
00:06:03,380 --> 00:06:08,380
So when we think of large numbers with these commas in between to split it into

1198
00:06:08,390 --> 00:06:11,720
an easier to understand number. In Python,

1199
00:06:11,750 --> 00:06:16,750
we can replace those commas simply with underscores and it will be interpreted

1200
00:06:16,820 --> 00:06:20,330
by the computer as if you had written this.

1201
00:06:20,630 --> 00:06:23,960
So the computer actually removes those underscores and ignores it.

1202
00:06:24,440 --> 00:06:29,120
The benefit is just for us humans to be able to visualize it more easily.

1203
00:06:29,780 --> 00:06:32,060
So I mentioned that all whole numbers

1204
00:06:32,060 --> 00:06:36,170
no matter if they're positive or negative, are called integers in programming.

1205
00:06:36,770 --> 00:06:40,250
So what do you call it when you actually have decimal places? Well,

1206
00:06:40,280 --> 00:06:45,280
they are called a float and this is short for a floating-point number.

1207
00:06:45,680 --> 00:06:49,940
So for example, if you had um, the numbers of PI,

1208
00:06:49,970 --> 00:06:51,770
you have 3.14159

1209
00:06:51,830 --> 00:06:56,830
and this, because it has a decimal place, is now a float data type.

1210
00:06:58,580 --> 00:07:03,580
So if you think of the decimal point as being able to float around the number

1211
00:07:04,070 --> 00:07:06,020
because it could occur at any point,

1212
00:07:06,290 --> 00:07:08,900
then you've got yourself a floating point number.

1213
00:07:10,100 --> 00:07:14,090
Now the final data type is something called a boolean.

1214
00:07:14,960 --> 00:07:18,740
And this is very simple. It only has two possible values,

1215
00:07:19,100 --> 00:07:20,990
true or false.

1216
00:07:21,350 --> 00:07:26,350
Now note how these values always begin with a capital T or capital F and they

1217
00:07:27,410 --> 00:07:30,290
don't have any quotation marks around them or anything.

1218
00:07:30,560 --> 00:07:35,510
So this is actually a data type which is going to be used a lot in your programs

1219
00:07:35,780 --> 00:07:37,280
to test if something is true,

1220
00:07:37,280 --> 00:07:41,300
if something is false and for your program to respond accordingly.

1221
00:07:41,690 --> 00:07:44,390
So we're going to be using this a lot more in the future.

1222
00:07:44,870 --> 00:07:49,250
Now that you've seen a lot of the basic data types, strings, integers, floats,

1223
00:07:49,250 --> 00:07:50,083
and boolean,

1224
00:07:50,270 --> 00:07:54,620
I want you to head over to the next lesson where I've got a quiz for you to see

1225
00:07:54,620 --> 00:07:58,640
if you've made this knowledge your own. So head over to the quiz and give it a go.

1226
00:00:00,340 --> 00:00:05,080
Previously we saw how the Len function gives us a type error when we give it a

1227
00:00:05,080 --> 00:00:06,880
number instead of a string.

1228
00:00:07,570 --> 00:00:11,110
So let's talk a little bit more about data types and functions.

1229
00:00:11,740 --> 00:00:16,270
And the way I think about functions is kind of like some sort of fancy machine

1230
00:00:16,270 --> 00:00:19,690
that you might see in a factory, right? So in this case,

1231
00:00:19,960 --> 00:00:24,460
we've got some sort of machine that's going to take potatoes into chips and we

1232
00:00:24,460 --> 00:00:25,810
don't really care how it does it,

1233
00:00:26,230 --> 00:00:29,020
but it's probably going to have to peel the potatoes, wash the potatoes,

1234
00:00:29,020 --> 00:00:30,070
cut it up, fry it,

1235
00:00:30,460 --> 00:00:34,780
and then finally return it to us as an output in the form of fries.

1236
00:00:35,410 --> 00:00:39,490
And if this is the first time that you're watching one of my tutorials, um,

1237
00:00:39,580 --> 00:00:43,660
this is probably a health warning. I talk about food a lot. Um,

1238
00:00:45,070 --> 00:00:47,020
so be prepared if you haven't eaten.

1239
00:00:47,710 --> 00:00:52,710
Now let's say that we took the same machine that normally processes potatoes and

1240
00:00:52,990 --> 00:00:57,700
we decided to get a rock and we just pass this through the function,

1241
00:00:58,270 --> 00:01:02,170
then we're getting an error, right? This is basically what happened here.

1242
00:01:02,590 --> 00:01:06,610
This length function doesn't like working with integers.

1243
00:01:07,090 --> 00:01:08,800
And by forcing this through,

1244
00:01:08,800 --> 00:01:13,800
we end up with an error and our code breaks and it gives us this thing, a type

1245
00:01:13,840 --> 00:01:14,673
error.

1246
00:01:14,920 --> 00:01:19,920
Now do you remember previously we had this challenge where we asked you to get

1247
00:01:20,110 --> 00:01:24,400
the um, get an input from the user, what is your name?

1248
00:01:24,910 --> 00:01:29,650
And then we use the length function to get the number of characters of their

1249
00:01:29,650 --> 00:01:34,510
name. And let's just save that to a variable. Let's call it, um,

1250
00:01:34,900 --> 00:01:38,440
num_char equals this.

1251
00:01:39,040 --> 00:01:44,040
And then we print your name has plus num_char, number of characters + characters.

1252
00:01:49,600 --> 00:01:54,600
So in this case you would expect it to prompt the user to enter their name.

1253
00:01:54,910 --> 00:01:56,800
Let's say I entered my name Angela,

1254
00:01:57,550 --> 00:02:00,910
and the length of that string would be 6

1255
00:02:00,940 --> 00:02:05,770
so this would be equal to six. And so this would get substituted in here.

1256
00:02:05,860 --> 00:02:10,150
And then with string concatenation, we end up printing

1257
00:02:10,150 --> 00:02:14,380
"Your name has six characters." But this is not what happens.

1258
00:02:14,410 --> 00:02:19,090
And I know that some of you might have tried this for the previous challenge and

1259
00:02:19,090 --> 00:02:21,670
you would have gotten a type error.

1260
00:02:22,180 --> 00:02:26,560
So it tells you that you can only concatenate strings,

1261
00:02:26,950 --> 00:02:29,680
not integers. So in this case,

1262
00:02:29,680 --> 00:02:33,400
we were concatenating a string to an integer.

1263
00:02:33,880 --> 00:02:37,060
This is what we get. We end up with an error.

1264
00:02:37,930 --> 00:02:42,930
So how can we prevent these type errors and how can we see the data type that

1265
00:02:43,060 --> 00:02:45,010
we're working with? Well,

1266
00:02:45,010 --> 00:02:48,640
we could use a function called type,

1267
00:02:49,180 --> 00:02:53,710
which basically will check whatever you put between the parentheses and give you

1268
00:02:53,740 --> 00:02:56,620
the type of data that it is. For example,

1269
00:02:56,620 --> 00:02:59,830
if I go ahead and just comment out this line of code

1270
00:02:59,830 --> 00:03:04,660
which breaks and go ahead and put num_char,

1271
00:03:04,750 --> 00:03:09,670
so this particular piece of data inside this type function,

1272
00:03:10,090 --> 00:03:15,090
and then I'm going to print the type of num_char.

1273
00:03:16,210 --> 00:03:19,900
And now if I hit run, let's enter my name.

1274
00:03:20,530 --> 00:03:24,100
And you can see it's telling you that this is an integer.

1275
00:03:24,670 --> 00:03:29,440
So adding a string to an integer doesn't make any sense,

1276
00:03:29,620 --> 00:03:31,180
which is why you got the type error.

1277
00:03:32,110 --> 00:03:37,110
Now every so often when you're writing code and you're not quite sure what the

1278
00:03:37,720 --> 00:03:40,000
type of data of something might be,

1279
00:03:40,240 --> 00:03:45,240
then you can simply just put it inside a type check function,

1280
00:03:45,610 --> 00:03:48,940
right? Like so. And then you'll get an answer.

1281
00:03:49,360 --> 00:03:51,760
Now in addition to type checking,

1282
00:03:52,120 --> 00:03:57,120
we can also do type conversion or you might hear it called type casting where we

1283
00:03:58,600 --> 00:04:02,890
change a piece of data from one particular data type to another.

1284
00:04:03,430 --> 00:04:04,300
So it, for example,

1285
00:04:04,300 --> 00:04:09,300
we know that this variable num_char has the data type of integer.

1286
00:04:10,750 --> 00:04:15,520
If we wanted to turn it into a string so that this line of code wouldn't break

1287
00:04:15,520 --> 00:04:16,353
anymore,

1288
00:04:16,480 --> 00:04:20,680
then we could convert it into a string by writing str

1289
00:04:21,279 --> 00:04:25,960
and then inside the parentheses, we put in the variable that we want to convert,

1290
00:04:26,020 --> 00:04:30,310
which is called num_char. And now we save this into a new variable,

1291
00:04:30,340 --> 00:04:33,160
we'll call it new_num_char.

1292
00:04:33,910 --> 00:04:38,910
And once we've converted this into a string and stored it under this name,

1293
00:04:39,250 --> 00:04:43,840
then we can use it inside our print statement, new_num_char,

1294
00:04:44,320 --> 00:04:49,320
and now it won't break anymore. And it tells us your name has six characters.

1295
00:04:50,890 --> 00:04:55,210
So in this case we've taken a integer data type,

1296
00:04:55,690 --> 00:05:00,690
put it inside the parentheses of a str function,

1297
00:05:01,120 --> 00:05:05,830
which takes a object in between the parentheses and converts it into a string,

1298
00:05:06,490 --> 00:05:09,010
which we then store inside this new_num_char

1299
00:05:09,100 --> 00:05:14,100
and we can now use it in our print statement because all the data types of all

1300
00:05:14,290 --> 00:05:19,290
the pieces of data that we're adding together have the same data type, string.

1301
00:05:20,740 --> 00:05:24,610
Now you're not limited to only converting numbers into strings.

1302
00:05:24,940 --> 00:05:27,400
You can convert a whole bunch of different data types.

1303
00:05:27,760 --> 00:05:32,760
So let me go ahead and comment out this code and I can show you that

1304
00:05:33,040 --> 00:05:37,600
let's say that we had a variable a, which we set two a number,

1305
00:05:37,870 --> 00:05:39,040
right? 123.

1306
00:05:39,970 --> 00:05:44,970
And if I do a type check on a and print this,

1307
00:05:45,730 --> 00:05:50,020
you'll see that as you would expect, it should give you integer, right?

1308
00:05:50,230 --> 00:05:51,670
A is an integer.

1309
00:05:52,360 --> 00:05:57,360
But now let's say I converted a into a string by wrapping it inside the string

1310
00:05:59,300 --> 00:06:03,710
function, then hit enter. You can see it's now of type string.

1311
00:06:05,210 --> 00:06:09,410
Now I can do this with other things as well. So for example,

1312
00:06:09,710 --> 00:06:14,710
I could turn my whole number here into a float and when I run my code,

1313
00:06:16,940 --> 00:06:20,630
now we see that the type of my variable is a float

1314
00:06:21,050 --> 00:06:23,090
and that's pretty straightforward, right?

1315
00:06:23,420 --> 00:06:26,600
But let me ask you two quick questions before we wrap up.

1316
00:06:26,960 --> 00:06:31,790
What will this line of code print? Alright, you guessed it,

1317
00:06:31,850 --> 00:06:36,850
this will print 170.5 but what's actually happening behind the scenes is we're

1318
00:06:37,730 --> 00:06:42,730
converting this string 100.5 into a floating-point number and then we're adding

1319
00:06:45,980 --> 00:06:50,510
70 to 100.5 and finally we're printing the results.

1320
00:06:50,900 --> 00:06:54,950
But what about this line? What will print here? Have a guess.

1321
00:06:56,840 --> 00:07:01,840
Well, this time we get 70100. So in summary,

1322
00:07:02,120 --> 00:07:06,830
you can use the type function to investigate the data type you're working with

1323
00:07:07,220 --> 00:07:12,220
and you can use functions like string, int, or float to convert to that data

1324
00:07:12,380 --> 00:07:16,190
type. In the next lesson, I've got a coding challenge for you.

1325
00:07:16,370 --> 00:07:18,500
So head over there and we'll get started.

1326
00:00:00,180 --> 00:00:00,810
All right, now

1327
00:00:00,810 --> 00:00:05,280
it's time to put what you've learned into practice by clicking on the data types

1328
00:00:05,400 --> 00:00:08,039
day 2.1 code challenge.

1329
00:00:09,540 --> 00:00:10,470
In this challenge,

1330
00:00:10,500 --> 00:00:15,450
the idea is that you are going to be given a random two-digit number,

1331
00:00:15,480 --> 00:00:20,480
so something like 39, and your code that you'll write

1332
00:00:21,060 --> 00:00:26,060
will be able to add the first digit to the second digit and end up with a

1333
00:00:26,850 --> 00:00:31,650
numerical result. So for example, if the input was 39,

1334
00:00:31,680 --> 00:00:36,000
then 3 + 9 would be equal to 12. So the output would be 12.

1335
00:00:36,480 --> 00:00:39,060
And if the input was 26,

1336
00:00:39,180 --> 00:00:42,420
then your code needs to print 8 to the console.

1337
00:00:43,080 --> 00:00:47,100
So you're going to need to think about type checking, type conversion,

1338
00:00:47,430 --> 00:00:49,710
as well as everything that you learned before.

1339
00:00:50,550 --> 00:00:54,270
And then you're going to write your code below this line without changing any of

1340
00:00:54,270 --> 00:00:58,140
these lines. So pause the video now and give this code challenge a go.

1341
00:01:02,610 --> 00:01:07,200
All right. So how did that go? Did you manage to do it? If not,

1342
00:01:07,380 --> 00:01:09,900
have a cup of tea or give yourself a little bit of a break,

1343
00:01:09,900 --> 00:01:12,750
think about something else and then come back to it and try it again.

1344
00:01:13,530 --> 00:01:14,110
If you've already

1345
00:01:14,110 --> 00:01:17,340
given it a good go and you want to see what the solution might be,

1346
00:01:17,700 --> 00:01:18,900
then follow along with me.

1347
00:01:19,650 --> 00:01:23,250
So the first thing we know is that we're going to have a variable

1348
00:01:23,280 --> 00:01:26,970
that's going to be equal to a two-digit number.

1349
00:01:27,540 --> 00:01:30,660
But remember that that could mean anything. That could mean an integer,

1350
00:01:30,660 --> 00:01:34,590
that could mean a floating-point number, that could even mean a number as a

1351
00:01:34,590 --> 00:01:35,423
string.

1352
00:01:35,790 --> 00:01:40,790
So it might be helpful to actually find out the data type of this two-digit

1353
00:01:41,310 --> 00:01:46,200
number that we get. And to do that, we of course use the type function, all

1354
00:01:46,200 --> 00:01:48,810
lowercase. And then in between the parentheses,

1355
00:01:48,840 --> 00:01:52,470
we add the thing that we want to check. So it's this variable.

1356
00:01:53,040 --> 00:01:56,130
And then let's go ahead and print the result into the console.

1357
00:01:56,550 --> 00:02:00,390
So now let's run our code and let's type a two-digit number,

1358
00:02:00,570 --> 00:02:01,590
say 56.

1359
00:02:02,100 --> 00:02:07,100
and we get the result that the type of this two-digit number is a string

1360
00:02:08,669 --> 00:02:13,410
because, of course, we're getting hold of this through the input function and the

1361
00:02:13,410 --> 00:02:17,280
user could be typing anything into this input, a string,

1362
00:02:17,310 --> 00:02:18,840
their name or a number.

1363
00:02:19,290 --> 00:02:22,560
So now that we know that this variable has the datatype string,

1364
00:02:22,950 --> 00:02:27,090
then you can think of a little bit about what we know we can do with strings.

1365
00:02:27,330 --> 00:02:31,920
We can subscript strings, right? So if we had a string like hello,

1366
00:02:32,250 --> 00:02:36,330
and we want it to get a hold of the first character, we could put zero there.

1367
00:02:36,570 --> 00:02:37,860
And when I print this,

1368
00:02:38,160 --> 00:02:42,120
we'll get H being selected out of this string.

1369
00:02:43,050 --> 00:02:48,050
So if we know that we can subscript strings to get a hold of a particular value

1370
00:02:50,130 --> 00:02:54,690
at a particular position just by using subscripting like this,

1371
00:02:54,990 --> 00:02:58,020
then we can do the same with our two-digit number.

1372
00:02:58,230 --> 00:03:02,950
So we could say two_digit_number, let's get hold of the first digit.

1373
00:03:03,130 --> 00:03:04,030
So let's call it

1374
00:03:04,030 --> 00:03:08,830
first_digit equals two_digit_number [

1375
00:03:08,860 --> 00:03:09,693
0],

1376
00:03:10,120 --> 00:03:15,120
and then the second_digit could be two_digit_number [1].

1377
00:03:16,660 --> 00:03:17,493
Now,

1378
00:03:17,680 --> 00:03:22,180
when I go ahead and print these two items,

1379
00:03:22,210 --> 00:03:25,990
first_digit and second_digit,

1380
00:03:26,440 --> 00:03:30,280
then you'll see that if I enter a number like 87,

1381
00:03:30,760 --> 00:03:34,600
then my first digit is 8 and my second digit is 7.

1382
00:03:35,110 --> 00:03:39,820
So now I can probably start thinking about adding those two digits together.

1383
00:03:40,420 --> 00:03:40,990
For example,

1384
00:03:40,990 --> 00:03:45,990
we can say that result equals first_digit plus second_digit.

1385
00:03:47,200 --> 00:03:51,790
But of course, when I run this right now and I print the value of result,

1386
00:03:52,270 --> 00:03:54,910
you'll see that for a number like 87

1387
00:03:55,390 --> 00:04:00,340
what I will get is just a eight concatenated to seven,

1388
00:04:00,520 --> 00:04:04,030
which turns it back into 87, which is not what I want at all.

1389
00:04:04,390 --> 00:04:07,840
Especially after all of my hard work separating out the digits.

1390
00:04:08,470 --> 00:04:11,770
What I want to do instead is to turn each of these,

1391
00:04:12,070 --> 00:04:15,010
which currently has the data type of string,

1392
00:04:15,190 --> 00:04:20,190
so I can demonstrate that to you by saying type of first_digit,

1393
00:04:20,950 --> 00:04:24,460
you can see it is a string.

1394
00:04:25,000 --> 00:04:30,000
So if I could only change first_digit and second_digit from string data types

1395
00:04:31,000 --> 00:04:36,000
into an integer data type by using the type conversion that we learned about

1396
00:04:37,240 --> 00:04:41,320
in the last lesson, well then once I do that,

1397
00:04:41,350 --> 00:04:46,120
then this plus sign has a whole different meaning because now it's going to add

1398
00:04:46,150 --> 00:04:50,260
this first_digit to the second_digit instead of concatenating it.

1399
00:04:50,620 --> 00:04:53,350
So now if I go ahead and print the results,

1400
00:04:55,420 --> 00:04:58,270
then you'll see that for the same number

1401
00:04:59,770 --> 00:05:02,500
87, my result is now 15.

1402
00:05:03,310 --> 00:05:08,140
I've now managed to achieve what the code exercise wants me to do.

1403
00:05:09,560 --> 00:05:12,190
So did you manage to get it right? If not,

1404
00:05:12,220 --> 00:05:15,340
go ahead and have a look at the model solution

1405
00:05:15,610 --> 00:05:19,990
and I've written some comments for each line of code that walks you through each

1406
00:05:19,990 --> 00:05:20,823
of the steps.

1407
00:05:21,070 --> 00:05:25,930
Now notice that instead of converting the second_digit here,

1408
00:05:26,380 --> 00:05:30,250
you can also do it up here, like what you see right here.

1409
00:05:31,270 --> 00:05:32,950
So I have a play around with the code,

1410
00:05:33,010 --> 00:05:36,520
especially if you struggled with this and didn't manage to get it right.

1411
00:05:37,060 --> 00:05:40,660
And then once you've understood what's going on here line by line,

1412
00:05:41,080 --> 00:05:43,300
if you need, have a look at the previous videos,

1413
00:05:43,600 --> 00:05:46,390
then go back to the code challenge and attempt it again.

1414
00:05:46,960 --> 00:05:50,260
And only once you're happy that you really understand everything that was

1415
00:05:50,260 --> 00:05:51,610
covered in this challenge,

1416
00:05:51,880 --> 00:05:54,910
then head over to the next lesson where we're going to talk more about

1417
00:05:54,940 --> 00:05:56,290
mathematical operators

1418
00:05:56,560 --> 00:06:01,540
like the plus sign and others that you can use in your code. So for all of that

1419
00:06:01,660 --> 00:06:03,490
and more, I'll see you on the next lesson.

1420
00:00:00,670 --> 00:00:05,670
In the previous lesson we saw how we could use the plus sign either to

1421
00:00:05,770 --> 00:00:10,770
concatenate strings together or as a mathematical operation where we add two

1422
00:00:11,710 --> 00:00:15,370
integers or two floats, basically two numbers together.

1423
00:00:16,390 --> 00:00:20,230
In this lesson I want to show you some of the other mathematical operators that

1424
00:00:20,230 --> 00:00:21,220
you have access to

1425
00:00:21,670 --> 00:00:25,810
in addition to adding. The next obvious one is subtraction.

1426
00:00:25,840 --> 00:00:29,080
So 7 - 3 , you would just use the minus sign,

1427
00:00:29,590 --> 00:00:33,130
but then when you get to multiplication it's a little bit weird. Um,

1428
00:00:33,160 --> 00:00:37,060
instead of using the x or some sort of time symbol,

1429
00:00:37,390 --> 00:00:38,950
you actually use the asterix.

1430
00:00:39,070 --> 00:00:43,630
So you would say something like 3 * 2 and that would be 3

1431
00:00:43,630 --> 00:00:44,470
times 2.

1432
00:00:45,160 --> 00:00:50,160
Now the final one is division and that's done using the forward-slash, so 6

1433
00:00:50,800 --> 00:00:54,820
/ 3 and when that prints out,

1434
00:00:54,850 --> 00:00:56,020
it'll give you 2.

1435
00:00:56,830 --> 00:01:00,550
Now one thing to notice here is that whenever you're dividing things,

1436
00:01:01,030 --> 00:01:04,360
you actually always end up with a floating point number.

1437
00:01:04,450 --> 00:01:07,420
So you can see even though six divides into three cleanly,

1438
00:01:07,630 --> 00:01:12,630
we're still getting 2.0. And in fact if I put a type check around this division,

1439
00:01:14,890 --> 00:01:18,520
you'll see that it will print float instead of integer.

1440
00:01:19,210 --> 00:01:21,880
And this is just something that happens with division in Python.

1441
00:01:22,420 --> 00:01:26,200
But at the end of the day, you get the result that you need and it doesn't really

1442
00:01:26,200 --> 00:01:29,350
matter whether if it's a float or if it's a integer.

1443
00:01:30,220 --> 00:01:35,220
Now the last one that's really useful is two asterisk signs and this gives you

1444
00:01:35,500 --> 00:01:39,760
access to the exponents or when you want to raise the number to a power.

1445
00:01:40,210 --> 00:01:40,930
So for example,

1446
00:01:40,930 --> 00:01:45,930
if you wanted to get a hold of 2 to the power of 2, then you would write it

1447
00:01:46,270 --> 00:01:51,270
like this and 2 to the power of 2 is of course basically just 2 times 2 

1448
00:01:52,210 --> 00:01:54,040
which is going to be equal to 4.

1449
00:01:55,600 --> 00:01:58,660
Now if I change this to 2 to the power of 3,

1450
00:01:58,660 --> 00:02:03,660
then that's going to be 2 times 2 times 2. So that should be 8 and so

1451
00:02:04,360 --> 00:02:05,260
on and so forth.

1452
00:02:05,890 --> 00:02:09,610
Having the exponent being built into the language is one of the reasons why

1453
00:02:09,610 --> 00:02:14,610
Python is really loved by a lot of data scientists and mathematicians because

1454
00:02:14,800 --> 00:02:19,300
it's really optimized towards manipulating and handling numbers. Now,

1455
00:02:19,300 --> 00:02:22,510
one of the things that you have to be careful about when you are doing these

1456
00:02:22,510 --> 00:02:27,280
mathematical operations is when you have more than one operation on the same

1457
00:02:27,280 --> 00:02:32,020
line of code, then there's a certain level of priority.

1458
00:02:32,710 --> 00:02:37,710
So some of these operations like division or multiplication are going to be

1459
00:02:37,900 --> 00:02:38,740
first class,

1460
00:02:38,770 --> 00:02:42,460
whereas other ones are going to be more economy like the plus and minus.

1461
00:02:42,940 --> 00:02:47,140
And the rule that you might've remember from high school is something called 

1462
00:02:47,170 --> 00:02:48,003
PEMDAS.

1463
00:02:48,250 --> 00:02:52,750
It basically states the order of priority is parentheses,

1464
00:02:52,780 --> 00:02:56,290
exponents, multiplication, division, addition and subtraction.

1465
00:02:56,800 --> 00:03:01,180
So the things that happen first are the things inside brackets, then it's our exponents,

1466
00:03:01,630 --> 00:03:05,320
then it's our multiplication and division.

1467
00:03:05,680 --> 00:03:10,680
And finally, the lowest priority is our addition and subtraction.

1468
00:03:11,530 --> 00:03:14,740
Now it's a little bit deceiving because of this order.

1469
00:03:14,830 --> 00:03:18,400
It makes it seem like as if multiplication happens before division,

1470
00:03:18,850 --> 00:03:21,580
but actually they are equally important.

1471
00:03:22,150 --> 00:03:24,640
And when it actually comes to your calculations,

1472
00:03:24,850 --> 00:03:28,360
the calculation that's most to the left is the one that will be prioritized

1473
00:03:28,390 --> 00:03:30,280
between multiplication and division.

1474
00:03:30,850 --> 00:03:34,120
So let me give you a real-life example to make this more clear.

1475
00:03:34,540 --> 00:03:39,540
Let's say we had a line of code where we wanted to multiply 3 * 3 +

1476
00:03:39,940 --> 00:03:43,150
3 / 3 - 3.

1477
00:03:44,500 --> 00:03:49,500
If I was to execute this entire line of code and print it out into the console,

1478
00:03:50,170 --> 00:03:54,670
here's the time where you play computer again and guess using what you've

1479
00:03:54,670 --> 00:03:56,350
learned here, um,

1480
00:03:56,470 --> 00:04:00,190
what exactly will be printed because you will get a number printed,

1481
00:04:00,190 --> 00:04:04,990
it will calculate this entire line of code for you. But the order matters.

1482
00:04:05,260 --> 00:04:10,260
Is it going to first add 3 to 3 then multiply the result by 3 or is

1483
00:04:11,710 --> 00:04:15,610
it first going to divide through by 3 and then add 3 to it?

1484
00:04:15,910 --> 00:04:17,050
What is the order?

1485
00:04:17,260 --> 00:04:21,760
And I want you to really pause the video and have a little play with it on pen

1486
00:04:21,760 --> 00:04:25,450
and paper before you come back and we'll show you the result.

1487
00:04:28,660 --> 00:04:30,400
Using our rule, PEMDAS,

1488
00:04:30,430 --> 00:04:34,210
we can see the first thing that happens is what's in the parentheses,

1489
00:04:34,270 --> 00:04:37,480
so that doesn't matter. The next thing, our exponents,

1490
00:04:37,510 --> 00:04:39,040
we don't actually have an exponent here.

1491
00:04:39,040 --> 00:04:42,790
We don't have 2 to the power of 3 or something to the power of anything.

1492
00:04:42,880 --> 00:04:44,140
So we can ignore that as well.

1493
00:04:44,740 --> 00:04:48,700
So the next level is the multiplication and division.

1494
00:04:48,940 --> 00:04:52,120
And as I mentioned, they are all equal importance.

1495
00:04:52,450 --> 00:04:57,450
So this 3 * 3 and 3 / 3 are both equally important,

1496
00:04:58,120 --> 00:05:01,540
but the calculation goes from left to right.

1497
00:05:01,720 --> 00:05:06,220
So the first thing we see is actually the multiplication. So if it helps you,

1498
00:05:06,310 --> 00:05:10,690
you might want to add LR to the end of this mnemonic.

1499
00:05:10,780 --> 00:05:15,130
So it becomes PEMDASLR, or at least that's the way I would think about it.

1500
00:05:15,730 --> 00:05:20,080
So even if this was division and this was multiplication,

1501
00:05:20,500 --> 00:05:23,320
this calculation will always get executed first.

1502
00:05:24,190 --> 00:05:28,420
Coming back to the question I asked you, what do you think this number would be?

1503
00:05:28,900 --> 00:05:33,900
Let's go ahead and comment out all the other code and run this line of code and

1504
00:05:34,840 --> 00:05:38,890
it will give us 7.0. Now if math is not your strong point, don't worry,

1505
00:05:38,890 --> 00:05:42,130
it's not mine either and you're the sort of person who would prefer to see it

1506
00:05:42,130 --> 00:05:46,180
visualize. Then I recommend again putting this line of code in Thonny,

1507
00:05:46,660 --> 00:05:51,220
and then go ahead and clicking on the debugging symbol and then just step into,

1508
00:05:51,220 --> 00:05:56,220
so press F7 or this button multiple times and you'll see it evaluate

1509
00:05:56,290 --> 00:05:57,680
this line of code step-by-step.

1510
00:05:57,830 --> 00:06:01,520
So first it looks at the entire thing and then it goes from left to right.

1511
00:06:02,120 --> 00:06:07,120
And the first calculation is 3 * 3 and that is the one that's going

1512
00:06:07,130 --> 00:06:09,260
to execute first and it becomes 9.

1513
00:06:09,950 --> 00:06:13,670
Next it's going to look along this line of code and see that the next most

1514
00:06:13,670 --> 00:06:17,120
important thing is this division here, 3 divided by 3.

1515
00:06:17,660 --> 00:06:20,690
So it's going to carry out that next and that becomes 1.

1516
00:06:21,200 --> 00:06:26,200
So now 9 + 1 is going to be the next thing because it's the most to the

1517
00:06:26,330 --> 00:06:31,330
left and then it becomes 10 - 3 and we finally get the result of 7.

1518
00:06:32,630 --> 00:06:34,700
So now here's another challenge for you.

1519
00:06:35,240 --> 00:06:39,980
How can you change this code so that instead of getting 7,

1520
00:06:40,340 --> 00:06:41,570
we get 3?

1521
00:06:41,990 --> 00:06:46,170
How can you change this line of code given what you know about PEMDASLR?

1522
00:06:46,170 --> 00:06:49,520
See if you can figure it out. Pause the video now.

1523
00:06:54,110 --> 00:06:57,290
Alright, so this will involve a little bit of trial and error.

1524
00:06:57,890 --> 00:07:02,890
And the most important tool we have access to is the parentheses or the

1525
00:07:04,400 --> 00:07:08,600
brackets. This means that we can actually isolate bits of our code,

1526
00:07:08,630 --> 00:07:12,800
which normally have very low priority and turn them into higher priority

1527
00:07:12,800 --> 00:07:15,020
operations. So in this case,

1528
00:07:15,050 --> 00:07:17,810
we know that 3 * 3 is going to happen first,

1529
00:07:18,170 --> 00:07:20,930
and then the multiplication, and then the addition on the left,

1530
00:07:20,990 --> 00:07:22,310
and then the subtraction.

1531
00:07:22,940 --> 00:07:27,940
But if we added a set of parentheses around our 3 + 3,

1532
00:07:29,450 --> 00:07:31,760
then out of all of these calculations,

1533
00:07:32,180 --> 00:07:36,440
this particular one suddenly becomes the highest priority and it will happen

1534
00:07:36,440 --> 00:07:37,273
first.

1535
00:07:37,640 --> 00:07:42,640
So if I change what I've got in Thonny to our new version and go ahead and debug

1536
00:07:43,100 --> 00:07:43,820
through it,

1537
00:07:43,820 --> 00:07:48,020
the very first calculation it's going to perform is this 3 + 3  inside

1538
00:07:48,020 --> 00:07:50,720
the brackets and we end up with 6.

1539
00:07:51,170 --> 00:07:53,690
So then it's going to go again from left to right,

1540
00:07:53,690 --> 00:07:55,910
prioritizing multiplication and division.

1541
00:07:56,240 --> 00:08:01,240
So then it's 3 * 6  is 18. 18 / 3 is 6. 6 - 3 is

1542
00:08:02,630 --> 00:08:06,500
3. Just by isolating certain calculations,

1543
00:08:06,890 --> 00:08:11,890
you can elevate it to right at the top of the priority list and you will be able

1544
00:08:11,900 --> 00:08:14,300
to perform the calculation that you need.

1545
00:08:15,530 --> 00:08:19,250
Now that you've learned a lot about calculations and performing mathematical

1546
00:08:19,250 --> 00:08:23,060
operations using Python, I've got another code challenge for you.

1547
00:08:23,180 --> 00:08:26,060
So head up to the next lesson and you'll be able to discover it there.

1548
00:00:00,330 --> 00:00:02,100
All right. So in this code challenge,

1549
00:00:02,160 --> 00:00:06,660
click on the date 2.2 BMI calculator code exercise.

1550
00:00:07,320 --> 00:00:11,850
So the goal of the challenge is to be able to work out somebody's body mass

1551
00:00:11,850 --> 00:00:15,630
index based on their weight and height that they input.

1552
00:00:16,140 --> 00:00:20,790
So the body mass index is basically a way of measuring somebody's body

1553
00:00:20,790 --> 00:00:24,420
composition that's kind of independent of their height, right?

1554
00:00:24,600 --> 00:00:26,370
If two people are both 60 kilos

1555
00:00:26,370 --> 00:00:28,380
but one of them is tall and the other person's short,

1556
00:00:28,740 --> 00:00:32,159
then the shorter guy is probably a little bit more overweight, right?

1557
00:00:32,610 --> 00:00:36,720
So if you take a look at this chart here, let's say, um, for me,

1558
00:00:36,720 --> 00:00:40,620
my height is around 1.8 meters and about 60 something kilos.

1559
00:00:40,710 --> 00:00:45,570
So I'm in this normal weight bracket of BMI 18.5 to 25.

1560
00:00:46,140 --> 00:00:49,050
So this is a really helpful tool for, um,

1561
00:00:49,080 --> 00:00:52,920
healthcare professionals to figure out whether if somebody is underweight,

1562
00:00:52,950 --> 00:00:54,180
normal weight or overweight,

1563
00:00:54,510 --> 00:00:59,400
that is based on their height and weight. In our program,

1564
00:00:59,400 --> 00:01:03,360
we're going to calculate this. So when we run our code,

1565
00:01:03,360 --> 00:01:06,390
you can see it's asking us for an input, height in meters.

1566
00:01:06,390 --> 00:01:10,950
So mine is 1.8 and my weight is say 63 kilos.

1567
00:01:11,430 --> 00:01:12,960
And when I hit enter,

1568
00:01:13,050 --> 00:01:18,050
ideally, I would like to get my BMI printed out as a whole number like this.

1569
00:01:20,280 --> 00:01:22,650
So how can we achieve this? Well, firstly,

1570
00:01:22,650 --> 00:01:25,890
you have to take a look at the equation that's used to calculate the BMI.

1571
00:01:26,370 --> 00:01:28,620
It's somebody's weight in kilograms

1572
00:01:28,860 --> 00:01:31,380
divided by their height squared.

1573
00:01:32,190 --> 00:01:33,960
Then once you've got the result,

1574
00:01:33,990 --> 00:01:37,650
we want it to be printed as a whole number or as an integer.

1575
00:01:38,130 --> 00:01:41,700
So you'll have to think a little bit about type conversion,

1576
00:01:41,730 --> 00:01:45,660
you'll have to think about the mathematical operations that we learned about in

1577
00:01:45,660 --> 00:01:49,680
the last lesson and combine everything you've learned so far in order to solve

1578
00:01:49,680 --> 00:01:52,860
this code challenge. So pause the video now and give that a go.

1579
00:01:52,880 --> 00:01:57,880
[inaudible]

1580
00:02:01,280 --> 00:02:02,990
All right. So now that you've had a go at it,

1581
00:02:03,050 --> 00:02:06,380
I'm going to reveal of solution. In our code

1582
00:02:06,380 --> 00:02:10,759
we've already got access to the height and the weight as variables,

1583
00:02:11,180 --> 00:02:14,210
so we can simply use them straight away. So for example,

1584
00:02:14,210 --> 00:02:18,710
I could just print the height and it would be equal to whatever the user typed

1585
00:02:18,710 --> 00:02:23,660
in when they were asked for it by the input. So in this case,

1586
00:02:23,690 --> 00:02:26,060
my height would get printed out as 1.8.

1587
00:02:26,780 --> 00:02:28,910
If we can access the height and weight,

1588
00:02:29,120 --> 00:02:34,120
then we can calculate the BMI by simply replicating the mathematical equation

1589
00:02:34,940 --> 00:02:35,690
here.

1590
00:02:35,690 --> 00:02:39,860
So we know that the BMI is equal to the weight divided by the height squared,

1591
00:02:40,370 --> 00:02:44,930
so we can take the weight and then we can use the forward-slash for divide.

1592
00:02:45,530 --> 00:02:49,700
And then we can divide it by the height squared.

1593
00:02:49,790 --> 00:02:53,120
So we're going to use the exponent operator to the power of two.

1594
00:02:53,720 --> 00:02:56,090
So this is how we could work out the BMI,

1595
00:02:56,690 --> 00:02:59,120
but you'll see that if we actually run this code right now

1596
00:02:59,710 --> 00:03:01,090
we'll actually get an error.

1597
00:03:01,870 --> 00:03:05,710
And what it's going to tell us is that on line 8,

1598
00:03:05,950 --> 00:03:10,480
so right here where our equation is, there's a type error.

1599
00:03:11,050 --> 00:03:16,050
And it saying that you're trying to use the exponent or the power function for a

1600
00:03:17,080 --> 00:03:19,480
string and an integer.

1601
00:03:19,720 --> 00:03:22,150
So the 2 is the integer,

1602
00:03:22,750 --> 00:03:27,190
but this is still a string. And we can confirm this

1603
00:03:27,190 --> 00:03:30,010
if we check the type. So type of height,

1604
00:03:31,100 --> 00:03:35,200
let's comment that out, and let's print this.

1605
00:03:35,920 --> 00:03:38,500
Then you'll see that when we enter some numbers here,

1606
00:03:38,560 --> 00:03:43,560
the type of height and weight in fact is string because they came from the input

1607
00:03:44,110 --> 00:03:44,943
function,

1608
00:03:44,980 --> 00:03:49,980
which we saw in previous lessons. Before we can actually just simply run this

1609
00:03:50,140 --> 00:03:53,530
equation and get the values we want,

1610
00:03:53,590 --> 00:03:57,760
we have to convert all the strings into other data types,

1611
00:03:57,850 --> 00:04:02,850
right? Now the weight is probably okay as an integer or a whole number because

1612
00:04:04,240 --> 00:04:07,840
it's already pretty accurate, 80 kilos or 85 kilos.

1613
00:04:07,960 --> 00:04:10,690
We don't necessarily need any decimal places.

1614
00:04:11,170 --> 00:04:16,170
But the height on the other hand definitely needs to be a floating-point number

1615
00:04:16,839 --> 00:04:21,279
because if it was an integer, then there would only be height of one meter,

1616
00:04:21,339 --> 00:04:23,110
two meter, three meter, four meter.

1617
00:04:23,710 --> 00:04:28,450
And because most people lie between one meter and two meter, then we really,

1618
00:04:28,450 --> 00:04:31,390
really need those numbers after the decimal place

1619
00:04:31,480 --> 00:04:34,300
in order to get an accurate calculation. So the height

1620
00:04:34,540 --> 00:04:39,540
definitely needs to be a float and we can convert it into a float using this

1621
00:04:39,970 --> 00:04:41,020
line of code here,

1622
00:04:41,620 --> 00:04:45,850
where we're converting the string into a float. And the weight

1623
00:04:45,880 --> 00:04:50,200
you can either convert it into an integer or a float. It doesn't really matter.

1624
00:04:51,070 --> 00:04:55,600
So now if we run our code again, you'll see we no longer have any errors

1625
00:04:56,260 --> 00:04:59,740
and we're now able to print our BMI.

1626
00:05:00,430 --> 00:05:02,920
Let me enter my height and weight again.

1627
00:05:03,250 --> 00:05:07,180
And you can see I'm getting this BMI with a massive list of numbers afterwards.

1628
00:05:07,690 --> 00:05:12,160
So in our result, we said it should be a whole number.

1629
00:05:12,760 --> 00:05:16,810
How can we convert this BMI into a whole number? Well,

1630
00:05:16,840 --> 00:05:21,840
we can turn it into bmi_as_int and convert this floating-point

1631
00:05:25,630 --> 00:05:30,630
number, the BMI with all of its numbers after the decimal place, into an integer

1632
00:05:31,570 --> 00:05:32,403
a whole number,

1633
00:05:32,710 --> 00:05:37,090
which will just simply cut off everything that's after the decimal place.

1634
00:05:37,630 --> 00:05:41,290
And now if we print this bmi_as_int,

1635
00:05:41,710 --> 00:05:42,700
run our code,

1636
00:05:44,860 --> 00:05:48,040
then you'll see that we get a whole number being printed out,

1637
00:05:48,520 --> 00:05:52,060
which is now our BMI. In the next lesson

1638
00:05:52,060 --> 00:05:56,800
I'm actually going to show you how we can round these floating point numbers so

1639
00:05:56,800 --> 00:05:59,750
that when it's 19.5 or above,

1640
00:05:59,840 --> 00:06:04,640
it becomes 20 when it's 19.4, 19.3, and then it gets rounded down.

1641
00:06:05,150 --> 00:06:07,700
But for now, this is all that we want.

1642
00:06:07,730 --> 00:06:12,730
We wanted you to be able to cut off the end and turn it into a whole number.

1643
00:06:14,030 --> 00:06:16,550
If you want to have a play around with the solution code,

1644
00:06:16,610 --> 00:06:21,610
then head over to this Repl.it over here and you'll be able to see the solution

1645
00:06:21,920 --> 00:06:23,600
code with a lot of comments

1646
00:06:23,630 --> 00:06:27,710
explaining the code line by line and showing you some different ways of doing

1647
00:06:27,710 --> 00:06:29,060
things. For example,

1648
00:06:29,300 --> 00:06:34,300
instead of converting the weight and height in line on the line where we're

1649
00:06:35,120 --> 00:06:39,350
actually doing the calculation, you could do it beforehand. Alternatively,

1650
00:06:39,380 --> 00:06:41,660
instead of using the exponent operator

1651
00:06:41,810 --> 00:06:46,010
because something to the power of two is simply just something multiplied by

1652
00:06:46,010 --> 00:06:48,200
itself, right? Then in this case,

1653
00:06:48,230 --> 00:06:51,080
you could also just do height_as_float times height_as_float.

1654
00:06:51,800 --> 00:06:54,680
Have a play around with this code and make sure that you're comfortable with

1655
00:06:54,680 --> 00:06:55,580
everything that's here.

1656
00:06:55,700 --> 00:06:58,010
And if you got anything wrong at all in the code challenge,

1657
00:06:58,130 --> 00:07:00,620
then go back and fix it. Now in the next lesson,

1658
00:07:00,680 --> 00:07:03,380
we're going to be talking about more mathematical operators

1659
00:07:03,650 --> 00:07:07,250
such as rounding numbers instead of just cutting off the end.

1660
00:07:07,700 --> 00:07:10,670
So for all of that and more, I'll see you on the next lesson.

1661
00:00:00,310 --> 00:00:03,670
In the last challenge where we calculated the BMI,

1662
00:00:04,090 --> 00:00:09,090
you saw how when we had a number that had a long list of numbers after the

1663
00:00:09,970 --> 00:00:11,440
decimal point. For example,

1664
00:00:11,440 --> 00:00:16,440
if I had divided 8 by 3 and I print this out,

1665
00:00:17,650 --> 00:00:22,650
you'll see that the value is 2.666666 and if we had just turned this 8

1666
00:00:25,180 --> 00:00:30,070
divided by 3 into an integer, right now it's a floating point number,

1667
00:00:30,400 --> 00:00:33,190
but if I convert it into an integer,

1668
00:00:33,580 --> 00:00:37,690
you'll see that all it does is it just chops off everything after the decimal

1669
00:00:37,690 --> 00:00:40,450
point. Instead of what we would traditionally do,

1670
00:00:40,510 --> 00:00:43,060
which is to round the number.

1671
00:00:43,510 --> 00:00:48,510
So if it's 2.5 it would go to 3, if it's 2.4 it would go down to 2.

1672
00:00:49,630 --> 00:00:53,410
Now in Python it's super easy to round numbers.

1673
00:00:53,800 --> 00:00:58,180
All you have to do is to use the round function like this.

1674
00:00:58,870 --> 00:01:03,010
If we write round(8 / 3) then it's going to round it into a

1675
00:01:03,010 --> 00:01:07,330
whole number and you'll see that instead of 2 we actually get 3 now

1676
00:01:07,360 --> 00:01:10,240
because 2.6 recurring becomes 3.

1677
00:01:11,170 --> 00:01:14,440
Now if you wanted to, you can actually go a step further.

1678
00:01:14,470 --> 00:01:19,330
You can specify the number of digits of precision you want to round it to.

1679
00:01:19,720 --> 00:01:22,990
So if I said I want to round it to two decimal places,

1680
00:01:23,440 --> 00:01:28,440
then I could write (8 / 3, 2) and then the number of places

1681
00:01:28,570 --> 00:01:29,680
that I want around it to.

1682
00:01:30,280 --> 00:01:35,280
So now our 2.666 recurring becomes 2.67 because I said we should round it to 2

1683
00:01:37,570 --> 00:01:40,510
decimal places. So if it makes it easier,

1684
00:01:40,540 --> 00:01:42,400
it might be easier if I write it like this.

1685
00:01:42,790 --> 00:01:47,560
So 2.666666666 and I'm going to round it to two decimal places

1686
00:01:47,890 --> 00:01:49,510
and again, I get the same result,

1687
00:01:49,600 --> 00:01:54,600
2.67. Now another way of modifying numbers is instead of dividing,

1688
00:01:55,990 --> 00:01:59,470
say 8 / 3,

1689
00:01:59,980 --> 00:02:02,830
we can also use the floor division,

1690
00:02:02,860 --> 00:02:05,980
so where you have two forward lashes instead of just one.

1691
00:02:06,550 --> 00:02:10,210
Now we know that whenever we divide any number by any other number,

1692
00:02:10,240 --> 00:02:13,780
the result always gets turned into a floating point number.

1693
00:02:14,380 --> 00:02:17,230
Now if you didn't want that and you just wanted an integer,

1694
00:02:17,380 --> 00:02:20,770
so a whole number chopping off all the numbers after the decimal in place,

1695
00:02:21,130 --> 00:02:23,860
you can just use the floor division like this.

1696
00:02:24,430 --> 00:02:28,930
And in this case, you would get 2 straight away without having to convert it

1697
00:02:28,930 --> 00:02:31,420
into an integer. And in fact,

1698
00:02:31,750 --> 00:02:36,750
if I go ahead and check the data type of the result of this calculation,

1699
00:02:37,450 --> 00:02:39,940
you'll see that it's actually an integer

1700
00:02:40,420 --> 00:02:45,340
whereas if I had just used the single, um, forward slash division,

1701
00:02:45,760 --> 00:02:49,570
then I get a floating point number with decimal places.

1702
00:02:50,230 --> 00:02:53,860
Even if this is a clean division, say 4 / 2,

1703
00:02:54,580 --> 00:02:59,580
this is still going to become a floating point number and the number is going to

1704
00:03:01,000 --> 00:03:04,630
be represented like this, 2.0, like so.

1705
00:03:05,890 --> 00:03:10,890
Now if we had saved the results of this calculation into a variable instead,

1706
00:03:12,370 --> 00:03:17,370
then one of the things that you can actually do is to continue performing

1707
00:03:17,950 --> 00:03:21,040
calculations on this variable. So for example,

1708
00:03:21,220 --> 00:03:23,110
I could do 4 / 2,

1709
00:03:23,440 --> 00:03:28,120
which is going to be equal to 2. But then if I want to divide it by the 2

1710
00:03:28,120 --> 00:03:28,953
again,

1711
00:03:29,020 --> 00:03:34,020
I could actually say result /= 2. And when I now print results,

1712
00:03:38,380 --> 00:03:43,380
I'll actually get 1 because it's 4 / 2 then divided by 2

1713
00:03:44,440 --> 00:03:48,490
again. Now very often when you're writing code,

1714
00:03:48,730 --> 00:03:52,780
say for example if you're keeping track of the user's score,

1715
00:03:53,170 --> 00:03:57,370
so you could have score = 0 to begin with and every single time in

1716
00:03:57,370 --> 00:04:00,700
your code say a user scores a point,

1717
00:04:01,090 --> 00:04:04,480
then you can get hold of this score variable again

1718
00:04:04,750 --> 00:04:09,430
and instead of saying score now equals the previous value of score plus one,

1719
00:04:09,790 --> 00:04:12,820
you can simply use this shorthand, +=,

1720
00:04:13,240 --> 00:04:17,260
so +=1. And now when we print score,

1721
00:04:17,560 --> 00:04:20,140
you'll see that it's actually equal to 1.

1722
00:04:21,370 --> 00:04:25,120
So instead of using +=, you can use -=,

1723
00:04:25,180 --> 00:04:29,920
which just takes the previous version of score and removes 1 from it.

1724
00:04:30,460 --> 00:04:32,980
*=  and /=.

1725
00:04:33,190 --> 00:04:37,600
So this is really handy when you have to manipulate a value based on its

1726
00:04:37,600 --> 00:04:40,360
previous value, which you'll have to do a lot in programming.

1727
00:04:41,440 --> 00:04:46,300
Now the final thing I want to show you is something called F strings and this

1728
00:04:46,300 --> 00:04:51,300
makes it really easy to mix strings and different data types.

1729
00:04:51,910 --> 00:04:53,710
So far, up to this point,

1730
00:04:54,190 --> 00:04:59,190
if we wanted to print, uhm, something like your score is,

1731
00:05:00,670 --> 00:05:03,760
and then we wanted to print the score we have to write plus,

1732
00:05:04,030 --> 00:05:06,310
but of course because these are different data types,

1733
00:05:06,310 --> 00:05:09,940
this is a string and this is an integer, we got a type error.

1734
00:05:10,510 --> 00:05:15,510
So we've had to convert this into a string before it will actually successfully

1735
00:05:16,480 --> 00:05:18,880
print when both the datatypes match.

1736
00:05:19,600 --> 00:05:24,600
Now this is quite painful and understandably a lot of programmers will need some

1737
00:05:25,270 --> 00:05:29,830
slightly more convenient way of incorporating things that have different data

1738
00:05:29,830 --> 00:05:33,880
types. Let's say um, the score is equal to zero. Um,

1739
00:05:33,910 --> 00:05:38,910
let's say the height is equal to 1.8 and isWinning is equal to true.

1740
00:05:41,200 --> 00:05:44,800
So here we've got a integer, a float, and a boolean,

1741
00:05:44,860 --> 00:05:49,450
and we want to mix it all into a sentence that is a string and get it printed

1742
00:05:49,450 --> 00:05:50,140
out.

1743
00:05:50,140 --> 00:05:55,140
So instead of having to convert all of these and use a whole bunch of plus

1744
00:05:55,390 --> 00:05:59,600
signs and then you have to convert everything into a string,

1745
00:06:00,110 --> 00:06:02,120
it's really, really painful, right?

1746
00:06:02,420 --> 00:06:07,420
So what we can do instead is use something in Python known as an F string.

1747
00:06:10,850 --> 00:06:15,850
And when an F string allows us to do is in front of a string like this one,

1748
00:06:17,120 --> 00:06:20,930
we type the character 'f' and it's really important that it goes in front of the

1749
00:06:20,930 --> 00:06:24,740
double quotes or a single quotes if you want to write your strings like this.

1750
00:06:25,220 --> 00:06:29,240
But I like to use double quotes and a lot of other Python programmers do too.

1751
00:06:29,600 --> 00:06:34,600
So essentially you're adding just the character f in front of the string,

1752
00:06:35,420 --> 00:06:40,420
and now this is an F string and you can start adding various values into this

1753
00:06:40,970 --> 00:06:43,040
string. So for example, if I wanted to write,

1754
00:06:43,340 --> 00:06:47,210
your score is equal to this variable score,

1755
00:06:47,630 --> 00:06:52,520
then I can put that variable inside a set of curly braces like this.

1756
00:06:53,270 --> 00:06:58,010
And now when I print my string, this one right here,

1757
00:06:58,400 --> 00:07:03,400
you'll see that it says your score is zero and it does all of the converting and

1758
00:07:03,980 --> 00:07:07,430
all of the stuff behind the scenes and you don't have to worry about any of

1759
00:07:07,430 --> 00:07:11,450
this. So if I want to continue along,

1760
00:07:11,480 --> 00:07:13,250
I could say your score is this,

1761
00:07:13,790 --> 00:07:18,790
your height is adding the height and then you are winning is then let's add

1762
00:07:24,830 --> 00:07:26,750
that final boolean value

1763
00:07:28,850 --> 00:07:30,770
and get it to run.

1764
00:07:31,130 --> 00:07:34,310
You can see that our entire string now prints out your score is 0,

1765
00:07:34,550 --> 00:07:37,460
your height is 1.8 you are winning is True.

1766
00:07:37,910 --> 00:07:42,910
So all of these different data types got combined into a string by using an F in

1767
00:07:43,580 --> 00:07:48,580
front of the string and then using these curly braces to place our variables

1768
00:07:49,640 --> 00:07:52,940
into this string. By using f strings,

1769
00:07:52,940 --> 00:07:57,940
you cut down on a lot of the manual labor of inserting different data types into

1770
00:07:59,030 --> 00:07:59,863
a string.

1771
00:07:59,930 --> 00:08:04,880
And this is going to come in really handy just about on the next lesson where

1772
00:08:04,880 --> 00:08:06,950
I've got a coding challenge for you.

1773
00:08:07,670 --> 00:08:10,100
Head over there and complete the challenge.

1774
00:00:00,360 --> 00:00:07,230
So you should see day 2.3 Your Life in Weeks, and this is the challenge that we're going to complete

1775
00:00:07,230 --> 00:00:08,189
in this lesson.

1776
00:00:09,450 --> 00:00:16,770
The idea is that there's a really great article by Tim Urban of Wait but Why on visualizing your

1777
00:00:16,770 --> 00:00:17,850
life in weeks.

1778
00:00:18,060 --> 00:00:23,730
And I was reading this recently, and it really made an impact on me, especially when you see that

1779
00:00:24,060 --> 00:00:34,500
a whole life from age 0 to 90 can be mapped out like this in weeks where every week is represented

1780
00:00:34,500 --> 00:00:38,910
by a little checkbox and you can see each of these boxes right?

1781
00:00:38,920 --> 00:00:44,250
This is like how many weeks you have in your whole life, and it's not as small as I thought it would

1782
00:00:44,250 --> 00:00:44,370
be.

1783
00:00:44,370 --> 00:00:48,050
I thought each of these boxes would be like invisible because they're so tiny because

1784
00:00:48,090 --> 00:00:50,760
I have so many weeks in my life, but it's actually not true.

1785
00:00:50,910 --> 00:00:51,990
There's actually not that many.

1786
00:00:52,530 --> 00:00:59,340
So in today's coding challenge, what I want you to do is to create a program using the mathematical

1787
00:00:59,340 --> 00:01:04,620
operations that you learned about, as well as the fstrings that you learned about in the last lesson

1788
00:01:05,010 --> 00:01:08,580
to tell us how many days, weeks and months we actually have left

1789
00:01:08,940 --> 00:01:16,230
if we were lucky enough to live until 90 years old. The code is going to ask you for your current age,

1790
00:01:17,280 --> 00:01:26,100
let's say that I'm 12, and then it's going to calculate the number of days, weeks and months you have

1791
00:01:26,100 --> 00:01:31,950
left in your life if you lived until 90. And then it's going to print it out to you

1792
00:01:32,220 --> 00:01:32,940
like so.

1793
00:01:34,370 --> 00:01:40,550
And the important premise of this code challenge for all of the test to pass is that there are 365 days

1794
00:01:40,550 --> 00:01:44,150
in the year, 52 weeks in a year and 12 months in a year.

1795
00:01:44,690 --> 00:01:47,900
I know that because of leap year, it's actually a little bit more than that,

1796
00:01:47,900 --> 00:01:53,030
but for this exercise sake, let's just call it 365, 52 and 12.

1797
00:01:54,140 --> 00:01:59,600
Pause the video and see if you can complete this challenge and then head back over here and we'll walk through

1798
00:01:59,600 --> 00:02:00,500
the solution together.

1799
00:02:05,020 --> 00:02:05,410
All right.

1800
00:02:05,440 --> 00:02:06,820
How did that exercise go?

1801
00:02:06,940 --> 00:02:11,590
I'm sorry, it's a little bit dark making you think about how many days, weeks and months you have left

1802
00:02:11,920 --> 00:02:14,560
in life, but you can think about it as a motivation, right?

1803
00:02:15,070 --> 00:02:19,780
If I only have 400 months left, I don't know if I want to spend one of those months just watching Game

1804
00:02:19,780 --> 00:02:20,200
of Thrones.

1805
00:02:20,650 --> 00:02:22,450
Maybe I want to do something for other people.

1806
00:02:22,460 --> 00:02:23,710
Maybe I want to create something.

1807
00:02:25,030 --> 00:02:26,920
So how are we going to calculate this?

1808
00:02:27,130 --> 00:02:33,970
Well, we've got hold of the age from the input, but you might remember from previous lessons that

1809
00:02:33,970 --> 00:02:37,210
the input always creates a string data type.

1810
00:02:37,780 --> 00:02:43,450
In order to do your maths, we do still have to do a type conversion, so we have to change our age

1811
00:02:43,450 --> 00:02:44,590
into a number.

1812
00:02:44,590 --> 00:02:49,480
So let's call it age_as_int, age is never going to be a float, right?

1813
00:02:50,230 --> 00:02:55,180
Because not many people are going to tell you that they are 56.4 years old, so we're

1814
00:02:55,180 --> 00:03:00,730
going to accept this as a whole number. So we'll convert our age into an int.

1815
00:03:01,750 --> 00:03:04,900
Now the next stage is we have to do some calculations.

1816
00:03:05,380 --> 00:03:09,340
We have to calculate the number of years left, right?

1817
00:03:09,340 --> 00:03:15,480
So let's call it years_remaining and that's going to be equal to 90,

1818
00:03:15,490 --> 00:03:20,920
so we're presuming we're going to live to 90, minus age_as_int.

1819
00:03:21,670 --> 00:03:26,680
So now that we've got the number of years remaining, we can calculate the number of days, weeks and

1820
00:03:26,680 --> 00:03:27,520
months left.

1821
00:03:27,520 --> 00:03:37,720
So days remaining is going to be equal to years remaining multiplied by 365 because there

1822
00:03:37,720 --> 00:03:44,170
are 365 days in a year, and then we can do the same for weeks.

1823
00:03:47,780 --> 00:03:49,100
And months.

1824
00:03:52,190 --> 00:03:59,150
So now that I've got hold of the number of days remaining, weeks remaining and months remaining, then

1825
00:03:59,150 --> 00:04:01,550
I'm ready to actually use it inside my string.

1826
00:04:01,790 --> 00:04:07,790
But before we do that, it's always helpful to check your code as you go along to make sure that it

1827
00:04:07,790 --> 00:04:09,680
works exactly as you expect it to.

1828
00:04:10,130 --> 00:04:16,640
So let's go ahead and try to print what is the number of months remaining.

1829
00:04:17,149 --> 00:04:22,490
So if we go ahead and run our code and let's say that we're 80 years old, right?

1830
00:04:22,820 --> 00:04:27,910
Which means that we'll have 10 years remaining and we'll have 120 months remaining.

1831
00:04:27,920 --> 00:04:30,260
So all of that looks pretty good to me.

1832
00:04:30,830 --> 00:04:37,490
So the next thing we have to do is to somehow output this sentence where it says you have x days, y weeks

1833
00:04:37,490 --> 00:04:39,020
and z months left.

1834
00:04:39,200 --> 00:04:41,990
So let's copy that and paste that sentence in here.

1835
00:04:42,500 --> 00:04:47,900
And then I'm going to turn it into a string by wrapping it inside a set of double-quotes.

1836
00:04:48,620 --> 00:04:54,770
Now that I've got a string, I can turn it into an fstring by putting the card to 'f' before the string.

1837
00:04:55,310 --> 00:05:02,270
And instead of having x, y and z, I can replace them with some curly braces inside of which I can

1838
00:05:02,270 --> 00:05:04,100
put my variable names.

1839
00:05:04,550 --> 00:05:13,610
So I'll change this to days_remaining, this to weeks_remaining and this to months_remaining.

1840
00:05:17,680 --> 00:05:23,350
So now that I've got my string, I have two options: I can either just wrap this inside a print statement

1841
00:05:23,350 --> 00:05:24,520
and print it as it is.

1842
00:05:24,850 --> 00:05:30,730
But what I think might actually make it easier to read is to save it inside a separate variable called

1843
00:05:30,730 --> 00:05:31,270
message.

1844
00:05:31,720 --> 00:05:35,110
And then in the next line, I can simply print my message.

1845
00:05:35,260 --> 00:05:39,040
It does exactly the same thing, but I think this is a little bit easier to read.

1846
00:05:39,730 --> 00:05:43,330
So now let's go ahead and run our code and see if we get any errors.

1847
00:05:44,950 --> 00:05:48,640
It's asking us for our current age, let's say, was 67 years old.

1848
00:05:49,270 --> 00:05:57,070
Well, then we only have 8,395 days and 1,196 weeks and 276 months.

1849
00:05:58,240 --> 00:06:00,790
So I hope you managed to get this code challenge right

1850
00:06:01,120 --> 00:06:03,910
and even though the challenge is a little bit dark,

1851
00:06:04,300 --> 00:06:08,650
well, at least remember that when you become a really good programmer, you'll be able to cut down

1852
00:06:08,980 --> 00:06:12,160
on a lot of the boring things and repetitive tasks in life.

1853
00:06:12,490 --> 00:06:16,240
So at least you'll be claiming back some of those days, weeks and months.

1854
00:06:16,900 --> 00:06:21,130
So I hope you had fun with me on this code challenge. In the next lesson,

1855
00:06:21,160 --> 00:06:24,580
I've got a quiz for you. So head over there and give it a go.

1856
00:00:00,150 --> 00:00:07,110
Hey, guys, welcome to the final project of today, and in this final project, we're going to be building

1857
00:00:07,140 --> 00:00:08,730
a tip calculator.

1858
00:00:09,390 --> 00:00:11,870
So the final output is going to look like this.

1859
00:00:11,880 --> 00:00:12,760
It's going to print

1860
00:00:12,810 --> 00:00:14,430
Welcome to the tip calculator.

1861
00:00:14,700 --> 00:00:19,290
And it's going to ask you for an input for how much the total bill came to.

1862
00:00:19,890 --> 00:00:27,360
Let's say that we and a couple of friends went out for lunch and it came to 124.

1863
00:00:27,360 --> 00:00:28,920
56 dollars.

1864
00:00:29,430 --> 00:00:33,580
And then it'll ask you, what percentage tip would you like to give?

1865
00:00:33,600 --> 00:00:36,570
So let's say we want to give a 12 percent tip.

1866
00:00:36,570 --> 00:00:38,570
So we enter 12 and hit enter.

1867
00:00:39,210 --> 00:00:42,590
And then finally it asks how many people are splitting this bill?

1868
00:00:42,600 --> 00:00:45,740
Let's say there's seven of us and then hit enter.

1869
00:00:46,140 --> 00:00:51,270
Finally, it's going to tell us that each person should pay about $19.93.

1870
00:00:52,230 --> 00:00:58,200
Notice how the final bill, even though after all of these calculations, it's probably got more numbers

1871
00:00:58,200 --> 00:01:05,790
after the decimal point, we only want two decimal places of accuracy, so it should be rounded to two 

1872
00:01:05,790 --> 00:01:06,730
decimal places.

1873
00:01:07,350 --> 00:01:14,430
The second thing to remember is that these are percentages, and in order to calculate a percentage of

1874
00:01:14,430 --> 00:01:20,790
something, you can multiply a number by the percentage number divided by 100.

1875
00:01:21,300 --> 00:01:24,020
Let me show you this in a little bit more detail.

1876
00:01:24,480 --> 00:01:30,540
If you head over to replit/appbrewery/tip-calculator-start, then you've got

1877
00:01:30,540 --> 00:01:33,420
these starting file for this project.

1878
00:01:33,990 --> 00:01:39,720
And here I just want to quickly show you how the math works, because this project is not about testing

1879
00:01:39,720 --> 00:01:40,230
your math.

1880
00:01:40,230 --> 00:01:43,740
It's about seeing how well you've understood the programming concepts.

1881
00:01:44,280 --> 00:01:48,810
Let's say that we had a bill of $150.

1882
00:01:49,200 --> 00:01:57,690
If we were to apply a 12% tip on top of that, then 12% is going to be equal to twelve

1883
00:01:57,690 --> 00:02:01,830
divided by a hundred, which is equal to 0.12.

1884
00:02:02,670 --> 00:02:09,000
Now the next step is we can multiply 150, the total bill, by 0.12.

1885
00:02:09,419 --> 00:02:14,470
And this will give us what 12 percent of 150 is, which is 18.

1886
00:02:15,150 --> 00:02:21,390
Now we of course, have to add the tip onto the final bill so it becomes 150 plus 18.

1887
00:02:21,930 --> 00:02:27,040
So $150 with a 12 percent tip is equal to $168.

1888
00:02:27,540 --> 00:02:35,710
Now, a shorthand way of doing all of this is simply multiplying 150 by 1.12.

1889
00:02:36,180 --> 00:02:42,580
So the 1 is 150, and then it's 0.12 on top of that.

1890
00:02:43,110 --> 00:02:46,680
So when we do this, it gives us pretty much the same number.

1891
00:02:47,490 --> 00:02:52,560
Now, if during your testing and your coding you come across some sort of number that looks a little

1892
00:02:52,560 --> 00:02:58,860
bit strange because you think 150 multiplied by 1.12 should actually equal 168

1893
00:02:58,860 --> 00:02:59,810
precisely.

1894
00:03:00,210 --> 00:03:02,980
So what are all of these extra numbers at the end?

1895
00:03:03,510 --> 00:03:06,540
Now, the short answer is you don't have to worry about it.

1896
00:03:06,540 --> 00:03:11,940
It's simply related to how Python processes these floating-point numbers.

1897
00:03:12,360 --> 00:03:18,420
If you're really interested and you want to read about this, then I'll link to this page in the Python

1898
00:03:18,420 --> 00:03:21,660
documentation where they tell you why this is happening.

1899
00:03:22,020 --> 00:03:24,750
But be warned, it's pretty dense and it's pretty heavy.

1900
00:03:25,080 --> 00:03:30,170
But the final conclusion is it's just the way that Python is approximating this number.

1901
00:03:30,480 --> 00:03:32,630
So you don't actually have to worry about this.

1902
00:03:33,180 --> 00:03:38,610
Now, once we've gotten to 168, the next step is to split it between five people.

1903
00:03:38,610 --> 00:03:44,970
So 168 divided by 5 is equal to 33.6.

1904
00:03:45,570 --> 00:03:51,540
Now, what we want to show the user is we want to show them the amount that they have to pay with two

1905
00:03:51,540 --> 00:03:52,950
decimal places of accuracy.

1906
00:03:52,990 --> 00:03:57,630
We want to say something like 33.60 if this is the case, because that's normally

1907
00:03:57,630 --> 00:04:00,880
how we represent numbers when it comes to money.

1908
00:04:01,410 --> 00:04:07,740
So what I want you to do is to also be able to round any of these numbers to two decimal places.

1909
00:04:08,610 --> 00:04:15,330
If you have successfully created this program, then it should work exactly as this example version

1910
00:04:15,330 --> 00:04:22,290
would, which you can find if you go to tip-calculator-end.appbrewery.repl.run, and

1911
00:04:22,290 --> 00:04:27,990
you'll be to see the formatting where it actually tells you each person should pay this particular dollar

1912
00:04:27,990 --> 00:04:31,530
amount and it's rounded to two decimal places.

1913
00:04:31,890 --> 00:04:38,520
And this is the amount after taking into consideration these three different inputs from the user.

1914
00:04:39,090 --> 00:04:44,220
Have a play around with the final product and then have a think about how you would create this program

1915
00:04:44,220 --> 00:04:50,610
step by step and then give it a go by forking this starting repository to your own account and then

1916
00:04:50,610 --> 00:04:52,150
try to achieve this result.

1917
00:04:53,040 --> 00:04:58,530
This is going to test everything that you've done so far including fstrings, including complex

1918
00:04:58,530 --> 00:04:59,820
mathematical operations,

1919
00:05:00,030 --> 00:05:07,320
including PEMDAS and calculating numbers and the order in which mathematical operations are run by

1920
00:05:07,320 --> 00:05:13,440
a computer, as well as everything you learn in the previous lesson and the previous days as well. I think

1921
00:05:13,440 --> 00:05:17,850
this is going to be a lot of fun and the end result is going to be kind of useful the next time that

1922
00:05:17,850 --> 00:05:19,730
you need to split the bill between friends.

1923
00:05:20,130 --> 00:05:22,320
So I'm going to let you pause the video and get on with it.

1924
00:05:22,650 --> 00:05:27,330
And then once you're done, if you want to, head back over here and I'll walk through the solution with

1925
00:05:27,330 --> 00:05:31,860
you. But I really recommend you giving it a good go before you come back.

1926
00:05:32,100 --> 00:05:34,340
So pause the video now and I'll see you later.

1927
00:05:40,000 --> 00:05:45,340
OK, so we've seen how the program is supposed to work and we're trying to create it from scratch by

1928
00:05:45,340 --> 00:05:51,970
reverse-engineering it essentially. The first thing I'm going to do is I'm going to fork the starting

1929
00:05:51,970 --> 00:05:55,510
project and create my own version of it which I can edit.

1930
00:05:56,200 --> 00:05:59,960
Now, the first thing our program should say is welcome to the tip calculator.

1931
00:06:00,250 --> 00:06:01,860
So that's easy enough.

1932
00:06:01,870 --> 00:06:03,780
We just have to create a print statement.

1933
00:06:04,330 --> 00:06:04,910
Perfect.

1934
00:06:05,110 --> 00:06:10,360
And if you're creating a really enthusiastic tip calculator, you can replace the full stop with an

1935
00:06:10,360 --> 00:06:11,290
exclamation mark.

1936
00:06:12,100 --> 00:06:16,760
OK, so let's run it step by step to make sure that we don't have any errors along the way.

1937
00:06:17,200 --> 00:06:20,170
So the first step seems to be working. Now 

1938
00:06:20,170 --> 00:06:23,170
the next step is to ask the user for some input.

1939
00:06:23,470 --> 00:06:26,690
And we want to know what was their total bill, what did it come to?

1940
00:06:27,280 --> 00:06:32,350
So let's go ahead and create an input and ask them what was the total bill?

1941
00:06:32,980 --> 00:06:38,160
And then we'll add a dollar sign or whatever currency it is that you prefer to work with.

1942
00:06:38,560 --> 00:06:45,040
Because when we actually run this, you'll see that the input will go straight after the end of that

1943
00:06:45,040 --> 00:06:45,450
string,

1944
00:06:45,460 --> 00:06:47,020
so at the dollar sign.

1945
00:06:47,440 --> 00:06:52,250
So now we can enter a dollar amount like this, but it's not really saved anywhere.

1946
00:06:52,270 --> 00:06:56,950
This data just disappears because we haven't stored it inside a variable.

1947
00:06:57,400 --> 00:06:58,810
So let's go ahead and do that.

1948
00:06:58,810 --> 00:07:05,650
Let's call this variable bill and we'll set it to equal whatever the user typed in to this input.

1949
00:07:06,310 --> 00:07:14,320
Now, remember that this bill is going to have a data type of a string, right?

1950
00:07:14,350 --> 00:07:21,010
So if I go ahead and hit run and let's just type some numbers in here, you'll see that the data type

1951
00:07:21,010 --> 00:07:25,530
of the bill is, as we said, a string. In order to be able to do math,

1952
00:07:25,930 --> 00:07:30,730
you might remember, we have to change this into a number format,

1953
00:07:30,730 --> 00:07:32,420
so a float or an int.

1954
00:07:32,860 --> 00:07:38,170
Now, in this case, because the bill is likely to have numbers after the decimal place, it's probably

1955
00:07:38,170 --> 00:07:45,610
better that we turn it into a float so that we get the most accurate result possible. Now that we're

1956
00:07:45,610 --> 00:07:46,980
done with the bill,

1957
00:07:47,050 --> 00:07:53,980
the next question the tip calculator should ask is what percentage tip would you like to give? 10, 12

1958
00:07:53,980 --> 00:07:54,730
or 15?

1959
00:07:55,030 --> 00:07:59,050
Or you can, of course, switch this up depending on how much tip you normally give.

1960
00:07:59,680 --> 00:08:02,800
So the next line is going to be another input.

1961
00:08:04,910 --> 00:08:09,640
Here, I'm asking the user, how much tip would you like to give and giving them some examples. And

1962
00:08:09,650 --> 00:08:16,040
notice how in my examples, I don't actually have the percentage sign here because I don't really

1963
00:08:16,040 --> 00:08:24,770
want them to type the percent sign into this input because if they do when they say 12%,

1964
00:08:25,250 --> 00:08:31,960
this is going to be really hard for me to turn the 12% into an actual number.

1965
00:08:32,539 --> 00:08:38,929
So you could, in your input message, say something like how much tip would you like to give 10,

1966
00:08:38,929 --> 00:08:39,770
12, 15?

1967
00:08:40,070 --> 00:08:42,200
Please don't add any percentage signs.

1968
00:08:42,380 --> 00:08:44,200
Just add the number or something like that.

1969
00:08:44,810 --> 00:08:51,590
But again, once we've done this, it's not stored anywhere unless we add it into a variable.

1970
00:08:52,100 --> 00:08:59,660
Now we've got a bill that stores the total bill as a float and we've got a tip which is going to be

1971
00:08:59,660 --> 00:09:02,150
a whole number, 10, 12 or 15,

1972
00:09:02,150 --> 00:09:02,470
right?

1973
00:09:02,870 --> 00:09:08,960
So depending on what you think is best, you can either turn this into a float or in my case, I'm probably

1974
00:09:08,960 --> 00:09:11,790
going to convert it into an integer.

1975
00:09:12,560 --> 00:09:17,290
So now we're onto the final step, which is how many people to split the bill between.

1976
00:09:17,750 --> 00:09:21,050
So let's go ahead and create a variable called people.

1977
00:09:21,560 --> 00:09:29,690
And I'm going to add an int wrapper around this input so that even in the very beginning, we know that

1978
00:09:29,690 --> 00:09:35,600
we have to convert the number of people into a whole number because I've never had a meal with 

1979
00:09:35,600 --> 00:09:36,930
3.5 before.

1980
00:09:37,850 --> 00:09:41,870
So the input is going to be how many people to split the bill.

1981
00:09:43,400 --> 00:09:49,850
And at this point, they should enter the number of people which will turn into an integer stored inside

1982
00:09:49,880 --> 00:09:56,180
this variable called people. So now that we've got all the data collected from the user, we're finally

1983
00:09:56,180 --> 00:09:57,500
ready to do some math.

1984
00:09:58,040 --> 00:10:08,210
And we said that the way to work out the tip is by multiplying it by 1. and then the number after

1985
00:10:08,210 --> 00:10:12,180
the decimal point is whatever percentage they decided to give.

1986
00:10:12,560 --> 00:10:18,510
So it would be 1.1 if it was 10 percent and 1.15 if it was 15 percent.

1987
00:10:19,130 --> 00:10:23,630
Let's go ahead and calculate the bill_with_tip.

1988
00:10:24,990 --> 00:10:32,370
So remember how we said that before the tip percentage is equal to the whole number, 10, 12 or 15,

1989
00:10:32,760 --> 00:10:38,190
divided by 100, which turns it into 0.1, 0.12 or 0.15,

1990
00:10:38,730 --> 00:10:46,290
and then once this calculation is done, we can multiply it by the bill. And then finally we add that

1991
00:10:46,290 --> 00:10:47,880
to the original bill.

1992
00:10:49,050 --> 00:10:54,510
So let's go ahead and print this and just check to see that it looks sensible.

1993
00:10:55,080 --> 00:10:58,080
So bill_with_tip is what we're going to print.

1994
00:10:58,570 --> 00:11:01,160
And let's put some easy numbers in there.

1995
00:11:01,680 --> 00:11:06,820
And let's say that the bill was a hundred dollars and the tip was 10 percent.

1996
00:11:07,350 --> 00:11:10,830
So then the 10% of hundred dollars is ten dollars.

1997
00:11:11,070 --> 00:11:12,540
So the bill_with_tip,

1998
00:11:12,810 --> 00:11:18,540
that's what's going to be printed next, should be 110. So we can type anything in here because

1999
00:11:18,540 --> 00:11:19,380
we're not using it.

2000
00:11:19,680 --> 00:11:24,550
And you can see that this calculation, bill_with_tip, is 110, which is what we want.

2001
00:11:25,170 --> 00:11:28,350
Now, there's a lot of other ways that you can express this.

2002
00:11:28,850 --> 00:11:36,690
For example, you could say, bill * (1 + tip/100).

2003
00:11:37,320 --> 00:11:40,630
So this would actually give you the same result as well.

2004
00:11:41,250 --> 00:11:47,010
But remember what we said previously about how Python is a little bit weird with floating-point numbers.

2005
00:11:47,550 --> 00:11:51,570
But essentially this is still giving us the same result, which is 110.

2006
00:11:52,500 --> 00:11:55,940
So you can choose whichever way you find most intuitive.

2007
00:11:55,950 --> 00:12:00,340
And if you want, you can even split this up into several steps, right?

2008
00:12:00,360 --> 00:12:05,580
We could say that tip_as_percent is equal to tip/100.

2009
00:12:07,080 --> 00:12:16,530
And then we can multiply the bill by the tip_as_percent to get the total tip amount.

2010
00:12:18,990 --> 00:12:26,290
And then finally, we can get the total bill by adding the bill to the total_tip_amount.

2011
00:12:27,270 --> 00:12:32,430
Feel free to do this whichever way makes sense to you, but I'm going to leave it with as many steps

2012
00:12:32,430 --> 00:12:37,320
as possible so that you can actually work through the logic if you got stuck on this math.

2013
00:12:38,760 --> 00:12:44,070
Now, the next thing we need to do is to divide the total bill by the number of people.

2014
00:12:44,370 --> 00:12:47,430
So if we had five people, then we would divide it five ways,

2015
00:12:47,430 --> 00:12:47,710
right?

2016
00:12:48,210 --> 00:12:51,750
So let's call this bill_per_

2017
00:12:53,050 --> 00:12:59,560
person, which is going to be equal to the total bill divided by the number of people.

2018
00:13:01,280 --> 00:13:08,000
Now, at this stage, this bill_per_person is a floating-point number, so it could have many, many

2019
00:13:08,000 --> 00:13:10,000
digits after the decimal point.

2020
00:13:10,490 --> 00:13:16,910
If we want to round this to two decimal places, then you might remember from some of the lessons today,

2021
00:13:17,240 --> 00:13:19,790
we have access to a function called round.

2022
00:13:20,300 --> 00:13:26,090
And here we can add the number that we want around, which is the bill_per_person,

2023
00:13:26,570 --> 00:13:33,530
and then after a comma, we can specify how precise, how many numbers or how many decimal places do

2024
00:13:33,530 --> 00:13:35,030
we want to round this bill to.

2025
00:13:35,510 --> 00:13:38,120
And in our case, it's two decimal places.

2026
00:13:38,780 --> 00:13:47,570
So now this is the final amounts, which I'll call final_amount which is the bill_per_person rounded

2027
00:13:47,570 --> 00:13:49,190
to two decimal places.

2028
00:13:49,790 --> 00:13:57,190
And we can now finally print this to the user and say each person should pay...

2029
00:13:57,830 --> 00:14:03,740
And remember, you can either use string concatenation which will require you to convert this number

2030
00:14:03,740 --> 00:14:09,380
into a string again, or use the trick that we learned in the previous lessons where we can create an

2031
00:14:09,380 --> 00:14:17,300
fstring by adding F in front of the string and then using some curly braces to insert the final amount

2032
00:14:17,300 --> 00:14:17,930
right here.

2033
00:14:18,620 --> 00:14:27,820
And we can write the final_amount dollars or we can put a dollar sign in front and maybe a colon here.

2034
00:14:28,460 --> 00:14:34,160
And now if we clear our console and run our code, then you'll see it work.

2035
00:14:34,190 --> 00:14:35,770
So welcome to the tip calculator.

2036
00:14:35,780 --> 00:14:36,910
What was the total bill?

2037
00:14:37,220 --> 00:14:38,990
Let's make up some random number.

2038
00:14:39,560 --> 00:14:40,910
What percentage tip?

2039
00:14:40,910 --> 00:14:47,780
Let's say we're going to get 15 and then we're splitting it between five people. And it calculates everything,

2040
00:14:47,780 --> 00:14:49,370
doing all of that maths.

2041
00:14:49,730 --> 00:14:55,940
And finally, it rounds it to two decimal places, giving us the final amount each person should pay.

2042
00:14:56,780 --> 00:14:59,440
But what if we test it out with the initial numbers?

2043
00:15:00,200 --> 00:15:07,700
Let's hit, run and let's try to put in 150 dollars as the total bill, and then we're going to give

2044
00:15:07,700 --> 00:15:11,180
a 12 percent tip and we're going to split it between five people.

2045
00:15:11,750 --> 00:15:16,520
Notice that is telling us that each person should pay $33.6.

2046
00:15:16,880 --> 00:15:20,960
But normally, we're used to seeing that rounded to two decimal places.

2047
00:15:21,440 --> 00:15:23,960
But we have that round function here already.

2048
00:15:24,230 --> 00:15:26,060
So why is it not doing its job?

2049
00:15:27,160 --> 00:15:32,830
Well, if you think about it, the result of this calculation is just 33.6. There's

2050
00:15:32,830 --> 00:15:40,390
nothing after the six, but we want it to display a zero. And this is a formating problem rather than

2051
00:15:40,390 --> 00:15:42,200
a mathematical rounding problem.

2052
00:15:42,670 --> 00:15:43,810
So what do we do?

2053
00:15:43,840 --> 00:15:50,410
Well, we go to our good friend Google whenever we're stuck and we're going to search for how to round

2054
00:15:50,410 --> 00:15:55,890
number to two decimal places in Python.

2055
00:15:56,620 --> 00:16:02,260
And if we take a look at the first Stack Overflow question, you can see that this person had pretty much

2056
00:16:02,260 --> 00:16:04,240
the same problem that we had.

2057
00:16:04,630 --> 00:16:11,980
And if we're scrolling down, you can see that the solution is to use some sort of formatting. And we

2058
00:16:11,980 --> 00:16:17,260
can try out each of these examples one by one in code to see how they work,

2059
00:16:17,500 --> 00:16:21,490
and we can also take a look at the documentation that they link to.

2060
00:16:22,360 --> 00:16:29,890
So the actual way that we do this is by using a colon and then dot and then we specify that after the

2061
00:16:29,950 --> 00:16:36,120
dot, we want two decimal points in our float. And we use the format function to do this.

2062
00:16:36,460 --> 00:16:43,360
So instead of using round, we can create this final amount variable by creating a string using that

2063
00:16:43,360 --> 00:16:52,630
format, :.2f, and then we can use the format function to pass in that bill_per_person.

2064
00:16:54,230 --> 00:17:03,740
And now when we run this again, using the same inputs, we now get a .60 at the very end

2065
00:17:04,220 --> 00:17:10,190
and this is basically turned this bill_per_person, which is a float into a string.

2066
00:17:10,400 --> 00:17:16,680
And that string is abiding by this particular format, which is the two decimal places.

2067
00:17:17,329 --> 00:17:19,369
How did you get on with this project?

2068
00:17:19,609 --> 00:17:25,550
Did you manage to get it in one go without having to look at the solution? If you got stuck at any point

2069
00:17:25,550 --> 00:17:27,950
or if your code didn't work as you expect it to,

2070
00:17:28,280 --> 00:17:33,110
this is a time to go back to it, fix it, and make sure that you've understood everything that's been

2071
00:17:33,110 --> 00:17:35,150
covered through this exercise.

2072
00:17:35,480 --> 00:17:40,310
But if you already created it and it's working perfectly, then you're ready to go out there with your

2073
00:17:40,310 --> 00:17:41,600
tip calculator in hand.

2074
00:17:41,960 --> 00:17:47,430
Remember that you can save the URL of your tip calculator in your phone as a bookmark.

2075
00:17:47,450 --> 00:17:52,040
So the next time you go out and have dinner or lunch with friends, then you can crack open your own

2076
00:17:52,040 --> 00:17:54,800
tip calculator and figure out the final bill.

2077
00:17:55,670 --> 00:18:01,130
So I hope you had fun building this project and doing all of the coding exercises and learning about mathematical

2078
00:18:01,130 --> 00:18:09,350
operations, fstrings, data types, type conversion, and all of the things that we did today. Have a rest

2079
00:18:09,350 --> 00:18:15,500
and I'll be back tomorrow teaching you about conditional statements and how we can get the program to

2080
00:18:15,500 --> 00:18:21,500
do different things depending on certain conditions or certain parts of our code.

2081
00:18:22,100 --> 00:18:25,360
So I bid you good night and I'll see you tomorrow.


2082
00:00:00,060 --> 00:00:02,520
Hey guys, welcome to Day 3.

2083
00:00:02,910 --> 00:00:05,820
Today you can learn all about conditional statements,

2084
00:00:05,910 --> 00:00:10,890
if else, else if, logical operators, code blocks, scope,

2085
00:00:11,190 --> 00:00:14,520
global and local name spacing and a whole lot more.

2086
00:00:15,180 --> 00:00:20,180
And by the end of the day you will know enough to be able to build this awesome

2087
00:00:20,250 --> 00:00:21,870
Choose your own adventure game.

2088
00:00:22,530 --> 00:00:27,530
So this is what it looks like when it loads and our mission is to find the

2089
00:00:28,200 --> 00:00:31,770
treasure. So it tells us your at a crossroad, where do you want to go?

2090
00:00:31,800 --> 00:00:35,910
Left or right? Let's say I want to go left. You come to a Lake,

2091
00:00:35,940 --> 00:00:37,920
there's an Island in the middle of the Lake. Type

2092
00:00:37,920 --> 00:00:42,870
wait to wait for a boat, type swim to swim across. I'm going to wait for a boat.

2093
00:00:43,980 --> 00:00:47,760
You arrive at the Island unharmed, there's a house with three doors, one red,

2094
00:00:47,790 --> 00:00:50,580
one yellow and one blue. Which color do you choose?

2095
00:00:50,760 --> 00:00:55,760
Let's choose red. And unfortunately, it's a room full of fire. Game over.

2096
00:00:57,090 --> 00:01:01,170
So this game lets the user make decisions and depending on what they've chosen,

2097
00:01:01,230 --> 00:01:05,489
it continues the game storyline. If you want to have a go at this game,

2098
00:01:05,730 --> 00:01:07,560
you can head over to treasure-island

2099
00:01:07,620 --> 00:01:12,620
-end.appbrewery.repl.run and have a play around with the game.

2100
00:01:13,050 --> 00:01:14,040
And once you're ready,

2101
00:01:14,070 --> 00:01:17,160
head over to the next lesson and we're going to start picking up the skills

2102
00:01:17,400 --> 00:01:19,830
that's going to be required in order to build this game.

2103
00:01:20,430 --> 00:01:22,230
So I'll see you on the next lesson.

2104
00:00:00,340 --> 00:00:04,180
Here's a question. Have you ever sat in your bath and wondered,

2105
00:00:04,540 --> 00:00:07,750
why is it that no matter how forgetful I am,

2106
00:00:08,140 --> 00:00:10,450
my bath never overflows like this?

2107
00:00:10,690 --> 00:00:14,230
This is something I was thinking about the other day and I realized that it's

2108
00:00:14,260 --> 00:00:19,180
not because I'm particularly diligent. I forget stuff all the time. I mean,

2109
00:00:19,300 --> 00:00:24,190
pizza, anyone? This is what my pizzas usually look like. Um,

2110
00:00:24,490 --> 00:00:29,490
but the reason why a bathtub or the sink doesn't overflow is because of this

2111
00:00:30,490 --> 00:00:34,270
fantastic piece of engineering, the overflow.

2112
00:00:34,810 --> 00:00:39,810
So this means that whenever the water reaches beyond a certain level about here,

2113
00:00:40,810 --> 00:00:43,240
the water starts overflowing

2114
00:00:43,270 --> 00:00:47,740
so the bathtub doesn't overflow and annoy your neighbors downstairs.

2115
00:00:48,340 --> 00:00:53,110
In fact, we could represent this mechanism with a conditional statement.

2116
00:00:53,680 --> 00:00:57,820
When the water level is say greater than 80 centimeters,

2117
00:00:58,240 --> 00:01:00,670
then it should drain the water.

2118
00:01:01,030 --> 00:01:04,420
But if the water level is not greater than 80 centimeters,

2119
00:01:04,599 --> 00:01:07,240
it should continue filling up the tub.

2120
00:01:07,660 --> 00:01:12,520
This type of conditional statement is known as an if/else statement.

2121
00:01:13,000 --> 00:01:15,340
Depending on a particular condition,

2122
00:01:15,580 --> 00:01:18,460
we would do either A or B.

2123
00:01:18,910 --> 00:01:22,420
And when we want to write Python code to represent this,

2124
00:01:22,600 --> 00:01:23,950
it looks something like this.

2125
00:01:24,280 --> 00:01:29,280
There's the keyword if, and then the condition that we're testing for and then a

2126
00:01:30,280 --> 00:01:35,280
colon and after the colon we've got an indented block of code which should be

2127
00:01:35,800 --> 00:01:39,370
executed if this condition is met, if it's true.

2128
00:01:40,120 --> 00:01:41,680
But if it's not true,

2129
00:01:42,010 --> 00:01:47,010
then we will skip to the else block and it's just the else  keyword with a colon

2130
00:01:47,800 --> 00:01:52,090
and then this code block would execute if the condition is false.

2131
00:01:52,840 --> 00:01:57,490
So we could represent that previous bathtub situation with code that looks a bit

2132
00:01:57,490 --> 00:01:58,150
like this.

2133
00:01:58,150 --> 00:02:03,150
Let's say our water level is at 50 centimeters and then we would test if the

2134
00:02:03,220 --> 00:02:07,690
water level is greater than 80 centimeters. Well, if that is the case,

2135
00:02:07,750 --> 00:02:09,910
then we should drain the water.

2136
00:02:10,360 --> 00:02:13,060
But if it's not greater than 80 centimeters,

2137
00:02:13,120 --> 00:02:15,400
in other words else, well in this case,

2138
00:02:15,430 --> 00:02:17,830
we should just continue filling up the bathtub.

2139
00:02:18,280 --> 00:02:21,370
Let's put this into practice with a real life problem.

2140
00:02:21,940 --> 00:02:26,350
Now let's say that you've gotten a job at a theme park and your first job of the

2141
00:02:26,350 --> 00:02:31,330
day is to write some code that replaces the ticket box.

2142
00:02:31,990 --> 00:02:35,800
Now there's a couple of things that you'll need to think about. Firstly,

2143
00:02:35,980 --> 00:02:40,060
in order for somebody to actually purchase a ticket to go on the rollercoaster

2144
00:02:40,060 --> 00:02:44,050
ride, they will need to be over 120 centimeters.

2145
00:02:44,650 --> 00:02:49,060
So we have to check what their height is because if they're too short,

2146
00:02:49,120 --> 00:02:53,740
then we won't be able to sell them a ticket anyways. In the course resources,

2147
00:02:53,830 --> 00:02:58,830
I've included a link to this flow chart that I've created on draw.io.

2148
00:02:59,890 --> 00:03:00,700
This is a really,

2149
00:03:00,700 --> 00:03:04,960
really useful tool for creating any sort of flow charts or diagrams and it's

2150
00:03:04,960 --> 00:03:09,550
really easy to use. Now, if we take a look at this flow chart,

2151
00:03:09,820 --> 00:03:14,260
this is basically the logic that we have to program using our,

2152
00:03:14,350 --> 00:03:15,850
if and else statements.

2153
00:03:16,360 --> 00:03:21,360
If the person who's trying to purchase a ticket is not over 120 centimeters,

2154
00:03:23,020 --> 00:03:26,020
then they can't ride on the rollercoaster.

2155
00:03:26,530 --> 00:03:30,670
But if their height is greater than 120 centimeters, then they can ride.

2156
00:03:30,850 --> 00:03:34,870
So let's try it out. If you head over to the starting Repl.it,

2157
00:03:35,560 --> 00:03:39,310
you'll find some starting code in there and you can go ahead and fork this

2158
00:03:39,310 --> 00:03:40,143
Repl.it.

2159
00:03:40,780 --> 00:03:44,470
All that I've got here is a print statement that says "Welcome to the

2160
00:03:44,470 --> 00:03:49,470
rollercoaster" as well as an input asking the user for their height in

2161
00:03:49,930 --> 00:03:54,930
centimeters and then converting the string into a whole number, an integer, and

2162
00:03:56,020 --> 00:03:58,780
then I'm storing it inside this variable called height.

2163
00:03:59,440 --> 00:04:04,330
Now we're going to check whether if the height that the user has typed in is

2164
00:04:04,330 --> 00:04:09,330
greater than 120. So we use the keyword if and then we check if the height is

2165
00:04:10,960 --> 00:04:15,960
greater than 120 and then we add the colon and now when I hit enter,

2166
00:04:17,410 --> 00:04:22,410
you'll notice that the code editor has automatically indented me slightly over.

2167
00:04:23,050 --> 00:04:28,050
I'm not over here because in Python the spacing and indentation is really,

2168
00:04:29,560 --> 00:04:30,400
really important.

2169
00:04:30,790 --> 00:04:35,080
It tells the computer that the code that I'm about to write is what should be

2170
00:04:35,080 --> 00:04:38,620
executed when this condition is met.

2171
00:04:39,340 --> 00:04:44,340
So what should happen? If your height is over 120 then we will just print

2172
00:04:44,980 --> 00:04:46,720
You can ride the rollercoaster!.

2173
00:04:47,470 --> 00:04:52,470
But what should we print if height is not greater than 120? Well,

2174
00:04:52,930 --> 00:04:57,930
in this case, we would use the else statement to catch when that happens.

2175
00:04:58,840 --> 00:05:03,840
And it's really important that you don't write the else here because this is

2176
00:05:04,120 --> 00:05:06,820
indented over. Instead,

2177
00:05:07,030 --> 00:05:11,470
you want it to be at the same indentation level as the if statement.

2178
00:05:11,950 --> 00:05:15,610
These two are essentially a pair, if and else. Now,

2179
00:05:15,700 --> 00:05:16,990
after the else keyword,

2180
00:05:16,990 --> 00:05:21,820
we again add a colon and then we hit enter and we're now indented again.

2181
00:05:22,180 --> 00:05:27,180
And here we can write the code that should happen if this condition is false.

2182
00:05:28,930 --> 00:05:30,910
"Sorry, you have to grow taller before you can ride."

2183
00:05:31,900 --> 00:05:36,900
So the really important things here are the condition which we're testing for, is

2184
00:05:38,290 --> 00:05:43,290
the value of height greater than 120, the syntax of this code

2185
00:05:44,470 --> 00:05:45,520
so the keywords

2186
00:05:45,550 --> 00:05:50,550
if and else as well as the colons that come after each of these lines.

2187
00:05:51,850 --> 00:05:54,310
And finally also the indentation.

2188
00:05:54,880 --> 00:05:57,740
Everything that is indented after the

2189
00:05:57,950 --> 00:06:00,440
if is a block of code.

2190
00:06:01,070 --> 00:06:06,070
So this is indented and it's effectively inside this

2191
00:06:07,640 --> 00:06:08,840
if. So

2192
00:06:08,840 --> 00:06:12,740
this line of code lives inside the else statement.

2193
00:06:13,160 --> 00:06:18,160
This block of code lives inside the if statement. And if you mess up on the

2194
00:06:19,340 --> 00:06:24,140
indentation then you're probably going to get an indentation error telling you

2195
00:06:24,140 --> 00:06:28,250
that this line 5 probably should be indented.

2196
00:06:28,910 --> 00:06:32,180
But when we do actually correct it and we hit run,

2197
00:06:32,780 --> 00:06:36,200
let's say that our height is 130 centimeters,

2198
00:06:36,680 --> 00:06:39,410
then we get back, you can ride the rollercoaster.

2199
00:06:40,010 --> 00:06:43,520
But if our height was say 90 centimeters,

2200
00:06:43,790 --> 00:06:47,180
then we get a different outcome. We get, sorry,

2201
00:06:47,180 --> 00:06:50,510
you have to grow taller before you can ride. So by using,

2202
00:06:50,600 --> 00:06:55,310
if and else statements we're able to get our code to do different things,

2203
00:06:55,580 --> 00:07:00,580
either printing this line or printing this line depending on a condition that

2204
00:07:01,130 --> 00:07:05,660
we're testing for. Now, when we use this greater than sign,

2205
00:07:05,960 --> 00:07:10,960
effectively what we're saying is that is the height greater than 120 which means

2206
00:07:13,160 --> 00:07:17,030
that it does not include 120. In fact,

2207
00:07:17,030 --> 00:07:22,030
if I run this code and if I type in my height as 120 then actually goes into the

2208
00:07:23,420 --> 00:07:25,760
else block and prints this.

2209
00:07:26,480 --> 00:07:31,480
So if we wanted to include 120 centimeters so that all the people who are

2210
00:07:31,730 --> 00:07:35,810
exactly 120 centimeters can ride the rollercoaster,

2211
00:07:36,230 --> 00:07:38,840
then instead of just using a greater than symbol,

2212
00:07:38,960 --> 00:07:41,330
we have to write greater than or equals.

2213
00:07:41,780 --> 00:07:44,570
So these two symbols have to be next to each other.

2214
00:07:45,470 --> 00:07:50,470
And now when I run my code and I write 120, you'll see that it's now falling into

2215
00:07:51,980 --> 00:07:56,630
this block of code and it's telling me that I can ride the roller coaster. Now,

2216
00:07:56,630 --> 00:08:01,630
these are called comparison operators and we've already seen greater than, so

2217
00:08:01,730 --> 00:08:04,160
lesser than is pretty self explanatory.

2218
00:08:04,430 --> 00:08:09,140
But we've also seen greater than or equal to and lesser than or equal to.

2219
00:08:09,470 --> 00:08:13,580
So if you want to include a particular number, a particular value,

2220
00:08:13,910 --> 00:08:17,270
when you do these comparisons, you would be using these instead.

2221
00:08:17,990 --> 00:08:22,580
Now in this table, there's also the equal to and not equal to.

2222
00:08:23,450 --> 00:08:24,050
For example,

2223
00:08:24,050 --> 00:08:29,050
if you wanted to check if somebody's height is equal to precisely 120 then you

2224
00:08:30,860 --> 00:08:35,860
would use two equal signs. And very often it gets a little bit confusing,

2225
00:08:36,350 --> 00:08:40,370
especially if you're new to programming when you're typing equal signs,

2226
00:08:40,429 --> 00:08:44,059
because sometimes we're typing one and other times we're typing two.

2227
00:08:44,630 --> 00:08:47,420
It's important to remember that when you have one equal sign,

2228
00:08:47,510 --> 00:08:52,400
it means that you're assigning this value to this variable.

2229
00:08:53,000 --> 00:08:54,950
But when you have two equal signs,

2230
00:08:55,050 --> 00:08:59,640
you are checking to see if the value on the left is equal to the value on the

2231
00:08:59,640 --> 00:09:02,790
right and they're completely different. Now,

2232
00:09:02,790 --> 00:09:04,650
the good thing is that when you get it wrong,

2233
00:09:04,680 --> 00:09:09,680
usually you'll get enough clues in the error to actually hint to you,

2234
00:09:09,750 --> 00:09:13,380
Hey, maybe there's something that's wrong here, right?

2235
00:09:13,500 --> 00:09:17,220
Cause the syntax doesn't look right. For this to be a condition,

2236
00:09:17,250 --> 00:09:20,760
it has to be something that evaluates to true or to false.

2237
00:09:21,180 --> 00:09:24,600
And height =120 does not evaluate to either.

2238
00:09:24,990 --> 00:09:26,520
So by changing it to this,

2239
00:09:26,580 --> 00:09:31,580
we're saying if height is equal to 120 then we'll execute this line of code

2240
00:09:32,250 --> 00:09:35,100
or any other lines which are in the same block of code.

2241
00:09:35,640 --> 00:09:40,640
But if the height is not equal to 120 then we're going to execute this block of

2242
00:09:41,010 --> 00:09:45,000
code. So if I write 120 then that works.

2243
00:09:45,330 --> 00:09:50,100
But if I write 121 then it does not work.

2244
00:09:51,000 --> 00:09:55,770
Similarly, you can also check for not equals to, which just flips it around.

2245
00:09:56,220 --> 00:10:01,220
But in our case, it makes sense to say if the height is greater than or equals

2246
00:10:01,350 --> 00:10:05,700
120 then you can ride the rollercoaster.

2247
00:10:06,120 --> 00:10:11,120
But otherwise you cannot ride the rollercoaster. By using,

2248
00:10:11,220 --> 00:10:12,570
if and else statements,

2249
00:10:12,780 --> 00:10:17,780
we can get our computer to do different things and respond differently depending

2250
00:10:18,060 --> 00:10:21,330
on different conditions. So in the next lesson,

2251
00:10:21,390 --> 00:10:24,420
I've got a coding exercise for you. I'll see you there.

2252
00:00:00,150 --> 00:00:02,009
All right guys, it's time for yet

2253
00:00:02,009 --> 00:00:05,730
another code challenge to test and see if you've learned what was covered in

2254
00:00:05,730 --> 00:00:08,910
previous lessons. So head over to the assignment

2255
00:00:08,910 --> 00:00:11,490
that is a day 3.1 odd

2256
00:00:11,490 --> 00:00:16,490
or eve. Have a read of the instructions and try to see if you can create a

2257
00:00:17,010 --> 00:00:22,010
program that checks whether if a number that you input in the console is odd

2258
00:00:23,070 --> 00:00:26,040
or even. Now the thing to remember here though

2259
00:00:26,100 --> 00:00:29,640
is that we're introducing something called the modulo

2260
00:00:30,330 --> 00:00:34,650
and you can create the symbol by simply typing the percentage sign. Now,

2261
00:00:34,680 --> 00:00:38,820
what the modulo does is it will divide a number

2262
00:00:39,030 --> 00:00:43,830
say seven by another number

2263
00:00:43,830 --> 00:00:47,700
let's say two, and then it will give you the remainder of that division.

2264
00:00:48,030 --> 00:00:53,030
So seven divided by two, seven split into portions of two is two plus two plus

2265
00:00:57,150 --> 00:00:59,700
two plus one, right?

2266
00:01:00,090 --> 00:01:05,090
So seven divided by two can be divided three times with a remainder of one.

2267
00:01:06,060 --> 00:01:07,830
And that's what the modulo gives you.

2268
00:01:07,950 --> 00:01:12,120
So you can also type code straight into the console like I'm going to do now;

2269
00:01:12,390 --> 00:01:14,850
7 % 2. It gives me 1.

2270
00:01:16,020 --> 00:01:20,130
Now it's the same thing if you try to divide by other numbers,

2271
00:01:20,130 --> 00:01:23,130
let's say 7 % 3. Well,

2272
00:01:23,130 --> 00:01:28,110
that is three plus three plus one, right?

2273
00:01:28,320 --> 00:01:32,790
So seven modular three will also give me one.

2274
00:01:34,170 --> 00:01:38,430
So this is a way for us to divide a number by another number and get the

2275
00:01:38,430 --> 00:01:39,270
remainder.

2276
00:01:40,620 --> 00:01:45,620
And you're going to be using this modular to solve this code challenge.

2277
00:01:46,500 --> 00:01:47,910
Have a read of the instructions,

2278
00:01:47,940 --> 00:01:52,940
have a look at the examples and see what it is that we're expecting to be

2279
00:01:53,310 --> 00:01:55,290
printed in the console here.

2280
00:01:56,070 --> 00:02:01,070
And then go ahead and write your code and see if your output matches what it is

2281
00:02:01,620 --> 00:02:05,040
that we're expecting. So 56 should be even,

2282
00:02:05,370 --> 00:02:09,660
so you should be printing "This is an even number" based on that input.

2283
00:02:10,500 --> 00:02:12,990
Pause the video now and give this code challenge a go.

2284
00:02:17,300 --> 00:02:17,660
All right.

2285
00:02:17,660 --> 00:02:22,340
So I mentioned that the modulo gives us the remainder, right?

2286
00:02:22,820 --> 00:02:27,820
So what do we know about even numbers? Well even numbers they're always divisible by

2287
00:02:29,330 --> 00:02:34,070
two. If we pick any even number, say 54,

2288
00:02:34,430 --> 00:02:38,240
and then we do modulo two, so 54 divided by 2,

2289
00:02:38,570 --> 00:02:40,670
it should always give us zero

2290
00:02:40,850 --> 00:02:45,710
as long as that first number is even so 68 % 2

2291
00:02:45,800 --> 00:02:46,880
again it zero.

2292
00:02:47,150 --> 00:02:51,590
But then when we come across an odd number, say 53 % 2,

2293
00:02:52,010 --> 00:02:53,990
then this is now going to give us 1.

2294
00:02:54,710 --> 00:02:59,710
We can use our code to check for when the result is zero,

2295
00:03:00,250 --> 00:03:04,900
in which case it's a even number. And when the result is one,

2296
00:03:04,960 --> 00:03:09,310
in which case it's an odd number. If you have gotten stuck until this point,

2297
00:03:09,580 --> 00:03:13,750
and this is a really great time to pause the video again and go back and give it

2298
00:03:13,750 --> 00:03:17,020
another go. And then we'll go through the solution together.

2299
00:03:18,910 --> 00:03:23,910
We can simply write an if statement to check if the number that was inputted is

2300
00:03:26,470 --> 00:03:31,120
divisible by two with zero remainder.

2301
00:03:31,930 --> 00:03:36,310
Well, in this case, then we can pretty much be sure that this is an even number,

2302
00:03:36,760 --> 00:03:41,200
because as we've shown, all of the even numbers when they divide by two,

2303
00:03:41,290 --> 00:03:45,820
there's always no remainder. So in this case, let's add a colon.

2304
00:03:46,360 --> 00:03:51,360
We can print pretty confidently that this is a even number.

2305
00:03:53,590 --> 00:03:53,920
Now,

2306
00:03:53,920 --> 00:03:58,920
what about the cases where the number when divided by two is not equal to zero?

2307
00:04:00,010 --> 00:04:03,610
Well, then it's probably going to be an odd number. So in this case

2308
00:04:03,610 --> 00:04:05,950
we can use an else statement to catch that.

2309
00:04:06,580 --> 00:04:10,210
And when we have an odd number, we'll simply print

2310
00:04:10,210 --> 00:04:12,730
this is an odd number.

2311
00:04:13,450 --> 00:04:18,450
So that's it. Just four the lines of code using what we've learned about if, else,

2312
00:04:19,570 --> 00:04:22,780
and also the comparison operator. Now,

2313
00:04:22,810 --> 00:04:25,750
if you got stuck on this and you needed to watch the solution,

2314
00:04:26,110 --> 00:04:30,340
then I recommend really going back to your code and playing around with it so

2315
00:04:30,340 --> 00:04:34,990
that you can get the code to work. And then try and see if you can test if a

2316
00:04:34,990 --> 00:04:39,990
particular number is cleanly divisible by three by four by five,

2317
00:04:40,630 --> 00:04:44,620
and then see if the final program actually works in the way that you expect it

2318
00:04:44,620 --> 00:04:46,690
to. But once you're ready,

2319
00:04:46,840 --> 00:04:50,620
head over to the next lesson where we're going to talk about even more complex

2320
00:04:50,620 --> 00:04:54,820
ways of using if and else statements. So for all of that

2321
00:04:55,030 --> 00:04:56,140
and more, I'll see you there.

2322
00:00:00,310 --> 00:00:01,630
In previous lessons,

2323
00:00:01,720 --> 00:00:06,720
we learned about using the if and else statements to check whether if somebody is

2324
00:00:07,990 --> 00:00:12,990
over 120 centimeters or not and allow them to actually purchase a ticket if they

2325
00:00:14,530 --> 00:00:19,390
are over a certain height. Now in addition to the height,

2326
00:00:19,870 --> 00:00:24,370
there's another condition that we need to check for, namely their age.

2327
00:00:24,850 --> 00:00:29,260
If somebody is over 18 years old and they should be paying the adult price,

2328
00:00:29,290 --> 00:00:33,940
which is let's say $12. But if they are 18 or under,

2329
00:00:34,030 --> 00:00:39,030
then they should only be paying $7. So how can we represent this extra condition

2330
00:00:40,510 --> 00:00:43,810
that we need to check for in our code? Well,

2331
00:00:43,810 --> 00:00:47,830
we could use something called a nested if/else statement.

2332
00:00:48,550 --> 00:00:49,390
We've seen our,

2333
00:00:49,420 --> 00:00:53,650
if/else statements look like this where it's only got two choices.

2334
00:00:54,040 --> 00:00:57,370
If this condition is true, do this, otherwise do that.

2335
00:00:58,060 --> 00:01:02,980
But in a nested if statement, once the first condition has passed,

2336
00:01:03,400 --> 00:01:08,400
we can check for another condition. And then we can have another if/else statement

2337
00:01:10,990 --> 00:01:15,990
inside this if condition. In order for this thing to happen,

2338
00:01:16,750 --> 00:01:21,640
this has to be true and this also has to be true. In order for this to happen,

2339
00:01:21,850 --> 00:01:25,690
this condition has to be true but this condition has to be false.

2340
00:01:26,590 --> 00:01:30,250
So essentially the computer first looks at the larger picture,

2341
00:01:30,760 --> 00:01:35,200
which is this first condition and decides on whether if it should go into the

2342
00:01:35,200 --> 00:01:40,200
else block here or if it should go into the nested block inside the if

2343
00:01:41,650 --> 00:01:42,483
statement.

2344
00:01:43,090 --> 00:01:48,090
So now this is what our flow chart looks like. In the first if statement we check

2345
00:01:48,520 --> 00:01:52,690
whether if their height is over 120 centimeters. If no,

2346
00:01:52,810 --> 00:01:56,590
then the if statements all end. You can't ride, you can't buy a ticket.

2347
00:01:57,100 --> 00:01:58,000
But if yes,

2348
00:01:58,030 --> 00:02:02,920
we actually take them to yet another if statement where we check their age.

2349
00:02:03,430 --> 00:02:08,169
If their age is 18 or under, then we give them a $7 ticket.

2350
00:02:08,770 --> 00:02:13,770
If they're over 18 then they have to pay $12. So the place where we're going to

2351
00:02:14,350 --> 00:02:19,270
nest our if statement is inside here. Notice how it's indented.

2352
00:02:19,330 --> 00:02:22,390
So it's already inside this if block,

2353
00:02:22,780 --> 00:02:24,850
and this already has to be true.

2354
00:02:25,750 --> 00:02:30,750
Now here we're going to create another if and else statement and the condition

2355
00:02:31,690 --> 00:02:35,320
checks for their age. So we better ask them for an age.

2356
00:02:35,740 --> 00:02:40,740
Let's say age equals convert the inputs to an int and "what is your age?"

2357
00:02:43,060 --> 00:02:45,400
So now that we've gotten hold of their age,

2358
00:02:45,460 --> 00:02:50,460
we can see if their age is less than or equal to 18. Well in this case we're

2359
00:02:51,760 --> 00:02:54,460
going to give them the $7 ticket.

2360
00:02:56,800 --> 00:03:00,370
But else namely, if this is not true,

2361
00:03:00,370 --> 00:03:05,370
if their age is over 18, well, in that case, we're going to give them the $12

2362
00:03:06,280 --> 00:03:07,113
ticket.

2363
00:03:08,200 --> 00:03:12,280
So now we have a nested if statement,

2364
00:03:12,400 --> 00:03:17,400
because this if and else statement lives inside this if statement.

2365
00:03:18,370 --> 00:03:23,320
So this condition will only be checked if this is already deemed to be true.

2366
00:03:23,830 --> 00:03:28,600
Now let's say our situation got a little bit more complex. The boss comes over,

2367
00:03:28,660 --> 00:03:31,210
checks our code and says, wait a wait, wait, wait,

2368
00:03:31,540 --> 00:03:35,020
there's actually more price tiers than that. In fact,

2369
00:03:35,410 --> 00:03:38,470
if you're less than 12 years old, you pay $5.

2370
00:03:39,130 --> 00:03:44,130
If you're between 12 and 18 you pay $7 and if you're over 18 then you pay the

2371
00:03:45,310 --> 00:03:46,450
full adult price,

2372
00:03:46,480 --> 00:03:51,130
which is $12. Now there are three possibilities,

2373
00:03:51,430 --> 00:03:55,570
so how do we represent this in our if statement? Well,

2374
00:03:55,600 --> 00:04:00,600
we could use something called the elif. Instead of having a simple if/else statement

2375
00:04:01,600 --> 00:04:05,380
where there's only one condition. If it's true, do this.

2376
00:04:05,650 --> 00:04:06,970
Otherwise do that.

2377
00:04:07,750 --> 00:04:12,750
You can add as many elif conditions as you want. So we can check for condition

2378
00:04:13,660 --> 00:04:18,130
1. If that's true, then do a, but if that's not true,

2379
00:04:18,459 --> 00:04:21,519
then we can continue and check for condition 2.

2380
00:04:22,180 --> 00:04:26,920
If condition 2 is true, well then we can do B. And finally,

2381
00:04:26,980 --> 00:04:30,910
if none of those conditions were true, we can do this final thing.

2382
00:04:31,570 --> 00:04:36,160
Our flow chart now looks something like this and this is the logic that we're

2383
00:04:36,160 --> 00:04:40,690
trying to program. Once we're inside this nested if statement,

2384
00:04:40,990 --> 00:04:45,990
we're going to check if the age is under 12 in which case they should pay $5. If

2385
00:04:47,350 --> 00:04:52,350
they're between 12 and 18 then they should pay $7 and finally if they're over 18

2386
00:04:53,200 --> 00:04:58,200
then they should pay $12. Now the first thing I'm going to check is if the age is

2387
00:05:00,700 --> 00:05:04,450
less than 12. Under this condition,

2388
00:05:04,720 --> 00:05:08,890
they should pay $5. So let's change that to five.

2389
00:05:10,000 --> 00:05:13,870
Now the next condition should be created using an elif,

2390
00:05:14,320 --> 00:05:17,410
which stands for else if. So it means,

2391
00:05:17,530 --> 00:05:21,880
if this is not true else if, can you check if this is true?

2392
00:05:22,090 --> 00:05:25,720
Well in that case then we should do this. For example,

2393
00:05:25,960 --> 00:05:30,960
if the age is not less than 12, so they're over 12, then are they under 18? Well then

2394
00:05:34,240 --> 00:05:39,240
this condition basically catches everybody who's between 12 and 18. And finally,

2395
00:05:41,350 --> 00:05:46,350
if they're not less than or equal to 18 and they're not less than 12 then that's

2396
00:05:47,200 --> 00:05:49,420
everybody else who is over 18.

2397
00:05:51,130 --> 00:05:56,130
Now remember that we can use as many elif conditions between the if and else as we

2398
00:05:56,140 --> 00:05:56,973
like.

2399
00:05:57,050 --> 00:06:02,050
So I could add another elif that checks whether if the age is less than,

2400
00:06:02,720 --> 00:06:06,380
say, 22 well in this case, do something else.

2401
00:06:06,650 --> 00:06:10,610
And then I can keep going with these elifs until I'm done with all my

2402
00:06:10,610 --> 00:06:14,210
conditions. So have a play around with this code,

2403
00:06:14,510 --> 00:06:17,180
write it yourself, see if it makes sense,

2404
00:06:17,570 --> 00:06:22,340
and then mess around with the elifs so that it does what you expect it to do.

2405
00:06:23,000 --> 00:06:24,080
And then once you're ready,

2406
00:06:24,290 --> 00:06:27,680
go ahead and head over to the next lesson where I've got a coding challenge for

2407
00:06:27,680 --> 00:06:27,920
you.

2408
00:00:00,240 --> 00:00:03,870
So now that you've learned all about if, elif and else,

2409
00:00:04,260 --> 00:00:06,150
as well as nested if statements,

2410
00:00:06,330 --> 00:00:11,330
then I've got two code challenges coming up for you. In the first one, in the

2411
00:00:12,000 --> 00:00:16,020
code challenge that's called day 3.2 BMI calculator

2412
00:00:16,230 --> 00:00:17,100
2.0,

2413
00:00:17,730 --> 00:00:22,730
this is going to be an upgraded version of the BMI calculator that you created

2414
00:00:23,190 --> 00:00:24,023
yesterday.

2415
00:00:24,630 --> 00:00:28,260
Instead of just working out the BMI value of somebody,

2416
00:00:28,590 --> 00:00:30,810
we're going to give them an interpretation.

2417
00:00:31,650 --> 00:00:34,680
You might've come across a BMI chart that looks like this,

2418
00:00:35,280 --> 00:00:40,280
where it divides up people's BMI and tells them whether if the underweight,

2419
00:00:41,340 --> 00:00:46,020
normal weight, overweight, et cetera. And this depends on the value of the BMI.

2420
00:00:46,230 --> 00:00:50,100
So if the value of the BMI is less than 18.5,

2421
00:00:50,490 --> 00:00:54,960
then they are underweight. If they're over 18.5,

2422
00:00:54,990 --> 00:00:58,350
but below 25, then they have a normal weight.

2423
00:00:58,920 --> 00:01:03,240
So your job is to not only create a BMI calculator,

2424
00:01:03,840 --> 00:01:08,670
but also to give them the corresponding interpretation message.

2425
00:01:09,330 --> 00:01:10,170
Now it's really,

2426
00:01:10,170 --> 00:01:14,820
really important that you use the words here that are highlighted in bold in your

2427
00:01:14,820 --> 00:01:18,480
interpretation, that based on a particular height and weight,

2428
00:01:18,540 --> 00:01:21,360
you actually give them the correct interpretation.

2429
00:01:22,500 --> 00:01:25,680
Pause the video and try to give this challenge a go.

2430
00:01:29,370 --> 00:01:31,140
All right. So how did you get on?

2431
00:01:31,380 --> 00:01:34,560
There was a little bit of a revision from what you've done previously.

2432
00:01:34,920 --> 00:01:38,970
Hopefully you've been able to calculate the BMI without much trouble and then

2433
00:01:39,000 --> 00:01:43,800
use what you learned about if, elif and else to provide the user with the

2434
00:01:43,800 --> 00:01:47,640
corresponding interpretation for the BMI that they have.

2435
00:01:48,480 --> 00:01:52,620
Let's start out by calculating the BMI. And the BMI,

2436
00:01:52,680 --> 00:01:55,860
according to this equation is equal to the weight in kilograms

2437
00:01:55,860 --> 00:01:59,580
divided by the height squared. So we've got the weight already,

2438
00:01:59,790 --> 00:02:04,050
and then we divided by the height to the power of two.

2439
00:02:04,800 --> 00:02:09,060
Now, notice how I've already converted these inputs to floats.

2440
00:02:09,090 --> 00:02:13,290
So we don't have to do what we did previously when we were calculating the BMI.

2441
00:02:14,940 --> 00:02:17,340
Now what the exercise does mention though

2442
00:02:17,370 --> 00:02:20,610
is that we should round the result of the nearest whole number.

2443
00:02:21,210 --> 00:02:25,590
But you probably remember how to do this right? Using the round function.

2444
00:02:25,830 --> 00:02:29,550
So if we wrap the entire equation inside a round function,

2445
00:02:29,880 --> 00:02:32,130
then it's going to round it to the nearest whole number.

2446
00:02:32,820 --> 00:02:36,600
So if this is what you got stuck on, then head back to your code and just fix it.

2447
00:02:37,260 --> 00:02:40,740
Now, once we've calculated the rounded value of BMI,

2448
00:02:41,100 --> 00:02:46,100
the next step is to give the user an interpretation message based on their BMI.

2449
00:02:47,070 --> 00:02:48,900
So let's start with the first one.

2450
00:02:49,140 --> 00:02:53,100
If the BMI is less than 18.5,

2451
00:02:53,520 --> 00:02:56,520
well then in this case, they're actually underweight, right?

2452
00:02:56,910 --> 00:03:00,880
So it will print something like your BMI is,

2453
00:03:01,480 --> 00:03:04,990
and then inside here we'll insert the value of their BMI.

2454
00:03:05,500 --> 00:03:09,420
And this of course is using f-strings, so let's add an F to the beginning.

2455
00:03:10,030 --> 00:03:15,030
Your BMI is this particular value and you are underweight.

2456
00:03:17,380 --> 00:03:17,860
Now,

2457
00:03:17,860 --> 00:03:22,860
what if their BMI was between 18.5 and 25?

2458
00:03:23,680 --> 00:03:28,000
Well, because we've already checked that their BMI is less than 18.5,

2459
00:03:28,420 --> 00:03:32,950
then if this is false because it's jumped to the next level,

2460
00:03:33,280 --> 00:03:34,990
then we don't actually have to check this.

2461
00:03:35,290 --> 00:03:39,940
All we have to do is check that it's still below 25. And to do that,

2462
00:03:39,940 --> 00:03:41,170
we're going to use an Elif.

2463
00:03:41,710 --> 00:03:46,710
So elif BMI is less than 25, well then in this case,

2464
00:03:47,260 --> 00:03:51,130
we're going to print you bmi

2465
00:03:51,160 --> 00:03:55,810
is this particular value, and you have a normal

2466
00:03:55,810 --> 00:04:00,580
weight. If this is a little bit mysterious to you,

2467
00:04:00,760 --> 00:04:05,200
why it is that I'm not checking that their BMI is over 18.5,

2468
00:04:05,230 --> 00:04:10,120
but below 25 and I'm simply just checking that it's less than 25,

2469
00:04:10,390 --> 00:04:13,930
then I recommend having a play around with the code as it is right now,

2470
00:04:14,350 --> 00:04:17,350
and trying out some different values for BMI.

2471
00:04:17,560 --> 00:04:21,190
Just change this to say 18,

2472
00:04:21,190 --> 00:04:26,050
and then try maybe something like 22 so that it's caught by each of these

2473
00:04:26,050 --> 00:04:29,950
conditions. And then you'll soon realize that this

2474
00:04:30,130 --> 00:04:34,930
if, elif, else is an entire group of statements,

2475
00:04:35,320 --> 00:04:39,940
and it's going to check this one first and only if this fails,

2476
00:04:39,970 --> 00:04:43,090
when it's false, does it go and check the next one.

2477
00:04:43,570 --> 00:04:48,570
So then this is only going to be printed when their BMI is over 18.5,

2478
00:04:49,450 --> 00:04:53,170
but below 25. And once you're comfortable with this,

2479
00:04:53,230 --> 00:04:55,810
then the rest of the statements should be pretty easy.

2480
00:04:58,920 --> 00:04:59,753
All right,

2481
00:05:00,030 --> 00:05:00,240
Now,

2482
00:05:00,240 --> 00:05:05,240
once we've reached here and their BMI is not less than 35 and we want to catch the

2483
00:05:07,650 --> 00:05:10,770
remaining cases where the BMI is over 35,

2484
00:05:11,220 --> 00:05:14,160
then all we have to do is add an else statement.

2485
00:05:17,520 --> 00:05:18,960
That's all we have to do.

2486
00:05:19,380 --> 00:05:23,730
We've managed to check for those people that have BMI less than 18.5.

2487
00:05:24,120 --> 00:05:28,230
If it's not less 18.5, well, is it less than 25?

2488
00:05:28,650 --> 00:05:33,450
So this will print when the BMI is greater than 18.5,

2489
00:05:33,480 --> 00:05:37,920
but less than 25. And we've done that for all of these separate statements.

2490
00:05:40,200 --> 00:05:42,150
If you struggled with this code,

2491
00:05:42,210 --> 00:05:46,590
then I recommend having a look back at the previous lesson where we talked more

2492
00:05:46,590 --> 00:05:50,760
in detail in terms of if, elif and else.

2493
00:05:51,810 --> 00:05:53,670
If you struggled with this challenge,

2494
00:05:53,730 --> 00:05:58,730
then have a go at pasting the code that's in the solution into the Thonny code

2495
00:05:58,760 --> 00:06:03,140
editor. And instead of having the BMI being a workout value,

2496
00:06:03,470 --> 00:06:07,640
just set it to some different numbers. So for example, if we start out testing,

2497
00:06:07,910 --> 00:06:10,220
if the BMI is equal to 18,

2498
00:06:10,550 --> 00:06:15,470
which of these will it fall into, then we can click on the debug step into each

2499
00:06:15,470 --> 00:06:18,980
of these. And you can see that when it evaluates this condition,

2500
00:06:19,010 --> 00:06:22,100
is the BMI less than 18.5, well,

2501
00:06:22,130 --> 00:06:26,300
18 is less than 18.5. So this is true.

2502
00:06:26,720 --> 00:06:30,260
And in that case, it's going to execute this line of code.

2503
00:06:30,680 --> 00:06:34,220
So it is going to print out your BMI is 18, you are underweight.

2504
00:06:34,760 --> 00:06:38,330
And then it's done. That's the end of the code. Now,

2505
00:06:38,360 --> 00:06:43,280
if we change this to say 22 however, and we click on debug,

2506
00:06:43,940 --> 00:06:48,830
then it's going to evaluate the first condition, is 22 less than 18.5 and

2507
00:06:49,070 --> 00:06:50,540
that's going to be false.

2508
00:06:50,780 --> 00:06:54,230
So then it skips to the next elif that it can find

2509
00:06:54,740 --> 00:06:59,300
and it checks whether if the BMI 22 is less than 25.

2510
00:06:59,660 --> 00:07:02,750
So now it's going to execute this print statements.

2511
00:07:03,710 --> 00:07:04,970
Have a play around with that

2512
00:07:05,150 --> 00:07:08,690
if it's still a little bit mysterious to you and hopefully,

2513
00:07:08,690 --> 00:07:09,680
once you're done there,

2514
00:07:09,890 --> 00:07:12,800
then you'll be ready to move on to the next code challenge

2515
00:07:12,860 --> 00:07:17,150
which is a little bit more challenging. For all of that and more,

2516
00:07:17,330 --> 00:07:17,900
I'll see you there.

2517
00:00:00,390 --> 00:00:05,340
Hey guys. So I've got another code challenge for you. And this one,

2518
00:00:05,790 --> 00:00:08,970
as the title suggests, this is a difficult challenge,

2519
00:00:09,120 --> 00:00:13,380
and this is something that I expect some of you might need to spend 15,

2520
00:00:13,380 --> 00:00:17,460
20 minutes on. Others might need to spend 30, 40 minutes on,

2521
00:00:17,820 --> 00:00:22,290
and it might just be something that you need to have a think about, get stuck,

2522
00:00:22,620 --> 00:00:25,920
come back to it after a bit of a break or sleep on it,

2523
00:00:25,980 --> 00:00:28,650
come back to it the next day. It's not easy,

2524
00:00:28,890 --> 00:00:31,530
but what I'm trying to say is really,

2525
00:00:31,530 --> 00:00:35,310
really give it all you have before you check the solution video,

2526
00:00:35,790 --> 00:00:38,940
because it's a really, really interesting challenge.

2527
00:00:40,020 --> 00:00:43,710
So the idea is that we want you to write a program that works out

2528
00:00:44,070 --> 00:00:46,980
whether if any given year is a leap year.

2529
00:00:47,670 --> 00:00:50,400
We know that a normal year has 365 days,

2530
00:00:50,490 --> 00:00:53,340
but leap years have an extra day in February.

2531
00:00:54,060 --> 00:00:57,750
And the reason is actually really, really interesting. If you're interested,

2532
00:00:58,110 --> 00:01:02,550
there's a really good explanation of how leap years work and why we have them at

2533
00:01:02,550 --> 00:01:06,780
this YouTube link. So just go ahead and copy this URL and check it out.

2534
00:01:07,530 --> 00:01:11,160
Now, the way that you work out if a given year is a leap year,

2535
00:01:11,250 --> 00:01:15,030
so let's say we pick one out of thin air, 2020,

2536
00:01:15,570 --> 00:01:19,980
is that on every year that is evenly divisible by four,

2537
00:01:20,130 --> 00:01:23,760
so that means divisible by four with no remainder.

2538
00:01:24,480 --> 00:01:28,170
Then that is a leap year, but except the years

2539
00:01:28,230 --> 00:01:31,710
that is also evenly divisible by a hundred,

2540
00:01:32,640 --> 00:01:37,560
unless the year is also evenly divisible by 400.

2541
00:01:38,100 --> 00:01:43,050
Now 2020 divided by four is equal to 505.

2542
00:01:43,380 --> 00:01:47,520
So it's evenly divisible by four. There's no remainder.

2543
00:01:48,480 --> 00:01:52,560
But the rule says that even if it's divisible by four,

2544
00:01:53,130 --> 00:01:55,920
if it's evenly divisible by a hundred,

2545
00:01:56,250 --> 00:01:59,040
then that is still not going to be a leap year.

2546
00:01:59,340 --> 00:02:04,340
So let's try that 2020 divided by a hundred equals 20.2.

2547
00:02:05,550 --> 00:02:09,539
So this is in fact not evenly divisible by a hundred.

2548
00:02:09,990 --> 00:02:14,970
So that means it is still a leap year. But then it says

2549
00:02:15,180 --> 00:02:19,560
unless the years also evenly divisible by 400.

2550
00:02:20,310 --> 00:02:21,210
So 2020

2551
00:02:21,210 --> 00:02:26,210
divided by 400 is not evenly divisible.

2552
00:02:26,790 --> 00:02:29,970
So it is in fact, still a leap year.

2553
00:02:30,870 --> 00:02:33,990
The trickiest part of this entire challenge

2554
00:02:34,020 --> 00:02:39,020
I would say is getting your head around these three sentences: a year that is

2555
00:02:41,310 --> 00:02:45,570
divisible by four with no remainder is a leap year,

2556
00:02:46,080 --> 00:02:50,160
except if it's also divisible by a hundred. In that case,

2557
00:02:50,160 --> 00:02:51,360
it's no longer a leap year,

2558
00:02:51,960 --> 00:02:56,960
unless that year also happens to be evenly divisible by 400 then it is still a

2559
00:02:59,440 --> 00:03:03,220
leap year. What I recommend doing is a)

2560
00:03:03,610 --> 00:03:05,860
if English is not your native language

2561
00:03:06,220 --> 00:03:10,060
then have a look online for the rules for determining a leap

2562
00:03:10,060 --> 00:03:13,990
year in your own language, because these words, except

2563
00:03:14,020 --> 00:03:16,660
and unless, are so,

2564
00:03:16,720 --> 00:03:20,950
so integral to how this algorithm works. And you really,

2565
00:03:20,950 --> 00:03:23,530
really need to understand exactly what it means.

2566
00:03:24,970 --> 00:03:29,970
Then what I recommend you doing is to go ahead and create a flow chart,

2567
00:03:31,150 --> 00:03:33,820
just like what I've done in previous examples.

2568
00:03:34,210 --> 00:03:36,730
Head over to a website like draw.io,

2569
00:03:37,000 --> 00:03:39,580
or simply just write it on a piece of paper.

2570
00:03:39,610 --> 00:03:44,610
Draw it out and visualize what this actually means in terms of your code.

2571
00:03:45,820 --> 00:03:48,010
Now, if you really get stuck on that,

2572
00:03:48,430 --> 00:03:51,640
I've also created a flowchart for you.

2573
00:03:52,090 --> 00:03:55,660
So if you actually get stuck creating the flowchart,

2574
00:03:55,840 --> 00:03:58,720
there is one there that you can refer to as well.

2575
00:03:59,020 --> 00:04:00,370
But it's a really good exercise

2576
00:04:00,370 --> 00:04:04,720
creating your own flowchart based on what it is that you want your program to

2577
00:04:04,720 --> 00:04:09,720
do, and your algorithm or your code should correctly tell us whether

2578
00:04:10,750 --> 00:04:15,730
if it's a leap year or not a leap year. So it just has to print out leap year

2579
00:04:15,760 --> 00:04:20,290
if it is like 2400, and if it's not a leap year,

2580
00:04:20,290 --> 00:04:23,230
like 1989, then just print, not leap year.

2581
00:04:24,580 --> 00:04:28,510
This is the time to pause the video and really give this challenge

2582
00:04:28,570 --> 00:04:32,380
everything you've got. I'll see you back here once you're done.

2583
00:04:32,910 --> 00:04:37,910
[inaudible]

2584
00:04:40,200 --> 00:04:43,290
All right. So how did you get on? As I mentioned,

2585
00:04:43,350 --> 00:04:46,950
this is a really difficult challenge. If you haven't managed to solve it,

2586
00:04:47,250 --> 00:04:51,120
then try to come back to it a little bit later on and spend more time on it.

2587
00:04:51,750 --> 00:04:56,430
This is a decisive moment. Don't give up on yourself. Keep going.

2588
00:04:56,880 --> 00:04:59,760
I'm always going to be here for you with the solution.

2589
00:05:00,180 --> 00:05:02,340
You're not going to get stuck. It's really,

2590
00:05:02,340 --> 00:05:06,510
really important to try and solve it yourself. Now,

2591
00:05:06,540 --> 00:05:11,190
the first thing I mentioned is turning this rule for determining whether if a

2592
00:05:11,190 --> 00:05:14,550
year is a leap year or not into a flow chart.

2593
00:05:15,120 --> 00:05:19,410
So I've created one which I linked to in the challenge

2594
00:05:19,950 --> 00:05:21,270
and it's very simple.

2595
00:05:21,540 --> 00:05:26,160
We start off by asking ourself is a particular year that we have in mind,

2596
00:05:26,610 --> 00:05:30,870
um, let's say the year 2000, is it cleanly divisible by four?

2597
00:05:31,080 --> 00:05:36,080
Which means can you divide it by four with zero remainder?

2598
00:05:37,410 --> 00:05:41,940
Well, if the case is no, then it already is definitely not a leap year.

2599
00:05:42,690 --> 00:05:46,650
But if the case is yes, then we have to ask ourselves some more questions.

2600
00:05:47,250 --> 00:05:51,420
Namely, can we divide it by a hundred with no remainder?

2601
00:05:52,170 --> 00:05:56,910
Well, if we can't, then it's definitely a leap year, but if we can,

2602
00:05:57,290 --> 00:06:01,730
then we have to check yet again. Can we divide it by 400 with no remainder?

2603
00:06:02,240 --> 00:06:05,750
If the answer is yes, then it's a leap year. If the answer is no,

2604
00:06:05,870 --> 00:06:10,130
then it's not a leap year. Let's try and code that logic out,

2605
00:06:10,280 --> 00:06:14,270
keep your flow chart up somewhere so that you can write your code while

2606
00:06:14,270 --> 00:06:15,560
referring to the diagram.

2607
00:06:16,430 --> 00:06:21,430
We start off by checking whether if the year that came in through the input is

2608
00:06:22,250 --> 00:06:25,280
divisible by four with no remainder.

2609
00:06:25,910 --> 00:06:28,790
And you might remember from our previous code exercise

2610
00:06:29,060 --> 00:06:33,310
that the way we do this is using the modulo. So year

2611
00:06:33,350 --> 00:06:36,500
modulo four will give us the remainder.

2612
00:06:37,760 --> 00:06:42,650
So if the remainder is equal to zero, well in that case it's cleanly

2613
00:06:42,650 --> 00:06:46,640
divisible by four. And you can check this out yourself in the console.

2614
00:06:46,700 --> 00:06:47,300
Let's say,

2615
00:06:47,300 --> 00:06:52,300
if you have 8 % 4, 4 goes into 8 cleanly,

2616
00:06:52,730 --> 00:06:56,360
there's two four's in an eight. The remainder is zero.

2617
00:06:57,050 --> 00:07:02,050
Whereas 9 % 4, 4 + 4 is 8 remainder 1.

2618
00:07:04,820 --> 00:07:09,140
So if the remainder from the year divided by four is equal to zero,

2619
00:07:09,560 --> 00:07:14,510
then it is cleanly divisible by four. So in this case,

2620
00:07:14,630 --> 00:07:17,630
we'll have to go into yet another if statement.

2621
00:07:18,230 --> 00:07:21,740
But if it's actually false, then it's definitely not a leap year.

2622
00:07:22,370 --> 00:07:25,730
So the else statement that matches this

2623
00:07:25,760 --> 00:07:30,760
if statement is going to tell us for sure that this is not a leap year.

2624
00:07:34,990 --> 00:07:39,700
But if it is true, then we have to check the next thing. Is it cleanly

2625
00:07:39,700 --> 00:07:41,350
divisible by a hundred?

2626
00:07:42,100 --> 00:07:47,100
So we check if the year % 100 is equal to zero.

2627
00:07:48,490 --> 00:07:51,130
And if the answer is yes,

2628
00:07:51,250 --> 00:07:56,230
then we have to check that year against another question. But if it's no,

2629
00:07:56,380 --> 00:08:01,380
then it's definitely a leap year. In this case that will lead to an if statement

2630
00:08:02,050 --> 00:08:04,660
if it's true, but if it's false,

2631
00:08:04,810 --> 00:08:09,810
then we can simply print leap year because that's what it's going to be.

2632
00:08:11,170 --> 00:08:16,060
The final question that we have to ask ourselves about the year is,

2633
00:08:16,320 --> 00:08:18,970
is it cleanly divisible by 400?

2634
00:08:19,690 --> 00:08:24,340
So now if year % 400 is equal to zero,

2635
00:08:24,970 --> 00:08:28,810
well, in this case, if it is true,

2636
00:08:29,050 --> 00:08:30,520
then it's definitely a leap year.

2637
00:08:30,730 --> 00:08:34,630
If it's false, then it's definitely not a leap year. So, you can print

2638
00:08:36,340 --> 00:08:40,840
lear year if it's true, otherwise or if it's false,

2639
00:08:40,870 --> 00:08:43,120
then we can print not leap year.

2640
00:08:45,880 --> 00:08:46,840
And that's it.

2641
00:08:46,900 --> 00:08:51,900
That's all the code that you would need in order to represent this logic.

2642
00:08:53,230 --> 00:08:56,610
Now there's plenty of other ways you could have written your code,

2643
00:08:57,060 --> 00:09:00,390
but this is probably the most readable. Now,

2644
00:09:00,420 --> 00:09:02,250
if you've written some different code

2645
00:09:02,730 --> 00:09:05,520
but it still uses these rules to work out

2646
00:09:05,820 --> 00:09:08,760
whether if a given year is a leap year and it's correct,

2647
00:09:09,060 --> 00:09:10,620
then that's fine as well.

2648
00:09:10,650 --> 00:09:13,620
There's plenty of ways that you can solve this challenge.

2649
00:09:15,060 --> 00:09:20,060
The most important thing I want you to take away from this code exercise is that

2650
00:09:20,700 --> 00:09:25,700
you can turn any sort of logic into a flowchart to be able to visualize it.

2651
00:09:27,480 --> 00:09:30,030
And once you've got your logic straight,

2652
00:09:30,330 --> 00:09:34,050
then converting it into code is much, much simpler.

2653
00:09:34,770 --> 00:09:39,000
If you haven't figured out the logic and then you try to start writing code,

2654
00:09:39,360 --> 00:09:40,530
then it's going to be a mess.

2655
00:09:40,860 --> 00:09:45,860
So first, get to the stage of being able to create your own flowcharts and then

2656
00:09:46,950 --> 00:09:49,260
take those flow charts and turn them into code.

2657
00:09:50,520 --> 00:09:52,170
If you got stuck on this challenge

2658
00:09:52,200 --> 00:09:54,630
or if you didn't manage to complete it for some reason,

2659
00:09:54,870 --> 00:09:59,220
head back to it now and give it some extra attention, because this is really,

2660
00:09:59,220 --> 00:10:03,270
really important. It's in these moments, these code challenges,

2661
00:10:03,330 --> 00:10:05,580
where you are actually going to a level up as a programmer.

2662
00:10:05,880 --> 00:10:07,380
It's not during the tutorials,

2663
00:10:07,410 --> 00:10:10,260
it's not during the videos where I explain things to you.

2664
00:10:10,770 --> 00:10:13,290
It's where you actually write the code yourself.

2665
00:10:13,950 --> 00:10:17,700
I hope you had fun on this code challenge and you managed to complete it,

2666
00:10:18,060 --> 00:10:22,050
be it with hints or without hints. On the next lesson, we're going to take the

2667
00:10:22,050 --> 00:10:27,050
if statement one step further and I want to show you how you can have multiple

2668
00:10:27,480 --> 00:10:30,390
if statements and tests for multiple conditions.

2669
00:10:31,110 --> 00:10:34,500
So for all of that and more, I'll see you on the next lesson.

2670
00:00:00,100 --> 00:00:01,420
Now in the last lesson,

2671
00:00:01,450 --> 00:00:06,450
we saw how we could use if, elif, else to check for multiple conditions.

2672
00:00:06,970 --> 00:00:11,970
But in this case we're only checking one condition even though we have multiple,

2673
00:00:12,460 --> 00:00:15,610
because if this first condition is true,

2674
00:00:15,910 --> 00:00:20,350
then we would do whatever it is we need to do and then we would bypass

2675
00:00:20,440 --> 00:00:21,460
everything else.

2676
00:00:22,030 --> 00:00:25,810
Now what if you were in a situation where you need to check for multiple

2677
00:00:25,810 --> 00:00:30,010
conditions even if the previous one was already true?

2678
00:00:31,180 --> 00:00:33,910
Coming back to our rollercoaster ticketing problem,

2679
00:00:34,420 --> 00:00:36,400
if you're going on a good rollercoaster ride,

2680
00:00:36,550 --> 00:00:41,020
you'd probably want to keep a picture for the memories, right?

2681
00:00:41,800 --> 00:00:44,020
And our rollercoaster is no exception.

2682
00:00:44,470 --> 00:00:49,470
We want to be able to charge users an extra $3 if they want to purchase a ticket

2683
00:00:49,690 --> 00:00:52,120
that includes a photo. Now,

2684
00:00:52,150 --> 00:00:57,150
this is quite interesting because this is completely independent of their age or

2685
00:00:57,910 --> 00:00:58,743
their height.

2686
00:00:58,960 --> 00:01:02,500
Even if we've already gotten their age and height and determined their ticket

2687
00:01:02,500 --> 00:01:07,450
price, this is an extra question. Do you want a photo or not?

2688
00:01:07,480 --> 00:01:09,670
Yes or no. If you do,

2689
00:01:09,700 --> 00:01:13,750
then we're going to add $3 to your existing ticket price.

2690
00:01:14,650 --> 00:01:18,460
To do this, we would write multiple if conditions.

2691
00:01:19,030 --> 00:01:21,940
If condition 1 is true, then do a,

2692
00:01:22,360 --> 00:01:27,070
but then the code is going to go to the next case and check if condition 2 is

2693
00:01:27,070 --> 00:01:27,903
also true,

2694
00:01:28,180 --> 00:01:32,320
in which case it will do B and if the final condition is also true,

2695
00:01:32,440 --> 00:01:35,680
it's going to do C. Whereas on the example on the left

2696
00:01:35,680 --> 00:01:40,270
here, only one of these things, A, B, or C will be carried out.

2697
00:01:40,690 --> 00:01:44,230
Comparing the example on the left where we're using

2698
00:01:44,260 --> 00:01:48,370
if, elif, else, only one of these things A,

2699
00:01:48,370 --> 00:01:52,480
B or C will be carried out. But on the right hand side,

2700
00:01:52,900 --> 00:01:57,070
all three conditions are checked and if it's so happens that all three

2701
00:01:57,070 --> 00:01:59,470
conditions are true, then A,

2702
00:01:59,590 --> 00:02:02,860
B and C will all be executed.

2703
00:02:03,520 --> 00:02:08,320
Currently, our code operates like this. We check for their height.

2704
00:02:08,949 --> 00:02:11,020
If they're over 120 centimeters,

2705
00:02:11,350 --> 00:02:13,990
we check their age and depending on their age,

2706
00:02:14,380 --> 00:02:16,990
we give them a different price ticket.

2707
00:02:18,130 --> 00:02:23,130
What we now want is even after we've checked for their ticket price,

2708
00:02:24,040 --> 00:02:28,510
we want to ask them a question, do you want photos with your ticket?

2709
00:02:29,200 --> 00:02:32,800
And if the answer is yes, then we're going to add $3 to that bill,

2710
00:02:33,340 --> 00:02:35,500
no matter which type of ticket they've got.

2711
00:02:36,220 --> 00:02:39,490
And finally we give them the total bill. If they say no,

2712
00:02:39,550 --> 00:02:43,090
then we jump straight to the total bill and just tell them the price of their 

2713
00:02:43,090 --> 00:02:47,230
ticket. So how do we implement this in our code?

2714
00:02:48,970 --> 00:02:52,240
Well, first let's change these print statements.

2715
00:02:52,270 --> 00:02:55,420
Instead of giving them the bill at each of these steps,

2716
00:02:55,750 --> 00:02:58,930
I'm going to tell them which type of ticket they're eligible for.

2717
00:03:02,560 --> 00:03:07,450
So the next thing to do is to ask them whether if they want a photo or not.

2718
00:03:07,870 --> 00:03:12,730
So I'm going to need to use an input, but the question is where do I put that?

2719
00:03:13,450 --> 00:03:18,450
Now the correct answer is that it has to be at the same indentation level as

2720
00:03:20,080 --> 00:03:23,860
this if block. So you can imagine this whole thing with the,

2721
00:03:23,860 --> 00:03:27,640
if elif and else as sort of belonging together.

2722
00:03:28,420 --> 00:03:30,400
Because they all relate to one thing:

2723
00:03:30,760 --> 00:03:35,590
what is their age and which type of ticket are they eligible for. Now,

2724
00:03:35,620 --> 00:03:37,540
outside of that if statement,

2725
00:03:37,780 --> 00:03:41,650
I'm going to create an input and ask the user,

2726
00:03:42,370 --> 00:03:46,360
do you want a photo taken? Type Y for yes or N for no.

2727
00:03:47,110 --> 00:03:52,110
And then I'm going to save their input inside a variable called wants_photo.

2728
00:03:55,120 --> 00:04:00,120
So now I'm going to use an if statement to check what their answer was.

2729
00:04:00,700 --> 00:04:04,240
If it was true, then I'm going to add $3 and if it was false,

2730
00:04:04,300 --> 00:04:07,120
I'm just going to skip to giving them their ticket price.

2731
00:04:07,840 --> 00:04:10,810
So here is where I write my if statement.

2732
00:04:11,440 --> 00:04:16,440
Notice how it's at the same indentation level as this previous set of if

2733
00:04:16,630 --> 00:04:17,463
statements.

2734
00:04:17,920 --> 00:04:22,920
But it's not at the same indentation level as this set of if statement.

2735
00:04:24,220 --> 00:04:27,760
So essentially what's happening is once I've checked their age,

2736
00:04:28,270 --> 00:04:31,720
then I'm going to check whether if they want a photo or not.

2737
00:04:32,050 --> 00:04:35,710
And this is going to apply to everybody no matter their age.

2738
00:04:36,490 --> 00:04:40,930
So if wants_photo is equal to Y,

2739
00:04:41,680 --> 00:04:46,680
well in this case I'm going to go and add $3 to their bill.

2740
00:04:48,970 --> 00:04:53,970
But how can I add $3 the bill when I don't have a variable to vary?

2741
00:04:55,480 --> 00:04:57,730
So instead of using these print statements,

2742
00:04:58,450 --> 00:05:01,120
I'm going to create a variable up here called bill and

2743
00:05:01,460 --> 00:05:03,400
I'm going to set it to equal zero.

2744
00:05:04,600 --> 00:05:09,010
Now in addition to printing to the user how much their ticket is,

2745
00:05:09,340 --> 00:05:13,450
I'm going to set the bill to the price that they're supposed to pay.

2746
00:05:13,930 --> 00:05:18,930
So if age is less than 12 bill is equal to $5, if age is less than 18 then bill

2747
00:05:19,750 --> 00:05:23,170
is equal to $7, and finally for everybody else,

2748
00:05:23,200 --> 00:05:28,200
the bill is equal to $12. So now depending on these conditions,

2749
00:05:30,460 --> 00:05:34,780
the variable bill is going to be changed to a different number.

2750
00:05:35,470 --> 00:05:38,260
But once we land in this if statement,

2751
00:05:38,560 --> 00:05:42,400
I'm going to have to add $3 to their bill

2752
00:05:42,700 --> 00:05:45,340
no matter which value it is at the moment.

2753
00:05:45,880 --> 00:05:50,880
So effectively, what I want to do is bill equals the current value of bill plus

2754
00:05:51,700 --> 00:05:54,130
$3. So if bill was $7,

2755
00:05:54,160 --> 00:05:59,160
then this new value bill should be $10. If bill was $12 then it should now be $15.

2756
00:06:00,530 --> 00:06:05,240
Now in Python as well as many other languages, there's actually a slightly shorter way

2757
00:06:05,240 --> 00:06:06,260
of writing this.

2758
00:06:06,740 --> 00:06:11,690
When you want to increase the current value that's held in a variable and you

2759
00:06:11,690 --> 00:06:13,610
wanna save it back into the variable,

2760
00:06:13,970 --> 00:06:17,240
you can simply write plus equals.

2761
00:06:17,810 --> 00:06:22,040
So bill += 3 is the same as bill = bill + 3.

2762
00:06:22,790 --> 00:06:27,680
Now, no matter what the value of bill is before it reached this if statement,

2763
00:06:28,040 --> 00:06:32,930
I'm still going to add $3 to it. Now after this

2764
00:06:32,930 --> 00:06:34,580
if statement is completed,

2765
00:06:34,880 --> 00:06:39,880
I don't actually have to write a companion else statement because in this case,

2766
00:06:40,940 --> 00:06:45,080
if the answer is no, then we're simply going to do nothing.

2767
00:06:45,080 --> 00:06:48,380
We're not going to do anything to the bill. Instead,

2768
00:06:48,410 --> 00:06:52,610
I'm just going to skip ahead and print to the user their final bill.

2769
00:06:55,370 --> 00:07:00,370
And I'm going to use fstrings to insert the value that the bill variable has

2770
00:07:02,990 --> 00:07:07,820
into this print statement. Now for your code to work,

2771
00:07:08,000 --> 00:07:13,000
the indentation matters a huge deal because the computer will think you want

2772
00:07:14,750 --> 00:07:18,320
it to do different things depending on the indentation.

2773
00:07:19,040 --> 00:07:24,040
So notice how this indentation shows that this bill plus three is to be executed

2774
00:07:26,510 --> 00:07:27,890
when this condition is true,

2775
00:07:28,580 --> 00:07:33,580
but this print statement is not indented to the same level and effectively it's

2776
00:07:34,220 --> 00:07:38,300
going to happen after this if statement has been executed.

2777
00:07:39,320 --> 00:07:44,320
So you can play around with indenting this print statements, un-indenting it

2778
00:07:45,230 --> 00:07:46,730
and see what the difference is.

2779
00:07:47,810 --> 00:07:51,770
But now I'm going to go ahead and hit command

2780
00:07:51,800 --> 00:07:56,800
+ enter or control + enter on Windows to run my code and I'm going to go ahead and

2781
00:07:58,070 --> 00:07:59,330
try and get a ticket.

2782
00:08:00,050 --> 00:08:03,530
So let's say that I am 21 years old,

2783
00:08:04,730 --> 00:08:08,150
tells me the adult tickets at $12 and then it asked me,

2784
00:08:08,150 --> 00:08:11,810
do you want a photo taken? So yeah, I would love to have a photo taken.

2785
00:08:12,560 --> 00:08:15,530
And it tells me that my final bill is 15,

2786
00:08:16,010 --> 00:08:18,170
so I forgot a dollar sign here.

2787
00:08:18,710 --> 00:08:23,710
But effectively it's now added the $3 to the $12 because of this additional if

2788
00:08:26,510 --> 00:08:31,460
statement. So if this concept is still a little bit confusing to you,

2789
00:08:31,880 --> 00:08:36,880
then I want you to really study this flow chart and just look at the difference,

2790
00:08:37,460 --> 00:08:40,549
um, and visualize it because the,

2791
00:08:40,669 --> 00:08:45,670
if elif else statement is only ever going to be true in one of these arrows,

2792
00:08:47,450 --> 00:08:51,410
right? You can't be less than 12 and 18 and over.

2793
00:08:52,280 --> 00:08:53,030
And similarly,

2794
00:08:53,030 --> 00:08:56,460
it doesn't make sense for you to have two different ticket prices.

2795
00:08:57,270 --> 00:08:59,250
But with the want photos,

2796
00:08:59,550 --> 00:09:04,550
this condition has to be asked no matter whichever branch they landed on.

2797
00:09:05,160 --> 00:09:08,130
So it's a completely separate from this if statement.

2798
00:09:09,030 --> 00:09:11,910
And once you've had a look at this flow chart,

2799
00:09:12,120 --> 00:09:16,980
then compare it against the code and the way that the code works should be a lot

2800
00:09:16,980 --> 00:09:21,360
more obvious. And once you're happy with the code and this concept,

2801
00:09:21,690 --> 00:09:25,440
then I want you to head over to the next lesson where I've got a code challenge

2802
00:09:25,440 --> 00:09:29,340
for you. So for all of that, and more, I'll see you there.

2803
00:00:00,180 --> 00:00:04,740
All right, guys, are you ready for another challenge? In this challenge,

2804
00:00:04,770 --> 00:00:07,980
you are going to be building a Pizza Order program.

2805
00:00:08,430 --> 00:00:12,690
So we're going to ask the user what size pizza they want, small, medium,

2806
00:00:12,690 --> 00:00:16,770
or large, whether if they want to add pepperoni to it and whether

2807
00:00:16,770 --> 00:00:18,120
if they want extra cheese.

2808
00:00:18,660 --> 00:00:23,660
So based on the user's input for each of these variables, and the inputs going to

2809
00:00:24,990 --> 00:00:29,400
come in the form of a single capital letter, S, M, or L, Y or N.

2810
00:00:30,240 --> 00:00:31,350
Based on their input,

2811
00:00:31,380 --> 00:00:34,710
we're going to try and figure out what the final bill is going to come to.

2812
00:00:35,400 --> 00:00:37,920
And you can take a look at the prices over here.

2813
00:00:38,430 --> 00:00:42,600
So, if you want to add pepperoni for a small pizza, it's a $2, medium,

2814
00:00:42,600 --> 00:00:47,340
or large pizza is $3, and an extra cheese is $1 for any size.

2815
00:00:47,820 --> 00:00:51,690
So you're going to use what you've learned about multiple if statements,

2816
00:00:51,780 --> 00:00:56,250
as well as everything from previously in order to be able to create this so that

2817
00:00:56,280 --> 00:00:59,490
if the user types in, for example, this input,

2818
00:00:59,880 --> 00:01:04,879
large, pepperoni with no extra cheese, then it should print out

2819
00:01:05,069 --> 00:01:10,020
Your final bill is $28. Have a look at the examples and the hints

2820
00:01:10,350 --> 00:01:13,530
and go ahead and solve this coding challenge.

2821
00:01:16,650 --> 00:01:16,950
All right,

2822
00:01:16,950 --> 00:01:21,390
so this one shouldn't be too hard and we're going to start off by creating our

2823
00:01:21,390 --> 00:01:25,560
first if statement where we're going to check out what is the size of the pizza

2824
00:01:25,560 --> 00:01:29,190
that they chose so we can assign the price to that pizza.

2825
00:01:29,940 --> 00:01:34,940
If the size is equal to S, that means they ordered a small pizza,

2826
00:01:36,780 --> 00:01:41,460
well in this case, the price should be $15, right? Now,

2827
00:01:41,490 --> 00:01:45,990
we're going to create a variable up here before the if statement so that we can

2828
00:01:45,990 --> 00:01:47,580
keep track of the bill.

2829
00:01:48,150 --> 00:01:53,150
So size S, the bill is going to be increased by $15.

2830
00:01:54,450 --> 00:01:58,650
Now you can, of course, simply just set the bill to $15 in this case,

2831
00:01:59,070 --> 00:02:01,740
but because we've got a lot of things that can change the bill,

2832
00:02:02,040 --> 00:02:07,040
it's easier to simply just add 15 to what it is currently using the plus equal

2833
00:02:07,230 --> 00:02:08,310
sign that you learned about.

2834
00:02:09,150 --> 00:02:12,240
Then we're going to check with an elif. Elif

2835
00:02:12,240 --> 00:02:16,410
the size is equal to M, so if they chose a medium pizza instead,

2836
00:02:16,830 --> 00:02:20,400
then the bill is going to increase by $20 instead.

2837
00:02:20,940 --> 00:02:24,660
And finally, for all other cases, namely,

2838
00:02:24,660 --> 00:02:26,340
if they'd got a large size pizza,

2839
00:02:26,760 --> 00:02:30,810
then we're going to increase the bill by, um,

2840
00:02:30,840 --> 00:02:33,360
$25. Now,

2841
00:02:33,390 --> 00:02:38,390
notice how here you could have also used an elif and said elif size equal

2842
00:02:38,580 --> 00:02:41,220
to L, um, well, in that case,

2843
00:02:41,220 --> 00:02:46,220
the bill increases by $25 and you don't actually need an else statement.

2844
00:02:46,830 --> 00:02:48,420
It's not required.

2845
00:02:48,600 --> 00:02:53,600
If you feel like it's easier to read like this, small,

2846
00:02:53,670 --> 00:02:56,760
medium, large, and what should happen for each case,

2847
00:02:57,090 --> 00:03:00,280
then you can just leave it like this. But of course,

2848
00:03:00,280 --> 00:03:03,970
there is an argument to be made that the user might have typed something wrong,

2849
00:03:03,970 --> 00:03:06,610
right? They might've typed a lowercase letter,

2850
00:03:06,610 --> 00:03:10,540
they might've typed a completely different letter. So in future lessons,

2851
00:03:10,600 --> 00:03:14,590
we're going to show you how you can catch these cases and how you can deal with

2852
00:03:14,590 --> 00:03:18,550
it. But for now, let's just keep our program as simple as possible.

2853
00:03:19,060 --> 00:03:22,330
If they type the wrong letter, instead of S, M, or L,

2854
00:03:22,330 --> 00:03:24,040
then we're just going to overcharge them.

2855
00:03:24,490 --> 00:03:28,240
So now that we've established what the basic price for their pizza is,

2856
00:03:28,540 --> 00:03:30,640
we're going to look through the ad-ons.

2857
00:03:30,670 --> 00:03:33,490
We're going to see if they said they wanted to add pepperoni.

2858
00:03:33,520 --> 00:03:38,260
So if add pepperoni is equal to Y, well,

2859
00:03:38,260 --> 00:03:39,310
in that case,

2860
00:03:39,340 --> 00:03:43,060
we're going to need to check if they have a small pizza or a medium,

2861
00:03:43,060 --> 00:03:46,390
or large pizza, 'cause the price is different.

2862
00:03:46,660 --> 00:03:49,630
So we're going to have a nested, if function in here.

2863
00:03:50,110 --> 00:03:53,170
We're going to say if add pepperoni is equal to Y,

2864
00:03:54,910 --> 00:03:59,910
and then if the size is equal to S, well,

2865
00:04:00,250 --> 00:04:04,180
in this case, we're only going to add, um, $2 to the bill.

2866
00:04:05,050 --> 00:04:08,860
But if the size was any other size, basically medium or large,

2867
00:04:09,100 --> 00:04:11,620
so we can catch that using just an L statement

2868
00:04:11,680 --> 00:04:16,600
instead of creating three separate, if sizes S, if sizes M, et cetera.

2869
00:04:17,230 --> 00:04:20,500
And in this case, we're going to add $3 to the bill.

2870
00:04:21,790 --> 00:04:25,150
So now we've got this case covered.

2871
00:04:25,270 --> 00:04:29,350
The final thing is whether if they said they wanted extra cheese or not.

2872
00:04:29,920 --> 00:04:32,980
So if they did, in fact, want extra cheese,

2873
00:04:35,110 --> 00:04:35,380
well,

2874
00:04:35,380 --> 00:04:39,670
in that case, all we have to do is just add $1 to the bill.

2875
00:04:40,480 --> 00:04:45,100
So these are three separate sets of if statements;

2876
00:04:45,460 --> 00:04:47,530
this one, this one, and this one.

2877
00:04:47,980 --> 00:04:51,400
And by the end of all of these if statements,

2878
00:04:51,730 --> 00:04:54,160
as long as we're at the right indentation level

2879
00:04:54,190 --> 00:04:56,230
namely right next to the gutter here,

2880
00:04:56,530 --> 00:05:00,880
then we can go ahead and calculate their bill and print it out for them.

2881
00:05:01,270 --> 00:05:02,740
So we can say print,

2882
00:05:02,800 --> 00:05:06,700
and I'm going to use an f-string to insert the bill in here, print

2883
00:05:06,880 --> 00:05:09,910
Your final bill is,

2884
00:05:10,150 --> 00:05:14,350
and then I'm going to add a dollar sign, and then inside the curly braces,

2885
00:05:14,410 --> 00:05:19,060
I'm going to put it in the current value of the bill after all of these

2886
00:05:19,060 --> 00:05:22,060
calculations. So did you manage to get it right?

2887
00:05:22,210 --> 00:05:27,210
Did you manage to use a combination of if statements and elif statements,

2888
00:05:28,840 --> 00:05:32,470
um, nested if statements, or did you do it in a different way?

2889
00:05:32,500 --> 00:05:36,250
And it's totally cool if you did. As long as it does what it's supposed to do,

2890
00:05:36,640 --> 00:05:39,970
then it doesn't really matter whichever format of your code

2891
00:05:40,000 --> 00:05:42,550
you decide to go for it. And as a matter of fact,

2892
00:05:42,550 --> 00:05:46,030
there's loads of ways that you could have written this code to get this

2893
00:05:46,030 --> 00:05:49,270
functionality. Some of them will be slightly more readable,

2894
00:05:49,570 --> 00:05:51,430
some of them will be slightly less readable.

2895
00:05:51,610 --> 00:05:56,470
So, it's a case of you making a good judgment on that and choosing the code that

2896
00:05:56,470 --> 00:06:00,200
makes the most sense to you. Now in the next lesson,

2897
00:06:00,590 --> 00:06:05,590
I want to talk a little bit about combining different conditions so that we can

2898
00:06:05,960 --> 00:06:10,960
use something called a logical operator to check for multiple conditions in the

2899
00:06:11,390 --> 00:06:16,280
same line of code. So, for all of that and more, I'll see you on the next lesson,

2900
00:00:00,280 --> 00:00:04,720
Now up to this point, you've seen us use if statements,

2901
00:00:04,750 --> 00:00:06,460
else statements, elif statements,

2902
00:00:06,610 --> 00:00:10,600
multiple if statements as well as nested if statements.

2903
00:00:10,990 --> 00:00:15,990
But the thing that we haven't been able to do thus far is to check for multiple

2904
00:00:16,780 --> 00:00:20,440
conditions in the same line of code.

2905
00:00:21,250 --> 00:00:26,140
So how would we be able to combine different conditions and say, well,

2906
00:00:26,200 --> 00:00:31,200
is the pizza large and the user wants pepperoni and extra cheese all in the

2907
00:00:32,290 --> 00:00:34,510
same line of code? Well,

2908
00:00:34,570 --> 00:00:37,900
to do this we would need to learn about the logical operators.

2909
00:00:38,290 --> 00:00:42,280
So there's three of them that are really useful: and, or and not.

2910
00:00:43,180 --> 00:00:44,830
So let's take a look at the first one.

2911
00:00:45,280 --> 00:00:49,060
When you combine two different conditions using an and operator,

2912
00:00:49,390 --> 00:00:51,310
they both have to be true,

2913
00:00:51,310 --> 00:00:55,390
both A and B for the entire line of code to be true.

2914
00:00:56,320 --> 00:00:59,920
If just one of them is true, say A is true and B is false, 

2915
00:00:59,920 --> 00:01:04,780
or A is false and B is true, then the overall thing evaluates to false.

2916
00:01:06,070 --> 00:01:08,800
So if we take a look just inside the console,

2917
00:01:08,830 --> 00:01:13,450
and in fact, I'm going to clear the console, and I write some code here.

2918
00:01:13,480 --> 00:01:14,770
Let's say that, um,

2919
00:01:15,250 --> 00:01:20,250
A = 12 right? Now let's say that I wanted to check whether if is A greater

2920
00:01:23,320 --> 00:01:27,460
than 15? Well that is going to be false.

2921
00:01:28,060 --> 00:01:32,410
Now what about is A greater than 10? Well,

2922
00:01:32,410 --> 00:01:33,340
that's going to be true.

2923
00:01:33,940 --> 00:01:38,680
Now if I combined this using an and statement, I could say,

2924
00:01:38,680 --> 00:01:43,680
well is A greater than 10 and A is less than 13 and hit enter, then I would get

2925
00:01:49,450 --> 00:01:54,450
true because both A is greater than 10 and A is less than 13 are true.

2926
00:01:55,990 --> 00:01:58,660
So in this case, when both conditions are true,

2927
00:01:59,110 --> 00:02:02,320
then this entire line gets evaluated to true.

2928
00:02:02,950 --> 00:02:06,100
But see what happens when just one of them is false.

2929
00:02:06,250 --> 00:02:11,250
So is A greater than 15 and A less than 13? A is greater than 15 is false,

2930
00:02:13,960 --> 00:02:17,590
A is less than 13 is true and now we get false.

2931
00:02:18,580 --> 00:02:23,470
So that's what happens when you combine different conditions using and. Now if

2932
00:02:23,470 --> 00:02:26,650
you only needed one of the conditions to be true,

2933
00:02:27,040 --> 00:02:29,980
then you could use the or operator instead.

2934
00:02:30,160 --> 00:02:35,160
So if a C or D were true or if they're both true,

2935
00:02:35,740 --> 00:02:37,240
then it'll evaluate to true.

2936
00:02:38,110 --> 00:02:41,680
It's only when both C and D are false

2937
00:02:42,130 --> 00:02:44,530
does this statement actually become false.

2938
00:02:45,640 --> 00:02:50,640
Now the final one is the not operator and all that this does is it basically

2939
00:02:51,160 --> 00:02:55,360
reverses a condition. So if the condition is false,

2940
00:02:55,390 --> 00:02:58,900
then it becomes true. If it's true, then it becomes false.

2941
00:02:59,830 --> 00:03:01,390
If I wrote not

2942
00:03:01,570 --> 00:03:06,570
and then I wrote the condition A is greater than 15. A greater than 15 is

2943
00:03:09,550 --> 00:03:14,410
definitely false, 12 is less than 15. But by putting the not there

2944
00:03:14,410 --> 00:03:18,340
it's going to reverse this, so going from false to true.

2945
00:03:18,580 --> 00:03:21,790
So when I hit enter, you'll see it is now true.

2946
00:03:23,530 --> 00:03:25,480
Coming back to our rollercoaster ticketing,

2947
00:03:25,720 --> 00:03:30,670
let's say that the rollercoaster company decided that for everybody who was

2948
00:03:30,670 --> 00:03:34,600
having a midlife crisis, they would give them free tickets.

2949
00:03:35,020 --> 00:03:36,790
And according to Wikipedia,

2950
00:03:36,880 --> 00:03:41,880
midlife crises typically occur when you're a 45 to 55 years old.

2951
00:03:42,760 --> 00:03:46,390
Let's see if we can incorporate this into our code.

2952
00:03:46,960 --> 00:03:51,490
So let's say that in addition to these existing price categories,

2953
00:03:51,700 --> 00:03:56,700
what if you had to add a separate price category for those people who are aged

2954
00:03:57,190 --> 00:04:02,190
between 45 and 55 and those people get to ride for free?

2955
00:04:03,700 --> 00:04:06,910
Do you think you would be able to change the code using what you've learned

2956
00:04:06,940 --> 00:04:11,940
about logical operators in order to incorporate this addition to our program?

2957
00:04:12,730 --> 00:04:14,260
Pause the video and give that a go.

2958
00:04:17,970 --> 00:04:21,720
So we've currently got three conditions: age,

2959
00:04:21,750 --> 00:04:26,750
less than 12, age between 12 and 18, and finally everybody else.

2960
00:04:27,750 --> 00:04:31,770
Now instead of just finishing up there,

2961
00:04:32,580 --> 00:04:34,770
let's go ahead and add another elif.

2962
00:04:35,130 --> 00:04:37,740
And here we're going to combine two conditions.

2963
00:04:38,250 --> 00:04:43,250
We're going to say if the age is greater than or equal to 45 and the age is less

2964
00:04:47,790 --> 00:04:52,790
than or equal to 55, then we get to catch that midlife crisis window.

2965
00:04:54,840 --> 00:04:55,080
Well,

2966
00:04:55,080 --> 00:05:00,030
in this case, we're going to print something like-- we're going to say "Everything's

2967
00:05:00,030 --> 00:05:02,520
going to be ok. Have a free ride on us!"

2968
00:05:04,530 --> 00:05:05,190
And in fact,

2969
00:05:05,190 --> 00:05:10,190
we don't need to modify the bill in any way because we know that with

2970
00:05:11,820 --> 00:05:16,820
if, elif and else statements is that once this condition matches,

2971
00:05:19,260 --> 00:05:22,350
then everything that's inside this block,

2972
00:05:22,350 --> 00:05:26,850
so everything that's indented inside this elif is going to be carried out

2973
00:05:26,910 --> 00:05:28,350
namely printing this out,

2974
00:05:28,890 --> 00:05:33,890
and then it's going to skip the rest of this if/else block and continue on.

2975
00:05:36,630 --> 00:05:37,890
Now, if they want to photo this,

2976
00:05:37,890 --> 00:05:41,790
they'll have to pay $3 but at least their ticket is free.

2977
00:05:42,150 --> 00:05:47,150
And we've been able to do this because we know about the and logical operator.

2978
00:05:48,720 --> 00:05:49,920
In the next lesson,

2979
00:05:49,980 --> 00:05:54,960
we're going to practice using logical operators and more by completing another

2980
00:05:54,960 --> 00:05:58,380
code challenge. So for all of that and more, I'll see you there.

2981
00:00:00,030 --> 00:00:02,310
All right guys, it's time to show what you're made of.

2982
00:00:02,370 --> 00:00:05,700
Here's another code challenge. And this one is again,

2983
00:00:05,790 --> 00:00:10,560
another difficult challenge and the arms really show you just how difficult it

2984
00:00:10,560 --> 00:00:14,040
is, but you're going to flex and you're going to get stronger.

2985
00:00:14,580 --> 00:00:17,910
And it's only through struggle that you're going to become a better coder.

2986
00:00:18,480 --> 00:00:22,950
So in this code exercise, we're going to build a love calculator.

2987
00:00:23,640 --> 00:00:28,640
And the way that it's going to work is the same method that I used when I was

2988
00:00:29,010 --> 00:00:30,090
10, pretty much.

2989
00:00:30,690 --> 00:00:35,310
And I really recommend reading up on this particular Buzzfeed article,

2990
00:00:35,940 --> 00:00:38,730
which is of course, very reputable

2991
00:00:38,880 --> 00:00:42,450
and it's going to tell you exactly how this program is going to work.

2992
00:00:43,110 --> 00:00:47,490
So once you've managed to scroll past all the GIFs, it will tell you, um,

2993
00:00:47,580 --> 00:00:51,210
the method. So you write your name, his or her name,

2994
00:00:51,540 --> 00:00:54,480
and then the words true and love. Now,

2995
00:00:54,480 --> 00:00:59,480
then you are going to count the number of times T-R-U-E occur in both of

2996
00:00:59,520 --> 00:01:02,640
your names. And then you're going to count the number of times,

2997
00:01:02,640 --> 00:01:07,560
L-O-V-E occur in both of your names. Once you've got those numbers,

2998
00:01:07,590 --> 00:01:12,570
so here T-R-U-E adds up to six, L-O-V-E adds up to three.

2999
00:01:12,900 --> 00:01:17,550
Then you'll get the percentage that you are compatible with this other person.

3000
00:01:18,060 --> 00:01:20,550
So not only did you get to learn Programming on this course,

3001
00:01:20,550 --> 00:01:22,650
you also get the discover your destiny.

3002
00:01:23,190 --> 00:01:28,190
The idea is that we're going to convert this very time-consuming process into a

3003
00:01:28,500 --> 00:01:32,880
computer program. So once you've understood how it works,

3004
00:01:33,150 --> 00:01:35,820
you're going to write the code for it. Now,

3005
00:01:35,850 --> 00:01:37,950
in order to be able to calculate the love score,

3006
00:01:37,950 --> 00:01:41,340
there's two important things that you should read in the hint.

3007
00:01:41,940 --> 00:01:46,940
One is you will need to use the lower function, and all that this does is it

3008
00:01:48,360 --> 00:01:51,390
takes a string, let's say we've got the string Angela.

3009
00:01:51,780 --> 00:01:54,990
And notice how that first letter is a capital A.

3010
00:01:55,680 --> 00:01:58,770
If I write .lower parentheses,

3011
00:01:59,220 --> 00:02:04,020
then it will reduce all of the capital letters to lowercase letters.

3012
00:02:04,590 --> 00:02:08,220
And if you were wondering how you would've known to use this,

3013
00:02:08,580 --> 00:02:11,190
then you can head over to the Stack of flow question

3014
00:02:11,670 --> 00:02:15,960
in which somebody asks exactly this question, how do you turn something

3015
00:02:15,960 --> 00:02:19,740
that's uppercase into a lowercase character in Python.

3016
00:02:20,970 --> 00:02:23,820
The second function you'll need is the count function.

3017
00:02:24,150 --> 00:02:28,350
And this will give you the number of times a letter occurs in a string,

3018
00:02:28,380 --> 00:02:33,270
which is super useful when it comes to this particular challenge. So again,

3019
00:02:33,300 --> 00:02:37,830
let's use our string, Angela, and then I'm going to write count.

3020
00:02:38,040 --> 00:02:39,930
And then in between the parentheses,

3021
00:02:40,230 --> 00:02:43,350
I'm going to specify what it is that I want to count.

3022
00:02:43,740 --> 00:02:48,570
So let's say I want to count the character A inside this string,

3023
00:02:48,930 --> 00:02:51,270
and I hit enter. It comes up with one,

3024
00:02:51,780 --> 00:02:56,190
even though you can see there's actually two A's in the string, in my name,

3025
00:02:56,760 --> 00:03:01,760
it only counts one lowercase a. So that's why this first step was super,

3026
00:03:02,320 --> 00:03:03,370
super useful.

3027
00:03:03,610 --> 00:03:08,320
So let's say lower_case_name equals, um,

3028
00:03:09,250 --> 00:03:13,660
Angela.lower. And then,

3029
00:03:13,900 --> 00:03:14,733
um,

3030
00:03:14,890 --> 00:03:19,890
let's go ahead and do lower_case_name.count,

3031
00:03:21,730 --> 00:03:26,440
and then we're going to count for a again. Now you'll see it gives us two,

3032
00:03:26,680 --> 00:03:29,110
because we were able to convert everything to lowercase,

3033
00:03:29,260 --> 00:03:33,610
and then use the count function to check the number of times the character a

3034
00:03:33,670 --> 00:03:38,080
occurs in this string. And again, I've linked to a Stack Overflow question

3035
00:03:38,350 --> 00:03:43,350
which is how you might've found out to use this count function and how you might

3036
00:03:43,660 --> 00:03:46,900
use it in terms of code examples. Now,

3037
00:03:46,930 --> 00:03:49,120
there's a second step to this challenge

3038
00:03:49,120 --> 00:03:52,270
because not only do we want to know the love score,

3039
00:03:52,390 --> 00:03:55,450
we also want to give the user an interpretation.

3040
00:03:55,930 --> 00:04:00,930
So the interpretation is here. For love scores that are less than 10 or greater

3041
00:04:02,020 --> 00:04:06,880
than 90, the message is going to say "Your score is X." And of course,

3042
00:04:06,880 --> 00:04:11,770
replace that X with the actual score. You go together like Coke and Mentos.

3043
00:04:13,960 --> 00:04:16,959
Now, if their love score was between 40 and 50,

3044
00:04:16,990 --> 00:04:20,470
the message is going to read your score is, whatever it may be,

3045
00:04:20,950 --> 00:04:24,460
you are all right together. And finally,

3046
00:04:24,490 --> 00:04:28,600
for all other scores, the message is just going to give them their score.

3047
00:04:28,630 --> 00:04:33,340
Your score is XYZ. In this case, there's two inputs,

3048
00:04:33,370 --> 00:04:35,530
somebody's name, and then somebody else's name.

3049
00:04:35,890 --> 00:04:39,670
And then you're going to check for the number of times T-R-U-E occurs in

3050
00:04:39,670 --> 00:04:43,060
both of those names, L-O-V-E occurs in those names,

3051
00:04:43,330 --> 00:04:46,810
then you going to combine these digits together to get a love score.

3052
00:04:47,590 --> 00:04:51,670
Pause the video now, have a look at everything that's in the instructions,

3053
00:04:51,910 --> 00:04:54,340
read it all and then go ahead and give that a go.

3054
00:04:54,660 --> 00:04:59,660
[inaudible]

3055
00:05:03,210 --> 00:05:07,950
All right. So the first step is to work out the love score, right?

3056
00:05:08,160 --> 00:05:13,160
So we need to figure out how many times each of these letters occur in these

3057
00:05:14,250 --> 00:05:15,083
names.

3058
00:05:15,390 --> 00:05:20,390
The first thing that we need to do is to combine the names,

3059
00:05:21,120 --> 00:05:23,400
because we're looking for the number of times,

3060
00:05:23,400 --> 00:05:28,400
let's say a T occurs in these names and we're treating them as one string,

3061
00:05:30,030 --> 00:05:33,150
right? So I don't wanna check it separately and then have to add it together.

3062
00:05:33,600 --> 00:05:38,600
So let's call it a combined_string and lets set that to equal name1 + name2.

3063
00:05:41,080 --> 00:05:45,150
And this is just going to concatenate those two strings together

3064
00:05:45,540 --> 00:05:49,440
so we'll be able to check them only once. It makes it more efficient,

3065
00:05:49,500 --> 00:05:53,760
right? The next step is to guard against cases

3066
00:05:53,790 --> 00:05:57,830
where the user is inputting their name like this, which many people do,

3067
00:05:58,160 --> 00:06:00,530
or they might even write it like this.

3068
00:06:00,920 --> 00:06:03,980
So we have to turn everything into lowercase.

3069
00:06:04,130 --> 00:06:06,080
So let's call it a lower_case_string

3070
00:06:09,460 --> 00:06:14,460
and that will be combined_string. lower just as I demoed previously using

3071
00:06:15,820 --> 00:06:20,050
this lower function. So now we've got everything in lower case,

3072
00:06:20,080 --> 00:06:23,590
we're going to start checking for this first word,

3073
00:06:23,980 --> 00:06:27,070
T-R-U-E. So let's first check

3074
00:06:27,100 --> 00:06:32,100
how many times the letter T occurs in this lowercase string of both people's

3075
00:06:33,070 --> 00:06:33,903
names.

3076
00:06:34,030 --> 00:06:38,500
So we can say lower_case_string.count

3077
00:06:38,920 --> 00:06:42,820
and then inside the parentheses, we specify the string we're looking for

3078
00:06:42,850 --> 00:06:47,350
which is 't' and then I'm going to save this to a variable

3079
00:06:47,350 --> 00:06:52,330
which I'll just call 't' again. And then we're going to repeat this several times,

3080
00:06:52,810 --> 00:06:56,890
hopefully for practice sake, you'll type it all out. But in my case,

3081
00:06:56,950 --> 00:07:01,180
I'm just going to copy and paste it, which is usually error-prone,

3082
00:07:01,240 --> 00:07:03,010
but we'll try to be careful.

3083
00:07:05,620 --> 00:07:08,830
So now that we've got the number of times 't' occurs, 'r' 

3084
00:07:08,830 --> 00:07:12,760
occurs, 'u' and 'e' occurs, we can now add it all up.

3085
00:07:13,240 --> 00:07:18,240
So let's say true = t + r + u + e.

3086
00:07:21,160 --> 00:07:26,160
So now we've got the first digit of our love score and we have to go ahead and

3087
00:07:26,800 --> 00:07:31,690
do the same thing for L-O-V-E. So again, for time sake,

3088
00:07:31,690 --> 00:07:36,690
I'm just going to copy that and then go ahead and change this to l,

3089
00:07:39,100 --> 00:07:44,100
o, v, e and l, o, v, e.

3090
00:07:47,050 --> 00:07:51,580
And then I'm going to go ahead and calculate the total for that

3091
00:07:51,670 --> 00:07:56,670
which is going to be l + o + v + e.

3092
00:07:58,690 --> 00:08:03,690
And now I've got both of these numbers and I'm going to try and concatenate them

3093
00:08:04,960 --> 00:08:08,290
together to achieve this two-digit number.

3094
00:08:09,340 --> 00:08:12,640
To do that, I'm going to create a love score variable

3095
00:08:12,700 --> 00:08:14,170
that's going to keep hold of this.

3096
00:08:14,620 --> 00:08:18,130
And then I'm going to say true + love.

3097
00:08:18,760 --> 00:08:23,260
And remember that at this stage, both true and love are actually integers.

3098
00:08:23,290 --> 00:08:25,510
That's how we were able to add them together.

3099
00:08:26,050 --> 00:08:30,310
So if I want to turn them into a string in order to be able to concatenate them

3100
00:08:30,310 --> 00:08:33,070
together, I have to convert them to strings.

3101
00:08:35,200 --> 00:08:40,200
The final thing we have to do is just to go ahead and print this love score.

3102
00:08:40,870 --> 00:08:43,390
So we're not going to print anything else for now.

3103
00:08:43,419 --> 00:08:47,440
Let's just go ahead and test it out. So let's run our code

3104
00:08:49,630 --> 00:08:52,990
and let's type my name and then

3105
00:08:53,080 --> 00:08:57,750
their name, Jack Bauer, of course. And then it gives us the score.

3106
00:08:57,750 --> 00:08:59,730
So five, three.

3107
00:09:00,480 --> 00:09:03,780
So that means everything so far has pretty much worked.

3108
00:09:04,350 --> 00:09:09,350
So now all we have to do is use our knowledge of if statements to give a

3109
00:09:09,570 --> 00:09:13,050
corresponding interpretation or a message.

3110
00:09:13,740 --> 00:09:17,880
If the score is less than 10 or greater than 90,

3111
00:09:18,330 --> 00:09:23,330
so if love_score is less than 10 or love_score is greater than 90,

3112
00:09:28,710 --> 00:09:33,710
so we're using that logical or operator here to check if either this condition

3113
00:09:35,310 --> 00:09:39,660
or this condition is true. And if you find it helpful,

3114
00:09:39,660 --> 00:09:41,610
which I usually do,

3115
00:09:41,820 --> 00:09:46,770
it's easy to wrap these conditions in their own set of parentheses.

3116
00:09:47,220 --> 00:09:51,000
Now, Python doesn't actually care. Either method works.

3117
00:09:51,300 --> 00:09:54,660
But for us humans, this is a little bit more readable.

3118
00:09:55,470 --> 00:09:57,630
So under this condition,

3119
00:09:57,750 --> 00:10:00,510
what we're going to print out is

3120
00:10:02,370 --> 00:10:04,530
Your love score is,

3121
00:10:04,770 --> 00:10:07,980
and then we'll insert the love_score variable here,

3122
00:10:09,450 --> 00:10:12,900
and we're going to of course be using f-strings, so let's add that.

3123
00:10:13,530 --> 00:10:18,530
And then we're going to write you go together like Coke and Mentos.

3124
00:10:22,350 --> 00:10:25,530
So that's our first condition done. Now,

3125
00:10:25,560 --> 00:10:30,560
the next condition is what if their love score is between 40 and 50.

3126
00:10:32,730 --> 00:10:35,550
So let's go ahead and add an elif here.

3127
00:10:38,190 --> 00:10:38,970
Elif

3128
00:10:38,970 --> 00:10:43,970
the love_score is greater than or equal to 40

3129
00:10:47,220 --> 00:10:52,220
and the love_score is less than or equal to 50,

3130
00:10:53,130 --> 00:10:58,130
so that catches the cases where the love score is between 40 and 50.

3131
00:10:58,440 --> 00:11:03,440
So both of these conditions must be true for this statement to fire.

3132
00:11:05,100 --> 00:11:06,060
And in this case,

3133
00:11:06,090 --> 00:11:10,770
what we want to do is we want to print out this sentence.

3134
00:11:11,670 --> 00:11:13,830
So your score is,

3135
00:11:15,420 --> 00:11:18,000
let's just insert the love_score in here.

3136
00:11:18,410 --> 00:11:22,790
[inaudible]

3137
00:11:23,330 --> 00:11:27,530
Your score is this particular love score. You are alright together.

3138
00:11:28,430 --> 00:11:33,430
Now the final thing we said is if it doesn't match any of these conditions,

3139
00:11:33,860 --> 00:11:36,980
then the message is just going to be their score.

3140
00:11:37,520 --> 00:11:41,900
So that means we can catch everything else using an else statement

3141
00:11:42,260 --> 00:11:46,100
and we can simply just print "Your score

3142
00:11:46,220 --> 00:11:48,830
is this particular number."

3143
00:11:50,210 --> 00:11:54,430
Now at this stage, you might think you're done, but if you actually run it,

3144
00:11:54,460 --> 00:11:59,140
you're going to get an error. So let's go ahead and test it with the same names

3145
00:11:59,140 --> 00:11:59,973
as before.

3146
00:12:02,440 --> 00:12:05,650
You can see that we get a type error on line 27,

3147
00:12:06,040 --> 00:12:11,040
and it says that the comparison less than is not supported between instances

3148
00:12:12,400 --> 00:12:13,810
of string and int.

3149
00:12:14,320 --> 00:12:19,320
So the problem here is that in order to concatenate these two numbers,

3150
00:12:19,960 --> 00:12:22,270
we had to turn them into strings.

3151
00:12:22,750 --> 00:12:27,700
So that let's say that this number was equal to five and this number was equal

3152
00:12:27,700 --> 00:12:31,900
to six. Then instead of getting 11, which is not what we want,

3153
00:12:32,290 --> 00:12:37,290
we actually get 56 'cause they're both strings and these strings get concatenated

3154
00:12:38,650 --> 00:12:39,483
together.

3155
00:12:40,060 --> 00:12:45,060
But the problem occurs on the next step because we wanna compare the love score

3156
00:12:45,850 --> 00:12:50,380
against an actual number, then if it's a string,

3157
00:12:50,770 --> 00:12:54,670
it's not going to work. So in order to solve this,

3158
00:12:55,120 --> 00:12:59,830
then we actually have to convert the love score into an integer.

3159
00:13:00,130 --> 00:13:02,200
So you could use a separate step.

3160
00:13:02,440 --> 00:13:06,220
So the int_score equals int

3161
00:13:06,910 --> 00:13:11,830
and then we wrap it around the love score. Alternatively, um,

3162
00:13:11,920 --> 00:13:16,920
and a lot easier is to simply just wrap that whole line inside a set of brackets

3163
00:13:19,120 --> 00:13:22,660
and convert the whole thing into an integer on the same line.

3164
00:13:23,110 --> 00:13:27,220
It depends on how comfortable you are with this code as to which option you'll

3165
00:13:27,220 --> 00:13:29,830
choose. Now that we're done here,

3166
00:13:29,830 --> 00:13:33,880
let's go ahead and run our code again and let's just check it out.

3167
00:13:38,280 --> 00:13:41,130
Your score is 42. You are all right together.

3168
00:13:41,550 --> 00:13:46,550
So now our code seems to be working and we've now completed this code challenge.

3169
00:13:47,520 --> 00:13:50,310
How did you get on with this challenge?

3170
00:13:50,400 --> 00:13:53,070
Did you manage to get everything right?

3171
00:13:53,460 --> 00:13:55,950
Did you get stuck at certain places?

3172
00:13:56,850 --> 00:14:01,440
Have a think about which parts of this challenge were the hardest and see if you

3173
00:14:01,440 --> 00:14:05,280
can review some of those concepts so that the next time you encounter them,

3174
00:14:05,340 --> 00:14:07,410
you'll be able to tackle them with confidence.

3175
00:00:00,090 --> 00:00:02,910
Hey, you've reached the final project.

3176
00:00:02,910 --> 00:00:09,630
And as you've seen at the beginning of today's lessons, I showed you what we're going to be making,

3177
00:00:09,630 --> 00:00:12,670
which is a sort of choose your own adventure game.

3178
00:00:12,690 --> 00:00:14,070
I don't know if you've ever read those.

3179
00:00:14,070 --> 00:00:20,190
Choose your own adventure books where you flip to a different page if you make a particular choice.

3180
00:00:20,190 --> 00:00:24,180
And then the story kind of evolves as you make your choices.

3181
00:00:24,390 --> 00:00:30,090
Now we're going to make a very simple version of that using what we've learned about conditionals.

3182
00:00:30,090 --> 00:00:34,660
If else, Elif statements as well as everything we've done previously.

3183
00:00:34,680 --> 00:00:38,460
So you've already seen what the final outcome should look like.

3184
00:00:38,460 --> 00:00:44,760
And if you want to review it again, just head over to Treasure Island Dash and Run.

3185
00:00:44,760 --> 00:00:48,450
And here you'll see essentially the game in action.

3186
00:00:48,630 --> 00:00:52,290
So it starts off asking you, you're at a crossroad.

3187
00:00:52,290 --> 00:00:53,910
Do you want to go left or right?

3188
00:00:53,910 --> 00:00:56,490
And then you have to type your choice.

3189
00:00:57,120 --> 00:01:03,570
If you selected left, then it's going to take you to a lake and it asks you whether if you want to

3190
00:01:03,570 --> 00:01:05,680
wait for a boat or swim across.

3191
00:01:05,700 --> 00:01:08,610
So let's go ahead and wait for a boat.

3192
00:01:08,820 --> 00:01:13,530
And then the final step is it asks you which door would you like to go through?

3193
00:01:13,530 --> 00:01:15,420
Red, yellow or blue.

3194
00:01:15,540 --> 00:01:22,170
Now, depending on your choice, you'll either end up with game over or you'll end up with winning the

3195
00:01:22,170 --> 00:01:22,650
game.

3196
00:01:22,710 --> 00:01:30,870
So the basic setup for this game looks something like this, and I've included a link to this flowchart

3197
00:01:30,870 --> 00:01:33,030
in the starting rappel.

3198
00:01:33,030 --> 00:01:37,200
So Rappler slash Abra slash Treasure Island start.

3199
00:01:37,200 --> 00:01:41,460
And of course, you'll find all the links in the course resources as always.

3200
00:01:41,460 --> 00:01:45,210
But if you scroll down, there's a link right here that takes you to this flowchart.

3201
00:01:45,480 --> 00:01:51,360
Now, the first question you're going to ask the user is to make a choice between left and right.

3202
00:01:51,450 --> 00:01:54,200
Now, you can use my wording if you want.

3203
00:01:54,210 --> 00:01:55,140
You're at a crossroad.

3204
00:01:55,140 --> 00:01:55,900
Where do you want to go?

3205
00:01:55,920 --> 00:01:57,530
Type left or type right.

3206
00:01:57,540 --> 00:02:02,730
But I think the fun part of this challenge is really creating your own story, right?

3207
00:02:02,730 --> 00:02:06,060
But somehow get them to choose between left and right.

3208
00:02:06,300 --> 00:02:12,990
If they choose right or any other condition for that matter, tell them that they've lost game over

3209
00:02:12,990 --> 00:02:14,670
for some sort of reason.

3210
00:02:15,060 --> 00:02:20,260
In my case, if they had chosen right, the reason is because they fell into a whole game over.

3211
00:02:20,280 --> 00:02:26,430
But I think you're far more imaginative than I am, so go ahead and use all of those skills and make

3212
00:02:26,430 --> 00:02:27,450
your game really fun.

3213
00:02:27,570 --> 00:02:32,310
Now, if they've chosen left, on the other hand, then we're going to take them to another question

3214
00:02:32,310 --> 00:02:39,270
that asks them whether if they want to swim or whether if they want to wait for a boat and if they swam,

3215
00:02:39,270 --> 00:02:41,560
then it's going to be some form of game over.

3216
00:02:41,580 --> 00:02:46,620
There's crocodiles, there's whatever it may be, but they can't continue.

3217
00:02:46,710 --> 00:02:51,570
But if they chose wait, then we take them to the third and final question, which asks them to choose

3218
00:02:51,570 --> 00:02:57,480
between three doors and if they choose any door other than the yellow door, then they would lose.

3219
00:02:57,480 --> 00:03:00,390
But if they chose the yellow door, then they somehow win.

3220
00:03:00,570 --> 00:03:04,890
Now notice how each of these just says game over, game over, left or right.

3221
00:03:04,890 --> 00:03:10,260
But, you know, the idea is really to use your creativity and make this game really your own.

3222
00:03:10,710 --> 00:03:16,590
Now, one thing to remember, though, is that when the user types in a answer, let's say left or right,

3223
00:03:16,620 --> 00:03:23,010
they might type it like this with an uppercase R, or they might type it like this all lowercase.

3224
00:03:23,220 --> 00:03:28,230
Have a think about how you might make sure that no matter which version they typed, you're still going

3225
00:03:28,230 --> 00:03:31,950
to be able to catch their command, essentially.

3226
00:03:32,070 --> 00:03:37,840
So have a think about what you've learned in the previous lessons and take a look at this flowchart.

3227
00:03:37,860 --> 00:03:43,740
Then head over to the starting project and you can get started writing your code.

3228
00:03:43,800 --> 00:03:50,220
Now, if you had over here and what you see is sort of like a mumbo jumbo bunch of characters, then

3229
00:03:50,220 --> 00:03:57,000
the reason is probably because there's not enough space for this ASCII art of a treasure chest to display.

3230
00:03:57,000 --> 00:04:04,290
So you can either do as I did, reduce the size of the console, or alternatively and probably easier

3231
00:04:04,290 --> 00:04:07,590
is to change the layout to stacked, make it go at the bottom.

3232
00:04:07,710 --> 00:04:14,070
Collapse this left hand pane and then you've got as much space as you have to work with.

3233
00:04:15,090 --> 00:04:20,910
Now ask zero is really cool because it basically just uses a bunch of characters that you know and love,

3234
00:04:20,910 --> 00:04:27,690
like the comma and the equal sign and all of these things that together make up a picture.

3235
00:04:28,560 --> 00:04:30,600
And you can find your own Asgard.

3236
00:04:30,600 --> 00:04:37,470
If you just go to ASCO, UK slash art and you'll see a whole bunch of different topics.

3237
00:04:37,830 --> 00:04:42,240
And they've grouped a lot of things together into individual pages.

3238
00:04:42,240 --> 00:04:48,720
So if you wanted a rhino ASCII art, then you can find a whole bunch of rhinos that people have drawn.

3239
00:04:49,020 --> 00:04:54,510
But the easiest way is of course using command F if you're on a mac or control F if you're on a Windows

3240
00:04:54,540 --> 00:04:57,450
machine, and then just search for the thing that you want.

3241
00:04:57,450 --> 00:05:04,470
So for example, I went and searched for treasure, and down here I found this brilliant treasure box

3242
00:05:04,560 --> 00:05:09,930
ASCII art, which is what I'm using to print inside this print statement.

3243
00:05:10,170 --> 00:05:16,590
Now notice how there's three single quotes that are at the start, and there's three single quotes at

3244
00:05:16,590 --> 00:05:17,340
the end.

3245
00:05:17,430 --> 00:05:24,210
Basically, what the single quotes allow you to do is to create multiple lines of a string, essentially.

3246
00:05:24,390 --> 00:05:32,490
So notice how if I go ahead and delete all of these single quotes and I only had a set of double quotes,

3247
00:05:32,940 --> 00:05:36,030
then it actually doesn't quite work.

3248
00:05:37,470 --> 00:05:43,080
It gets quite confused because it thinks that this is where the line ends.

3249
00:05:43,080 --> 00:05:46,180
But in fact, I wanted to print all of this out.

3250
00:05:46,200 --> 00:05:53,160
So to do that, instead of using a double quote, I use three single quotes and at the very bottom I

3251
00:05:53,160 --> 00:05:59,010
tell it, Well, this is the end of my multi block string by using three single quotes as well.

3252
00:05:59,100 --> 00:06:03,120
So have a go at running that and you should be able to see that in your console.

3253
00:06:03,120 --> 00:06:09,120
You get this little Treasure Island ASCII art being printed along with the two sentences that begin

3254
00:06:09,120 --> 00:06:09,750
the game.

3255
00:06:10,020 --> 00:06:12,330
So have a look at the flow chart.

3256
00:06:12,660 --> 00:06:19,770
Have a play around with the ASCII art and also have a look at the final version of the app so that you

3257
00:06:19,770 --> 00:06:24,540
can go ahead and create your own version to complete this challenge.

3258
00:06:24,600 --> 00:06:26,490
Pause the video now and give that a go.

3259
00:06:30,760 --> 00:06:31,120
All right.

3260
00:06:31,120 --> 00:06:37,780
So let's see if we can replicate the functionality or the logic that's shown in this diagram into our

3261
00:06:37,780 --> 00:06:39,010
Treasure Island game.

3262
00:06:39,040 --> 00:06:44,620
So the first thing it has to do is we have to ask the user whether if they want to turn left or right.

3263
00:06:44,980 --> 00:06:51,040
And after we ask the user this question, we're going to want to capture the input.

3264
00:06:51,040 --> 00:06:51,450
Right?

3265
00:06:51,460 --> 00:06:56,830
So let's go ahead and create an input function and ask our question.

3266
00:07:00,460 --> 00:07:07,600
Now notice how when I use my double quotes around my string, the double quotes that are inside the

3267
00:07:07,600 --> 00:07:14,710
double quotes are interpreted as code because it actually thinks that this is the end of the first string.

3268
00:07:14,980 --> 00:07:18,040
This is the second string and this is the final string.

3269
00:07:18,070 --> 00:07:20,140
This is how the computer is going to see it.

3270
00:07:20,350 --> 00:07:26,470
Now, previously you saw that we could do the trick where we change this to single quotes instead.

3271
00:07:26,920 --> 00:07:35,650
But if, like me, you have this case where you have the yaw with the apostrophe, then it's going to

3272
00:07:35,650 --> 00:07:38,250
think that this is actually the end of the first string.

3273
00:07:38,260 --> 00:07:41,230
This is the second string and this is the third string.

3274
00:07:41,230 --> 00:07:43,420
So this doesn't actually really help us.

3275
00:07:43,750 --> 00:07:49,810
Now, what we can do when we want to tell our computer that what I'm writing is actually not code,

3276
00:07:49,810 --> 00:07:52,150
just see it as text.

3277
00:07:52,180 --> 00:07:57,640
You can get it to ignore a symbol afterwards by using the backslash.

3278
00:07:57,760 --> 00:08:03,940
So this way it basically escapes the string and it will see it as text.

3279
00:08:04,090 --> 00:08:08,050
And now we have a complete string like this.

3280
00:08:08,050 --> 00:08:13,330
And this is just going to be interpreted as a text because we told it to with the backslash.

3281
00:08:13,540 --> 00:08:16,290
Now, of course, there's other ways that you could have gone around this.

3282
00:08:16,300 --> 00:08:22,390
You could have just simply said you are at at a crossroad rather than using the apostrophe.

3283
00:08:22,540 --> 00:08:26,260
But more often than not, you'll need to use a symbol that you'll need to escape.

3284
00:08:26,260 --> 00:08:27,870
And you can do that with the backslash.

3285
00:08:27,880 --> 00:08:29,350
So that's just a quick tip.

3286
00:08:29,710 --> 00:08:34,419
Now, at this point, the user is going to type a message left or right.

3287
00:08:34,659 --> 00:08:37,549
So let's go ahead and save that to a variable.

3288
00:08:37,570 --> 00:08:38,500
Let's call it choice.

3289
00:08:38,500 --> 00:08:40,390
One equals their input.

3290
00:08:40,570 --> 00:08:45,600
Now, remember how I said they could be typing the answer as right or as right?

3291
00:08:45,610 --> 00:08:52,510
So how can we make sure that when we're doing our checks using the if statement, we ignore the casing?

3292
00:08:52,810 --> 00:08:59,530
Well, one way of doing this is we can simply use the lower function to change their input no matter

3293
00:08:59,530 --> 00:09:00,640
how they wrote it.

3294
00:09:00,640 --> 00:09:07,030
Right, Right or right, it should all be converted into lowercase to this version.

3295
00:09:07,180 --> 00:09:12,730
That way we have one thing that we can consistently check for in our IF statement, which is coming

3296
00:09:12,730 --> 00:09:13,330
up next.

3297
00:09:13,330 --> 00:09:15,910
So we can say if choice one.

3298
00:09:16,870 --> 00:09:17,830
Is equal to.

3299
00:09:17,860 --> 00:09:23,500
Remember the double equals is checking whether if left hand side and right hand side is equal and the

3300
00:09:23,500 --> 00:09:29,290
single equal sign is assigning the right hand side to this particular variable name.

3301
00:09:29,650 --> 00:09:36,340
Now, if choice one equals the string, right, then it's pretty much game over for player.

3302
00:09:36,370 --> 00:09:43,450
So let's go ahead and add our colon and print something like Game Over.

3303
00:09:43,840 --> 00:09:47,830
Of course, we can elaborate this a little bit more as to why was it game over?

3304
00:09:47,830 --> 00:09:51,700
Well, because you fell into a hole.

3305
00:09:52,000 --> 00:09:55,060
This is like the game from the eighties.

3306
00:09:55,760 --> 00:09:56,900
Lots of holes.

3307
00:09:57,200 --> 00:10:00,470
Um, so you fell into a whole game over.

3308
00:10:01,340 --> 00:10:05,420
But what if they had chosen left instead?

3309
00:10:05,450 --> 00:10:08,120
Well, that takes them on to the next question.

3310
00:10:08,120 --> 00:10:12,260
So that's the option that will allow them to continue along the game.

3311
00:10:13,250 --> 00:10:19,190
Now, in this case, we could use an L statement and say, Well, if they didn't choose right, then

3312
00:10:19,190 --> 00:10:20,960
they probably chose left right.

3313
00:10:21,140 --> 00:10:25,540
But they could have also chosen like a option that was completely not listed.

3314
00:10:25,550 --> 00:10:31,010
They could have just written something like this and it would still trigger the L statement.

3315
00:10:31,220 --> 00:10:35,900
So what we should actually do is to switch it around.

3316
00:10:36,050 --> 00:10:45,770
So namely, we should say if choice one is equal to left, well, in that case, then they continue.

3317
00:10:47,470 --> 00:10:55,840
In the game, but otherwise, namely, if they chose right or anything else for that matter, then it's

3318
00:10:55,840 --> 00:10:57,230
pretty much game over.

3319
00:10:57,250 --> 00:11:03,940
So this format makes a lot more sense if you want to continue along the left side of the branch this

3320
00:11:03,940 --> 00:11:04,390
way.

3321
00:11:04,690 --> 00:11:10,840
Now, another thing that you might have realized because we learnt about combining different conditions

3322
00:11:10,840 --> 00:11:18,910
is instead of using the dot lower to change the input to lowercase, you could have also said if choice

3323
00:11:18,910 --> 00:11:27,100
is equal to left or if choice one is equal to left spelt like this, that will both work.

3324
00:11:27,460 --> 00:11:34,900
But I think in terms of synchronous and less code writing, I think this makes a lot more sense to me.

3325
00:11:35,110 --> 00:11:37,390
So I'm going to continue with this version.

3326
00:11:37,390 --> 00:11:40,870
But if you did it the other way, that's perfectly valid as well.

3327
00:11:41,750 --> 00:11:46,550
Now, if that choice one was left, then they get taken to the next question.

3328
00:11:46,550 --> 00:11:48,470
Do you want to swim or do you want to wait?

3329
00:11:49,250 --> 00:11:54,620
So let's go ahead and continue the game and create another input.

3330
00:11:55,190 --> 00:12:01,550
In this input, we're going to ask them a question and say, You've come to a lake.

3331
00:12:01,820 --> 00:12:15,380
There is an island in the middle of the lake type, wait to wait for a boat type swim to swim across.

3332
00:12:15,920 --> 00:12:16,460
Cool.

3333
00:12:16,460 --> 00:12:24,500
So we've actually got the same problem as we had before, namely that this is being interpreted as code

3334
00:12:24,500 --> 00:12:27,980
rather than as a continuous single string.

3335
00:12:28,250 --> 00:12:30,890
So do you remember how we fix this previously?

3336
00:12:31,010 --> 00:12:36,530
And if you got stuck on this, I recommend having a go at this yourself before I show you the answer.

3337
00:12:37,970 --> 00:12:38,330
All right.

3338
00:12:38,330 --> 00:12:44,870
So previously we said we were going to switch it to single quotes instead so that these double quotes

3339
00:12:44,870 --> 00:12:48,020
become interpreted as just normal strings.

3340
00:12:48,230 --> 00:12:49,940
But of course, we've got this.

3341
00:12:49,940 --> 00:12:54,670
You've we could, of course, change it to you have instead of you've.

3342
00:12:54,680 --> 00:13:00,350
But if we want to escape the string, we just add a backslash and now everything is coloured in this

3343
00:13:00,350 --> 00:13:07,100
sort of pinkish colour to indicate it's all interpreted as a string, which is exactly what we did previously.

3344
00:13:07,790 --> 00:13:12,320
Now, in terms of this input, they're going to type weight or they're going to type swim.

3345
00:13:12,320 --> 00:13:15,470
So let's go ahead and lower the casing for it as well.

3346
00:13:15,620 --> 00:13:18,950
And then we're going to save it inside a choice.

3347
00:13:18,960 --> 00:13:26,300
We're going to say choice to now be really careful and mindful of your indentation, because if you

3348
00:13:26,300 --> 00:13:34,100
wrote it like this, then it's going to be creating some errors for you because this choice two input

3349
00:13:34,100 --> 00:13:38,090
line has to run when this choice one is equal to left.

3350
00:13:38,990 --> 00:13:41,660
Otherwise we're going to get an indentation error.

3351
00:13:41,990 --> 00:13:49,880
So let's go ahead and indent it here to show that this part is inside this if statement and will only

3352
00:13:49,880 --> 00:13:52,250
be executed if this is true.

3353
00:13:52,700 --> 00:13:55,690
And then we get to check our choice two.

3354
00:13:55,700 --> 00:14:04,040
So if choice two is equal to weight, then it means that the game will continue.

3355
00:14:06,080 --> 00:14:07,670
But else.

3356
00:14:07,670 --> 00:14:13,760
So if they typed swim or anything else for that matter, then the game is going to end.

3357
00:14:13,760 --> 00:14:17,390
So we're going to print and tell them that something terrible happened.

3358
00:14:17,390 --> 00:14:22,550
You got attacked by an angry trout.

3359
00:14:24,420 --> 00:14:25,350
Game over.

3360
00:14:26,130 --> 00:14:28,590
Now we can continue along this path.

3361
00:14:28,590 --> 00:14:30,570
So we're down to here now.

3362
00:14:30,570 --> 00:14:35,640
And the final question we're going to ask the user is which door do they want to choose?

3363
00:14:36,060 --> 00:14:43,260
So here I'm going to use an input to send them the message that you arrive at the island unharmed.

3364
00:14:43,260 --> 00:14:46,290
There is a house with three doors, one red, one yellow, one blue.

3365
00:14:46,320 --> 00:14:48,300
Which color do you choose?

3366
00:14:48,600 --> 00:14:57,150
Now I'm going to save their choice inside a variable called Choice three lowercase, the answer that

3367
00:14:57,150 --> 00:14:58,290
they provided.

3368
00:14:58,380 --> 00:15:03,600
And finally, I'm going to use if elephant else to check which one they chose.

3369
00:15:03,750 --> 00:15:14,910
So if choice three is equal to red, elif, choice three is equal to yellow.

3370
00:15:17,950 --> 00:15:18,670
Life.

3371
00:15:18,670 --> 00:15:22,360
Choice three is equal to blue.

3372
00:15:23,170 --> 00:15:25,270
And then I've got ALS.

3373
00:15:25,510 --> 00:15:30,280
So here are four possible things that could happen if they chose red.

3374
00:15:30,310 --> 00:15:36,670
Then I'm going to tell them that it's game over, but it's going to be some sort of creative version

3375
00:15:36,670 --> 00:15:37,550
of game over.

3376
00:15:37,570 --> 00:15:41,440
So maybe something like it's a room full of fire.

3377
00:15:41,470 --> 00:15:42,280
Game over.

3378
00:15:42,760 --> 00:15:49,180
If they chose yellow, on the other hand, well, that's going to be the room where the treasure exists.

3379
00:15:49,180 --> 00:15:50,590
So I'm going to print.

3380
00:15:50,920 --> 00:15:51,790
You found the treasure.

3381
00:15:51,790 --> 00:15:52,480
You win.

3382
00:15:52,780 --> 00:15:57,130
If they chose blue, they also end up with game over.

3383
00:15:57,190 --> 00:16:00,400
And I have to give them a different reason.

3384
00:16:00,970 --> 00:16:07,780
Now, if you had decided that if they chose anything but yellow, the way that they're going to game

3385
00:16:07,780 --> 00:16:09,400
over is the same.

3386
00:16:09,400 --> 00:16:12,860
Say, if you if you chose red, it's a room full of fire.

3387
00:16:12,880 --> 00:16:13,420
Game over.

3388
00:16:13,420 --> 00:16:15,450
If you chose blue, it's a room full of fire.

3389
00:16:15,460 --> 00:16:16,350
Game over.

3390
00:16:16,360 --> 00:16:17,380
Anything else.

3391
00:16:17,380 --> 00:16:19,920
It's also going to be fire game over.

3392
00:16:19,930 --> 00:16:22,600
Well, then you could just use if and else.

3393
00:16:22,600 --> 00:16:28,690
But if you wanted each choice or each door to have a different outcome for the user, say the red door

3394
00:16:28,690 --> 00:16:31,030
has fire, the blue door has beasts.

3395
00:16:31,030 --> 00:16:37,870
And if they chose the wrong door, then they're going to get something like you chose a door that doesn't

3396
00:16:37,870 --> 00:16:38,380
exist.

3397
00:16:38,380 --> 00:16:39,310
Game over.

3398
00:16:39,610 --> 00:16:47,650
So can you see that depending on whether if you want to give the user a different print statement based

3399
00:16:47,650 --> 00:16:51,400
on their choice, then you would use if elif else.

3400
00:16:51,400 --> 00:16:57,160
But if you actually just wanted to give them the same feedback, which is game over, then you could

3401
00:16:57,160 --> 00:16:58,900
just use if and else.

3402
00:16:59,500 --> 00:17:03,240
Now let's run our game and just make sure that it works.

3403
00:17:03,250 --> 00:17:10,869
So I'm going to go left because I know it continues and then I'm going to wait for the boat and that

3404
00:17:10,869 --> 00:17:13,180
allows me to get to the final condition.

3405
00:17:13,180 --> 00:17:15,790
And if I choose yellow, I know that I'll win.

3406
00:17:15,940 --> 00:17:21,849
Now, if you want to change the formatting, because having the input at the end of the sentence doesn't

3407
00:17:21,849 --> 00:17:27,040
look as good as letting the user type it on a new line like what we've got here.

3408
00:17:27,369 --> 00:17:34,840
Then you can simply, if you remember, just add the new line, which is backslash n at the end of your

3409
00:17:34,840 --> 00:17:35,620
inputs.

3410
00:17:36,700 --> 00:17:37,750
Like so.

3411
00:17:38,320 --> 00:17:41,290
So how did you get on with this challenge?

3412
00:17:41,290 --> 00:17:44,620
And if you didn't manage to do it right or if you've done it right.

3413
00:17:44,710 --> 00:17:47,010
Go back and try and modify it.

3414
00:17:47,020 --> 00:17:53,410
See if you can add some more conditions or see if you can make the game over messages a little bit more

3415
00:17:53,410 --> 00:17:55,030
interesting than what I've written.

3416
00:17:55,060 --> 00:17:58,300
See if you can modify and make it really your own.

3417
00:17:58,660 --> 00:17:59,830
Have fun with that.

3418
00:17:59,830 --> 00:18:05,380
And in the next lesson, I've got more exciting things coming up for you, so hopefully you've schedule

3419
00:18:05,380 --> 00:18:09,550
some time for tomorrow to complete the next day's lessons.

3420
00:18:09,550 --> 00:18:11,680
But for now, it's Goodnight for me.


3421
00:00:00,520 --> 00:00:03,610
Hey guys, welcome back to 100 Days of Code.

3422
00:00:03,910 --> 00:00:05,650
Today is day 4,

3423
00:00:05,860 --> 00:00:10,060
and we're going to be focusing on randomization in Python,

3424
00:00:10,420 --> 00:00:12,850
and we're going to be learning about Python lists.

3425
00:00:13,270 --> 00:00:17,590
Now randomization in any sort of programming language is really,

3426
00:00:17,590 --> 00:00:20,770
really useful because if we want to create a game,

3427
00:00:20,770 --> 00:00:24,040
if we want a program to do something different each time,

3428
00:00:24,400 --> 00:00:27,730
then we need to introduce a little bit of randomness, right?

3429
00:00:28,120 --> 00:00:32,380
So we're going to be looking at using the random module in order to achieve

3430
00:00:32,380 --> 00:00:35,050
this. And by the end of today,

3431
00:00:35,080 --> 00:00:39,640
you will have learned enough to be able to build this Rock-paper-scissors game.

3432
00:00:40,150 --> 00:00:45,150
So it starts out asking you, the user, type 0 for rock, 1 for paper or 2

3433
00:00:45,970 --> 00:00:49,450
for scissors. So I'm going to go forward with 0 for rock.

3434
00:00:50,080 --> 00:00:54,160
And it shows me using ASCII art that this is what I chose, rock.

3435
00:00:54,610 --> 00:00:59,500
And then the computer chose scissors and rock beats scissors. So I win.

3436
00:01:00,010 --> 00:01:02,230
Now you can run this as many times as you want.

3437
00:01:02,620 --> 00:01:06,460
If I choose paper and the computer chooses rocks, then I win.

3438
00:01:06,760 --> 00:01:10,390
If I choose paper and the computer chooses paper than it is a draw.

3439
00:01:10,960 --> 00:01:15,160
But if I choose paper and the computer chooses scissors, then I lose.

3440
00:01:15,610 --> 00:01:17,140
So this is a pretty simple game,

3441
00:01:17,590 --> 00:01:20,710
but we're going to get the computer to play this game with us.

3442
00:01:20,890 --> 00:01:25,840
And we're going to do that by learning about randomization, lists and a whole lot

3443
00:01:25,840 --> 00:01:27,190
more. I hope you're ready.

3444
00:01:27,520 --> 00:01:31,600
And once you are, then head over to the next lesson, and let's get started.

3445
00:00:00,250 --> 00:00:03,910
One of the first things I want to talk about is randomisation.

3446
00:00:04,390 --> 00:00:07,930
And this is a concept that we're super familiar with.

3447
00:00:08,530 --> 00:00:10,690
Randomization is really,

3448
00:00:10,690 --> 00:00:14,890
really important when we want to create computer programs that have a degree of

3449
00:00:14,950 --> 00:00:19,540
unpredictability. Now, the biggest category of that is, of course, games right?

3450
00:00:19,840 --> 00:00:23,440
Can you imagine if you had to play Tetris and every single time,

3451
00:00:23,440 --> 00:00:25,780
the block that fell down was like predictable.

3452
00:00:26,020 --> 00:00:30,430
You always knew that it was going to be a T and then it was going to be an L

3453
00:00:30,460 --> 00:00:32,439
like, there would be no fun in that right?

3454
00:00:32,770 --> 00:00:37,770
So how do we create this randomness for our programs? Now in nature and in our

3455
00:00:38,950 --> 00:00:42,460
everyday lives, it's really easy to create randomness.

3456
00:00:42,760 --> 00:00:46,480
If you splash some paint on a canvas, that's going to be pretty random.

3457
00:00:46,600 --> 00:00:51,340
If you take a look at the TV static from the analog TVs,

3458
00:00:51,610 --> 00:00:53,890
that's also a whole bunch of randomness there.

3459
00:00:54,370 --> 00:00:56,440
But when we're talking about computers,

3460
00:00:56,740 --> 00:01:00,670
then these machines are what we would call deterministic.

3461
00:01:00,910 --> 00:01:05,910
They will perform repeatable actions in a fully predictable way.

3462
00:01:06,400 --> 00:01:11,400
So how do we wrangle these machines that operate basically on ones and zeros to

3463
00:01:11,920 --> 00:01:15,280
get them to create some random numbers? Well,

3464
00:01:15,280 --> 00:01:19,150
there's a whole bunch of maths that can be applied to create what are called a

3465
00:01:19,180 --> 00:01:21,490
pseudo-random number generators.

3466
00:01:21,910 --> 00:01:25,420
And the one that Python uses is something called the Mersenne Twister.

3467
00:01:25,900 --> 00:01:28,180
And if you really want to read about it,

3468
00:01:28,210 --> 00:01:32,020
then you can have a look on Wikipedia and take a look under the algorithmic

3469
00:01:32,020 --> 00:01:36,310
detail. But to be honest, it's a little bit too much information for anybody,

3470
00:01:36,670 --> 00:01:41,050
unless you're really interested in these types of number generators.

3471
00:01:41,560 --> 00:01:43,000
But what I recommend though,

3472
00:01:43,000 --> 00:01:47,980
is a free video from the Khan Academy where they explain pseudorandom number

3473
00:01:47,980 --> 00:01:50,950
generators, and it's really well produced.

3474
00:01:50,980 --> 00:01:55,980
And it tells you a lot of different aspects of pseudorandom number generation.

3475
00:01:57,010 --> 00:01:57,790
Have a look at that

3476
00:01:57,790 --> 00:02:02,020
if you're interested to learn a little bit more about pseudorandom number

3477
00:02:02,020 --> 00:02:05,650
generators. We've talked a lot about randomness,

3478
00:02:05,710 --> 00:02:07,180
but lets see it in action.

3479
00:02:07,210 --> 00:02:11,980
Let's write some code and produce some random numbers. Head over to the Day 4

3480
00:02:11,980 --> 00:02:15,340
starting Repl and then go ahead and fork your own copy.

3481
00:02:15,760 --> 00:02:18,970
We know that we want to get hold of some random numbers,

3482
00:02:19,300 --> 00:02:23,950
but we don't really want to implement the Mersenne Twister ourselves because

3483
00:02:24,220 --> 00:02:28,480
it's horrendously complicated using lots and lots of math and probably it'll

3484
00:02:28,480 --> 00:02:33,250
take us months to write the code for. So how can we get random numbers?

3485
00:02:33,880 --> 00:02:37,870
If you think about it, it's a little bit like searching for something in Google.

3486
00:02:38,530 --> 00:02:43,530
The Google algorithm is horrendously complicated and it's taken them years and

3487
00:02:43,660 --> 00:02:48,370
years to refine and perfect to such an extent where I think Google knows me

3488
00:02:48,370 --> 00:02:50,980
better than myself because when I search for something,

3489
00:02:50,980 --> 00:02:53,410
it always gives me the most relevant results.

3490
00:02:53,920 --> 00:02:57,760
And if you're questioning the complexity of the Google algorithm,

3491
00:02:58,090 --> 00:03:02,980
just go to Bing and try searching for something and see how relevant the results

3492
00:03:02,980 --> 00:03:06,100
are. So they have the super complex algorithm,

3493
00:03:06,130 --> 00:03:09,340
which we're never going to get a chance to see, let alone understand.

3494
00:03:09,850 --> 00:03:14,850
And yet every day we're able to search things on Google and use this Google

3495
00:03:15,100 --> 00:03:17,680
algorithm to get the things that we want,

3496
00:03:18,010 --> 00:03:21,640
like the air speed velocity of a laden swallow.

3497
00:03:22,240 --> 00:03:26,920
Now we can do the same thing when we want to generate random numbers. Because

3498
00:03:26,920 --> 00:03:29,410
this is such frequently needed functionality,

3499
00:03:29,710 --> 00:03:33,190
the Python team have already created a random module.

3500
00:03:33,700 --> 00:03:38,700
So if you head over to askpython.com and search for the Python random module,

3501
00:03:39,100 --> 00:03:42,700
then you'll be able to see the documentation for this random module.

3502
00:03:43,180 --> 00:03:46,750
And you can see that it contains a whole bunch of functions that you can use

3503
00:03:47,170 --> 00:03:50,110
that allows you to generate random integers,

3504
00:03:50,110 --> 00:03:53,650
so random whole numbers or random floating point numbers.

3505
00:03:54,040 --> 00:03:59,040
So let's see how we can tap into this random module. In order to tap into the

3506
00:03:59,260 --> 00:04:02,410
random module, we first have to import it.

3507
00:04:02,440 --> 00:04:07,440
So we write import random. And now we're able to use this random module in our

3508
00:04:10,000 --> 00:04:11,800
main.py code.

3509
00:04:12,580 --> 00:04:17,470
We can start using the documentation to generate a random integer. For example,

3510
00:04:17,709 --> 00:04:22,710
they show us in the code snippet here that we could generate a random integer by

3511
00:04:23,320 --> 00:04:27,430
using the randint function, providing an a and B.

3512
00:04:27,850 --> 00:04:31,480
And it will return a random integer between a and b,

3513
00:04:31,630 --> 00:04:33,700
including both of those numbers.

3514
00:04:34,150 --> 00:04:37,390
And there's even a little bit of code snippet to show us how it's done.

3515
00:04:37,720 --> 00:04:42,720
So this line of code generates a random whole number between 100 and 200 and

3516
00:04:44,110 --> 00:04:48,310
including those two numbers. So it could be anything between those two numbers.

3517
00:04:49,060 --> 00:04:51,340
So let's see if we can implement this in our code.

3518
00:04:51,820 --> 00:04:56,820
Let's say that we want to create a random integer and we use the same code that

3519
00:04:56,950 --> 00:04:59,650
we saw in the code snippet where we say random,

3520
00:04:59,890 --> 00:05:04,600
that's tapping into this module here, .randint.

3521
00:05:04,960 --> 00:05:09,960
And then we at a set of parentheses and then we specify the start, and

3522
00:05:10,360 --> 00:05:11,350
then the end.

3523
00:05:11,830 --> 00:05:16,830
So this is basically a range of numbers that we're specifying, any integer

3524
00:05:16,960 --> 00:05:18,670
between 1 and 10.

3525
00:05:19,480 --> 00:05:24,480
And now we can go ahead and print our random integer, just like that.

3526
00:05:26,050 --> 00:05:28,060
And every single time I run it,

3527
00:05:28,330 --> 00:05:32,050
you'll notice that I'll get a different number or maybe sometimes the same,

3528
00:05:32,140 --> 00:05:35,650
but it's a random number between the range that I've specified.

3529
00:05:37,000 --> 00:05:41,890
Now I've mentioned that the random module is a Python module.

3530
00:05:41,980 --> 00:05:44,860
So what exactly is a module? Well,

3531
00:05:44,890 --> 00:05:49,480
you've seen that we've mostly been writing our code all on the same page in a

3532
00:05:49,480 --> 00:05:50,920
sort of script style, right?

3533
00:05:50,920 --> 00:05:53,980
And everything just kind of gets executed from top to bottom.

3534
00:05:54,460 --> 00:05:58,490
But sometimes your code will get so long because you're trying to create

3535
00:05:58,490 --> 00:06:03,490
something complicated and it's no longer possible to understand what's going on

3536
00:06:03,620 --> 00:06:06,140
in such a large piece of code.

3537
00:06:06,650 --> 00:06:11,650
What people will do in that case is to split the code up into individual modules

3538
00:06:13,190 --> 00:06:18,190
where each module is responsible for a different bit of functionality of your

3539
00:06:18,380 --> 00:06:22,430
program. And if you have a complex project with many, many modules,

3540
00:06:22,700 --> 00:06:25,520
then you could have collaboration on your project, right?

3541
00:06:25,550 --> 00:06:29,630
Lots of people could be working on it, each person working on a different thing.

3542
00:06:29,990 --> 00:06:31,820
Say if a factory was building a car,

3543
00:06:32,150 --> 00:06:36,260
it wouldn't make sense for one person to build the entire car from wheels,

3544
00:06:36,260 --> 00:06:38,810
axles to chassis, that's crazy.

3545
00:06:38,960 --> 00:06:43,220
Instead you have different people working on different modules like the tire

3546
00:06:43,220 --> 00:06:47,000
module or the chassis module or the engine module.

3547
00:06:47,420 --> 00:06:49,220
And then once they put everything together,

3548
00:06:49,490 --> 00:06:53,990
you end up with the final car or in our case, the final program.

3549
00:06:54,740 --> 00:06:59,570
So we know that the random module is a module that the Python team created to

3550
00:06:59,570 --> 00:07:04,570
make it easier for us to generate our random numbers without needing to get into

3551
00:07:04,850 --> 00:07:09,850
the complexities of all of the math that's required to generate pseudorandom

3552
00:07:09,920 --> 00:07:10,753
numbers.

3553
00:07:10,970 --> 00:07:15,080
But how can we create our own modules and how do modules work anyways?

3554
00:07:15,260 --> 00:07:19,430
Well, it's actually very simple. If you go ahead and click on the files icon,

3555
00:07:19,490 --> 00:07:23,120
you can see, we currently only have one file that we're writing in,

3556
00:07:23,420 --> 00:07:25,100
which is main.py,

3557
00:07:25,130 --> 00:07:29,150
the Python file. And the main.py is the entry point to our program.

3558
00:07:29,300 --> 00:07:33,590
This is the file that will be executed when we run our code. Now,

3559
00:07:33,590 --> 00:07:37,100
if I go ahead and click on this icon to add a new file,

3560
00:07:37,490 --> 00:07:42,490
let's say I call it my_module.py and I create a new Python file.

3561
00:07:45,650 --> 00:07:50,270
And inside my module, I'm going to maybe work on something else.

3562
00:07:50,300 --> 00:07:53,270
Let's say I want into the store, the value of PI.

3563
00:07:55,850 --> 00:07:57,260
Okay. I think that's all I remember.

3564
00:07:57,680 --> 00:08:02,360
So I know the value of PI and I want to be able to use it in my different

3565
00:08:02,360 --> 00:08:06,080
programs. Now that I've created my_module.py, well,

3566
00:08:06,080 --> 00:08:11,080
now I can use my module wherever I want just by importing it. So I could import

3567
00:08:13,250 --> 00:08:17,480
my_module. And now down here, I can say,

3568
00:08:17,900 --> 00:08:22,900
let's go ahead and print my_module.pi.

3569
00:08:24,440 --> 00:08:28,610
And now if I go ahead and comment out of this code and hit run,

3570
00:08:29,060 --> 00:08:29,810
then you'll see,

3571
00:08:29,810 --> 00:08:34,809
we get that value of PI that got dragged in because I imported my module,

3572
00:08:35,780 --> 00:08:40,370
but now we've got our code separated out into separate modules that are

3573
00:08:40,370 --> 00:08:42,110
responsible for different things.

3574
00:08:42,650 --> 00:08:46,460
And that is how the random module works as well.

3575
00:08:46,880 --> 00:08:51,590
So I'm going to go ahead and delete all of this stuff relating to PI,

3576
00:08:51,890 --> 00:08:55,500
but you can keep yours if you want, if you wanna keep it for reference.

3577
00:08:57,390 --> 00:08:59,910
Coming back to creating random numbers.

3578
00:09:00,300 --> 00:09:03,840
We've seen how we can create random whole numbers,

3579
00:09:04,080 --> 00:09:08,730
but what if I wanted to create a random floating point number? Well,

3580
00:09:08,730 --> 00:09:12,390
it tells me how to do it in the AskPython documentation.

3581
00:09:12,780 --> 00:09:17,780
And all I have to do is use the random module that contains the random function

3582
00:09:18,180 --> 00:09:23,180
and it will return a random floating-point number between 0 and 1.

3583
00:09:24,480 --> 00:09:29,130
But it's really important to note that in this case it doesn't actually include

3584
00:09:29,130 --> 00:09:34,050
1. So it goes up to like 0.9999999, but not including 1.

3585
00:09:34,590 --> 00:09:36,150
Let's go ahead and try that out.

3586
00:09:36,510 --> 00:09:41,190
So we'll say random_float = random.random

3587
00:09:41,250 --> 00:09:45,990
and then I set of parentheses. And this will give me output some sort of number

3588
00:09:46,320 --> 00:09:50,040
in the interval between 0 and 1, but not including 1.

3589
00:09:50,910 --> 00:09:53,430
So let's go ahead and see if it works.

3590
00:09:56,820 --> 00:09:57,210
First,

3591
00:09:57,210 --> 00:10:01,650
we print a random integer between 1 and 10 and then we print our random float

3592
00:10:01,710 --> 00:10:06,210
between 0 and 1. And every time we run the code,

3593
00:10:06,240 --> 00:10:09,210
you'll notice that we get different random numbers.

3594
00:10:10,290 --> 00:10:11,610
Now here's a question.

3595
00:10:12,420 --> 00:10:17,420
This random function always generates a number between 0 and 1 and it has

3596
00:10:18,210 --> 00:10:19,560
many decimal places.

3597
00:10:20,160 --> 00:10:25,050
But what if I wanted a random floating-point number between 0 and 5?

3598
00:10:25,980 --> 00:10:28,620
How might we do that? Now

3599
00:10:28,680 --> 00:10:33,510
it's not as complicated as you think it is and you'll be able to do it just by

3600
00:10:33,510 --> 00:10:35,190
looking at the code you've got here.

3601
00:10:35,880 --> 00:10:39,210
Have a think about it and see if you can come up with the answer.

3602
00:10:39,330 --> 00:10:42,420
I'll go through it with you afterwards. Pause the video now and give that a go.

3603
00:10:44,430 --> 00:10:44,850
All right.

3604
00:10:44,850 --> 00:10:49,850
So we know that this random float can be anything between 

3605
00:10:50,230 --> 00:10:51,300
0.000000

3606
00:10:51,370 --> 00:10:56,370
to 0.999999..., effectively repeating right? Now

3607
00:10:58,050 --> 00:11:03,050
what if we were able to multiply this random number by a number?

3608
00:11:05,970 --> 00:11:10,620
Let's say that I multiply the random_float by 5.

3609
00:11:11,310 --> 00:11:15,150
Well, what if this random_float was no 0.1? Well,

3610
00:11:15,180 --> 00:11:19,050
0.1 times 5 would be 0.5.

3611
00:11:20,070 --> 00:11:25,070
But what if the random_float was 0.4? 0.4 times 5 would be 2.

3612
00:11:28,290 --> 00:11:30,090
Or what if it was 0.9?

3613
00:11:30,120 --> 00:11:33,330
0.9 times five is 4.5.

3614
00:11:33,840 --> 00:11:38,840
So effectively by multiplying this random_float by 5,

3615
00:11:39,840 --> 00:11:42,540
I will end up with random numbers,

3616
00:11:42,810 --> 00:11:46,920
but of course they're now floats, right? So it could be 0.000

3617
00:11:46,920 --> 00:11:50,940
... all the way to 4.999999

3618
00:11:51,360 --> 00:11:53,010
and et cetera, et cetera.

3619
00:11:53,410 --> 00:11:58,410
So this is how we can expand that range from 0 to 1 all the way to 0 to

3620
00:11:59,650 --> 00:12:02,050
5, but not including 5.

3621
00:12:03,130 --> 00:12:05,950
So what can you do with random numbers? Well,

3622
00:12:06,010 --> 00:12:10,870
if we think back to our love calculator that we made in the last lesson,

3623
00:12:11,380 --> 00:12:15,070
um, I mean, its kind of based on pseudo-science right?

3624
00:12:15,070 --> 00:12:20,050
Like just because you have a certain number of letters that exist in the word

3625
00:12:20,050 --> 00:12:20,890
true and love,

3626
00:12:20,890 --> 00:12:24,160
it doesn't mean that you're actually going to be more compatible.

3627
00:12:24,950 --> 00:12:29,590
I'm sorry to break anyone's heart out there. But if it's random anyways,

3628
00:12:29,620 --> 00:12:34,270
then why don't we just use a random number generator saving ourselves all of

3629
00:12:34,270 --> 00:12:37,510
that trouble from counting Ts and counting Us.

3630
00:12:37,900 --> 00:12:42,900
We can instead just simply say love_score =  random.randint between

3631
00:12:47,830 --> 00:12:52,830
1 and 100. And then go ahead and just print "Your love score is",

3632
00:12:56,620 --> 00:13:01,420
and then let's insert our love score and turn this into an Fstring.

3633
00:13:02,230 --> 00:13:06,310
Let's print that. And you can see that we're getting a different love score

3634
00:13:06,340 --> 00:13:10,540
every single time I run this code. It's between 1 and a hundred

3635
00:13:10,660 --> 00:13:12,400
and you know,

3636
00:13:12,520 --> 00:13:16,300
who can tell that this is any different from the previous method, right?

3637
00:13:16,660 --> 00:13:21,490
So we can use our random number generator for this. We can use it for,

3638
00:13:21,520 --> 00:13:22,180
um,

3639
00:13:22,180 --> 00:13:27,180
creating a dice or flipping a coin or we can use it in games that we create.

3640
00:13:28,540 --> 00:13:33,010
If you head over to the next lesson, I've got a code challenge for you

3641
00:13:33,310 --> 00:13:37,990
where you are going to be building a program in order to pick from heads or

3642
00:13:37,990 --> 00:13:42,990
tails and help the user out when they don't have access to a coin. For all of

3643
00:13:43,030 --> 00:13:45,280
that and more, I'll see you on the next lesson.

3644
00:00:01,240 --> 00:00:07,990
Now, if you head over to the course resources, you'll be able to find a link to this first code exercise.

3645
00:00:08,560 --> 00:00:15,010
And the idea is that you're going to create basically a virtual coin-toss program so that when you run

3646
00:00:15,010 --> 00:00:21,360
the code, it should give you tails or heads depending on which random number was generated.

3647
00:00:22,310 --> 00:00:26,280
Try to use what you've learned in the previous lesson to complete this challenge.

3648
00:00:26,680 --> 00:00:28,810
So pause the video now and give that a go.

3649
00:00:30,050 --> 00:00:32,270
All right, let's go through the solution together.

3650
00:00:32,870 --> 00:00:39,110
So first, make sure you've forked your copy of the exercise so that it's under your own username, and

3651
00:00:39,110 --> 00:00:42,490
then we're going to go to main.py where we always write our code.

3652
00:00:43,160 --> 00:00:46,850
Now, in order to use the random module, we first have to import it.

3653
00:00:47,780 --> 00:00:49,370
So the module is called random.

3654
00:00:49,370 --> 00:00:57,710
So we write import random. And now using the random module, we can now tap into randint, which will

3655
00:00:57,710 --> 00:01:03,580
generate a random integer between a starting number and a ending number

3656
00:01:03,830 --> 00:01:06,290
and it's inclusive of both numbers.

3657
00:01:06,860 --> 00:01:10,250
So let's call this the random_side.

3658
00:01:12,030 --> 00:01:18,150
And using this random_side, we can use an if statement to check well if the random side that was

3659
00:01:18,150 --> 00:01:26,490
generated is equal to one, well, in that case, that means we should print that we generated heads.

3660
00:01:26,760 --> 00:01:29,880
So that's the part of the coin which normally shows a person's face.

3661
00:01:30,600 --> 00:01:38,440
Now we can use else to catch the situation where we get a zero, and in this case, we'll print tails instead.

3662
00:01:39,180 --> 00:01:41,040
So that's all there is to it.

3663
00:01:41,220 --> 00:01:45,710
And of course, as always, there are many, many ways that you could solve this challenge.

3664
00:01:45,960 --> 00:01:50,430
And if you're creative or if you looked around and you found a different way, then that's great.

3665
00:01:50,610 --> 00:01:54,510
But this is how we would do it using what we learned in the previous lesson.

3666
00:01:55,410 --> 00:02:00,570
So how did you get on with it? If you got stuck or if you forgot how to do certain things or if some

3667
00:02:00,570 --> 00:02:06,720
parts of your code didn't work or if you had errors, then this is the time to go back and fix it so

3668
00:02:06,720 --> 00:02:09,690
that you actually understand what's going on and we can proceed.

3669
00:02:09,990 --> 00:02:12,420
So once you're done, head over to the next lesson

3670
00:02:12,420 --> 00:02:15,300
and we're going to learn about Python lists.

3671
00:00:00,160 --> 00:00:04,480
Hey guys. Today I want to talk about something that is really, really important

3672
00:00:04,510 --> 00:00:07,150
and you're going to use many, many times in the future,

3673
00:00:07,570 --> 00:00:10,570
and this is the concept of the Python list.

3674
00:00:11,140 --> 00:00:15,520
And the list is what you would call a data structure.

3675
00:00:15,880 --> 00:00:17,170
What does that mean? Well,

3676
00:00:17,200 --> 00:00:21,910
it's just a way of organizing and storing data in Python.

3677
00:00:22,540 --> 00:00:27,370
Now we've already seen ways of storing single pieces of data,

3678
00:00:27,760 --> 00:00:32,759
and that was done through the simple variable where we just said a =

3679
00:00:33,250 --> 00:00:35,680
3 or b = hello.

3680
00:00:35,920 --> 00:00:40,900
But that's just storing one piece of data, right? Be it a number or a string.

3681
00:00:41,650 --> 00:00:45,370
But sometimes you might want to store grouped pieces of data,

3682
00:00:45,460 --> 00:00:49,690
data that has some sort of connection with each other. For example,

3683
00:00:49,750 --> 00:00:54,750
if you wanted to store all of the names of the States in the US then it doesn't

3684
00:00:55,240 --> 00:00:59,710
really make sense to store them all individually because they kind of belong

3685
00:00:59,710 --> 00:01:02,140
together, right? They have a relationship to each other.

3686
00:01:02,470 --> 00:01:06,970
So it would be nice if you had a variable that was called States_in_the_US and

3687
00:01:06,970 --> 00:01:10,990
then you would be able to store all of the names of the States together in one

3688
00:01:10,990 --> 00:01:13,900
variable. Now, in other cases,

3689
00:01:13,960 --> 00:01:18,790
you might also want to have order in your data. So for example,

3690
00:01:19,000 --> 00:01:22,930
if you were storing all of the people in a virtual queue,

3691
00:01:23,230 --> 00:01:27,370
then you want to be able to keep hold of the order in which they join the queue.

3692
00:01:27,760 --> 00:01:31,330
You don't wanna let the last person somehow skip the queue because you don't

3693
00:01:31,330 --> 00:01:33,100
have a good data structure, right?

3694
00:01:33,760 --> 00:01:38,760
This is why we need to learn about lists. And lists look pretty simple.

3695
00:01:38,950 --> 00:01:43,480
It's just a set of square brackets with many items stored inside.

3696
00:01:43,570 --> 00:01:47,820
And those items can be any data type. They can even have mixed data types like

3697
00:01:47,820 --> 00:01:52,000
you could store strings together with numbers or a set of booleans.

3698
00:01:52,330 --> 00:01:53,500
It doesn't really matter.

3699
00:01:53,620 --> 00:01:58,620
But what does matter is the syntax. In Python lists always start with a open

3700
00:01:59,980 --> 00:02:04,900
square bracket like this and a closing square bracket like this.

3701
00:02:05,410 --> 00:02:09,009
And then in between you have your items separated by a comma.

3702
00:02:09,280 --> 00:02:13,570
So pretty simple. In order to store it inside the variable,

3703
00:02:13,750 --> 00:02:15,730
then its the same way as we've done before.

3704
00:02:16,150 --> 00:02:19,360
The only difference is the right hand side of the equal sign.

3705
00:02:19,780 --> 00:02:22,300
This is the list data structure.

3706
00:02:23,170 --> 00:02:25,690
If we stored a bunch of fruits, for example,

3707
00:02:25,750 --> 00:02:28,240
than it might look something like this: Cherry,

3708
00:02:28,240 --> 00:02:32,410
Apple, Pear, separated by a comma inside a set of square brackets.

3709
00:02:32,920 --> 00:02:35,170
Let's take a look at this using real code.

3710
00:02:35,590 --> 00:02:40,300
Now I'm going to go ahead and comment out the code from our previous lesson on

3711
00:02:40,330 --> 00:02:41,163
randomness

3712
00:02:41,500 --> 00:02:45,790
and you can do the same if you wanna keep a note of the previous code and use it

3713
00:02:45,790 --> 00:02:49,870
as sort of a live textbook where you can comment out of the code or comment it

3714
00:02:49,870 --> 00:02:52,990
back in in order to see how it works or you can delete it.

3715
00:02:53,140 --> 00:02:54,280
It's totally up to you.

3716
00:02:55,030 --> 00:02:59,710
Now let's say that I wanted to store all of the names of the States of US.

3717
00:03:00,160 --> 00:03:03,520
Previously, without knowing about this list data structure,

3718
00:03:03,820 --> 00:03:07,450
we might've written state1 = Delaware,

3719
00:03:08,530 --> 00:03:13,530
state2 = Pennsylvania and so on and so forth.

3720
00:03:13,720 --> 00:03:16,840
And we would create as many variables as we have States.

3721
00:03:17,470 --> 00:03:19,720
But now that we know about lists,

3722
00:03:20,080 --> 00:03:25,080
then we can just create a single variable and we call it states_of_america.

3723
00:03:26,680 --> 00:03:31,680
And now we can create a list by creating a set of square brackets and inside

3724
00:03:32,230 --> 00:03:35,560
those square brackets, we add our items. So again,

3725
00:03:35,620 --> 00:03:38,710
the first item is the state of Delaware,

3726
00:03:38,740 --> 00:03:42,880
which is going to be a string and then we've got Pennsylvania,

3727
00:03:43,570 --> 00:03:47,710
et cetera, et cetera. And we can continue this list just by adding commas,

3728
00:03:48,160 --> 00:03:52,450
adding a piece of data, adding another comma, adding piece of data.

3729
00:03:52,900 --> 00:03:57,430
And this way we end up with a list data structure.

3730
00:03:58,390 --> 00:03:58,630
Now,

3731
00:03:58,630 --> 00:04:03,630
one of the interesting things about the United States is that the different

3732
00:04:03,820 --> 00:04:08,530
States in the US actually joined the union at different times.

3733
00:04:08,890 --> 00:04:13,630
You can actually head over to Wikipedia and watch this little animation and see

3734
00:04:13,780 --> 00:04:18,490
each state join the union and at which time point they did

3735
00:04:18,490 --> 00:04:23,490
so. The order of this data is now kind of pretty important because if we wanted

3736
00:04:25,960 --> 00:04:30,960
a list of US States that are in the order that they joined the union,

3737
00:04:31,930 --> 00:04:36,930
then the order in which they're stored in our data structure is now also

3738
00:04:37,660 --> 00:04:39,010
immensely important.

3739
00:04:39,520 --> 00:04:42,700
And this is another thing that you get with lists.

3740
00:04:43,120 --> 00:04:47,590
You can use a list to store many pieces of related data,

3741
00:04:48,010 --> 00:04:50,770
but they also have an order.

3742
00:04:50,950 --> 00:04:54,760
And the order is determined by the order in the list.

3743
00:04:55,120 --> 00:04:59,050
So this is the first piece of data, this is the second piece of data.

3744
00:04:59,380 --> 00:05:01,270
And when you store it inside the variable,

3745
00:05:01,480 --> 00:05:06,340
that order is not lost and you'll be able to use it later on when you need the

3746
00:05:06,340 --> 00:05:07,173
list.

3747
00:05:07,510 --> 00:05:12,510
Here's a list of States of America ordered by the date that they joined the

3748
00:05:14,110 --> 00:05:17,680
union. And you can see that if later on,

3749
00:05:17,680 --> 00:05:22,420
I decided that I wanted to know which was the state that joined first,

3750
00:05:22,480 --> 00:05:25,420
then I can print this variable states_of_america.

3751
00:05:25,810 --> 00:05:28,270
I can add a set of square brackets,

3752
00:05:28,660 --> 00:05:32,590
and then I type zero as the index of the piece of data

3753
00:05:32,620 --> 00:05:35,860
I want to pull out from my states_of_america list.

3754
00:05:36,250 --> 00:05:40,660
So now if I go ahead and run this code, you can see it prints out Delaware.

3755
00:05:40,930 --> 00:05:43,090
And if I keep increasing this number,

3756
00:05:43,390 --> 00:05:48,190
you can see that it's going through my list in the order that it was saved.

3757
00:05:48,880 --> 00:05:50,770
So you might be wondering,

3758
00:05:51,010 --> 00:05:55,930
that's kind of weird that you typed zero and you got Delaware,

3759
00:05:55,930 --> 00:06:00,200
right? Surely, Delaware should be the first item in the list.

3760
00:06:00,830 --> 00:06:05,720
Well, this is a kind of peculiarity with computers and programming languages.

3761
00:06:06,080 --> 00:06:10,520
You'll tend to find that programmers start counting from zero.

3762
00:06:10,700 --> 00:06:14,240
So Delaware is at zero, Pennsylvania is at one and New Jersey is at two.

3763
00:06:14,870 --> 00:06:17,570
And this idea, it might seem a little bit weird at first,

3764
00:06:17,600 --> 00:06:21,170
why is the first item at position 0?

3765
00:06:21,860 --> 00:06:26,030
But if you think about that index number, that 0, 1 or 2,

3766
00:06:26,720 --> 00:06:28,910
instead of being the position,

3767
00:06:29,330 --> 00:06:34,330
actually being an offset or a shift from the start of the list.

3768
00:06:35,810 --> 00:06:40,520
Well then in this case, Cherry is right at the beginning of the list,

3769
00:06:40,520 --> 00:06:44,030
so it has a offset or a shift of 0.

3770
00:06:44,540 --> 00:06:49,540
But Apple is shifted from the beginning by 1, Pear shifted from the beginning

3771
00:06:49,790 --> 00:06:52,100
by 2 and so on and so forth.

3772
00:06:52,400 --> 00:06:56,240
Then it kind of makes more sense that the first item in the list is at the

3773
00:06:56,240 --> 00:06:59,480
beginning of the list. So it has no offset. So it's 0.

3774
00:07:00,770 --> 00:07:03,410
And you'll find that in many, many programming languages,

3775
00:07:03,680 --> 00:07:05,960
there are similar data structures to lists

3776
00:07:06,230 --> 00:07:10,760
and this is how they're usually ordered starting from 0 and then adding by

3777
00:07:10,760 --> 00:07:11,593
1.

3778
00:07:11,900 --> 00:07:16,400
Now you can see that when you want to get hold of a particular piece of data

3779
00:07:16,670 --> 00:07:18,830
stored inside a list,

3780
00:07:19,190 --> 00:07:24,190
what you do is you get the name of the list and then you add another set of

3781
00:07:25,340 --> 00:07:28,250
square brackets. So whenever you see square brackets,

3782
00:07:28,520 --> 00:07:30,200
you should be thinking to yourself, oh,

3783
00:07:30,230 --> 00:07:34,850
this might be related to a list because when you create the list,

3784
00:07:34,880 --> 00:07:39,260
you use square brackets. And when you try to get items out of the list,

3785
00:07:39,320 --> 00:07:40,820
you also use square brackets.

3786
00:07:41,420 --> 00:07:45,860
And then inside of the square brackets is where you put the index or the offset

3787
00:07:45,950 --> 00:07:49,490
of the item that you want. So if we wanted New Jersey,

3788
00:07:49,490 --> 00:07:52,340
it's offset from the beginning by one two.

3789
00:07:52,790 --> 00:07:56,990
So now this part of the code is equal to New Jersey.

3790
00:07:57,530 --> 00:07:58,280
And we could,

3791
00:07:58,280 --> 00:08:03,280
if we wanted to save it into another variable or we could simply print it as we

3792
00:08:04,400 --> 00:08:06,320
did before. Now,

3793
00:08:06,350 --> 00:08:09,560
in addition to using the positive index,

3794
00:08:09,770 --> 00:08:12,350
so say 0, 1, 2, 3,

3795
00:08:12,620 --> 00:08:14,960
you can also use a negative index.

3796
00:08:15,320 --> 00:08:20,320
So if I wrote -1 or -2, then it actually starts counting from the

3797
00:08:22,460 --> 00:08:26,330
end of the list. So if I wrote states_of_america

3798
00:08:26,540 --> 00:08:31,010
[-1] as the index, then I get Hawaii.

3799
00:08:31,430 --> 00:08:36,429
-1 is the last item in the list because you can't really have minus zero.

3800
00:08:36,679 --> 00:08:40,400
That's not actually a real thing in math. Now,

3801
00:08:40,460 --> 00:08:42,799
as I continue and I go to -2,

3802
00:08:42,799 --> 00:08:47,780
then that's Alaska, -3 will be Arizona and so on and so forth.

3803
00:08:47,840 --> 00:08:50,870
So you can have positive indices and negative indices.

3804
00:08:51,440 --> 00:08:56,370
But so far we've only been pulling things out of our list by using our square

3805
00:08:56,370 --> 00:08:57,840
brackets and the index.

3806
00:08:58,260 --> 00:09:03,090
But you can also change the items in the list using very similar code.

3807
00:09:03,480 --> 00:09:03,990
For example,

3808
00:09:03,990 --> 00:09:08,990
if I decided that Pennsylvania is actually not spelled Pennsylvania and I wanted

3809
00:09:10,020 --> 00:09:13,440
to change it to Pencilvania,

3810
00:09:14,280 --> 00:09:18,270
then I can simply write my code like this.

3811
00:09:18,810 --> 00:09:22,530
I get hold of my list. And then using the square brackets,

3812
00:09:22,590 --> 00:09:25,890
I get hold of the item at index 1, which is this one.

3813
00:09:26,790 --> 00:09:30,570
And then I set it equal to a new piece of data.

3814
00:09:31,140 --> 00:09:36,140
So now if I go ahead and print my states_of_america list,

3815
00:09:37,440 --> 00:09:40,050
you'll see that the list looks a little bit different now.

3816
00:09:40,200 --> 00:09:44,250
Instead of Pennsylvania, it's now Pencilvania.

3817
00:09:45,150 --> 00:09:48,090
So you can alter any item inside the list

3818
00:09:48,120 --> 00:09:51,150
pretty easily using this kind of syntax.

3819
00:09:51,540 --> 00:09:55,650
You could also add to the list if you wanted too. So for example,

3820
00:09:55,650 --> 00:09:58,620
if you wanted to add an item at the end of the list,

3821
00:09:58,650 --> 00:10:01,170
which is what happens most commonly, right?

3822
00:10:01,170 --> 00:10:05,340
If you had a list of people who are cuing in your shop,

3823
00:10:05,550 --> 00:10:08,790
then every subsequent person usually gets added to the end.

3824
00:10:09,090 --> 00:10:12,210
If you have a new state that joined America,

3825
00:10:12,480 --> 00:10:17,040
then it's probably going to be added after Hawaii. How do we do that?

3826
00:10:17,370 --> 00:10:19,830
Well, we can write the name of the list

3827
00:10:20,340 --> 00:10:25,340
and then we use a function called append and append

3828
00:10:25,410 --> 00:10:29,130
will add a single item to the end of the list.

3829
00:10:29,580 --> 00:10:34,580
So let's say that Angelaland is joining the United States of America.

3830
00:10:36,600 --> 00:10:41,600
So now once I've appended Angelaland to the end of my states_of_america list,

3831
00:10:42,870 --> 00:10:47,730
and I print the states_of_america, you can see, there it is added at the end.

3832
00:10:48,870 --> 00:10:52,080
Now there's actually a whole load of other functions that you can use in

3833
00:10:52,080 --> 00:10:56,610
addition to append. And you'll find this on the documentation for Python.

3834
00:10:57,300 --> 00:11:02,250
In addition to the append function that we saw just now where we add an item at

3835
00:11:02,250 --> 00:11:03,083
the end of the list,

3836
00:11:03,390 --> 00:11:07,110
there's a whole load of all the functions that you can use with lists.

3837
00:11:07,470 --> 00:11:09,750
For example, you can use the extend,

3838
00:11:09,990 --> 00:11:14,880
which adds a whole bunch of items at the end of the list. And in this case,

3839
00:11:14,910 --> 00:11:18,540
what you're actually adding is going to be a list.

3840
00:11:18,900 --> 00:11:23,850
So I would be creating the list using square brackets and then adding my items

3841
00:11:23,880 --> 00:11:24,713
in here.

3842
00:11:25,620 --> 00:11:30,620
And now what's happening is I'm extending this states_of_america list with this

3843
00:11:31,500 --> 00:11:35,640
additional list. So now if we print the states_of_america,

3844
00:11:35,910 --> 00:11:40,910
you can see that these two items that used to be inside of the list have now

3845
00:11:41,370 --> 00:11:44,580
been added to the previous list

3846
00:11:44,910 --> 00:11:47,640
and it's now extended it by two more items.

3847
00:11:48,630 --> 00:11:52,890
But the important thing is you don't have to memorize these functions.

3848
00:11:52,930 --> 00:11:57,790
That's the whole point of documentation and why we have Google because there's

3849
00:11:57,790 --> 00:12:00,820
too much information in the world for you to memorize.

3850
00:12:01,240 --> 00:12:04,330
And it's a very inefficient way of learning.

3851
00:12:04,900 --> 00:12:09,220
And if you tried to memorize every single method, it's not impossible,

3852
00:12:09,220 --> 00:12:12,850
but it means that you don't have space in your brain for the important stuff,

3853
00:12:12,850 --> 00:12:14,350
which is how things work.

3854
00:12:14,380 --> 00:12:17,650
How do you actually use it to do what you want it to do?

3855
00:12:18,070 --> 00:12:22,300
So what I recommend when you come across a new thing, such as,

3856
00:12:22,600 --> 00:12:27,370
um, the list data structure is to just have a look through the documentation,

3857
00:12:27,790 --> 00:12:31,690
read through it and see what are the possible things you can do.

3858
00:12:32,140 --> 00:12:34,870
And once you've got the idea of this is possible,

3859
00:12:35,020 --> 00:12:39,040
then the next time when you need to use it inside your code, you'll know, ah,

3860
00:12:39,070 --> 00:12:41,050
I remember this is possible.

3861
00:12:41,290 --> 00:12:44,290
And all you have to do is just be able to use Google,

3862
00:12:44,530 --> 00:12:47,500
to find the exact bit of the documentation

3863
00:12:47,770 --> 00:12:52,770
and then implement it. Programming is kind of like an open book exam.

3864
00:12:53,140 --> 00:12:55,660
You shouldn't need to memorize anything.

3865
00:12:55,870 --> 00:12:59,440
You should spend your time trying things out and try to get things to work

3866
00:12:59,440 --> 00:13:04,330
instead. Now that I've introduced you to this new data structure,

3867
00:13:04,420 --> 00:13:05,410
the mighty list,

3868
00:13:05,740 --> 00:13:09,880
it's time for a code exercise to see if you can use it in practice.

3869
00:13:10,210 --> 00:13:13,600
So head over to the next lesson and give the challenge that go.

3870
00:00:00,450 --> 00:00:07,110
So the code challenge that you're about to do comes from a really interesting phenomenon that you might find

3871
00:00:07,110 --> 00:00:07,980
in London.

3872
00:00:08,430 --> 00:00:13,700
I live in London and it's well known as a big financial district.

3873
00:00:14,220 --> 00:00:21,150
So when you head over to the city or the financial area in London and you go into a restaurant, you

3874
00:00:21,150 --> 00:00:23,460
might see a strange thing happen.

3875
00:00:23,820 --> 00:00:31,290
You might see a whole bunch of people in suits who look very much like the financial banker types. At

3876
00:00:31,290 --> 00:00:33,480
the time when they actually need to pay the bill

3877
00:00:33,660 --> 00:00:37,590
you see everybody pull out their business cards and put them into a bowl.

3878
00:00:38,310 --> 00:00:39,940
So what's actually going on here?

3879
00:00:40,290 --> 00:00:47,550
A friend of mine told me apparently there's this game that the rich banker types play where it's kind

3880
00:00:47,550 --> 00:00:50,060
of like Russian roulette with the bill.

3881
00:00:50,490 --> 00:00:57,060
So everybody puts their business card in and the person's card who gets picked out has to pay for everybody's

3882
00:00:57,060 --> 00:00:59,550
bill, which is kind of crazy.

3883
00:00:59,550 --> 00:01:01,240
But then again, it's finance.

3884
00:01:01,920 --> 00:01:07,740
So in today's challenge, this is what we're going to replicate with code. Head over to the course

3885
00:01:07,740 --> 00:01:11,820
resources and click on the coding exercise to bring it up.

3886
00:01:12,540 --> 00:01:17,850
Now, go ahead and fork your own copy of it so that you can make amendments.

3887
00:01:18,540 --> 00:01:24,660
Now, the idea is that once you've completed the challenge, you should be able to type in a whole bunch

3888
00:01:24,660 --> 00:01:29,910
of names as an input with a comma and a space separating each name.

3889
00:01:30,390 --> 00:01:37,350
And then the code will pick a random name from the one that you've given it and tell you who is going

3890
00:01:37,350 --> 00:01:38,070
to buy the meal.

3891
00:01:40,310 --> 00:01:43,880
Now, there's two lines of code here that you might not have seen before.

3892
00:01:45,320 --> 00:01:54,410
Now this is something called split, and this allows you to split a string into separate components

3893
00:01:54,710 --> 00:01:56,950
based on some sort of divider.

3894
00:01:57,440 --> 00:02:03,360
So in this case, notice how it says hello, from, AskPython.

3895
00:02:03,840 --> 00:02:11,900
Now, if we use the split on this string, then it will divide it up into a list and separate out all

3896
00:02:11,900 --> 00:02:17,660
the words that are divided by this split character, which is the comma.

3897
00:02:18,470 --> 00:02:25,790
Now, similarly, over here, when we give the input, it's going to be in the format like this; everybody's

3898
00:02:25,790 --> 00:02:28,190
names separated by a comma and a space.

3899
00:02:28,760 --> 00:02:37,970
So now if we use the split on a comma and a space, then it will take out the comma and the space and

3900
00:02:37,970 --> 00:02:43,160
it will put everything else as separate items inside a list.

3901
00:02:44,390 --> 00:02:50,840
So what I recommend doing before you get started writing the actual code is to test it out.

3902
00:02:50,840 --> 00:02:53,960
So printout what names actually looks like.

3903
00:02:54,380 --> 00:03:01,390
So if we go ahead and run this code and then we type a bunch of names separated by a comma.

3904
00:03:01,400 --> 00:03:09,140
so Angela, Ben, Jenny and then hit enter,

3905
00:03:09,650 --> 00:03:12,110
then we hit the line where it prints names.

3906
00:03:12,530 --> 00:03:18,350
Now names, as you'll see, is now a list with all the names I typed in.

3907
00:03:19,010 --> 00:03:25,430
And while previously they were separated by a comma and a space, they are now all individual items

3908
00:03:25,430 --> 00:03:26,090
in a list.

3909
00:03:26,600 --> 00:03:30,110
The idea is that you've got all of these items inside a list,

3910
00:03:30,420 --> 00:03:38,450
how can I pick a random one out of it using a random index based on the number of items in the list

3911
00:03:38,480 --> 00:03:39,770
which of course can change?

3912
00:03:40,250 --> 00:03:47,300
And then how can I get a random name as the output and then print so-and-so is going to buy the meal

3913
00:03:47,300 --> 00:03:47,630
today?

3914
00:03:48,080 --> 00:03:49,440
So have a think about it,

3915
00:03:49,820 --> 00:03:52,790
have a pause and then see if you can complete the challenge.

3916
00:03:58,680 --> 00:04:05,910
So now that we've got the list as a starting point stored inside names, how can we go about generating

3917
00:04:05,940 --> 00:04:08,820
a random name and picking it out of the list?

3918
00:04:09,480 --> 00:04:18,209
Well, we know that we can pick a item from the list by adding a set of square brackets and then a index

3919
00:04:18,209 --> 00:04:18,630
number.

3920
00:04:18,930 --> 00:04:25,080
So in this case, it should print the first item out of the list which is going to be just the word

3921
00:04:25,080 --> 00:04:28,420
Angela. And I can run this to prove this to you.

3922
00:04:28,800 --> 00:04:35,970
You can see that names is a list of all the names, Angela, James, Ben. Names at position zero

3923
00:04:36,120 --> 00:04:38,340
is Angela, the first item.

3924
00:04:39,270 --> 00:04:43,830
Now, how can we get a random number to replace that number zero?

3925
00:04:44,430 --> 00:04:47,080
Well, we could use our random generator.

3926
00:04:47,100 --> 00:04:54,420
Let's go ahead and import the random module and we can say random.randint and then we can specify

3927
00:04:54,420 --> 00:04:55,610
the start and end.

3928
00:04:56,100 --> 00:05:01,490
So the start is probably going to be zero because that's where we start counting with our lists.

3929
00:05:01,890 --> 00:05:03,490
But what is the end?

3930
00:05:03,510 --> 00:05:06,450
Well, the end should be the position of the last item.

3931
00:05:06,810 --> 00:05:09,180
But how can we know that position?

3932
00:05:09,190 --> 00:05:11,250
What is that X going to be?

3933
00:05:12,510 --> 00:05:17,600
Well, what if we got hold of the number of items in the list?

3934
00:05:18,090 --> 00:05:22,410
So do remember how previously we learned about the len function?

3935
00:05:23,070 --> 00:05:30,360
Well, the len function can be used to get the number of elements in a list or the number of characters

3936
00:05:30,360 --> 00:05:31,170
in a string.

3937
00:05:31,620 --> 00:05:35,970
And if you take a look at this Stack Overflow question, then you'll see it in action.

3938
00:05:36,690 --> 00:05:45,060
All that we have to do to get hold of the number of items inside this names list is to write len

3939
00:05:46,330 --> 00:05:49,270
(), and then inside it we put names.

3940
00:05:49,610 --> 00:05:55,630
Now we can either store this or print this. Llet's go ahead and first print with the value of this is

3941
00:05:55,630 --> 00:06:02,760
going to be. Let's go ahead and comment out this line of code and then run our code, and then give everybody's

3942
00:06:02,770 --> 00:06:06,450
names separated by a comma, hit enter.

3943
00:06:06,760 --> 00:06:10,710
And you can see that this line of code has printed three.

3944
00:06:11,110 --> 00:06:14,380
So the length of my names list is three.

3945
00:06:14,950 --> 00:06:22,030
So now that we've gotten hold of that, then we can probably use that number that comes from this len

3946
00:06:22,030 --> 00:06:31,840
function inside our random generator, because we know that we can use this to get the total number

3947
00:06:31,840 --> 00:06:33,800
of items in list.

3948
00:06:34,690 --> 00:06:38,370
So in this case, that would be one, two, three, four, five.

3949
00:06:38,860 --> 00:06:42,550
This last item is not at position five, though, right?

3950
00:06:42,670 --> 00:06:44,200
It's at position zero,

3951
00:06:44,200 --> 00:06:46,520
one, two, three, four.

3952
00:06:46,870 --> 00:06:51,040
So we always need one less than the total number of items.

3953
00:06:51,550 --> 00:06:56,800
And the range of random numbers we would want is num_items -1.

3954
00:06:58,230 --> 00:07:11,340
Now, this line of code will allow us to generate random numbers between zero and the last index, and

3955
00:07:11,340 --> 00:07:19,500
I can store that inside a random choice variable and print my random choice.

3956
00:07:20,990 --> 00:07:22,520
So if I run the code again

3957
00:07:23,850 --> 00:07:26,970
and it prints one this time,

3958
00:07:28,380 --> 00:07:36,990
but the next time, it might be zero or two, because those are all the possible choices for a three

3959
00:07:36,990 --> 00:07:45,930
item list. Now we can use that number to actually get hold of a particular item in our list of names.

3960
00:07:46,380 --> 00:07:52,500
So we can say names[], and then we're going to use the random choice to get hold of

3961
00:07:52,500 --> 00:08:01,290
the random item. And then we can go ahead and save this as the person_who_will_pay.

3962
00:08:02,220 --> 00:08:03,840
And we can print

3963
00:08:04,930 --> 00:08:11,890
person_who_will_pay + "is going to buy the meal today."

3964
00:08:13,160 --> 00:08:19,610
So now let's go ahead and run our code again and then give everybody's names separated by a comma, and

3965
00:08:19,610 --> 00:08:21,890
then it says James is going to buy the meal today.

3966
00:08:22,520 --> 00:08:25,430
And now we know that we've completed the challenge.

3967
00:08:26,340 --> 00:08:31,490
Now, you'll notice that in the instructions, I told you that you're not allowed to use the choice

3968
00:08:31,490 --> 00:08:32,030
function.

3969
00:08:32,510 --> 00:08:39,440
And the reason for this is because if you search AskPython and you search for the random module

3970
00:08:41,440 --> 00:08:50,530
and you scroll down, you'll find that you can actually generate random items from a sequence such as

3971
00:08:50,530 --> 00:08:58,360
a list by writing random.choice, and it will actually pick an item from that list.

3972
00:08:59,370 --> 00:09:05,460
So let me demo what our code would look like instead. Instead of needing all of these lines of code,

3973
00:09:05,940 --> 00:09:12,420
all we have to write is random.choice()

3974
00:09:12,630 --> 00:09:18,450
and then we put our names list inside. And now it will do exactly the same as before

3975
00:09:20,110 --> 00:09:27,340
but with far less code. But this, of course, doesn't test whether if you've understood how indices

3976
00:09:27,340 --> 00:09:34,270
work with lists and whether if you're comfortable with the idea that the last index is actually one

3977
00:09:34,270 --> 00:09:40,960
less than the total number of items because we start counting from zero. I've made it a little bit

3978
00:09:40,960 --> 00:09:46,420
harder than it needed to be just to see how good a grasp you have on lists.

3979
00:09:47,230 --> 00:09:49,960
Now, I hope that you managed to complete this challenge.

3980
00:09:50,320 --> 00:09:51,490
If not, don't worry.

3981
00:09:51,490 --> 00:09:55,920
Go back to it and see if you can replicate the logic that we talked about just now.

3982
00:09:56,950 --> 00:10:03,190
And if you really struggle visualizing what these lines of code are doing, then you can always pass it

3983
00:10:03,190 --> 00:10:08,710
through Thonny and use the debugger to step through it one step at a time and see what's happening at

3984
00:10:08,710 --> 00:10:09,350
each stage.

3985
00:10:10,000 --> 00:10:16,270
Now on the next lesson, we're going to see some more advanced parts of lists in action, namely how

3986
00:10:16,270 --> 00:10:18,560
to nest lists inside other lists.

3987
00:10:19,000 --> 00:10:21,970
So for all of that and more, I'll see you on the next lesson.

3988
00:00:00,250 --> 00:00:02,380
Now, when you're working with lists,

3989
00:00:02,740 --> 00:00:06,760
one of the most common errors you'll come across is something called the index

3990
00:00:06,790 --> 00:00:09,880
out of range error. In fact, by this point,

3991
00:00:09,940 --> 00:00:14,560
you might have already seen it. Now, what does it mean though? Well,

3992
00:00:14,560 --> 00:00:19,090
let's take all the states_of_america and let's delete the line where we added

3993
00:00:19,300 --> 00:00:21,250
Angelaland and Jack Bauer land.

3994
00:00:21,580 --> 00:00:26,580
So we go back to the original. And you might remember that there are 50 States in

3995
00:00:26,950 --> 00:00:30,490
America. But if you don't because you are a programmer,

3996
00:00:30,640 --> 00:00:35,640
it's as easy as writing len and then passing over the states_of_america

3997
00:00:36,880 --> 00:00:38,140
which will print 50.

3998
00:00:38,710 --> 00:00:43,710
So now that we know that there are a total of 50 items in this list,

3999
00:00:44,560 --> 00:00:47,320
and remember, because we start counting from 0,

4000
00:00:47,890 --> 00:00:51,190
Hawaii is actually at index 49.

4001
00:00:51,580 --> 00:00:56,580
So if we print states_of_america and then we try to get the item at the 49,

4002
00:00:57,070 --> 00:01:00,340
we hit print, you'll see that we get Hawaii printed.

4003
00:01:01,660 --> 00:01:05,260
Now what if we went one beyond that?

4004
00:01:05,319 --> 00:01:09,280
What if we tried to get the one at index 50,

4005
00:01:09,460 --> 00:01:14,350
somewhere out here, what do we get instead? Well, we get an error.

4006
00:01:14,860 --> 00:01:19,860
It's called an index error. And this is because it's beyond Hawaii and there's

4007
00:01:20,650 --> 00:01:23,350
nothing there as we can see with our own eyes.

4008
00:01:23,950 --> 00:01:27,790
But when you're working with large lists and you're not always looking at the

4009
00:01:27,790 --> 00:01:28,623
data,

4010
00:01:28,720 --> 00:01:33,720
then these errors can be a little bit more confusing. Very frequently when you're

4011
00:01:33,880 --> 00:01:37,690
working with lists, you'll end up with an off by one error.

4012
00:01:37,690 --> 00:01:42,690
So it's unusual that you'll try to get something at index number 90 because

4013
00:01:43,120 --> 00:01:46,300
that's just way beyond your list size.

4014
00:01:46,690 --> 00:01:51,640
But very frequently you might end up in a situation where you have some sort of

4015
00:01:51,640 --> 00:01:55,330
value saying num_of_states = len

4016
00:01:55,380 --> 00:01:59,500
and then we pass over the states_of_america.

4017
00:01:59,740 --> 00:02:01,870
So this is going to be equal to 50.

4018
00:02:02,290 --> 00:02:07,290
And then we pass that inside here as the index num of states.

4019
00:02:08,620 --> 00:02:13,360
And then we hit run and we get the same error, right? On line 16

4020
00:02:13,930 --> 00:02:18,190
where we try to get hold of this index in this list. It's again,

4021
00:02:18,220 --> 00:02:19,540
list index out of range.

4022
00:02:20,020 --> 00:02:25,020
And this is an off by one error because all we need to do is just simply minus

4023
00:02:26,380 --> 00:02:27,213
4024

4025
00:02:27,400 --> 00:02:32,050
so that 1 becomes 0 and 50 becomes 49.

4026
00:02:32,560 --> 00:02:34,180
And then we get rid of that error.

4027
00:02:36,010 --> 00:02:39,730
Now it might be easier if we work with something a little bit simpler.

4028
00:02:40,300 --> 00:02:45,300
Recently I was reading online and I came across the so-called Dirty Dozen where

4029
00:02:47,320 --> 00:02:48,730
the environmental working group,

4030
00:02:48,760 --> 00:02:53,050
a bunch of people, crunch through a whole lot of data, probably using Python.

4031
00:02:53,530 --> 00:02:58,530
And they released their Dirty Dozen, a list of the fruits and vegetables that have

4032
00:02:59,170 --> 00:03:04,170
most pesticides. And its kind of crazy that they actually washed and peeled all

4033
00:03:05,650 --> 00:03:08,740
of these foods and then tested them for pesticides.

4034
00:03:09,280 --> 00:03:14,280
And the list looks something like this where strawberries are apparently one of

4035
00:03:14,650 --> 00:03:16,510
the worst offenders for pesticides.

4036
00:03:17,080 --> 00:03:20,110
So let's create a list of the dirty dozen,

4037
00:03:20,530 --> 00:03:24,640
but you'll notice that some of these are fruits like strawberries,

4038
00:03:24,670 --> 00:03:27,460
apples, and the other ones are vegetables.

4039
00:03:27,700 --> 00:03:32,700
So how can we use our lists to still keep them inside the same sort of

4040
00:03:33,580 --> 00:03:35,650
container, the dirty dozen,

4041
00:03:36,040 --> 00:03:39,460
but somehow separate them out into fruits and vegetables?

4042
00:03:40,900 --> 00:03:44,500
Well, we could just simply create two lists,

4043
00:03:44,530 --> 00:03:49,390
fruits and vegetables. But these two lists kind of have a relationship,

4044
00:03:49,390 --> 00:03:49,780
right?

4045
00:03:49,780 --> 00:03:54,780
That kind of related because they're all on the list of high-pesticide foods.

4046
00:03:55,450 --> 00:04:00,160
So how can we have lists within a list? Well, that's,

4047
00:04:00,190 --> 00:04:04,300
what's called a nested list. Instead of our original dirty dozen,

4048
00:04:04,690 --> 00:04:08,500
we could create a new list called dirty_dozen,

4049
00:04:08,950 --> 00:04:13,750
and we set it equal to a list that contains two lists.

4050
00:04:13,930 --> 00:04:17,560
It contains fruits and it contains vegetables.

4051
00:04:18,370 --> 00:04:23,370
So now what effectively has happened is we've inserted this list inside here and

4052
00:04:25,480 --> 00:04:28,810
then we've inserted this list inside here.

4053
00:04:29,290 --> 00:04:33,460
So we now have a list that contains two lists.

4054
00:04:34,270 --> 00:04:38,980
And if I go ahead and print out this list, you'll be able to see its structure.

4055
00:04:40,990 --> 00:04:42,160
And it looks like this.

4056
00:04:42,760 --> 00:04:47,440
You'll notice that there's two brackets at the beginning and at the end

4057
00:04:47,800 --> 00:04:51,340
and the reason is because this is one list,

4058
00:04:52,210 --> 00:04:57,210
this is another list and this is also a list.

4059
00:04:58,180 --> 00:05:03,180
So this is yet another way of using lists and showing you the flexibility of

4060
00:05:04,420 --> 00:05:06,280
this particular data structure.

4061
00:05:06,910 --> 00:05:11,380
It's something that you're going to use a lot when you're writing Python code.

4062
00:05:12,520 --> 00:05:15,130
Now that we've talked more about index errors,

4063
00:05:15,130 --> 00:05:18,040
how to fix them and also nested lists,

4064
00:05:18,340 --> 00:05:21,070
you're ready to go to the next coding challenge.

4065
00:05:21,460 --> 00:05:23,980
So head over there and give that a go.

4066
00:00:00,060 --> 00:00:03,150
All right guys, it's time for another code challenge.

4067
00:00:03,180 --> 00:00:07,260
So head over to day 4.3 treasure map

4068
00:00:07,740 --> 00:00:11,190
and take a look at what is happening here

4069
00:00:11,190 --> 00:00:16,190
first. Notice how we've created three lists here for you; row1,

4070
00:00:16,590 --> 00:00:20,970
row2, row3, and they've got some blank tiles in here,

4071
00:00:21,090 --> 00:00:23,400
and these were just created with emojis.

4072
00:00:23,490 --> 00:00:26,910
So if you just search for emoji, um,

4073
00:00:27,000 --> 00:00:29,370
and you come across the list of emojis,

4074
00:00:29,400 --> 00:00:33,120
then you can simply just copy and paste them right into your code like that.

4075
00:00:33,660 --> 00:00:36,090
So depending on whether if you own a Windows or Mac,

4076
00:00:36,120 --> 00:00:38,700
you will see the emojis display a little bit differently,

4077
00:00:38,910 --> 00:00:41,310
but it doesn't really matter what it looks like.

4078
00:00:41,820 --> 00:00:44,940
All that we want to do is to create almost kind of like a,

4079
00:00:45,000 --> 00:00:47,670
a chess board or a map like this.

4080
00:00:48,450 --> 00:00:51,830
So we have three rows and then we create

4081
00:00:51,840 --> 00:00:54,780
another list that includes all three rows.

4082
00:00:55,050 --> 00:00:59,460
So this map is actually a nested list because row1 is a list, row2 is a 

4083
00:00:59,460 --> 00:01:02,610
list, et cetera. And it's all put inside a list.

4084
00:01:03,150 --> 00:01:08,150
Then we go ahead and print it so that we add a new line in between each row.

4085
00:01:09,720 --> 00:01:13,020
And the final outcome looks something like this.

4086
00:01:13,320 --> 00:01:17,610
So if we go ahead and just run the code, you'll see that we have almost like a,

4087
00:01:17,610 --> 00:01:22,590
a chess board or essentially a three by three square, right?

4088
00:01:23,280 --> 00:01:28,280
And the sort of way that we're going to navigate this map is by using some

4089
00:01:29,430 --> 00:01:33,540
indices. So we're going to say that this is column one,

4090
00:01:33,570 --> 00:01:37,380
two and three, and this is row one, two and three.

4091
00:01:38,430 --> 00:01:42,120
Now, if you've ever played chess, or if you played chess with a computer,

4092
00:01:42,540 --> 00:01:47,490
you will know that the different moves or the different positions are often mapped

4093
00:01:47,490 --> 00:01:51,630
out using letters and numbers. So for example,

4094
00:01:51,720 --> 00:01:56,340
if you want it to move to this square then it would be b4, right?

4095
00:01:57,180 --> 00:02:02,180
Or if you want it to move to this square then it would be h3. In our  sort

4096
00:02:02,550 --> 00:02:03,870
of 3x3 map

4097
00:02:04,230 --> 00:02:08,729
the way that we navigate is first by specifying the column,

4098
00:02:08,759 --> 00:02:12,810
the horizontal column, and then we specify a number for the row.

4099
00:02:13,230 --> 00:02:14,460
So for example,

4100
00:02:14,580 --> 00:02:18,480
if I wanted to place my X,

4101
00:02:18,540 --> 00:02:23,540
X marks the spot of my treasure at this particular position, then it is one, two,

4102
00:02:25,320 --> 00:02:29,550
2 on the horizontal, so column number two, and then one, two,

4103
00:02:29,550 --> 00:02:33,870
three, row number three. So I would write that as 23.

4104
00:02:34,710 --> 00:02:35,970
And if I wrote 31

4105
00:02:35,970 --> 00:02:39,720
then it means I want column three and row one.

4106
00:02:39,750 --> 00:02:43,860
So I want you to mark this spot here. So when you run the code,

4107
00:02:43,890 --> 00:02:48,270
the idea is that you should be able to specify a location using that two-digit

4108
00:02:48,270 --> 00:02:53,250
system, and you should be able to place an X at that location. Now,

4109
00:02:53,310 --> 00:02:57,690
in order to do this, it will need you to review what you know about lists,

4110
00:02:57,900 --> 00:03:02,900
what you know about using the index to change a particular item in a list

4111
00:03:04,480 --> 00:03:06,430
which you saw in previous lessons,

4112
00:03:07,090 --> 00:03:09,880
and the added complexity is here

4113
00:03:09,880 --> 00:03:14,650
we actually have a nested list. So lists inside lists.

4114
00:03:15,100 --> 00:03:20,100
So have a play around with this code and that's the really important word. It's

4115
00:03:20,140 --> 00:03:23,950
play, right? There is nothing that could possibly go wrong.

4116
00:03:24,370 --> 00:03:26,200
Just try some different lines of code,

4117
00:03:26,500 --> 00:03:31,120
try doing some different things and see if it actually prints out the outcome

4118
00:03:31,120 --> 00:03:34,810
that you want, where, you know, when you specify a location,

4119
00:03:34,870 --> 00:03:37,210
that's the place that gets marked with the capital X.

4120
00:03:37,900 --> 00:03:40,540
Pause the video and try to give this challenge a go.

4121
00:03:45,570 --> 00:03:47,700
All right. So let's try and solve this.

4122
00:03:47,850 --> 00:03:52,170
So notice how at the very bottom of the code, I've got another print statement

4123
00:03:52,200 --> 00:03:56,940
which is going to show us the outcome of whatever code it is we write here.

4124
00:03:57,480 --> 00:04:02,480
The first thing we probably want to do is get hold of the input position,

4125
00:04:02,970 --> 00:04:07,320
right? We know that input always takes in a string.

4126
00:04:07,680 --> 00:04:12,090
So even if we typed 23 that's not going to be the number 23,

4127
00:04:12,090 --> 00:04:16,290
it's going to be the string with two and three inside the string.

4128
00:04:16,680 --> 00:04:18,089
Something that looks like this.

4129
00:04:18,779 --> 00:04:23,780
Now we can use what we've learned in previous days and previous lessons to split

4130
00:04:24,030 --> 00:04:29,030
that string so that we end up with a horizontal position and a vertical

4131
00:04:29,820 --> 00:04:34,200
position. That way we know, well, which column are they interested in

4132
00:04:34,260 --> 00:04:38,010
and which row are they interested in. In order to do that,

4133
00:04:38,040 --> 00:04:42,990
we tap into this position. And in order to get the horizontal

4134
00:04:43,230 --> 00:04:45,540
which we mentioned is the first digit,

4135
00:04:45,810 --> 00:04:50,640
then we go ahead and get the zeroth item out of that string.

4136
00:04:50,850 --> 00:04:52,710
Remember the string looks like this.

4137
00:04:53,010 --> 00:04:55,260
So the zeroth item out of the string is this one.

4138
00:04:55,890 --> 00:05:00,540
And then the vertical is going to be the one at position one. Now, of course,

4139
00:05:00,600 --> 00:05:03,480
these are still strings as they stand right now.

4140
00:05:03,480 --> 00:05:08,480
We've just split up this two-digit string into horizontal and vertical.

4141
00:05:09,030 --> 00:05:13,140
So this one, if 23 was the input would be equal to 2,

4142
00:05:13,530 --> 00:05:16,920
and this one would be equal to 3.

4143
00:05:18,270 --> 00:05:18,570
Now,

4144
00:05:18,570 --> 00:05:23,570
once we've gotten hold of the horizontal position and the vertical position,

4145
00:05:23,820 --> 00:05:28,380
then we can go ahead and start specifying positions in our list.

4146
00:05:28,950 --> 00:05:31,800
So we know that we've got our map, right?

4147
00:05:31,830 --> 00:05:34,110
Which is here, this nested list.

4148
00:05:34,920 --> 00:05:38,730
And remember that it contains three rows. Now,

4149
00:05:38,790 --> 00:05:41,940
if we wanted to get hold of the first row,

4150
00:05:42,480 --> 00:05:44,970
then we would write map[0].

4151
00:05:45,750 --> 00:05:47,640
If we want to get hold of row2,

4152
00:05:47,640 --> 00:05:51,900
then we would write map[1] and map[2] to get row 3.

4153
00:05:52,680 --> 00:05:55,740
Now remember that this is the vertical position.

4154
00:05:55,740 --> 00:06:00,350
So this is the that we're going to be getting hold of. Or in this example,

4155
00:06:00,350 --> 00:06:02,780
it would be the number three, right?

4156
00:06:02,780 --> 00:06:06,920
So we could say map passing in the vertical position,

4157
00:06:07,670 --> 00:06:09,200
but there's just one problem

4158
00:06:09,230 --> 00:06:14,230
and I'll show you if I go ahead and print this map at the position vertical.

4159
00:06:16,130 --> 00:06:19,520
Let's put in the example number, which is 23.

4160
00:06:19,850 --> 00:06:24,850
And you'll see that the problem is that list indices must be integers,

4161
00:06:25,100 --> 00:06:28,250
whole numbers, not a string. Remember that

4162
00:06:28,250 --> 00:06:32,690
we said these are still strings. So to convert them into integers,

4163
00:06:33,020 --> 00:06:36,170
we use that integer conversion that we've seen before.

4164
00:06:36,920 --> 00:06:40,310
So now both the horizontal and vertical are integers,

4165
00:06:40,670 --> 00:06:44,830
and we can run this code again and see how it performs.

4166
00:06:47,800 --> 00:06:51,100
Let's put 23 in there, and

4167
00:06:51,160 --> 00:06:53,950
we ended up with the error that we learned about in the last lesson

4168
00:06:54,310 --> 00:06:59,200
which is an index error. So it's out of range. So what's going on here?

4169
00:06:59,770 --> 00:07:04,750
Remember that in our example where the number is 23, well

4170
00:07:04,750 --> 00:07:08,440
then the horizontal is the first number. So it's going to be 2.

4171
00:07:09,070 --> 00:07:11,740
And then the vertical is going to be the second number,

4172
00:07:11,740 --> 00:07:13,240
so it's going to be 3.

4173
00:07:13,810 --> 00:07:18,040
And then we try to get a hold of that particular row from our map.

4174
00:07:18,700 --> 00:07:21,850
Now, if we pass 3 into our map,

4175
00:07:22,090 --> 00:07:26,710
then you can clearly see what's going to happen. There's 0, 1, 2,

4176
00:07:26,770 --> 00:07:28,810
there is nothing at position three.

4177
00:07:29,230 --> 00:07:33,250
There is nothing that has been offset from the beginning by three, right?

4178
00:07:34,060 --> 00:07:35,500
So that doesn't exist.

4179
00:07:35,890 --> 00:07:39,340
And this is why we get our index out of range error.

4180
00:07:39,880 --> 00:07:41,770
So what do we have to do instead? Well,

4181
00:07:41,770 --> 00:07:46,480
we have to remove one from it to shift it to row three,

4182
00:07:46,510 --> 00:07:51,040
because that's really what we're interested in when we're writing this here, right?

4183
00:07:51,700 --> 00:07:55,480
We can do the same by substituting the three with vertical

4184
00:07:55,750 --> 00:08:00,280
so it'll work with any number. And now if I run my code again, type 

4185
00:08:00,280 --> 00:08:01,113
23,

4186
00:08:01,150 --> 00:08:06,150
then you can see that I get no more errors and it actually prints out a row that

4187
00:08:06,430 --> 00:08:09,040
I've selected, which is row three.

4188
00:08:09,250 --> 00:08:14,050
Now you can of course change these just to make it a little bit more clear to

4189
00:08:14,050 --> 00:08:18,550
yourself what's actually going on here. Let's type 23 again,

4190
00:08:18,850 --> 00:08:20,980
and you can see that this is what's being printed.

4191
00:08:22,390 --> 00:08:26,770
Now the next step is once I've gotten hold of row 3,

4192
00:08:27,250 --> 00:08:30,940
how can I get the horizontal tile?

4193
00:08:31,420 --> 00:08:34,780
So the horizontal tile we're interested in is the second one.

4194
00:08:34,809 --> 00:08:39,250
So it's actually this one. So when we write 

4195
00:08:39,250 --> 00:08:42,940
23, then it's this tile that we're interested in.

4196
00:08:43,960 --> 00:08:47,080
So instead of printing out this row 3

4197
00:08:47,110 --> 00:08:50,380
which we selected by writing this code,

4198
00:08:51,010 --> 00:08:56,010
we can save this as the selected_row. And then inside the selected_row,

4199
00:08:58,080 --> 00:09:01,890
we can get to the tile at the horizontal position that was specified.

4200
00:09:02,400 --> 00:09:07,400
So we could say selected row at the position of the horizontal - 1.

4201
00:09:09,960 --> 00:09:14,910
This works the same way because our numbers that we're entering here,

4202
00:09:14,910 --> 00:09:19,470
row one, two, three, or column one, two, three, they don't start from zero.

4203
00:09:19,620 --> 00:09:23,730
So we have to shift it down by one in order for it to work.

4204
00:09:24,300 --> 00:09:28,770
So, now once we've gotten hold of the selected row using the vertical,

4205
00:09:29,280 --> 00:09:32,820
and then the selected tile using the horizontal, well,

4206
00:09:32,820 --> 00:09:34,320
now we can actually change it.

4207
00:09:34,710 --> 00:09:38,520
And the thing we want to change it to is a capital X.

4208
00:09:39,210 --> 00:09:42,540
So now if I go ahead and run my code,

4209
00:09:42,870 --> 00:09:47,370
then you can see it works just as the instructions want it to work.

4210
00:09:47,760 --> 00:09:51,570
So here's our map. Where do you wanna put the treasure? If I write 

4211
00:09:51,570 --> 00:09:55,830
23, then it will put the treasure on column number two, row

4212
00:09:55,860 --> 00:09:59,880
number three. Now, if I run this code again and I say, well,

4213
00:09:59,880 --> 00:10:03,810
now I want to put it in column number one, row number three,

4214
00:10:04,140 --> 00:10:05,190
then there it is.

4215
00:10:05,520 --> 00:10:10,170
So this is now working for any possible combination that we come up with

4216
00:10:10,380 --> 00:10:13,380
as long as we're using the coordinates of our map.

4217
00:10:14,400 --> 00:10:18,630
Did you manage to get it right? And did you write the code in a different way,

4218
00:10:18,630 --> 00:10:23,190
perhaps? Because there's many, many ways of doing the same thing.

4219
00:10:23,760 --> 00:10:28,290
And the easiest thing that I can spot right now is what if we didn't need to

4220
00:10:28,290 --> 00:10:33,290
separate this into two lines? Instead of creating a selected row,

4221
00:10:33,960 --> 00:10:37,350
we could simply just tag on this at the end,

4222
00:10:38,310 --> 00:10:41,400
get a hold of this particular row from the map,

4223
00:10:41,700 --> 00:10:44,970
and because this is going to turn into a list,

4224
00:10:46,020 --> 00:10:48,660
namely one of these, well,

4225
00:10:48,660 --> 00:10:53,660
then we can simply just use another square bracket to specify the column.

4226
00:10:55,200 --> 00:10:59,190
And then we set that tile to a capital X.

4227
00:10:59,580 --> 00:11:03,450
So depending on which format you find it easier to understand,

4228
00:11:03,730 --> 00:11:06,960
you can keep your code either like this or like this.

4229
00:11:07,260 --> 00:11:09,060
This is obviously a lot more succinct,

4230
00:11:09,120 --> 00:11:12,030
but it depends on whether if this logic actually makes sense to you.

4231
00:11:12,840 --> 00:11:14,550
So have a think about what happened here,

4232
00:11:14,790 --> 00:11:18,840
and if you didn't manage to complete the exercise, then try to give it another go.

4233
00:11:18,840 --> 00:11:20,880
Now in the next lesson,

4234
00:11:21,150 --> 00:11:24,780
we're going to tackle our final project of the day.

4235
00:11:25,140 --> 00:11:28,680
So once you're prepared and once you're happy that you have understood

4236
00:11:28,680 --> 00:11:30,840
everything that we've covered so far,

4237
00:11:31,170 --> 00:11:34,920
then head over to the next lesson where we're going to get started building our

4238
00:11:34,920 --> 00:11:36,510
rock-paper-scissors game.

4239
00:00:00,120 --> 00:00:05,580
All right, guys, so now that we've loaded up all the knowledge that we need into our brains, it's

4240
00:00:05,580 --> 00:00:08,730
time to tackle the final project of the day.

4241
00:00:09,140 --> 00:00:14,460
And as I showed you in the beginning of the day, it's a Rock Paper Scissors game that we can play

4242
00:00:14,460 --> 00:00:15,380
with the computer.

4243
00:00:16,050 --> 00:00:22,170
So the game starts out by asking you to type 0 for rock, 1 for paper, or 2 for scissors.

4244
00:00:22,420 --> 00:00:29,820
So let's go ahead and type two for scissors, and then it's going to show you a graphic of your choice scissors,

4245
00:00:30,210 --> 00:00:35,730
and then the choice the computer made, which is rock. And of course, rock beats scissors

4246
00:00:35,730 --> 00:00:36,870
so you lose.

4247
00:00:37,380 --> 00:00:44,610
What this game boils down to is some way of randomly making a choice between rock, paper, or scissors

4248
00:00:45,030 --> 00:00:50,970
and then comparing that choice that the computer randomly generated against your choice.

4249
00:00:51,330 --> 00:00:57,450
And then based on the rules of rock, paper, and scissors, determining whether if you won, you lost or

4250
00:00:57,450 --> 00:00:59,790
whether if you had a draw.

4251
00:01:01,080 --> 00:01:06,570
While I was looking around, I actually came across the world rock paper scissors association.

4252
00:01:07,440 --> 00:01:12,630
And they have the official rules of the state of Rock Paper Scissors.

4253
00:01:13,200 --> 00:01:17,080
If you're not familiar with this game, it might be worth checking out this website.

4254
00:01:17,610 --> 00:01:20,100
Here are the three shapes of rock, paper, scissors.

4255
00:01:20,490 --> 00:01:27,330
And then the rules are that rock wins against scissors, scissors wins against paper, and paper wins

4256
00:01:27,330 --> 00:01:28,440
against rock.

4257
00:01:29,100 --> 00:01:36,420
Having all of this in mind, head over to replit/@appbrewery/ rock-paper-scissors-start

4258
00:01:36,780 --> 00:01:40,170
and go ahead and just fork the starting project.

4259
00:01:40,860 --> 00:01:47,700
Now you'll notice that in the starting project, I've already got the ASCII art for rock, paper and scissors

4260
00:01:47,700 --> 00:01:50,870
in here and they're each saved to a variable.

4261
00:01:51,390 --> 00:01:58,170
So what that means is that you can start out by just having a go at printing out let's say a rock.

4262
00:01:59,040 --> 00:02:01,110
And remember that these are variable names.

4263
00:02:01,110 --> 00:02:04,410
They're not strings, so they don't need the double quotes around them.

4264
00:02:04,860 --> 00:02:05,910
So let's run that.

4265
00:02:05,910 --> 00:02:12,450
And you can see what we get printed is the particular ASCII art that I chose in my print statement.

4266
00:02:13,380 --> 00:02:16,080
So this is already yours.

4267
00:02:16,080 --> 00:02:22,890
But as you'll notice, there's no other logic that I've provided you and you are going to rely on what

4268
00:02:22,890 --> 00:02:28,650
you learned in the previous days and most importantly, what you've learned in today's lessons to be

4269
00:02:28,650 --> 00:02:30,090
able to complete this challenge.

4270
00:02:30,420 --> 00:02:36,330
And it's worth comparing the outcome against the game of Rock Paper Scissors that I'll link to.

4271
00:02:37,200 --> 00:02:42,030
There's a couple of things to think about, namely, how are you going to decide who won or who lost?

4272
00:02:42,330 --> 00:02:49,170
How are you going to get the computer to choose a random shape, rock, paper, scissors, and how you

4273
00:02:49,170 --> 00:02:54,420
actually get this game to work in the same way that is demoed in this final version?

4274
00:02:55,320 --> 00:02:59,400
I'm going to go quiet now and I'm going to let you pause the video.

4275
00:02:59,790 --> 00:03:04,980
And I want you to spend at least ten or fifteen minutes working on this.

4276
00:03:05,250 --> 00:03:10,170
And if you get stuck, just try some things out or maybe watch some of the previous videos in the day

4277
00:03:10,470 --> 00:03:12,840
and just try to give it your best

4278
00:03:12,840 --> 00:03:15,120
go, and do a lot of struggling.

4279
00:03:15,510 --> 00:03:16,950
Hopefully you're going to succeed.

4280
00:03:16,950 --> 00:03:20,940
And once you're done, head back over here and I'll go through the solution with you.

4281
00:03:21,180 --> 00:03:22,320
So pause the video now.

4282
00:03:25,760 --> 00:03:30,860
All right, so we know that we've got all of this ASCII art, but for the moment, I'm just going to

4283
00:03:30,860 --> 00:03:35,150
start off by putting down the basic logic of this game.

4284
00:03:35,570 --> 00:03:41,840
And it's really helpful for you as well if you start thinking about breaking down the larger problem,

4285
00:03:41,840 --> 00:03:47,930
which is making the Rock Paper Scissors game into smaller problems that you can solve, like generating

4286
00:03:47,930 --> 00:03:50,110
a random number between one and three.

4287
00:03:50,420 --> 00:03:55,820
So we have some sort of proxy for Rock Paper Scissors. And then maybe thinking about putting down

4288
00:03:55,820 --> 00:04:02,360
the logic, well, if the computer chose scissors and I chose paper, then I'm going to lose.

4289
00:04:02,690 --> 00:04:07,150
Or if the computer chose rock and I chose paper, then I'm going to win.

4290
00:04:07,550 --> 00:04:14,270
And putting that down on a flowchart using draw.io or something like that can make this challenge a lot

4291
00:04:14,270 --> 00:04:15,350
easier as well.

4292
00:04:16,579 --> 00:04:22,100
But without further ado, the first thing I need to do is to produce a user choice.

4293
00:04:22,610 --> 00:04:28,120
Now, this is going to be the one that the user chose when they typed in a value.

4294
00:04:28,610 --> 00:04:32,900
And in order to get the value from them, I'm going to need to use a input.

4295
00:04:33,440 --> 00:04:40,610
And inside the input, I'm going to put the following prompt asking the user, what do you choose?

4296
00:04:40,610 --> 00:04:44,180
Type 0 for rock, 1 for paper or 2 for scissors.

4297
00:04:44,750 --> 00:04:51,140
Now, once I get hold of this input, hopefully, if the user is following my instructions, they're going

4298
00:04:51,140 --> 00:04:54,610
to type some sort of number, either zero or one or two.

4299
00:04:55,190 --> 00:05:01,130
Now that I've gotten hold of what the user wants to choose, the next thing to do is figure out what

4300
00:05:01,130 --> 00:05:02,690
the computer is going to choose.

4301
00:05:03,080 --> 00:05:09,050
So I'm going to make another variable called computer_choice and I'm going to generate a random number.

4302
00:05:09,410 --> 00:05:13,070
So to do that, remember, we have to import the random module.

4303
00:05:15,020 --> 00:05:22,250
And then we can start using it to generate random whole numbers by using random.randint.

4304
00:05:23,090 --> 00:05:30,170
And then the range is going to be between zero and two, because this is what I asked the user to do.

4305
00:05:30,170 --> 00:05:33,190
Type 0 for rock, 1 for paper, 2 for scissors.

4306
00:05:33,530 --> 00:05:37,850
So the computer is also going to choose between 0, 1 or 2.

4307
00:05:39,110 --> 00:05:44,870
Now that I've got the computer_choice, I'm actually going to just print it out for now instead of printing

4308
00:05:44,870 --> 00:05:48,860
out the actual shape, I'm just going to print out the number.

4309
00:05:48,890 --> 00:05:54,680
So computer chose and then let's go ahead and add a fstring.

4310
00:05:57,020 --> 00:06:00,300
And of course, that requires the F in front of the string.

4311
00:06:01,130 --> 00:06:07,130
So now if we just play the game as it is, remember that testing up while you're developing it is really,

4312
00:06:07,130 --> 00:06:08,150
really good practice.

4313
00:06:08,360 --> 00:06:14,120
It picks up on the bugs that you make along the way instead of waiting until the end when you've done

4314
00:06:14,120 --> 00:06:14,540
everything

4315
00:06:14,540 --> 00:06:18,500
and then it doesn't work and you have to untangle all of the lines of code.

4316
00:06:19,160 --> 00:06:24,200
At this point, I've already realized that it's actually not so great getting the user to type on this

4317
00:06:24,200 --> 00:06:24,670
line.

4318
00:06:25,460 --> 00:06:29,940
What I would much rather is to start a new line for them to type their answer on.

4319
00:06:30,560 --> 00:06:34,040
So if I run the code again, then it should look a bit like this.

4320
00:06:34,040 --> 00:06:37,970
My prompt is now here. So I'm going to choose 0 for Rock.

4321
00:06:38,510 --> 00:06:41,840
And then it tells me that computer also chose zero.

4322
00:06:42,290 --> 00:06:44,000
So in this case, this would be a draw.

4323
00:06:44,450 --> 00:06:49,730
But if I played this game again, you can see that the computer is probably going to choose something

4324
00:06:49,730 --> 00:06:50,260
different.

4325
00:06:50,450 --> 00:06:51,860
So I chose rock again

4326
00:06:51,860 --> 00:06:54,140
the computer chose 1, which is paper.

4327
00:06:54,950 --> 00:07:02,960
So now we can start thinking about how do we compare these two choices and how can we define the logic

4328
00:07:02,960 --> 00:07:04,610
of Rock Paper Scissors?

4329
00:07:05,240 --> 00:07:12,230
So I know that paper beats rock, scissors beats paper and rock will beat scissors.

4330
00:07:12,680 --> 00:07:21,280
So if zero is rock, one is paper and two is scissors, then two beats one and one beats zero.

4331
00:07:21,590 --> 00:07:28,010
So that's very simple for us to check in terms of using if statements,

4332
00:07:28,010 --> 00:07:28,280
right?

4333
00:07:28,280 --> 00:07:29,930
We could simply just check

4334
00:07:30,410 --> 00:07:40,550
well, if the computer choice is greater than the user choice, well then this probably means that the

4335
00:07:40,760 --> 00:07:42,350
computer wins.

4336
00:07:43,590 --> 00:07:51,810
But this is not true in all cases, right? Because if the computer chose 2 for scissors and the user

4337
00:07:51,810 --> 00:07:57,240
chose 0 for rock, then the user should win rather than the computer winning.

4338
00:07:57,450 --> 00:08:01,880
So we actually have some exceptions to this rule.

4339
00:08:02,790 --> 00:08:08,520
How can we catch the exceptions before we go down to this level of generalization?

4340
00:08:09,240 --> 00:08:16,830
Well, we could instead of using this as an if, we use this as an elif and we create another if statement

4341
00:08:16,830 --> 00:08:27,210
which says, well, if the user_choice is equal to zero, so if the user chose rock and the computer_choice

4342
00:08:27,660 --> 00:08:34,169
was 2, well then this means that in this case, the user actually wins.

4343
00:08:35,950 --> 00:08:41,140
Now, if we're thinking from the perspective of the user when they're playing this game, then they

4344
00:08:41,140 --> 00:08:47,430
don't really care if the computer won or the user won. They want to know, did they win or did they lose?

4345
00:08:47,890 --> 00:08:50,080
So let's change this wording a little bit.

4346
00:08:50,350 --> 00:08:54,930
We'll say, instead of user wins, we'll say you win.

4347
00:08:56,020 --> 00:09:00,730
And if the computer wins, then we'll say you lose.

4348
00:09:01,690 --> 00:09:10,510
So now if we run our program and test it out, so let's say I'm going to type 0 for rock and the

4349
00:09:10,510 --> 00:09:14,590
computer chooses 2, but we actually get an error.

4350
00:09:14,740 --> 00:09:22,770
It tells us that the greater than comparison is not supported between instances of int and string.

4351
00:09:23,200 --> 00:09:24,100
What's going on here?

4352
00:09:24,310 --> 00:09:32,830
Well, remember that we get our inputs as a number, but the input is always going to be a string.

4353
00:09:33,340 --> 00:09:34,900
So if we want this to be a number,

4354
00:09:34,900 --> 00:09:37,910
then we're going to have to wrap it inside an int.

4355
00:09:38,500 --> 00:09:41,020
So now we turn it into a whole number.

4356
00:09:42,070 --> 00:09:43,880
Now, this might be a good point to address

4357
00:09:43,900 --> 00:09:49,950
well, what should happen if they typed something that wasn't 0, 1 or 2, whether they typed 34?

4358
00:09:50,440 --> 00:09:52,780
Well, then naturally they should probably lose,

4359
00:09:52,780 --> 00:09:53,070
right?

4360
00:09:53,290 --> 00:10:01,060
So we can add an else statement addressing this situation. So we could say else we just print

4361
00:10:01,360 --> 00:10:04,310
You typed an invalid number.

4362
00:10:05,020 --> 00:10:07,480
You lose. Cool.

4363
00:10:07,540 --> 00:10:08,690
So that sorts that out.

4364
00:10:09,100 --> 00:10:13,060
Now let's run our code again and see if it works.

4365
00:10:13,270 --> 00:10:13,990
What do you choose?

4366
00:10:13,990 --> 00:10:15,130
Type 0 for Rock.

4367
00:10:15,160 --> 00:10:16,440
I'm going to choose rock again.

4368
00:10:16,960 --> 00:10:21,970
Computer chose zero and it tells me that you typed an invalid number.

4369
00:10:22,960 --> 00:10:26,000
Well, actually, zero is not an invalid number.

4370
00:10:26,020 --> 00:10:27,280
So what's going on here?

4371
00:10:27,820 --> 00:10:30,930
Well, it's because it didn't fit this criteria.

4372
00:10:31,630 --> 00:10:32,830
So I had zero,

4373
00:10:32,830 --> 00:10:39,530
computer had zero, and it didn't fit this criterion because zero is not greater than zero.

4374
00:10:40,000 --> 00:10:43,720
So it basically defaulted to the final else statement.

4375
00:10:44,440 --> 00:10:48,350
But what's actually happening here is that that was a draw.

4376
00:10:48,940 --> 00:10:50,050
Computer chose rock,

4377
00:10:50,050 --> 00:10:50,940
I chose rock.

4378
00:10:51,100 --> 00:10:55,840
That's a draw in the official rules of Rock Paper Scissors.

4379
00:10:56,620 --> 00:10:58,660
So how do I catch that?

4380
00:10:58,690 --> 00:11:05,650
Well, I could create another elif statement which says, well, if the computer_choice is equal to

4381
00:11:05,650 --> 00:11:08,610
the user_choice, well, then we're going to print

4382
00:11:09,520 --> 00:11:10,690
it's a draw.

4383
00:11:12,130 --> 00:11:17,680
Now, let's test our app again and see if there are any other situations where our code is not behaving

4384
00:11:17,680 --> 00:11:18,250
properly.

4385
00:11:19,030 --> 00:11:23,350
I'm going to choose rock again, computer chose rock as well.

4386
00:11:23,560 --> 00:11:26,150
And I guess it's a draw, so that's pretty good.

4387
00:11:27,850 --> 00:11:33,970
Now, if I choose 0 and the computer chose 2, then this is going to be the statement that gets

4388
00:11:33,970 --> 00:11:35,830
triggered and I win.

4389
00:11:35,980 --> 00:11:37,030
So that's pretty good.

4390
00:11:37,960 --> 00:11:44,030
Now, what if I chose 2 for scissors and the computer chose 0?

4391
00:11:44,980 --> 00:11:48,270
Well, in this case, rock beats scissors

4392
00:11:48,280 --> 00:11:50,770
so it should actually say I lose.

4393
00:11:51,310 --> 00:11:54,250
But instead it says you typed an invalid number.

4394
00:11:54,640 --> 00:12:02,260
So it defaulted to the else statement again because this particular situation is not caught by any of

4395
00:12:02,260 --> 00:12:03,070
these statements.

4396
00:12:03,940 --> 00:12:05,590
So what do we have to do instead?

4397
00:12:06,070 --> 00:12:15,250
Well, we actually need another elif to say, well, if the computer_choice was equal to 0 and

4398
00:12:15,250 --> 00:12:21,510
the user_choice was equal to 2, well, this means that rock beats scissors

4399
00:12:21,760 --> 00:12:25,480
so I lose and the computer wins.

4400
00:12:26,320 --> 00:12:30,040
Now, the final one that we need to catch is this case.

4401
00:12:30,640 --> 00:12:39,430
If I type 1 for paper and computer chooses 0 for rock, it again defaults to the else statements

4402
00:12:40,120 --> 00:12:43,870
whereas in fact in this case it should tell me that I won.

4403
00:12:44,500 --> 00:12:45,820
So what's missing here?

4404
00:12:46,090 --> 00:12:49,740
Well, it's the partner to this particular statement.

4405
00:12:50,350 --> 00:12:54,360
If computer_choice is greater than user_choice then I lose.

4406
00:12:54,700 --> 00:13:02,680
But on the other hand, if the user_choice was greater than the computer_choice, then I actually should

4407
00:13:02,680 --> 00:13:03,070
win.

4408
00:13:05,730 --> 00:13:15,480
So now the final thing we might have to fix is this else statement now actually never gets called because

4409
00:13:15,480 --> 00:13:16,980
this is what happens.

4410
00:13:17,430 --> 00:13:20,460
So let's say that I choose 456.

4411
00:13:20,910 --> 00:13:23,730
It tells me that computer chose 2, I win.

4412
00:13:24,060 --> 00:13:24,930
What's happening here?

4413
00:13:24,960 --> 00:13:29,970
Well, it's actually this particular line that's being carried out.

4414
00:13:29,970 --> 00:13:32,320
user_choice is greater than computer_choice.

4415
00:13:32,820 --> 00:13:34,080
This is not what we want.

4416
00:13:34,090 --> 00:13:35,910
We want it to default to

4417
00:13:36,210 --> 00:13:37,650
You typed an invalid number.

4418
00:13:37,650 --> 00:13:42,690
You lose. So we can actually just use else in this situation.

4419
00:13:43,260 --> 00:13:45,540
We actually need to provide a condition.

4420
00:13:46,380 --> 00:13:54,610
We're going to use elif to check if the user_choice is greater or equal to three,

4421
00:13:55,500 --> 00:13:59,910
now, the computer will never choose anything other than 0, 1 and 2

4422
00:13:59,910 --> 00:14:01,530
so we don't have to check that one.

4423
00:14:01,800 --> 00:14:06,230
But the user could choose something above 3 or below 0.

4424
00:14:06,450 --> 00:14:14,530
So we can use an or statement to catch this. Or if the user_choice is less than zero,

4425
00:14:15,180 --> 00:14:18,900
well, in this case, you typed an invalid number, you lose.

4426
00:14:19,740 --> 00:14:22,110
But that's not all that we have to do.

4427
00:14:22,410 --> 00:14:29,760
If we hit run and we again type some extraordinarily large number, you'll see that it still says

4428
00:14:29,760 --> 00:14:31,230
computer chose 1.

4429
00:14:31,230 --> 00:14:32,040
You win.

4430
00:14:32,520 --> 00:14:33,240
What's going on?

4431
00:14:33,240 --> 00:14:39,290
We have this statement that should catch this situation, but it's right at the bottom.

4432
00:14:39,510 --> 00:14:44,370
So it's not going to be checked until one of the previous ones are checked.

4433
00:14:44,880 --> 00:14:48,720
Namely, it's one of these that's going to be the problem.

4434
00:14:49,260 --> 00:14:57,240
So what we have to do is we have to move this statement above all the lines so that we first check if

4435
00:14:57,240 --> 00:15:02,390
the user_choice is greater than three or less than zero.

4436
00:15:03,060 --> 00:15:08,850
And if that's not true, do we actually continue checking to see who won the game.

4437
00:15:09,750 --> 00:15:16,830
Now, finally, we can run our code type an invalid number and get you typed an invalid number. You lose.

4438
00:15:18,120 --> 00:15:24,600
So now that we've actually got our logic all sorted out, the next step is to include our images.

4439
00:15:25,320 --> 00:15:29,340
And to do that, we have to somehow match it up with these numbers we have,

4440
00:15:29,340 --> 00:15:30,870
right? 0, 1 and 2.

4441
00:15:31,590 --> 00:15:36,870
Now, there's many, many ways that you could do this and you could solve this project.

4442
00:15:37,230 --> 00:15:45,540
But the easiest way is probably putting the game images into a list where we have rock as the first

4443
00:15:45,540 --> 00:15:50,170
one, paper as the second one and scissors as the last one.

4444
00:15:50,640 --> 00:15:58,410
So we're using the fact that lists have a order that is always going to be followed. So we can now get

4445
00:15:58,410 --> 00:16:02,060
hold of the rock picture by getting game_images[0].

4446
00:16:02,400 --> 00:16:09,570
We can get scissors by doing game_images[2] and so on and so forth. And we can match those up to our

4447
00:16:09,570 --> 00:16:12,210
choices, the user_choice and the computer_choice.

4448
00:16:12,810 --> 00:16:20,790
So when the user chooses a number, then we're going to print from the game_images and we're going to

4449
00:16:20,790 --> 00:16:26,340
use our little square brackets to select the image we want from this list.

4450
00:16:26,790 --> 00:16:31,140
And the one that we want is going to be based on the user's choice, right?

4451
00:16:31,320 --> 00:16:33,630
0 for rock, 1 for paper, 2 for scissors.

4452
00:16:33,960 --> 00:16:42,600
So we're going to put user_choice as the index to pick out an image from game_images. Now down here for

4453
00:16:42,600 --> 00:16:49,950
the computer_choice, instead of printing the number that the computer chose, I'm going to delete that

4454
00:16:49,950 --> 00:16:51,480
and add a little colon.

4455
00:16:52,680 --> 00:16:56,550
So that way it's going to show computer chose

4456
00:16:56,910 --> 00:17:02,130
and then I'm going to print the image of the choice that the computer made.

4457
00:17:02,520 --> 00:17:04,290
So I'm going to add another print statement,

4458
00:17:04,560 --> 00:17:10,890
I'm going to tap into the game_images and then inside some square brackets, I'm going to use the computer

4459
00:17:11,130 --> 00:17:17,819
choice which is going to be between 0, 1 and 2 as the index to pick out the corresponding image

4460
00:17:18,180 --> 00:17:20,339
from my list game_images.

4461
00:17:20,930 --> 00:17:28,170
So now we're finally ready to run our code and I'm going to choose 0 for rock and the computer chose

4462
00:17:28,170 --> 00:17:28,920
paper.

4463
00:17:29,220 --> 00:17:31,920
So paper beats rock, I lose.

4464
00:17:32,790 --> 00:17:33,840
Let's try this again.

4465
00:17:33,840 --> 00:17:37,860
I'm going to choose scissors and computer chose scissors.

4466
00:17:37,860 --> 00:17:42,090
It's a draw. But we have also introduced a bug.

4467
00:17:42,690 --> 00:17:47,730
So if we test this using a number that's outside of this range, 0, 1 or 2,

4468
00:17:47,730 --> 00:17:51,330
so let's try 5. And we hit enter,

4469
00:17:51,330 --> 00:17:52,020
what do we get?

4470
00:17:52,050 --> 00:17:53,970
We get a index error.

4471
00:17:54,480 --> 00:17:56,110
So what has happened here?

4472
00:17:56,250 --> 00:17:58,680
Well, this is up to you to debug.

4473
00:17:59,070 --> 00:18:02,970
Well, this is a really good opportunity for you to practice your debugging.

4474
00:18:03,300 --> 00:18:04,620
So think about what has

4475
00:18:04,730 --> 00:18:12,280
changed since the last time we tested this and how you can fix the code so that it works as expected,

4476
00:18:12,590 --> 00:18:18,290
so telling us that you typed an invalid number, you lose whenever we type a number that's above or

4477
00:18:18,290 --> 00:18:20,360
equal to three or less than zero.

4478
00:18:20,840 --> 00:18:25,880
So I want you to pause the video and see if you can debug this challenge so that when you type in 5,

4479
00:18:26,090 --> 00:18:29,330
you get this printed. Pause video now.

4480
00:18:32,680 --> 00:18:39,070
All right, so what's going on here, because we tested this and it worked, but in between that time,

4481
00:18:39,070 --> 00:18:46,480
we also added this line because we wanted to get a hold of the game images based on the user's choice.

4482
00:18:46,930 --> 00:18:51,490
Now, at this point, the user's choice is unchecked by the if statement.

4483
00:18:51,850 --> 00:18:56,110
So it could still be equal to 4 or 5 or 10 or a million.

4484
00:18:56,560 --> 00:19:04,300
So if in that case, it tries to get hold of the fifth image from the game_images list, well, it doesn't

4485
00:19:04,300 --> 00:19:04,690
exist.

4486
00:19:04,810 --> 00:19:06,850
There's only 0, 1 and 2.

4487
00:19:07,750 --> 00:19:14,500
So to fix this, we need to move this if statement so that it gets checked before this line of code

4488
00:19:14,500 --> 00:19:15,370
gets carried out.

4489
00:19:15,940 --> 00:19:22,330
So let's go ahead and cut this line of code out and put it right above this print statement.

4490
00:19:22,840 --> 00:19:30,340
So in this case, if the user types in a choice that's above or equal to three or less than zero,

4491
00:19:30,670 --> 00:19:32,020
we're going to print this.

4492
00:19:32,440 --> 00:19:38,670
But else, if they typed in any other number, then we want the rest of the code to continue.

4493
00:19:39,010 --> 00:19:44,070
So let's select the rest of the code, hit tab and tab it over

4494
00:19:44,080 --> 00:19:46,510
so that is included under the else statement.

4495
00:19:47,050 --> 00:19:54,010
Now let's go ahead and change this from elif just to an if because we're no longer checking it as another

4496
00:19:54,010 --> 00:19:54,430
else-

4497
00:19:54,430 --> 00:19:56,890
if statement. It is just a straight up

4498
00:19:56,890 --> 00:20:05,590
if. So, in this case, if they typed a 5, then it will go into this basket and it will finish there.

4499
00:20:05,890 --> 00:20:10,670
But otherwise, it will go into this basket and it will continue checking later on.

4500
00:20:11,260 --> 00:20:14,570
So did you manage to debug your code and figure out the issue?

4501
00:20:15,040 --> 00:20:17,320
This is one of the most important skills

4502
00:20:17,320 --> 00:20:21,760
as a programmer. You have plenty of opportunities coming up to practice your debugging.

4503
00:20:22,330 --> 00:20:27,790
And if you ever want more practice, head over into the Q&A and see what other students have issues

4504
00:20:27,790 --> 00:20:31,810
with and see if you can help them out by practicing your debugging skills.

4505
00:20:32,590 --> 00:20:40,570
Now, we have completed the project by using everything from lists to randomization to variables to

4506
00:20:40,570 --> 00:20:43,370
if statements and a whole lot of logic.

4507
00:20:43,630 --> 00:20:47,660
So how did you get on with this project? If you struggle

4508
00:20:47,680 --> 00:20:54,970
this is the time again to go back to it and maybe map things out using a flow diagram or try to run

4509
00:20:54,970 --> 00:20:59,080
the code using Thonny to see how it does it step by step.

4510
00:20:59,590 --> 00:21:04,180
But the important thing is that you got to write your own code and you got to make it work.

4511
00:21:04,420 --> 00:21:09,580
And this is the only way that you'll understand what's going on so that you can continue on.

4512
00:21:09,910 --> 00:21:15,670
And as things get harder, you'll be able to learn more because you've already understood all of the

4513
00:21:15,670 --> 00:21:16,570
previous knowledge.

4514
00:21:17,320 --> 00:21:19,150
So I hope you had fun with me today

4515
00:21:19,150 --> 00:21:24,550
learning and building, and hopefully I will see you tomorrow bright and early.

4516
00:21:24,880 --> 00:21:27,100
So that's good night from me for today.


4517
00:00:00,430 --> 00:00:02,800
All right guys, well done for sticking it through.

4518
00:00:02,830 --> 00:00:06,220
You are now on day 5 of 100 Days of code.

4519
00:00:06,610 --> 00:00:09,190
And today I've got a fun project for you.

4520
00:00:09,730 --> 00:00:13,660
And the inspiration for the project comes from the fact that all sorts of

4521
00:00:13,660 --> 00:00:17,440
companies seem to be getting hacked these days. Everything from Ashley

4522
00:00:17,440 --> 00:00:18,820
Madison to Verizon,

4523
00:00:18,850 --> 00:00:22,690
everybody seems to be really bad at keeping your password safe.

4524
00:00:23,200 --> 00:00:28,200
So, how can we make sure that these hackers who are in hoodies and wearing face

4525
00:00:29,110 --> 00:00:33,200
masks, don't get to you and your account? I

4526
00:00:33,220 --> 00:00:36,640
don't know why hackers are always portrayed like this? I mean,

4527
00:00:36,670 --> 00:00:40,630
they're in their own house. They don't have to hide their face.

4528
00:00:41,410 --> 00:00:44,620
But at least they are conscious of not spreading germs and staying warm.

4529
00:00:44,650 --> 00:00:49,210
So that's good. But how do these hackers get into your account anyways?

4530
00:00:49,630 --> 00:00:50,050
Well,

4531
00:00:50,050 --> 00:00:55,050
one of the most common reasons is password reuse. Using the same password on 20

4532
00:00:55,540 --> 00:00:58,960
different sites from Google to Facebook, to Skype, to Spotify,

4533
00:00:59,230 --> 00:01:01,600
to all the random services that we sign up to.

4534
00:01:02,110 --> 00:01:04,480
The problem is that when one of these sites get hacked,

4535
00:01:04,629 --> 00:01:09,190
then the email and password combination you used to signup is compromised.

4536
00:01:09,400 --> 00:01:13,600
So all a hacker has to do is try out those credentials on a bunch of other

4537
00:01:13,600 --> 00:01:17,200
websites and see if they work. So how would you know,

4538
00:01:17,200 --> 00:01:21,610
if your email and password is on a database somewhere? You can head over to have

4539
00:01:21,610 --> 00:01:24,520
ibeenpwned.com, notice the spelling there,

4540
00:01:24,910 --> 00:01:29,410
and type in your email to see if it was involved in a website that had been

4541
00:01:29,410 --> 00:01:30,243
hacked.

4542
00:01:30,280 --> 00:01:35,050
So let's try an email here: elon@tesla.com

4543
00:01:36,850 --> 00:01:40,210
And it tells us, Oh, no, it seems like this email has been pwned.

4544
00:01:40,810 --> 00:01:43,570
And these where the websites which got hacked

4545
00:01:43,630 --> 00:01:48,040
potentially leaking this email and it's associated password.

4546
00:01:48,850 --> 00:01:52,150
I actually recommend you to try out your own email addresses right now and see

4547
00:01:52,150 --> 00:01:55,300
which services you signed up to have been compromised.

4548
00:01:55,600 --> 00:01:57,490
But if you want better security,

4549
00:01:57,550 --> 00:02:01,630
then you'll actually need unique passwords for each and every website.

4550
00:02:02,380 --> 00:02:06,340
And they should really be strong passwords, not 12345

4551
00:02:06,340 --> 00:02:10,810
6, or qwerty. If I just called out your password,

4552
00:02:11,080 --> 00:02:11,913
please change it.

4553
00:02:13,390 --> 00:02:17,890
Now what we're going to be building is exactly that. We're going to be building a

4554
00:02:17,920 --> 00:02:19,600
password generator,

4555
00:02:19,870 --> 00:02:24,870
something that's going to generate strong passwords with letters and symbols and

4556
00:02:25,450 --> 00:02:29,860
numbers. First, they ask us how many letters would you like in your password?

4557
00:02:30,160 --> 00:02:34,270
I would like 12. How many symbols would you like? I would like 2.

4558
00:02:34,930 --> 00:02:38,050
And I would also like 2 numbers in my password.

4559
00:02:38,560 --> 00:02:43,560
And then I hit enter and it gives me the password that it has generated with two

4560
00:02:45,100 --> 00:02:49,150
symbols, two numbers and 12 letters.

4561
00:02:49,210 --> 00:02:52,000
So that's a pretty strong looking password

4562
00:02:52,300 --> 00:02:57,300
if you asked me. Now I can use this and update my passwords to something very

4563
00:02:58,210 --> 00:03:00,040
strong and very secure.

4564
00:03:00,610 --> 00:03:05,470
So this is what we'll be building by the end of today. But in order to do it,

4565
00:03:05,530 --> 00:03:09,580
we first need to learn some new skills and new concepts.

4566
00:03:09,760 --> 00:03:12,400
So head over to the next lesson and let's get started.

4567
00:00:00,280 --> 00:00:04,300
The first topic I want to talk about today is the concept of loops,

4568
00:00:04,660 --> 00:00:07,450
things that have to happen over and over and over again.

4569
00:00:08,020 --> 00:00:11,560
The first type of loop I want to introduce you to is something called the For

4570
00:00:11,560 --> 00:00:16,560
loop. And it can be used really easily in combination with something we learned

4571
00:00:16,960 --> 00:00:21,520
in yesterday's lessons, which is lists. By using a

4572
00:00:21,520 --> 00:00:22,600
for loop like this

4573
00:00:22,660 --> 00:00:26,860
we can go through each item in a list and perform some action with each

4574
00:00:26,890 --> 00:00:27,880
individual item.

4575
00:00:28,600 --> 00:00:32,290
So let's try it out in practice. In order to follow along

4576
00:00:32,590 --> 00:00:36,730
go ahead and fork the day 5 start rebel.

4577
00:00:37,210 --> 00:00:41,200
And once I've explained the concept, then I want you to try it out yourself.

4578
00:00:41,920 --> 00:00:46,920
But first, let's say we had a list called fruits and it contained three items,

4579
00:00:48,430 --> 00:00:50,320
apple, peach, and pear.

4580
00:00:51,370 --> 00:00:55,660
If we wanted to access each item in this list individually and print it out one

4581
00:00:55,660 --> 00:00:58,390
by one, then we would use a for loop.

4582
00:00:59,290 --> 00:01:01,270
So if we start out with the keyword for,

4583
00:01:01,720 --> 00:01:05,620
and then we give a name to a single item.

4584
00:01:06,250 --> 00:01:09,160
So in this case, we might call it fruit.

4585
00:01:09,880 --> 00:01:12,130
And then we use the in keyword

4586
00:01:12,430 --> 00:01:15,640
and finally the list that we want to loop through,

4587
00:01:16,090 --> 00:01:17,860
which is our fruits here.

4588
00:01:18,580 --> 00:01:23,580
Now we cap it off with a colon and we go on to the next line and notice how it's

4589
00:01:24,730 --> 00:01:25,690
indented there.

4590
00:01:26,770 --> 00:01:31,770
Now I'm going to go ahead and print the value of each of the fruit variables.

4591
00:01:35,080 --> 00:01:36,520
And if I run this code,

4592
00:01:36,580 --> 00:01:41,580
you'll see that it loops through my list of fruits and for each of the fruits

4593
00:01:42,370 --> 00:01:46,540
inside the list, it prints it out into the console,

4594
00:01:46,780 --> 00:01:50,260
apple, peach, pear, in that order. Now,

4595
00:01:50,290 --> 00:01:54,670
the important thing to realize here is that basically you can imagine that

4596
00:01:54,670 --> 00:01:58,170
behind the scenes, what this code is doing is

4597
00:01:58,170 --> 00:02:00,670
it's taking this list of fruits

4598
00:02:01,060 --> 00:02:05,140
and it's a signing a variable name, fruit, to each of them.

4599
00:02:05,260 --> 00:02:09,039
So the first time this runs fruit is equal to apple,

4600
00:02:09,190 --> 00:02:12,100
the second time this runs fruit is equal to peach,

4601
00:02:12,610 --> 00:02:15,160
and we can see this even more clearly

4602
00:02:15,220 --> 00:02:17,650
if you run it through the Thonny IDE,

4603
00:02:17,680 --> 00:02:21,250
which I told you about at the beginning of the course. Now,

4604
00:02:21,280 --> 00:02:25,870
if I go ahead and click on the debug icon and I step into each of the steps,

4605
00:02:26,170 --> 00:02:31,060
you can see first it establishes that we have a list of three strings,

4606
00:02:31,090 --> 00:02:34,750
apple, peach, pear, and then we go into the for loop.

4607
00:02:35,170 --> 00:02:40,120
Now notice on the right here I've got all the variables being accounted for.

4608
00:02:40,420 --> 00:02:43,300
And the first one it's noticed is the variable fruits,

4609
00:02:43,540 --> 00:02:46,870
which holds a list of strings. Now,

4610
00:02:46,930 --> 00:02:49,090
as I continue into the for loop,

4611
00:02:49,510 --> 00:02:53,530
notice how it's going to look through this list of fruits

4612
00:02:54,160 --> 00:02:59,160
and it's going to assign the variable name fruit to each of the items starting

4613
00:03:00,460 --> 00:03:01,930
from the first one apple.

4614
00:03:02,410 --> 00:03:05,950
So now by the time it's reached line 3,

4615
00:03:06,130 --> 00:03:08,260
we've already got this variable called fruit

4616
00:03:08,620 --> 00:03:12,790
that's been assigned to the value of apple. And so at this point,

4617
00:03:12,820 --> 00:03:15,640
printing out the value of this fruit

4618
00:03:15,880 --> 00:03:20,200
it's obviously going to print out apple and you'll see in the next step.

4619
00:03:21,880 --> 00:03:25,000
There we go. Now, once I'm done here,

4620
00:03:25,120 --> 00:03:28,510
then it's going to loop back to the start of the for loop

4621
00:03:28,960 --> 00:03:33,960
and now this variable fruit is going to be assigned to the next value inside the

4622
00:03:34,540 --> 00:03:35,410
list of fruits.

4623
00:03:35,800 --> 00:03:40,180
So now notice how the variable fruit is attached to the value peach,

4624
00:03:40,570 --> 00:03:45,570
and then it continues this and so on and so forth until it prints out each one

4625
00:03:46,720 --> 00:03:47,553
of the fruits.

4626
00:03:49,390 --> 00:03:53,020
And this really emphasizes the most important aspect of loops.

4627
00:03:53,410 --> 00:03:57,940
The loop allows us to execute the same line of code multiple times.

4628
00:03:58,390 --> 00:04:01,600
In this case, we're executing the print statement three times,

4629
00:04:01,960 --> 00:04:05,590
but our for loop isn't limited to just executing a single statement.

4630
00:04:06,010 --> 00:04:08,950
We don't just have to print out the name of an item in the list.

4631
00:04:09,310 --> 00:04:12,460
We can execute a whole block of statements multiple times,

4632
00:04:12,910 --> 00:04:17,769
and we can do many things inside this for loop and by inside, I mean indented.

4633
00:04:18,790 --> 00:04:21,820
So let's say that in addition to printing out the fruit,

4634
00:04:22,240 --> 00:04:26,980
I'm going to write another print statement and I'm going to not only print out

4635
00:04:26,980 --> 00:04:27,940
the name of the fruit,

4636
00:04:28,240 --> 00:04:33,240
but I'm also going to say fruit + + "Pie."

4637
00:04:33,820 --> 00:04:36,940
So when I run this code, what do you think will happen?

4638
00:04:39,730 --> 00:04:44,680
Well, it prints out apple, and then it prints out Apple Pie

4639
00:04:45,220 --> 00:04:49,270
And then it goes back to the start and it assigns the variable fruit to the next

4640
00:04:49,270 --> 00:04:52,360
item, peach peach pie, pear pear pie.

4641
00:04:53,080 --> 00:04:58,080
So this is how we can implement a simple for loop that loops through a list

4642
00:04:58,930 --> 00:05:03,370
and assigns a variable name to each of the items in the list in order,

4643
00:05:03,760 --> 00:05:07,870
and then inside the for loop after the colon, after some indentation,

4644
00:05:08,140 --> 00:05:13,140
we can do something with that temporary variable for each of the items.

4645
00:05:14,470 --> 00:05:19,470
Now I've been talking a lot about the concept of being inside a for loop versus

4646
00:05:20,530 --> 00:05:25,210
being outside a for loop. And this is really, really important.

4647
00:05:25,510 --> 00:05:30,130
Whenever you see a colon say in our if statement that we saw previously,

4648
00:05:30,190 --> 00:05:32,350
or the for loop that we're using here,

4649
00:05:32,860 --> 00:05:35,380
the indentation is really,

4650
00:05:35,380 --> 00:05:38,470
really important because if it's indented,

4651
00:05:38,770 --> 00:05:42,760
then it means that it's inside the for loop and these instructions

4652
00:05:42,820 --> 00:05:47,320
all get carried out for as many times as the for-loop will need to repeat.

4653
00:05:47,920 --> 00:05:52,540
Now, if I decided that I wanted to say print my,

4654
00:05:52,600 --> 00:05:54,250
uh, fruits,

4655
00:05:54,430 --> 00:05:59,430
so my list of fruits up here, and I put it inside my for loop,

4656
00:05:59,510 --> 00:06:03,410
so indented after the for loop, then as you can imagine,

4657
00:06:03,410 --> 00:06:07,160
it's going to print that for as many times as the loop runs,

4658
00:06:07,430 --> 00:06:12,290
which is going to be three because there's three items in our list. Now,

4659
00:06:12,320 --> 00:06:15,800
if I had indented that back to the beginning,

4660
00:06:16,160 --> 00:06:18,860
so now it's no longer inside the for loop,

4661
00:06:19,340 --> 00:06:24,340
then it's only going to print once and it's going to print it after the for 

4662
00:06:24,800 --> 00:06:29,480
loop is done. So notice how it's doing the whole Apple, Apple pie,

4663
00:06:29,480 --> 00:06:32,090
et cetera. And then once the loop is finished,

4664
00:06:32,150 --> 00:06:36,770
then it jumps to the next line and carries out this instruction.

4665
00:06:37,280 --> 00:06:39,500
So the indentation is really, really important,

4666
00:06:39,500 --> 00:06:41,450
and you have to be really careful with this.

4667
00:06:42,620 --> 00:06:44,630
Have a play around with this code

4668
00:06:44,870 --> 00:06:47,300
and if you're still struggling to see how it works

4669
00:06:47,300 --> 00:06:52,160
then move the code over to Thonny and step through each step one at a time and

4670
00:06:52,160 --> 00:06:53,120
see how it works.

4671
00:06:53,600 --> 00:06:57,260
But I hope you're starting to see how loops are really handy at executing an

4672
00:06:57,260 --> 00:06:59,600
instruction over and over and over again,

4673
00:06:59,990 --> 00:07:02,510
getting the computer to save us time and energy.

4674
00:07:03,110 --> 00:07:07,970
A really good example of when loops would come in really handy is,

4675
00:07:08,000 --> 00:07:09,920
you know, how Bart Simpson gets punished

4676
00:07:09,920 --> 00:07:14,450
and it has to write out a sentence over and over again on the Blackboard. Well,

4677
00:07:14,600 --> 00:07:19,070
if only Bart was a programmer, then he would be able to use loops to do this

4678
00:07:19,310 --> 00:07:22,520
and he would be able to chill in the corner. Now,

4679
00:07:22,760 --> 00:07:24,890
once you're happy with this type of for-loop,

4680
00:07:25,190 --> 00:07:28,730
then head over to the next lesson where I've got a coding exercise

4681
00:07:28,940 --> 00:07:31,370
that's going to put your knowledge to the test. All right.

4682
00:07:31,370 --> 00:07:32,150
So I'll see you there.

4683
00:00:00,570 --> 00:00:04,740
Head over to day 5.1, the average height exercise.

4684
00:00:06,000 --> 00:00:09,300
Now the instructions are that you're going to write a program

4685
00:00:09,390 --> 00:00:13,470
that's going to calculate the average student height from a list of heights.

4686
00:00:13,830 --> 00:00:14,880
So for example,

4687
00:00:14,940 --> 00:00:18,420
let's say we had a list of student heights that looks something like this,

4688
00:00:18,780 --> 00:00:21,150
then you're going to be using a for loop,

4689
00:00:21,420 --> 00:00:24,030
hopefully, to figure out the average.

4690
00:00:24,690 --> 00:00:29,160
And the average can be calculated by adding up everybody's height and then dividing

4691
00:00:29,160 --> 00:00:31,770
it by the number of students inside the list.

4692
00:00:32,369 --> 00:00:35,730
And then I want you to round it to the nearest whole number.

4693
00:00:37,620 --> 00:00:38,010
Now,

4694
00:00:38,010 --> 00:00:40,350
notice how we've got some starting code here.

4695
00:00:40,590 --> 00:00:45,590
And this is just for us to be able to input a list of student heights for testing

4696
00:00:46,200 --> 00:00:50,160
and see if your code actually works. So if you go ahead and run the code,

4697
00:00:50,430 --> 00:00:54,180
then you'll notice that it asks you for a list of student heights.

4698
00:00:54,660 --> 00:00:57,410
And the input is going to look something like this.

4699
00:00:57,420 --> 00:01:00,810
They're just going to be a bunch of numbers separated by a space.

4700
00:01:01,140 --> 00:01:04,560
So if I go ahead and paste that in there, then I hit enter,

4701
00:01:04,890 --> 00:01:09,890
then notice how this line on line five is going to print it out just as a normal

4702
00:01:10,380 --> 00:01:13,290
list full of numbers. Now,

4703
00:01:13,320 --> 00:01:17,040
Python has some really useful functions as we've seen.

4704
00:01:17,100 --> 00:01:22,100
We've seen that we could use the len function to calculate the size of a

4705
00:01:22,770 --> 00:01:23,760
particular list.

4706
00:01:24,180 --> 00:01:28,440
So if I go ahead and print my length of student heights,

4707
00:01:29,490 --> 00:01:32,160
and then I paste my student heights in here,

4708
00:01:32,490 --> 00:01:37,080
then you can see that I get five printed by calculating the number of items in

4709
00:01:37,080 --> 00:01:41,310
here. Now, Python also has something called sum,

4710
00:01:41,820 --> 00:01:46,820
and this gives us the total of all the items from a list.

4711
00:01:48,330 --> 00:01:51,840
So in this case, all of these added up would be 857.

4712
00:01:52,590 --> 00:01:53,760
Now your job though,

4713
00:01:53,790 --> 00:01:58,140
is to figure out how these functions actually work under the hood.

4714
00:01:58,680 --> 00:02:01,020
In order to fully complete this challenge,

4715
00:02:01,440 --> 00:02:06,180
you can't use the len function or the sum function.

4716
00:02:06,510 --> 00:02:11,190
Instead, you have to figure out another way through the use of for loops

4717
00:02:11,580 --> 00:02:15,720
where you can add each of the items inside the list together,

4718
00:02:16,320 --> 00:02:21,320
and you can use a for loop to figure out how many items there are in this list

4719
00:02:22,470 --> 00:02:27,470
and use that to calculate the average. So you can't use either of these

4720
00:02:27,510 --> 00:02:28,343
functions

4721
00:02:28,560 --> 00:02:32,130
and instead, you have to rely on what you learned in the last lesson to complete

4722
00:02:32,130 --> 00:02:36,360
this challenge. So have a think about it, and once you are ready, give that a go.

4723
00:02:42,980 --> 00:02:43,250
Now,

4724
00:02:43,250 --> 00:02:46,460
we know that we can't use either of these functions,

4725
00:02:46,520 --> 00:02:50,330
the sum function or the length function, because if we could,

4726
00:02:50,360 --> 00:02:54,620
then this challenge would be super easy and we would be able to calculate the

4727
00:02:54,620 --> 00:02:58,910
average by getting the total height, by getting the

4728
00:02:59,890 --> 00:03:03,100
sum of all of the items inside student heights.

4729
00:03:03,610 --> 00:03:06,610
And then we can calculate the number of students

4730
00:03:09,040 --> 00:03:10,930
by using the length function

4731
00:03:10,990 --> 00:03:14,620
to calculate the number of items inside the list.

4732
00:03:15,070 --> 00:03:16,810
And then we would get the average height

4733
00:03:19,000 --> 00:03:22,900
by dividing the total height by the numbers of students.

4734
00:03:23,230 --> 00:03:28,230
And then we would be able to round this value off and print it out.

4735
00:03:30,520 --> 00:03:34,390
But this, as you noticed, doesn't use a single for loop.

4736
00:03:34,750 --> 00:03:37,990
And the last thing we learned about was a for loop.

4737
00:03:38,080 --> 00:03:43,080
So this is definitely not the right way to solve the challenge. It works,

4738
00:03:43,360 --> 00:03:48,360
but what I wanted you to do is to figure out how the sum and the len functions

4739
00:03:48,940 --> 00:03:52,960
work under the hood. How is it actually implemented?

4740
00:03:53,560 --> 00:03:56,530
And to do that, we have to use a for loop.

4741
00:03:56,920 --> 00:04:00,340
So let's have a think about how we would first tackle this one,

4742
00:04:00,940 --> 00:04:05,940
where we get the total of all the items inside student heights.

4743
00:04:06,970 --> 00:04:11,970
So we basically want to add each of them together until we get the total.

4744
00:04:12,730 --> 00:04:16,839
Now, we can do this by simply using a for loop as you've learned in the last

4745
00:04:16,839 --> 00:04:20,649
lesson. So if we start off total_height as zero,

4746
00:04:21,160 --> 00:04:26,160
and then we write a for loop and we say for height in student_heights,

4747
00:04:29,350 --> 00:04:30,850
and then we add a colon,

4748
00:04:31,540 --> 00:04:35,350
then now we're going to loop through each of the heights inside this list

4749
00:04:35,620 --> 00:04:37,930
and we're going to add it to our total height.

4750
00:04:38,200 --> 00:04:43,200
So we can say total_height equals previous value of total_height plus height.

4751
00:04:44,170 --> 00:04:45,730
Or as you might remember,

4752
00:04:45,760 --> 00:04:50,740
the shortened version of this is just total height plus equals each of the

4753
00:04:50,740 --> 00:04:51,573
heights.

4754
00:04:51,790 --> 00:04:56,790
So now we can go ahead and check whether if this works by printing out the final

4755
00:04:57,970 --> 00:05:02,410
value of total_height. And notice how I'm doing it outside the loop

4756
00:05:02,530 --> 00:05:05,500
by making sure that it's not indented like this.

4757
00:05:05,980 --> 00:05:10,980
So let's run our code and I'm going to paste in those numbers as the demo

4758
00:05:12,310 --> 00:05:15,340
numbers. And then we get the value

4759
00:05:15,340 --> 00:05:20,230
total_height is 857, which if you take a calculator,

4760
00:05:20,560 --> 00:05:23,170
you'll be able to verify its exactly right.

4761
00:05:23,980 --> 00:05:27,940
So now we've basically replicated how the sum function works.

4762
00:05:28,450 --> 00:05:31,900
And now that we can try and replicate how the len function works.

4763
00:05:32,380 --> 00:05:32,920
We know that

4764
00:05:32,920 --> 00:05:37,630
basically the len function figures out how many items are in a particular list.

4765
00:05:38,200 --> 00:05:42,490
How can we do this using a for loop instead? Well,

4766
00:05:42,490 --> 00:05:46,360
what if we do something similar to what we did above where we start off the

4767
00:05:46,360 --> 00:05:48,340
numbers of students as zero,

4768
00:05:48,820 --> 00:05:53,820
and then we write a for loop for students in student heights, and inside our for

4769
00:05:55,450 --> 00:05:55,990
loop

4770
00:05:55,990 --> 00:06:00,990
all that we do is that we add one to our numbers of students each time

4771
00:06:02,600 --> 00:06:06,440
our for loop runs. And if you remember from the last lesson,

4772
00:06:06,440 --> 00:06:11,440
I said that the for loop will run for as many times as there are items inside

4773
00:06:12,320 --> 00:06:15,440
the list. If there are five items inside the list,

4774
00:06:15,740 --> 00:06:18,530
then the for loop is going to run five times,

4775
00:06:18,770 --> 00:06:22,220
which means this line of code is going to be called five times,

4776
00:06:22,460 --> 00:06:26,450
which means we add five to our numbers of students

4777
00:06:26,750 --> 00:06:30,140
and we end up with the total_length of the list.

4778
00:06:31,070 --> 00:06:36,070
So now let's go ahead and print this number of students out and run our code.

4779
00:06:38,300 --> 00:06:40,310
And I'm going to paste in the same

4780
00:06:40,310 --> 00:06:43,580
five numbers in the example input.

4781
00:06:44,180 --> 00:06:49,180
And you can see that the first value that comes out is my total height,

4782
00:06:49,760 --> 00:06:54,050
the second value is the length of the list, the number of items in the list

4783
00:06:54,080 --> 00:06:58,550
which is five, we can verify that. And the final one is the average

4784
00:06:58,610 --> 00:07:00,740
which matches up with the example output.

4785
00:07:01,310 --> 00:07:05,720
So now let's get rid of our print statements by commenting them out.

4786
00:07:08,210 --> 00:07:08,510
Now,

4787
00:07:08,510 --> 00:07:12,290
one of the things I want to point out to you that you might've noticed is that

4788
00:07:12,620 --> 00:07:17,150
in the first for loop, even though we're looping through the same list,

4789
00:07:17,600 --> 00:07:20,150
I've called each of the items height.

4790
00:07:20,600 --> 00:07:24,140
And in the second for-loop I've called them students. Now,

4791
00:07:24,140 --> 00:07:29,030
whatever we name each of the items inside the list, it's totally up to you.

4792
00:07:29,030 --> 00:07:32,240
If you could call it h, you could call it x,

4793
00:07:32,270 --> 00:07:34,700
you could call it basically anything you want

4794
00:07:35,030 --> 00:07:38,780
as long as you are consistent with using it inside the for loop.

4795
00:07:39,260 --> 00:07:42,200
So if you're calling each of the items inside the list

4796
00:07:42,320 --> 00:07:45,530
h, then when you're using it inside the for loop,

4797
00:07:45,530 --> 00:07:47,660
when you're modifying it or doing something with it,

4798
00:07:47,960 --> 00:07:50,870
then you are going to refer to it by the same name. Now,

4799
00:07:51,020 --> 00:07:54,380
usually it's a good idea to give it the name

4800
00:07:54,620 --> 00:07:59,180
which is the singular form of each of the items in the list.

4801
00:07:59,540 --> 00:08:04,520
For example, previously, we had a list of fruits. So each item was called fruit,

4802
00:08:04,580 --> 00:08:08,480
the singular form. And in this case, we have a bunch of heights,

4803
00:08:08,750 --> 00:08:12,560
so each of them I've called height. In the second for loop

4804
00:08:12,740 --> 00:08:17,030
I've decided to call each of the items a student. Now, in this case,

4805
00:08:17,360 --> 00:08:21,380
even though you have two for loops, you can call them the same thing.

4806
00:08:21,950 --> 00:08:26,360
But sometimes I find it a little bit confusing to have the same name in two

4807
00:08:26,360 --> 00:08:29,780
for loops. I prefer it this way, but it's totally up to you.

4808
00:08:30,050 --> 00:08:34,850
Just follow the good practice of using a singular form of whatever is contained

4809
00:08:34,850 --> 00:08:37,549
in a list when you write a for loop like this,

4810
00:08:37,730 --> 00:08:39,320
and you'll have less trouble down the line.

4811
00:00:00,030 --> 00:00:02,850
So now that you've gotten a taste for for loops,

4812
00:00:03,120 --> 00:00:05,670
it's time to complete another challenge

4813
00:00:05,880 --> 00:00:10,880
which is going to stretch you a little bit further. Head over to day 5.2 highest

4814
00:00:12,060 --> 00:00:12,893
score,

4815
00:00:13,350 --> 00:00:17,640
and we're going to get a list of students scores,

4816
00:00:18,210 --> 00:00:20,700
and it's a list of numbers again.

4817
00:00:21,390 --> 00:00:23,760
The idea is that you are going to write some code

4818
00:00:24,060 --> 00:00:27,690
that's going to output the highest score in the class.

4819
00:00:28,050 --> 00:00:30,150
So you're going to look through this list

4820
00:00:30,420 --> 00:00:35,420
using a for loop and figure out which of the scores inside the list is the

4821
00:00:36,090 --> 00:00:40,470
highest value. Now we can see pretty much at a glance that inside this list,

4822
00:00:40,500 --> 00:00:44,670
91 is the highest. But remember that when you test your code,

4823
00:00:45,090 --> 00:00:49,200
you won't be able to see the input. So you won't be able to cheat that way.

4824
00:00:49,650 --> 00:00:54,480
Instead, you have to do this using code. Now, just as in the last lesson

4825
00:00:54,480 --> 00:00:58,560
I mentioned that Python has some pretty useful functions that help us do a lot

4826
00:00:58,560 --> 00:01:01,890
of these commonly needed things very easily

4827
00:01:02,100 --> 00:01:05,580
such as the sum and the len functions, well, in this case,

4828
00:01:05,910 --> 00:01:08,700
there's actually something called the max function.

4829
00:01:09,240 --> 00:01:11,400
So if we pass a list,

4830
00:01:11,460 --> 00:01:15,810
let's say the student_scores list into a max function

4831
00:01:16,290 --> 00:01:21,290
and then I go ahead and print out the maximum value from my list of student_

4832
00:01:22,590 --> 00:01:26,700
scores. So let's run this code and I'm going to use the example input,

4833
00:01:26,970 --> 00:01:31,500
so a bunch of numbers separated by a space, and hit enter,

4834
00:01:31,920 --> 00:01:35,190
and you can see it tells me that 91 is the highest value.

4835
00:01:35,760 --> 00:01:38,340
Now there's also the min function

4836
00:01:38,820 --> 00:01:43,560
which basically will give me the lowest value inside a particular list,

4837
00:01:43,830 --> 00:01:47,850
which in this case is 55, but that's too easy.

4838
00:01:48,330 --> 00:01:52,530
I don't want you to use the max or the min functions. Instead,

4839
00:01:52,740 --> 00:01:57,210
you have to use what you've learned about for loops to replicate the underlying

4840
00:01:57,210 --> 00:02:00,150
functionality of this max function.

4841
00:02:00,600 --> 00:02:04,530
Because people tend to use Python to do a lot of data manipulation,

4842
00:02:04,710 --> 00:02:07,020
to do a lot of mathematical calculations.

4843
00:02:07,260 --> 00:02:09,690
It has a lot of these convenient functions for you.

4844
00:02:10,169 --> 00:02:14,130
But let's say you moved to a different language and you work on something else,

4845
00:02:14,220 --> 00:02:15,540
then these might not exist.

4846
00:02:15,900 --> 00:02:20,070
So understanding the underlying logic and being able to write out the code

4847
00:02:20,340 --> 00:02:24,780
using things that every programming language has like the for loop will mean

4848
00:02:24,780 --> 00:02:28,440
that you will become a much, much better programmer in the process.

4849
00:02:28,980 --> 00:02:33,980
So try and replicate the functionality of the max function and the output should

4850
00:02:34,470 --> 00:02:35,340
have the words

4851
00:02:35,580 --> 00:02:40,580
The highest score in the class is : and then a space and then the actual max

4852
00:02:42,900 --> 00:02:47,010
value. So this is what should happen. Pause the video now,

4853
00:02:47,040 --> 00:02:51,510
and have a think about how you would write your code in order to get hold of the

4854
00:02:51,510 --> 00:02:53,130
maximum value from a list.

4855
00:02:57,990 --> 00:03:01,480
All right. So did you manage to complete this challenge? If not,

4856
00:03:01,600 --> 00:03:05,470
and if you want to see how I do it, then continue watching along.

4857
00:03:06,610 --> 00:03:10,960
The first thing we want to do is we probably want to get a hold of each of the

4858
00:03:10,960 --> 00:03:14,140
scores inside our list of student scores.

4859
00:03:14,560 --> 00:03:18,520
So I'm going to write something like for score in student_scores,

4860
00:03:19,060 --> 00:03:19,630
so again,

4861
00:03:19,630 --> 00:03:24,520
keeping that convention of singular from plural. Now,

4862
00:03:24,610 --> 00:03:27,370
inside the loop, what can I do? Now

4863
00:03:27,370 --> 00:03:30,280
let's say I had a variable called the highest_score,

4864
00:03:30,820 --> 00:03:35,800
and I'm going to start it off as zero. And then inside my loop,

4865
00:03:35,950 --> 00:03:40,950
I can use an if statement to check, well is the current score that I'm looping

4866
00:03:42,220 --> 00:03:46,540
through greater than the highest score that I've got.

4867
00:03:47,200 --> 00:03:51,760
Well then if so, that means that this current score should actually be the

4868
00:03:51,760 --> 00:03:52,593
highest score.

4869
00:03:52,960 --> 00:03:57,550
So I can set my highest_score to equal,

4870
00:03:57,580 --> 00:04:01,210
single equals mean assign, double equals mean checking, remember?

4871
00:04:01,900 --> 00:04:06,900
And this loop will continue running until I've checked through all the scores

4872
00:04:08,110 --> 00:04:09,910
inside my student_scores,

4873
00:04:10,360 --> 00:04:13,780
and I've got the highest score stored inside this variable.

4874
00:04:14,290 --> 00:04:18,190
So now I can go ahead and print the sentence;

4875
00:04:19,089 --> 00:04:22,930
The highest score is this particular value.

4876
00:04:22,990 --> 00:04:27,990
So I'm going to use an f-string to insert my highest_score variable inside here.

4877
00:04:30,760 --> 00:04:35,530
And if I run my code and use this example input, then you can see

4878
00:04:35,530 --> 00:04:38,410
it tells me the high score in the class is 91,

4879
00:04:38,860 --> 00:04:42,790
which matches exactly with the example output. Now,

4880
00:04:42,820 --> 00:04:46,360
if you're at all confused about how this code works,

4881
00:04:46,660 --> 00:04:50,290
then I recommend again, pasting it into Thonny like this.

4882
00:04:50,320 --> 00:04:55,320
So you've got a list of scores and then you've got the code in the solution and

4883
00:04:55,450 --> 00:04:56,350
click on debug.

4884
00:04:56,560 --> 00:05:01,560
And you can see how we actually step through each of the stages where we start

4885
00:05:02,830 --> 00:05:07,240
off with a highest score being equal to zero, so that's where it is,

4886
00:05:08,320 --> 00:05:13,320
and then we continue into the loop where we go through each of the scores inside

4887
00:05:13,930 --> 00:05:17,890
the student_scores, so the first one is going to be 78.

4888
00:05:18,490 --> 00:05:22,960
So now we've got this variable score which is tied to the value of 78.

4889
00:05:23,470 --> 00:05:27,100
And then we go and check if the score,

4890
00:05:27,640 --> 00:05:32,560
which is 78, is greater than the highest score, which is zero. Well,

4891
00:05:32,560 --> 00:05:36,070
that's obviously true, right? So if that's true,

4892
00:05:36,070 --> 00:05:38,230
then it's going to carry out the next line of code,

4893
00:05:38,620 --> 00:05:42,220
which is that the highest score is now equal to score.

4894
00:05:42,910 --> 00:05:47,910
So now notice how this highest_score variable is going to update to the first

4895
00:05:49,150 --> 00:05:51,940
value because 78 is greater than zero.

4896
00:05:52,480 --> 00:05:55,990
Now we go back to the start of the loop and we go to the next value,

4897
00:05:55,990 --> 00:06:00,990
65. And 65 is now checked against the highest score. Is 65 greater than 78?

4898
00:06:04,430 --> 00:06:07,340
Well, no, that's not true. So this is false.

4899
00:06:07,640 --> 00:06:12,640
And so the highest score is left alone. And we continue back to the next value.

4900
00:06:13,130 --> 00:06:18,130
So now our score is equal to 89 and our highest_score is still equal to 78. Is 89

4901
00:06:20,750 --> 00:06:22,730
greater than 78? Yes.

4902
00:06:22,790 --> 00:06:27,290
So now we reset the highest_score to the new value,

4903
00:06:27,620 --> 00:06:28,730
which is 89.

4904
00:06:29,030 --> 00:06:34,030
And it continues this loop until it gets to the end and it's found the highest

4905
00:06:34,220 --> 00:06:37,430
value and it prints it out into the console.

4906
00:06:38,240 --> 00:06:42,410
Play around with the debug and step through each of the stages to see how it

4907
00:06:42,410 --> 00:06:46,340
works and compare it with what's happening with each of the variables on the

4908
00:06:46,340 --> 00:06:47,810
right. This is a really,

4909
00:06:47,810 --> 00:06:51,620
really useful way of wrapping your head around all of this complex,

4910
00:06:51,620 --> 00:06:56,480
looping and conditionals. And once you've understood everything that's going on,

4911
00:06:56,660 --> 00:07:00,830
then you can continue to the next lesson where we're going to talk about another

4912
00:07:00,830 --> 00:07:05,030
type of for loop, the for loop using a range operator.

4913
00:07:05,210 --> 00:07:08,000
So for all of that and more, I'll see you in the next lesson.

4914
00:00:00,580 --> 00:00:01,960
Now up to this point,

4915
00:00:01,990 --> 00:00:06,640
we've only been using for loops in association with lists.

4916
00:00:07,030 --> 00:00:11,830
So we've been looping through the list and getting hold of each of the items in

4917
00:00:11,830 --> 00:00:14,200
the list and then doing something with it, right?

4918
00:00:14,740 --> 00:00:18,940
But we're not always going to be working with lists and using for loops.

4919
00:00:19,390 --> 00:00:23,920
Sometimes we might want to use a loop completely independent of a list.

4920
00:00:24,640 --> 00:00:29,080
And a good example of this is when Carl Gauss the German

4921
00:00:29,080 --> 00:00:32,380
mathematician was just a child when he was 10 years old,

4922
00:00:32,710 --> 00:00:36,790
his math teacher gave him an exercise that she probably thought would tie him up

4923
00:00:36,790 --> 00:00:37,623
for it a little while.

4924
00:00:38,080 --> 00:00:43,080
And the idea was to get him to add all of the numbers from 1 to 100.

4925
00:00:43,990 --> 00:00:47,470
So 1 + 2 + 3 + 4 + 5, et cetera,

4926
00:00:47,710 --> 00:00:49,660
all the way until a hundred.

4927
00:00:50,500 --> 00:00:54,010
And even though she thought this would keep him busy for an hour or so getting

4928
00:00:54,010 --> 00:00:58,000
this young child to add up these numbers and I can have some peace and quiet

4929
00:00:58,000 --> 00:00:59,020
scrolling on Facebook,

4930
00:00:59,440 --> 00:01:03,160
but unfortunately he came back to her within two minutes and gave her the

4931
00:01:03,160 --> 00:01:06,880
answer. So how did he work it out? Well,

4932
00:01:06,910 --> 00:01:11,140
here's actually a really smart kid and he figured out that if you flip the

4933
00:01:11,140 --> 00:01:14,560
numbers around, so 100 + 99 + 98,

4934
00:01:14,950 --> 00:01:17,650
and you'll look at both of these two lines,

4935
00:01:17,980 --> 00:01:21,700
you can see that 1 + 100 = 101, 2

4936
00:01:21,700 --> 00:01:26,410
+ 99 = 101, 3 + 98 = 101, basically,

4937
00:01:26,410 --> 00:01:28,450
if you tie all of these numbers together,

4938
00:01:28,720 --> 00:01:31,690
there's actually 50 pairs of 101.

4939
00:01:31,960 --> 00:01:36,960
So he could simply just do 50 multiplied by 101 which is 5,050.

4940
00:01:38,080 --> 00:01:39,790
And that's how he figured out the answer.

4941
00:01:40,450 --> 00:01:45,450
But we can actually outshine Gaus because we can do this calculation in less

4942
00:01:45,670 --> 00:01:50,230
than a minute, just by writing a few lines of code. But in order to do this,

4943
00:01:50,380 --> 00:01:55,380
we first have to learn about using for loops with the range function.

4944
00:01:56,770 --> 00:02:00,460
Now the range function is something that is really, really helpful

4945
00:02:00,760 --> 00:02:04,510
if you want to generate a range of numbers to loop through.

4946
00:02:05,290 --> 00:02:08,229
And the syntax looks something like this.

4947
00:02:08,410 --> 00:02:12,940
So we've still got our for and our in keywords highlighted in blue,

4948
00:02:13,570 --> 00:02:16,540
but instead of looping through a list,

4949
00:02:17,050 --> 00:02:21,910
we define how our loop is going to work by creating a range.

4950
00:02:22,300 --> 00:02:23,050
So in this case,

4951
00:02:23,050 --> 00:02:28,050
I'm creating a range between a and b and then I'm going to get hold of each

4952
00:02:29,050 --> 00:02:32,320
number in that range and do something with that number.

4953
00:02:33,700 --> 00:02:38,200
So for example, if I wrote for number in range,

4954
00:02:38,560 --> 00:02:42,130
and then my range is going to be 1, 10.

4955
00:02:42,520 --> 00:02:46,510
So this is going to be the range that I'm going to create between 1 and 10

4956
00:02:46,870 --> 00:02:50,470
and then I want to get hold of each of the numbers inside that range.

4957
00:02:50,980 --> 00:02:55,810
And this is going to be between 1 and 10 and not including 10.

4958
00:02:56,170 --> 00:03:00,340
So if I go ahead and print out the number that I create from my for loop,

4959
00:03:00,820 --> 00:03:05,800
then you'll see that what happens is it prints 1 2 3 4 5 

4960
00:03:05,800 --> 00:03:10,210
6 7 8 9, but not the last digit, which I've included here.

4961
00:03:10,660 --> 00:03:14,680
So if I wanted all of the numbers from 1 to 10,

4962
00:03:15,010 --> 00:03:17,920
I actually have to set a range between 1 and 11.

4963
00:03:18,610 --> 00:03:20,230
And now when you run the code,

4964
00:03:20,290 --> 00:03:23,050
you can see that it goes from 1 all the way up to 10.

4965
00:03:24,580 --> 00:03:26,320
Now by default,

4966
00:03:26,380 --> 00:03:31,380
the range function will step through all the numbers from the start to the end,

4967
00:03:32,710 --> 00:03:35,170
and it will increase by 1. Now,

4968
00:03:35,170 --> 00:03:37,870
if you want it to increase by any other number,

4969
00:03:38,020 --> 00:03:43,020
then you have to add another comma to the end of it and specify how large you

4970
00:03:44,140 --> 00:03:48,910
want the step to be. So let's say we changed the step size to three.

4971
00:03:49,390 --> 00:03:51,610
Now, if I rerun the same code,

4972
00:03:51,850 --> 00:03:55,930
you'll see that it goes from one and then it steps by three to four and then it

4973
00:03:55,930 --> 00:03:59,260
steps by three. And then it steps by three, finally to 10.

4974
00:04:01,000 --> 00:04:04,180
Now let's come back to the problem that I mentioned at the beginning of this

4975
00:04:04,180 --> 00:04:05,013
lesson.

4976
00:04:05,170 --> 00:04:10,170
How can we add up all of the numbers from 1 to 100 by using code?

4977
00:04:10,720 --> 00:04:11,020
Well,

4978
00:04:11,020 --> 00:04:14,590
it's going to involve a for loop and it's going to involve the range function

4979
00:04:15,070 --> 00:04:20,070
because we're going to get hold of every number in the range between 1 and

4980
00:04:20,769 --> 00:04:21,490
100,

4981
00:04:21,490 --> 00:04:26,050
so we need to write 101. Once we've got hold of all of these numbers,

4982
00:04:26,110 --> 00:04:29,830
it's as simple as using a accumulator,

4983
00:04:29,860 --> 00:04:34,810
so let's say a total = 0. And then inside the for loop,

4984
00:04:34,810 --> 00:04:36,100
so that means indented,

4985
00:04:36,370 --> 00:04:41,370
we're going to say total += number.

4986
00:04:43,090 --> 00:04:48,090
So now it's going to add every number in this range to the total starting from

4987
00:04:48,790 --> 00:04:49,623
zero.

4988
00:04:49,900 --> 00:04:54,760
And this is basically going to give us the sum of every number from 1 to 100.

4989
00:04:55,150 --> 00:04:59,770
So let's go ahead and print it out and see if it matches Gauss's value.

4990
00:05:01,690 --> 00:05:04,570
And there you have it 5,050.

4991
00:05:05,440 --> 00:05:09,160
So now that we've beaten Gauss at his own game of math using programming,

4992
00:05:09,430 --> 00:05:13,240
let's head over to the next lesson and try to complete a challenge using the

4993
00:05:13,240 --> 00:05:17,770
range function to see if you managed to internalize and understand everything we

4994
00:05:17,770 --> 00:05:21,760
talked about in this lesson. So for all of that and more, I'll see you there.

4995
00:00:00,120 --> 00:00:03,540
Click on 5.3 adding evens.

4996
00:00:05,190 --> 00:00:10,190
The exercise is kind of similar to what Gauss had to do that I showed you in the

4997
00:00:11,610 --> 00:00:13,890
last lesson, but in your case,

4998
00:00:14,070 --> 00:00:19,070
I want you to calculate the sum of all the even numbers from 1 to 100,

4999
00:00:20,310 --> 00:00:24,150
including 1 and 100. So for example,

5000
00:00:24,150 --> 00:00:26,730
it might be two plus four plus six plus eight,

5001
00:00:26,760 --> 00:00:29,640
and so on and so forth until you get to a hundred.

5002
00:00:30,210 --> 00:00:34,260
It's a little bit more complicated than what the ten-year-old had to do.

5003
00:00:34,680 --> 00:00:38,280
And the important thing to remember is that there should only be one print

5004
00:00:38,280 --> 00:00:40,170
statement in your output.

5005
00:00:40,410 --> 00:00:44,940
It should just print the final total and not every step of the calculation.

5006
00:00:45,720 --> 00:00:48,270
So have a think about how you might solve this challenge,

5007
00:00:48,660 --> 00:00:50,610
pause the video and try to give this a go.

5008
00:00:56,450 --> 00:00:56,750
All right.

5009
00:00:56,750 --> 00:01:00,590
So there's actually quite a few ways that you could have solved this challenge.

5010
00:01:01,160 --> 00:01:01,400
Now,

5011
00:01:01,400 --> 00:01:05,480
one of the ways would have been using what we learned from the last lesson and the

5012
00:01:05,480 --> 00:01:09,680
ability to create a range function using a different step size.

5013
00:01:09,920 --> 00:01:10,753
I'll show you what I mean.

5014
00:01:11,150 --> 00:01:16,150
So let's create a full loop where we say for every number in the range between

5015
00:01:16,970 --> 00:01:20,030
1 to 100, so that's 101,

5016
00:01:20,720 --> 00:01:24,110
then we're going to do something with each number, right? Namely,

5017
00:01:24,110 --> 00:01:27,200
we're probably going to create a variable called total

5018
00:01:27,590 --> 00:01:32,590
and then we're going to add each of the even numbers together and accumulate it

5019
00:01:32,930 --> 00:01:34,190
inside this variable.

5020
00:01:34,940 --> 00:01:39,590
Now remember that I mentioned that the range function actually has a third thing

5021
00:01:39,590 --> 00:01:42,920
that you can add to it, not just the start and the end,

5022
00:01:43,160 --> 00:01:47,210
but also the step size. so we can change the step size to two,

5023
00:01:47,660 --> 00:01:52,660
and then now what it's going to do is it's going to go through 1 to 100 and

5024
00:01:54,440 --> 00:01:57,230
it's going to increase the step size by two.

5025
00:01:58,490 --> 00:02:01,820
So that means if we print this range as it is right now,

5026
00:02:01,880 --> 00:02:06,560
it's going to give us one plus two which is three, plus two

5027
00:02:06,560 --> 00:02:08,840
which is five and so on and so forth.

5028
00:02:09,259 --> 00:02:12,560
But if we change the range to start off from two

5029
00:02:12,710 --> 00:02:16,640
which is the first number that we have to start adding in our sequence, and then

5030
00:02:16,640 --> 00:02:18,860
increase it by two every single time,

5031
00:02:19,130 --> 00:02:23,570
then we end up with a range that includes all of the even numbers up to a

5032
00:02:23,570 --> 00:02:26,510
hundred. And I'll show you if I run this code right now.

5033
00:02:27,290 --> 00:02:32,000
So the next part is simple. All we have to do is to add the number to

5034
00:02:32,000 --> 00:02:35,420
the current total. So total += number.

5035
00:02:35,900 --> 00:02:38,570
And then finally outside the for loop,

5036
00:02:38,720 --> 00:02:42,230
you can go ahead and print that total. Now,

5037
00:02:42,380 --> 00:02:46,490
when I go ahead and run this code now, it's going to give me just the total.

5038
00:02:46,850 --> 00:02:50,960
Now remember that the indentation really matters because if I have it like this,

5039
00:02:51,260 --> 00:02:54,800
then it's going to give me the total for every step of the calculation,

5040
00:02:55,100 --> 00:03:00,100
because it's now included in the for loop and will be executed for as many times

5041
00:03:00,910 --> 00:03:05,350
as the for loop runs. But if I remove the indentation, then the

5042
00:03:05,350 --> 00:03:08,680
for loop is just this and this is outside of it

5043
00:03:08,920 --> 00:03:12,160
so it's only going to give it to me once everything has been done

5044
00:03:12,280 --> 00:03:16,360
and I've got the final total. And it's the correct solution.

5045
00:03:17,140 --> 00:03:19,870
But you might have also done it in a different way.

5046
00:03:20,200 --> 00:03:23,370
You might have said for a number in range,

5047
00:03:24,090 --> 00:03:25,860
1 to 101,

5048
00:03:26,820 --> 00:03:31,820
and you had some sort of another total, let's call it total2 

5049
00:03:34,200 --> 00:03:35,460
and started at zero,

5050
00:03:35,880 --> 00:03:40,880
and then we say that if the number % 2 is equal to 0,

5051
00:03:41,970 --> 00:03:44,490
so if it's even essentially,

5052
00:03:44,730 --> 00:03:49,350
then we're going to add this number to the total2.

5053
00:03:51,060 --> 00:03:54,480
Finally, outside of the if and outside of the for,

5054
00:03:54,750 --> 00:03:58,620
we're going to print the final total. Now,

5055
00:03:58,650 --> 00:04:01,140
if I just run the code, then you can see

5056
00:04:01,200 --> 00:04:04,350
I get exactly the same number as before.

5057
00:04:05,310 --> 00:04:09,240
So if you chose to solve this challenge in either of these ways,

5058
00:04:09,270 --> 00:04:11,910
then you've succeeded. They're both right.

5059
00:04:12,390 --> 00:04:15,180
And there's probably even other ways that you could solve this as well.

5060
00:04:15,480 --> 00:04:18,570
But these two, I suspect will be the most popular approaches.

5061
00:04:19,769 --> 00:04:24,150
Now in the next lesson, I've got another coding exercise for you

5062
00:04:24,330 --> 00:04:29,160
and it's probably one of the top interview questions that programmers get asked

5063
00:04:29,220 --> 00:04:34,020
when they're being interviewed for a job. So head over there and give it a go.

5064
00:00:00,180 --> 00:00:03,300
All right guys, I've got a fun coding challenge for you today,

5065
00:00:03,570 --> 00:00:06,450
and it is a problem called fizzbuzz.

5066
00:00:06,960 --> 00:00:11,910
Now this is probably one of the most asked questions at interviews for

5067
00:00:11,910 --> 00:00:14,910
programmers because it tests the way that you think,

5068
00:00:15,150 --> 00:00:20,150
and it allows the interviewer to see how you use your logic to solve a problem.

5069
00:00:21,840 --> 00:00:24,960
And the problem we're going to tackle is a children's game called

5070
00:00:24,960 --> 00:00:29,850
Fizzbuzz. Last time I checked the programmatic solution was actually up on

5071
00:00:29,850 --> 00:00:30,540
Wikipedia.

5072
00:00:30,540 --> 00:00:34,920
So I recommend reading the Wikipedia article only after you've solved this

5073
00:00:34,920 --> 00:00:38,280
Programming challenge. The rules of fizzbuzz are really simple.

5074
00:00:38,910 --> 00:00:42,990
Basically, you have a bunch of kids who sit around in a circle and going

5075
00:00:42,990 --> 00:00:46,680
clockwise. The first kid says 1, the second kid says 2.

5076
00:00:47,100 --> 00:00:51,810
But then when a kid encounters a number that's fully divisible by three,

5077
00:00:52,320 --> 00:00:55,920
then instead of saying that number, he's going to say Fizz.

5078
00:00:57,180 --> 00:00:59,310
And when the number is divisible by five,

5079
00:00:59,610 --> 00:01:02,220
instead of saying the number, they should say Buzz.

5080
00:01:02,820 --> 00:01:06,900
And if the number is divisible by both three and five, for example, 15,

5081
00:01:07,200 --> 00:01:08,940
then they should say Fizzbuzz.

5082
00:01:09,420 --> 00:01:14,420
So your program is going to replicate this for all the numbers up to and

5083
00:01:14,610 --> 00:01:18,840
including a hundred. To start off, it will probably look something like this.

5084
00:01:18,900 --> 00:01:20,970
It's going to print one, and then on the next line

5085
00:01:20,970 --> 00:01:23,130
it will print two and then fizz,

5086
00:01:23,160 --> 00:01:27,030
because three is divisible by three. And then four,

5087
00:01:27,210 --> 00:01:29,760
and then five is divisible by five so it's a buzz.

5088
00:01:30,390 --> 00:01:34,980
And then six is fizz because it's divisible by three and so on and so forth.

5089
00:01:35,460 --> 00:01:39,030
This is what your program has to do. Take a look at the instructions,

5090
00:01:39,330 --> 00:01:42,150
make sure that you understand what it is that your program has to do

5091
00:01:42,510 --> 00:01:44,880
and then pause the video and try to give this a go.

5092
00:01:48,920 --> 00:01:52,760
All right. So the first thing we have to do is to create a range, right?

5093
00:01:52,820 --> 00:01:57,820
So let's say that for number in range, and our range is between 1 and 100,

5094
00:01:59,930 --> 00:02:02,120
so we have to include 101 in here.

5095
00:02:02,840 --> 00:02:07,460
And what we want to do is we want to check whether if the number's divisible by

5096
00:02:07,460 --> 00:02:09,139
three, divisible by five,

5097
00:02:09,410 --> 00:02:12,920
or if it's divisible by both three and five.

5098
00:02:13,760 --> 00:02:18,200
Now we could write our code by doing this in order, right? We could say

5099
00:02:18,260 --> 00:02:22,370
if number % 3 is equal to zero,

5100
00:02:22,580 --> 00:02:24,320
then it's divisible

5101
00:02:25,700 --> 00:02:26,750
by three.

5102
00:02:28,700 --> 00:02:32,090
So you might think that you could write the code like this,

5103
00:02:32,390 --> 00:02:35,720
but there is a crucial problem in the logic here

5104
00:02:36,140 --> 00:02:40,790
namely that we know that the if, elif, else statements will stop

5105
00:02:41,090 --> 00:02:44,750
once it's found one statement that's true. For example,

5106
00:02:44,990 --> 00:02:47,420
if we take the number to be 15,

5107
00:02:47,870 --> 00:02:50,420
15 divided by three is equal to zero

5108
00:02:50,780 --> 00:02:55,130
so it's going to carry out whatever instruction is inside this if statement

5109
00:02:55,430 --> 00:02:58,490
and then it's going to be done with it. It's going to skip this one

5110
00:02:58,670 --> 00:03:01,180
and crucially, it's going to skip this one

5111
00:03:01,510 --> 00:03:06,510
which is what we really need. Instead of structuring our code like this,

5112
00:03:06,880 --> 00:03:10,030
what you might have done and what you should've done is in fact,

5113
00:03:10,030 --> 00:03:12,190
have this at the top.

5114
00:03:12,550 --> 00:03:17,080
So first check if it's divisible by three and by five,

5115
00:03:17,740 --> 00:03:19,240
and then if that is not true,

5116
00:03:19,570 --> 00:03:24,100
then check to see if it's divisible by five and then divisible by three or the

5117
00:03:24,100 --> 00:03:25,300
other option works as well.

5118
00:03:25,300 --> 00:03:30,250
You could do it like this. Because these two have no overlap in terms of the

5119
00:03:30,250 --> 00:03:32,320
results and then it doesn't really matter.

5120
00:03:32,890 --> 00:03:37,180
So now we can finally write our code because we can say, well,

5121
00:03:37,180 --> 00:03:41,530
if the number that we're currently encountering is divisible by both three and

5122
00:03:41,530 --> 00:03:44,140
five, then we have to print Fizzbuzz.

5123
00:03:46,900 --> 00:03:50,710
If it's only divisible by three, then we're going to print fizz.

5124
00:03:52,510 --> 00:03:55,780
And if it's only divisible by five, then we're going to print buzz.

5125
00:03:58,470 --> 00:03:59,160
All right.

5126
00:03:59,160 --> 00:04:02,400
Now that still leaves the remaining numbers, right?

5127
00:04:02,430 --> 00:04:03,810
Because the remaining numbers

5128
00:04:03,840 --> 00:04:07,950
which don't fit any of the criteria should just be printed out as the number.

5129
00:04:08,460 --> 00:04:13,140
We can catch that quite easily with an else statement that catches basically every

5130
00:04:13,140 --> 00:04:16,769
other number, in which case, we're just going to print the number.

5131
00:04:17,490 --> 00:04:20,310
So now, if I go ahead and run this code,

5132
00:04:20,820 --> 00:04:25,260
then you can see that all the way from 1 to 100,

5133
00:04:25,620 --> 00:04:29,220
it's been able to work out which ones are fizz, which ones are buzz,

5134
00:04:29,280 --> 00:04:33,390
and which ones are fizzbuzz. How did you get on with it?

5135
00:04:33,750 --> 00:04:38,340
If you got stuck or if you don't understand why this logic matters,

5136
00:04:38,640 --> 00:04:42,720
then I want you to try both versions that I showed you and see it

5137
00:04:42,720 --> 00:04:46,650
step-by-step using the Thonny program just as we did before.

5138
00:04:47,790 --> 00:04:51,780
That way you can visualize what's actually happening in terms of the logic and

5139
00:04:51,780 --> 00:04:55,950
how it's flowing from one step to the next, to the next. Now,

5140
00:04:55,980 --> 00:04:59,970
once you've done that, then go back to your exercise and try to complete it.

5141
00:05:00,240 --> 00:05:03,990
It's really, really important that you don't just say, "Oh yeah, I understand

5142
00:05:03,990 --> 00:05:07,590
now." It's a really good idea to make sure that your code actually works at the

5143
00:05:07,590 --> 00:05:11,760
end of the day and to write the code yourself. Today

5144
00:05:11,760 --> 00:05:16,760
we've learned all about loops and we're going to apply it in our final project.

5145
00:05:17,640 --> 00:05:20,520
So that's what's waiting up for you in the next lesson.

5146
00:05:20,820 --> 00:05:22,230
So head over that once you're ready.

5147
00:00:00,450 --> 00:00:03,210
Now that we've learned all about loops in Python,

5148
00:00:03,540 --> 00:00:06,960
we're finally ready to tackle our final project of the day,

5149
00:00:07,290 --> 00:00:09,690
which is the PyPassword generator.

5150
00:00:10,440 --> 00:00:14,100
Our program will ask us how many letters would you like in your password?

5151
00:00:14,100 --> 00:00:17,640
So I will say I would like a long password, let's say 14.

5152
00:00:18,300 --> 00:00:22,290
How many symbols, 3, how many numbers, 4,

5153
00:00:22,950 --> 00:00:27,390
and it's going to generate me a password that is almost completely impossible to

5154
00:00:27,390 --> 00:00:30,840
crack by any hacker, no matter how talented they are.

5155
00:00:31,620 --> 00:00:35,640
So the project of today is to build this password generator.

5156
00:00:36,180 --> 00:00:38,670
If you head over to this particular Repl.it,

5157
00:00:38,670 --> 00:00:43,320
password-generator-start, then you'll see that here

5158
00:00:43,320 --> 00:00:48,320
I've already included for you a list of all the letters in the alphabet from A

5159
00:00:48,360 --> 00:00:51,630
to Z, including the uppercase and lowercase letters.

5160
00:00:52,200 --> 00:00:56,850
I've got a bunch of numbers and a bunch of symbols that are usually accepted by

5161
00:00:56,850 --> 00:00:58,260
websites in the passwords.

5162
00:00:59,040 --> 00:01:03,330
And I've also created the inputs that you saw when we did the demo.

5163
00:01:03,870 --> 00:01:07,440
So it's going to ask us how many letters, how many symbols, how many numbers,

5164
00:01:07,920 --> 00:01:12,270
and then you're going to turn all of that knowledge as well as using these

5165
00:01:12,270 --> 00:01:13,080
lists

5166
00:01:13,080 --> 00:01:18,060
and what you've learned about loops into the same password generator that you

5167
00:01:18,060 --> 00:01:19,890
saw in the final demo.

5168
00:01:20,340 --> 00:01:23,160
So have a play around with the final demo yourself,

5169
00:01:23,700 --> 00:01:27,900
and then have a think about how you might be able to achieve this goal of

5170
00:01:27,900 --> 00:01:32,900
creating a random password for the user based on the number of letters,

5171
00:01:33,330 --> 00:01:35,670
symbols, and numbers that they want.

5172
00:01:37,050 --> 00:01:40,110
Now there's two levels to this project.

5173
00:01:40,200 --> 00:01:45,200
You can either go for the easy version where all you have to do is generate your

5174
00:01:46,680 --> 00:01:51,180
password in sequence. So for example, if the user wanted four letters,

5175
00:01:51,540 --> 00:01:53,250
two symbols, and two numbers,

5176
00:01:53,550 --> 00:01:58,550
then it might just look like this four letters and then two symbols and then two

5177
00:02:01,080 --> 00:02:04,650
numbers. So they're in sequence right? First, you've got the letters,

5178
00:02:04,950 --> 00:02:07,110
then you've got the number of required symbols,

5179
00:02:07,260 --> 00:02:11,490
and then you've got the required numbers. So this is the easy level.

5180
00:02:12,060 --> 00:02:17,060
And then there is the hard level. And the hard level requires you to generate the

5181
00:02:18,330 --> 00:02:21,810
password in a completely random order.

5182
00:02:21,840 --> 00:02:25,500
So instead of having it being, letter symbol number,

5183
00:02:25,800 --> 00:02:30,800
it should be maybe letter and then a symbol and then a number,

5184
00:02:30,810 --> 00:02:33,930
then a letter, then a symbol and then a number.

5185
00:02:34,980 --> 00:02:37,950
But notice how this is completely random.

5186
00:02:38,310 --> 00:02:40,020
Every single time you generate it,

5187
00:02:40,110 --> 00:02:45,110
the order of where the symbols and where the numbers appear in your password are

5188
00:02:45,450 --> 00:02:47,430
completely random. So for example,

5189
00:02:47,430 --> 00:02:51,210
if you look at the demo version and I do the same thing,

5190
00:02:51,210 --> 00:02:53,190
four letters, two symbols,

5191
00:02:53,190 --> 00:02:58,110
two numbers, where the numbers and where the symbols occur are completely

5192
00:02:58,110 --> 00:03:02,500
unpredictable. And every single time I generate a new password,

5193
00:03:02,770 --> 00:03:04,240
it's going to switch it up again.

5194
00:03:04,360 --> 00:03:09,220
So that's the hard level. I recommend trying the easy level first

5195
00:03:09,430 --> 00:03:13,660
and then once you've managed to do it, then take yourself up to the hard level

5196
00:03:13,690 --> 00:03:17,710
if you think you're up to it. But remember that if your doing the hard level,

5197
00:03:17,770 --> 00:03:22,450
you might have to do a little quick Google around in order to figure out how to

5198
00:03:22,450 --> 00:03:24,850
do something that you might not have seen before.

5199
00:03:25,330 --> 00:03:29,560
But it's all part of the challenge and I hope you'll take it on with vigor.

5200
00:03:29,710 --> 00:03:33,670
So pause the video now and try to complete the final project.

5201
00:03:42,580 --> 00:03:42,870
Alright,

5202
00:03:42,870 --> 00:03:47,730
so let's first tackle the easy level where we're just generating a password

5203
00:03:48,090 --> 00:03:52,680
with the required number of letters and then the required number of symbols and

5204
00:03:52,680 --> 00:03:54,540
then the required number of numbers.

5205
00:03:55,050 --> 00:03:57,060
So let's go ahead and tackle this one first.

5206
00:03:57,810 --> 00:04:01,680
Now we know that we've got these lists which we can draw from,

5207
00:04:01,890 --> 00:04:06,660
and we know that we can use the random module to get hold of a random item from

5208
00:04:06,660 --> 00:04:11,190
the list. So all we have to do is first get four random letters.

5209
00:04:11,610 --> 00:04:14,010
So let's say that we had a password

5210
00:04:14,040 --> 00:04:16,769
which just started out as an empty string.

5211
00:04:17,430 --> 00:04:22,430
Then we can use a for loop to loop through all of the characters that we need to

5212
00:04:23,580 --> 00:04:27,030
create for our password. For example,

5213
00:04:27,030 --> 00:04:32,030
I might say for char, short for character, in the range of,

5214
00:04:32,850 --> 00:04:33,360
um,

5215
00:04:33,360 --> 00:04:38,100
from 1 to the number of letters that the user wanted.

5216
00:04:41,010 --> 00:04:43,380
So in this case, if the user wanted four letters,

5217
00:04:43,440 --> 00:04:48,240
then it will be a range from one to four, but not including four.

5218
00:04:48,660 --> 00:04:50,820
So it's actually from one to three,

5219
00:04:51,180 --> 00:04:54,240
which has only three characters. In order to modify this,

5220
00:04:54,270 --> 00:04:56,430
we have to do what we did always before,

5221
00:04:56,430 --> 00:04:59,730
which is just to add one to the end of our range.

5222
00:05:00,240 --> 00:05:04,620
So now we're going to create a range based on the number of letters that the

5223
00:05:04,620 --> 00:05:05,460
user wanted.

5224
00:05:05,610 --> 00:05:08,640
And I'm just going to go along with the assumption that the number of letters

5225
00:05:08,670 --> 00:05:11,910
equals four. Let's just pretend that's what the user will enter.

5226
00:05:12,420 --> 00:05:16,200
So then this range becomes 1, 2, 4 + 1 which is 5.

5227
00:05:16,470 --> 00:05:21,470
So the range is in fact going to be 1 to 4. For every single number in that

5228
00:05:22,620 --> 00:05:25,050
range from one to two to three to four,

5229
00:05:25,350 --> 00:05:28,200
I'm going to generate them a random letter,

5230
00:05:28,260 --> 00:05:32,010
and I'm gonna pick it out of this list of letters. To do that

5231
00:05:32,190 --> 00:05:37,190
I can either generate a random number and use it as the index or you might've

5232
00:05:37,830 --> 00:05:38,910
seen previously

5233
00:05:38,970 --> 00:05:43,970
I showed you the random.choice function. And inside this random.choice,

5234
00:05:45,450 --> 00:05:47,610
we can pass a sequence

5235
00:05:47,640 --> 00:05:50,760
which in our case is the letters list.

5236
00:05:51,450 --> 00:05:56,450
Then it will look through this list of letters and it will give us a random item from

5237
00:05:58,490 --> 00:05:59,323
that list.

5238
00:05:59,780 --> 00:06:04,340
So now that random letter is going to be something that we're going to need to

5239
00:06:04,340 --> 00:06:06,320
add to our password, right?

5240
00:06:06,740 --> 00:06:11,210
So we can set this equal to a random character.

5241
00:06:12,140 --> 00:06:14,570
And now let's go ahead and just print it out.

5242
00:06:15,490 --> 00:06:16,323
Right?

5243
00:06:19,690 --> 00:06:24,690
So let's say we want four letters in our password and we can type anything for

5244
00:06:24,940 --> 00:06:27,910
the other ones, but notice how when the for loop runs,

5245
00:06:28,000 --> 00:06:33,000
it's given us some random characters that it's picked out of our letters list.

5246
00:06:34,540 --> 00:06:35,470
So there's an a,

5247
00:06:35,500 --> 00:06:40,500
there's a capital P there's a d and there's a capital J. How can we add each of those

5248
00:06:41,050 --> 00:06:43,900
letters to our password? Well,

5249
00:06:43,900 --> 00:06:48,900
we can use the string concatenation that we learned very early on in Day 1.

5250
00:06:49,720 --> 00:06:53,380
We can say password equals the previous password

5251
00:06:53,710 --> 00:06:57,460
plus the random character. Of course,

5252
00:06:57,460 --> 00:07:01,960
the shortened version of this is just password+= random_char.

5253
00:07:02,440 --> 00:07:06,070
And now let's go ahead and instead of printing the random character,

5254
00:07:06,400 --> 00:07:09,610
let's print the password at each stage of the loop.

5255
00:07:14,050 --> 00:07:14,290
Right?

5256
00:07:14,290 --> 00:07:14,830
And again,

5257
00:07:14,830 --> 00:07:19,750
I'm going to choose four letters and you can see that the first time the loop

5258
00:07:19,750 --> 00:07:24,700
runs I get an M. So password is equal to M. The second time I get a Q

5259
00:07:24,700 --> 00:07:29,700
so I add the Q onto the M, I get MQ and so on and so forth until I get these four

5260
00:07:30,100 --> 00:07:35,100
characters in the beginning of what seems to be my random password that's going

5261
00:07:35,530 --> 00:07:36,490
to be generated.

5262
00:07:38,340 --> 00:07:38,540
Right

5263
00:07:38,540 --> 00:07:39,680
Now, if you wanted to,

5264
00:07:39,680 --> 00:07:43,550
you can actually simplify this down to just one step,

5265
00:07:43,850 --> 00:07:46,160
because instead of having this intermediary,

5266
00:07:46,160 --> 00:07:48,140
which is the random character variable,

5267
00:07:48,410 --> 00:07:53,060
we can simply just replace it with the code, like this.

5268
00:07:53,330 --> 00:07:57,470
So in this case, we're getting a random choice from our letters list,

5269
00:07:57,560 --> 00:08:01,490
so we get a random letter, and then we add that to our password.

5270
00:08:02,330 --> 00:08:04,730
Now that we've done that for the letter,

5271
00:08:04,910 --> 00:08:09,020
then it's pretty easy to see how we can continue doing this for the symbol and

5272
00:08:09,020 --> 00:08:12,620
the numbers. We just have to keep adding it to the end of our password.

5273
00:08:12,980 --> 00:08:15,140
So let me quickly write out the code for this.

5274
00:08:23,510 --> 00:08:23,770
Right?

5275
00:08:23,770 --> 00:08:27,880
So now when the user requests that they want four letters in their password,

5276
00:08:28,240 --> 00:08:31,510
then we generate a range from one to five.

5277
00:08:31,900 --> 00:08:34,570
And then for each of those positions,

5278
00:08:34,600 --> 00:08:38,650
we generate a random letter in order to fill the password.

5279
00:08:39,190 --> 00:08:42,730
And then we add on the required number of symbols and the required number of

5280
00:08:42,730 --> 00:08:46,600
numbers. And finally, we print out the final password.

5281
00:08:47,110 --> 00:08:50,830
Let's go ahead and run this code. And again,

5282
00:08:50,830 --> 00:08:54,310
I'm going to choose four letters, two numbers, and two symbols.

5283
00:08:54,990 --> 00:08:57,780
And I end up with my final password,

5284
00:08:58,050 --> 00:09:01,920
which fits exactly that criteria and it looks pretty random.

5285
00:09:02,670 --> 00:09:07,670
But the only problem is that if a hacker knew that you always have two symbols

5286
00:09:08,190 --> 00:09:11,310
at this position, and two number at this position,

5287
00:09:11,640 --> 00:09:16,640
then it's very easy to crack that password because in order to get the last

5288
00:09:16,650 --> 00:09:20,940
digit, for example, they only have to try nine different variations, 12

5289
00:09:20,940 --> 00:09:22,920
3456789.

5290
00:09:23,400 --> 00:09:28,400
And this just limits the strength of your password. In order to tackle that you

5291
00:09:29,460 --> 00:09:31,620
would have to tackle it at the hard level,

5292
00:09:31,890 --> 00:09:36,660
which is how do you get a password that has all of these letters and numbers in

5293
00:09:36,660 --> 00:09:40,500
a completely random order. To do that

5294
00:09:40,650 --> 00:09:43,680
we mentioned that you have to do a bit of googling because it might require

5295
00:09:43,680 --> 00:09:46,950
something that you haven't done before. But in essence,

5296
00:09:47,010 --> 00:09:50,940
you've got access to everything you need to perform the logic.

5297
00:09:51,480 --> 00:09:53,280
So if you haven't given that a go,

5298
00:09:53,520 --> 00:09:57,210
then this might be a good time to pause and have a think about how you might

5299
00:09:57,210 --> 00:10:02,210
structure the logic or how you might create a flow chart to express this logic

5300
00:10:03,060 --> 00:10:05,730
that you would want. And once you've done that,

5301
00:10:05,820 --> 00:10:08,490
and if you want to see the solution and walk through it with me,

5302
00:10:08,670 --> 00:10:13,230
then come back here and I'll show you how to do it, but first give it a go.

5303
00:10:15,870 --> 00:10:16,703
Right?

5304
00:10:17,110 --> 00:10:19,720
All right. In order to tackle the hard level,

5305
00:10:20,050 --> 00:10:25,050
what we essentially need to do is instead of adding each of these letters into a

5306
00:10:25,300 --> 00:10:29,050
string, we actually want to add it into a list.

5307
00:10:30,040 --> 00:10:32,410
So I'm going to copy all of this that's here,

5308
00:10:32,500 --> 00:10:37,500
and I'm just gonna comment it out and I'm going to paste it under my hard level and

5309
00:10:37,720 --> 00:10:42,250
work on it here. So instead of using a password string,

5310
00:10:42,430 --> 00:10:45,280
I'm going to create a list and to better describe it

5311
00:10:45,730 --> 00:10:49,660
I'll change my variable name, the password list. So now,

5312
00:10:49,660 --> 00:10:54,660
instead of using password to add each of these letters and numbers and symbols,

5313
00:10:55,990 --> 00:10:58,240
I'm going to be adding it to my list.

5314
00:10:59,650 --> 00:11:00,420
Right,

5315
00:11:00,420 --> 00:11:01,253
Right,

5316
00:11:02,210 --> 00:11:03,000
Right

5317
00:11:03,000 --> 00:11:05,130
Now, to add things to a list,

5318
00:11:05,340 --> 00:11:09,240
you can use the same syntax that you did with strings,

5319
00:11:09,660 --> 00:11:14,660
which is to add the new item into the list and to update the old list.

5320
00:11:17,430 --> 00:11:20,340
You might be more familiar though with the syntax

5321
00:11:20,340 --> 00:11:23,850
which is append and both of these work.

5322
00:11:23,940 --> 00:11:28,110
You can use either of them if you want, but they'll end up doing the same thing,

5323
00:11:28,170 --> 00:11:32,580
which is to add each of those things you've generated in the order that you've

5324
00:11:32,580 --> 00:11:34,560
generated to your password.

5325
00:11:34,800 --> 00:11:39,120
So we end up now with a list with four letters,

5326
00:11:39,510 --> 00:11:42,030
two symbols, and two numbers,

5327
00:11:42,210 --> 00:11:46,650
all stored as strings because of the quotation marks around them.

5328
00:11:47,460 --> 00:11:51,360
So now that we've got a list, well, then we have to think about, well,

5329
00:11:51,570 --> 00:11:53,800
how can we shuffle our list,

5330
00:11:53,800 --> 00:11:56,890
how can we mess up the order of the items in our list?

5331
00:11:57,730 --> 00:12:01,420
And that might take you to Google and you might search for something like how to

5332
00:12:01,420 --> 00:12:05,410
change the order of items in a list.

5333
00:12:05,680 --> 00:12:09,160
And then we also have to add our keyword, which is Python,

5334
00:12:09,190 --> 00:12:12,490
because there's obviously a lot of other programming languages.

5335
00:12:12,910 --> 00:12:15,910
And we come up against our first Stack Overflow question,

5336
00:12:15,910 --> 00:12:19,930
how can I reorder a list? Well, that sounds kind of like what I want to do,

5337
00:12:19,930 --> 00:12:22,450
right? So if we scroll down,

5338
00:12:22,510 --> 00:12:27,510
you can see that the way to do it is either using a for loop,

5339
00:12:27,910 --> 00:12:30,430
like so, or

5340
00:12:30,700 --> 00:12:33,520
to simply use the shuffle function.

5341
00:12:34,630 --> 00:12:39,630
This is a much simpler way because it allows us to update the existing list just

5342
00:12:41,740 --> 00:12:43,990
by calling the shuffle function on it.

5343
00:12:44,650 --> 00:12:49,510
And this one actually requires us to create a new list and we have to create a

5344
00:12:49,510 --> 00:12:52,270
bunch of random numbers for the order,

5345
00:12:52,600 --> 00:12:54,910
and then to reorder them using a four loop.

5346
00:12:55,300 --> 00:12:58,840
So I'm going to go with this version and let's try it out.

5347
00:12:59,350 --> 00:13:01,420
Instead of printing password_list,

5348
00:13:01,480 --> 00:13:04,270
let's print the password_list before the shuffle,

5349
00:13:04,600 --> 00:13:09,600
and then let's use the random.shuffle and pass in the password_list.

5350
00:13:10,150 --> 00:13:13,480
And then let's print the outcome of that shuffle,

5351
00:13:13,480 --> 00:13:15,640
so let's print the password_list again.

5352
00:13:17,740 --> 00:13:20,380
So now you can see that we've got a version before,

5353
00:13:20,590 --> 00:13:22,210
and then we've got a version after.

5354
00:13:22,420 --> 00:13:26,920
So if I run my code and I write again, four letters,

5355
00:13:26,980 --> 00:13:29,020
two symbols, two numbers,

5356
00:13:29,590 --> 00:13:34,210
you can see that previously it was ordered in the order that we added each of

5357
00:13:34,210 --> 00:13:36,580
the characters. After the shuffle

5358
00:13:36,610 --> 00:13:40,570
they're now pretty much random. There's letters in random places,

5359
00:13:40,600 --> 00:13:42,160
there's symbols in random places.

5360
00:13:42,550 --> 00:13:45,970
So if only we could turn this back into a string,

5361
00:13:46,450 --> 00:13:49,870
then we've got our password that's nicely shuffled.

5362
00:13:50,260 --> 00:13:53,290
So how can we turn it back into a string? Well,

5363
00:13:53,290 --> 00:13:55,720
we could simply use a for loop, right?

5364
00:13:55,810 --> 00:13:59,080
We could say for each, um,

5365
00:13:59,440 --> 00:14:03,910
character in the password_list,

5366
00:14:04,690 --> 00:14:08,980
we're going to add it to a variable called a password,

5367
00:14:09,370 --> 00:14:12,610
which is going to start off again as a empty string

5368
00:14:13,240 --> 00:14:15,430
and then we're going to add to it.

5369
00:14:15,460 --> 00:14:20,440
So we're going to say password += char in our password_list.

5370
00:14:21,040 --> 00:14:24,790
And now if I go ahead and just print my final password,

5371
00:14:25,180 --> 00:14:27,070
I'm going to add a fstring as well.

5372
00:14:27,550 --> 00:14:30,310
Let's say your password is,

5373
00:14:31,360 --> 00:14:33,460
and then let's insert the password.

5374
00:14:34,840 --> 00:14:38,230
And now if I run my code and let's say,

5375
00:14:38,230 --> 00:14:40,900
I want 12 letters, uh,

5376
00:14:40,930 --> 00:14:43,330
three symbols and four numbers,

5377
00:14:43,870 --> 00:14:47,530
then it's going to generate me a entire password

5378
00:14:47,740 --> 00:14:52,550
that's completely randomized in terms of the orders of the symbols and the

5379
00:14:52,550 --> 00:14:53,383
numbers.

5380
00:14:53,660 --> 00:14:58,660
And I've now solved the hard part of this challenge project.

5381
00:15:00,080 --> 00:15:03,530
Did that make sense to you? Did you manage to get it

5382
00:15:03,530 --> 00:15:04,940
to do what you want it to do?

5383
00:15:06,800 --> 00:15:10,070
If you're at all confused about the code that we've covered here,

5384
00:15:10,370 --> 00:15:14,510
then be sure to check out the final project that I've got here,

5385
00:15:14,510 --> 00:15:16,700
which is the App generator end,

5386
00:15:17,150 --> 00:15:20,600
and take a look at how the easy level is implemented,

5387
00:15:20,630 --> 00:15:25,160
how the hard level is implemented and try switching it around so that you really

5388
00:15:25,160 --> 00:15:26,390
get to understand it.

5389
00:15:26,720 --> 00:15:31,070
Try instead of maybe getting the user to tell you how many letters,

5390
00:15:31,070 --> 00:15:34,970
how many symbols, how many numbers, instead just define those yourself

5391
00:15:35,000 --> 00:15:37,790
or use a random number of letters, numbers,

5392
00:15:37,790 --> 00:15:42,440
and symbols. Play around with the code until it starts doing what you want it to

5393
00:15:42,440 --> 00:15:44,240
do and it starts making sense.

5394
00:15:44,840 --> 00:15:48,770
But I hope you had fun building this project with me today and learning all

5395
00:15:48,770 --> 00:15:51,440
about loops. On the next lesson

5396
00:15:51,440 --> 00:15:54,800
we're going to be learning more about these things that we've been using a lot,

5397
00:15:55,160 --> 00:16:00,110
which is Python functions. So I'm going to bid you goodnight for today,

5398
00:16:00,200 --> 00:16:03,200
and hopefully I'll see you bright and early tomorrow,

5399
00:16:03,680 --> 00:16:06,860
and we'll learn some new skills and work on some new projects.

5400
00:16:07,070 --> 00:16:09,710
So that's all from me, goodnight from Angela.


5401
00:00:00,130 --> 00:00:00,730
Hey guys,

5402
00:00:00,730 --> 00:00:05,730
welcome to Day 6 of 100 Days of code. And well done from making it this

5403
00:00:07,150 --> 00:00:07,983
far.

5404
00:00:08,200 --> 00:00:13,200
So today we're going to talk about code blocks and indentation as well as

5405
00:00:13,540 --> 00:00:18,540
functions and also a different flavor from the for loops that we saw yesterday.

5406
00:00:19,810 --> 00:00:20,110
Today

5407
00:00:20,110 --> 00:00:24,580
we're going to talk about while loops as well. And to learn all of these things,

5408
00:00:24,880 --> 00:00:26,530
we're going to use the help of something

5409
00:00:26,680 --> 00:00:28,930
that's very similar to Karel the robot.

5410
00:00:29,560 --> 00:00:32,409
And this is something I use when I first learnt how to code

5411
00:00:32,800 --> 00:00:35,950
and it's one of my favorite tools for learning programming

5412
00:00:36,130 --> 00:00:41,130
especially as we get into more difficult concepts like functions and while loops

5413
00:00:41,140 --> 00:00:45,970
et cetera. And by the end of the day, we're going to be writing the code

5414
00:00:46,210 --> 00:00:51,210
that's required to instruct our little robot to be able to complete any

5415
00:00:51,640 --> 00:00:55,390
randomly generated maze. So that's the goal

5416
00:00:55,690 --> 00:00:57,430
and if you head over to the next lesson,

5417
00:00:57,640 --> 00:01:00,820
let's get started and let's start learning about some of these things.

5418
00:00:00,640 --> 00:00:05,590
The first concept I want to introduce you to is something called functions.

5419
00:00:06,250 --> 00:00:11,200
And just as we perform many different functions could be mother, father,

5420
00:00:11,220 --> 00:00:12,490
son, daughter,

5421
00:00:12,970 --> 00:00:17,470
we can also get our code to perform different pieces of functionality.

5422
00:00:18,250 --> 00:00:20,110
Now, if we think back,

5423
00:00:20,230 --> 00:00:25,230
we've actually already come across functions and I've been referring to them

5424
00:00:25,750 --> 00:00:27,610
every time we've needed to use one.

5425
00:00:28,510 --> 00:00:31,960
If you take a look at this link in the course resources

5426
00:00:32,020 --> 00:00:34,750
which takes you to the Python documentation,

5427
00:00:35,290 --> 00:00:39,340
then you can see that Python has a whole bunch of built in functions that we've

5428
00:00:39,340 --> 00:00:42,370
been using. For example, the len function,

5429
00:00:42,400 --> 00:00:47,400
which gives us the number of items in a collection or the int function

5430
00:00:47,860 --> 00:00:52,420
which turns something into an integer or the print function,

5431
00:00:52,420 --> 00:00:55,840
the range function, and other ones that we haven't seen yet.

5432
00:00:56,770 --> 00:00:58,720
If you head over to the Day 6

5433
00:00:58,750 --> 00:01:03,070
starting Repl.it and go ahead and forward a copy of it.

5434
00:01:03,910 --> 00:01:08,290
Then we can start typing one of the functions that we've been using a lot,

5435
00:01:08,320 --> 00:01:09,850
which is the print function.

5436
00:01:10,480 --> 00:01:14,680
And the reason why we know it's a function is because it's the name of a

5437
00:01:14,680 --> 00:01:18,010
function followed by a set of parentheses.

5438
00:01:18,550 --> 00:01:22,960
Now we know that if we put something inside these parentheses,

5439
00:01:23,290 --> 00:01:27,070
say, for example, hello, then when I run the code,

5440
00:01:27,430 --> 00:01:29,110
whatever is inside those parentheses

5441
00:01:29,110 --> 00:01:32,650
will get outputted over here in the console.

5442
00:01:33,820 --> 00:01:37,360
Now all of the functions work pretty much the same.

5443
00:01:37,450 --> 00:01:41,560
So if I wanted to use the len function to see, well,

5444
00:01:41,560 --> 00:01:45,580
how many characters are there in this word Hello? I, again,

5445
00:01:45,640 --> 00:01:50,260
put my hello inside the parentheses because of the parentheses

5446
00:01:50,290 --> 00:01:55,290
we know that this is a function and then I can save the outcome of this length

5447
00:01:55,870 --> 00:01:59,680
function to a variable, say,

5448
00:01:59,740 --> 00:02:02,230
let's call it number of characters, num_char.

5449
00:02:02,740 --> 00:02:07,270
And then I can go ahead and print it in order to view it inside the console.

5450
00:02:07,270 --> 00:02:10,870
So let's print the num_char,

5451
00:02:11,560 --> 00:02:15,610
and now you can see that this len function gets to work, calculates the

5452
00:02:15,610 --> 00:02:18,970
number of characters, it's five, and then it gets printed.

5453
00:02:19,300 --> 00:02:24,300
So all of this functionality has been achieved by these built-in functions from

5454
00:02:25,240 --> 00:02:27,430
Python, like print and len.

5455
00:02:28,810 --> 00:02:32,350
Now what if we wanted to make our own functions?

5456
00:02:32,410 --> 00:02:37,360
How would we do that? Well, if we want to make our own function,

5457
00:02:37,750 --> 00:02:40,780
we first start out with a keyword,

5458
00:02:41,260 --> 00:02:43,030
which is called def.

5459
00:02:43,540 --> 00:02:48,070
And this is because we're creating or defining our function.

5460
00:02:49,090 --> 00:02:50,740
Now, after the def keyword,

5461
00:02:51,070 --> 00:02:56,070
we can give our function a name and I'm just going to call it my_function.

5462
00:02:57,220 --> 00:03:00,910
Now, the thing that differentiates a function from a variable, however,

5463
00:03:01,330 --> 00:03:05,980
is the parentheses. So after the name comes the parentheses,

5464
00:03:06,580 --> 00:03:08,170
and now the final thing,

5465
00:03:08,170 --> 00:03:13,170
the finishing touch to our function definition is a colon because that says

5466
00:03:13,720 --> 00:03:18,720
everything that comes after that line and is indented belongs with the

5467
00:03:19,180 --> 00:03:20,013
function.

5468
00:03:20,710 --> 00:03:24,280
Let's make a really simple function that just has two lines of code.

5469
00:03:24,340 --> 00:03:29,080
Maybe it prints Hello and then it prints Bye.

5470
00:03:29,980 --> 00:03:32,590
So now I've created my function,

5471
00:03:32,740 --> 00:03:37,090
I've placed the lines of code that are associated with this function all indented

5472
00:03:37,090 --> 00:03:40,600
after the definition. But notice how,

5473
00:03:40,660 --> 00:03:45,370
if I go ahead and run my code, actually nothing will happen.

5474
00:03:45,580 --> 00:03:49,930
And the reason is because we haven't yet executed the function.

5475
00:03:50,590 --> 00:03:54,460
Now we can define lots and lots of functions ahead of time.

5476
00:03:54,850 --> 00:03:57,100
And it's only when we actually need it

5477
00:03:57,280 --> 00:04:02,280
do we go ahead and trigger it and to trigger it or in programming lingo,

5478
00:04:02,320 --> 00:04:04,720
we would say to call the function,

5479
00:04:05,050 --> 00:04:08,140
all we have to do is type the name of the function,

5480
00:04:08,530 --> 00:04:10,180
which is my_function

5481
00:04:10,720 --> 00:04:15,720
and then to add the parentheses and any necessary inputs. In our case,

5482
00:04:16,060 --> 00:04:20,860
our function doesn't require any inputs so we can leave the parentheses blank

5483
00:04:20,950 --> 00:04:25,120
again. And now if I go ahead and run my code once more,

5484
00:04:25,480 --> 00:04:29,470
then you'll see that by the time the computer reaches line 5,

5485
00:04:29,770 --> 00:04:32,230
it's going to search for this thing called my_ function.

5486
00:04:32,590 --> 00:04:35,470
It sees that it was defined right here on line 1

5487
00:04:35,770 --> 00:04:40,770
and it goes through all of the content and executes them in turn, line by line.

5488
00:04:41,650 --> 00:04:44,890
And that's why we get hello and bye being printed here.

5489
00:04:46,420 --> 00:04:50,710
So just to recap, this is how we create a function in Python.

5490
00:04:51,190 --> 00:04:56,140
There's two steps to it. The first step is to actually define the function,

5491
00:04:56,440 --> 00:04:58,480
to specify what it should do.

5492
00:04:58,990 --> 00:05:03,990
And we do that by first using the def keyword and then we give our function a

5493
00:05:04,390 --> 00:05:06,370
name. So for example, in this case,

5494
00:05:06,370 --> 00:05:11,370
I called it my_function and then comes a set of parentheses and a colon.

5495
00:05:12,670 --> 00:05:16,030
And then after that, we get to put the lines of code

5496
00:05:16,030 --> 00:05:20,260
which will be included in this function. And remember that these lines of code

5497
00:05:20,260 --> 00:05:22,180
which goes into the function

5498
00:05:22,210 --> 00:05:24,880
which will be carried out when this function is triggered

5499
00:05:25,150 --> 00:05:27,790
must be indented like this.

5500
00:05:28,720 --> 00:05:32,410
So once you've defined the function, you've created the recipe,

5501
00:05:32,440 --> 00:05:36,610
the next step is to actually use it, which in programming lingo,

5502
00:05:36,640 --> 00:05:41,640
we would say calling the function. And we call the function just by specifying

5503
00:05:42,520 --> 00:05:45,130
the name and a set of parentheses.

5504
00:05:45,640 --> 00:05:50,640
And once the computer sees this line of code it'll know to go and carry out all

5505
00:05:50,770 --> 00:05:52,570
the instructions inside

5506
00:05:52,600 --> 00:05:56,560
where we defined our function. And to learn about functions,

5507
00:05:56,890 --> 00:06:01,190
I'm to introduce you to something that's very similar to Karel the robot.

5508
00:06:02,030 --> 00:06:07,030
The robot is going to be something that is just going to perform the tasks that

5509
00:06:07,070 --> 00:06:10,550
we want it to, and no more and no less.

5510
00:06:11,060 --> 00:06:12,290
So for example,

5511
00:06:12,470 --> 00:06:17,470
if we wanted a robot to go to the store and pick up some milk for us,

5512
00:06:18,410 --> 00:06:20,510
we can't simply just tell it, Oh yeah,

5513
00:06:20,540 --> 00:06:24,620
just go and buy some milk because it won't know how to do that

5514
00:06:24,800 --> 00:06:25,580
unless

5515
00:06:25,580 --> 00:06:29,810
we give it specific instructions such as leave the house,

5516
00:06:29,840 --> 00:06:34,550
walk two blocks to the right, walk four blocks back and then two blocks to the right.

5517
00:06:34,940 --> 00:06:36,140
When you go to the store,

5518
00:06:36,140 --> 00:06:39,590
give them some money and then take the milk and come back.

5519
00:06:40,130 --> 00:06:44,030
We have to program each and every step. But say,

5520
00:06:44,030 --> 00:06:49,010
if this functionality of getting the robot to go and pick up some milk for us is

5521
00:06:49,010 --> 00:06:51,110
needed every single day

5522
00:06:51,500 --> 00:06:55,970
then we have to write out all of those instructions day after day,

5523
00:06:55,970 --> 00:07:00,260
day after day. And at some point our fingers are going to hurt, right?

5524
00:07:00,350 --> 00:07:05,350
We're typing so much code that's repeated because we don't have a way of bundling

5525
00:07:05,450 --> 00:07:08,870
all of those instructions together. And that's where functions come in.

5526
00:07:09,260 --> 00:07:12,890
Functions will give us a way of referring to all those instructions

5527
00:07:13,010 --> 00:07:14,240
at the same time.

5528
00:07:14,690 --> 00:07:19,610
That way we can give our robot a single instruction and it will carry out all of

5529
00:07:19,610 --> 00:07:22,430
those little steps for us and get us some milk.

5530
00:07:23,510 --> 00:07:25,460
Now to try this out yourself,

5531
00:07:25,490 --> 00:07:30,490
I want you to head over to the course resources and click on the link that takes

5532
00:07:31,070 --> 00:07:32,690
you to Reeborg's World.

5533
00:07:33,290 --> 00:07:37,610
Now Reeborg's World is very similar to Karel the robot that I showed you

5534
00:07:37,640 --> 00:07:38,473
earlier on,

5535
00:07:38,630 --> 00:07:43,630
but it allows us to write Python code. And it's very easy to get started.

5536
00:07:44,570 --> 00:07:48,710
Now we've got this area here which we're going to use to write our Python code.

5537
00:07:49,370 --> 00:07:52,340
And then once we're done, we can click on play to

5538
00:07:52,340 --> 00:07:57,340
run the Python code and see the instructions carried out by our robot.

5539
00:07:58,340 --> 00:08:00,650
But if you click on Reeborg's keyboard,

5540
00:08:00,980 --> 00:08:05,480
you can see all of the functions that we can use to command our robot,

5541
00:08:05,930 --> 00:08:09,950
like move or turn left, or build a wall, et cetera.

5542
00:08:11,270 --> 00:08:15,170
Let's see if we go ahead and run this line of code here, move.

5543
00:08:16,280 --> 00:08:18,380
What happens? When I click play

5544
00:08:18,710 --> 00:08:23,710
you can see that our robot moves forward in the direction that it's facing by

5545
00:08:23,720 --> 00:08:28,550
one step. So if we wanted it to move, say for example, three steps,

5546
00:08:28,880 --> 00:08:32,270
all we have to do is the call the move function three times.

5547
00:08:32,900 --> 00:08:37,280
Now let's reset by clicking the return button to return our robot back to the

5548
00:08:37,280 --> 00:08:38,299
starting position.

5549
00:08:38,750 --> 00:08:42,950
Now let's click play again in order for our robot to carry out the new

5550
00:08:42,950 --> 00:08:43,789
instructions.

5551
00:08:44,840 --> 00:08:49,640
Notice how all the instructions were carried out very quickly. To execute each

5552
00:08:49,640 --> 00:08:52,850
instruction one step at a time, line by line,

5553
00:08:53,030 --> 00:08:55,200
we can use this step-through button.

5554
00:08:55,680 --> 00:09:00,680
This button allows us to see how each instruction is executed and after each

5555
00:09:01,380 --> 00:09:05,490
instruction, it pauses and highlights the next instruction.

5556
00:09:05,760 --> 00:09:07,530
This is very helpful for debugging.

5557
00:09:08,370 --> 00:09:13,080
So notice how we're highlighting line 2. So if I click on step again,

5558
00:09:13,380 --> 00:09:17,220
it's going to carry out that function and then it's going to carry out line

5559
00:09:17,220 --> 00:09:20,430
3 and finally it reaches the end.

5560
00:09:20,730 --> 00:09:25,710
And that's the end of our code. Now,

5561
00:09:25,740 --> 00:09:29,760
in addition, we can use some of the other commands in the keyboard

5562
00:09:30,120 --> 00:09:31,890
for example, turn left.

5563
00:09:32,550 --> 00:09:37,550
If I decide to say move three times and then turn left and then maybe move three

5564
00:09:38,250 --> 00:09:42,660
times again, can you predict which square the robot is going to end up in?

5565
00:09:44,250 --> 00:09:49,230
Are you ready? Let's go ahead and run the code. There we go.

5566
00:09:49,440 --> 00:09:51,810
We end up on the square 4,4.

5567
00:09:51,990 --> 00:09:56,160
It moves three forwards turns left and then moves three steps again,

5568
00:09:56,430 --> 00:09:59,250
because that's what we told it to do with our Python code.

5569
00:10:00,150 --> 00:10:04,440
So now here's a question. If you take a look inside the set of commands,

5570
00:10:04,500 --> 00:10:08,790
you'll notice that there is move and there is turn left. But there is no turn

5571
00:10:08,790 --> 00:10:11,460
right and there is no turn around.

5572
00:10:12,030 --> 00:10:16,680
So how could we use a function to create those commands?

5573
00:10:17,310 --> 00:10:20,340
Because, of course, we could just simply write,

5574
00:10:20,400 --> 00:10:25,140
turn left and then turn left again.

5575
00:10:27,180 --> 00:10:31,470
And this would effectively turn the robot around, right?

5576
00:10:32,280 --> 00:10:35,700
But if we want to do that many times, say for example,

5577
00:10:35,700 --> 00:10:39,510
if we wanted to go to three, turn around, go back to one, turn around,

5578
00:10:39,510 --> 00:10:44,340
go back to three, then we would have to write code that looks a bit like this.

5579
00:10:44,340 --> 00:10:45,960
We would have to say move

5580
00:10:47,550 --> 00:10:51,360
two times to get to square three, turn left, turn left,

5581
00:10:51,480 --> 00:10:56,480
and then move two times again to get to one and then turn left,

5582
00:10:57,120 --> 00:10:59,640
turn left again in order to turn around.

5583
00:11:00,390 --> 00:11:05,390
This is all the code we would have to write to achieve this kind of effect.

5584
00:11:06,900 --> 00:11:11,430
But instead of all of this, we could just define a new function.

5585
00:11:11,970 --> 00:11:15,930
So we use the def keyword to say that this code is defining a new function

5586
00:11:16,200 --> 00:11:17,880
called turn_around

5587
00:11:19,410 --> 00:11:24,410
and this function is simply going to be turn left twice. And remember, all the

5588
00:11:26,190 --> 00:11:29,640
code that's going to go inside the function has to be indented.

5589
00:11:30,330 --> 00:11:33,480
And now instead of writing, turn left, turn left,

5590
00:11:33,510 --> 00:11:37,950
we can simplify our code by telling it to call the function,

5591
00:11:38,250 --> 00:11:42,960
turn_around, and we can do that here and we can do that here.

5592
00:11:43,710 --> 00:11:45,780
So now when we run the code,

5593
00:11:45,840 --> 00:11:48,930
you'll see that it does exactly the same thing as before,

5594
00:11:49,500 --> 00:11:52,590
but this time we've cut down two lines of code.

5595
00:11:53,320 --> 00:11:56,350
So instead of eight lines of code for our instructions,

5596
00:11:56,680 --> 00:11:58,870
we only now need six lines.

5597
00:11:59,410 --> 00:12:02,950
And you can see that the more that you need to use this function,

5598
00:12:03,310 --> 00:12:08,080
the more typing it will save you. But more important than reducing

5599
00:12:08,080 --> 00:12:13,080
the number of lines of code is that our code has also become a lot more

5600
00:12:13,090 --> 00:12:13,923
readable.

5601
00:12:14,350 --> 00:12:19,350
So the turn_around function is much more clear than having turn left twice.

5602
00:12:20,260 --> 00:12:23,140
Now let's see what happens when we use the step through button.

5603
00:12:23,560 --> 00:12:26,830
Look closely at how each line in our code is executed.

5604
00:12:27,850 --> 00:12:32,320
So now what we're going to carry out the move by one, move by one

5605
00:12:32,740 --> 00:12:37,740
and now it's going to call turn_around, that function. And it jumps over to find

5606
00:12:38,020 --> 00:12:42,610
this function and carries out the code inside in turn from the top to the

5607
00:12:42,610 --> 00:12:46,870
bottom. So turn left, turn left. And now once that function's done,

5608
00:12:46,900 --> 00:12:51,280
it goes back to where it was before and continues running, move, move,

5609
00:12:51,700 --> 00:12:53,770
and then turn around again.

5610
00:12:55,330 --> 00:12:57,310
So here's your challenge.

5611
00:12:57,610 --> 00:13:02,560
Try and create a separate function that turns our robot to the right.

5612
00:13:03,310 --> 00:13:04,240
Pause the video,

5613
00:13:04,360 --> 00:13:09,070
head over to the course resources and click on the link that takes you to

5614
00:13:09,070 --> 00:13:10,030
Reeborg's World

5615
00:13:10,420 --> 00:13:14,500
and then go ahead and create your own function called a turn_right.

5616
00:13:15,860 --> 00:13:16,693
Right.

5617
00:13:16,780 --> 00:13:17,140
All right.

5618
00:13:17,140 --> 00:13:22,030
So this should be pretty simple because all we have to do is to define a new

5619
00:13:22,030 --> 00:13:23,770
function called turn_right

5620
00:13:24,580 --> 00:13:29,470
and this function is going to simply be turn left three times

5621
00:13:30,100 --> 00:13:30,933
Right?

5622
00:13:33,630 --> 00:13:37,890
because turning left three times is going to effectively turn our robot

5623
00:13:37,890 --> 00:13:38,723
right.

5624
00:13:38,940 --> 00:13:43,940
So even though we only have this one way of turning our robot,

5625
00:13:44,700 --> 00:13:47,790
we can define our own functions to give it many,

5626
00:13:47,790 --> 00:13:50,280
many other commands that it could use.

5627
00:13:50,940 --> 00:13:54,360
So now using this turn right function,

5628
00:13:54,810 --> 00:13:59,810
see if you can write some code that makes our robot draw a little square going

5629
00:14:00,450 --> 00:14:04,410
from here to here then to here and back to the beginning.

5630
00:14:05,340 --> 00:14:09,720
Once you're done and you hit play, this is what should happen.

5631
00:14:12,350 --> 00:14:15,710
So pause the video now and see if you can complete that challenge.

5632
00:14:19,730 --> 00:14:20,460
Right?

5633
00:14:20,460 --> 00:14:23,010
All right. So let's go from the beginning.

5634
00:14:23,430 --> 00:14:26,730
We start out facing right at the position 1,1

5635
00:14:26,730 --> 00:14:30,600
one in order to draw the square, starting from this way,

5636
00:14:30,840 --> 00:14:32,520
we have to first turn left

5637
00:14:34,110 --> 00:14:38,220
and then we have to move one step and that should take us to here.

5638
00:14:38,970 --> 00:14:43,740
And now we have to turn right, move

5639
00:14:43,740 --> 00:14:46,770
one more step, turn right again,

5640
00:14:49,080 --> 00:14:54,080
move one more step and finally turn right for the last time and move one more

5641
00:14:55,580 --> 00:14:56,413
step.

5642
00:14:57,770 --> 00:15:02,770
So using our awesome function means that we don't have to right out turn left

5643
00:15:03,110 --> 00:15:05,780
three times each time we need to turn right.

5644
00:15:06,260 --> 00:15:11,260
So our code can just be eight lines long instead of 14 lines long

5645
00:15:12,200 --> 00:15:16,070
and we're using our function to cut down on a lot of typing.

5646
00:15:16,970 --> 00:15:19,370
But not only are there fewer lines of code,

5647
00:15:19,670 --> 00:15:24,020
look how much more readable our code has become thanks to our turn right

5648
00:15:24,020 --> 00:15:28,670
function. It's now so much easier to read, turn right,

5649
00:15:28,820 --> 00:15:33,740
and understand what it needs to do rather than seeing turn left three times in

5650
00:15:33,740 --> 00:15:34,573
the code.

5651
00:15:35,210 --> 00:15:39,710
So now it's easier to read and it's easier to follow the logic in our code.

5652
00:15:40,400 --> 00:15:41,600
In the next lesson,

5653
00:15:41,690 --> 00:15:46,640
I've got a challenge for you. Head over there and apply what you've learned

5654
00:15:46,670 --> 00:15:50,120
about functions to try and solve it. I'll see you there.

5655
00:00:00,390 --> 00:00:03,150
All right. So now that you've learned about functions,

5656
00:00:03,300 --> 00:00:07,680
I have a coding challenge for you. If you head over to this link,

5657
00:00:07,800 --> 00:00:12,300
which is in the course resources and head over to this challenge

5658
00:00:12,300 --> 00:00:13,710
which is called Hurdle 1,

5659
00:00:14,310 --> 00:00:19,310
the idea is that we've got a robot here which needs to do a number of hurdles to

5660
00:00:19,590 --> 00:00:23,190
jump over each of these barriers, to get to the final goal here.

5661
00:00:23,820 --> 00:00:27,900
Now you need to use your knowledge of functions

5662
00:00:28,140 --> 00:00:30,810
as well as some of the things you've learned before, such as the

5663
00:00:30,810 --> 00:00:34,920
for loop or the range function, to be able to achieve this.

5664
00:00:35,640 --> 00:00:39,810
Now, remember that you can tell the robot to move by typing, move(),

5665
00:00:40,290 --> 00:00:43,350
and when that's run, it will move by one space.

5666
00:00:43,890 --> 00:00:46,200
And you can also use, say,

5667
00:00:46,230 --> 00:00:50,160
turn_left to get the robot to turn left.

5668
00:00:50,700 --> 00:00:52,320
And in this case, when I run the code,

5669
00:00:52,320 --> 00:00:55,530
it's going to move one space and face to the left.

5670
00:00:56,640 --> 00:00:59,130
In order to complete this entire challenge,

5671
00:00:59,190 --> 00:01:03,030
you can see there's a number of steps that the robot has to go through before it

5672
00:01:03,030 --> 00:01:07,830
can get to this final goal. And if you were to write out each of these steps,

5673
00:01:08,160 --> 00:01:12,360
like I have done here one after the other, it would take many,

5674
00:01:12,390 --> 00:01:16,950
many tens of lines of code. And that's not what we're about. We're programmers.

5675
00:01:16,980 --> 00:01:18,660
So we're born to be lazy.

5676
00:01:19,080 --> 00:01:23,400
Try and see if you can minimize number lines of code while still keeping your

5677
00:01:23,400 --> 00:01:28,400
code readable and understandable by somebody else and be able to get your robot

5678
00:01:28,710 --> 00:01:33,300
to complete these instructions and take the robot to the final goalpost.

5679
00:01:34,140 --> 00:01:36,930
And once you've completed the challenge successfully,

5680
00:01:37,200 --> 00:01:42,200
you should get a green popup that says you're at the correct X and Y position.

5681
00:01:42,990 --> 00:01:44,520
So pause the video now,

5682
00:01:44,550 --> 00:01:48,150
head over to this link and give this challenge a go.

5683
00:01:48,390 --> 00:01:49,223
Right.

5684
00:01:54,290 --> 00:01:57,050
All right. So how did you get on with this challenge?

5685
00:01:57,830 --> 00:02:02,720
How many lines of code did it take you to tell this robot to get to the goal?

5686
00:02:03,560 --> 00:02:06,230
All right. Let's have a think about how we might tackle this.

5687
00:02:06,500 --> 00:02:10,460
We know that out of the things that we can tell the robot to do, the most useful

5688
00:02:10,460 --> 00:02:13,190
things are to move and to turn left.

5689
00:02:13,670 --> 00:02:17,480
But because the robot doesn't have a builtin turn right function,

5690
00:02:17,720 --> 00:02:19,820
then we have to define that ourselves.

5691
00:02:20,360 --> 00:02:23,750
And the reason why we need to do that is because you can see that at several

5692
00:02:23,750 --> 00:02:27,920
points during the hurdle, we'll have to turn right. For example,

5693
00:02:27,920 --> 00:02:32,570
when the robot is here at 2, 2, it will have to turn right,

5694
00:02:32,630 --> 00:02:35,810
and then move and then turn right again and then move.

5695
00:02:36,290 --> 00:02:39,650
So let's create a new function called turn_right.

5696
00:02:40,190 --> 00:02:44,990
So we start out with the def key keyword and then give our function a name which

5697
00:02:44,990 --> 00:02:46,280
is going to be turn_right.

5698
00:02:47,270 --> 00:02:50,180
And then we add the parentheses with nothing inside

5699
00:02:50,210 --> 00:02:52,880
because we're not passing any inputs to this function.

5700
00:02:53,360 --> 00:02:58,360
We're just going to use this function as a way of defining turn left three

5701
00:02:59,350 --> 00:03:03,970
times. So when you turn left three times, of course you turn right.

5702
00:03:04,480 --> 00:03:07,330
And now we have the ability to turn right.

5703
00:03:07,870 --> 00:03:12,280
So notice how this is the code block for our turn right function

5704
00:03:12,730 --> 00:03:16,690
and it ends at the last line, which is indented, which is line 4.

5705
00:03:17,230 --> 00:03:19,030
So every subsequent line

5706
00:03:19,060 --> 00:03:22,560
which starts at the very beginning of the code file next to

5707
00:03:22,580 --> 00:03:27,430
the left margin is outside this code block and it will act independently.

5708
00:03:28,000 --> 00:03:28,810
So in fact,

5709
00:03:28,810 --> 00:03:33,430
the first line of code that actually runs in our file is going to be this line

5710
00:03:33,430 --> 00:03:36,760
6. And you can see that when I press run,

5711
00:03:36,820 --> 00:03:39,370
you can see that's the first thing that gets highlighted.

5712
00:03:40,030 --> 00:03:42,340
And if I go through this step wise,

5713
00:03:42,400 --> 00:03:47,260
you can see the first line is going to be line 6 and it tells the computer to

5714
00:03:47,260 --> 00:03:51,520
go and find this function called turn_right. So if I skipped to the next step,

5715
00:03:51,700 --> 00:03:55,930
it's found that, and it's going to start going through lines 2, 3,

5716
00:03:55,930 --> 00:03:56,763
and 4,

5717
00:03:57,040 --> 00:04:02,040
turning our robot three times until it has turned right. Now that we have the

5718
00:04:03,970 --> 00:04:05,440
ability to turn right,

5719
00:04:05,560 --> 00:04:10,560
let's have a think about how we might be able to get our robot to make one jump.

5720
00:04:11,440 --> 00:04:16,440
Let's see. The first thing we'd probably want our robot to do is to move forwards

5721
00:04:16,570 --> 00:04:19,120
by one step, which should take it here.

5722
00:04:19,630 --> 00:04:24,630
And then the next thing we want it to do is the turn left so that it faces the

5723
00:04:24,760 --> 00:04:25,593
top.

5724
00:04:28,680 --> 00:04:28,940
Right?

5725
00:04:28,940 --> 00:04:31,220
And once it's in this position,

5726
00:04:31,250 --> 00:04:34,580
then we want to get it to move forward one step,

5727
00:04:35,210 --> 00:04:39,920
and then we'll probably want it to turn right. Now,

5728
00:04:39,950 --> 00:04:44,950
notice how I'm actually testing my code at pretty much every other line that I

5729
00:04:45,260 --> 00:04:46,093
write.

5730
00:04:46,400 --> 00:04:50,570
And this means that you don't end up in a situation where you get to the end and

5731
00:04:50,570 --> 00:04:54,020
you've written lots and lots of lines of code, and it doesn't work.

5732
00:04:54,530 --> 00:04:58,430
In which case you have to comb through all of the code you've written and find

5733
00:04:58,430 --> 00:05:01,190
out where the problem is. So in this case,

5734
00:05:01,220 --> 00:05:04,310
we've only got four lines and we've been testing it step wise.

5735
00:05:04,700 --> 00:05:09,020
So we can see that we're on track and our robot is now turned to the right,

5736
00:05:09,350 --> 00:05:11,210
ready to move one more step.

5737
00:05:13,670 --> 00:05:15,350
And then once it gets to here,

5738
00:05:15,350 --> 00:05:18,410
we have to turn right again and move one more step.

5739
00:05:23,980 --> 00:05:24,280
Right?

5740
00:05:24,280 --> 00:05:27,910
And now it should end up here, but let's just check it out.

5741
00:05:28,630 --> 00:05:32,230
So our robot turns left turns right, turns right again.

5742
00:05:32,650 --> 00:05:35,110
And it ends up here facing the bottom.

5743
00:05:35,710 --> 00:05:40,480
So the final thing we need to do is to get it, to turn left once more,

5744
00:05:42,010 --> 00:05:44,350
so that it will face the forward direction.

5745
00:05:47,630 --> 00:05:47,900
Right?

5746
00:05:47,900 --> 00:05:50,750
So once you've confirmed that your code is working,

5747
00:05:51,230 --> 00:05:54,110
then you should really think about what is the next step,

5748
00:05:54,140 --> 00:05:57,950
because we've managed to make one hurdle. And notice how,

5749
00:05:57,980 --> 00:06:01,700
when we're at this position, 3,1, this particular square,

5750
00:06:02,120 --> 00:06:05,000
it's almost the same as if we were at 1, 1,

5751
00:06:05,120 --> 00:06:10,040
because we have to move one step again, turn left, move, turn right, move,

5752
00:06:10,070 --> 00:06:12,080
turn, right, move, turn left.

5753
00:06:12,380 --> 00:06:17,380
So it's basically repeating all of these instructions, rather than executing

5754
00:06:18,140 --> 00:06:22,490
these instructions six times, because there are six hurdles.

5755
00:06:23,120 --> 00:06:25,430
So if I go back and I start,

5756
00:06:25,520 --> 00:06:28,910
then you'll see that this code actually will complete the challenge.

5757
00:06:31,980 --> 00:06:32,813
Right?

5758
00:06:32,820 --> 00:06:35,790
It says I'm done. And we're at the correct position,

5759
00:06:35,940 --> 00:06:38,160
but notice how many lines of code we've got.

5760
00:06:38,160 --> 00:06:41,340
We've got something like 58 lines of code.

5761
00:06:41,400 --> 00:06:44,700
I know I've left some spaces in their so that you can see which parts are

5762
00:06:44,700 --> 00:06:49,290
repeating, but still that's a massive amount of code for something very simple.

5763
00:06:49,860 --> 00:06:53,040
Now we know that we can use functions to package

5764
00:06:53,100 --> 00:06:55,680
a set of instructions together under one name,

5765
00:06:56,040 --> 00:06:58,560
just like what we've done here with the turn_right.

5766
00:06:58,920 --> 00:07:02,010
We've packaged the three lines of code turn left, turn left, turn

5767
00:07:02,010 --> 00:07:05,040
left into a single function called turn_right

5768
00:07:05,460 --> 00:07:09,930
so that when we need that functionality, all we need to do is just the call

5769
00:07:09,930 --> 00:07:12,360
the function and add the parentheses at the end.

5770
00:07:12,960 --> 00:07:17,550
So we can do exactly the same thing with this set of instructions,

5771
00:07:17,610 --> 00:07:21,360
which basically gets our robot to perform a single jump.

5772
00:07:22,050 --> 00:07:25,260
So let's create a def and let's call this function jump.

5773
00:07:25,920 --> 00:07:30,420
And then lets add the parentheses and the colon. And very importantly,

5774
00:07:30,450 --> 00:07:34,590
all of these lines of code must be indented. So to indent

5775
00:07:34,590 --> 00:07:36,090
a whole block of code together,

5776
00:07:36,330 --> 00:07:41,330
you hold down the command key and click the left square bracket or the right

5777
00:07:41,460 --> 00:07:45,600
square bracket. On windows it's holding down the control key and again,

5778
00:07:45,600 --> 00:07:48,450
the last square bracket or the right square bracket.

5779
00:07:49,140 --> 00:07:54,140
So now this basically says that all of these instructions live inside this block

5780
00:07:54,660 --> 00:07:58,890
of code called jump. And when we call jump,

5781
00:07:59,760 --> 00:08:03,300
then it will carry out all of these lines of code.

5782
00:08:04,680 --> 00:08:09,680
So now what we could do to complete the challenge is to simply call this

5783
00:08:09,810 --> 00:08:11,610
function jump six times.

5784
00:08:12,690 --> 00:08:13,523
Right?

5785
00:08:14,740 --> 00:08:19,740
And so now we could again solve this entire problem using just 21 lines of code.

5786
00:08:23,050 --> 00:08:28,050
And we managed to complete this challenge using two functions that have repeated

5787
00:08:28,720 --> 00:08:32,559
instructions and then calling the jump function six times.

5788
00:08:33,130 --> 00:08:37,750
But because we've learned about loops and the range function,

5789
00:08:38,110 --> 00:08:41,350
we know that we can actually cut this down even shorter.

5790
00:08:41,890 --> 00:08:44,290
So instead of calling jump six times,

5791
00:08:44,320 --> 00:08:49,320
we could actually write a for loop that loops through and calls this jump

5792
00:08:50,290 --> 00:08:50,860
function

5793
00:08:50,860 --> 00:08:55,860
six times. We could say something like for step in,

5794
00:08:56,880 --> 00:09:00,090
and remember that these two key words come from the

5795
00:09:00,090 --> 00:09:02,730
for...in loop and they always have to stay the same.

5796
00:09:03,480 --> 00:09:05,280
And then after the in keyword,

5797
00:09:05,400 --> 00:09:09,600
we define the rules for how many times we want our loop to repeat.

5798
00:09:10,050 --> 00:09:13,020
In my case, I'm going to use in range function.

5799
00:09:13,530 --> 00:09:17,370
And I'm going to say from 0 to 6,

5800
00:09:17,700 --> 00:09:22,380
but not including 6. So in this case it will be 0, 1, 2, 

5801
00:09:22,410 --> 00:09:23,910
3, 4, 5.

5802
00:09:24,270 --> 00:09:27,420
So that actually going to happen six times.

5803
00:09:28,020 --> 00:09:32,070
And now I'm going to add the colon. And finally,

5804
00:09:32,160 --> 00:09:33,930
inside this for loop,

5805
00:09:33,960 --> 00:09:37,650
I'm going to call jump just once. Now,

5806
00:09:37,650 --> 00:09:41,790
watch what happens. First it starts off at the for loop,

5807
00:09:42,180 --> 00:09:47,180
it calls jump and it goes through this once and then it comes back loops again,

5808
00:09:47,880 --> 00:09:51,690
calls it the next time. And then again,

5809
00:09:51,840 --> 00:09:55,680
the third time in the loop, fourth time in the loop,

5810
00:09:56,280 --> 00:09:59,520
fifth time in the loop and six time in the loop.

5811
00:10:01,880 --> 00:10:03,500
How far did you manage to get?

5812
00:10:03,950 --> 00:10:08,630
Did you get stuck on this section where we needed to create the for loop?

5813
00:10:09,200 --> 00:10:10,610
Well, in that case,

5814
00:10:10,640 --> 00:10:14,840
I recommend going back to the lesson where we covered for loops and reviewing

5815
00:10:14,840 --> 00:10:19,520
the for loop and the range function in detail before you come back and try to

5816
00:10:19,520 --> 00:10:21,980
solve this challenge again. It's really,

5817
00:10:21,980 --> 00:10:26,600
really important at this stage that you've understood and you've mastered some

5818
00:10:26,600 --> 00:10:31,250
of these ideas because we're going to be using them more and more in the future.

5819
00:10:31,910 --> 00:10:35,360
Really make sure that you've understood things before you keep going.

5820
00:00:00,760 --> 00:00:02,260
In previous lessons,

5821
00:00:02,290 --> 00:00:07,150
I've already mentioned how important it is in Python to be aware of your

5822
00:00:07,150 --> 00:00:12,010
indentation. So we know that when we create a function like this,

5823
00:00:12,040 --> 00:00:15,850
that every line that comes after this definition

5824
00:00:16,120 --> 00:00:20,590
that is indented is going to be inside this function.

5825
00:00:21,130 --> 00:00:23,050
So by indented, I mean

5826
00:00:23,050 --> 00:00:26,650
it's shifted to the right by four spaces like this.

5827
00:00:27,280 --> 00:00:31,990
So if you imagine each dot as a space, then this is a single block of code.

5828
00:00:33,580 --> 00:00:37,900
And if we want to continue adding to this block of code inside my function,

5829
00:00:38,170 --> 00:00:41,650
then we would continue adding lines of code, which are indented.

5830
00:00:42,430 --> 00:00:47,430
So you have to almost visualize for yourself this invisible line around these

5831
00:00:47,560 --> 00:00:51,100
blocks of code, which are indented. Now,

5832
00:00:51,190 --> 00:00:54,190
if my code was written like this on the other hand,

5833
00:00:54,550 --> 00:00:59,550
then the block of code is in fact only this part. And this print statement will

5834
00:01:02,110 --> 00:01:07,000
not get triggered when this function gets triggered because it's independent

5835
00:01:07,270 --> 00:01:12,130
from this function because it's not indented. Now, a simple way

5836
00:01:12,130 --> 00:01:16,840
that I like to think about this kind of indentation is kind of like the file

5837
00:01:16,840 --> 00:01:19,840
structure you see when you go into finder on the Mac,

5838
00:01:19,870 --> 00:01:22,390
or when you go into Explorer on Windows.

5839
00:01:23,380 --> 00:01:24,910
If we have a function,

5840
00:01:25,000 --> 00:01:29,950
it's kind of like a folder and anything that goes inside the function,

5841
00:01:29,980 --> 00:01:33,100
for example, if I throw this file inside the function,

5842
00:01:33,460 --> 00:01:36,160
then you notice that it gets indented, right?

5843
00:01:36,670 --> 00:01:39,250
And this way it shows to you very,

5844
00:01:39,250 --> 00:01:42,130
very clearly that these two files print-

5845
00:01:42,130 --> 00:01:46,420
hello and print-world are living inside this folder,

5846
00:01:46,480 --> 00:01:50,920
my function. And this is the equivalent of this code.

5847
00:01:51,400 --> 00:01:56,400
We have this folder say, my_function, and it contains these two lines of code.

5848
00:01:58,090 --> 00:01:59,260
Now, on the other hand,

5849
00:01:59,290 --> 00:02:04,290
if I take this print world and I put it outside of the function folder,

5850
00:02:05,470 --> 00:02:09,490
then you can see that this is completely independent from that folder.

5851
00:02:10,030 --> 00:02:14,170
And it's now indented at the same level as the function.

5852
00:02:14,800 --> 00:02:19,780
So this is the equivalent of this code, where we've got this print-

5853
00:02:19,780 --> 00:02:21,820
hello being inside the

5854
00:02:21,820 --> 00:02:26,820
my_function and this print-world being outside and at the same indentation level

5855
00:02:28,240 --> 00:02:31,840
as this function definition. Now,

5856
00:02:31,840 --> 00:02:35,920
the indentation gets a little bit more complicated when we have other blocks of

5857
00:02:35,920 --> 00:02:40,240
code. So for example, the, if/elif/else statements.

5858
00:02:40,420 --> 00:02:41,800
They have blocks of code,

5859
00:02:42,190 --> 00:02:45,430
which need to be indented to be inside the block.

5860
00:02:45,940 --> 00:02:49,240
For loops need to be indented to be inside the loop.

5861
00:02:49,870 --> 00:02:54,820
And it's very important that you get used to looking at blocks of code like

5862
00:02:54,820 --> 00:02:58,720
this. So for example, if we were to expand our simple

5863
00:02:59,410 --> 00:03:03,640
my_function and add a whole bunch of code into it,

5864
00:03:04,150 --> 00:03:08,890
then we would have to indent all of those lines of code by four spaces

5865
00:03:09,070 --> 00:03:13,810
represented by the four dots here. Now, if we wanted to have 

5866
00:03:13,810 --> 00:03:17,740
another block of code inside this if statement,

5867
00:03:18,040 --> 00:03:20,950
then this line has to be indented,

5868
00:03:21,190 --> 00:03:23,470
a further four spaces.

5869
00:03:24,310 --> 00:03:27,070
So this is the function block,

5870
00:03:28,000 --> 00:03:30,910
this is the if block,

5871
00:03:31,600 --> 00:03:36,600
this is the elif block and you have to be able to see all of this while just

5872
00:03:38,230 --> 00:03:43,120
looking at the indentation. If we wanted to represent this,

5873
00:03:43,180 --> 00:03:47,500
then it's almost like creating a new folder. Let's call it the

5874
00:03:47,530 --> 00:03:50,770
If sky == clear.

5875
00:03:52,480 --> 00:03:56,740
And this if block goes inside my function, so it's indented.

5876
00:03:57,490 --> 00:04:01,810
Now, if I wanted to have a print statement,

5877
00:04:01,840 --> 00:04:06,190
let's call it print-blue inside this if statement.

5878
00:04:06,220 --> 00:04:10,390
So this is what should be executed if this function gets called

5879
00:04:10,510 --> 00:04:13,630
and if the sky is equal to clear, well

5880
00:04:13,630 --> 00:04:16,390
then this line is indented twice.

5881
00:04:17,140 --> 00:04:22,140
And that is the equivalent of four spaces in our code, like this.

5882
00:04:24,100 --> 00:04:26,470
Now, every time I've talked about indentation,

5883
00:04:26,500 --> 00:04:31,500
I've been talking about spaces and actually there's two ways of creating

5884
00:04:31,750 --> 00:04:35,080
indentation. You don't have to just use spaces.

5885
00:04:35,260 --> 00:04:40,260
You can also use tabs and that's created using the tab key on your keyboard,

5886
00:04:40,720 --> 00:04:42,730
which can look a little bit like this.

5887
00:04:43,840 --> 00:04:48,550
Now there's a lot of debate around spaces and tabs where some people prefer

5888
00:04:48,550 --> 00:04:52,570
using spaces to indent, other people prefer tabs to indent.

5889
00:04:53,050 --> 00:04:56,740
And there's a lot of people arguing in the coding community.

5890
00:04:57,250 --> 00:05:01,720
And I think this excerpt from one of my favourite shows really demonstrates this.

5891
00:05:11,980 --> 00:05:15,940
Richard what's wrong? Nothing, nothing, literally. It's all good.

5892
00:05:20,640 --> 00:05:24,750
Come on. Oh my God. Your roommates are right. You really hate spaces.

5893
00:05:25,050 --> 00:05:28,920
No, no, no, no. I don't. It's not hate, hate is a strong word. Um,

5894
00:05:29,460 --> 00:05:32,490
truth be told I do have a slight preference for tabs,

5895
00:05:32,520 --> 00:05:34,360
but that's only because I'm anal

5896
00:05:34,360 --> 00:05:37,590
and because I prefer precision.

5897
00:05:40,390 --> 00:05:42,160
Well, not to pick a fight here,

5898
00:05:42,160 --> 00:05:45,580
but if you really care about precision why don't you use spaces?

5899
00:05:46,360 --> 00:05:50,050
But whatever, once it goes through the compiler, it's the same thing, right?

5900
00:05:51,230 --> 00:05:53,300
Yeah. Yeah. Technically, yes.

5901
00:05:53,630 --> 00:05:54,463
Right.

5902
00:05:59,150 --> 00:06:03,380
I guess I just, I just don't understand why anyone would use spaces over tabs.

5903
00:06:03,380 --> 00:06:04,850
Like if it's all the same,

5904
00:06:04,920 --> 00:06:08,300
why not just use tabs? Because it could look different on other people's

5905
00:06:08,300 --> 00:06:11,480
computers. Tabs create smaller file sizes. All right.

5906
00:06:11,480 --> 00:06:13,160
I run a compression company. Trust me.

5907
00:06:13,160 --> 00:06:17,090
I've devoted my life to minimalizing file sizes. It's what I do. I mean,

5908
00:06:17,090 --> 00:06:21,440
I do not get why anyone would use spaces over tabs. I mean,

5909
00:06:21,440 --> 00:06:26,390
why not just use VIM over Emacs? I do use VIM over Emacs. Oh, God help us.

5910
00:06:26,930 --> 00:06:31,220
Okay. Uh, you know what? I just, I don't think this is gonna work.

5911
00:06:31,310 --> 00:06:33,080
I'm so sorry. Uh, I mean like what,

5912
00:06:33,260 --> 00:06:35,720
we're going to bring kids into this world with that over the head.

5913
00:06:35,720 --> 00:06:37,820
Stuff's not really fair to them. Don't you think? Kids?

5914
00:06:37,820 --> 00:06:39,800
we haven't even slept together. And guess what?

5915
00:06:40,010 --> 00:06:42,920
It's never going to happen now because there is no way I'm going to be with

5916
00:06:42,920 --> 00:06:45,440
someone who uses spaces over tabs.

5917
00:06:46,260 --> 00:06:50,520
So should you be using spaces or should you be using tabs?

5918
00:06:50,580 --> 00:06:55,580
The age old question and the extent to which people obsess over this question,

5919
00:06:56,430 --> 00:07:01,050
it really shows in this 2017 Stack Overflow developer survey,

5920
00:07:01,140 --> 00:07:05,070
where they are asked the developers, do you use spaces or do you use tabs?

5921
00:07:05,490 --> 00:07:08,010
And then they compare it against their annual salary

5922
00:07:08,070 --> 00:07:13,070
and somehow have managed to show that the people who use spaces seem to earn a

5923
00:07:13,320 --> 00:07:15,480
lot more than the people who use tabs.

5924
00:07:16,830 --> 00:07:21,830
Now the official guide from the Python community is in fact to use spaces.

5925
00:07:23,010 --> 00:07:25,890
So if you click on the section, tabs or spaces,

5926
00:07:26,220 --> 00:07:28,350
they tell you in no uncertain words,

5927
00:07:28,350 --> 00:07:31,650
that spaces are the preferred indentation method.

5928
00:07:32,220 --> 00:07:34,620
And in fact, in Python 3,

5929
00:07:34,980 --> 00:07:39,980
you can't mix a code file that uses tabs and spaces for indentation in the same

5930
00:07:41,190 --> 00:07:45,720
file. And it also tells you that in order to indent a line of code,

5931
00:07:45,750 --> 00:07:49,110
it should be indented using four spaces,

5932
00:07:49,350 --> 00:07:53,520
so four hits of the space bar. Now,

5933
00:07:53,520 --> 00:07:57,270
for a lot of people, that may seem quite inefficient because I have to hit my

5934
00:07:57,270 --> 00:07:58,103
space bar

5935
00:08:00,060 --> 00:08:03,480
four times in order to achieve a single indent.

5936
00:08:03,600 --> 00:08:08,070
And you've seen how much we indent throughout our code. So it seems very,

5937
00:08:08,130 --> 00:08:09,420
very inefficient.

5938
00:08:10,110 --> 00:08:13,410
But luckily in most code editors,

5939
00:08:13,680 --> 00:08:18,680
they actually have a setting that allows you to indent using spaces,

5940
00:08:19,830 --> 00:08:22,860
changing the indent size to four.

5941
00:08:23,430 --> 00:08:25,140
And when you hit the tab key,

5942
00:08:25,500 --> 00:08:28,920
it will automatically insert four spaces,

5943
00:08:29,220 --> 00:08:33,030
which you can tell when you're trying to highlight this space,

5944
00:08:33,030 --> 00:08:36,120
you can see the cursor is jumping four times.

5945
00:08:36,990 --> 00:08:41,990
This means that you get to hit tab once and that your code is in line with the

5946
00:08:42,840 --> 00:08:45,510
guidance because the hind the scenes

5947
00:08:45,510 --> 00:08:48,900
your code editor is inserting four spaces.

5948
00:08:50,430 --> 00:08:54,420
So I hope that clears up a little bit on tabs versus spaces.

5949
00:08:54,750 --> 00:08:59,400
And I highly recommend you to head over to the course resources and click on the link

5950
00:08:59,430 --> 00:09:03,660
to go to the style guide for Python code and take a look through the parts about

5951
00:09:03,660 --> 00:09:08,190
indentation. Now in the next lesson, I've got a quick quiz for you

5952
00:09:08,370 --> 00:09:12,720
to test your knowledge on indentation. So for all of that and more,

5953
00:09:13,110 --> 00:09:14,340
I'll see you on the next lesson.

5954
00:00:00,430 --> 00:00:02,080
All right guys, in this lesson

5955
00:00:02,110 --> 00:00:07,110
I want to talk about the while loop, the loop that will continue going while a

5956
00:00:07,810 --> 00:00:09,640
particular condition is true.

5957
00:00:10,660 --> 00:00:15,100
This is a really simple version of a robot that's using a while loop.

5958
00:00:15,520 --> 00:00:16,810
So in this case,

5959
00:00:16,990 --> 00:00:21,580
the instruction would be while you are plugged into the wall and you have

5960
00:00:21,580 --> 00:00:26,050
electricity move forwards. So this is what happens.

5961
00:00:26,260 --> 00:00:31,260
It will stop once it pulls the socket out of the wall and it stops receiving

5962
00:00:31,720 --> 00:00:34,990
electricity. Let's compare this against the

5963
00:00:34,990 --> 00:00:39,190
for loop that we've seen before. So we've seen sort of two flavors of the

5964
00:00:39,190 --> 00:00:43,660
for loop: one where we're looping through a list of items to do something with

5965
00:00:43,690 --> 00:00:45,070
each item in the list,

5966
00:00:45,490 --> 00:00:50,490
and the other is using a range function where we create a range between a and b

5967
00:00:51,160 --> 00:00:55,990
and then we use every number in that range to do something. For example,

5968
00:00:55,990 --> 00:01:00,610
in this case would be to print it out. The while loop looks

5969
00:01:00,640 --> 00:01:03,520
something like this. And in this case,

5970
00:01:03,880 --> 00:01:07,810
while this particular condition is true,

5971
00:01:08,440 --> 00:01:12,400
then we go inside the loop and we do something repeatedly.

5972
00:01:12,910 --> 00:01:17,290
And it's only when the something becomes false does the loop stop.

5973
00:01:18,610 --> 00:01:22,120
So let's take a look at what the code would look like in real life.

5974
00:01:22,570 --> 00:01:27,250
So here I have the Hurdle 1 challenge that you did previously.

5975
00:01:27,850 --> 00:01:28,750
And for this

5976
00:01:28,810 --> 00:01:33,810
we created a for loop in order to get our robot to jump over the hurdle six

5977
00:01:34,450 --> 00:01:36,970
times to get to the final destination.

5978
00:01:37,630 --> 00:01:42,010
Now we could also do the same thing, but using a while loop.

5979
00:01:42,280 --> 00:01:43,540
And this is how we would do it.

5980
00:01:43,930 --> 00:01:48,310
Let's say we create a variable called a number_of_hurdles,

5981
00:01:48,730 --> 00:01:52,120
and we set that equal to six because there are six hurdles.

5982
00:01:52,690 --> 00:01:57,690
And then we use a while loop to loop through these hurdles until this goes down

5983
00:01:59,140 --> 00:02:02,800
to zero. So we can say while number_of_hurdles

5984
00:02:02,850 --> 00:02:03,683
Right,

5985
00:02:07,100 --> 00:02:11,390
> 0:

5986
00:02:12,050 --> 00:02:14,360
and then we get it to do something. Well in this case,

5987
00:02:14,360 --> 00:02:17,900
what we need it to do is to perform the jump function.

5988
00:02:18,860 --> 00:02:23,150
And at the end of the loop, just before we go back to the beginning,

5989
00:02:23,270 --> 00:02:26,270
we're going to decrease the number of hurdles,

5990
00:02:26,390 --> 00:02:27,223
Right

5991
00:02:28,700 --> 00:02:31,040
by one., -= 1.

5992
00:02:31,730 --> 00:02:36,730
So now let's go ahead and delete this version using the for loop. And in order to

5993
00:02:37,610 --> 00:02:39,350
better visualize what's happening here

5994
00:02:39,350 --> 00:02:44,120
I'm actually also going to add a print statement to print that variable.

5995
00:02:44,700 --> 00:02:45,533
Right?

5996
00:02:47,930 --> 00:02:49,880
So now let's step through this.

5997
00:02:50,300 --> 00:02:55,300
And the first time we enter the while loop, number_of_hurdles equals six,

5998
00:02:55,430 --> 00:02:56,900
six is greater than zero.

5999
00:02:57,200 --> 00:03:01,900
Then that is a go ahead to jump into the loop and execute these three lines of

6000
00:03:01,900 --> 00:03:06,730
code. So now we go in and it performs the jump function.

6001
00:03:09,430 --> 00:03:13,090
And then once that's done, it comes back, goes onto the next line,

6002
00:03:13,450 --> 00:03:17,620
number_of_hurdles minus equals one, so six should become five.

6003
00:03:17,860 --> 00:03:22,750
So now when it executes this print function, we should see five printed.

6004
00:03:23,530 --> 00:03:28,270
So lets move this little pop up away on the side and let's keep going.

6005
00:03:28,270 --> 00:03:31,900
So now it's gone back to the beginning of the while loop and it's testing this

6006
00:03:31,900 --> 00:03:36,900
condition once more: is the number of hurdles, five, still greater than zero.

6007
00:03:37,330 --> 00:03:38,770
Well, so if it's true,

6008
00:03:38,860 --> 00:03:43,860
then it goes into the while loop again and performs all of those lines of code.

6009
00:03:45,250 --> 00:03:49,000
So now it's minus one and it should now be four.

6010
00:03:49,720 --> 00:03:54,720
And it keeps on going until the point where this condition number_of_hurdles

6011
00:03:56,140 --> 00:03:59,020
greater than zero becomes false.

6012
00:04:00,280 --> 00:04:05,280
So now this is the moment where we're going to subtract a further one from our

6013
00:04:05,980 --> 00:04:08,650
number of hurdles, which is currently one.

6014
00:04:08,980 --> 00:04:12,760
So that should take it down to zero. And once that's done,

6015
00:04:13,120 --> 00:04:17,709
this condition is no longer true. Zero is not greater than zero.

6016
00:04:18,040 --> 00:04:20,529
Zero is equal to zero, but it's not greater.

6017
00:04:20,980 --> 00:04:25,980
So now this is false and we exit out of the while loop and we end our program.

6018
00:04:27,700 --> 00:04:31,000
This is what the syntax for the while loop looks like. First,

6019
00:04:31,030 --> 00:04:34,960
we have the while keyword and then we have some sort of condition that we're

6020
00:04:34,960 --> 00:04:35,860
going to test.

6021
00:04:36,130 --> 00:04:40,660
So previously you saw it was number of hurdles being greater than zero,

6022
00:04:41,110 --> 00:04:43,240
and whenever that condition is true,

6023
00:04:43,540 --> 00:04:48,070
then it's going to look inside the while loop at the indented lines of code to

6024
00:04:48,070 --> 00:04:52,420
carry out those instructions, to do this, then do this, then do this.

6025
00:04:52,720 --> 00:04:55,120
And finally, when it gets to the end of the while loop,

6026
00:04:55,150 --> 00:04:59,080
it comes back to the beginning and tests this condition again.

6027
00:04:59,230 --> 00:05:00,370
And if it's still true,

6028
00:05:00,640 --> 00:05:05,230
then it's going to go through and loop and loop and loop until this condition

6029
00:05:05,230 --> 00:05:09,310
becomes false at which point it ends an exits the while loop.

6030
00:05:10,120 --> 00:05:13,390
So now coming back to our Reeborg's World,

6031
00:05:13,450 --> 00:05:17,260
I want you to click on this dropdown and go to hurdle number 2.

6032
00:05:17,950 --> 00:05:19,930
Now this is a little bit different.

6033
00:05:20,080 --> 00:05:22,630
And if you want to see the explanation for this exercise,

6034
00:05:22,960 --> 00:05:27,550
then simply just click on this 'World Info' and you'll see the explanation.

6035
00:05:28,210 --> 00:05:32,380
So essentially this hurdle's race is a little bit different from the last one.

6036
00:05:33,010 --> 00:05:34,000
Whereas the last one

6037
00:05:34,000 --> 00:05:38,890
we knew that we had to always complete six hurdles to get to the goalpost.

6038
00:05:39,190 --> 00:05:43,570
In this case, we no longer know where the flag is going to be.

6039
00:05:43,570 --> 00:05:47,080
So it could be here, it could be here, it could be here, et cetera.

6040
00:05:47,290 --> 00:05:50,890
And it's going to be set randomly to one of these positions.

6041
00:05:51,460 --> 00:05:55,780
But what we now get is some sort of condition called at_goal.

6042
00:05:56,470 --> 00:06:01,470
And if this at_goal is true then it means our robot has landed on a flag.

6043
00:06:03,320 --> 00:06:05,540
But if this at_goal is not true,

6044
00:06:06,020 --> 00:06:09,320
then it means that it's not yet reached the flag.

6045
00:06:09,860 --> 00:06:14,860
So we can use our knowledge of while loops as well as this condition to use our

6046
00:06:15,110 --> 00:06:20,110
code that we had from previously to get our robot to complete this hurdle race.

6047
00:06:21,260 --> 00:06:24,830
So you should still have the code from the previous challenge up

6048
00:06:25,220 --> 00:06:30,220
and all you have to do is to think about how you would create a while loop so

6049
00:06:31,190 --> 00:06:36,190
that when you run this program and the flag is set randomly...

6050
00:06:36,890 --> 00:06:41,030
So this time it was set to be here, but the next time I run it,

6051
00:06:41,120 --> 00:06:45,380
you can see it's now set here. It doesn't matter where the flag is,

6052
00:06:45,500 --> 00:06:49,700
your robot should be able to detect if it's at flag, if its at the goal,

6053
00:06:50,000 --> 00:06:53,030
and if it's not then it should continue jumping.

6054
00:06:53,720 --> 00:06:58,280
Pause the video quickly and see if you can complete this challenge and then come

6055
00:06:58,280 --> 00:07:00,440
back and we'll walk through the solution together.

6056
00:07:03,250 --> 00:07:03,980
Right?

6057
00:07:03,980 --> 00:07:04,300
All right.

6058
00:07:04,300 --> 00:07:08,650
So first things first, we know that we're going to need to use a while loop and

6059
00:07:08,650 --> 00:07:13,650
the condition that we're going to be testing for is this one, at_goal.

6060
00:07:14,230 --> 00:07:17,800
This condition can be true or it can be false.

6061
00:07:18,490 --> 00:07:23,490
And basically we're looking to see while at_goal is not equal to true,

6062
00:07:27,940 --> 00:07:30,790
so while our robot is not at the goal,

6063
00:07:31,150 --> 00:07:33,970
then we want to perform the jump function.

6064
00:07:34,630 --> 00:07:39,630
So we're going to jump for as many times as it is required until this at_goal

6065
00:07:40,810 --> 00:07:41,830
becomes true.

6066
00:07:42,850 --> 00:07:47,850
Another way of expressing this at_goal is not true is to say while not at_goal.

6067
00:07:52,690 --> 00:07:56,980
So this is what they mean by the negation of this condition.

6068
00:07:58,030 --> 00:08:01,900
Either way of testing this will work. And now if I hit run,

6069
00:08:01,930 --> 00:08:05,500
you can see that even though we only need to perform one hurdle,

6070
00:08:05,800 --> 00:08:10,800
as soon as our robot gets here and it checks that at_goal is true then it will

6071
00:08:12,340 --> 00:08:14,560
stop this loop.

6072
00:08:15,610 --> 00:08:19,660
But if our loop goes on for much longer, say the goal is over here,

6073
00:08:20,170 --> 00:08:24,040
then once it reaches here and at_goal is still false,

6074
00:08:24,580 --> 00:08:29,230
then it's going to continue jumping until at_goal becomes true.

6075
00:08:30,250 --> 00:08:32,919
So that required a little bit of mental jujitsu

6076
00:08:32,919 --> 00:08:36,669
I think because this entire condition has to be true,

6077
00:08:37,210 --> 00:08:42,210
but this at_goal is actually going to be false until the moment where we

6078
00:08:42,730 --> 00:08:45,580
reached the goal. So by adding this not

6079
00:08:45,610 --> 00:08:49,390
we effectively flip this at_goal. So if it was true,

6080
00:08:49,390 --> 00:08:54,390
becomes false or if it's false becomes true in order to continue jumping while

6081
00:08:54,910 --> 00:08:56,100
we're not at the goal.

6082
00:08:56,610 --> 00:09:01,610
I prefer this particular type of syntax because it reads more like English: while

6083
00:09:01,830 --> 00:09:04,770
not at goal then perform jump.

6084
00:09:05,220 --> 00:09:09,420
And if it is at_goal then it will stop.

6085
00:09:10,680 --> 00:09:13,560
And one of the things you might be wondering right now is,

6086
00:09:13,650 --> 00:09:17,310
so I've learned about the for loop and I've learned about a while loop.

6087
00:09:17,880 --> 00:09:22,050
And if I can use both of them, why would I choose one over the other?

6088
00:09:22,110 --> 00:09:26,640
When would I use a for loop? And when would I use a while loop? Well,

6089
00:09:26,700 --> 00:09:30,480
what I would tend to say is that for loops are really great

6090
00:09:30,480 --> 00:09:35,480
when you want to iterate over something and you need to do something with each

6091
00:09:35,580 --> 00:09:40,320
thing that you are iterating over. So for example,

6092
00:09:40,320 --> 00:09:45,320
if you're iterating through a list and you're saying for each fruit in our list

6093
00:09:45,780 --> 00:09:50,670
of fruits and you want to be able to say, I don't know,

6094
00:09:50,730 --> 00:09:55,110
do something with each of these items in here. For instance,

6095
00:09:55,320 --> 00:09:59,010
it can be as simple as just printing it. Well,

6096
00:09:59,010 --> 00:10:01,320
then this will require a for loop.

6097
00:10:01,470 --> 00:10:05,130
You can't do this very easily using a while loop. Now,

6098
00:10:05,130 --> 00:10:08,520
similarly we've used the range function, right?

6099
00:10:08,520 --> 00:10:13,520
So for range from one to six print each number in the range.

6100
00:10:15,420 --> 00:10:18,330
Well this it's also easy to do with a for loop.

6101
00:10:19,050 --> 00:10:23,850
Now you want to be using a while loop when you don't really care what number in a

6102
00:10:23,850 --> 00:10:24,450
sequence you're

6103
00:10:24,450 --> 00:10:29,450
in, which item you're iterating through in a list and you just simply want to carry

6104
00:10:30,270 --> 00:10:32,760
out some sort of functionality many,

6105
00:10:32,760 --> 00:10:36,690
many times until some sort of condition that you set.

6106
00:10:37,740 --> 00:10:42,240
And this is also a good point to mention that while loops are a little bit more

6107
00:10:42,240 --> 00:10:46,710
dangerous than for loops because in for loops, you're setting ahead of time

6108
00:10:46,740 --> 00:10:48,750
how many times something is going to run.

6109
00:10:49,110 --> 00:10:52,650
It's going to stop once it reaches the end of the list of items in this case,

6110
00:10:52,950 --> 00:10:57,120
and it's going to stop once it reaches the upper bound of the range in this

6111
00:10:57,120 --> 00:10:58,950
case. But for while loops,

6112
00:10:58,980 --> 00:11:03,980
they will continue running until this particular condition switches to false.

6113
00:11:05,670 --> 00:11:10,230
So if you have some sort of condition that actually never becomes false, well

6114
00:11:10,230 --> 00:11:15,230
then your while loop becomes something known as an infinite loop. Because let's

6115
00:11:15,840 --> 00:11:20,490
say that our while loop tested while five is greater than three,

6116
00:11:20,850 --> 00:11:23,730
then carry out these three lines of code. Well,

6117
00:11:23,760 --> 00:11:28,760
five is always going to be larger than three until the end of time.

6118
00:11:29,580 --> 00:11:34,470
And so that means your code is also going to run until the end of time,

6119
00:11:34,710 --> 00:11:39,330
which is probably not what you want in most cases. If

6120
00:11:39,330 --> 00:11:43,320
instead of saying, while not at_goal, I said, while five is greater than three,

6121
00:11:43,680 --> 00:11:48,360
then you're going to see this robot perform this jump until eternity.

6122
00:11:48,450 --> 00:11:53,450
And it's basically going to stop only once it's crashed and timed out.

6123
00:11:55,090 --> 00:12:00,090
Now every single program at some point in their lives will create an infinite

6124
00:12:00,460 --> 00:12:03,790
loop. Don't worry about it. Just quit the program,

6125
00:12:03,850 --> 00:12:08,050
restart and try to prevent this from happening in the future.

6126
00:12:10,240 --> 00:12:15,240
And very often I find that it's really helpful when you don't know why you're

6127
00:12:15,250 --> 00:12:19,210
getting an infinite loop to simply just print out your condition.

6128
00:12:19,750 --> 00:12:23,350
So in this case, if I printed out five greater than three,

6129
00:12:23,590 --> 00:12:26,170
then it's always going to print true.

6130
00:12:27,820 --> 00:12:32,680
And it's never going to become false basically. In the next lesson,

6131
00:12:32,740 --> 00:12:36,880
I've got more exercises coming up for you, namely hurdles 3 and 4.

6132
00:12:37,240 --> 00:12:41,320
So head over there and put what you've learned about while loops into practice.

6133
00:00:00,760 --> 00:00:04,210
All right guys, it's time for yet another coding challenge.

6134
00:00:04,240 --> 00:00:08,320
And this coding challenge is going to put into use what you've learned about

6135
00:00:08,320 --> 00:00:09,153
while loops,

6136
00:00:09,490 --> 00:00:13,540
while also testing some of the previous knowledge you got on functions.

6137
00:00:13,990 --> 00:00:18,190
So I want you to head back to Reeborg's World and change to hurdle number 3.

6138
00:00:18,790 --> 00:00:23,380
And take a look at the premise for this particular race.

6139
00:00:24,680 --> 00:00:25,513
Right?

6140
00:00:25,670 --> 00:00:30,670
Essentially what's happened this time is that the wall placement has become

6141
00:00:31,100 --> 00:00:35,240
random. So let's say we restart this game, you can see that in this case,

6142
00:00:35,240 --> 00:00:38,960
there's a wall here, one here, one here, one here. There's four in total.

6143
00:00:39,410 --> 00:00:41,660
But if we try a different version,

6144
00:00:41,690 --> 00:00:45,590
then you can see that there is different wall placement each time.

6145
00:00:46,820 --> 00:00:49,310
Not only don't we know where the wall is going to be,

6146
00:00:49,340 --> 00:00:52,250
we also don't know how many walls there will be.

6147
00:00:52,370 --> 00:00:55,730
So code such as what we did before using a for loop

6148
00:00:55,970 --> 00:00:59,870
telling our robot to jump six times is not going to work.

6149
00:01:01,310 --> 00:01:04,400
And instead, we're going to have to use the conditions

6150
00:01:04,459 --> 00:01:09,350
whether if front is clear or whether if there's a wall in front or whether

6151
00:01:09,350 --> 00:01:12,740
if we're at the goal and also their negations,

6152
00:01:12,770 --> 00:01:15,980
so not front is clear, not wall in front,

6153
00:01:16,070 --> 00:01:20,960
not at goal. See if you can use what you've learned about while loops

6154
00:01:21,080 --> 00:01:25,670
as well as your previous knowledge on if statements and functions to complete

6155
00:01:25,730 --> 00:01:29,450
this challenge. When you have written the correct code,

6156
00:01:29,690 --> 00:01:34,670
no matter what kind of wall situation or hurdle setup they have,

6157
00:01:34,910 --> 00:01:37,760
it should always be able to get to the goal.

6158
00:01:38,810 --> 00:01:42,530
And while I've been looking at this challenge, I know there is a very,

6159
00:01:42,560 --> 00:01:45,380
very simple way of bypassing this challenge,

6160
00:01:45,410 --> 00:01:49,490
which is simply to get the robots go up here and all the way down here,

6161
00:01:49,880 --> 00:01:52,040
going past all the hurdles.

6162
00:01:52,130 --> 00:01:56,450
But that's not the point of the challenge. In order to complete this challenge,

6163
00:01:56,510 --> 00:02:00,650
you must get your robot to follow the path that set out in the dotted lines

6164
00:02:00,950 --> 00:02:04,460
instead of bypassing it and doing something completely different

6165
00:02:04,460 --> 00:02:09,410
just to get to the final goal. Pause the video, have a think about this,

6166
00:02:09,620 --> 00:02:12,440
have a read of the world info popup here,

6167
00:02:12,830 --> 00:02:16,700
and then think about how you can solve this challenge. So give it a go now.

6168
00:02:17,170 --> 00:02:18,003
Right?

6169
00:02:21,740 --> 00:02:26,300
All right. So essentially, if we don't know where the walls are going to be,

6170
00:02:26,600 --> 00:02:30,470
then we have to test to see if there is a wall in front,

6171
00:02:30,830 --> 00:02:33,680
or if there is no wall in front.

6172
00:02:34,610 --> 00:02:37,970
And if there is a wall in front, then we're going to jump.

6173
00:02:38,120 --> 00:02:41,570
But if there's no wall in front, then we're just going to move forwards.

6174
00:02:42,170 --> 00:02:47,170
And we're going to do this and test this for as long as we're not at the goal.

6175
00:02:47,780 --> 00:02:49,460
So we're going to need a while loop

6176
00:02:49,460 --> 00:02:54,350
that's very similar to our previous while loop that I showed you in the demo. While

6177
00:02:54,350 --> 00:02:58,820
we're not at goal or rather while

6178
00:02:58,900 --> 00:03:02,890
this particular condition is not true,

6179
00:03:03,580 --> 00:03:08,110
then we're going to repeat and loop some lines of code.

6180
00:03:08,800 --> 00:03:13,090
The first thing we're going to do is we're going to use an if statement to check

6181
00:03:13,150 --> 00:03:16,240
whether if there is a wall in front.

6182
00:03:17,260 --> 00:03:20,890
So I'm going to say, if wall in front,

6183
00:03:21,880 --> 00:03:23,530
if this is true,

6184
00:03:23,980 --> 00:03:28,980
then I'm going to perform the jump function and get it to jump over the wall.

6185
00:03:30,430 --> 00:03:34,570
But if there is no wall in front, so namely else,

6186
00:03:35,230 --> 00:03:38,860
well, in this case, we're simply just going to move forwards.

6187
00:03:39,370 --> 00:03:44,370
And because our jump function is always going to get us to face the right way,

6188
00:03:44,590 --> 00:03:47,200
which is this direction here towards the goal,

6189
00:03:47,620 --> 00:03:52,620
then this move forward by one function is always going to take us in this

6190
00:03:53,050 --> 00:03:53,883
direction.

6191
00:03:54,130 --> 00:03:58,390
So let's take a look at this code and let's step through it step by step.

6192
00:03:59,170 --> 00:04:03,460
So the first thing we're going to check is are we at the goal. At_goal is going

6193
00:04:03,460 --> 00:04:07,180
to be false. So not false is going to be true.

6194
00:04:07,510 --> 00:04:09,340
So while this condition is true,

6195
00:04:09,340 --> 00:04:11,800
we're going to carry out all the lines of code inside.

6196
00:04:12,310 --> 00:04:16,480
So that means we should jump into this if statement and check

6197
00:04:16,750 --> 00:04:19,899
is there a wall in front? So at this point,

6198
00:04:19,930 --> 00:04:23,440
this should be false because there is nothing in front.

6199
00:04:23,980 --> 00:04:28,980
So it should bypass the if statement and it should go to the else statement.

6200
00:04:29,650 --> 00:04:34,600
In which case it should move forward by one step. So that's the end of one loop

6201
00:04:34,720 --> 00:04:38,920
and we go back to the beginning: are we at the goal yet? Nope, we are not.

6202
00:04:39,190 --> 00:04:41,770
But now when we run into our if statement,

6203
00:04:42,070 --> 00:04:44,380
this check should now come up as true,

6204
00:04:44,500 --> 00:04:48,910
because there is a wall right in front of our robot. So in this case,

6205
00:04:48,910 --> 00:04:53,770
it's going to go into the if statement and perform the jump function. 

6206
00:04:55,270 --> 00:04:59,560
Now our jump function that we defined previously actually gets us to move

6207
00:04:59,560 --> 00:05:01,900
forward by one step first,

6208
00:05:02,170 --> 00:05:06,700
before we actually hurdle over this wall. So in this case,

6209
00:05:06,700 --> 00:05:08,380
if we try to do the same thing,

6210
00:05:08,410 --> 00:05:11,320
then it's actually going to hit our robot into a wall.

6211
00:05:11,770 --> 00:05:16,770
We have to modify our jump function by removing this first move function.

6212
00:05:19,090 --> 00:05:23,410
So instead we get it to just turn left, go up, turn right,

6213
00:05:23,470 --> 00:05:28,240
go right, turn right, go down and then turn left to face the right direction.

6214
00:05:28,540 --> 00:05:32,710
This is a pure hurdle without that extra step in the beginning.

6215
00:05:33,370 --> 00:05:37,300
And instead we're going to only move if there is no wall in front.

6216
00:05:38,020 --> 00:05:39,250
So we've changed the code.

6217
00:05:39,280 --> 00:05:43,030
Let's back it up and try this again with a different setup.

6218
00:05:44,230 --> 00:05:47,710
And in this case, you can see as my code is going through the different steps,

6219
00:05:47,920 --> 00:05:50,860
it's checking to see if there's a wall in front. If there is,

6220
00:05:50,920 --> 00:05:53,350
then it's going to jump over it. If there isn't,

6221
00:05:53,350 --> 00:05:57,830
it's just going to move forward by one step and then it's going to reevaluate.

6222
00:05:58,160 --> 00:06:00,380
So this way, once it gets to here,

6223
00:06:00,470 --> 00:06:04,460
it's actually going to reevaluate the while loop quite a few times

6224
00:06:04,760 --> 00:06:07,520
and every time it's going to be the else statement that fires.

6225
00:06:07,520 --> 00:06:11,450
It's going to move, move, move, move, move until it hits a wall again

6226
00:06:11,600 --> 00:06:15,320
and then it's going to jump over and take us to the finishing line.

6227
00:06:15,980 --> 00:06:20,090
Did you manage to get this correct? Did you manage to get the solution right?

6228
00:06:20,510 --> 00:06:25,070
If not be sure to review the previous lessons on the while loop so that you

6229
00:06:25,070 --> 00:06:26,600
familiarize yourself with it

6230
00:06:27,050 --> 00:06:30,350
and also if you got stuck on changing the jump function,

6231
00:06:30,680 --> 00:06:33,620
then be sure to remember that whenever you get stuck,

6232
00:06:33,680 --> 00:06:37,700
it's important to test your assumptions. And in this case,

6233
00:06:37,970 --> 00:06:42,350
you could have pressed the step-through button many times to see which line of

6234
00:06:42,350 --> 00:06:43,970
code is being triggered at which point,

6235
00:06:44,330 --> 00:06:47,840
and which is the moment where our code actually fails

6236
00:06:47,870 --> 00:06:50,090
so you can figure it out and fix it.

6237
00:06:51,290 --> 00:06:54,590
Now on the next lesson, I've got yet another code challenge for you.

6238
00:06:54,650 --> 00:06:56,780
So head over there and give it a go.

6239
00:00:00,070 --> 00:00:03,220
All right guys, it's time for the final hurdle

6240
00:00:03,250 --> 00:00:07,060
before we get to our goal post. In this lesson,

6241
00:00:07,090 --> 00:00:11,200
I want you to switch over to the final hurdle challenge, which is hurdle 4.

6242
00:00:11,770 --> 00:00:15,250
And in this particular version of the hurdle,

6243
00:00:15,730 --> 00:00:20,730
the wall that the robot has to jump over to now has a variable height.

6244
00:00:21,280 --> 00:00:24,550
So the height of each of these hurdles is completely random,

6245
00:00:24,610 --> 00:00:27,190
the position of the hurdles are random

6246
00:00:27,550 --> 00:00:31,240
and also the number of hurdles is also going to be random.

6247
00:00:31,600 --> 00:00:35,050
You can see that every single time that this regenerates,

6248
00:00:35,770 --> 00:00:40,270
it comes up with a completely different set of hurdle profiles.

6249
00:00:40,780 --> 00:00:45,780
And now we can't just jump because we don't know what the height will be each

6250
00:00:47,590 --> 00:00:48,423
time.

6251
00:00:48,520 --> 00:00:53,520
So we have to use what we've learned about while loops to modify this jump

6252
00:00:54,190 --> 00:00:59,190
function and see if we can get the jump to jump as high as necessary

6253
00:01:00,520 --> 00:01:04,930
depending on the height of these walls. Just as a reminder,

6254
00:01:04,930 --> 00:01:06,580
in order to complete this challenge,

6255
00:01:06,580 --> 00:01:11,580
you should take a look at the Reeborg's keyboard window and go to this tab called

6256
00:01:12,070 --> 00:01:17,050
conditions and see that you can check if the front of the robot is clear,

6257
00:01:17,380 --> 00:01:21,280
if it's right is clear, if there's a wall on the front,

6258
00:01:21,280 --> 00:01:24,940
if there's a wall on the right and various other things.

6259
00:01:25,630 --> 00:01:29,950
The ones that are probably going to be the most useful is this top row here.

6260
00:01:30,280 --> 00:01:32,950
So I want you to take a look at these conditions,

6261
00:01:33,130 --> 00:01:35,290
see how they're spelt and how you can use them,

6262
00:01:35,740 --> 00:01:40,270
and then try to use them and test them out using your Reeborg robot.

6263
00:01:40,840 --> 00:01:42,130
Now, the goal is of course

6264
00:01:42,130 --> 00:01:46,000
to reach this final flag going over various hurdles

6265
00:01:46,030 --> 00:01:50,860
using this dotted line as the path, which is going to be different each time.

6266
00:01:51,250 --> 00:01:56,170
Just as a head up, this is going to require you to modify this jump function.

6267
00:01:56,560 --> 00:02:00,610
Have a serious think about it because it's not easy

6268
00:02:01,030 --> 00:02:06,030
and you're going to need to use more while loops to achieve this end outcome. And

6269
00:02:06,550 --> 00:02:11,440
try to see if you can solve this challenge in the least lines of code possible.

6270
00:02:11,800 --> 00:02:14,950
So I managed to do it in as little as 24 lines of code,

6271
00:02:15,220 --> 00:02:17,590
so see if you can aim to achieve that.

6272
00:02:18,190 --> 00:02:20,980
Pause the video now and give this challenge a go.

6273
00:02:22,310 --> 00:02:23,143
Right?

6274
00:02:25,680 --> 00:02:26,100
All right.

6275
00:02:26,100 --> 00:02:31,100
So the key difference between this particular hurdle and the previous version is

6276
00:02:31,650 --> 00:02:36,650
that the height of the wall is now random. Instead of just jumping over one

6277
00:02:37,530 --> 00:02:40,860
square, where we turn left, move, turn right, move, turn right move,

6278
00:02:41,220 --> 00:02:44,700
we have to now see if the right side has a wall,

6279
00:02:44,940 --> 00:02:48,270
or if it's completely clear. Now, in this case,

6280
00:02:48,300 --> 00:02:52,950
what I want to happen is I want to turn my robot to the left first of all,

6281
00:02:53,460 --> 00:02:57,990
and then I want to check if there is a wall on the right.

6282
00:02:58,380 --> 00:03:02,620
So I can use this condition wall on right to achieve this.

6283
00:03:03,550 --> 00:03:04,720
And if that is true,

6284
00:03:04,750 --> 00:03:09,550
then I want to continue moving forward until there is no longer a wall on the

6285
00:03:09,550 --> 00:03:12,850
right, in which case I'm going to turn right turn right

6286
00:03:13,000 --> 00:03:17,290
and then start going down. So let's modify this jump function.

6287
00:03:17,740 --> 00:03:21,730
We definitely need the robot turn left, but after it turns left,

6288
00:03:21,760 --> 00:03:26,760
we're going to use a while loop to say that while there is a wall on the right

6289
00:03:28,360 --> 00:03:32,080
then in this case, we're going to move forwards.

6290
00:03:32,890 --> 00:03:35,800
So we're going to go up in this direction basically

6291
00:03:35,800 --> 00:03:37,570
because we've turned left already.

6292
00:03:38,260 --> 00:03:41,500
Let's test this out and let's run this code.

6293
00:03:41,800 --> 00:03:43,450
You can see in this version of events,

6294
00:03:43,510 --> 00:03:48,100
my robot is going to keep going until the very end of the screen.

6295
00:03:48,580 --> 00:03:49,780
This is not what we want.

6296
00:03:50,200 --> 00:03:54,970
So what we want to do is when this is no longer true,

6297
00:03:55,180 --> 00:03:58,330
it's going to skip to line 10. So at this point,

6298
00:03:58,360 --> 00:04:00,880
there is no longer a wall on the right,

6299
00:04:01,150 --> 00:04:05,530
because otherwise it would have continued looping and calling this line 9

6300
00:04:05,800 --> 00:04:09,880
where it gets it to move forward. When there's no longer a wall on the right,

6301
00:04:10,030 --> 00:04:12,190
then we want to do what we did previously

6302
00:04:12,190 --> 00:04:15,550
which is to get our robot to turn right move,

6303
00:04:15,850 --> 00:04:19,990
and then turn right. Now at this point, we have to move down the wall.

6304
00:04:20,350 --> 00:04:24,430
And what we're going to check is whether if the front is clear,

6305
00:04:24,460 --> 00:04:29,440
because it's only when we reach the very bottom here, when the front is blocked,

6306
00:04:29,650 --> 00:04:34,650
do we actually turn left again and continue back to our while loop here to move

6307
00:04:35,830 --> 00:04:40,450
forward. To do this we're going to add yet another while loop.

6308
00:04:41,410 --> 00:04:45,490
And in this case, we're going to use the front_is_clear condition.

6309
00:04:45,910 --> 00:04:48,070
While the front is clear,

6310
00:04:48,310 --> 00:04:51,430
we're going to get the robot to continue moving forward.

6311
00:04:51,760 --> 00:04:56,440
So once it's turned to face this direction, and there's no wall in front,

6312
00:04:56,440 --> 00:04:59,530
it's going to keep going until this is no longer true.

6313
00:04:59,950 --> 00:05:02,590
And that is the end of our jump.

6314
00:05:02,860 --> 00:05:07,860
So now we've basically modified this jump function to take into account all of

6315
00:05:08,080 --> 00:05:12,250
these new things such as while there's a wall on the right

6316
00:05:12,250 --> 00:05:16,540
then continue moving upwards, while the front is clear when it's coming down

6317
00:05:16,570 --> 00:05:20,980
then continue moving downwards. And then at the very end,

6318
00:05:21,010 --> 00:05:26,010
we're going to get our robot to turn left so that we're ready to go and check if

6319
00:05:28,240 --> 00:05:30,340
we're at the goal. And if we're not at the goal,

6320
00:05:30,370 --> 00:05:32,380
then we're going to check if there's a wall in front,

6321
00:05:32,740 --> 00:05:34,750
if there is a wall in front that we're going to jump,

6322
00:05:34,930 --> 00:05:39,610
otherwise we're going to continue moving forwards or rather to the right to get

6323
00:05:39,610 --> 00:05:42,700
to the goal. So now this is the final code.

6324
00:05:43,330 --> 00:05:46,540
And depending on the number of spaces you've added in here,

6325
00:05:46,600 --> 00:05:51,600
obviously it's a little bit easier to read if you actually have it like this.

6326
00:05:52,090 --> 00:05:56,410
But depending on how you've spaced things out in your code,

6327
00:05:56,530 --> 00:06:00,860
you should end up with anywhere between say 20 to 24 lines of code.

6328
00:06:01,880 --> 00:06:05,720
So I want you to be able to see all of these lines of code on the right when we

6329
00:06:05,720 --> 00:06:06,553
run this code.

6330
00:06:06,770 --> 00:06:10,970
And I've actually got a typo in here that it's going to tell me.

6331
00:06:11,180 --> 00:06:12,830
So it's going to say invalid syntax

6332
00:06:12,860 --> 00:06:17,270
and the problem is just because I forgot a colon here. If you get that

6333
00:06:17,270 --> 00:06:18,860
pop-up invalid syntax

6334
00:06:18,890 --> 00:06:23,890
be sure to check if you have any problems in here and it can get a little bit

6335
00:06:24,410 --> 00:06:28,310
complicated if you leave your code for a long period of time before you test it.

6336
00:06:28,340 --> 00:06:31,430
So test your code after every little iteration

6337
00:06:31,700 --> 00:06:34,700
and then when you actually get something like an invalid syntax,

6338
00:06:34,940 --> 00:06:36,530
you'll be able to catch it more easily.

6339
00:06:36,740 --> 00:06:41,740
So now let's go ahead and regenerate our map and let's try it again.

6340
00:06:42,620 --> 00:06:46,730
So when we're going to make a jump and then we're gonna turn right,

6341
00:06:46,880 --> 00:06:50,390
and we're going to keep going down until we hit the wall and we turned left,

6342
00:06:50,780 --> 00:06:53,660
and now we're not out the goal, and there's still a wall in front.

6343
00:06:53,660 --> 00:06:58,130
So we make another jump and we go down this much, much larger wall.

6344
00:06:58,640 --> 00:07:03,170
And then we continue this process of using several while loops,

6345
00:07:03,710 --> 00:07:06,590
checking if there's a wall on the right, checking if the front is clear,

6346
00:07:06,830 --> 00:07:07,250
checking

6347
00:07:07,250 --> 00:07:12,250
if there's a wall in the front in order to achieve our goal and get to our final

6348
00:07:12,440 --> 00:07:16,880
destination. Now for your code to successfully complete this challenge,

6349
00:07:17,270 --> 00:07:22,100
the line that your robot draws should follow the line that started here,

6350
00:07:22,130 --> 00:07:23,540
just like what you see here.

6351
00:07:24,050 --> 00:07:27,920
So instead of going just over the top and getting to the final goal,

6352
00:07:28,010 --> 00:07:30,770
it should follow each of these steps and finally

6353
00:07:30,770 --> 00:07:34,820
you should get that green pop-up where it says it's at the right position.

6354
00:07:35,570 --> 00:07:37,910
So did you manage to complete this challenge?

6355
00:07:38,240 --> 00:07:43,240
If not, be sure to review the lesson on while loops and just have a play around

6356
00:07:43,370 --> 00:07:44,120
with while loops.

6357
00:07:44,120 --> 00:07:48,800
Try some of the different conditions and see what happens when you run the code

6358
00:07:48,800 --> 00:07:53,480
and see how the robot behaves so that you get a good grasp of how these things

6359
00:07:53,480 --> 00:07:54,500
actually work.

6360
00:07:55,130 --> 00:08:00,110
Now on the next lesson is our final project and we're going to get our robot to

6361
00:08:00,110 --> 00:08:04,220
be able to navigate a maze all by itself using what we've learned

6362
00:08:04,250 --> 00:08:08,810
including functions as well as while loops, as well as using good indentation.

6363
00:08:09,170 --> 00:08:12,290
So for all of that and more, I'll see you on the next lesson.

6364
00:00:00,180 --> 00:00:04,230
All right guys, it's time for the final project of today.

6365
00:00:04,860 --> 00:00:09,860
And the goal is to be able to write some code here in Reeborg's world,

6366
00:00:10,590 --> 00:00:13,320
to be able to get our the little robot

6367
00:00:13,350 --> 00:00:17,730
to be able to navigate to the goal and go through a maze

6368
00:00:18,000 --> 00:00:22,230
no matter what the maze look like. So if you go back to Reeborgs world,

6369
00:00:22,230 --> 00:00:23,640
if you already got a link open..

6370
00:00:23,910 --> 00:00:28,080
if you don't, then simply click on the direct link in the course resources

6371
00:00:28,380 --> 00:00:29,760
and it should take you here.

6372
00:00:30,180 --> 00:00:34,770
And we've got the maze selected in the dropdown, which is right here.

6373
00:00:36,150 --> 00:00:41,130
Here, we have a maze. And even though the maze doesn't change,

6374
00:00:41,520 --> 00:00:46,520
the robot does. The direction that the robot is going to face is completely

6375
00:00:46,920 --> 00:00:51,390
random, the position of the robot is also random.

6376
00:00:51,420 --> 00:00:54,180
So you can see every time I restart the game,

6377
00:00:54,600 --> 00:00:58,800
it will face a different direction. So in this case, it's facing up

6378
00:00:59,160 --> 00:01:02,730
But the next time it might be facing down, in this case.

6379
00:01:03,210 --> 00:01:08,130
And it's also always going to start at a random location in the maze.

6380
00:01:08,640 --> 00:01:10,380
If you click on the world info,

6381
00:01:10,590 --> 00:01:15,240
it will tell you that the secret to getting the robot to complete the maze is to

6382
00:01:15,240 --> 00:01:18,540
get it to follow along the right edge of the maze.

6383
00:01:19,110 --> 00:01:23,520
If it starts anywhere in the maze and it just continues following along

6384
00:01:23,520 --> 00:01:24,510
the right wall,

6385
00:01:24,810 --> 00:01:28,770
it should eventually get to the final destination.

6386
00:01:29,340 --> 00:01:33,060
For example, like this. Now in this case,

6387
00:01:33,090 --> 00:01:38,090
the robot is not making a beeline straight to the exit as if it could see what

6388
00:01:38,940 --> 00:01:43,890
we can see, but it is following a strategy or rather what you would call in

6389
00:01:43,890 --> 00:01:45,600
programming, an algorithm.

6390
00:01:46,020 --> 00:01:50,760
And the algorithm here is to simply follow along the right edge of the wall.

6391
00:01:51,360 --> 00:01:52,980
And if the right side is clear,

6392
00:01:53,010 --> 00:01:58,010
then continue going right until it's no longer clear at which point it should

6393
00:01:59,010 --> 00:02:03,900
just go straight. And if you can't go straight and you can't go right,

6394
00:02:04,230 --> 00:02:07,710
then the last option is to turn left.

6395
00:02:08,160 --> 00:02:12,480
It's almost like the robot is getting a set of instructions in terms of

6396
00:02:12,480 --> 00:02:17,040
hierarchy. The most important telling it to turn right if it can,

6397
00:02:17,430 --> 00:02:20,520
if it can't turn right then go straight ahead. And finally,

6398
00:02:20,520 --> 00:02:22,770
if it can't turn right or go straight ahead,

6399
00:02:23,070 --> 00:02:25,920
then to turn left as a last resort.

6400
00:02:26,400 --> 00:02:30,120
So you're going to need to use a lot of the functions that you saw previously

6401
00:02:30,120 --> 00:02:33,240
such as move, turn_left, and testing

6402
00:02:33,240 --> 00:02:36,270
whether if the front is clear or the right is clear,

6403
00:02:36,660 --> 00:02:40,710
or there's a wall in the front or a wall in the right. And whether

6404
00:02:40,710 --> 00:02:45,300
if the robot is the goal. Think about how you can use a while loop

6405
00:02:45,660 --> 00:02:47,370
and also the conditional

6406
00:02:47,400 --> 00:02:51,990
if, elif, else statements to achieve this goal and get our robot

6407
00:02:52,140 --> 00:02:54,660
to be able to go to the final destination

6408
00:02:54,990 --> 00:02:59,160
no matter where it starts out and what direction it's facing.

6409
00:02:59,830 --> 00:03:00,820
Pause the video now

6410
00:03:00,850 --> 00:03:03,970
and try to use what you've learned to complete this final project.

6411
00:03:04,410 --> 00:03:09,410
[inaudible]

6412
00:03:10,620 --> 00:03:14,700
All right. So did you manage to complete this challenge? If not,

6413
00:03:14,910 --> 00:03:18,870
let's work through the solution together. The first thing we need to do,

6414
00:03:19,050 --> 00:03:23,880
which we've always pretty much needed completing each of these challenges, is we

6415
00:03:23,880 --> 00:03:27,180
need a way to turn right. So I'm not gonna type it all out again.

6416
00:03:27,480 --> 00:03:29,640
This should be already pretty clear; turn_right

6417
00:03:29,640 --> 00:03:32,280
is just turning left three times. Now,

6418
00:03:32,280 --> 00:03:36,960
the next thing we need to do is we need to tell the robot to do things and to

6419
00:03:36,960 --> 00:03:40,500
check for things until it reaches the goal.

6420
00:03:40,890 --> 00:03:44,310
We know that we have this test called at_goal.

6421
00:03:44,700 --> 00:03:49,700
So we can use a while loop to get the robot to continue working until it reaches

6422
00:03:50,880 --> 00:03:55,880
the goal. To define that, we could say while not at goal,

6423
00:03:57,270 --> 00:04:02,270
so basically keep repeating the instructions inside this while loop until at_goal

6424
00:04:03,510 --> 00:04:07,050
becomes true and not true is false.

6425
00:04:07,230 --> 00:04:11,100
So once this condition becomes false, then our while loop stops.

6426
00:04:12,090 --> 00:04:17,089
So what we were told in the world info is we should follow along the right edge.

6427
00:04:17,519 --> 00:04:22,520
We should test to see if the right side is clear, and if it is,

6428
00:04:22,920 --> 00:04:25,650
then we should turn right and go straight.

6429
00:04:25,830 --> 00:04:28,470
So that basically means moving right.

6430
00:04:28,950 --> 00:04:30,870
Let's use an if statement to test

6431
00:04:30,900 --> 00:04:35,900
if right_is_clear and in this instance,

6432
00:04:36,390 --> 00:04:40,890
so in this if block, we're going to say well turn_right

6433
00:04:40,920 --> 00:04:43,530
using our prebuilt function up here.

6434
00:04:44,250 --> 00:04:49,020
And then once you're facing the right then move forwards.

6435
00:04:49,680 --> 00:04:54,090
This should achieve a right move, so from here to here

6436
00:04:54,090 --> 00:04:54,923
for example.

6437
00:04:55,650 --> 00:05:00,030
Now let's test this and see what happens. In this case, the right is clear

6438
00:05:00,030 --> 00:05:03,270
so it moved right The right is not clear

6439
00:05:03,330 --> 00:05:05,160
so it doesn't know what else to do

6440
00:05:05,160 --> 00:05:09,270
and it's now stuck in what we would call an infinite loop.

6441
00:05:11,010 --> 00:05:16,010
And it will never stop until the browser actually forces it to by crashing.

6442
00:05:16,860 --> 00:05:21,860
So what we have to do instead is we have to provide an alternative condition;

6443
00:05:22,770 --> 00:05:25,860
when the right is not clear, what should it do?

6444
00:05:26,460 --> 00:05:29,790
So we're going to provide that condition by using an elif statement.

6445
00:05:30,300 --> 00:05:34,650
And what we want to say is if the right is not clear,

6446
00:05:35,460 --> 00:05:39,150
well, then maybe you should check if the front is clear.

6447
00:05:41,460 --> 00:05:45,450
And if that is the case, then simply just move forwards.

6448
00:05:46,410 --> 00:05:50,970
Now, this would work unless we're in the situation that we're in right now

6449
00:05:51,030 --> 00:05:52,260
where we're boxed in

6450
00:05:52,620 --> 00:05:56,820
and the only side that's clear is actually the remaining one, which is the left.

6451
00:05:58,040 --> 00:06:00,590
That's why we have to put in the last line of code

6452
00:06:00,950 --> 00:06:05,900
which is going to be an else statement. So in all other conditions, um,

6453
00:06:05,930 --> 00:06:09,170
when the right is not clear and the front is not clear,

6454
00:06:09,380 --> 00:06:12,230
so once both of these have been checked and they're false,

6455
00:06:12,590 --> 00:06:15,110
then actually just turn left.

6456
00:06:16,730 --> 00:06:17,540
So now

6457
00:06:17,540 --> 00:06:20,300
you can see that when our robot is able to go right,

6458
00:06:20,540 --> 00:06:23,420
it will try to follow along the right wall.

6459
00:06:24,110 --> 00:06:28,500
But when it can't go right, it will go forwards instead.

6460
00:06:28,500 --> 00:06:32,540
And when it can't go right or go forward, then it's gonna turn left

6461
00:06:32,810 --> 00:06:35,600
and hopefully the next time it checks the loop,

6462
00:06:35,900 --> 00:06:39,380
the front will be clear and it will be able to move forwards.

6463
00:06:40,010 --> 00:06:45,010
So notice how our robot is somewhat haphazardly navigating through this maze,

6464
00:06:45,980 --> 00:06:49,550
but it is following the algorithm that we specified,

6465
00:06:49,580 --> 00:06:54,580
which is to follow along the right-handed wall until you reach the goal.

6466
00:06:56,180 --> 00:07:01,180
And that's what these few lines of code does using our while statements, our if,

6467
00:07:01,490 --> 00:07:05,360
elif, else statements and also our turn_right function.

6468
00:07:06,260 --> 00:07:09,050
Now, while everything seems to work all right,

6469
00:07:09,440 --> 00:07:14,440
there are select cases where the robot might start out in a position and face a

6470
00:07:16,490 --> 00:07:21,200
particular direction that gets the robot into an endless loop.

6471
00:07:21,770 --> 00:07:23,360
So here's an example.

6472
00:07:23,720 --> 00:07:28,310
Let's say the robot starts off at this particular position facing down.

6473
00:07:28,850 --> 00:07:32,270
If we go ahead and let the robot run the code,

6474
00:07:32,720 --> 00:07:37,250
you can see that firstly, there's over a thousand steps in the code.

6475
00:07:37,850 --> 00:07:42,740
And what happens is because the robot doesn't have a wall on it's right,

6476
00:07:43,160 --> 00:07:48,160
it's going to keep looping through the circle because after all we're telling it

6477
00:07:49,520 --> 00:07:50,930
if your right side is clear,

6478
00:07:50,960 --> 00:07:55,910
turn right and move. And the right is always clear when it's inside this

6479
00:07:56,000 --> 00:08:00,560
boundary box. So depending on where the robot starts out,

6480
00:08:00,860 --> 00:08:04,940
it might get itself into what we call it an infinite loop,

6481
00:08:04,970 --> 00:08:08,180
because you can see the code just goes again and again,

6482
00:08:08,240 --> 00:08:12,950
through this while statement, and the robot's never going to be able to escape

6483
00:08:13,220 --> 00:08:14,210
from this position.

6484
00:08:15,050 --> 00:08:20,050
So this is one of the things that happens to your programs.

6485
00:08:20,540 --> 00:08:24,650
Sometimes there are edge cases which you might not have thought of

6486
00:08:25,010 --> 00:08:28,040
but it's only through testing the code do you discover them.

6487
00:08:28,940 --> 00:08:33,940
Now this particular issue I would say is more of an intermediate debugging

6488
00:08:34,940 --> 00:08:35,773
problem.

6489
00:08:36,169 --> 00:08:41,169
So if you're somebody who's already really comfortable with Python and you want

6490
00:08:42,260 --> 00:08:46,190
to try out debugging this particular problem,

6491
00:08:46,670 --> 00:08:51,670
then I've included some problem worlds for you to test your code against.

6492
00:08:54,530 --> 00:08:54,800
Now,

6493
00:08:54,800 --> 00:08:59,610
if you are somebody who is still getting to grips with Python,

6494
00:08:59,640 --> 00:09:03,600
I would say this is not the right time point to tackle this challenge,

6495
00:09:04,020 --> 00:09:09,020
and I would go ahead and make a note to yourself that once you've completed day

6496
00:09:09,330 --> 00:09:14,330
15 and you're firmly within the intermediate territory of Python to come back to

6497
00:09:16,260 --> 00:09:21,260
this problem and to continue to debug this particular edge case.

6498
00:09:22,350 --> 00:09:26,820
Now, if you are a beginner, I recommend to skip the rest of the video

6499
00:09:27,060 --> 00:09:31,680
but make a bookmark and make a note here so that you know to come back. Now,

6500
00:09:31,710 --> 00:09:33,990
if you are more of an intermediate programmer,

6501
00:09:34,350 --> 00:09:36,780
then let's go ahead and debug this.

6502
00:09:37,590 --> 00:09:42,590
So what you can do with Reeborg's world is you can actually create a file to load

6503
00:09:43,650 --> 00:09:46,530
up a particular map and robot position.

6504
00:09:47,610 --> 00:09:52,410
So what I've done is I've created a bunch of problem worlds for you to test your

6505
00:09:52,410 --> 00:09:56,070
code against that we know if you use a normal code,

6506
00:09:56,100 --> 00:09:58,140
it's definitely going to get into an infinite loop.

6507
00:09:58,860 --> 00:10:02,970
So what you need to do is head to the course resources for this lesson

6508
00:10:03,360 --> 00:10:05,610
and then download the zip file

6509
00:10:05,670 --> 00:10:09,720
which contains three problem worlds for you to test your code against.

6510
00:10:10,350 --> 00:10:14,490
And then in Reeborgs world, you're going to click on additional options,

6511
00:10:14,970 --> 00:10:19,020
open world from file and you're going to select that folder

6512
00:10:19,020 --> 00:10:23,340
which hopefully you've unzipped, and go through each of these problem worlds

6513
00:10:23,400 --> 00:10:27,630
testing your code in all of the cases. Now, when you open this up,

6514
00:10:27,660 --> 00:10:32,490
you can close off this box and the robot will start at a particular problem

6515
00:10:32,490 --> 00:10:37,490
position, facing a direction that is going to cause it to go into an

6516
00:10:37,590 --> 00:10:40,380
infinite loop. And you can know this ahead of time

6517
00:10:40,380 --> 00:10:45,380
because when you actually go to start the robot and you hit play, when you 

6518
00:10:45,660 --> 00:10:48,150
see the number of steps here over a thousand,

6519
00:10:48,510 --> 00:10:52,680
it usually means that you're probably in a situation where it's going to turn into

6520
00:10:52,680 --> 00:10:53,520
an infinite loop.

6521
00:10:54,180 --> 00:10:59,180
So write your code here and then test it to make sure that the step count goes

6522
00:10:59,250 --> 00:11:04,250
down below 1000 and your robot doesn't get stuck in this endless circle. Now,

6523
00:11:06,480 --> 00:11:10,680
because the different problem worlds can have different solutions,

6524
00:11:10,980 --> 00:11:15,630
but what you're aiming for is one solution code that solves all of the problem

6525
00:11:15,630 --> 00:11:16,350
worlds,

6526
00:11:16,350 --> 00:11:21,240
I want you to test your code against all three of these problem worlds I've

6527
00:11:21,240 --> 00:11:22,073
created for you.

6528
00:11:23,250 --> 00:11:27,660
So here's the time, if you want to tackle this challenge, to go ahead and pause

6529
00:11:27,660 --> 00:11:32,400
the video and see if you can debug this pretty hard problem.

6530
00:11:32,910 --> 00:11:36,450
It took me a while. So I think it's going to take you a while as well.

6531
00:11:36,690 --> 00:11:40,950
But you might be smarter. It might take less time. So good luck,

6532
00:11:41,100 --> 00:11:45,030
pause the video and we'll go through the solution together a little bit later

6533
00:11:45,030 --> 00:11:45,863
on.

6534
00:11:51,380 --> 00:11:55,510
All right. So first let's try and figure out what the problem is.

6535
00:11:55,870 --> 00:12:00,870
The problem here is that every time when the robot's right side is clear,

6536
00:12:01,600 --> 00:12:06,430
our code tells it to turn to that direction, move forwards,

6537
00:12:06,880 --> 00:12:11,860
and then check to see if it's at the goal. So it's not, and again

6538
00:12:11,860 --> 00:12:15,610
the right side is clear so it turns right and moves, turns right and moves,

6539
00:12:15,670 --> 00:12:20,200
turns right and moves. So basically in any of these four positions,

6540
00:12:20,590 --> 00:12:22,360
depending on the way it's facing,

6541
00:12:22,660 --> 00:12:26,170
there might not be a wall on the right side of the robot.

6542
00:12:26,620 --> 00:12:29,860
So that is the key to solving this bug.

6543
00:12:30,820 --> 00:12:35,820
We have to get our robot to a starting position where it has a wall on the right

6544
00:12:36,760 --> 00:12:38,050
side of the robot.

6545
00:12:39,520 --> 00:12:43,960
Now I've been thinking about various ways of doing this and the shortest most

6546
00:12:43,960 --> 00:12:48,910
succinct way that's also most understandable, I think, is this.

6547
00:12:49,510 --> 00:12:53,500
So if we create another while loop before this while loop runs,

6548
00:12:53,530 --> 00:12:55,750
so remember the code goes from top to bottom,

6549
00:12:55,810 --> 00:12:57,670
it's going to hit this while loop first.

6550
00:12:58,390 --> 00:13:03,220
And we check while the front is clear,

6551
00:13:04,030 --> 00:13:08,170
well then the robot is not next to a wall, right? Such as in this case.

6552
00:13:08,740 --> 00:13:13,270
Well, if that is the case, we're going to tell our robot to just move forwards.

6553
00:13:13,870 --> 00:13:18,580
So this means that our robot is going to seek out a wall. So in this case,

6554
00:13:18,580 --> 00:13:19,413
for example,

6555
00:13:20,080 --> 00:13:25,080
it's going to go forwards until it reaches a wall.

6556
00:13:27,970 --> 00:13:32,740
So it's going to loop through that loop twice and it moves twice until it hits a

6557
00:13:32,740 --> 00:13:35,950
wall in front. Now this is the point which we want,

6558
00:13:36,250 --> 00:13:40,240
because we want to make sure that now that it's hit a wall in front,

6559
00:13:40,690 --> 00:13:45,400
that it's definitely got a wall on the right side of the robot. So what do we do?

6560
00:13:45,790 --> 00:13:49,330
Well, once it's hit a wall, so it's exited this while loop,

6561
00:13:49,570 --> 00:13:52,000
we're going to tell it to turn left.

6562
00:13:52,420 --> 00:13:56,080
So this loop makes sure that the robot has a wall in front of it.

6563
00:13:56,590 --> 00:13:59,890
And once it's found a wall in front, we tell it to turn left

6564
00:14:00,190 --> 00:14:03,010
to turn that wall on to the right side of the robot.

6565
00:14:03,610 --> 00:14:08,350
So now you can see we're going through this while loop. First front is clear,

6566
00:14:08,350 --> 00:14:10,150
so it's going to move.

6567
00:14:12,220 --> 00:14:15,760
And then front is still clear after that one move

6568
00:14:15,820 --> 00:14:20,770
so it's going to move again until it's hit a wall in front. Now,

6569
00:14:20,770 --> 00:14:21,400
at this point,

6570
00:14:21,400 --> 00:14:24,910
it exits the while loop and it goes to the next line of instruction

6571
00:14:25,180 --> 00:14:29,770
which tells it to turn left. Now that the robot has turned left

6572
00:14:29,890 --> 00:14:34,890
it now has a wall on the right side and it enters the next loop.

6573
00:14:35,770 --> 00:14:40,420
So in this loop, if the right side is clear, turn right and move.

6574
00:14:40,720 --> 00:14:45,070
If the front is clear, just simply move forward, otherwise turn left.

6575
00:14:45,490 --> 00:14:50,230
So as long as the robot started in a position where there is a wall on the right

6576
00:14:50,230 --> 00:14:54,440
side of it, right next to it, it's never going to get into that infinite loop with

6577
00:14:55,130 --> 00:14:59,320
this code. So this is one solution to this problem.

6578
00:14:59,800 --> 00:15:02,080
Now there's lots of other solutions,

6579
00:15:02,320 --> 00:15:07,320
but you gotta make sure that your solution works in every single one of these

6580
00:15:08,410 --> 00:15:09,280
test cases.

6581
00:15:09,640 --> 00:15:13,870
So we can go ahead and open up problem world 2 where the robot starts at a

6582
00:15:13,870 --> 00:15:16,240
different position, facing a different position,

6583
00:15:16,570 --> 00:15:21,280
and we want to make sure that still we don't have an infinite loop. In this case,

6584
00:15:21,340 --> 00:15:25,930
it doesn't. So that's great. And finally, let's test the last one,

6585
00:15:26,170 --> 00:15:27,760
which is a problem world 3,

6586
00:15:28,420 --> 00:15:33,420
and now we can run our program and you can see it's also less than a thousand

6587
00:15:34,240 --> 00:15:36,190
steps. So, it works.

6588
00:15:37,000 --> 00:15:41,980
So this is a bit of advanced debugging because we're now testing our

6589
00:15:41,980 --> 00:15:46,980
code against various terrible scenarios where the robot starts off at a position

6590
00:15:48,310 --> 00:15:53,260
where it's really dangerous and can get into these infinite loops. Now,

6591
00:15:53,290 --> 00:15:55,600
if you didn't manage to get the solution,

6592
00:15:55,810 --> 00:15:59,410
don't despair and don't be too hard on yourself. This is a really,

6593
00:15:59,830 --> 00:16:00,670
really hard one.

6594
00:16:00,670 --> 00:16:05,470
And it took me a long time to find a solution that I think is readable and

6595
00:16:05,590 --> 00:16:08,080
explainable and sort of makes sense.

6596
00:16:08,800 --> 00:16:13,800
Now, it might be that you should put in a note in your calendar to come and

6597
00:16:14,440 --> 00:16:16,510
revisit this issue in a week

6598
00:16:16,690 --> 00:16:20,950
once you've had some time to think about it, and to really digest and understand

6599
00:16:20,950 --> 00:16:23,860
the solution, then write the code yourself.

6600
00:16:24,460 --> 00:16:27,460
Because you would have forgotten exactly what the code was,

6601
00:16:27,520 --> 00:16:32,470
but you will still remember how it works. So if that is a case,

6602
00:16:32,770 --> 00:16:37,240
this is what you should do. If you solved it by yourself, then congratulations.

6603
00:16:37,240 --> 00:16:40,450
This is really, truly quite a difficult task.


6604
00:00:00,310 --> 00:00:01,030
Hey guys,

6605
00:00:01,030 --> 00:00:05,320
welcome to Day 7 of 100 Days of code.

6606
00:00:06,010 --> 00:00:06,430
Now,

6607
00:00:06,430 --> 00:00:11,430
today we have a whole day dedicated to a really cool project.

6608
00:00:11,920 --> 00:00:16,810
And what we're going to be building throughout this day is basically Hangman or

6609
00:00:16,810 --> 00:00:18,700
the code equivalent of this game.

6610
00:00:19,180 --> 00:00:24,180
So the way the game works is you have to guess a word and for every wrong

6611
00:00:24,250 --> 00:00:25,840
letter you submit,

6612
00:00:26,200 --> 00:00:30,670
you end up taking a life away from this little man. And of course,

6613
00:00:30,910 --> 00:00:32,680
the longer it takes you to get to the word,

6614
00:00:32,920 --> 00:00:34,930
the more you put your little man in danger.

6615
00:00:35,770 --> 00:00:39,250
This is what the final completed project is going to look like.

6616
00:00:39,550 --> 00:00:43,420
We're going to have some really cool ASCII art like this hangman logo up here

6617
00:00:43,840 --> 00:00:47,920
and it's going to ask us to guess or a letter. So let's try A,

6618
00:00:48,700 --> 00:00:50,830
and you can see that's not in the word.

6619
00:00:50,860 --> 00:00:55,180
So we lose a life and it starts drawing our little hangman.

6620
00:00:55,240 --> 00:00:58,750
So let's try another letter, E. There's a lot of Es in there.

6621
00:00:58,810 --> 00:01:01,870
So we managed to get that. Let's try a T,

6622
00:01:03,460 --> 00:01:04,293
Right?

6623
00:01:09,680 --> 00:01:14,270
And I think I know what the word is now just before my little man is going to

6624
00:01:14,270 --> 00:01:18,200
die. I think it's beekeeper. There we go. We got it.

6625
00:01:18,290 --> 00:01:20,840
So if we had lost just one more life,

6626
00:01:21,140 --> 00:01:23,750
the leg would have been added and we would have lost,

6627
00:01:23,780 --> 00:01:25,340
but we managed to get there in the end.

6628
00:01:25,790 --> 00:01:29,270
So this is what the completed game looks like and how it plays out.

6629
00:01:29,450 --> 00:01:34,450
And you can go over to the final URL and run the code and see it in action if

6630
00:01:34,610 --> 00:01:37,280
you want to. But just by building this game,

6631
00:01:37,280 --> 00:01:41,600
we're going to be able to review and test ourselves on a bunch of concepts that

6632
00:01:41,600 --> 00:01:42,500
we've already covered,

6633
00:01:42,740 --> 00:01:46,730
like for and while loops or if and else statements, lists,

6634
00:01:46,760 --> 00:01:51,050
strings, the range, function, modules, and much, much more.

6635
00:01:51,410 --> 00:01:54,710
So I hope you're as excited as I am to get started on this project,

6636
00:01:55,010 --> 00:01:59,170
and once you already head over to the next lesson and let's begin.

6637
00:00:00,610 --> 00:00:04,150
All right guys. So before we get started with our project,

6638
00:00:04,420 --> 00:00:09,420
it's really important that we're all on the same page and we understand how the

6639
00:00:09,550 --> 00:00:13,660
code is going to work because we know how the game works.

6640
00:00:14,290 --> 00:00:17,440
So I recommend that if you've never heard of this game hangman,

6641
00:00:17,740 --> 00:00:22,600
then before you continue to just head over to the Wikipedia article on hangman,

6642
00:00:22,960 --> 00:00:26,290
and it might be even easier if you select your own language

6643
00:00:26,560 --> 00:00:30,340
because I know that it has a different name in different languages. Now,

6644
00:00:30,340 --> 00:00:31,840
if you've never played this game,

6645
00:00:31,840 --> 00:00:35,350
I always recommend just go and give it a go online.

6646
00:00:35,590 --> 00:00:39,910
So a link to this address, and if you click on single player untimed,

6647
00:00:40,390 --> 00:00:43,480
you can see that you have a word that you have to guess,

6648
00:00:43,810 --> 00:00:47,410
and then you start picking some letters. And if it's right,

6649
00:00:47,410 --> 00:00:49,930
then it goes in and if it's wrong,

6650
00:00:49,960 --> 00:00:54,960
then the hangman gallows start being drawn and our little man is at risk of

6651
00:00:56,380 --> 00:00:59,740
being hung. Once you understand how the game works,

6652
00:00:59,770 --> 00:01:03,610
it's time for us to examine what the logic for our program is going to look

6653
00:01:03,610 --> 00:01:07,540
like. And to do that, we're going to use flow chart programming.

6654
00:01:07,570 --> 00:01:08,980
So it's very simple.

6655
00:01:09,280 --> 00:01:14,280
It just means that we can draw out a flow chart to represent the logic of our

6656
00:01:14,500 --> 00:01:16,690
game. At this point,

6657
00:01:16,750 --> 00:01:21,190
I want you to pause the video and have a quick think about how you would program

6658
00:01:21,190 --> 00:01:22,023
hangman.

6659
00:01:22,210 --> 00:01:25,690
Try and come up with a flow chart that represents the logic of this game.

6660
00:01:26,230 --> 00:01:29,470
Break it down into little steps. What needs to happen first,

6661
00:01:29,710 --> 00:01:33,250
what needs to happen when the user makes a guess, and what should happen when the

6662
00:01:33,250 --> 00:01:37,240
guest is incorrect, when should the game end? Pause the video

6663
00:01:37,240 --> 00:01:42,130
now, take a pencil and a piece of paper, or use draw.io to create your flowchart.

6664
00:01:42,480 --> 00:01:43,313
Right?

6665
00:01:46,010 --> 00:01:48,860
So how did that go? Did you break down the problem?

6666
00:01:49,400 --> 00:01:52,640
It's really important to say that there's no single right answer here.

6667
00:01:53,030 --> 00:01:55,820
And there's loads of ways that you could have done this,

6668
00:01:56,180 --> 00:01:57,800
but let me show you my approach,

6669
00:01:57,920 --> 00:02:01,070
which is how we'll write our program over the next couple of lessons.

6670
00:02:02,570 --> 00:02:05,570
So this is what it looks like from start to end.

6671
00:02:05,990 --> 00:02:09,530
And if we zoom in a bit, let's go through this flow chart

6672
00:02:09,530 --> 00:02:13,580
step-by-step so we're all on the same page. At the start of the game

6673
00:02:13,580 --> 00:02:18,410
the first thing we do is to generate a random word. Let's say, in this case

6674
00:02:18,410 --> 00:02:19,760
it was the word mouse.

6675
00:02:20,270 --> 00:02:25,270
Now the next step is to generate as many blanks as the letters in the word.

6676
00:02:25,910 --> 00:02:28,610
So we have these blanks to show the user

6677
00:02:28,790 --> 00:02:33,140
how many letters are in this word that they need to guess. They don't get to see

6678
00:02:33,140 --> 00:02:37,100
this, but they get to see this. And the next step they get to 

6679
00:02:37,130 --> 00:02:38,360
guess a letter.

6680
00:02:38,900 --> 00:02:43,130
So let's say the user in this case guessed the letter O. Well,

6681
00:02:43,130 --> 00:02:47,960
the next thing we have to check is, is the guessed letter actually in the word?

6682
00:02:48,440 --> 00:02:51,050
Well, in this case, o it is indeed in mouse.

6683
00:02:51,050 --> 00:02:52,790
It's the one at the second position.

6684
00:02:53,330 --> 00:02:58,070
And so we go down this path and we answer yes to that question.

6685
00:02:58,430 --> 00:03:02,350
So now we to replace that blank with the letter O.

6686
00:03:03,940 --> 00:03:08,940
Now the next stage is we have to check are the blanks filled, are all of these

6687
00:03:09,160 --> 00:03:11,260
blanks removed because in that case,

6688
00:03:11,260 --> 00:03:15,820
it means the user is guessed all of the letters correctly? Well at the moment,

6689
00:03:16,060 --> 00:03:19,300
it's definitely a no, cause we've only guessed one letter.

6690
00:03:19,690 --> 00:03:23,800
So then we go all the way back to the beginning and we ask the user to guess

6691
00:03:23,860 --> 00:03:27,040
another letter. Now at some stage of the game,

6692
00:03:27,070 --> 00:03:31,840
all the letters will be guessed. And then we can answer yes to this question,

6693
00:03:32,320 --> 00:03:36,940
which means it's game over. The user has won because they've guessed all the

6694
00:03:36,940 --> 00:03:39,100
letters correctly. Now,

6695
00:03:39,250 --> 00:03:43,180
if we go back to the part where we ask the user to guess a letter,

6696
00:03:43,570 --> 00:03:46,510
and they guessed a letter, say the letter z

6697
00:03:46,630 --> 00:03:51,250
which doesn't actually exist in this word mouse, while then in this case,

6698
00:03:51,280 --> 00:03:54,160
we go down this right path to answer no

6699
00:03:54,730 --> 00:03:56,650
and the user loses a life,

6700
00:03:56,800 --> 00:04:01,630
which means we start drawing out a hangman figure. Now,

6701
00:04:01,870 --> 00:04:04,690
depending on whether if they have run out of lives,

6702
00:04:04,750 --> 00:04:08,620
if the hangman man has been drawn completely, then they would go down this path.

6703
00:04:08,650 --> 00:04:13,180
But at the moment they've only lost one life and this figure is not complete

6704
00:04:13,210 --> 00:04:14,710
so the answer is no.

6705
00:04:15,250 --> 00:04:18,430
And that means we go back to the beginning and we get them to guess the next

6706
00:04:18,430 --> 00:04:19,779
letter. Now,

6707
00:04:19,839 --> 00:04:24,400
if at the stage where they've exhausted all of their lives and the hangman

6708
00:04:24,400 --> 00:04:28,120
figure is complete, well, then it's the end of the game

6709
00:04:28,330 --> 00:04:32,140
and they've basically just lost without having guessed

6710
00:04:32,230 --> 00:04:35,950
all of the letters in the word. So this is the logic,

6711
00:04:35,980 --> 00:04:38,500
and you might need to come back to this video a few times

6712
00:04:38,830 --> 00:04:43,270
if you get stuck along the way just to review how the program flows.

6713
00:04:43,690 --> 00:04:48,690
But it might also be worth creating your own flow chart or simply downloading

6714
00:04:48,820 --> 00:04:52,270
this completed flowchart I have here in the course resources.

6715
00:04:52,810 --> 00:04:57,640
It's a really useful tool to come back to and refer to as you're writing the

6716
00:04:57,640 --> 00:04:58,390
code,

6717
00:04:58,390 --> 00:05:02,170
because this will give you an overview of what you're trying to get your code to

6718
00:05:02,170 --> 00:05:03,003
do.

6719
00:05:03,010 --> 00:05:06,700
And hopefully this is going to make it easier for you to complete the upcoming

6720
00:05:06,700 --> 00:05:11,350
challenges in this project. Once you are ready, head over to the next lesson,

6721
00:05:11,500 --> 00:05:12,520
and let's get started.

6722
00:00:00,070 --> 00:00:04,750
All right guys. So to get started head over to the starting Repl.it file

6723
00:00:04,960 --> 00:00:07,660
which you'll be able to find in the course resources,

6724
00:00:08,080 --> 00:00:13,080
and you should see a pretty much empty file as well as three to-dos for you to

6725
00:00:13,930 --> 00:00:18,790
complete. All I've got here is a list of three words,

6726
00:00:18,850 --> 00:00:20,890
ardvark, baboon, and camel.

6727
00:00:21,340 --> 00:00:25,660
And we're going to be choosing a random word from that list

6728
00:00:26,110 --> 00:00:28,930
and then we're going to ask the user to guess a letter,

6729
00:00:29,440 --> 00:00:34,440
and then we're going to check if that letter matches one of the letters in the

6730
00:00:35,140 --> 00:00:35,980
chosen word.

6731
00:00:36,310 --> 00:00:40,930
So we're basically just tackling the first part of this flowchart up to about

6732
00:00:40,930 --> 00:00:44,680
here. Once you've completed all three to-dos here,

6733
00:00:45,010 --> 00:00:48,610
you should have something that will function more or less like this.

6734
00:00:48,790 --> 00:00:51,430
So this is the end result of step 1

6735
00:00:51,880 --> 00:00:56,320
and it should ask us to guess a letter. So let me try a.

6736
00:00:57,010 --> 00:01:02,010
And it shows me that this a matches with the first letter in the word,

6737
00:01:04,120 --> 00:01:06,310
as well as the fourth letter in the word.

6738
00:01:06,640 --> 00:01:11,640
So I'm pretty sure that the word that it picks randomly was actually ardvark.

6739
00:01:12,340 --> 00:01:17,340
Essentially, your code is gonna loop through each of the letters in the chosen

6740
00:01:17,590 --> 00:01:18,310
word,

6741
00:01:18,310 --> 00:01:23,110
and then check it against the word that the user entered and report back

6742
00:01:23,200 --> 00:01:27,910
whether if it matched any of the letters in the word. Now,

6743
00:01:27,910 --> 00:01:29,110
if you need a hint,

6744
00:01:29,170 --> 00:01:34,170
then head over to the course resources and you'll see a link that's marked as a

6745
00:01:34,810 --> 00:01:37,270
hint. And once you click on it,

6746
00:01:37,390 --> 00:01:42,100
it'll take you to this page where it talks about how to use the for loop

6747
00:01:42,160 --> 00:01:47,110
with a list in Python. Have a read through the section and then go back,

6748
00:01:47,210 --> 00:01:51,520
try to tackle the to-dos and see if that helps you. All right.

6749
00:01:51,520 --> 00:01:55,390
So have a play around with the final version and once you're ready,

6750
00:01:55,510 --> 00:02:00,510
go-ahead fork a copy of the starting file for day 7 step one,

6751
00:02:01,570 --> 00:02:04,720
and tackle the to-dos one by one. Good luck.

6752
00:00:00,070 --> 00:00:00,400
All right.

6753
00:00:00,400 --> 00:00:05,400
So how did you get on? Now if you got stuck or you want to see maybe how I did

6754
00:00:05,530 --> 00:00:09,160
it, then continue watching and I'll go through the solution with you.

6755
00:00:09,820 --> 00:00:13,870
So first things first, head over to the link and fork your own copy.

6756
00:00:15,640 --> 00:00:18,730
Once you've done that, we're going to tackle the to-dos one by one

6757
00:00:18,730 --> 00:00:20,560
in order. The first one

6758
00:00:20,560 --> 00:00:25,560
asks us to randomly choose a word from the word_list and assign it to a variable

6759
00:00:27,820 --> 00:00:28,870
called chosen_word.

6760
00:00:29,500 --> 00:00:32,890
So in order to randomly get an item out of the list,

6761
00:00:33,190 --> 00:00:36,580
we're going to need to import the random module.

6762
00:00:37,900 --> 00:00:42,760
And once we've got hold of that, then we can say random.choice

6763
00:00:43,030 --> 00:00:45,490
and if we put inside the parentheses

6764
00:00:45,790 --> 00:00:48,610
the list that we want to randomly choose from,

6765
00:00:48,970 --> 00:00:53,830
then we should be able to get hold of a single item from this list randomly.

6766
00:00:54,370 --> 00:00:58,090
And then finally, we're going to assign it to a variable called chosen_word.

6767
00:00:58,510 --> 00:01:03,490
So let's call that chosen_word and then set it to equal this result.

6768
00:01:04,900 --> 00:01:09,900
So that's to-do 1 completed. The next todo we have to ask the user to guess a

6769
00:01:10,060 --> 00:01:15,060
letter and assign their answer to a variable called guess. And finally make that

6770
00:01:16,030 --> 00:01:20,650
guess lowercase. In order to ask the user for anything,

6771
00:01:20,680 --> 00:01:24,490
we're going to have to create an input. And let's say,

6772
00:01:24,550 --> 00:01:26,650
"Guess a letter:"

6773
00:01:29,470 --> 00:01:31,690
And then we can assign their answer

6774
00:01:31,720 --> 00:01:36,190
which will replace this line of code with a variable called guess.

6775
00:01:36,430 --> 00:01:40,210
So we'll just set that equal to guess. And finally,

6776
00:01:40,240 --> 00:01:45,240
we're going to make this guess lower case and we do that by writing .lower.

6777
00:01:46,840 --> 00:01:51,790
Now step 3 ask us to check if the letter the user guessed,

6778
00:01:51,970 --> 00:01:56,970
which is this guess variable, is one of the letters in the chosen_word.

6779
00:01:57,550 --> 00:02:02,550
So this randomly chosen word could be any one of these: ardvack, baboon, or camel.

6780
00:02:04,210 --> 00:02:08,080
And we have to somehow check if this letter

6781
00:02:08,410 --> 00:02:13,410
which is stored inside this variable guess matches any of the letters inside

6782
00:02:13,780 --> 00:02:17,890
this list of words. So, as I mentioned as a hint,

6783
00:02:18,100 --> 00:02:22,120
you can have a look at this document from Google for education,

6784
00:02:22,420 --> 00:02:24,550
which talks about various things in Python.

6785
00:02:25,000 --> 00:02:28,690
And the part I wanted to draw your attention to is the for loop

6786
00:02:28,720 --> 00:02:33,400
which we covered previously. So we know that we can use the for loop like this

6787
00:02:33,700 --> 00:02:38,700
to loop through a particular list and get hold of each of the items in the list,

6788
00:02:40,060 --> 00:02:43,150
like this. So in our case,

6789
00:02:43,180 --> 00:02:48,180
all we have to do is say for letter in chosen word,

6790
00:02:49,000 --> 00:02:54,000
so this is going to go through this chosen word letter by letter

6791
00:02:55,390 --> 00:02:57,130
and each time the loop runs,

6792
00:02:57,400 --> 00:03:00,460
we'll get hold of one of letters inside the word.

6793
00:03:00,850 --> 00:03:05,290
So the first time that letter variable will equal a, the next time

6794
00:03:05,320 --> 00:03:08,140
it will be equal to r and so on and so forth.

6795
00:03:08,680 --> 00:03:10,900
So now inside our for loop

6796
00:03:10,990 --> 00:03:15,990
we can check to see if the letter that we're currently looking at is double

6797
00:03:18,370 --> 00:03:23,370
equals to the letter that the user guessed and in this case,

6798
00:03:23,530 --> 00:03:25,480
well then that means its a match, right?

6799
00:03:25,510 --> 00:03:29,470
So we're going to print either a match or in my case, I'm just going to write,

6800
00:03:29,800 --> 00:03:33,850
uh, Right. And else, namely if it doesn't match,

6801
00:03:33,910 --> 00:03:37,510
then we're going to print wrong. That's it.

6802
00:03:37,570 --> 00:03:40,870
That's all we have to do to complete all three to-dos.

6803
00:03:41,380 --> 00:03:43,210
And now if I run this code,

6804
00:03:43,330 --> 00:03:47,980
you can see it's going to ask me to guess a letter. So let's put a,

6805
00:03:48,640 --> 00:03:51,850
and then it goes through this loop line by line

6806
00:03:51,880 --> 00:03:56,740
to check against this letter that I've guessed. So I'm guessing in this case

6807
00:03:56,740 --> 00:03:59,230
the chosen word is aardvark.

6808
00:03:59,590 --> 00:04:04,420
So when the loop is running through the first letter a and a match,

6809
00:04:04,480 --> 00:04:08,740
so it says right. Then the next time it's looking at the letter

6810
00:04:08,800 --> 00:04:11,080
r, a and r does not match

6811
00:04:11,080 --> 00:04:16,079
so we get wrong and it continues until it finds all the matches and all the ones

6812
00:04:16,930 --> 00:04:21,700
that don't match. Now, if you want to check your code against mine,

6813
00:04:22,089 --> 00:04:26,890
simply head over to the URL that's listed in the course resources under app

6814
00:04:26,890 --> 00:04:29,560
brewery/day-7-Hangman-1-End

6815
00:04:30,010 --> 00:04:33,070
and here you'll be able to see all the code that I went through with you just

6816
00:04:33,070 --> 00:04:36,430
now. Now, if you had any issues

6817
00:04:36,460 --> 00:04:41,260
understanding how the code worked or how to get to the final solution,

6818
00:04:41,680 --> 00:04:43,300
and if you're at all confused,

6819
00:04:43,390 --> 00:04:48,390
I recommend putting the code through Thonny and just clicking on the debug to go

6820
00:04:48,880 --> 00:04:53,290
through each of the steps one by one. So in this line,

6821
00:04:53,320 --> 00:04:58,320
we're going to use the random module and get hold of a random item from this

6822
00:05:01,360 --> 00:05:02,193
list.

6823
00:05:02,260 --> 00:05:07,260
So, in this case, it's picked camel. And now that camel is going to be equal to

6824
00:05:08,380 --> 00:05:10,600
the variable chosen_word.

6825
00:05:11,260 --> 00:05:15,010
So on the next step we ask the user to guess a letter.

6826
00:05:15,640 --> 00:05:17,290
And once we step into that,

6827
00:05:17,530 --> 00:05:21,610
it's going to print that out into the debug console.

6828
00:05:21,910 --> 00:05:26,910
And if I put a and hit enter, then guess is now equal to a,

6829
00:05:30,280 --> 00:05:33,610
and there's our second variable guess, which is equal to a.

6830
00:05:34,270 --> 00:05:38,800
Now we fall into our for loop. And if we step into the loop,

6831
00:05:39,100 --> 00:05:43,900
then you can see that the chosen_word is going to be replaced with camel and

6832
00:05:43,930 --> 00:05:48,930
letter is going to be replaced with each of the letters in the chosen word one

6833
00:05:49,060 --> 00:05:52,030
by one. So the first time loop runs, it's going to be c,

6834
00:05:52,630 --> 00:05:57,590
and then it checks to see, well, if c is equal to guess,

6835
00:05:57,620 --> 00:06:00,890
which is a, does that match? No, it doesn't.

6836
00:06:00,890 --> 00:06:05,060
So it jumps to the else part and it prints out wrong.

6837
00:06:07,460 --> 00:06:10,340
And then the loop is going to restart from the top

6838
00:06:10,400 --> 00:06:13,130
and we're going to go to the next letter in the chosen word,

6839
00:06:13,460 --> 00:06:17,480
which is a. Now in this case, the letter is a

6840
00:06:17,900 --> 00:06:22,820
and the guest is a and so that should match. And so it should print,

6841
00:06:22,940 --> 00:06:23,773
right.

6842
00:06:25,160 --> 00:06:29,030
And then it basically steps through all of these again and again

6843
00:06:29,090 --> 00:06:33,230
until we get to the end of the word and we get this printed out.

6844
00:06:33,800 --> 00:06:38,090
So have a play around with that and the debug console to wrap your head around

6845
00:06:38,090 --> 00:06:40,940
it. And once you're confident, you know, what's going on,

6846
00:06:41,210 --> 00:06:44,240
then head over to the next lesson and let's complete step 2.

6847
00:00:00,180 --> 00:00:02,440
All right. So now that you've tackled step one,

6848
00:00:02,440 --> 00:00:07,180
let's continue building out our project by doing step two. Again,

6849
00:00:07,180 --> 00:00:09,850
we have three to-dos in the starting file.

6850
00:00:10,330 --> 00:00:15,330
And what we're going to try and do here is we're going to generate a list with

6851
00:00:15,850 --> 00:00:17,710
as many of these blanks

6852
00:00:17,740 --> 00:00:22,740
which is represented by an underscore string as there are letters in the chosen

6853
00:00:23,110 --> 00:00:28,090
word. So for example, if the chosen word was apple with five letters,

6854
00:00:28,450 --> 00:00:33,450
then we should be able to create a list with five items and each of them being

6855
00:00:34,210 --> 00:00:37,810
an underscore. So then in the next stage,

6856
00:00:38,140 --> 00:00:43,140
we can replace some of the items inside that list with the correct letter

6857
00:00:45,100 --> 00:00:48,280
if the user guesses it right. So for example,

6858
00:00:48,490 --> 00:00:52,090
if the word was apple and the user guessed the letter p,

6859
00:00:52,540 --> 00:00:56,200
then we should be able to loop through each of the letters in the word.

6860
00:00:56,740 --> 00:01:00,070
And for every letter that it matches,

6861
00:01:00,340 --> 00:01:03,190
we replace the underscore with the actual letter.

6862
00:01:03,550 --> 00:01:08,050
So then we end up with a list that looks like this. Finally,

6863
00:01:08,080 --> 00:01:13,000
you're going to print that out and we should be able to see it in the console.

6864
00:01:13,480 --> 00:01:17,230
In the starting file, you'll notice I've added a little bit of testing code

6865
00:01:17,530 --> 00:01:21,970
which is just a print statement telling us what the chosen wood is,

6866
00:01:22,240 --> 00:01:26,290
and this will make it easier for us to debug and figure out if our code is not

6867
00:01:26,290 --> 00:01:30,430
doing what we want it to do. So once you've completed all of the

6868
00:01:30,430 --> 00:01:35,410
to-dos in step two, then this is what you should get. In this case,

6869
00:01:35,470 --> 00:01:38,410
the chosen word is baboon. So if,

6870
00:01:38,410 --> 00:01:42,520
I guess the letter b, because I'm cheating

6871
00:01:42,670 --> 00:01:46,060
and also because I'm trying to test the code, and I hit enter,

6872
00:01:46,300 --> 00:01:51,160
then you can see that it should print out a list with one,

6873
00:01:51,160 --> 00:01:53,140
two, three, four, five, six,

6874
00:01:53,410 --> 00:01:56,290
six items in it because there's six letters in baboon,

6875
00:01:56,860 --> 00:02:00,550
and each of the letters which I've guessed correctly in the right

6876
00:02:00,890 --> 00:02:05,890
are replaced in the list in the correct position. B occurs in the first and the

6877
00:02:06,670 --> 00:02:07,503
third letter,

6878
00:02:07,750 --> 00:02:12,490
so that is what's showing up in this list and everything else is still the

6879
00:02:12,520 --> 00:02:16,030
underscore because they're blanks and still need to be guessed.

6880
00:02:17,530 --> 00:02:20,770
Have a play around with the final version of the code

6881
00:02:21,220 --> 00:02:24,490
and once you're ready, head back, fork

6882
00:02:24,500 --> 00:02:28,630
the starting project and complete the to-dos in order. Now,

6883
00:02:28,630 --> 00:02:30,940
if you need a hint and you get stuck,

6884
00:02:31,270 --> 00:02:35,800
be sure to check the course resources for a link that links to again,

6885
00:02:35,890 --> 00:02:37,630
a Google for Education page

6886
00:02:37,690 --> 00:02:42,690
and have a read through the section on the range function that we learned about

6887
00:02:43,390 --> 00:02:44,530
in previous lessons.

6888
00:02:44,800 --> 00:02:49,330
Remind yourself of how it works and then go back to your code and try to tackle

6889
00:02:49,330 --> 00:02:53,320
it and see if you can get it to do what it needs to. Good luck

6890
00:02:53,560 --> 00:02:54,940
and I'll see you on the other side,

6891
00:00:00,430 --> 00:00:03,969
All right, let's go ahead and run through the solution together. Firstly,

6892
00:00:03,969 --> 00:00:07,870
I'm going to fork my own copy of the starting file for step two

6893
00:00:08,530 --> 00:00:11,890
and then I'm going to take a look at to-do number one.

6894
00:00:12,400 --> 00:00:15,880
So the goal is to create an empty list called display,

6895
00:00:16,480 --> 00:00:19,810
and for each letter in the chosen word,

6896
00:00:20,050 --> 00:00:22,600
remember that a random word from this list,

6897
00:00:23,050 --> 00:00:27,580
we're going to add an underscore to this list called display.

6898
00:00:28,270 --> 00:00:30,850
So it tells us that if the word was apple,

6899
00:00:30,850 --> 00:00:35,650
then display should contain five underscores representing each letter the

6900
00:00:35,650 --> 00:00:36,640
user needs to guess.

6901
00:00:37,570 --> 00:00:41,260
Let's go ahead and just click run before doing anything first.

6902
00:00:41,770 --> 00:00:46,210
And this print statement will execute and it'll tell us that the solution is

6903
00:00:46,240 --> 00:00:49,870
ardvark. This is a seven letter word. So in this case,

6904
00:00:49,900 --> 00:00:54,900
we would need to create a list with seven underscores and seven items.

6905
00:00:55,630 --> 00:00:58,630
Let's go ahead and create an empty list called display.

6906
00:00:59,230 --> 00:01:03,640
An empty list is just a set of square brackets with nothing inside.

6907
00:01:04,300 --> 00:01:07,090
Now, for each letter in the chosen word,

6908
00:01:07,150 --> 00:01:10,690
we're going to add a underscore to this list.

6909
00:01:11,320 --> 00:01:14,230
How can we add something for each letter?

6910
00:01:14,770 --> 00:01:19,420
The simplest way is to simply use a for-loop. Now, in this case,

6911
00:01:19,450 --> 00:01:20,283
we have a choice.

6912
00:01:20,590 --> 00:01:24,850
We can either use the style of for-loop that we used previously down here,

6913
00:01:25,270 --> 00:01:28,060
which is a way of looping through a list.

6914
00:01:28,390 --> 00:01:31,240
So we could say for letter in chosen_word,

6915
00:01:31,600 --> 00:01:35,620
so it's going to run this for as many letters as there are in this word.

6916
00:01:36,250 --> 00:01:38,260
And for every single letter,

6917
00:01:38,590 --> 00:01:43,590
we're just simply going to take our list, display, and add a item to it.

6918
00:01:44,230 --> 00:01:47,230
And that item is going to be the string, underscore.

6919
00:01:48,190 --> 00:01:53,190
So now if we go ahead and print out our display and see what we get.

6920
00:01:56,080 --> 00:01:57,580
The solution is baboon

6921
00:01:57,610 --> 00:02:02,440
which has six letters and display gets printed with one, two, three, four,

6922
00:02:02,440 --> 00:02:05,050
five, six underscores inside.

6923
00:02:05,680 --> 00:02:10,680
Now notice how here we're not actually using this variable letter that gets

6924
00:02:10,750 --> 00:02:13,990
created. We're looping through every letter in the chosen word,

6925
00:02:14,020 --> 00:02:17,920
but we're not doing anything with each of the letters. So we can in fact

6926
00:02:17,920 --> 00:02:21,610
just replace it with an underscore. Now, alternatively,

6927
00:02:21,640 --> 00:02:25,720
we could have created this for loop with a range function as well.

6928
00:02:26,230 --> 00:02:31,230
And remember that the range function creates a range of numbers from zero up to

6929
00:02:32,290 --> 00:02:36,760
a particular number that you specify. So we could have also,

6930
00:02:37,060 --> 00:02:41,680
instead of looping through the chosen word, use range and inside here,

6931
00:02:41,680 --> 00:02:45,250
we could have put the length of the chosen word.

6932
00:02:46,210 --> 00:02:51,040
So then our range would be between zero and the length of the chosen word.

6933
00:02:51,310 --> 00:02:56,080
So it was a baboon then it would be from zero to six, but not including six.

6934
00:02:56,080 --> 00:02:58,600
Remember that's how the range operator works.

6935
00:02:59,050 --> 00:03:04,050
So it would be zero and then it would be one and so on and so forth until it

6936
00:03:04,210 --> 00:03:05,560
gets to five.

6937
00:03:06,280 --> 00:03:11,280
And so that would be a total of six loops adding six of these underscores.

6938
00:03:11,710 --> 00:03:15,220
So given that I've updated this for loop, if we run it again,

6939
00:03:15,430 --> 00:03:17,140
you can see its exactly the same,

6940
00:03:17,380 --> 00:03:21,430
it will create as many underscores in the list as there are letters in the

6941
00:03:21,430 --> 00:03:25,150
chosen word. So it doesn't actually matter in this case

6942
00:03:25,240 --> 00:03:28,780
which version you went for, either this version of the

6943
00:03:28,780 --> 00:03:32,200
for loop using the range function or the previous one

6944
00:03:32,410 --> 00:03:37,210
which just looped through the list. It's your choice. They both worked the same.

6945
00:03:38,050 --> 00:03:41,380
So now let's move on to to-do number two.

6946
00:03:41,950 --> 00:03:45,550
Now we have to loop through each position in the chosen word

6947
00:03:46,060 --> 00:03:50,350
and if the letter at that position matches the letter the user guessed,

6948
00:03:50,650 --> 00:03:55,090
then we're going to reveal that letter in the display at that position.

6949
00:03:55,120 --> 00:04:00,120
So basically we're going to replace the underscore with the letter that the user

6950
00:04:00,220 --> 00:04:02,500
guessed if they guessed it right.

6951
00:04:03,850 --> 00:04:08,850
So now this is probably the hardest part of this whole step because in order to

6952
00:04:09,700 --> 00:04:10,420
do this,

6953
00:04:10,420 --> 00:04:14,800
we actually have to change this for loop to

6954
00:04:14,800 --> 00:04:19,800
one that uses the range function because we need to get hold of the position

6955
00:04:20,800 --> 00:04:25,000
when the letter and the guess actually matched. That way

6956
00:04:25,030 --> 00:04:30,030
we can tap into the list and change only the item at that particular position.

6957
00:04:31,810 --> 00:04:33,970
So let me show you how the code would look.

6958
00:04:34,450 --> 00:04:36,790
Instead of saying for letter in chosen_word,

6959
00:04:36,820 --> 00:04:41,020
we would say for position in range

6960
00:04:42,850 --> 00:04:47,290
and the range is going to be between zero and the length of the chosen_word.

6961
00:04:47,740 --> 00:04:50,080
And once we've got that, then the

6962
00:04:50,080 --> 00:04:55,080
for-loop is going to run for as many times as there are letters in the word and

6963
00:04:55,120 --> 00:04:56,500
for each of those letters

6964
00:04:56,530 --> 00:05:00,250
it's going to give us a number, a position to work with.

6965
00:05:00,670 --> 00:05:05,530
So the first time it runs it position is going to be equal to zero because we'll

6966
00:05:05,530 --> 00:05:09,490
be looking at the first item in the chosen_word,

6967
00:05:09,610 --> 00:05:11,170
which in this case would be a.

6968
00:05:11,620 --> 00:05:14,620
And then the next time the loop runs position becomes one

6969
00:05:14,920 --> 00:05:17,440
and we'll be looking at the second item in the list.

6970
00:05:18,610 --> 00:05:21,850
Now we no longer have that letter to work with,

6971
00:05:22,030 --> 00:05:24,130
which is why we get an error here.

6972
00:05:25,000 --> 00:05:29,440
So how can we get hold of the current letter in the chosen word

6973
00:05:29,470 --> 00:05:33,640
given that we know the position? Well,

6974
00:05:33,640 --> 00:05:38,640
it would be as simple as saying letter = chosen_word 

6975
00:05:40,420 --> 00:05:41,320
[position].

6976
00:05:42,250 --> 00:05:47,170
Now we can check to see if the letter is equal to the letter

6977
00:05:47,170 --> 00:05:48,130
the user guessed.

6978
00:05:48,670 --> 00:05:53,670
Then we can get hold of our display and get the item at the current position and

6979
00:05:57,380 --> 00:05:59,900
then set that to equal the letter.

6980
00:06:01,700 --> 00:06:04,160
And we can get rid of the else statement entirely.

6981
00:06:07,990 --> 00:06:12,460
So now notice that we're using the length of the chosen word in quite a few

6982
00:06:12,460 --> 00:06:14,830
places. So if you want to,

6983
00:06:14,830 --> 00:06:19,830
you can actually simplify the code by simply creating a new variable called word

6984
00:06:19,990 --> 00:06:20,823
length.

6985
00:06:23,410 --> 00:06:26,380
And now every time we need to use the word_length,

6986
00:06:26,410 --> 00:06:28,990
we can just refer to that variable

6987
00:06:31,240 --> 00:06:31,560
Right?

6988
00:06:31,560 --> 00:06:34,140
which should make our code a little bit easier to read.

6989
00:06:35,480 --> 00:06:36,310
Right?

6990
00:06:36,310 --> 00:06:41,020
Finally, all we have to do for step three is just to print our list

6991
00:06:41,080 --> 00:06:44,740
which is called display. And then when we run our code,

6992
00:06:45,190 --> 00:06:48,730
you should be able to see that if the solution was camel,

6993
00:06:49,180 --> 00:06:54,180
initially, our display starts out with five blanks because there's five letters.

6994
00:06:55,120 --> 00:06:57,130
And then once we've guessed a letter,

6995
00:06:57,550 --> 00:07:02,550
then it will replace that letter at the correct position in that display list.

6996
00:07:04,420 --> 00:07:07,720
So a only matches the second letter,

6997
00:07:08,050 --> 00:07:11,650
so that second blank gets replaced by this letter.

6998
00:07:12,610 --> 00:07:13,210
And again,

6999
00:07:13,210 --> 00:07:18,070
I recommend to review the code if it's at all confusing or if you didn't manage

7000
00:07:18,070 --> 00:07:23,070
to get it first time through the Thonny IDE just to see it step by step and see

7001
00:07:23,410 --> 00:07:27,100
what's actually happening. We've chosen our random word,

7002
00:07:27,700 --> 00:07:30,070
which in this case turns out to be camel.

7003
00:07:30,610 --> 00:07:34,210
And once we get into our display,

7004
00:07:34,240 --> 00:07:36,190
it starts out as an empty list.

7005
00:07:36,670 --> 00:07:39,610
But as soon as we calculate the word length,

7006
00:07:40,060 --> 00:07:44,380
then we can go ahead and loop through the range of numbers from zero to the

7007
00:07:44,380 --> 00:07:49,120
length of the word, which is five. And it will run the code in the

7008
00:07:49,120 --> 00:07:49,900
for loop

7009
00:07:49,900 --> 00:07:54,640
which is just to add the underscore to this list five times.

7010
00:07:54,970 --> 00:07:58,660
And finally, once it's done, it's going to print it out.

7011
00:07:59,620 --> 00:08:03,640
So this is what we get, five blanks for the word camel.

7012
00:08:04,480 --> 00:08:07,270
Now it asked the user for a guess.

7013
00:08:07,390 --> 00:08:12,390
So I'm going to guess that letter a and enters this final for loop.

7014
00:08:13,480 --> 00:08:14,950
This is where it's really interesting.

7015
00:08:14,950 --> 00:08:17,590
So we're going to step into it to see it in more detail.

7016
00:08:18,370 --> 00:08:23,370
So now the range is a range between zero and the word length.

7017
00:08:24,070 --> 00:08:25,690
So the word length is five

7018
00:08:25,840 --> 00:08:30,010
so that range becomes from zero to five not

7019
00:08:30,010 --> 00:08:34,120
including five. So zero, one, two, three, four.

7020
00:08:34,539 --> 00:08:37,720
And that is going to make the for loop run five times.

7021
00:08:38,470 --> 00:08:43,470
The position starts out with zero. And when position is zero

7022
00:08:44,860 --> 00:08:49,860
then it's going to go into this next line, line 18, and put zero here as the

7023
00:08:50,860 --> 00:08:54,400
position. And then we go into the chosen word,

7024
00:08:54,430 --> 00:08:58,260
which is camel and pick out the item at position zero.

7025
00:08:58,980 --> 00:09:03,980
And so this letter becomes equal to the letter c because that's the letter at

7026
00:09:04,950 --> 00:09:09,180
position zero of the word. So now in our if statement,

7027
00:09:09,300 --> 00:09:13,560
we check to see if the letter, which is c, is equal to the guess,

7028
00:09:13,590 --> 00:09:17,280
which is a. Well in this case, c does not equal a

7029
00:09:17,790 --> 00:09:22,020
so we go back to the beginning of the for loop and we go to the next number in

7030
00:09:22,020 --> 00:09:23,970
the range, which is now one.

7031
00:09:24,480 --> 00:09:28,410
And we're going to repeat this again and again. But in this case,

7032
00:09:28,470 --> 00:09:33,470
notice that the letter at position one of camel is equal to a.

7033
00:09:37,110 --> 00:09:41,670
So now letter is equal to a and guess is equal to a.

7034
00:09:41,910 --> 00:09:44,880
So if those two are equal, then this

7035
00:09:44,910 --> 00:09:49,910
if statement is true and we end up going inside it to carry out this

7036
00:09:50,520 --> 00:09:53,790
functionality. Our letter is equal to a,

7037
00:09:54,540 --> 00:09:58,800
and we're going to look at our list, which is called display, this one,

7038
00:09:59,430 --> 00:10:03,990
and we're going to replace that second character with the letter that was

7039
00:10:03,990 --> 00:10:07,200
matching. And it's going to do this again and again

7040
00:10:07,290 --> 00:10:11,970
until we've looped through five times through all of the letters in the chosen

7041
00:10:11,970 --> 00:10:12,720
word

7042
00:10:12,720 --> 00:10:17,720
and finally we print the final version of display with the correct letters

7043
00:10:18,900 --> 00:10:22,500
replaced. Have a play around with this

7044
00:10:22,530 --> 00:10:27,420
if you're at all confused and it might be that you need to look up some stuff on

7045
00:10:27,450 --> 00:10:28,470
Stack Overflow,

7046
00:10:28,710 --> 00:10:33,300
or you might need to review some of the lessons that we've done before on things

7047
00:10:33,300 --> 00:10:37,170
like range functions and for loops, just so that you're really,

7048
00:10:37,170 --> 00:10:38,370
really certain that you know

7049
00:10:38,370 --> 00:10:42,570
what's going on and only then should you continue to the next step.

7050
00:10:43,230 --> 00:10:46,560
Take a moment with this and I'll see you on the next lesson.

7051
00:00:00,220 --> 00:00:01,960
All right. So up till now,

7052
00:00:02,050 --> 00:00:07,050
our game is not actually particularly fun and it's because we haven't enabled the

7053
00:00:09,220 --> 00:00:10,330
repeatability.

7054
00:00:10,810 --> 00:00:15,810
So we need our game to allow the user to guess the next letter and the next

7055
00:00:17,170 --> 00:00:17,650
letter

7056
00:00:17,650 --> 00:00:22,270
and keep going until they either die or they get to the solution.

7057
00:00:23,430 --> 00:00:26,130
So in this case, the solution is ardvark.

7058
00:00:26,460 --> 00:00:29,040
So I'm gonna guess a letter, a,

7059
00:00:29,520 --> 00:00:32,490
and that gets replaced in the correct positions.

7060
00:00:33,180 --> 00:00:35,820
And now I'm allowed to guess again.

7061
00:00:36,510 --> 00:00:41,400
And I'm going to keep going until I've filled out all of the characters.

7062
00:00:41,640 --> 00:00:45,000
So I'm almost there just need a 'k' now

7063
00:00:45,120 --> 00:00:47,970
and we should complete the entire game.

7064
00:00:48,480 --> 00:00:51,510
And it tells me that it's complete and that I've won

7065
00:00:51,870 --> 00:00:56,870
and the game finally ends and exits out of the loop. In order to achieve this and

7066
00:00:58,830 --> 00:01:03,420
make our game more like a game, we have just one to-do.

7067
00:01:04,590 --> 00:01:05,040
Now,

7068
00:01:05,040 --> 00:01:10,040
the idea here is you're going to use a while loop to let the user guests again

7069
00:01:11,010 --> 00:01:15,450
after they've guessed before. Now the loop should only stop

7070
00:01:15,480 --> 00:01:19,770
once the user has guessed all of the letters in the chosen word,

7071
00:01:20,220 --> 00:01:25,220
and this means that the display list should have no more blanks in it.

7072
00:01:26,400 --> 00:01:27,420
And then at that point,

7073
00:01:27,450 --> 00:01:30,930
you can tell them that they've won. Now in order to do this,

7074
00:01:31,020 --> 00:01:35,640
and as a quick hint, you might need to have a read of, again,

7075
00:01:35,670 --> 00:01:39,870
the section which I'll link to in the course resources. And specifically,

7076
00:01:39,930 --> 00:01:42,630
I want you to focus on this 'in' key word,

7077
00:01:42,870 --> 00:01:46,110
because we mentioned it previously in the course only briefly.

7078
00:01:46,410 --> 00:01:50,130
So I want you to read through this part and see how that works,

7079
00:01:50,370 --> 00:01:53,760
because you'll need it in order to get this to work. Now,

7080
00:01:53,760 --> 00:01:58,230
the other thing to remember is that you have the negation in Python.

7081
00:01:59,040 --> 00:01:59,910
So you can say,

7082
00:01:59,910 --> 00:02:04,910
if something is not true and then to do something or other.

7083
00:02:05,700 --> 00:02:10,699
So the not is the negation and this basically flips whatever is here.

7084
00:02:10,830 --> 00:02:14,310
So it could be, um, a = 3.

7085
00:02:14,940 --> 00:02:19,940
If not a > 1.

7086
00:02:21,330 --> 00:02:26,310
So in this case, a is three, three is greater than one. So this becomes true.

7087
00:02:26,760 --> 00:02:31,560
But because there's a not in front of it, then this entire thing becomes false

7088
00:02:31,860 --> 00:02:35,070
and so this if statement won't be carried out in this case.

7089
00:02:35,520 --> 00:02:39,540
But if this was zero and zero is not greater than one,

7090
00:02:39,540 --> 00:02:43,470
so this is now false and not false becomes true

7091
00:02:43,830 --> 00:02:46,110
and now this if statement will be carried ouit.

7092
00:02:46,530 --> 00:02:50,670
So that's how you use the negation. And finally,

7093
00:02:50,910 --> 00:02:55,500
you might need to remind yourself of what we learned in yesterday's lessons and

7094
00:02:55,500 --> 00:02:58,140
how the while loop works. Essentially,

7095
00:02:58,140 --> 00:03:03,140
you want to be able to get this part to repeat itself again and again and again,

7096
00:03:03,820 --> 00:03:05,080
until 

7097
00:03:05,080 --> 00:03:09,880
all the blanks in the display is gone and they're filled.

7098
00:03:10,060 --> 00:03:12,790
And at that point, the user has won. And remember,

7099
00:03:12,790 --> 00:03:16,750
you don't have to worry about punishing the user for wrong answers just yet,

7100
00:03:16,840 --> 00:03:18,610
we're going to do that in the next step.

7101
00:03:18,970 --> 00:03:23,380
But for now, focus on this one to-do and see if you can solve this challenge.

7102
00:00:00,070 --> 00:00:02,170
All right, so let's go through the solution together.

7103
00:00:02,680 --> 00:00:07,680
Now we know that the part that we need repeating is this part where we ask the

7104
00:00:08,530 --> 00:00:11,890
user to guess a letter again and again

7105
00:00:12,220 --> 00:00:16,090
until they filled out all the blanks in this display.

7106
00:00:16,720 --> 00:00:21,720
The first step is to wrap a while loop around this block of code so we can

7107
00:00:23,200 --> 00:00:28,200
select the entire block of code and you can either indent it individually or

7108
00:00:28,510 --> 00:00:33,510
just select all of it and hit command and the right square bracket.

7109
00:00:34,360 --> 00:00:37,600
And that will shift everything by one indentation level

7110
00:00:37,870 --> 00:00:41,140
and that effectively puts it inside our while loop.

7111
00:00:41,650 --> 00:00:43,960
So now we have to define our while loop.

7112
00:00:44,290 --> 00:00:48,100
So while something is true or while something is false,

7113
00:00:48,340 --> 00:00:53,170
repeat this code again and again. So what exactly is our condition?

7114
00:00:54,130 --> 00:00:59,130
We know that we only want our loop to end once there are no more blanks

7115
00:00:59,710 --> 00:01:02,830
contained inside the list called display.

7116
00:01:03,550 --> 00:01:08,550
Why don't we create a variable which we'll call end_of_game and set that to

7117
00:01:10,750 --> 00:01:11,320
false

7118
00:01:11,320 --> 00:01:16,320
to begin with because it's not yet the end of game. And while it's not yet at the

7119
00:01:17,290 --> 00:01:22,240
end of game, so while this is false. So you can either say while

7120
00:01:22,240 --> 00:01:26,710
end of game is equal to false or alternatively

7121
00:01:26,800 --> 00:01:31,800
and I think slightly easier to read is you could say while it's not at the end

7122
00:01:32,440 --> 00:01:36,250
of the game, then repeat this continuously. Now,

7123
00:01:36,280 --> 00:01:38,290
if we were to run our code right now

7124
00:01:38,320 --> 00:01:41,530
it would actually loop on until forever.

7125
00:01:41,620 --> 00:01:44,380
It would not stop because nowhere in our code,

7126
00:01:44,590 --> 00:01:47,410
do we actually flip the switch and change this true.

7127
00:01:48,100 --> 00:01:50,770
So when is it actually the end of the game? Well,

7128
00:01:50,770 --> 00:01:53,650
it's when display has no more blanks.

7129
00:01:54,640 --> 00:01:59,640
So why don't we check at the very end after we've printed the display to see if

7130
00:02:01,630 --> 00:02:06,040
blanks are not in display.

7131
00:02:07,180 --> 00:02:12,180
So remember this in key word comes from Python and it basically allows us to

7132
00:02:12,760 --> 00:02:17,760
check to see if a particular element exists inside a particular list. So in this

7133
00:02:18,730 --> 00:02:23,260
case, we're checking if curly exists in list and there it is.

7134
00:02:23,260 --> 00:02:26,980
I can see it as one of the elements. So this is going to be true.

7135
00:02:28,270 --> 00:02:30,220
Now, if blank

7136
00:02:30,310 --> 00:02:34,150
in list is no longer true, well,

7137
00:02:34,150 --> 00:02:38,110
that means that we've gotten rid of all the blanks and we replaced them with

7138
00:02:38,110 --> 00:02:39,700
letters that the user has guessed.

7139
00:02:40,090 --> 00:02:44,140
So now this is the condition for the user having won.

7140
00:02:44,530 --> 00:02:47,710
So we can flip the end of game to true

7141
00:02:48,340 --> 00:02:50,380
and this will mean that this is last time

7142
00:02:50,500 --> 00:02:55,500
our while loop is going to run and we're going to print "You win."

7143
00:02:57,580 --> 00:03:01,870
That's it, that's all we needed do. And if it's helpful,

7144
00:03:01,930 --> 00:03:06,130
you can again, take this code, put it into Thonny and run through it

7145
00:03:06,220 --> 00:03:10,060
using the debug step-by-step to see what it's doing. Now

7146
00:03:10,120 --> 00:03:15,120
the important thing here is to realize that while statements require some sort

7147
00:03:15,820 --> 00:03:19,090
of change to happen inside the while loop

7148
00:03:19,390 --> 00:03:23,320
that changes the condition that the while loop is dependent upon

7149
00:03:23,680 --> 00:03:28,240
and it means the code exits the while loop. So in this case,

7150
00:03:28,270 --> 00:03:32,380
it's when there are no longer any more blanks inside the display list.

7151
00:03:32,920 --> 00:03:34,330
But in later steps,

7152
00:03:34,390 --> 00:03:37,600
we're going to change that so that when the users has run out of lives,

7153
00:03:37,870 --> 00:03:41,620
then it's also going to be the end of the game and they will have lost.

7154
00:03:42,880 --> 00:03:45,220
So take a moment, review this lesson,

7155
00:03:45,370 --> 00:03:47,500
make sure you understand everything that's going on.

7156
00:03:47,890 --> 00:03:51,520
Then head over to the next lesson and we'll tackle the next step.

7157
00:00:00,230 --> 00:00:04,640
Well done for getting to step 4. Now in this step

7158
00:00:04,700 --> 00:00:07,310
when you take a look at the starting file,

7159
00:00:07,340 --> 00:00:11,390
you'll see that I've incorporated a bunch of ASCII art,

7160
00:00:11,420 --> 00:00:15,050
so art that's created using strokes of the keyboard.

7161
00:00:15,560 --> 00:00:20,560
And you can see that this represents the stages of our hangman game starting from

7162
00:00:20,930 --> 00:00:25,790
where they have all six lives and then going down in lives until they have

7163
00:00:25,850 --> 00:00:28,970
no more lives, where the hangman character is complete.

7164
00:00:29,630 --> 00:00:33,710
This has been included as a list and inside the list

7165
00:00:33,860 --> 00:00:36,980
each of these pieces of art is a single string.

7166
00:00:37,040 --> 00:00:40,610
So we're going to be printing it out in this step,

7167
00:00:40,730 --> 00:00:44,000
and we're going to be using it to give the user feedback.

7168
00:00:45,080 --> 00:00:49,670
So the to-dos for step four include creating a variable called lives to keep

7169
00:00:49,670 --> 00:00:54,670
track of the number of lives and lives should be equal to six.

7170
00:00:55,760 --> 00:00:57,080
Now in the next to-do,

7171
00:00:57,380 --> 00:01:02,120
we're checking to see if the guess is actually not a letter in the chosen word,

7172
00:01:02,420 --> 00:01:05,480
then we're going to reduce that variable lives by one.

7173
00:01:05,840 --> 00:01:09,020
So eventually it's going to step down all the way to zero.

7174
00:01:09,230 --> 00:01:13,940
And when that happens, the game should stop and it should print "You lose."

7175
00:01:14,420 --> 00:01:18,950
Now, this part is really important because we want the game to stop

7176
00:01:18,980 --> 00:01:21,620
when the lives has gone down to zero.

7177
00:01:22,040 --> 00:01:26,120
So the code should exit the while loop and print "You lose."

7178
00:01:26,330 --> 00:01:29,780
So in addition to winning as a condition to ending the game,

7179
00:01:30,050 --> 00:01:34,070
losing is also a condition for ending the game. Now,

7180
00:01:34,070 --> 00:01:38,360
the final to do is just to print the ASCII art from stages

7181
00:01:38,360 --> 00:01:40,160
which is this list up here,

7182
00:01:40,610 --> 00:01:44,360
and the stage should represent the current number of lives

7183
00:01:44,360 --> 00:01:46,790
the user has remaining. So this way,

7184
00:01:46,790 --> 00:01:50,300
when we actually play the game and we get all the letters wrong,

7185
00:01:50,810 --> 00:01:55,810
each time a new piece of the hang man is going to be drawn until eventually we

7186
00:01:56,060 --> 00:02:01,060
end up with the entire drawing complete and the game ends,

7187
00:02:01,400 --> 00:02:05,450
and it tells us that we lost. If it's helpful,

7188
00:02:05,480 --> 00:02:08,389
refer to the flow chart. And once you're ready,

7189
00:02:08,419 --> 00:02:12,110
go ahead and fork the starting code and tackle the

7190
00:02:12,110 --> 00:02:15,950
to-dos one by one. Good luck and I'll see you on the other side.

7191
00:00:00,070 --> 00:00:04,120
All right. So make sure you've given it a good go before you come over here,

7192
00:00:04,330 --> 00:00:09,160
because I'm about to reveal the solution. In terms of step 4, here

7193
00:00:09,160 --> 00:00:13,660
I've got a forked copy of the code. And if I scroll down to

7194
00:00:13,660 --> 00:00:16,180
to-do number one, this is pretty simple.

7195
00:00:16,360 --> 00:00:19,300
It just tells us to create a new variable called lives

7196
00:00:19,660 --> 00:00:23,350
and this variable is going to be the one that's going to keep track of the

7197
00:00:23,350 --> 00:00:27,040
number of lives the user has left. And to start off,

7198
00:00:27,070 --> 00:00:32,049
it's going to be equal to six. Now we move on to to-do number two.

7199
00:00:32,380 --> 00:00:36,910
And it tells us that if the guess is not a letter in the chosen word,

7200
00:00:37,150 --> 00:00:40,210
then we have to reduce the number of lives by one.

7201
00:00:40,690 --> 00:00:45,340
Now it might be really tempting to put this as an else statement here,

7202
00:00:45,820 --> 00:00:48,250
because if the letter is equal to guess,

7203
00:00:48,260 --> 00:00:52,600
then well obviously it matches. Well then else, that means it doesn't match.

7204
00:00:53,020 --> 00:00:56,500
But check out what happens here if I just print a simple statement.

7205
00:00:58,090 --> 00:01:01,870
So now if I hit run and we take a look on the right side,

7206
00:01:02,140 --> 00:01:04,209
you can see that if I guess a,

7207
00:01:04,569 --> 00:01:09,190
then you can see that we get 'no match' printed five times,

7208
00:01:09,640 --> 00:01:14,640
and that should show you that this is actually not where we want to write the

7209
00:01:14,650 --> 00:01:16,300
code for to-do number two,

7210
00:01:16,330 --> 00:01:21,330
because remember to-do number two says if the guessed letter is not a letter in

7211
00:01:21,520 --> 00:01:26,260
the chosen word, then we should reduce the lives by one. But actually in fact,

7212
00:01:26,260 --> 00:01:31,260
what's happening here is it's looping through the entire word length,

7213
00:01:31,930 --> 00:01:35,260
and for each of the letters in that chosen word,

7214
00:01:35,680 --> 00:01:37,750
if the letter doesn't match the guess,

7215
00:01:37,810 --> 00:01:39,580
then it's going to trigger this else statement.

7216
00:01:40,780 --> 00:01:43,930
This is not what we want because in this case

7217
00:01:43,990 --> 00:01:46,900
a does in fact match a letter in the word baboon,

7218
00:01:47,140 --> 00:01:49,690
but we're getting no match being called five times.

7219
00:01:50,260 --> 00:01:53,680
So instead, we wanna write it outside of the for loop,

7220
00:01:53,710 --> 00:01:55,990
so at the same indentation level,

7221
00:01:56,380 --> 00:02:01,380
and the hint is that the to-do is actually at the same level as where your

7222
00:02:01,480 --> 00:02:04,150
answer code needs to go. So here,

7223
00:02:04,150 --> 00:02:09,150
we're going to write an if statement and we're going to check if the guess is

7224
00:02:09,160 --> 00:02:11,560
not in the chosen word.

7225
00:02:12,220 --> 00:02:14,560
And basically this does a separate check.

7226
00:02:14,590 --> 00:02:17,320
It goes through this entire word and checks

7227
00:02:17,350 --> 00:02:20,710
if the guessed letter exists in there at all.

7228
00:02:20,950 --> 00:02:22,690
And if this is true,

7229
00:02:22,990 --> 00:02:27,850
then we're going to reduce the number of lives by one, so -= 1.

7230
00:02:29,110 --> 00:02:30,430
Now, if at this stage

7231
00:02:30,460 --> 00:02:35,460
after we've taken a life away and the number of lives goes down to zero, well

7232
00:02:36,280 --> 00:02:39,760
then the game should stop and it should print "You lose."

7233
00:02:40,210 --> 00:02:44,470
So let's add another if statement in here that checks whether if the number of

7234
00:02:44,470 --> 00:02:48,160
lives is equals to, double equal to, zero.

7235
00:02:48,340 --> 00:02:53,140
And if this is the case, then we should exit the game. And remember to do that

7236
00:02:53,140 --> 00:02:54,730
we need to exit the while loop.

7237
00:02:55,180 --> 00:02:58,540
And the while loop is dependent on this variable end_of_game

7238
00:02:58,900 --> 00:03:03,430
which starts out being false. And when we want to exit the game,

7239
00:03:03,430 --> 00:03:06,850
when it is in fact the end of the game, we switch it to true. Like,

7240
00:03:06,850 --> 00:03:10,660
for example, in this case, when the user has won. So here,

7241
00:03:10,720 --> 00:03:15,280
when the lives is equal to zero, we can say, end_of_game = True,

7242
00:03:16,270 --> 00:03:19,090
and we're going to print "You lose."

7243
00:03:19,990 --> 00:03:23,530
So that's all that's needed to tackle to-do number two.

7244
00:03:24,490 --> 00:03:26,260
So now let's run our code again.

7245
00:03:27,910 --> 00:03:32,500
And you can see that if I keep guessing the wrong letter six times,

7246
00:03:34,750 --> 00:03:37,990
then eventually I exit out of my while loop.

7247
00:03:38,020 --> 00:03:40,030
You can see my prompt showing up again.

7248
00:03:40,420 --> 00:03:44,830
And this means that we've now come out of the game and it's told us that we've

7249
00:03:44,830 --> 00:03:45,663
lost.

7250
00:03:46,150 --> 00:03:50,020
So now all we have to do is tackle to-do number three.

7251
00:03:50,470 --> 00:03:54,940
We have to print the ASCII art from the list called stages

7252
00:03:55,270 --> 00:03:59,590
that corresponds to the current number of lives the user has remaining. Now,

7253
00:03:59,620 --> 00:04:00,700
luckily for you,

7254
00:04:00,730 --> 00:04:05,730
I've arranged each of these pictures in descending order of lives.

7255
00:04:06,190 --> 00:04:08,830
So when you have a full six lives,

7256
00:04:09,250 --> 00:04:12,700
the image at index six is the starting image.

7257
00:04:13,090 --> 00:04:14,770
And when you have no lives,

7258
00:04:14,800 --> 00:04:19,800
so the image at index zero is the one where the hangman is fully drawn.

7259
00:04:22,120 --> 00:04:26,710
So all we have to do down here is to simply just the print

7260
00:04:26,980 --> 00:04:28,300
the stages,

7261
00:04:28,900 --> 00:04:33,580
and corresponding to the current number of lives.

7262
00:04:33,610 --> 00:04:35,830
So we put lives inside the square brackets.

7263
00:04:36,340 --> 00:04:40,180
And now if we run the code again and we keep guessing,

7264
00:04:41,920 --> 00:04:46,920
you can see that we're going through our hangman picture until we are fully

7265
00:04:47,110 --> 00:04:49,840
drawn and we lose and it's the end of the game.

7266
00:04:50,770 --> 00:04:53,170
Have a quick review of the solution

7267
00:04:53,620 --> 00:04:55,930
and if you want to see this code that I've written,

7268
00:04:55,990 --> 00:04:58,960
then as always, head over to the course resources,

7269
00:04:59,200 --> 00:05:02,950
and you'll find a link to Day-7-Hangman-4-End

7270
00:05:03,280 --> 00:05:07,510
and you'll be able to see all the code that I've written in there, including,

7271
00:05:07,570 --> 00:05:11,500
um, helpful things like a print statement that you can activate,

7272
00:05:11,920 --> 00:05:13,840
which just shows you the current position,

7273
00:05:13,840 --> 00:05:16,450
the current letter and the letter that's being guessed.

7274
00:05:16,480 --> 00:05:18,940
So you can see as the loop is going on

7275
00:05:19,210 --> 00:05:24,190
what's actually happening and it'll make it easier for you to debug any problems

7276
00:05:24,190 --> 00:05:27,760
in your code. So if you had any problems in the code that you wrote,

7277
00:05:28,060 --> 00:05:32,140
this is a really useful line to be able to help you debug what's gone wrong.

7278
00:05:32,890 --> 00:05:35,050
Hopefully you manage to do thi okay,

7279
00:05:35,200 --> 00:05:39,100
and once you've had a quick review and you're happy with everything that's been

7280
00:05:39,100 --> 00:05:40,570
covered in this lesson,

7281
00:05:40,840 --> 00:05:44,650
then head over to the next lesson and we're going to complete the final step,

7282
00:05:44,650 --> 00:05:47,020
step five of our hangman project.

7283
00:00:00,070 --> 00:00:03,969
Hey! Well done for getting to the final step of the hangman project.

7284
00:00:04,450 --> 00:00:05,860
Now in step five,

7285
00:00:05,890 --> 00:00:10,210
we're going to complete the project by improving the user experience of our

7286
00:00:10,210 --> 00:00:14,440
game. Pretty much up until now, we've already got the game functioning,

7287
00:00:14,770 --> 00:00:19,180
but we were working with just three words, right? Ardvark, baboon,

7288
00:00:19,420 --> 00:00:21,610
and camel. And at some point,

7289
00:00:21,610 --> 00:00:24,970
the game gets pretty tiring when you're only guessing these three words.

7290
00:00:25,480 --> 00:00:25,990
And in fact,

7291
00:00:25,990 --> 00:00:29,590
the words were chosen so that if you see seven characters and you know

7292
00:00:29,590 --> 00:00:30,423
it's ardvark,

7293
00:00:30,520 --> 00:00:35,520
six is baboon, five is camel to make it easier for you to debug the code as

7294
00:00:36,040 --> 00:00:39,820
you're creating it. And very often when we're writing code, it really,

7295
00:00:39,820 --> 00:00:43,060
really important to help yourself when you're creating the code.

7296
00:00:43,330 --> 00:00:47,440
And only once you've got all the logic down and everything's working as expected

7297
00:00:47,710 --> 00:00:50,560
then to actually add the full functionality.

7298
00:00:51,370 --> 00:00:54,040
So inside this step five starting code,

7299
00:00:54,310 --> 00:00:58,480
if you take a look at the files over here, you'll notice two extra files.

7300
00:00:58,960 --> 00:01:02,050
One is hangman_art.py,

7301
00:01:02,440 --> 00:01:07,440
and here I've moved the hangman stages and all the drawings as well as a logo in

7302
00:01:09,190 --> 00:01:12,760
ASCII art. So when we actually launch our game this time,

7303
00:01:13,180 --> 00:01:17,770
then we're going to get the high man logo printed out like this at the beginning

7304
00:01:17,770 --> 00:01:18,603
of the game.

7305
00:01:19,240 --> 00:01:22,870
Now the second file here it is hangman_words.py.

7306
00:01:23,320 --> 00:01:26,710
And this word list now expands on what we had before.

7307
00:01:27,070 --> 00:01:31,690
And it's now a huge list of words, sorted alphabetically

7308
00:01:32,080 --> 00:01:37,080
which we're going to draw upon and replace this previous very simple word list.

7309
00:01:39,520 --> 00:01:42,310
The first to-do is to update the word list

7310
00:01:42,310 --> 00:01:46,540
to use the one from here instead of this one.

7311
00:01:46,540 --> 00:01:51,100
So deleting this line and replacing it with that. And to do this,

7312
00:01:51,100 --> 00:01:53,530
you might have to look up on previous lessons where

7313
00:01:53,530 --> 00:01:58,530
we talked about how to use modules in Python and how to import different files.

7314
00:01:59,590 --> 00:02:01,390
Now, if you get stuck on how to do that,

7315
00:02:01,630 --> 00:02:03,640
take a look inside the course resources

7316
00:02:03,760 --> 00:02:08,259
and there's hints that take you towards documentation on how to do this.

7317
00:02:09,370 --> 00:02:13,090
Now, once you've tackled to-do number one, scroll all the way down to find

7318
00:02:13,090 --> 00:02:17,470
to-do number two, where we're going to import the stages from hangman_art.py

7319
00:02:17,560 --> 00:02:21,160
and this is the same thing using modules and import. To-do

7320
00:02:21,160 --> 00:02:23,530
number three is to import the logo.

7321
00:02:23,560 --> 00:02:26,440
So one, two, three are all to do with modules and import.

7322
00:02:27,040 --> 00:02:29,050
And then once you get to to-do number four,

7323
00:02:29,080 --> 00:02:33,310
we're basically going to improve the user experience to let the user know that

7324
00:02:33,310 --> 00:02:36,400
they've entered a letter that they've already guessed before.

7325
00:02:36,910 --> 00:02:40,480
And when that happens, we're going to print the letter and just let them know.

7326
00:02:40,900 --> 00:02:42,100
You don't have to punish them and

7327
00:02:42,320 --> 00:02:45,640
you don't have to take away a life and you don't have to restart the game.

7328
00:02:45,730 --> 00:02:48,520
It's just the gentle nudge and let them know that they've really guessed that

7329
00:02:48,520 --> 00:02:53,520
letter. Now on to-do number five and the final to-do, we're going to let the user

7330
00:02:53,800 --> 00:02:57,610
know if the letter that they guessed is not in the chosen word.

7331
00:02:58,030 --> 00:02:58,810
So in this case,

7332
00:02:58,810 --> 00:03:02,560
we're going print out the letter that they guessed and let them know that it's

7333
00:03:02,560 --> 00:03:03,130
not in the word,

7334
00:03:03,130 --> 00:03:07,240
just a little bit of feedback to make the game a little bit easier on the user.

7335
00:03:07,900 --> 00:03:09,790
So once you've done all of that,

7336
00:03:10,090 --> 00:03:13,930
then you should end up with a game that's like this. So,

7337
00:03:13,930 --> 00:03:16,690
because there's so many words, I think it's really,

7338
00:03:16,690 --> 00:03:20,230
really important that you actually have this line of testing code to tell you

7339
00:03:20,230 --> 00:03:21,580
what the solution actually is

7340
00:03:21,880 --> 00:03:25,990
so you can test all parts of your game because you know what the word actually

7341
00:03:25,990 --> 00:03:30,130
should be. So let's guess a letter that's not in that word.

7342
00:03:30,220 --> 00:03:34,630
Let's try a, and you can see the game tells us "You guessed the letter a,

7343
00:03:34,990 --> 00:03:37,150
that's not in the word. You lose a life."

7344
00:03:37,570 --> 00:03:41,890
And we end up with the head already drawn in the hangman.

7345
00:03:42,250 --> 00:03:46,360
So now let's guess a different letter. Let's guess a t.

7346
00:03:46,990 --> 00:03:51,430
Then you can see that works as expected. But what if we try guessing T again?

7347
00:03:51,760 --> 00:03:55,690
Well, then it tells us you've already guessed t and it shows us the blanks

7348
00:03:55,720 --> 00:03:59,530
including the t. Now if they guess a letter

7349
00:03:59,560 --> 00:04:04,240
that's actually not in the word, so say a, well, in this case,

7350
00:04:04,240 --> 00:04:08,020
they're gonna lose a life because it's actually not in the word and we're going

7351
00:04:08,020 --> 00:04:09,370
to take away a life.

7352
00:04:10,600 --> 00:04:15,250
So have a play around with the end version of the game. And as always,

7353
00:04:15,310 --> 00:04:19,120
all the links are in the course resources. And once you're ready,

7354
00:04:19,209 --> 00:04:22,480
then go ahead and fork the starting file and give this a go.

7355
00:00:00,130 --> 00:00:03,730
Alright. So let's go through the solution together for this final step.

7356
00:00:04,300 --> 00:00:06,970
The first step tells us to update the word list

7357
00:00:07,060 --> 00:00:10,900
to use the word list from hangman_words.

7358
00:00:11,470 --> 00:00:13,870
And it's actually got exactly the same name.

7359
00:00:13,870 --> 00:00:16,540
So we don't even have to change it all that much.

7360
00:00:17,110 --> 00:00:20,920
But what we do have to do is to make this error go away.

7361
00:00:21,700 --> 00:00:24,790
If you haven't already, go ahead and delete this line in your code

7362
00:00:25,180 --> 00:00:28,300
where you've got the word list using the previous three words.

7363
00:00:28,870 --> 00:00:33,870
And instead, we're going to import the hangman_words.

7364
00:00:35,860 --> 00:00:40,860
And now we should be able to tap into this word list by writing hangman_

7365
00:00:41,470 --> 00:00:44,470
words.word_list.

7366
00:00:44,980 --> 00:00:48,130
And this is the same way that we use the random module.

7367
00:00:48,140 --> 00:00:52,750
So we imported the random module and then when we needed it, we simply said

7368
00:00:52,810 --> 00:00:57,730
random.choice. So choice is a function inside the random module,

7369
00:00:58,000 --> 00:00:59,800
and we can access it like

7370
00:00:59,800 --> 00:01:04,800
so. Now if you want it to be a little bit simpler in terms of the code that you

7371
00:01:05,050 --> 00:01:08,560
write and you don't want to rewrite hangman_words

7372
00:01:08,560 --> 00:01:13,330
dot such and such, then instead of just importing hangman words,

7373
00:01:13,360 --> 00:01:16,690
you can actually instead write from hangman

7374
00:01:16,690 --> 00:01:20,200
words import the word_list.

7375
00:01:20,680 --> 00:01:25,680
So now we can get rid of this part and we can just use the previous code that we

7376
00:01:27,130 --> 00:01:28,300
had on line 7.

7377
00:01:30,430 --> 00:01:33,460
Using that you can do the same thing for

7378
00:01:33,460 --> 00:01:37,540
to-do number two. From the hangman_art

7379
00:01:37,570 --> 00:01:42,570
you can import the stages and that will make this error go away. And for

7380
00:01:43,810 --> 00:01:45,820
to-do number three,

7381
00:01:45,880 --> 00:01:49,300
you can again say from hangman_art

7382
00:01:49,330 --> 00:01:52,300
import the logo.

7383
00:01:53,080 --> 00:01:56,080
And then we can just print the logo.

7384
00:01:56,770 --> 00:01:58,990
Now notice how we're importing, um,

7385
00:01:59,080 --> 00:02:03,460
two different things from the same file, hangman art.

7386
00:02:03,640 --> 00:02:05,830
So if you didn't want to write it twice,

7387
00:02:05,860 --> 00:02:10,600
you can in fact also just say from hangman_art import logo,

7388
00:02:10,870 --> 00:02:15,640
stages, and this will import both the logo and the stages

7389
00:02:15,730 --> 00:02:18,070
and you'll see that there's no errors down here.

7390
00:02:19,810 --> 00:02:21,550
If that's at all confusing,

7391
00:02:21,670 --> 00:02:25,810
be sure to read through the documentation that I've linked to in the course

7392
00:02:25,810 --> 00:02:29,890
resources that talks all about Python modules and importing

7393
00:02:30,220 --> 00:02:35,220
so you can familiarize yourself with this once more. Now on to-do four,

7394
00:02:35,710 --> 00:02:39,400
we're going to check to see if the user has entered a letter that they've

7395
00:02:39,400 --> 00:02:43,390
already guessed. And if it's a letter that they got right,

7396
00:02:43,720 --> 00:02:47,650
then we're going to print the letter and let them know. To do this,

7397
00:02:47,710 --> 00:02:49,930
we're going to check through the display,

7398
00:02:50,140 --> 00:02:52,660
which is a list of letters that they've already guessed.

7399
00:02:53,260 --> 00:02:58,260
And we're going to check to see if the guess is in the display list,

7400
00:03:02,020 --> 00:03:05,260
well, in this case, they've already guessed that letter and it's a correct one.

7401
00:03:05,590 --> 00:03:10,030
So we're just going to print out the feedback that, um,

7402
00:03:10,060 --> 00:03:12,460
"You've already guessed

7403
00:03:12,640 --> 00:03:15,220
and then we'll put in their guessed letter."

7404
00:03:17,830 --> 00:03:21,070
Now, however, if the letter is not in the chosen word,

7405
00:03:21,130 --> 00:03:24,670
then we're going to print out the letter and let them know that

7406
00:03:26,770 --> 00:03:30,250
"You guessed this particular letter,

7407
00:03:31,870 --> 00:03:34,120
that's not in the word.

7408
00:03:36,340 --> 00:03:40,630
You lose a life." That's it.

7409
00:03:40,720 --> 00:03:45,580
That's all we have to do and if we run our app as it is now,

7410
00:03:45,910 --> 00:03:48,730
then you can see that the solution is stymied.

7411
00:03:48,760 --> 00:03:51,700
So if we just check, um,

7412
00:03:51,760 --> 00:03:55,090
against s then that's being added,

7413
00:03:55,600 --> 00:03:57,700
and if we get a letter wrong,

7414
00:03:58,510 --> 00:04:01,780
then we get told that's not in the word. You lose a life.

7415
00:04:01,960 --> 00:04:04,030
And our hangman is being drawn out.

7416
00:04:04,630 --> 00:04:08,830
And if we guess a correct letter that we've already guessed like s again,

7417
00:04:09,250 --> 00:04:12,790
then it tells us that you've already guessed that letter.

7418
00:04:13,510 --> 00:04:17,170
Now you can either choose to keep all of these print statements

7419
00:04:17,200 --> 00:04:21,459
if it helps you understand what's going on, or alternatively at this stage,

7420
00:04:21,620 --> 00:04:25,210
it might make things a little bit confusing and you can just comment it out.

7421
00:04:26,050 --> 00:04:28,570
Have a look at the final version

7422
00:04:28,600 --> 00:04:33,160
by going to the course resources where I'll link to the completed code that I've

7423
00:04:33,160 --> 00:04:37,720
written here. And you can have a read through it and compare against yours.

7424
00:04:38,200 --> 00:04:42,040
But essentially this is all there is to this project

7425
00:04:42,130 --> 00:04:46,750
and you've now completed it in its entirety. Once you're happy with your code,

7426
00:04:46,780 --> 00:04:50,680
go ahead and remove all the comments that are no longer useful like all the

7427
00:04:50,680 --> 00:04:54,190
to-dos and the testing code

7428
00:04:54,220 --> 00:04:57,760
because if you wanna play the game for real, then that's just cheating.

7429
00:04:58,240 --> 00:05:00,790
If you want to leave in some of the comments that lets you know

7430
00:05:00,790 --> 00:05:04,030
what each part of code does so that when you come back to it,

7431
00:05:04,330 --> 00:05:07,360
it's easier to understand, then feel free to do that.

7432
00:05:07,930 --> 00:05:12,700
But the final thing that I wanted to show you is what if you wanted it to be

7433
00:05:12,700 --> 00:05:16,450
able to clear the screen after every answer,

7434
00:05:16,870 --> 00:05:20,650
because you can see that some point you have to keep scrolling and it gets a

7435
00:05:20,650 --> 00:05:23,770
little bit confusing as to which stage you're in.

7436
00:05:24,250 --> 00:05:29,250
So one of the things that you can do is you can tap into the replit module

7437
00:05:30,940 --> 00:05:33,490
and you can import a function called clear.

7438
00:05:34,090 --> 00:05:36,730
Once you've imported this clear function,

7439
00:05:37,570 --> 00:05:42,570
then you can go ahead and add it just after the user has made their guess.

7440
00:05:43,120 --> 00:05:46,030
So you can call it just as you would any other function

7441
00:05:46,060 --> 00:05:50,710
now that you've imported it into this file. And when you run the code now,

7442
00:05:52,660 --> 00:05:56,890
you can see that after every guess, it's going to clear the screen.

7443
00:05:57,290 --> 00:06:00,140
So guess a letter, let's guess a different letter.

7444
00:06:01,140 --> 00:06:05,510
Now that means we don't have this backlog of previous guesses and we can

7445
00:06:05,510 --> 00:06:09,920
actually see what's going on at each stage. In the course resources,

7446
00:06:09,920 --> 00:06:14,920
you'll also find a link to the final completed code on the day seven hangman final,

7447
00:06:15,890 --> 00:06:20,270
and feel free to modify this code to, your heart's content, make it

7448
00:06:20,270 --> 00:06:24,020
do whatever it is that you want to do and push the boundaries of your

7449
00:06:24,020 --> 00:06:24,920
programming skills

7450
00:06:25,340 --> 00:06:29,660
if you want to. Well done for getting this far and well done for tackling this

7451
00:06:29,660 --> 00:06:32,720
challenge. Rest easy, and I'll see you tomorrow.



7452
00:00:00,790 --> 00:00:05,500
Hey guys, welcome to Day 8 of a 100 Days of Code.

7453
00:00:05,890 --> 00:00:10,240
And today we're going to be looking at functions that allow you to give them

7454
00:00:10,270 --> 00:00:14,800
inputs. And once we've learned all of that and we've grasped it,

7455
00:00:15,070 --> 00:00:18,520
then we're going to be building a cipher program.

7456
00:00:18,820 --> 00:00:21,610
And the cipher program is called Caesar cipher.

7457
00:00:22,150 --> 00:00:27,100
So Caesar cipher is a really quite ancient type of encryption.

7458
00:00:27,640 --> 00:00:29,980
So the story goes that, um,

7459
00:00:30,010 --> 00:00:34,660
when Caesar wanted to send highly sensitive military messages,

7460
00:00:34,930 --> 00:00:39,930
he would encode his message so that each letter would be shifted by a

7461
00:00:40,150 --> 00:00:41,260
predetermined amount.

7462
00:00:41,800 --> 00:00:46,800
So let's say that we wanted to encode the letter "A" and we shift it by three,

7463
00:00:47,710 --> 00:00:47,910
well

7464
00:00:47,910 --> 00:00:52,910
then A becomes D, B becomes E and so on and so forth.

7465
00:00:54,250 --> 00:00:56,800
And this is what the final version will look like.

7466
00:00:57,130 --> 00:00:59,200
Let's go ahead and encode something.

7467
00:00:59,740 --> 00:01:03,310
So I'm going to type encode to start encrypting a message.

7468
00:01:03,760 --> 00:01:07,210
And then I'm going to type my message with no spaces in between.

7469
00:01:08,560 --> 00:01:10,660
And then I'm going to give it a shift number.

7470
00:01:10,690 --> 00:01:12,130
So this is going to be a number that

7471
00:01:12,160 --> 00:01:15,700
the recipient and I are going to agree on so that we know how to decode the

7472
00:01:15,700 --> 00:01:17,920
message. Let's put that at nine.

7473
00:01:18,550 --> 00:01:21,460
And then it's going to give us the encoded results

7474
00:01:21,520 --> 00:01:23,230
which is something like this.

7475
00:01:23,290 --> 00:01:26,440
And this will be the message that I'm going to transmit to my friend,

7476
00:01:26,500 --> 00:01:28,780
either through a letter or through an email

7477
00:01:29,080 --> 00:01:31,780
and it means that whenever somebody comes across this message

7478
00:01:32,050 --> 00:01:35,350
they won't really know what's going on unless they knew the shift number.

7479
00:01:35,890 --> 00:01:40,150
So let's say that I am my friend. I've just received this message.

7480
00:01:40,630 --> 00:01:45,340
And I'm going to go ahead and type yes to go again

7481
00:01:45,430 --> 00:01:48,640
and in this case, I'm going to decode instead of encoding.

7482
00:01:49,090 --> 00:01:52,030
And then I'm going to paste the message and hit enter.

7483
00:01:52,510 --> 00:01:56,920
And of course, the shift number is nine and now I have the decoded results

7484
00:01:57,190 --> 00:02:01,720
which I can read and understand. By the end of today,

7485
00:02:01,720 --> 00:02:04,030
you would have learned about functions with input,

7486
00:02:04,300 --> 00:02:08,020
you'll know what the difference is between arguments and parameters.

7487
00:02:08,590 --> 00:02:11,050
Once you're ready, once you're loaded up on coffee,

7488
00:02:11,290 --> 00:02:13,960
then head over to the next lesson and let's get started.

7489
00:00:00,490 --> 00:00:03,850
To get started we're going to learn more about functions.

7490
00:00:04,330 --> 00:00:09,330
And previously we learned that functions are a really handy way of taking a

7491
00:00:10,540 --> 00:00:15,540
complex set of instructions and packaging them together inside a block of code

7492
00:00:17,470 --> 00:00:19,540
that has a name given to it.

7493
00:00:20,080 --> 00:00:24,580
And when we need all of the lines of code that's packaged inside this

7494
00:00:24,580 --> 00:00:25,390
function,

7495
00:00:25,390 --> 00:00:30,390
all we have to do at any point later on in our code is just to call the function

7496
00:00:30,940 --> 00:00:34,030
by typing its name and then a set of parentheses.

7497
00:00:34,750 --> 00:00:36,760
And when this line of code is run,

7498
00:00:37,030 --> 00:00:41,440
it's going to search for where this function is defined, which is up here,

7499
00:00:41,830 --> 00:00:45,490
and then it's going to execute all the lines of code that are contained within

7500
00:00:45,490 --> 00:00:49,330
it. Now it's been a little while since we've seen functions.

7501
00:00:49,390 --> 00:00:54,390
So I want you to go ahead and find the starting replit for day 8

7502
00:00:55,030 --> 00:00:56,470
which is at this URL

7503
00:00:56,680 --> 00:01:01,270
and then fork it to create your own copy. To begin,

7504
00:01:01,330 --> 00:01:04,569
I want you to create a new function called greet,

7505
00:01:05,110 --> 00:01:08,110
and I want you to give it three lines of print statements,

7506
00:01:08,350 --> 00:01:12,220
telling it to do three things. And finally, once you're done,

7507
00:01:12,250 --> 00:01:16,630
go ahead and call the function so that it gets executed in the console.

7508
00:01:16,900 --> 00:01:20,560
So pause the video and give that a go. All right.

7509
00:01:20,560 --> 00:01:23,770
So to create a function, we of course need a def keyword.

7510
00:01:24,130 --> 00:01:26,710
And we know it's a keyword, because as soon as we type it,

7511
00:01:26,770 --> 00:01:30,790
it changes to the blue color. And after the key word,

7512
00:01:30,850 --> 00:01:35,170
we get to give our function a name. So in my case, it's called greet.

7513
00:01:35,860 --> 00:01:40,630
Now after the greet, we add a set of parentheses after the name of the function.

7514
00:01:41,530 --> 00:01:42,363
Finally,

7515
00:01:42,430 --> 00:01:47,430
we add a colon and we enter into the block of code because we're indented over.

7516
00:01:48,880 --> 00:01:49,390
Now,

7517
00:01:49,390 --> 00:01:52,840
the first thing I'm going to do is to create a print statement that just says

7518
00:01:52,840 --> 00:01:55,720
Hello. And then I'm going to say, well,

7519
00:01:56,200 --> 00:02:00,460
how do you do? Nobody in England actually says this,

7520
00:02:00,790 --> 00:02:04,990
but I always see it in the learn English books, which is quite funny.

7521
00:02:05,440 --> 00:02:07,120
I think people will give you a very strange look

7522
00:02:07,150 --> 00:02:11,980
if you go to somebody at the bakery and say, well, how do you do? But anyways,

7523
00:02:12,880 --> 00:02:16,600
now finally, we're going to add a final print statement,

7524
00:02:17,050 --> 00:02:21,670
keeping in line with the Britishness of my function,

7525
00:02:22,090 --> 00:02:23,710
going to ask about the weather.

7526
00:02:24,940 --> 00:02:29,770
Now this line, on the other hand, is something that you will often hear a British

7527
00:02:29,770 --> 00:02:32,080
people say. They're obsessed about the weather,

7528
00:02:32,350 --> 00:02:34,750
mostly because it's terrible all the time.

7529
00:02:35,500 --> 00:02:37,930
So now that we've created our function,

7530
00:02:37,930 --> 00:02:42,100
it's time to actually trigger the function or what we see in programming lingo,

7531
00:02:42,400 --> 00:02:43,540
call the function.

7532
00:02:43,900 --> 00:02:48,100
And we do that by calling the name of the function and then adding a set of

7533
00:02:48,100 --> 00:02:51,940
parentheses. And now once the code reaches line six

7534
00:02:51,970 --> 00:02:55,750
it's going to search for this greet function, which it'll find over here

7535
00:02:56,050 --> 00:02:59,590
and then it's going to carry out each of the lines of code one by one.

7536
00:03:00,040 --> 00:03:04,000
So let's run the code and you should see each of the three print statements

7537
00:03:04,060 --> 00:03:06,730
being called. So that's pretty simple.

7538
00:03:08,470 --> 00:03:12,100
Notice that every single time I call the greet function,

7539
00:03:12,640 --> 00:03:15,190
it's going to do the same thing, right?

7540
00:03:15,190 --> 00:03:19,630
It's just going to print out those three lines of code. Now, in reality,

7541
00:03:19,630 --> 00:03:24,630
it's very rare that you'll want to repeat the same instructions every single

7542
00:03:24,790 --> 00:03:28,090
time when you call a function. It would be nice, wouldn't it,

7543
00:03:28,110 --> 00:03:33,110
if we could modify some of the parts of the code inside the function and allow

7544
00:03:34,030 --> 00:03:36,790
for a little bit of variation. For example,

7545
00:03:36,790 --> 00:03:40,600
it would be nice if we could greet somebody by the name so that it could say,

7546
00:03:40,900 --> 00:03:45,580
hello Angela, instead of just, hello. How do you do Angela?

7547
00:03:45,910 --> 00:03:49,480
So that it could change each time I call this function.

7548
00:03:49,570 --> 00:03:53,860
Maybe next time it will be, how do you do Jack Bauer, et cetera.

7549
00:03:54,130 --> 00:03:58,390
So how can we achieve this kind of functionality? Well,

7550
00:03:58,390 --> 00:04:01,600
we need to look more closely at these parentheses.

7551
00:04:02,200 --> 00:04:07,200
Now what we can do is we can actually add the name of a variable inside those

7552
00:04:08,800 --> 00:04:12,520
parentheses to start giving our functions some inputs.

7553
00:04:12,970 --> 00:04:17,079
So let's say that there's a variable called something that's going to be passed

7554
00:04:17,110 --> 00:04:22,110
to my function. And this something can then be used inside this block of code,

7555
00:04:24,610 --> 00:04:25,443
this function.

7556
00:04:25,900 --> 00:04:30,520
And I could do something with it. Now in order to actually pass this value

7557
00:04:30,520 --> 00:04:35,380
when I call my function, I have to add the data inside the parentheses.

7558
00:04:35,650 --> 00:04:39,910
So let's say I decide to pass 123 over, well

7559
00:04:39,910 --> 00:04:43,120
in this case, when this line of code gets triggered,

7560
00:04:43,570 --> 00:04:46,990
the computer is going to search for where this function is declared,

7561
00:04:47,020 --> 00:04:51,940
which is up here, and then it's going to pass over this piece of data,

7562
00:04:52,300 --> 00:04:56,080
123, over to this variable called something.

7563
00:04:56,620 --> 00:05:00,940
So now, effectively, inside this function called my_function,

7564
00:05:01,240 --> 00:05:05,680
we now have a variable called something that's equal to 123

7565
00:05:06,400 --> 00:05:11,400
and that can then be used inside the block of code to do something with that

7566
00:05:11,410 --> 00:05:12,243
piece of data.

7567
00:05:14,470 --> 00:05:18,220
Now it's a bit like plugging in a USB stick into a computer.

7568
00:05:18,790 --> 00:05:21,100
If we took a different piece of input,

7569
00:05:21,190 --> 00:05:25,450
we would end up with a different file being shown by the computer.

7570
00:05:25,900 --> 00:05:30,900
So this means the computer can do something different depending on the input that

7571
00:05:31,390 --> 00:05:33,880
we give it. And if we change that input,

7572
00:05:34,000 --> 00:05:36,280
then it will receive a different piece of data.

7573
00:05:37,180 --> 00:05:39,700
So in addition to a simple function,

7574
00:05:39,730 --> 00:05:43,060
we can also create a function that allows for input.

7575
00:05:44,140 --> 00:05:49,140
And to do that you saw earlier on the syntax is again the same as before we use

7576
00:05:49,690 --> 00:05:51,940
a Def to create the function.

7577
00:05:52,360 --> 00:05:56,230
And then let's just give it a slightly different name to differentiate it with

7578
00:05:56,230 --> 00:05:59,150
the previous function, greet_with_name.

7579
00:05:59,720 --> 00:06:03,650
And then inside the parentheses, instead of leaving it blank,

7580
00:06:03,890 --> 00:06:07,550
we get to create the name of the variable that's going to be passed over.

7581
00:06:08,000 --> 00:06:12,170
So let's just call it name because that describes the data that's going to be

7582
00:06:12,170 --> 00:06:15,770
received. It's going to be the name of the person that I wish to greet.

7583
00:06:16,340 --> 00:06:21,140
So now let's add a colon and finally we can create our print statements.

7584
00:06:21,740 --> 00:06:25,640
So I'm just going to copy these print statements from above and now,

7585
00:06:25,670 --> 00:06:30,530
instead of having these names hard coded in here, I'm going to delete it

7586
00:06:30,680 --> 00:06:35,680
and I'm going to replace those names with the value of this variable.

7587
00:06:36,110 --> 00:06:40,130
So I'm going to put it in using an fstring like this,

7588
00:06:40,580 --> 00:06:43,250
and then I'm going to do the same down here.

7589
00:06:46,740 --> 00:06:47,573
Right?

7590
00:06:47,910 --> 00:06:49,740
When we actually call this function,

7591
00:06:49,770 --> 00:06:53,430
it's also going to be a little bit different from previously on line six.

7592
00:06:53,970 --> 00:06:57,180
So now firstly, the name of the function has changed.

7593
00:06:57,630 --> 00:07:02,630
But notice how it's expecting some sort of input inside the parentheses.

7594
00:07:03,120 --> 00:07:05,640
And it tells me that it wants to receive a name.

7595
00:07:06,180 --> 00:07:10,830
It's when we call the function that we actually pass over the piece of data

7596
00:07:10,860 --> 00:07:15,570
that's going to be stored inside this variable. Let's give it my own name,

7597
00:07:15,900 --> 00:07:19,110
Angela. And now when I hit run,

7598
00:07:19,470 --> 00:07:21,420
I want you to predict what's going to happen,

7599
00:07:21,450 --> 00:07:23,190
what's actually going to be printed.

7600
00:07:23,400 --> 00:07:28,400
So let's go ahead and comment out the previous line of code and now run our code.

7601
00:07:30,240 --> 00:07:34,020
And you should see that it says, hello Angela, how do you do Angela.?

7602
00:07:34,020 --> 00:07:38,610
So this piece of data has basically been inserted under this variable name

7603
00:07:38,910 --> 00:07:42,810
and then it's been put into both of these print statements. Now,

7604
00:07:42,810 --> 00:07:47,100
if I go ahead and call this function with a different piece of data,

7605
00:07:47,760 --> 00:07:49,230
say a different name,

7606
00:07:49,650 --> 00:07:54,060
then it's going to use that piece of data to modify this function

7607
00:07:54,300 --> 00:07:56,580
so it does something a little bit different.

7608
00:07:57,090 --> 00:08:02,010
So this way we can create one function that carries out some instructions,

7609
00:08:02,310 --> 00:08:06,240
but every time we execute it, it gets a modify it a little bit

7610
00:08:06,510 --> 00:08:08,340
by changing the inputs.

7611
00:08:09,360 --> 00:08:11,760
When we're talking about functions with inputs,

7612
00:08:12,030 --> 00:08:13,950
there's two things that we're working with

7613
00:08:13,980 --> 00:08:16,200
that's really important to differentiate.

7614
00:08:17,190 --> 00:08:22,170
So we know that when we call this function and we pass over this piece of data,

7615
00:08:22,500 --> 00:08:23,460
effectively

7616
00:08:23,490 --> 00:08:28,490
we're creating a new variable called something and we're setting it to equal this

7617
00:08:28,860 --> 00:08:33,030
piece of data that we're passing it. Now in programming lingo,

7618
00:08:33,059 --> 00:08:38,059
you'll hear this being referred to as the parameter and this piece of data

7619
00:08:38,460 --> 00:08:42,240
being referred to as the argument. Now,

7620
00:08:42,240 --> 00:08:45,000
the argument is the actual piece of data

7621
00:08:45,030 --> 00:08:49,110
that's going to be passed over to this function when it's being called.

7622
00:08:49,560 --> 00:08:52,920
Whereas the parameter is the name of that data

7623
00:08:53,340 --> 00:08:57,990
and we use the parameter inside the function to refer to it and to do things

7624
00:08:57,990 --> 00:09:01,620
with it. Now very often on the internet when you come across

7625
00:09:01,620 --> 00:09:03,090
somebody explaining something

7626
00:09:03,090 --> 00:09:06,060
be it on Stack Overflow or in some piece of documentation,

7627
00:09:06,420 --> 00:09:09,600
you'll hear them referring to these two types of things,

7628
00:09:09,600 --> 00:09:11,550
the parameter and the argument.

7629
00:09:12,090 --> 00:09:15,930
So if you need to, come back to this lesson and remind yourself the difference

7630
00:09:15,930 --> 00:09:17,160
between those two things.

7631
00:09:17,550 --> 00:09:20,550
The parameter is the name of the data that's being passed in,

7632
00:09:20,850 --> 00:09:24,990
the argument is the actual value of the data. Now,

7633
00:09:25,020 --> 00:09:28,770
sometimes people also get confused on the internet between these two words,

7634
00:09:29,040 --> 00:09:32,010
but as long as you know what they means, then you'll be in a good place.

7635
00:00:00,310 --> 00:00:01,420
In the last lesson,

7636
00:00:01,450 --> 00:00:06,450
we saw a very simple form of a function that allows for an input.

7637
00:00:07,360 --> 00:00:08,470
Now in this lesson,

7638
00:00:08,500 --> 00:00:13,150
I want to take it even further and I want to create a function that allows for

7639
00:00:13,150 --> 00:00:14,650
multiple inputs.

7640
00:00:15,370 --> 00:00:19,390
So let's comment out of the previous line of code and let's create a new comment,

7641
00:00:19,720 --> 00:00:21,490
functions with more than one input.

7642
00:00:22,840 --> 00:00:27,310
And I'm going to create a new function called greet_with.

7643
00:00:28,000 --> 00:00:31,660
And in this case, it's going to take two parameters.

7644
00:00:31,960 --> 00:00:36,460
It's going to be name and location. If you remember,

7645
00:00:36,460 --> 00:00:40,840
this is how we added a parameter previously. Now, as a challenge,

7646
00:00:40,870 --> 00:00:45,310
I want you to quickly think about how you might add two parameters,

7647
00:00:45,340 --> 00:00:49,540
one's called name and one's called location, into this function

7648
00:00:49,540 --> 00:00:52,450
declaration. Pause the video, have a brief think,

7649
00:00:52,600 --> 00:00:55,420
and then we'll go through it together. All right.

7650
00:00:55,420 --> 00:00:58,600
So we know that if we wanted to add one parameter name,

7651
00:00:58,660 --> 00:01:02,740
then this is how we would do it. We would just add it inside the parentheses.

7652
00:01:03,490 --> 00:01:06,070
Now, if we wanted to have more than one parameter,

7653
00:01:06,520 --> 00:01:11,520
all we have to do is just add a comma and then add the second parameter which we

7654
00:01:11,860 --> 00:01:13,720
said was going to be called location.

7655
00:01:14,290 --> 00:01:18,190
So now this particular function is going to take two inputs,

7656
00:01:18,190 --> 00:01:22,360
the name and the location. And then inside this function,

7657
00:01:22,390 --> 00:01:27,130
we're going to use the name to print something like hello name,

7658
00:01:28,000 --> 00:01:29,980
and then we're going to print and ask them,

7659
00:01:30,400 --> 00:01:34,540
what is it like in their particular location.

7660
00:01:35,140 --> 00:01:39,850
See if you can modify this to use the actual parameters and to replace them with

7661
00:01:39,850 --> 00:01:44,800
print statements so that we use these parameters inside of our function.

7662
00:01:45,100 --> 00:01:48,640
Pause the video now and give that a go. All right.

7663
00:01:48,640 --> 00:01:53,260
So essentially we want to create a print statement here and print statements

7664
00:01:53,320 --> 00:01:57,400
print strings so we have to add some quotation marks around that text.

7665
00:01:57,880 --> 00:01:58,810
And then finally,

7666
00:01:58,810 --> 00:02:03,810
I'm going to use a fstring to replace this parameter name inside this string so

7667
00:02:06,850 --> 00:02:11,350
that the data that gets passed in gets replaced here, and it says,

7668
00:02:11,380 --> 00:02:13,210
hello, whatever their name is.

7669
00:02:13,870 --> 00:02:16,270
And then I'm just going to do the same thing over here

7670
00:02:20,230 --> 00:02:23,890
and notice that with replit and a lot of other text editors,

7671
00:02:23,890 --> 00:02:26,860
you can simply highlight a word or highlight or a sentence,

7672
00:02:27,100 --> 00:02:32,100
and then use the open curly brace to actually add brace around both sides of the

7673
00:02:33,340 --> 00:02:37,750
word. And you'll notice that I did the same thing with the quotation marks.

7674
00:02:37,750 --> 00:02:41,170
So it highlight the whole sentence and then hit the double-quote key

7675
00:02:41,440 --> 00:02:45,400
and it will keep adding quotes around both sides of your highlight.

7676
00:02:46,570 --> 00:02:48,160
But I only actually need one.

7677
00:02:48,700 --> 00:02:51,880
So that is our function completed.

7678
00:02:52,480 --> 00:02:56,230
And now it means I can call this function by calling greet_with,

7679
00:02:56,710 --> 00:03:00,880
and it's going to prompt me to add both of these inputs.

7680
00:03:01,390 --> 00:03:04,870
And the first piece of data is going to be the name

7681
00:03:04,990 --> 00:03:09,610
and you can see it's giving you a hint by underlining the name of the parameter

7682
00:03:09,610 --> 00:03:12,550
here. And let's put Jack Bauer

7683
00:03:14,170 --> 00:03:18,790
and then we can add the second piece of data and separate it with a comma.

7684
00:03:19,270 --> 00:03:23,020
And now you can see this underline has moved to the location parameter.

7685
00:03:23,080 --> 00:03:25,810
So again, a hint as to what kind of data it wants.

7686
00:03:26,260 --> 00:03:29,950
So let's say that Jack Bauer is nowhere. Now,

7687
00:03:29,950 --> 00:03:31,750
if we go ahead and run this code,

7688
00:03:31,840 --> 00:03:36,550
then you'll see that it's going to print hello and replace name with Jack Bauer.

7689
00:03:36,910 --> 00:03:40,120
And then what is it like in nowhere? So no

7690
00:03:40,120 --> 00:03:42,100
where gets replaced with this location.

7691
00:03:42,700 --> 00:03:47,700
So that means that you can now put in as many pieces of inputs as you want and

7692
00:03:48,070 --> 00:03:53,070
modify the functionality of your function to make your function do different

7693
00:03:53,980 --> 00:03:57,850
things each time. Now here's a question.

7694
00:03:58,390 --> 00:04:02,620
What happens if I call the same function greet_with,

7695
00:04:03,070 --> 00:04:06,760
but I switch the order of the data that I give it.

7696
00:04:07,210 --> 00:04:10,660
So let's say the first piece of data I give it is nowhere,

7697
00:04:11,320 --> 00:04:14,980
and then the second piece of data is Jack Bauer.

7698
00:04:15,370 --> 00:04:19,690
So we've just switched the order of these pieces of data. Now,

7699
00:04:19,750 --> 00:04:21,279
what do you expect to happen?

7700
00:04:21,640 --> 00:04:25,450
Pause for a moment and have a think about what you expect to be printed in here

7701
00:04:25,990 --> 00:04:29,080
and then continue. All right,

7702
00:04:29,080 --> 00:04:34,080
so let's click run and you can see that it's now complete nonsense.

7703
00:04:34,840 --> 00:04:39,430
Hello, nowhere. What is it like in Jack Bauer? And what actually happened here

7704
00:04:39,640 --> 00:04:44,350
is it takes the position of the data, looks at both of these arguments,

7705
00:04:44,710 --> 00:04:47,620
and the first argument gets assigned to the first parameter

7706
00:04:47,950 --> 00:04:51,940
the second argument gets assigned at the second parameter. So in this case,

7707
00:04:51,970 --> 00:04:55,960
when it's actually gone in here, name is now equal to nowhere,

7708
00:04:55,990 --> 00:05:00,990
which is why this line printed thi.sAand Jack Bauer is now assigned to location

7709
00:05:01,570 --> 00:05:06,520
which is why it printed this second line like so. And in Python programming,

7710
00:05:06,550 --> 00:05:11,550
this is called a positional argument because when we call the function,

7711
00:05:11,950 --> 00:05:16,950
we haven't specified anywhere which particular parameter we want to associate

7712
00:05:17,800 --> 00:05:21,910
these pieces of data with. So it's just gone and looked at the position.

7713
00:05:22,030 --> 00:05:26,290
Now this is the default way of calling functions, because on one hand,

7714
00:05:26,320 --> 00:05:27,640
when you're typing out the code,

7715
00:05:27,670 --> 00:05:32,020
you get the hints here as to which piece of data you need to enter.

7716
00:05:32,470 --> 00:05:37,360
But also you can refer to the function and look at the order of the parameters.

7717
00:05:38,260 --> 00:05:42,610
Even if we had more inputs, let's say in this case, we had a,

7718
00:05:42,610 --> 00:05:47,380
b and c, and we put the arguments one, two and three,

7719
00:05:47,740 --> 00:05:51,310
then it means that our variables that gets created

7720
00:05:51,310 --> 00:05:52,840
will be a equals one,

7721
00:05:53,260 --> 00:05:56,950
b equals two and c equals three.

7722
00:05:59,060 --> 00:06:03,590
Now, if we switch around the order of the arguments in the function call,

7723
00:06:04,250 --> 00:06:08,600
now what will happen is a is going to be equal to the first argument.

7724
00:06:08,600 --> 00:06:13,600
So a is now equal to three, b as equal to the second argument and c is equal to

7725
00:06:13,640 --> 00:06:18,560
the third argument. So it might be doing slightly unpredictable things in here.

7726
00:06:19,010 --> 00:06:22,730
So whenever you're creating code and you're using these positional arguments,

7727
00:06:23,030 --> 00:06:25,700
and you're just inserting the data one by one like this,

7728
00:06:26,000 --> 00:06:28,250
and it does something completely unexpected,

7729
00:06:28,340 --> 00:06:32,990
then be sure to check your positioning and to make sure that it matches with the

7730
00:06:32,990 --> 00:06:36,770
position of the parameters. Now,

7731
00:06:36,800 --> 00:06:41,180
what if you wanted to be more clear when you actually call the function

7732
00:06:41,210 --> 00:06:44,690
so you don't ever encounter this problem? Well,

7733
00:06:44,690 --> 00:06:49,340
you could use something called keyword arguments instead. So now,

7734
00:06:49,370 --> 00:06:53,300
instead of just adding the arguments into the function call like this,

7735
00:06:53,690 --> 00:06:58,690
we can actually add each of the parameter names and an equal sign to say that

7736
00:06:58,880 --> 00:07:00,260
the first parameter a

7737
00:07:00,260 --> 00:07:04,730
should be equal to one, b should be equal to two and c equals to three.

7738
00:07:05,300 --> 00:07:07,940
And now when we actually change the order around,

7739
00:07:07,970 --> 00:07:09,830
it doesn't matter how we order it,

7740
00:07:10,160 --> 00:07:14,540
it still going to abide by these bindings. So c

7741
00:07:14,540 --> 00:07:17,180
will still be three and a will still be one. 

7742
00:07:18,830 --> 00:07:22,160
As a challenge, I want you to take this previous function,

7743
00:07:22,640 --> 00:07:24,710
greet_with_name and location,

7744
00:07:24,950 --> 00:07:29,120
and I want you to call this function down here, but this time,

7745
00:07:29,150 --> 00:07:33,650
instead of using positional arguments, I want you to use keyword arguments.

7746
00:07:34,160 --> 00:07:36,860
So pause the video and try and give that a go.

7747
00:07:39,770 --> 00:07:42,620
All right. So when we call the function, we still use the name.

7748
00:07:42,650 --> 00:07:46,610
So it's greet_with, so everything up to the first parentheses is the name.

7749
00:07:47,150 --> 00:07:50,750
And then we add in each of these parameter names,

7750
00:07:51,410 --> 00:07:56,180
and then we add an equal sign and finally, we give it the actual value.

7751
00:07:56,240 --> 00:07:57,620
So let's say Angela,

7752
00:07:57,800 --> 00:08:02,690
and then the location is going to be equal to London.

7753
00:08:03,710 --> 00:08:05,030
Now, when I hit run,

7754
00:08:05,090 --> 00:08:09,200
you can see it does pretty much the same as before. It puts Angela into the name,

7755
00:08:09,260 --> 00:08:13,940
London into location. But this time if I switch the order around it

7756
00:08:14,000 --> 00:08:17,330
no longer matters. And when I hit run again,

7757
00:08:17,360 --> 00:08:19,550
you can see it does exactly the same thing,

7758
00:08:19,970 --> 00:08:24,470
because it now knows which argument is associated with which parameter.

7759
00:08:25,400 --> 00:08:27,500
So this can make your code less error prone

7760
00:08:27,770 --> 00:08:30,230
but it does make each line of code longer.

7761
00:08:30,620 --> 00:08:35,620
I recommend using your judgment to figure out when you want to use which type of

7762
00:08:35,900 --> 00:08:39,679
argument and depending on the need, you can pick between these two.

7763
00:08:41,210 --> 00:08:46,070
Now in the next lesson, I've got a coding exercise for you to put into practice

7764
00:08:46,340 --> 00:08:48,020
everything that you've learned so far.

7765
00:08:48,260 --> 00:08:51,110
Head over there when you're ready and let's give it a go.

7766
00:00:00,750 --> 00:00:03,060
All right. So in today's coding challenge,

7767
00:00:03,090 --> 00:00:05,250
we're going to do a little bit of wall painting.

7768
00:00:05,850 --> 00:00:10,850
And the idea is we're going to create a program that helps us calculate how many

7769
00:00:11,220 --> 00:00:16,219
cans of paint we need to buy for a given surface area of wall.

7770
00:00:17,220 --> 00:00:19,320
The maths involved is very simple

7771
00:00:19,350 --> 00:00:22,110
and I'm going to talk you through it if you're not confident with maths.

7772
00:00:22,500 --> 00:00:26,370
But essentially we want it to be able to use our inputs

7773
00:00:26,640 --> 00:00:31,380
to modify our function so that it does something every single time we use it.

7774
00:00:32,430 --> 00:00:37,410
Go ahead and click on day 8.1 area calculation,

7775
00:00:38,040 --> 00:00:42,510
and we're going to complete this coding challenge. So firstly,

7776
00:00:42,510 --> 00:00:46,290
you'll notice that down here on lines, 10, 11, 12, and 13,

7777
00:00:46,710 --> 00:00:50,160
I've got some code that's going to help us check your solution.

7778
00:00:50,700 --> 00:00:55,700
And we're going to use your function to actually calculate the number of cans of

7779
00:00:56,820 --> 00:00:57,810
paint we need to buy.

7780
00:00:58,470 --> 00:01:02,970
You're basically painting a wall and the instructions on the paint cans says that

7781
00:01:02,970 --> 00:01:03,803
one can

7782
00:01:04,110 --> 00:01:09,110
can cover five square meters of wall. Given any height and any width, your

7783
00:01:10,500 --> 00:01:15,360
program needs to calculate how many cans of paint you need to buy. The maths,

7784
00:01:15,570 --> 00:01:17,040
as I say, is pretty simple.

7785
00:01:17,070 --> 00:01:21,150
All you have to do is multiply the height by the width to get the area of the

7786
00:01:21,150 --> 00:01:25,290
wall, and then you simply divided by the coverage per can.

7787
00:01:25,860 --> 00:01:28,340
We said that five square meters per can, so

7788
00:01:28,350 --> 00:01:30,750
it means you are always going to be dividing by five.

7789
00:01:31,230 --> 00:01:35,250
So let's say that we had a wall which was two meters high and four meters wide,

7790
00:01:35,700 --> 00:01:39,150
and the coverage, as always, is going to be equal to five.

7791
00:01:40,020 --> 00:01:43,800
Then the calculation would be a simple as 2 x 4 divided by 5,

7792
00:01:43,830 --> 00:01:48,210
which is 1.6. So we need 1.6 cans of paint,

7793
00:01:48,540 --> 00:01:52,050
but because you can't buy 0.6 can of a paint,

7794
00:01:52,470 --> 00:01:56,460
I've tried this in the store. They said no and they told me to go away.

7795
00:01:57,300 --> 00:02:02,300
So we actually have to round up to the nearest whole number.

7796
00:02:03,240 --> 00:02:06,870
So in this case, we need to buy two cans. Now,

7797
00:02:06,900 --> 00:02:10,830
the really important thing to draw your attention to is down here

7798
00:02:10,860 --> 00:02:13,350
I actually call the function.

7799
00:02:13,770 --> 00:02:18,750
So I'm calling the function and I'm giving in some named arguments.

7800
00:02:19,080 --> 00:02:23,520
So this is really, really important. If you review the previous lessons,

7801
00:02:23,580 --> 00:02:27,870
then you should know what name you need to give your function and what

7802
00:02:27,870 --> 00:02:32,870
name you need to give the parameters for the code to actually work without any

7803
00:02:32,970 --> 00:02:37,950
errors. Remember to take a look at the example inputs down here

7804
00:02:37,980 --> 00:02:42,980
and example output because you need to print out something along these lines.

7805
00:02:43,650 --> 00:02:48,300
So it should say you'll need X cans of paint depending on your calculation.

7806
00:02:48,870 --> 00:02:52,920
And finally, if you need a hint as to how to round up a number,

7807
00:02:53,250 --> 00:02:57,180
then you can either go ahead and Google for it, use Stack Overflow,

7808
00:02:57,240 --> 00:03:01,540
that's probably the best way, or you could give it a guess. And finally,

7809
00:03:01,540 --> 00:03:02,680
if you really get stuck,

7810
00:03:02,710 --> 00:03:06,640
take a look at the hint section. And once you're done,

7811
00:03:06,700 --> 00:03:10,060
then come back over here and we'll walk through the solution together.

7812
00:03:10,600 --> 00:03:14,080
Pause the video now and go ahead and complete this coding exercise.

7813
00:03:21,750 --> 00:03:22,380
Yeah.

7814
00:03:22,380 --> 00:03:25,560
All right. So, did you manage to get that right? If not,

7815
00:03:25,710 --> 00:03:28,410
take a look at this video and then once you're done,

7816
00:03:28,620 --> 00:03:33,090
take a look at the solution code and try to compare against your code to see if

7817
00:03:33,090 --> 00:03:37,110
there were any errors that you made. Now, this challenge is pretty doable.

7818
00:03:37,470 --> 00:03:42,470
All we have to do is to create our function and we create any function using def.

7819
00:03:43,500 --> 00:03:46,830
And how do we know what name to give this function? Well,

7820
00:03:46,830 --> 00:03:49,950
we take a look at where the function was called down here,

7821
00:03:50,520 --> 00:03:53,850
and you can see that it's called paint_calc.

7822
00:03:54,240 --> 00:03:56,910
So this is what we have to give our function as the name.

7823
00:03:57,630 --> 00:04:02,370
And then we of course have our parentheses, our colon, and then inside here,

7824
00:04:02,400 --> 00:04:04,920
we're going to do all the calculations. Now,

7825
00:04:04,920 --> 00:04:09,030
the next thing we have to look at is what name we should give our parameters.

7826
00:04:09,510 --> 00:04:12,540
And you can see I've got named arguments here.

7827
00:04:12,930 --> 00:04:17,820
So that means each of these are going to be the names of the parameters; height,

7828
00:04:18,300 --> 00:04:19,950
width, and cover.

7829
00:04:20,459 --> 00:04:25,460
So the parameters are going to go inside the parentheses height, width, and cover.

7830
00:04:27,060 --> 00:04:31,620
And it's only if we actually spell these parameters exactly the same as what we've

7831
00:04:31,620 --> 00:04:35,280
got down here in the arguments will our code actually work.

7832
00:04:36,780 --> 00:04:41,160
Now let's go ahead and take the height and multiply it by the width to get the

7833
00:04:41,160 --> 00:04:45,240
area. So area = height * width.

7834
00:04:46,440 --> 00:04:50,460
And then with that area, we can divide it by the coverage per can.

7835
00:04:50,520 --> 00:04:55,520
So let's call it num_of_cans = area

7836
00:04:55,890 --> 00:04:57,720
/ cover.

7837
00:05:00,000 --> 00:05:04,560
And now remember that this is going to be a decimal number occasionally like

7838
00:05:04,560 --> 00:05:05,393
here,

7839
00:05:05,520 --> 00:05:09,780
and we have two round it up to the next whole number.

7840
00:05:10,410 --> 00:05:14,370
If we take a look at this particular Stack Overflow,

7841
00:05:15,480 --> 00:05:18,540
you can see that the question is exactly what we want, right?

7842
00:05:18,540 --> 00:05:22,620
How do you round up a number in Python? And if you did some Googling,

7843
00:05:22,620 --> 00:05:26,730
then this might have been the Stack Overflow question you would have landed on.

7844
00:05:27,360 --> 00:05:32,220
And essentially it tells us you have to import maths, and from the math module,

7845
00:05:32,230 --> 00:05:36,180
you use a function called ceiling. And then inside the parentheses,

7846
00:05:36,270 --> 00:05:39,390
you put in the inputs. To do that,

7847
00:05:39,420 --> 00:05:41,280
we first import math.

7848
00:05:42,690 --> 00:05:47,690
It's math without the 's.' And then we can call it a math.ceil and wrap this

7849
00:05:50,130 --> 00:05:52,110
result around the parentheses.

7850
00:05:52,410 --> 00:05:56,250
So this is going to take the result here from a decimal number to

7851
00:05:56,250 --> 00:05:59,510
a whole number by rounding it up to the ceiling.

7852
00:06:00,260 --> 00:06:03,380
So now we're finally ready to give our output,

7853
00:06:03,410 --> 00:06:05,660
so we're going to do that by printing it.

7854
00:06:05,660 --> 00:06:09,560
So we're going to print and I'm definitely going to need an f-string.

7855
00:06:09,560 --> 00:06:13,040
So I'm going to put an F in there and paste this string.

7856
00:06:13,340 --> 00:06:16,430
And instead of having the hard-coded five here,

7857
00:06:16,940 --> 00:06:20,630
I'm going to put in the num_of_cans instead.

7858
00:06:21,500 --> 00:06:26,500
So now when this line of code on line 17 calls

7859
00:06:27,050 --> 00:06:31,310
paint_calc passing in each of these arguments,

7860
00:06:32,210 --> 00:06:37,210
then it's going to be able to run this function here and print out how many cans

7861
00:06:38,180 --> 00:06:42,830
of paint I'll need. Now, all we have to do is test our code.

7862
00:06:43,010 --> 00:06:46,490
So let's hit run and let's put in a random height.

7863
00:06:46,490 --> 00:06:50,930
Let's say it's five meters high and three meters wide.

7864
00:06:51,560 --> 00:06:54,050
And it tells us that we need three cans of paint.

7865
00:06:54,560 --> 00:06:57,890
So five by three,

7866
00:06:57,890 --> 00:06:59,750
the area is 15 square meters,

7867
00:07:00,140 --> 00:07:03,860
15 divided by five is three. Now,

7868
00:07:03,860 --> 00:07:05,960
what if we had a decimal number?

7869
00:07:06,290 --> 00:07:10,430
Let's say we had a height of 7 and a width of 13.

7870
00:07:11,180 --> 00:07:14,060
Then in this case, it tells us we need 19 cans.

7871
00:07:14,120 --> 00:07:19,120
So 7 times 13 is 91. 91 divided by 5 is 18.2 and 18.2

7872
00:07:22,010 --> 00:07:23,900
round it up is 19.

7873
00:07:24,680 --> 00:07:29,330
And we've now completed this challenge. Did you manage to get it right?

7874
00:07:29,660 --> 00:07:34,660
If not, be sure to watch this video and see if you can go back and fix your code

7875
00:07:35,150 --> 00:07:39,560
and you can compare it against the solution code I've got here by going to this

7876
00:07:39,590 --> 00:07:40,580
link right here.

7877
00:07:42,260 --> 00:07:46,220
And once you're done, head over to the next lesson where I've got a slightly

7878
00:07:46,220 --> 00:07:48,170
harder coding challenge for you.

7879
00:00:00,330 --> 00:00:07,950
All right, so in the next coding exercise, we're going to be building a prime number checker. And a

7880
00:00:07,950 --> 00:00:15,030
prime number, just to remind you, is a number that is only divisible by one and itself.

7881
00:00:15,720 --> 00:00:22,350
So, for example, two is a prime number because it can only be divided by one and two.

7882
00:00:23,010 --> 00:00:24,600
Three is also a prime number,

7883
00:00:24,630 --> 00:00:29,100
similarly, it can only be split into three equal sized chunks.

7884
00:00:29,550 --> 00:00:35,700
But four, however, is not a prime number because while it can be divided by one and four, it can

7885
00:00:35,700 --> 00:00:37,350
also be divided by two.

7886
00:00:37,620 --> 00:00:44,100
So two times two is four. Essentially a prime number is a number that can't be broken to smaller

7887
00:00:44,100 --> 00:00:46,230
parts other than one and itself.

7888
00:00:46,950 --> 00:00:54,240
And it's this property of prime numbers that makes them really useful to everything from cicadas to

7889
00:00:54,240 --> 00:00:58,440
Bitcoin and also encryption in the computer world.

7890
00:00:59,280 --> 00:01:05,820
So if you head over to day 8.2 prime number checker, you'll see the starting code including

7891
00:01:05,820 --> 00:01:08,840
the number that we're going to be sending over and checking.

7892
00:01:09,270 --> 00:01:16,200
And then, of course, the line eleven where we actually call this function and pass over the number. So

7893
00:01:16,320 --> 00:01:19,960
this part is really important when you are creating your function.

7894
00:01:20,610 --> 00:01:26,370
The idea is that you're going to be creating a function here that checks whether if the number that's

7895
00:01:26,370 --> 00:01:29,930
passed in is a prime number or not.

7896
00:01:30,450 --> 00:01:36,180
And if you take a look at this chart, then you'll see all the prime numbers up to 100 highlighted in

7897
00:01:36,180 --> 00:01:36,640
yellow.

7898
00:01:37,440 --> 00:01:39,410
There's a couple of things you need to remember.

7899
00:01:39,600 --> 00:01:44,120
One is that you'll probably need to use the modulus, which we've seen before.

7900
00:01:44,670 --> 00:01:49,090
And if you can't remember how to use that, then take a look at this link.

7901
00:01:49,710 --> 00:01:54,900
Now, the second thing is that make sure that you name your function and parameters the same as what

7902
00:01:54,900 --> 00:01:57,390
you see here where it's called.

7903
00:01:58,020 --> 00:02:05,040
And finally, try to use the same wording as the example outputs, namely, if it is a prime number print

7904
00:02:05,490 --> 00:02:08,430
"It's a prime number." in this exact wording.

7905
00:02:08,759 --> 00:02:14,310
And if it's not a prime number, then print "It's not a prime number." with this exact wording.

7906
00:02:15,360 --> 00:02:21,150
And finally, if you're still not quite sure how prime numbers work, then be sure to check out the

7907
00:02:21,150 --> 00:02:22,200
Wikipedia page.

7908
00:02:22,470 --> 00:02:29,340
And if your first language is not English, then be sure to switch to your native language just to know

7909
00:02:29,610 --> 00:02:33,480
what it is because I know it's called different things in different languages.

7910
00:02:34,920 --> 00:02:35,910
Pause the video,

7911
00:02:36,180 --> 00:02:40,890
have a good think about this and see if you can solve this problem.

7912
00:02:44,690 --> 00:02:48,920
All right, so let's think about how we might tackle this. The first thing I'm going to do is I'm going

7913
00:02:48,920 --> 00:02:54,950
to create a new function called prime_checker to be in line with this line, because I'm calling a

7914
00:02:54,950 --> 00:02:56,270
function called prime_checker

7915
00:02:56,660 --> 00:03:00,800
and then I'm passing in an argument to the parameter called number.

7916
00:03:01,430 --> 00:03:06,740
So now that we've created our function, the next step is to figure out, well, what do we do in this

7917
00:03:06,740 --> 00:03:07,190
function?

7918
00:03:07,730 --> 00:03:14,840
Now, I mentioned that every prime number can only be cleanly divided by itself and one.

7919
00:03:15,290 --> 00:03:21,540
So that means that if it's divided by any other number other than these, it will have a remainder.

7920
00:03:22,100 --> 00:03:28,360
So we know that we can use the modulus to check what the remainder is of a division.

7921
00:03:28,910 --> 00:03:37,910
So we know that, for example, if we divide six by two, then it equals three with no remainder because

7922
00:03:37,910 --> 00:03:44,750
six is divided into two three times, while seven divided by two equals one because there's a remainder

7923
00:03:44,750 --> 00:03:50,320
of one, because two times three is six and then six plus one makes seven.

7924
00:03:51,080 --> 00:04:00,020
So we can use the modulus to check whether if the number that we're passing in here can be divided by

7925
00:04:00,050 --> 00:04:02,610
all the numbers all the way down to two.

7926
00:04:03,410 --> 00:04:11,570
So, for example, if number was equal to seven, well, then what we would want to do is we would want

7927
00:04:11,570 --> 00:04:20,450
to do seven divided by two and then see if there is any remainder, and then seven divided by three and

7928
00:04:20,450 --> 00:04:25,480
see if there was any remainder, and then seven divided by four...

7929
00:04:25,520 --> 00:04:30,740
and then we just go up two, three, four, five, and six.

7930
00:04:31,040 --> 00:04:37,740
And now we've basically divided seven by all the possible values other than one and seven.

7931
00:04:38,510 --> 00:04:45,470
So if any of these has zero as the remainder, then it means that it does cleanly divide by one of these

7932
00:04:45,470 --> 00:04:48,440
numbers, which means that it's actually not a prime number.

7933
00:04:49,550 --> 00:04:57,230
But if all of these have a remainder, then that means seven is a prime number, which we already know

7934
00:04:57,230 --> 00:04:59,260
it is because we can see it on this graph.

7935
00:04:59,720 --> 00:05:07,220
So how can we go through this process of getting this number divided by numbers starting from two

7936
00:05:07,220 --> 00:05:11,030
all the way going up to the number minus one?

7937
00:05:11,270 --> 00:05:14,380
Well, we could simply just use a for loop, right?

7938
00:05:14,780 --> 00:05:22,700
So we create a for loop and say for i which is going to be this number that we're going to divide

7939
00:05:22,700 --> 00:05:24,440
by, in,

7940
00:05:24,890 --> 00:05:28,760
and that number is going to be a range of numbers.

7941
00:05:28,910 --> 00:05:33,470
And the range starts from two because we're not going to divide it by one.

7942
00:05:33,470 --> 00:05:39,680
We already know that all numbers can be divided by one. And we're going to put the range all the way

7943
00:05:39,680 --> 00:05:41,520
up to the number.

7944
00:05:42,350 --> 00:05:48,380
So now inside this for loop, we can start doing our divisions. So we could take the number and we can

7945
00:05:48,380 --> 00:05:51,740
use the modulo operator to divide it by i.

7946
00:05:52,220 --> 00:06:00,580
So it's exactly the same as each of these lines of division. If number divided by i is equal to zero,

7947
00:06:00,590 --> 00:06:06,350
so if it divides cleanly, well, then in this case, it's clearly not a prime,

7948
00:06:06,350 --> 00:06:14,720
right? Because if that number that we get passed in can be divided by any of the numbers between two

7949
00:06:14,720 --> 00:06:21,600
and number minus one cleanly with no remainder, then that means it's not a prime number.

7950
00:06:22,220 --> 00:06:30,950
However, if we get to the very end of our for loop and this if statement was never triggered, well,

7951
00:06:30,950 --> 00:06:33,650
then that means this is a prime number.

7952
00:06:34,910 --> 00:06:37,820
So how can we represent this with our code?

7953
00:06:38,420 --> 00:06:43,900
Well, we could create a variable called is_prime and set it to true.

7954
00:06:44,540 --> 00:06:48,510
If this if statement gets triggered, then we switch

7955
00:06:48,530 --> 00:06:51,000
this is_prime to false.

7956
00:06:51,560 --> 00:06:55,980
And finally, once we get to the end of the for loop, we can go ahead and check

7957
00:06:56,000 --> 00:07:00,400
well, is is_prime true or is it false?

7958
00:07:00,920 --> 00:07:07,370
And this expression is basically the same as just typing this because this is going to be true or false.

7959
00:07:07,550 --> 00:07:15,020
And if it's true, then we get to step into this block and we're going to print from this example output

7960
00:07:15,020 --> 00:07:23,090
and say that it is a prime number. But else or otherwise, then we're going to print the opposite

7961
00:07:23,280 --> 00:07:26,360
where  we say it's not a prime number.

7962
00:07:27,870 --> 00:07:28,630
There you have it.

7963
00:07:28,650 --> 00:07:38,040
This is the simplest way of checking whether if a number is a prime number. And all it does is it checks

7964
00:07:38,040 --> 00:07:41,790
through all of the numbers between two and the number.

7965
00:07:42,120 --> 00:07:47,220
And if it's divisible by any of those numbers, well, then it's not a prime.

7966
00:07:48,000 --> 00:07:54,420
Now, out there in the real world, there's a lot of other ways that you could implement this function.

7967
00:07:54,900 --> 00:08:00,570
And there's more efficient ways, there's faster ways and there's lots of algorithms that mathematicians

7968
00:08:00,570 --> 00:08:04,350
have come up with in the past. Now for our case,

7969
00:08:04,530 --> 00:08:12,030
what I'm really interested in is that you understand how inputs work and how you can use the argument

7970
00:08:12,030 --> 00:08:18,420
that's passed in to the parameter inside your function in order to do something with it.

7971
00:08:18,960 --> 00:08:24,780
As long as that's clear to you, then that means we can continue in the course and I can rely on the

7972
00:08:24,780 --> 00:08:31,050
fact that this code or this code will not throw you off and you'll know exactly what's going on when

7973
00:08:31,050 --> 00:08:38,100
it's being used inside the block of code and when it's being passed over into a block of code.

7974
00:08:38,700 --> 00:08:43,980
In the next lesson, we're going to be putting all of our knowledge that we learned into practice and

7975
00:08:43,980 --> 00:08:48,100
we're going to get started building our final project, the Caesar cipher.

7976
00:08:48,390 --> 00:08:50,550
So for all of that and more,

7977
00:08:50,580 --> 00:08:51,270
I'll see you there.

7978
00:00:00,520 --> 00:00:04,480
All right. It's finally time to tackle our final project,

7979
00:00:04,540 --> 00:00:07,930
the Caesar Cipher. As I mentioned before,

7980
00:00:08,109 --> 00:00:13,060
Caesar Cipher is this way of encoding text that,

7981
00:00:13,090 --> 00:00:16,870
um, was seen as early as during the times of Julius Caesar.

7982
00:00:17,110 --> 00:00:20,170
So when he had these top secret military messages,

7983
00:00:20,560 --> 00:00:25,560
what he would do is he would shift each letter of the alphabet by a certain

7984
00:00:26,830 --> 00:00:30,790
predetermined amount. I want to show you quickly how this works.

7985
00:00:31,270 --> 00:00:36,270
So we've got the alphabet here and let's say we wanted to encode the letter E. So

7986
00:00:36,970 --> 00:00:40,750
now we can line up the alphabet with a new set of alphabet.

7987
00:00:41,260 --> 00:00:42,430
And at the moment,

7988
00:00:42,490 --> 00:00:47,490
the shift is zero because the top alphabet and the bottom alphabet are lined up

7989
00:00:47,860 --> 00:00:52,840
with a zero difference. Now, let's say that we had a shift of one. Well,

7990
00:00:52,840 --> 00:00:57,700
then the alphabet moves to the left and A becomes B, B become C et cetera.

7991
00:00:58,090 --> 00:01:02,710
And we can keep going until we get to the amount of shift that we wanted.

7992
00:01:03,010 --> 00:01:07,060
So let's say we're going to encode all of our text with the shift of three.

7993
00:01:07,480 --> 00:01:11,980
Well, then E becomes H, F becomes I, G becomes J et cetera,

7994
00:01:12,250 --> 00:01:13,660
and so on and so forth.

7995
00:01:14,020 --> 00:01:17,920
And they've actually discovered these artifacts from ages ago

7996
00:01:17,920 --> 00:01:21,580
where people have created these sort of dials.

7997
00:01:22,060 --> 00:01:27,060
And by simply rotating the dial to a certain amount of shift,

7998
00:01:27,400 --> 00:01:29,620
then you can line up the letters with each other.

7999
00:01:29,950 --> 00:01:34,510
So A becomes N and Z becomes O and so on and so forth.

8000
00:01:34,750 --> 00:01:38,050
And this is a way that people actually encoded top secret messages.

8001
00:01:38,830 --> 00:01:40,750
By the end of this day,

8002
00:01:40,960 --> 00:01:45,070
you will have also built a digital form of the Caesar cipher.

8003
00:01:45,730 --> 00:01:50,440
And all you have to do is to type encode to start encoding a message.

8004
00:01:50,830 --> 00:01:53,380
Let's say something like Hello World.

8005
00:01:54,130 --> 00:01:57,580
And once we hit enter, we get to type the shift number,

8006
00:01:57,910 --> 00:01:59,710
which I'm just gonna choose a random one,

8007
00:02:00,100 --> 00:02:02,980
and it gives us the encoded result.

8008
00:02:03,460 --> 00:02:08,460
So now if I take this encoded results and I go ahead and type yes,

8009
00:02:08,800 --> 00:02:10,570
to restart my program,

8010
00:02:10,870 --> 00:02:15,340
and I'm going to use the decode function to decode my message.

8011
00:02:16,180 --> 00:02:18,820
Now, when I use the same shift number,

8012
00:02:19,450 --> 00:02:22,600
then I should be able to get back the decoded result.

8013
00:02:23,050 --> 00:02:26,470
So if there's people monitoring your phone, or you're trying to throw a message to

8014
00:02:26,470 --> 00:02:28,000
your friend in a paper ball,

8015
00:02:28,330 --> 00:02:33,330
then this is an easy way to ensure that if your message was intercepted then it

8016
00:02:33,430 --> 00:02:37,480
won't be understood by the other person. Once you're ready,

8017
00:02:37,510 --> 00:02:42,510
let's get started by heading over to repl.it/@appbrewery/caesar

8018
00:02:42,940 --> 00:02:47,320
-cipher-1-start. And this contains the starting code for this project

8019
00:02:47,710 --> 00:02:49,480
and this is part one of four.

8020
00:02:49,960 --> 00:02:54,520
So here I've already saved you the laborious task of typing out all the letters

8021
00:02:54,520 --> 00:02:57,790
in the alphabet and they're stores in a single list.

8022
00:02:58,390 --> 00:03:01,600
Now I've also got three inputs.

8023
00:03:01,750 --> 00:03:03,820
So this is what the user is going to type in.

8024
00:03:03,850 --> 00:03:06,610
They're gonna type in encode or decode,

8025
00:03:06,760 --> 00:03:10,630
and that's gonna be saved to the direction. Tey're going to type them message

8026
00:03:10,660 --> 00:03:12,730
which is going to be changed to lower case

8027
00:03:13,090 --> 00:03:15,850
and this is going to be saved in text, and finally,

8028
00:03:15,850 --> 00:03:17,800
they're going to input a shift number

8029
00:03:18,130 --> 00:03:22,180
which is going to be converted to an integer and saved inside this variable

8030
00:03:22,180 --> 00:03:27,040
called shift. So if you want to, have a run of the program as it is right now,

8031
00:03:27,280 --> 00:03:30,970
so that you fully understand what's actually going on before you get started.

8032
00:03:31,390 --> 00:03:33,880
And remember, don't change any of the code above,

8033
00:03:34,210 --> 00:03:37,150
but instead tackle the to-dos one by one.

8034
00:03:37,750 --> 00:03:40,330
The first step is to create a function called encrypt

8035
00:03:40,570 --> 00:03:45,430
that's going to take this text that the user typed in and the shift that they

8036
00:03:45,430 --> 00:03:47,260
typed in as inputs.

8037
00:03:48,100 --> 00:03:51,310
And this is going to use what you learned about functions with inputs,

8038
00:03:51,340 --> 00:03:52,780
from today's lessons.

8039
00:03:53,530 --> 00:03:58,000
And then once you're done with that, step 2 is to go inside the encrypt

8040
00:03:58,000 --> 00:04:03,000
function that you just created and shift each letter of the text forwards by the

8041
00:04:05,650 --> 00:04:09,870
shift amount. So, again, as we saw before a shift of one,

8042
00:04:09,880 --> 00:04:11,860
a shifter of two, a shift of three,

8043
00:04:12,100 --> 00:04:15,310
basically just moves the characters forward

8044
00:04:15,340 --> 00:04:19,060
so that each letter of the alphabet becomes a letter of the alphabet much

8045
00:04:19,089 --> 00:04:23,830
further down the line. Let's say that the user entered the text

8046
00:04:23,860 --> 00:04:27,370
Hello and if we tried a shift of five,

8047
00:04:27,640 --> 00:04:31,000
then the end result should be mjqqt

8048
00:04:31,450 --> 00:04:35,530
and the printed output from this function should say something like the encoded

8049
00:04:35,530 --> 00:04:38,770
text is this. And finally,

8050
00:04:38,770 --> 00:04:42,880
you're going to call the encrypt function and then pass in the user inputs from

8051
00:04:42,880 --> 00:04:43,713
over here

8052
00:04:43,900 --> 00:04:48,190
and you should be able to test the code and encrypt a message and see something

8053
00:04:48,190 --> 00:04:52,480
like this happen. Pause the video now, have a look through the starting code,

8054
00:04:52,720 --> 00:04:53,830
and once you're ready,

8055
00:04:53,980 --> 00:04:57,250
go ahead and tackle it and then come back and we'll go through the solution

8056
00:04:57,250 --> 00:05:02,200
together. Good luck. All right.

8057
00:05:02,200 --> 00:05:07,200
So I'm gonna fork a copy of the starting file and tackle to-do number one,

8058
00:05:07,930 --> 00:05:12,930
which is to create a function which is done using Def and it's called encrypt.

8059
00:05:14,020 --> 00:05:18,250
And this function is going to take two inputs. So inside the parentheses,

8060
00:05:18,580 --> 00:05:22,300
I'm going to put two parameters. Now you can,

8061
00:05:22,300 --> 00:05:26,110
of course use the same word as the inputs that you're going to put into it.

8062
00:05:26,380 --> 00:05:28,000
But in an ideal world,

8063
00:05:28,000 --> 00:05:31,600
you try to not confuse yourself between the arguments and the parameters.

8064
00:05:31,900 --> 00:05:34,690
So I'm going to call this plain_text,

8065
00:05:34,840 --> 00:05:37,570
this first parameter and the second parameter

8066
00:05:37,600 --> 00:05:41,230
I'm going to call it shift_amount. Now, of course, at a later date,

8067
00:05:41,230 --> 00:05:43,330
when we're sending the input to this function,

8068
00:05:43,570 --> 00:05:47,860
we're going to be sending the text to plain_text and shift to shift_amount.

8069
00:05:48,460 --> 00:05:53,460
Keeping the names of the argument and the parameter different will help us

8070
00:05:54,430 --> 00:05:59,430
later on to see which one is which. The next step is to go inside the encrypt

8071
00:06:00,200 --> 00:06:03,410
function, which of course means indenting by one,

8072
00:06:03,710 --> 00:06:08,710
we're going to shift each letter of the text forwards in the alphabet by the

8073
00:06:08,930 --> 00:06:11,450
shift amount, and then print the encrypted text.

8074
00:06:12,020 --> 00:06:15,230
This is going to be the challenging part of this whole exercise.

8075
00:06:15,740 --> 00:06:18,020
But essentially if we think about the problem,

8076
00:06:18,050 --> 00:06:22,940
what we want to do is we want to take each letter in the plain text.

8077
00:06:23,000 --> 00:06:26,060
So let's say all plain text is equal to hello.

8078
00:06:26,540 --> 00:06:31,540
Then we're going to take each of these letters in turn and then shift it up in

8079
00:06:31,790 --> 00:06:36,290
the alphabet by the shift amount. So let's say for example,

8080
00:06:36,290 --> 00:06:39,800
our shift amount was five and our plain text was hello,

8081
00:06:40,340 --> 00:06:43,670
the first thing we're going to do is we're going to take the H which is over

8082
00:06:43,670 --> 00:06:48,440
here, and then we're going to shift it up by five. So one, two, three, four,

8083
00:06:48,680 --> 00:06:49,220
five,

8084
00:06:49,220 --> 00:06:54,220
and we're going to turn it into an M. We can start off by writing a for loop that

8085
00:06:54,380 --> 00:06:58,520
loops through each of the letters in the plain text input.

8086
00:06:59,270 --> 00:07:04,270
And then we can take each of these letters and work out its position in the

8087
00:07:05,390 --> 00:07:06,620
alphabet list here.

8088
00:07:07,340 --> 00:07:10,820
And we can do that by using the index method.

8089
00:07:11,030 --> 00:07:15,140
So we can tap into a list, write .index,

8090
00:07:15,470 --> 00:07:18,470
and then put in the value that we want to get the index for

8091
00:07:18,800 --> 00:07:23,720
and we should be able to get that as the result. So back over here,

8092
00:07:23,750 --> 00:07:24,890
we're going to say,

8093
00:07:25,010 --> 00:07:29,030
alphabet, is the list, .index

8094
00:07:29,360 --> 00:07:33,560
and then inside the parentheses, we can put in our letter.

8095
00:07:34,070 --> 00:07:39,070
So we want to find out the index of the letter that we're looping through in

8096
00:07:39,410 --> 00:07:43,430
this alphabet up here. And once we've gotten a hold of that,

8097
00:07:43,460 --> 00:07:47,180
we're gonna save it into a variable called position.

8098
00:07:48,410 --> 00:07:52,790
Now, once we've got that, then we're going to calculate the new position.

8099
00:07:54,050 --> 00:07:57,320
Now the new position is just going to be the previous position,

8100
00:07:57,350 --> 00:08:02,270
which is going to be a number, and then plus the shift amount.

8101
00:08:03,230 --> 00:08:06,170
So while we're going through this code, let's look at this word

8102
00:08:06,260 --> 00:08:11,260
H. So the first time the loop runs letter's going to be equal to H, position is

8103
00:08:11,330 --> 00:08:15,920
going to be equal to zero one, two, three, four, five, six, seven.

8104
00:08:16,610 --> 00:08:18,620
And then the shift amount is five,

8105
00:08:18,650 --> 00:08:21,620
so seven plus five is going to be 12.

8106
00:08:21,950 --> 00:08:24,680
So now the new position is going to be 12,

8107
00:08:25,070 --> 00:08:29,150
and we can tap into the alphabet list at position 12,

8108
00:08:30,410 --> 00:08:33,320
so seven, eight, nine, ten, eleven, twelve,

8109
00:08:33,409 --> 00:08:36,289
and get hold of the value at that position.

8110
00:08:37,520 --> 00:08:42,520
So we can say that new_letter is equal to the alphabet at the new_position.

8111
00:08:47,240 --> 00:08:50,120
And now once we've got this new_letter,

8112
00:08:50,210 --> 00:08:55,040
we can create a empty string here which we'll call the ciphertext

8113
00:08:56,160 --> 00:09:00,330
which is going to be the encoded text. And it starts out being an empty string

8114
00:09:00,810 --> 00:09:03,600
and then once we've gotten each of the new letters,

8115
00:09:03,870 --> 00:09:08,160
we're going to add it to the cipher text. Now,

8116
00:09:08,160 --> 00:09:12,750
the final thing we have to do inside this encrypt function is once the

8117
00:09:12,750 --> 00:09:14,340
for loop has run its course,

8118
00:09:14,730 --> 00:09:19,260
and we've added all of the new letters into the cipher text,

8119
00:09:19,530 --> 00:09:24,180
then at this point, it's a good idea to print out the output.

8120
00:09:24,600 --> 00:09:27,570
And it tells us that we should say something like this,

8121
00:09:27,870 --> 00:09:32,340
where we replace this final thing with the actual encoded text,

8122
00:09:32,400 --> 00:09:35,250
which has of course, called a cipher text in our case.

8123
00:09:35,910 --> 00:09:38,250
Now let's just make that into an fstring

8124
00:09:38,250 --> 00:09:43,080
so that it'll insert it when it runs and we're ready to tackle the last to-do. So

8125
00:09:43,080 --> 00:09:43,620
here,

8126
00:09:43,620 --> 00:09:47,850
we're going to call the encrypt function and we're going to pass in all of the

8127
00:09:47,850 --> 00:09:48,750
user inputs.

8128
00:09:49,140 --> 00:09:53,850
So it remember that our parameter names are plain text and shift amount.

8129
00:09:54,270 --> 00:09:57,840
So I'm actually going to use the keyword arguments, so I'm going to say

8130
00:09:57,870 --> 00:10:02,870
plain text is equal to the text that the user has typed in.

8131
00:10:04,650 --> 00:10:07,380
And then on the next argument,

8132
00:10:07,530 --> 00:10:12,530
I'm going to say the shift amount is equal to the shift that the user has typed

8133
00:10:13,440 --> 00:10:14,273
in.

8134
00:10:17,100 --> 00:10:21,870
So now we're ready to test our code and let's take a look at what happens.

8135
00:10:22,290 --> 00:10:27,290
So I'm going to use this example that we've done here by trying to encode hello

8136
00:10:27,870 --> 00:10:31,980
with the shift of five. Now the first thing that we type, the direction,

8137
00:10:32,010 --> 00:10:35,820
doesn't actually matter because it's not being used anywhere in our code,

8138
00:10:36,000 --> 00:10:39,060
at least not yet. So you can type anything you want,

8139
00:10:39,060 --> 00:10:43,380
I'm just going to type encode. And then the message is going to be hello.

8140
00:10:44,310 --> 00:10:47,790
And the shift number is going to be five.

8141
00:10:48,390 --> 00:10:52,500
And now it tells us that the encoded text is mjqqt,

8142
00:10:52,830 --> 00:10:55,410
which matches with the expected output.

8143
00:10:55,990 --> 00:11:00,430
You might think that we're done, right? This is perfect. This is great

8144
00:11:00,430 --> 00:11:03,850
and we've completed this entire exercise.

8145
00:11:04,390 --> 00:11:07,600
But lets consider a different scenario.

8146
00:11:08,200 --> 00:11:13,200
What happens if we tried to encode a word that had letters that were really

8147
00:11:15,190 --> 00:11:17,200
close to the end of the alphabet?

8148
00:11:17,770 --> 00:11:22,360
Let's say that we wanted to encode the message zulu.

8149
00:11:23,320 --> 00:11:26,590
Now I'm only doing that because if there's a z in that word, of course.

8150
00:11:27,100 --> 00:11:29,380
And we wanted to shift it by five.

8151
00:11:29,560 --> 00:11:32,620
Now let's think of what's going to happen right? In our code,

8152
00:11:32,620 --> 00:11:36,130
we're going to take each of the letters, we're going to take z first

8153
00:11:36,490 --> 00:11:41,490
and then we're going to get its position in the alphabet and add the shift

8154
00:11:41,530 --> 00:11:45,430
amount to the position to get the new position.

8155
00:11:45,910 --> 00:11:50,620
Now, this is already at the end of the alphabet. So if this number

8156
00:11:50,620 --> 00:11:52,150
which is going to be 25,

8157
00:11:52,180 --> 00:11:57,180
because there's 26 letters in the alphabet and we start the position at zero.

8158
00:11:57,820 --> 00:12:01,210
So this plus five is going to be 30.

8159
00:12:01,750 --> 00:12:06,580
And what happens when we try to get the 30th item from the alphabet? Well,

8160
00:12:06,610 --> 00:12:07,900
you'll find out when I hit enter.

8161
00:12:08,350 --> 00:12:13,350
We get an index error and it tells us that list index out of range, and it

8162
00:12:13,690 --> 00:12:16,240
occurred on line 15.

8163
00:12:16,660 --> 00:12:20,710
So just as we predicted, this does not exist.

8164
00:12:21,100 --> 00:12:25,510
We have to try and tackle this right? So if you haven't thought about this,

8165
00:12:25,630 --> 00:12:29,440
this is the time to think about how can you solve this problem.

8166
00:12:30,160 --> 00:12:35,160
I want you to pause for a moment and try to see if you can fix it.

8167
00:12:39,480 --> 00:12:39,870
All right.

8168
00:12:39,870 --> 00:12:44,870
So we know that this has a fixed length and what we want to happen when we have

8169
00:12:46,470 --> 00:12:51,470
a letter towards the end that we need to encode is to loop back to the beginning

8170
00:12:51,720 --> 00:12:54,360
of the alphabet. So to solve this,

8171
00:12:54,600 --> 00:12:59,600
all we have to do is just to copy the existing letters in the alphabet and then

8172
00:13:00,450 --> 00:13:02,610
just duplicate it once more.

8173
00:13:03,120 --> 00:13:08,120
So this means that if we find a letter that's z and it needs to be shifted up

8174
00:13:08,190 --> 00:13:13,020
by five letters, it's going to continue until it gets to e.

8175
00:13:13,650 --> 00:13:14,010
Now,

8176
00:13:14,010 --> 00:13:19,010
the really wonderful thing about this index function is it's going to give you the

8177
00:13:19,080 --> 00:13:21,510
first index that it finds.

8178
00:13:21,960 --> 00:13:26,370
So if we're looking for the letter a, it's going to give you the index zero

8179
00:13:26,670 --> 00:13:28,080
and then it's going to stop.

8180
00:13:28,170 --> 00:13:33,170
It's not going to look for all the indices and find this one at position 26.

8181
00:13:33,690 --> 00:13:36,690
So it means the our code will now work

8182
00:13:37,020 --> 00:13:41,670
even if we have a word that have a lot of letters towards the end of the

8183
00:13:41,670 --> 00:13:44,970
alphabet. Let's go ahead and give it a spin,

8184
00:13:46,100 --> 00:13:46,890
Right?

8185
00:13:46,890 --> 00:13:51,240
Let's type encode. And our message is again,

8186
00:13:51,510 --> 00:13:55,140
zulu. And we hit enter.

8187
00:13:55,800 --> 00:14:00,300
And then we have a shift number of five and we get our encoded text.

8188
00:14:00,540 --> 00:14:03,810
z becomes one, two, three, four,

8189
00:14:03,810 --> 00:14:08,250
five, it becomes e, and u, one, two, three, four,

8190
00:14:08,250 --> 00:14:12,870
five, becomes z. So now we've solved that small bug.

8191
00:14:14,520 --> 00:14:17,280
Now there's a lot of other ways that you could have solved this bug,

8192
00:14:17,310 --> 00:14:21,960
but I think this is the easiest way without disturbing our logic here and not

8193
00:14:21,960 --> 00:14:24,330
making our function even longer.

8194
00:14:25,110 --> 00:14:29,310
If you had any problems with your code, then this is the time to go back and fix

8195
00:14:29,310 --> 00:14:33,630
it and make sure that you really understand everything that's going on here

8196
00:14:33,930 --> 00:14:37,530
before you move on to the next lesson. But once you're ready,

8197
00:14:37,770 --> 00:14:41,160
I'll see you on the next lesson where we're going to decrypt our code.

8198
00:00:00,780 --> 00:00:05,110
All right. So now that we've managed to get our program to encode some text,

8199
00:00:05,470 --> 00:00:07,960
it's time to do the opposite direction,

8200
00:00:07,990 --> 00:00:12,990
which is how do we get our program to be able to decode a piece of text based on

8201
00:00:13,210 --> 00:00:14,043
a shift number.

8202
00:00:14,470 --> 00:00:19,470
So let's say that we try to decode the letter G and we had a shift number of

8203
00:00:19,690 --> 00:00:21,760
three. Well, in this case,

8204
00:00:21,790 --> 00:00:26,790
we actually have to work backward and shift backward in the alphabet in order

8205
00:00:27,700 --> 00:00:31,960
to get the letter that's three spaces previously.

8206
00:00:32,320 --> 00:00:33,070
So in this case,

8207
00:00:33,070 --> 00:00:37,510
that would be D. Go ahead and head over to caesar-

8208
00:00:37,510 --> 00:00:41,860
cipher-2-start and fork your own copy of it.

8209
00:00:43,000 --> 00:00:46,720
Alright, so we've got all the code that we had at the end of part one,

8210
00:00:47,170 --> 00:00:50,170
but now we have to create the decrypt function.

8211
00:00:50,890 --> 00:00:52,960
And the decrypt function is again

8212
00:00:52,960 --> 00:00:57,960
going to take the text that the user inputted and the shift number,

8213
00:00:58,810 --> 00:01:02,050
and both of these are going to go into the function as inputs.

8214
00:01:02,710 --> 00:01:04,599
And then inside the function,

8215
00:01:04,660 --> 00:01:09,660
we're going to shift each letter of the text backward in the alphabet

8216
00:01:10,000 --> 00:01:12,100
by the shift amount. For example,

8217
00:01:12,220 --> 00:01:17,220
if we started out with this code and we needed to shift each letter by five,

8218
00:01:17,980 --> 00:01:22,450
then we end up with the plain text, hello. And finally,

8219
00:01:22,510 --> 00:01:24,430
our function needs to print

8220
00:01:24,700 --> 00:01:29,700
the decoded text is, depending on what it is that we actually got. Finally,

8221
00:01:30,760 --> 00:01:32,440
in to-do part three,

8222
00:01:32,770 --> 00:01:35,830
we're going to use that direction

8223
00:01:35,830 --> 00:01:40,660
variable that we ignored previously, where we ask the user to type encode

8224
00:01:40,720 --> 00:01:44,050
if they want to encrypt and decode if they want to decrypt.

8225
00:01:44,650 --> 00:01:49,450
And then we're going to use an if statement here to check which one they chose,

8226
00:01:49,930 --> 00:01:54,280
and then we're going to call the corresponding function based on that direction.

8227
00:01:54,760 --> 00:01:57,580
And once you've completed all three to-dos,

8228
00:01:57,670 --> 00:02:02,050
you should be able to run your program and encode a message

8229
00:02:03,340 --> 00:02:06,970
as well as decode a message when you hit run again,

8230
00:02:09,460 --> 00:02:10,293
like that.

8231
00:02:10,990 --> 00:02:15,340
Have a think about how you might tackle each of the three to-dos and then pause

8232
00:02:15,340 --> 00:02:16,630
the video and give it a go.

8233
00:02:21,380 --> 00:02:25,850
All right. So how did that go? The first part should be quite easy.

8234
00:02:26,150 --> 00:02:29,870
All we have to do is define a new function called decrypt

8235
00:02:30,410 --> 00:02:35,270
and this decrypt is going to take the same inputs as our encrypt,

8236
00:02:35,450 --> 00:02:39,710
which is the text and the shift that the user entered.

8237
00:02:40,220 --> 00:02:41,030
But again,

8238
00:02:41,030 --> 00:02:45,020
I'm going to use some different parameter names to be able to differentiate the

8239
00:02:45,020 --> 00:02:47,540
arguments and the parameter. So in this case,

8240
00:02:47,540 --> 00:02:51,080
because the text that I'm getting is going to be scrambled,

8241
00:02:51,380 --> 00:02:53,990
I'm going to call the first parameter cipher_text,

8242
00:02:54,620 --> 00:02:58,520
and the second parameter I'll call it again, the shift amount.

8243
00:02:59,170 --> 00:03:03,640
Now, after a colon, I'm done with to-do 1. Now let's move on to

8244
00:03:03,640 --> 00:03:04,630
to-do 2.

8245
00:03:05,950 --> 00:03:09,520
So here I have to be inside the decrypt function,

8246
00:03:09,580 --> 00:03:11,950
so indented inside of the function,

8247
00:03:12,550 --> 00:03:17,230
and then I'm going to shift each letter of the ciphertext backward in the

8248
00:03:17,230 --> 00:03:19,390
alphabet by the shift amount

8249
00:03:19,630 --> 00:03:23,110
and then print out the decrypted text. To  do that I'm again

8250
00:03:23,110 --> 00:03:24,310
going to need a for loop,

8251
00:03:24,880 --> 00:03:28,990
and I'm going to loop through each letter in the cipher text.

8252
00:03:29,710 --> 00:03:31,810
And for each of those letters,

8253
00:03:31,870 --> 00:03:36,870
what I want to do is I want to get hold of the position that they are in the

8254
00:03:37,390 --> 00:03:41,530
alphabet. So I'm gonna check the alphabet and then use again,

8255
00:03:41,530 --> 00:03:43,210
that index function

8256
00:03:43,630 --> 00:03:46,570
and then tap into the position of the letter.

8257
00:03:47,950 --> 00:03:51,940
Once I've got the position, I'm going to define the new position

8258
00:03:52,360 --> 00:03:55,570
which is going to be the current position. Now,

8259
00:03:55,600 --> 00:03:58,420
remember, we're moving backwards in the alphabet now.

8260
00:03:58,450 --> 00:04:02,680
So I'm going to subtract the shift amount from the position.

8261
00:04:03,520 --> 00:04:04,720
Once that's done,

8262
00:04:04,780 --> 00:04:09,220
I can define a blank variable called plain text,

8263
00:04:09,640 --> 00:04:11,770
which is just going to be an empty string.

8264
00:04:12,400 --> 00:04:15,790
And once I've gotten hold of each of the new positions,

8265
00:04:16,149 --> 00:04:21,149
I can add to that plain text by tapping into the alphabet and then getting hold

8266
00:04:22,780 --> 00:04:27,400
of the letter at the new position. So now finally,

8267
00:04:27,400 --> 00:04:29,230
once that for loop's completed,

8268
00:04:29,470 --> 00:04:34,470
then I can print out the results and I'm going to use the same sort of output

8269
00:04:34,660 --> 00:04:37,150
structure as I've got in the example.

8270
00:04:37,780 --> 00:04:42,780
And we're going to replace that hardcoded text with the plain text that we've

8271
00:04:43,420 --> 00:04:45,280
decrypted. And finally,

8272
00:04:45,280 --> 00:04:49,420
I just have to turn this into an fstring so that it actually gets inserted.

8273
00:04:49,990 --> 00:04:54,130
Now, the last thing I have to do is the to-do number three.

8274
00:04:54,640 --> 00:04:58,300
So here we're actually gonna check the direction variable.

8275
00:04:58,930 --> 00:05:02,890
And we're going to see that if it's equal to encode, well

8276
00:05:02,890 --> 00:05:07,180
then we're going to call that encrypt method that we had previously,

8277
00:05:07,570 --> 00:05:11,410
so indented inside the if statement. But else

8278
00:05:11,440 --> 00:05:16,180
if the direction was actually equal to decode, well

8279
00:05:16,180 --> 00:05:20,740
in this case, we're going to call our newly created decrypt function.

8280
00:05:21,280 --> 00:05:26,280
And we're going to pass in the cipher text as the text and the shift amount is

8281
00:05:27,970 --> 00:05:31,360
going to be equal to the shift. So once again,

8282
00:05:31,480 --> 00:05:34,390
these arguments come from up here

8283
00:05:34,450 --> 00:05:37,180
when we ask the user to input those values.

8284
00:05:37,780 --> 00:05:41,890
And now it should go over to the decrypt function and do everything that's

8285
00:05:41,890 --> 00:05:43,630
inside to decrypt the text.

8286
00:05:44,110 --> 00:05:47,980
So now let's give our program a run and just make sure that it works as

8287
00:05:47,980 --> 00:05:52,240
expected. So I'm going to encode our message hello,

8288
00:05:53,020 --> 00:05:56,530
shift it by five, and then I'm going to run it again.

8289
00:05:56,930 --> 00:05:59,540
And I'm going to try and decode this message now.

8290
00:06:00,950 --> 00:06:05,450
So I'm going to type decode and I'm going to paste in that message we had before

8291
00:06:06,140 --> 00:06:08,600
and type the same shift number

8292
00:06:09,020 --> 00:06:11,810
and now we've got our text decoded.

8293
00:06:12,590 --> 00:06:16,310
So that's how you solve step 2 of our project.

8294
00:06:16,970 --> 00:06:20,690
Have a review of the code here and once you're ready,

8295
00:06:20,810 --> 00:06:25,040
head over to the next lesson and we're going to cover part 3 of the Caeser

8296
00:06:25,040 --> 00:06:29,060
cipher. So for all of that, and more, I'll see you on the next lesson.

8297
00:00:00,360 --> 00:00:04,440
All right. So now that we can encrypt and decrypt our messages, well,

8298
00:00:04,440 --> 00:00:08,010
you might be asking, well, what else is there? We've completed the project,

8299
00:00:08,010 --> 00:00:11,670
right? Well, let's think about how we can improve our code.

8300
00:00:12,300 --> 00:00:17,070
Because if you take a look at the encrypt and decrypt functions,

8301
00:00:17,460 --> 00:00:21,510
you'll notice that a lot of the things that they're doing in it are very

8302
00:00:21,510 --> 00:00:25,620
similar, right? We've got some piece of empty string to begin with,

8303
00:00:25,890 --> 00:00:30,890
we loop through each of the letters in the text that we get passed over and we

8304
00:00:31,470 --> 00:00:35,040
get the position from the alphabet, get a new position,

8305
00:00:35,280 --> 00:00:38,550
and then add the new letter to that empty string.

8306
00:00:39,390 --> 00:00:44,390
Your challenge in this part of the Caesar cipher project is to combine the

8307
00:00:45,720 --> 00:00:50,720
encrypt and decrypt functions into a single function called Cesar.

8308
00:00:52,140 --> 00:00:56,310
And we're going to get rid of these if and elif statements,

8309
00:00:56,700 --> 00:01:01,170
and we're going to get rid of two functions that are overlapping.

8310
00:01:01,230 --> 00:01:05,790
And instead, we're just going to have a single function and we're going to call

8311
00:01:05,790 --> 00:01:10,350
it just once passing over text, shift, and direction.

8312
00:01:10,800 --> 00:01:15,690
So it's going to have three inputs and it's going to save us a lot of repetition

8313
00:01:15,720 --> 00:01:16,553
in our code.

8314
00:01:17,130 --> 00:01:22,130
Have a think about what you learned about functions with inputs and see if you

8315
00:01:22,170 --> 00:01:26,040
can complete this challenge. So pause the video now and give it a go.

8316
00:01:29,720 --> 00:01:30,553
Okay.

8317
00:01:31,130 --> 00:01:31,430
All right.

8318
00:01:31,430 --> 00:01:36,350
So, let's first create a new function and we're going to call it caesar.

8319
00:01:37,520 --> 00:01:40,970
This function is going to take three inputs this time.

8320
00:01:41,300 --> 00:01:45,080
Not only is it going to get the text, the shift,

8321
00:01:45,290 --> 00:01:47,180
but it's also going to get the direction.

8322
00:01:47,930 --> 00:01:52,930
So I'm going to call the first parameter start_text because we could be passed

8323
00:01:53,240 --> 00:01:58,070
the plain text or the cipher text. So let's just set it as the start text.

8324
00:01:58,610 --> 00:02:00,260
The next one I'm going to call the same

8325
00:02:00,260 --> 00:02:03,620
so I'm going to call it shift_amount. And then the last one

8326
00:02:03,620 --> 00:02:08,389
which is the direction, in order to differentiate it from this direction,

8327
00:02:08,720 --> 00:02:10,280
I'm going to make it a little bit longer.

8328
00:02:10,430 --> 00:02:12,950
So I'm going to call it the cipher_direction.

8329
00:02:14,360 --> 00:02:16,640
And now after a colon,

8330
00:02:16,700 --> 00:02:21,700
we're done with defining our function and we can start figuring out how we can

8331
00:02:21,800 --> 00:02:25,580
combine these two functions together. We know in both of them,

8332
00:02:25,580 --> 00:02:29,270
we need some sort of way of storing a piece of text

8333
00:02:29,570 --> 00:02:31,070
which starts out as empty

8334
00:02:31,340 --> 00:02:35,720
and then it ends up being the entire encrypted or decrypted text.

8335
00:02:36,260 --> 00:02:41,260
Let's create a new variable called end_text to contrast with a start_text.

8336
00:02:42,680 --> 00:02:45,110
And we started out as a empty string.

8337
00:02:45,890 --> 00:02:48,500
Now, the next thing we have to do is identical.

8338
00:02:48,500 --> 00:02:51,950
We have to loop through this text that we get passed over.

8339
00:02:52,310 --> 00:02:57,310
So let's create a for loop; for each letter in the start_text,

8340
00:02:57,530 --> 00:03:00,640
we're going to do something with each those letters. Namely,

8341
00:03:00,640 --> 00:03:04,090
we're going to get hold of the position of the letter in the alphabet.

8342
00:03:05,230 --> 00:03:09,820
So this line of code is actually identical across the two functions; position

8343
00:03:09,820 --> 00:03:14,820
equals alphabet using the index function to get hold of the index of the letter

8344
00:03:16,870 --> 00:03:18,430
that we're currently looping through.

8345
00:03:19,330 --> 00:03:23,920
The next part is a little bit tricky because on one hand when we're encrypting text,

8346
00:03:24,250 --> 00:03:28,480
we're shifting that position upwards by adding the shift amount.

8347
00:03:29,020 --> 00:03:31,420
But on the other hand, when we're decrypting,

8348
00:03:31,690 --> 00:03:34,510
we're subtracting the shift amount from the position.

8349
00:03:35,440 --> 00:03:39,700
So one way of doing this is, of course, by using an if statement. So you could

8350
00:03:39,700 --> 00:03:44,700
check if the cipher_direction was equal to encode. Well then in this case,

8351
00:03:47,440 --> 00:03:52,440
the new position is going to be equal to position plus the shift_amount.

8352
00:03:54,220 --> 00:03:56,170
And then you could do the else statement.

8353
00:03:56,710 --> 00:04:00,250
But there's actually an even easier way of doing this.

8354
00:04:00,670 --> 00:04:05,620
We can just check for if the cipher direction was decode.

8355
00:04:06,370 --> 00:04:11,370
And in this case, we take the shift amount and we multiply it by minus one.

8356
00:04:14,530 --> 00:04:17,800
So remember this line of code is exactly the same as

8357
00:04:18,089 --> 00:04:21,870
this, but it's just way more succinct.

8358
00:04:22,560 --> 00:04:24,690
And now outside the if statement,

8359
00:04:24,840 --> 00:04:29,840
we can define our new position and set it to equal the previous position plus

8360
00:04:32,280 --> 00:04:33,810
the shift amount.

8361
00:04:34,710 --> 00:04:39,710
And the reason why this works is because let's say that we had a shift amount of

8362
00:04:40,530 --> 00:04:45,530
five and we wanted to encode our text, well the new position is obviously going

8363
00:04:46,920 --> 00:04:50,460
to be previous position plus five. Now on the other hand,

8364
00:04:50,460 --> 00:04:52,710
if we were decoding, well this

8365
00:04:52,710 --> 00:04:57,710
if statement is going to trip and our five multiplied by minus one becomes minus

8366
00:05:00,720 --> 00:05:05,370
five. So now when we add -5 to

8367
00:05:05,370 --> 00:05:06,510
the previous position,

8368
00:05:06,630 --> 00:05:10,920
so let's say the previous position was 12 plus -5,

8369
00:05:11,250 --> 00:05:16,170
then a quick check with a calculator should get you a 7.

8370
00:05:16,830 --> 00:05:19,860
It's exactly the same as subtraction.

8371
00:05:20,850 --> 00:05:22,920
So now that we've gotten over that hurdle,

8372
00:05:23,640 --> 00:05:28,640
all we have to do is to tap into our end_text and to add to it by getting hold

8373
00:05:30,210 --> 00:05:33,300
of the letter at the new position

8374
00:05:34,800 --> 00:05:38,940
in the alphabet. And finally, once all of that's done,

8375
00:05:38,970 --> 00:05:41,700
we of course need to print the results.

8376
00:05:42,480 --> 00:05:47,480
Notice how previously we said the encoded text is and the decoded text is,

8377
00:05:48,780 --> 00:05:52,740
well, let's copy this string and paste it in here.

8378
00:05:53,190 --> 00:05:57,800
How can we change this part to be dynamic,

8379
00:05:57,950 --> 00:05:59,960
so depending on the cipher direction,

8380
00:06:00,530 --> 00:06:04,790
and then this part is easy because we can just replace it with the end_

8381
00:06:04,790 --> 00:06:05,623
text.

8382
00:06:06,110 --> 00:06:10,370
So one way is, remember that when the user is typing in the direction,

8383
00:06:10,670 --> 00:06:15,670
they're typing in either encode or decode. So we can delete everything other than

8384
00:06:15,770 --> 00:06:20,770
that 'd' and then dynamically insert the cipher direction that we get passed.

8385
00:06:25,130 --> 00:06:27,620
And now if we make that an fstring,

8386
00:06:27,920 --> 00:06:32,920
it should be able to insert encoded text is whatever the end text is, or 

8387
00:06:35,870 --> 00:06:36,590
decoded

8388
00:06:36,590 --> 00:06:41,590
text is whatever it may be. Now we can go ahead and delete both of these

8389
00:06:42,320 --> 00:06:43,153
functions

8390
00:06:43,640 --> 00:06:48,640
and also this if statement and we can tackle to-do number two

8391
00:06:50,570 --> 00:06:53,930
and we can simply just call the Caesar function

8392
00:06:54,410 --> 00:06:59,180
passing over the start_text as the text the user inputted,

8393
00:06:59,510 --> 00:07:03,440
the shift_amount as the shift that they inputted,

8394
00:07:03,770 --> 00:07:08,770
and finally, the cypher direction as the direction that they inputted.

8395
00:07:09,740 --> 00:07:12,350
Now, we've cut down our code by a lot

8396
00:07:12,530 --> 00:07:17,180
and we've gotten rid of all the repeated bits of code and we've used what we've

8397
00:07:17,180 --> 00:07:22,180
learned about functions with inputs to vastly simplify our code.

8398
00:07:23,360 --> 00:07:26,780
We're getting the same function to do repeated actions,

8399
00:07:27,080 --> 00:07:30,110
but depending on the different inputs,

8400
00:07:30,650 --> 00:07:33,230
it does something completely different.

8401
00:07:34,040 --> 00:07:38,390
So now let's give our code a run and let's just make sure that everything works.

8402
00:07:38,930 --> 00:07:39,800
Encoding.

8403
00:07:43,420 --> 00:07:44,253
Okay.

8404
00:07:45,820 --> 00:07:47,110
And decoding.

8405
00:07:48,910 --> 00:07:53,910
So there's a bit of an issue there because when we get our decoded result back,

8406
00:07:54,280 --> 00:07:58,930
it says holvo instead of hello. So what's going on here?

8407
00:07:59,860 --> 00:08:04,030
Well, in my code that I wrote for the Caesar function,

8408
00:08:04,390 --> 00:08:09,130
I've accidentally introduced a bug. And as programmers,

8409
00:08:09,190 --> 00:08:13,600
none of us are free from this fault. We create bugs, but then we fix them.

8410
00:08:14,350 --> 00:08:17,110
So why don't you use this as a good debugging opportunity?

8411
00:08:17,680 --> 00:08:19,210
If you've been typing along with me,

8412
00:08:19,510 --> 00:08:24,340
I want you to take a look at the code or take a look at the screen and see if

8413
00:08:24,340 --> 00:08:29,080
you can figure out what is causing this aberrant decoded result.

8414
00:08:29,560 --> 00:08:32,409
Why are we getting holvo back instead of hello?

8415
00:08:33,250 --> 00:08:37,900
Where is the problem in our logic in our code?

8416
00:08:38,409 --> 00:08:43,090
See if you can solve this and fix the code so that we get back the decoded

8417
00:08:43,090 --> 00:08:46,960
results of hello. Pause the video and give that a go.

8418
00:08:50,560 --> 00:08:51,310
All right.

8419
00:08:51,310 --> 00:08:52,570
So this bug,

8420
00:08:52,900 --> 00:08:57,120
if we think about the logic, is caused because our

8421
00:08:57,180 --> 00:09:02,180
if statement where we check the cipher_direction and change the shift_amount

8422
00:09:02,430 --> 00:09:04,320
by multiplying it by minus one,

8423
00:09:04,920 --> 00:09:08,130
this line of code lives inside the for loop.

8424
00:09:08,790 --> 00:09:13,470
And we know about for loops that it's going to keep going again and again.

8425
00:09:14,070 --> 00:09:18,420
So for every letter in the start_text of which there are five,

8426
00:09:19,080 --> 00:09:23,940
every single time, this code is going to get executed and the cipher direction

8427
00:09:23,940 --> 00:09:28,620
is always decode so we keep multiplying that shift amount by minus one.

8428
00:09:29,250 --> 00:09:31,890
So the first one becomes decode,

8429
00:09:31,950 --> 00:09:36,000
the next one becomes encode, decode, encode, decode.

8430
00:09:36,270 --> 00:09:39,960
And that's why we're getting some parts of our hello back, but the 'o'

8431
00:09:39,990 --> 00:09:43,440
and the 'v' are the parts that are not right.

8432
00:09:44,190 --> 00:09:48,240
So in order to fix this, all we have to do is take our

8433
00:09:48,270 --> 00:09:53,010
if statement out of the for loop, put it before

8434
00:09:53,250 --> 00:09:54,780
the for loop right here.

8435
00:09:55,380 --> 00:10:00,120
And now if we run this again and we try to decode the same message,

8436
00:10:00,150 --> 00:10:04,230
so that was mjqqt, and we use the same shift number,

8437
00:10:04,770 --> 00:10:09,150
but now we get back the correct decoded results. Brilliant.

8438
00:10:09,300 --> 00:10:11,910
So did you manage to get that right? Don't worry

8439
00:10:11,910 --> 00:10:15,750
if you use a slightly different way of coding this logic up.

8440
00:10:16,110 --> 00:10:17,340
It really doesn't matter

8441
00:10:17,340 --> 00:10:21,990
as long as you managed to get it to work in the end and combine the two functions

8442
00:10:21,990 --> 00:10:25,890
into one. Once you're happy with step three,

8443
00:10:26,220 --> 00:10:29,400
head over to the next lesson and we'll tackle the final part

8444
00:10:29,400 --> 00:10:31,500
part four of the Caesar cipher

8445
00:10:31,690 --> 00:10:35,460
where we complete our project. For all of that, and more,

8446
00:10:35,550 --> 00:10:36,600
I'll see you on the next lesson.

8447
00:00:00,300 --> 00:00:06,689
All right, we're about to cross the finish line. We're onto the last part of our Caesar cipher

8448
00:00:06,720 --> 00:00:10,630
and we're going to complete it in this lesson. First

8449
00:00:10,950 --> 00:00:16,440
go ahead and fork your own copy of part four of the Caesar cipher starting code.

8450
00:00:16,840 --> 00:00:20,670
And notice, firstly, we've got an extra file here called art.

8451
00:00:21,090 --> 00:00:26,370
And this, if you expand it fully, you should see an ASCII art of our logo.

8452
00:00:27,880 --> 00:00:33,880
Now, what we want to be able to do in this lesson is just to tidy up some of the loose ends, improve

8453
00:00:33,880 --> 00:00:40,260
the user experience and fix some of the bugs that you may or may not be aware of. To-do

8454
00:00:40,270 --> 00:00:47,710
#1 tells us to import and print the logo from art.py and this is going to show up when we first

8455
00:00:47,710 --> 00:00:49,690
load up our program like this.

8456
00:00:51,210 --> 00:00:57,720
Next, we're going to tackle this one. One of the things we haven't really thought about is if the

8457
00:00:57,720 --> 00:01:04,830
user enters a shift number that's actually really, really large like 100, then we're actually going

8458
00:01:04,830 --> 00:01:06,750
to run out of letters in our alphabet.

8459
00:01:07,140 --> 00:01:10,320
And so we're going to use what you've learnt before

8460
00:01:10,500 --> 00:01:16,810
and it might take a little bit of thinking around this to fix this particular bug right here.

8461
00:01:17,670 --> 00:01:24,870
And once you've done that, then we move on to over here and we think about what to do if the user wanted

8462
00:01:24,870 --> 00:01:28,340
to type a number, a symbol or a space.

8463
00:01:28,680 --> 00:01:32,880
So we want to preserve the symbols, space, or number that they typed in

8464
00:01:33,240 --> 00:01:39,440
and we're only going to use our cipher on the rest of the message,

8465
00:01:39,480 --> 00:01:44,040
so only the alphabetical letters. And everything else we're going to leave the same.

8466
00:01:44,160 --> 00:01:51,450
So, for example, if we had the text meet me at 3, then the end_text will keep the spaces where

8467
00:01:51,450 --> 00:01:54,480
they were, keep the numbers where they were.

8468
00:01:54,630 --> 00:01:59,670
And also if there were any symbols, we would also keep that in our final end_text.

8469
00:02:00,030 --> 00:02:02,840
And it's only the letters which will get scrambled.

8470
00:02:03,990 --> 00:02:10,680
And then finally, to-do #4, we're going to figure out how to ask the user if they want to

8471
00:02:10,680 --> 00:02:12,360
restart the cipher program.

8472
00:02:12,900 --> 00:02:19,530
So notice how in the final version, when we run this once, we can actually type yes

8473
00:02:19,740 --> 00:02:20,550
to go again.

8474
00:02:21,030 --> 00:02:27,270
This way we can keep encoding and decoding as much as we want until we're actually done when we can

8475
00:02:27,270 --> 00:02:28,050
type no

8476
00:02:28,290 --> 00:02:29,400
and it says goodbye

8477
00:02:29,430 --> 00:02:31,320
and that's the end of the code.

8478
00:02:32,040 --> 00:02:37,740
What we want to be able to do is instead of having to run our code again and again, we're going to

8479
00:02:37,740 --> 00:02:42,690
figure out a way of getting our code to be rerun

8480
00:02:43,140 --> 00:02:51,990
if the user typed yes to this question. And if they typed no, then and only then do we actually end

8481
00:02:51,990 --> 00:02:52,740
the program.

8482
00:02:53,610 --> 00:02:58,440
It might take a little bit of thinking to figure out how to solve all of these to-dos.

8483
00:02:58,890 --> 00:03:04,380
But once you're ready, if you're up for the challenge, then pause the video now and give it a go.

8484
00:03:07,050 --> 00:03:12,390
All right, so let's tackle them one by one. The first one you've already done before.

8485
00:03:12,480 --> 00:03:15,930
All it needs is to import the art file.

8486
00:03:16,410 --> 00:03:25,380
And if we want to be able to use the logo variable inside the art file, this one, then we can also

8487
00:03:25,380 --> 00:03:30,900
simply just write from art import logo.

8488
00:03:32,310 --> 00:03:35,720
So now we can print this logo right here.

8489
00:03:37,880 --> 00:03:46,040
So that's to-do #1 completed, now let's do the next one. This one requires us to figure out some

8490
00:03:46,040 --> 00:03:53,150
sort of clever solution so that when a user enters a shift that's greater than the number of letters

8491
00:03:53,480 --> 00:03:54,530
in the alphabet

8492
00:03:55,500 --> 00:04:01,620
over here, we have some sort of way of getting it back within the range of 0 to 25.

8493
00:04:02,590 --> 00:04:09,940
And I want you to see what happens when I type a message and I put a shift that's really large. You

8494
00:04:09,940 --> 00:04:17,519
can see we get an index out of range error because there is no letter at position 77 from the alphabet.

8495
00:04:17,920 --> 00:04:23,110
So that's why this line 14 over here actually breaks down.

8496
00:04:24,730 --> 00:04:31,000
If you have trouble with this, I gave you a hint where I wanted you to think about how you can use

8497
00:04:31,000 --> 00:04:31,840
the modulus.

8498
00:04:32,410 --> 00:04:42,130
So if we take 45 and we use the modulus operator to divide 45 by 26, which is the total number of letters

8499
00:04:42,130 --> 00:04:46,000
in the alphabet, then we should end up with the remainder.

8500
00:04:46,690 --> 00:04:53,110
Now, if you imagine we're dividing 45 by 26, then 26 goes into 45 once,

8501
00:04:53,350 --> 00:04:57,910
so we will get one, but we will have a remainder of 19.

8502
00:04:58,510 --> 00:05:00,990
So this is what we get from the modulus.

8503
00:05:01,030 --> 00:05:05,080
We would get the result to be 19, which is just the remainder.

8504
00:05:05,680 --> 00:05:13,030
And effectively, what this code does is it's going to divide a number by 26 as many times as needed

8505
00:05:13,330 --> 00:05:19,690
until we get to the final point where it can no longer be divided fully and we end up with a remainder.

8506
00:05:20,020 --> 00:05:27,470
And that remainder allows us to shift the shift number that's entered into something that fits in with

8507
00:05:27,470 --> 00:05:30,850
the number of letters of the alphabet that we have in here.

8508
00:05:31,060 --> 00:05:37,630
So then our code that we would have here is to modify the shift by taking the shift that the user entered

8509
00:05:37,630 --> 00:05:45,700
up here and then using the modulus to divide it by 26 as many times as needed until we get the remainder.

8510
00:05:45,940 --> 00:05:53,050
So now if we test this out, you can see that no matter how long my shift number is, let's try 87, we're

8511
00:05:53,050 --> 00:05:59,880
always going to get a result back because it's shifting that number down to fit within our alphabet.

8512
00:06:00,280 --> 00:06:03,110
And once you're done, let's move on to to-do #3.

8513
00:06:03,820 --> 00:06:11,800
So here we want to be able to allow any number, symbol or space, basically anything that's not within

8514
00:06:11,800 --> 00:06:16,410
the alphabet to go through and end up in the end_text.

8515
00:06:16,900 --> 00:06:23,500
But if it is one of the letters inside this list alphabet, then and only then do we actually want to

8516
00:06:23,500 --> 00:06:25,750
do the shifting and encoding.

8517
00:06:26,620 --> 00:06:33,210
In order to achieve this, we should probably use an if statement to say if the char...

8518
00:06:33,970 --> 00:06:40,060
So notice how I've changed the for loop to instead of writing for letter in start_text which kind

8519
00:06:40,060 --> 00:06:46,270
of assumes that everything in the start_text is a letter, to char which stands for character instead

8520
00:06:46,600 --> 00:06:51,460
because a character could be a number, could be a symbol, could be a letter, could be space.

8521
00:06:52,060 --> 00:07:00,100
And then once we get hold of the char or the character, we're going to check to see if the char is

8522
00:07:00,100 --> 00:07:01,960
in the alphabet.

8523
00:07:03,220 --> 00:07:11,200
So if it is indeed one of these letters and not some other random character, well then and only then

8524
00:07:11,200 --> 00:07:15,430
do we actually want this code to be executed.

8525
00:07:16,860 --> 00:07:24,840
So let me just make sure all the indentation is correct. And if it's not inside the alphabet, so else,

8526
00:07:25,260 --> 00:07:33,120
well then, in this case, we actually want to make the end_text append the actual character,

8527
00:07:33,150 --> 00:07:35,370
so without any modification.

8528
00:07:36,570 --> 00:07:43,860
Now, if we test this code by running it, so let's go ahead and encode. And I'm going to encode something

8529
00:07:43,860 --> 00:07:51,120
like Hello123%^ 321.

8530
00:07:51,450 --> 00:08:01,260
And now when I hit enter and I give it a shift, then you can see that the encoded result has all the

8531
00:08:01,260 --> 00:08:07,020
letters, all the things are in that list, the alphabet encoded.

8532
00:08:07,530 --> 00:08:14,010
But everything else, the numbers and the symbols are all left as they are, because more often than

8533
00:08:14,010 --> 00:08:19,440
not, your user might want to write a message like meet me at five or something, something exclamation

8534
00:08:19,440 --> 00:08:19,850
mark.

8535
00:08:20,130 --> 00:08:23,910
And this is just a very simple way of making it work.

8536
00:08:24,600 --> 00:08:27,870
Now, of course, there's a lot of other ways that you could have solved this.

8537
00:08:28,320 --> 00:08:34,710
So you could have, in fact, added a whole bunch of symbols and numbers and space and other characters

8538
00:08:35,070 --> 00:08:36,510
to this list

8539
00:08:36,659 --> 00:08:43,440
And instead of calling it alphabet, it could have been the characters list and then you could have

8540
00:08:43,440 --> 00:08:44,910
encoded all of that.

8541
00:08:45,360 --> 00:08:51,600
But that's actually not what the toO-do asks for. It wants us to let through the numbers, symbols, space

8542
00:08:51,900 --> 00:08:54,540
and only encode the letters.

8543
00:08:56,350 --> 00:09:02,770
So now all we have left is the last to-do, and this is probably going to be the most difficult one out

8544
00:09:02,770 --> 00:09:11,800
of the lot. What we want to do here is we want to be able to ask the user whether if they want to go

8545
00:09:11,800 --> 00:09:20,320
again, so whether if they want to encode or decode another message. And what happens in the final version,

8546
00:09:20,320 --> 00:09:25,870
the completed version of the app, is if we encode a message

8547
00:09:27,000 --> 00:09:34,020
and we get the result back, it doesn't just end, it doesn't exit because otherwise you would see that

8548
00:09:34,020 --> 00:09:35,870
message down here run again.

8549
00:09:36,330 --> 00:09:41,810
Instead it continues and it asks us, well, do you want to go again? So we could write

8550
00:09:41,820 --> 00:09:42,320
yes.

8551
00:09:42,750 --> 00:09:46,050
And it lets us again encode or decode a message.

8552
00:09:47,190 --> 00:09:53,910
We can basically go on and on and on and repeating this program until we want to exit.

8553
00:09:54,570 --> 00:10:01,890
And it's at that point when we can no longer type anything into our program and our code ends and we'd

8554
00:10:01,890 --> 00:10:04,820
have to run the whole thing again in order to use it again.

8555
00:10:06,370 --> 00:10:14,350
So at the moment, the part of our code that actually needs to be repeated if the user wanted to restart

8556
00:10:14,350 --> 00:10:16,850
it is actually just this part.

8557
00:10:17,290 --> 00:10:21,070
So the first thing I'm going to do is I'm actually going to shrink it down a bit.

8558
00:10:21,370 --> 00:10:28,390
And now all we're left with is 1, 2, 3, 4, 5 lines of code which needs repeat if

8559
00:10:28,390 --> 00:10:31,670
we're going to get the user to reuse the Caesar cipher.

8560
00:10:32,350 --> 00:10:37,260
What if we go ahead and indent this and put it inside a while loop?

8561
00:10:37,780 --> 00:10:40,990
What are we going to check to make sure that our loop continues?

8562
00:10:41,500 --> 00:10:48,440
Well, we could create a flag called should_continue and we start this out to be true.

8563
00:10:49,060 --> 00:10:56,320
And then while this is still true, we continue to keep looping through this so that the user gets to

8564
00:10:56,530 --> 00:11:02,180
input a new direction, new text, new shift and call the Caesar cipher on that again.

8565
00:11:02,980 --> 00:11:04,970
When should we stop it though?

8566
00:11:04,990 --> 00:11:12,340
Well, if at the end of deciphering or encoding their message, we ask them a question, something like

8567
00:11:12,340 --> 00:11:12,670
type

8568
00:11:12,670 --> 00:11:13,060
yes

8569
00:11:13,060 --> 00:11:15,580
if you want to go again or type no

8570
00:11:15,580 --> 00:11:19,810
if you don't want to, we could put that inside an input.

8571
00:11:20,900 --> 00:11:28,580
Like so. And we can save their answer inside a variable. Let's just call that result. So now we can

8572
00:11:28,580 --> 00:11:30,040
use an if statement to check

8573
00:11:30,050 --> 00:11:33,500
well, if the results is equal to no,

8574
00:11:33,890 --> 00:11:39,830
so when they actually want to stop and they want to exit the while loop, well, at this point we can

8575
00:11:39,830 --> 00:11:40,430
switch

8576
00:11:40,430 --> 00:11:42,730
that should_continue to false.

8577
00:11:43,220 --> 00:11:48,740
And once that's done, then this means that this while loop, when it checks it, this is going to be

8578
00:11:48,740 --> 00:11:51,710
false and it will no longer continue.

8579
00:11:52,280 --> 00:11:56,900
Just as a final touch, we can even tell the user goodbye

8580
00:11:58,330 --> 00:12:00,550
so that they know that the program has ended.

8581
00:12:01,270 --> 00:12:05,980
Now let's go ahead and run our code and see if it works.

8582
00:12:07,840 --> 00:12:15,250
All right, so let's first encode something. And now I can type yes to go again, and you can see it's

8583
00:12:15,250 --> 00:12:17,470
allowing me to type encode or decode.

8584
00:12:17,770 --> 00:12:19,540
So let's encode something else.

8585
00:12:22,740 --> 00:12:28,050
Now, finally, if I decided I've had enough, I'm done with encoding and decoding, I'm going to type

8586
00:12:28,050 --> 00:12:28,550
no.

8587
00:12:28,560 --> 00:12:34,620
It tells me goodbye and I can now see my prompt, which means it's actually exited out of the program

8588
00:12:34,620 --> 00:12:37,830
and I would need to run it again in order to restart it.

8589
00:12:38,520 --> 00:12:39,720
Did you manage to get that right?

8590
00:12:40,560 --> 00:12:47,220
If you want to take a look at the completed code, then you can head over to caesar-cipher-4-end and

8591
00:12:47,220 --> 00:12:49,640
you will find the same code as I've got here.

8592
00:12:50,130 --> 00:12:56,020
And of course, feel free to play around with the code, modify it and make this program your own.

8593
00:12:56,040 --> 00:13:01,890
So if you wanted to add some extra features, if you wanted to make sure that the numbers and symbols

8594
00:13:01,890 --> 00:13:06,870
are all being encrypted and any sort of bells and whistles and anything else that you can think of,

8595
00:13:07,200 --> 00:13:08,820
this is the time to do it now.

8596
00:13:09,360 --> 00:13:15,360
But once you're done, be sure to get some rest, because tomorrow is yet another packed session where

8597
00:13:15,360 --> 00:13:18,540
we're going to talk more about Python dictionaries.

8598
00:13:18,900 --> 00:13:23,180
For all of that and more, I bid you good night and I'll see you tomorrow.


8599
00:00:00,570 --> 00:00:04,950
Hey, welcome back. It's Day 9 of 100 Days of Code.

8600
00:00:05,700 --> 00:00:09,690
And today we're going to be learning more about Python dictionaries

8601
00:00:09,780 --> 00:00:12,900
and nesting. And by the end of today,

8602
00:00:13,140 --> 00:00:16,290
you will have built a silent auction program.

8603
00:00:17,130 --> 00:00:20,460
We all know that there are auctions where everybody bids and you can see

8604
00:00:20,460 --> 00:00:24,380
everybody else's bid and the auctioneer gets you to bid higher and higher

8605
00:00:24,380 --> 00:00:27,770
values. Now there's also a type of auction called

8606
00:00:27,800 --> 00:00:32,800
a silent auction where everybody bids silently and no one knows the other

8607
00:00:32,990 --> 00:00:37,990
person's bids until at the very end of the auction where the highest bid is

8608
00:00:38,510 --> 00:00:40,970
revealed. That's what we're going to be building.

8609
00:00:41,420 --> 00:00:43,610
And if you wanna check out the final program,

8610
00:00:43,640 --> 00:00:46,880
then you can go to blind-auction-completed

8611
00:00:47,180 --> 00:00:48,830
.appbrewery.repl.run.

8612
00:00:49,250 --> 00:00:53,480
And here you'll not only see this amazing gavel built out of ASCII,

8613
00:00:53,810 --> 00:00:57,380
but also the secret auction program. So here's how it works:

8614
00:00:57,740 --> 00:01:01,940
let's say that I'm going to be the first person logging onto the program.

8615
00:01:02,300 --> 00:01:05,360
I'm going to give my name and my bid. Let's say

8616
00:01:05,360 --> 00:01:08,840
I'm going to bid a $53 for this item.

8617
00:01:09,440 --> 00:01:12,350
And once I'm done with my bid, it asked me whether

8618
00:01:12,350 --> 00:01:13,790
if there are any other bidders.

8619
00:01:13,880 --> 00:01:18,880
So if I type a yes then the screen clears and I can handover the laptop to

8620
00:01:20,060 --> 00:01:24,770
the next person who's going to make their bid. So let's say there's James

8621
00:01:24,770 --> 00:01:28,280
who's going to bid, um, even less than I did.

8622
00:01:28,940 --> 00:01:33,940
And then he's gonna make way for the final bidder who is going to bid $121.

8623
00:01:35,840 --> 00:01:39,920
So now at this stage, if everybody is done, then we type no,

8624
00:01:40,550 --> 00:01:45,550
and it's going to now tally up all the bids and figure out who bid the highest

8625
00:01:45,980 --> 00:01:49,340
and give us a winner, printing out 'The winner is Jenny

8626
00:01:49,340 --> 00:01:54,020
with a bid of $121.' There's a number of places that you could use this

8627
00:01:54,290 --> 00:01:58,160
if you are auctioning some piece of art or if you're trying to outbid your

8628
00:01:58,160 --> 00:02:01,370
brothers and sisters on who gets to go on the trampoline,

8629
00:02:01,880 --> 00:02:05,060
or if you're trying to start an auction with your friends or coworkers.

8630
00:02:05,660 --> 00:02:10,039
The silent auction has many, many uses. All right, in today's lessons,

8631
00:02:10,039 --> 00:02:14,540
we're going to be focusing mostly on the Python dictionary. But in addition,

8632
00:02:14,540 --> 00:02:19,370
we're also going to look at how we can nest say lists inside lists or

8633
00:02:19,370 --> 00:02:23,720
dictionaries inside dictionaries and also mixing lists and dictionaries as well.

8634
00:02:24,440 --> 00:02:25,273
Once you're ready,

8635
00:02:25,280 --> 00:02:28,400
head over to the next lesson and let's get started with the day.

8636
00:00:00,700 --> 00:00:01,020
All right.

8637
00:00:01,020 --> 00:00:06,020
So the first thing I want to talk about is dictionaries in Python. Now,

8638
00:00:06,300 --> 00:00:11,300
dictionaries in Python work kind of similarly to dictionaries in real life,

8639
00:00:11,520 --> 00:00:15,350
right? So if you were to look up a word in the dictionary

8640
00:00:15,380 --> 00:00:20,380
say the word code, then you might find the definition as something along the

8641
00:00:20,690 --> 00:00:25,690
lines of program instructions for the computer. And dictionaries are really

8642
00:00:25,940 --> 00:00:30,940
useful because they allow us to group together and tag related pieces of

8643
00:00:31,280 --> 00:00:32,113
information.

8644
00:00:32,780 --> 00:00:37,040
The way I like to think about dictionaries is in the form of a table.

8645
00:00:37,610 --> 00:00:40,700
Every dictionary has two parts to it.

8646
00:00:41,210 --> 00:00:43,430
On the left hand side is the key,

8647
00:00:44,120 --> 00:00:47,090
and that is the equivalent of the word in the dictionary,

8648
00:00:47,840 --> 00:00:52,840
and then it's also got an associated value. That would be the equivalent

8649
00:00:53,120 --> 00:00:55,100
of the actual definition of the word.

8650
00:00:55,970 --> 00:01:00,970
Now let's say that we took this variation simple table of definitions of

8651
00:01:01,250 --> 00:01:03,380
programming words that we've come across so far

8652
00:01:03,920 --> 00:01:06,620
and we go ahead and we try to convert it right into a dictionary,

8653
00:01:06,920 --> 00:01:08,960
how would we do that? Let me firstly

8654
00:01:08,960 --> 00:01:12,710
drop the last two rows and let's just start with the first one.

8655
00:01:13,280 --> 00:01:18,280
The first thing we want to do is we want them to create a dictionary. And to do

8656
00:01:19,310 --> 00:01:22,010
that in Python, this is what the syntax looks like.

8657
00:01:22,520 --> 00:01:26,210
We have a set of curly braces and everything that's inside

8658
00:01:26,210 --> 00:01:29,240
the curly brace is the content of our dictionary.

8659
00:01:29,870 --> 00:01:34,870
The key goes first followed by a colon and then followed by the value. In our

8660
00:01:36,920 --> 00:01:41,000
table we've got this word bug, which is the first key,

8661
00:01:41,390 --> 00:01:46,100
so we can replace that over here in our dictionary. And the value that's 

8662
00:01:46,130 --> 00:01:49,550
associated with this key is the definition for a bug.

8663
00:01:49,550 --> 00:01:53,480
So an error in a program that prevents the program from running as expected,

8664
00:01:53,990 --> 00:01:58,460
that becomes the value and can be replaced here after the colon.

8665
00:01:58,970 --> 00:02:03,140
So now, we've created an actual dictionary using Python code.

8666
00:02:04,040 --> 00:02:08,090
What if you wanted to have more than one entry in your dictionary? Well,

8667
00:02:08,090 --> 00:02:12,410
you would separate each of the key value pairs using a comma,

8668
00:02:12,980 --> 00:02:17,980
and then you can continue adding key and value pairs until you get to the end of

8669
00:02:19,280 --> 00:02:21,830
your dictionary. All right,

8670
00:02:21,830 --> 00:02:24,380
let's take a look at dictionaries in action.

8671
00:02:24,890 --> 00:02:29,890
If you head over to the day nine start code file and go ahead and fork your own

8672
00:02:30,710 --> 00:02:35,150
copy to work alongside me, then you can see that in here

8673
00:02:35,180 --> 00:02:39,320
I've already added the dictionary that we were defining earlier on,

8674
00:02:39,740 --> 00:02:44,270
and I've stored it inside of a variable called programming dictionary. Now,

8675
00:02:44,300 --> 00:02:47,060
currently I've only got two entries in this dictionary,

8676
00:02:47,510 --> 00:02:51,830
the definition for a bug and the definition for function. Now,

8677
00:02:51,830 --> 00:02:55,730
the first thing I want to highlight is when you create a dictionary that has

8678
00:02:55,730 --> 00:02:58,610
more than one element such as in this case,

8679
00:02:59,110 --> 00:03:03,310
then you want to take care to format it properly so that it's more easily

8680
00:03:03,310 --> 00:03:04,143
readable.

8681
00:03:04,510 --> 00:03:09,250
So what you'll see Python programmers do by convention is they will start off

8682
00:03:09,280 --> 00:03:12,010
the dictionary with the open curly brace at the top

8683
00:03:12,580 --> 00:03:17,580
and then every subsequent entry is indented by one indent.

8684
00:03:18,550 --> 00:03:22,270
And then at the very end of that entry, there's a comma

8685
00:03:22,660 --> 00:03:27,250
and then we hit enter so that the next item goes onto the next line

8686
00:03:27,700 --> 00:03:28,960
and finally,

8687
00:03:28,990 --> 00:03:33,990
the last curly brace should go at the very beginning in line with the start of

8688
00:03:34,720 --> 00:03:35,553
the dictionary.

8689
00:03:36,280 --> 00:03:41,020
And another thing that's quite nice to do is to cap off all entries in your

8690
00:03:41,020 --> 00:03:43,570
dictionary or list with a comma.

8691
00:03:44,080 --> 00:03:47,500
This means that if you needed to add more items into the dictionary

8692
00:03:47,770 --> 00:03:51,610
you can simply just hit enter and continue typing the next thing.

8693
00:03:52,210 --> 00:03:54,160
And if we wanted to add another entry,

8694
00:03:54,160 --> 00:03:59,160
it's a simple as adding in the key, a colon and then the value and to cap it

8695
00:04:00,340 --> 00:04:02,530
off again with a comma.

8696
00:04:03,250 --> 00:04:08,250
So now our dictionary represents exactly the same data as we saw in our table

8697
00:04:09,760 --> 00:04:14,760
over here with a bunch of key value pairs and a total of three entries.

8698
00:04:16,570 --> 00:04:16,839
Now,

8699
00:04:16,839 --> 00:04:21,839
the next thing I want to do is what if I wanted to retrieve an item from the

8700
00:04:21,970 --> 00:04:25,150
dictionary, because we know that if we had a list

8701
00:04:25,210 --> 00:04:28,330
what we would do is we would use a set of square brackets

8702
00:04:28,660 --> 00:04:32,260
and then we would give the index of the item that we wanted.

8703
00:04:32,620 --> 00:04:37,620
So the item at index zero or one or two and so on and so forth. Now for

8704
00:04:38,290 --> 00:04:41,590
dictionaries, it's kind of similar in terms of syntax

8705
00:04:41,890 --> 00:04:46,890
but the only difference is that dictionaries have elements which are identified

8706
00:04:47,230 --> 00:04:51,700
by their key. If we wanted this piece of information, for example,

8707
00:04:52,030 --> 00:04:57,030
then all we have to do is tap into the dictionary and then add a set of square

8708
00:04:57,700 --> 00:05:02,410
brackets and inside the square brackets, we're going to provide the key.

8709
00:05:02,890 --> 00:05:07,390
So here the key is a string and it's the string bug.

8710
00:05:07,840 --> 00:05:09,910
So let's go ahead and put bug in here.

8711
00:05:10,960 --> 00:05:14,440
And now if I go ahead and print this,

8712
00:05:14,500 --> 00:05:17,500
then you can see that it is going to give me the value,

8713
00:05:17,530 --> 00:05:21,160
which is 'An error in a program that prevents the program from running as

8714
00:05:21,160 --> 00:05:24,190
expected.' Now it's really,

8715
00:05:24,190 --> 00:05:29,190
really important that you make sure that when you're fetching something out of a

8716
00:05:29,470 --> 00:05:33,820
dictionary by it's key that you actually spell the key correctly.

8717
00:05:34,570 --> 00:05:35,260
A really

8718
00:05:35,260 --> 00:05:39,340
really common error is when you're trying to retrieve something out of a

8719
00:05:39,340 --> 00:05:43,480
dictionary and you've just made a very simple typo. So instead of 'u'

8720
00:05:43,480 --> 00:05:45,760
I'm typing 'o' here and you'll see

8721
00:05:45,760 --> 00:05:50,760
we get an error. And the error tells us that it's a key error referring to this

8722
00:05:51,400 --> 00:05:56,400
particular key and it highlights this line 7 where we're trying to retrieve

8723
00:05:56,620 --> 00:05:59,210
something out of this dictionary by this key.

8724
00:05:59,660 --> 00:06:03,680
Basically it's telling you that this key doesn't actually exist and it can't be

8725
00:06:03,680 --> 00:06:08,030
found. So it doesn't know what it is that you want. Remember how

8726
00:06:08,030 --> 00:06:13,030
when we had lists and when we try to retrieve something that was not inside the

8727
00:06:13,490 --> 00:06:17,870
list. So for example, this particular list at index 4

8728
00:06:17,870 --> 00:06:21,560
doesn't actually exist because this is zero one, two, three,

8729
00:06:21,980 --> 00:06:25,310
and four is actually not a piece of data inside of this list.

8730
00:06:25,910 --> 00:06:30,590
Similarly with dictionaries, if we try to put in a key that doesn't exist,

8731
00:06:30,650 --> 00:06:32,420
then we get this key error.

8732
00:06:33,740 --> 00:06:38,740
Now another common pitfall that students fall down into is they don't actually

8733
00:06:40,370 --> 00:06:43,880
use the correct data type. So for example,

8734
00:06:44,030 --> 00:06:49,030
if we defined this dictionary without putting a string around each of these

8735
00:06:51,110 --> 00:06:55,640
keys, then it's going to error out and it won't even let us run.

8736
00:06:55,760 --> 00:06:59,540
It's going to tell us undefined named bug because it thinks that this is a

8737
00:06:59,540 --> 00:07:01,460
variable that you've declared somewhere,

8738
00:07:01,640 --> 00:07:06,440
but it's not. In fact, what you wanted are these strings for keys.

8739
00:07:06,680 --> 00:07:09,650
And so when you have a key that is a string,

8740
00:07:10,040 --> 00:07:12,620
when you're trying to retrieve the data from that key,

8741
00:07:12,650 --> 00:07:17,650
you also have to make sure that you provide the key in its actual data type.

8742
00:07:18,250 --> 00:07:22,390
So for example, if this was just a number, say one, two, three,

8743
00:07:22,780 --> 00:07:26,320
then, of course, all you have to write in here is just one, two, three,

8744
00:07:26,830 --> 00:07:30,760
and it would know that this piece of data is what you wanted.

8745
00:07:32,530 --> 00:07:37,180
So that's how you retrieve items from a dictionary by adding a square bracket

8746
00:07:37,240 --> 00:07:39,340
and then giving it the key.

8747
00:07:39,940 --> 00:07:44,290
And it will look for the key inside the dictionary and give you back the

8748
00:07:44,290 --> 00:07:46,060
value. Now,

8749
00:07:46,060 --> 00:07:50,260
what if you wanted to add a piece of data such as that loop that we had earlier

8750
00:07:50,260 --> 00:07:53,110
on, but you want to do it programmatically.

8751
00:07:53,260 --> 00:07:55,300
So instead of doing it

8752
00:07:55,300 --> 00:07:58,510
when you were defining the dictionary at the beginning,

8753
00:07:58,690 --> 00:08:02,860
what if at some later stage in your program you needed to add a new entry?

8754
00:08:03,580 --> 00:08:06,070
Well, to do this, it's also really simple.

8755
00:08:06,670 --> 00:08:09,880
All you have to do is to tap into the dictionary,

8756
00:08:10,060 --> 00:08:14,380
which is called programming dictionary in our case and again,

8757
00:08:14,410 --> 00:08:17,110
using square brackets, we define the key.

8758
00:08:17,710 --> 00:08:20,500
The key I'm going to add is our loop.

8759
00:08:21,070 --> 00:08:25,180
And then after a equal sign, I get to assign the value.

8760
00:08:26,020 --> 00:08:29,680
So in my case, the value is going to be the definition for a loop.

8761
00:08:30,370 --> 00:08:35,370
And now when this line of code is executed and we go ahead and just print the

8762
00:08:37,570 --> 00:08:40,179
programming dictionary after this has happened,

8763
00:08:40,539 --> 00:08:43,900
then we'll see that it's actually different from what we had before.

8764
00:08:44,110 --> 00:08:49,110
So let's hit run and you can see that previously we had a programming dictionary

8765
00:08:49,120 --> 00:08:51,580
that had only two items, bug and function.

8766
00:08:52,090 --> 00:08:56,910
And after this line 10, where we print our programming dictionary again,

8767
00:08:57,240 --> 00:09:00,540
you can see it's now got three items, bug, function, and loop.

8768
00:09:01,740 --> 00:09:04,380
Now very often when you're writing code,

8769
00:09:04,500 --> 00:09:09,500
it can be really helpful to start out with a empty dictionary. Just as you saw

8770
00:09:09,720 --> 00:09:10,290
previously,

8771
00:09:10,290 --> 00:09:15,000
you create an empty list by simply having a set of square brackets with nothing

8772
00:09:15,000 --> 00:09:15,833
inside.

8773
00:09:16,020 --> 00:09:21,020
You can also create an empty dictionary by simply creating a set of curly braces

8774
00:09:22,950 --> 00:09:25,950
with nothing inside. And then at a later stage,

8775
00:09:25,980 --> 00:09:30,630
you can add to your dictionary by using this method that you saw here.

8776
00:09:32,010 --> 00:09:33,150
Now, on the other hand,

8777
00:09:33,180 --> 00:09:37,710
you might actually want to wipe an entire dictionary. Here,

8778
00:09:37,740 --> 00:09:42,300
I'm creating a new empty dictionary by creating this pair of curly braces with

8779
00:09:42,300 --> 00:09:43,230
nothing inside.

8780
00:09:43,800 --> 00:09:48,800
But I can also wipe an existing dictionary by simply doing the same thing.

8781
00:09:49,530 --> 00:09:53,940
We know that this dictionary, programming_dictionary, has three items in it.

8782
00:09:54,360 --> 00:09:55,980
But on line 17,

8783
00:09:56,010 --> 00:09:59,490
I'm going to say programming dictionary equals empty dictionary.

8784
00:10:00,030 --> 00:10:03,270
And now if I move this print statement down here,

8785
00:10:03,660 --> 00:10:06,120
then you can see that when it prints out,

8786
00:10:06,330 --> 00:10:08,610
it's actually going to be completely empty.

8787
00:10:10,200 --> 00:10:15,030
That can be really useful if you wanted to clear out a user's progress

8788
00:10:15,300 --> 00:10:18,150
or for example, if a game restarts,

8789
00:10:18,210 --> 00:10:21,990
then all the scores and stats will probably have to be wiped empty.

8790
00:10:22,230 --> 00:10:24,090
So this is one way that you could do that.

8791
00:10:25,020 --> 00:10:29,100
Now this method of tapping into a dictionary,

8792
00:10:29,730 --> 00:10:33,660
using the key to fetch the relevant item from it

8793
00:10:34,260 --> 00:10:37,920
and then doing something with it goes beyond just adding.

8794
00:10:38,370 --> 00:10:42,330
You can also use this to edit an item in a dictionary.

8795
00:10:44,280 --> 00:10:47,880
For example, let me go ahead and comment out these two lines of code

8796
00:10:48,180 --> 00:10:53,180
so we don't wipe our programming dictionary and instead I'm going to tap into

8797
00:10:53,730 --> 00:10:58,730
the programming dictionary and I'm going to fetch the item that has a key of bug

8798
00:11:00,090 --> 00:11:02,430
and I'm going to redefine its value.

8799
00:11:02,640 --> 00:11:06,690
So currently it should be an error in a program that prevents the program from

8800
00:11:06,690 --> 00:11:08,280
running as expected.

8801
00:11:08,820 --> 00:11:12,810
And I can prove that if I just wrap this around a print statement.

8802
00:11:14,580 --> 00:11:18,450
If instead I wanted this to be a different value,

8803
00:11:18,540 --> 00:11:23,010
then I can simply use the same syntax as I did for adding new items

8804
00:11:23,340 --> 00:11:24,360
but in this case

8805
00:11:24,420 --> 00:11:28,440
I'm actually editing this entry because it's going to look through the

8806
00:11:28,440 --> 00:11:29,273
dictionary,

8807
00:11:29,370 --> 00:11:34,370
find a value with this key and then assign it to whatever I put on the right

8808
00:11:34,500 --> 00:11:37,500
hand side of the equal sign. Now, on the other hand,

8809
00:11:37,500 --> 00:11:39,540
if it finds nothing with that key,

8810
00:11:39,870 --> 00:11:43,200
then it's going to create a new entry with the value again

8811
00:11:43,230 --> 00:11:44,970
on the right hand side of the equal sign.

8812
00:11:45,900 --> 00:11:50,250
Now let's say that a bug is instead 'A moth in your computer.'

8813
00:11:51,930 --> 00:11:56,890
Now, if I go and print my programming dictionary once more,

8814
00:11:57,160 --> 00:12:02,160
then you can see that the definition for our bug has now just been changed.

8815
00:12:04,150 --> 00:12:07,540
The final thing with regards to dictionaries that I think is really,

8816
00:12:07,540 --> 00:12:12,540
really useful is how you loop through a dictionary. And using your knowledge from

8817
00:12:14,350 --> 00:12:18,520
lists you might think that to loop through a dictionary, you would,

8818
00:12:18,670 --> 00:12:22,840
let's say we are using a for loop. And we say for, um,

8819
00:12:22,900 --> 00:12:25,840
thing in programming dictionary,

8820
00:12:26,290 --> 00:12:30,130
let's go ahead and print this thing each time.

8821
00:12:30,790 --> 00:12:34,270
Here's a good moment to play computer and think,

8822
00:12:34,300 --> 00:12:36,640
what do you expect to be printed?

8823
00:12:36,820 --> 00:12:38,950
So let's comment out all of the other print statements

8824
00:12:38,950 --> 00:12:42,880
so we don't get confused. And when I click run,

8825
00:12:43,480 --> 00:12:45,190
what do you think will be printed?

8826
00:12:47,730 --> 00:12:47,880
Right?

8827
00:12:47,880 --> 00:12:50,400
All right. Is that what you expected? Because it certainly

8828
00:12:50,400 --> 00:12:53,130
wasn't what I expected when I first learned Python.

8829
00:12:53,700 --> 00:12:58,680
I thought it would give me each of the items in the dictionary with this key and

8830
00:12:58,680 --> 00:12:59,513
its value.

8831
00:12:59,940 --> 00:13:04,350
But instead this code actually just gives you the keys.

8832
00:13:05,700 --> 00:13:10,380
Now, of course, once you do have access to the key, instead of thing,

8833
00:13:10,560 --> 00:13:13,770
I should actually really say for key in programming_dictionary.

8834
00:13:14,310 --> 00:13:18,570
If I wanted to print the key, then of course I could just write print key.

8835
00:13:18,960 --> 00:13:20,940
But if I wanted to get hold of the value,

8836
00:13:21,120 --> 00:13:24,720
I could equally just as easily tap into my dictionary,

8837
00:13:24,960 --> 00:13:28,230
use the square brackets and pass in that key.

8838
00:13:28,740 --> 00:13:32,520
So now when I hit run, you can see it's giving me first

8839
00:13:32,550 --> 00:13:35,520
the key from this line and then secondly

8840
00:13:35,640 --> 00:13:38,040
the value based on this line.

8841
00:13:38,670 --> 00:13:42,840
I'm using that retrieval code in order to get the value.

8842
00:13:44,130 --> 00:13:44,550
Of course,

8843
00:13:44,550 --> 00:13:49,050
remember that you can get access to all the code that I'm writing here by

8844
00:13:49,050 --> 00:13:51,270
looking at the end code of the day

8845
00:13:51,480 --> 00:13:53,910
that you'll find on the course resources list.

8846
00:13:54,240 --> 00:13:58,380
And if you want to, have a quick review of everything that we've gone through so

8847
00:13:58,380 --> 00:13:59,190
far,

8848
00:13:59,190 --> 00:14:04,190
because a lot of this knowledge is going to be tested in the next lesson where

8849
00:14:04,230 --> 00:14:08,820
we do a coding exercise that will really solidify everything you've learned in

8850
00:14:08,820 --> 00:14:13,410
this lesson so far. So for all of that, and more, I'll see on the next lesson.

8851
00:00:00,210 --> 00:00:03,900
All right. So hopefully everything we've learned in the last lesson made sense,

8852
00:00:04,230 --> 00:00:08,670
and you're ready to put your knowledge to the test by completing the first

8853
00:00:08,670 --> 00:00:09,750
coding challenge today.

8854
00:00:10,410 --> 00:00:13,410
And what you're going to be building is a grading program.

8855
00:00:13,650 --> 00:00:17,610
So if you take a look at the day 9.1 grading program

8856
00:00:17,970 --> 00:00:21,270
Repl.it coding exercise, you'll see that to begin,

8857
00:00:21,330 --> 00:00:26,330
I've already created a dictionary with a bunch of student names and their test

8858
00:00:26,970 --> 00:00:28,740
scores. Now,

8859
00:00:28,770 --> 00:00:32,430
without changing any of the code above here or below here,

8860
00:00:32,850 --> 00:00:37,850
I want you to write a program that will be able to convert these scores into a

8861
00:00:38,550 --> 00:00:43,170
grade. So the grading criteria is over here in the instructions.

8862
00:00:43,590 --> 00:00:46,590
So if the student's scores above 91,

8863
00:00:46,980 --> 00:00:51,750
then they'll get the grade outstanding. If they score above 81,

8864
00:00:51,750 --> 00:00:54,510
they get exceeds expectations and then acceptable.

8865
00:00:54,840 --> 00:00:58,980
And then finally everybody's scoring 70 or a lower gets the fail grade.

8866
00:00:59,790 --> 00:01:00,623
Essentially,

8867
00:01:00,720 --> 00:01:04,800
what you're going to be doing is creating an empty dictionary from scratch

8868
00:01:05,099 --> 00:01:06,960
which is going to be called student_grades.

8869
00:01:07,440 --> 00:01:12,440
And you're going to write some code so that each of the students are represented

8870
00:01:12,870 --> 00:01:14,490
inside this new dictionary.

8871
00:01:14,970 --> 00:01:19,260
And instead of having scores as the value's in that dictionary,

8872
00:01:19,530 --> 00:01:23,940
you are going to have the grades that correspond to the scores that they got.

8873
00:01:24,540 --> 00:01:28,320
Have a read through the instructions and the hints if you need some help,

8874
00:01:28,710 --> 00:01:32,460
but once you're ready, go ahead and pause the video and give this a go.

8875
00:01:32,660 --> 00:01:37,660
[inaudible]

8876
00:01:39,050 --> 00:01:42,440
All right. So to begin, let's first tackle this to-do 1.

8877
00:01:42,950 --> 00:01:47,300
Let's create a new empty dictionary called student_grades.

8878
00:01:48,560 --> 00:01:53,240
And the student_grades has to be spelled exactly the same as you see here,

8879
00:01:53,510 --> 00:01:55,970
because otherwise this print statement will not work.

8880
00:01:56,570 --> 00:01:58,730
The student_grades is gonna be an empty dictionary,

8881
00:01:58,760 --> 00:02:01,610
which if you remember from the last lesson, we said

8882
00:02:01,640 --> 00:02:05,480
it looks like this with two curly braces and nothing inside.

8883
00:02:06,230 --> 00:02:08,780
Now let's move on to todo number 2.

8884
00:02:09,020 --> 00:02:14,020
So we're going to write some code below so that we actually add the grades to

8885
00:02:14,570 --> 00:02:16,850
this student grades dictionary.

8886
00:02:17,330 --> 00:02:21,710
And we of course can get those grades by looking at each of the student's

8887
00:02:21,740 --> 00:02:25,460
scores. How can we do this? Well,

8888
00:02:25,460 --> 00:02:30,050
we're probably going to need a for loop because there's lots of items in this

8889
00:02:30,050 --> 00:02:34,730
dictionary. Let's go ahead and loop through this student_scores dictionary,

8890
00:02:35,270 --> 00:02:39,500
and I'm going to call each of the items the student,

8891
00:02:39,740 --> 00:02:44,740
because remember when we have a for loop looping through a dictionary like we

8892
00:02:45,320 --> 00:02:46,250
are doing here,

8893
00:02:46,910 --> 00:02:51,860
each of the items that gets picked out is actually the key rather than the whole

8894
00:02:51,860 --> 00:02:55,340
item. So again, we talked about this in the last lesson,

8895
00:02:55,850 --> 00:03:00,670
but hopefully, this should really make it clear. But even if you didn't know,

8896
00:03:00,910 --> 00:03:03,670
you could always of course just print it, right?

8897
00:03:03,760 --> 00:03:07,090
So if we go ahead and use the for loop and print it,

8898
00:03:07,090 --> 00:03:12,090
you can see we get all of the keys from this dictionary when we're looping

8899
00:03:13,780 --> 00:03:17,080
through it. So for each of the students,

8900
00:03:17,110 --> 00:03:19,210
we want to get hold of their score.

8901
00:03:19,630 --> 00:03:23,200
We can calculate the score by getting hold of the value

8902
00:03:23,440 --> 00:03:27,460
using this key from this dictionary. And to do that,

8903
00:03:27,640 --> 00:03:30,520
if you remember, is tapping in to the dictionary,

8904
00:03:31,000 --> 00:03:35,320
adding a set of square brackets and then giving it the key. So in this case,

8905
00:03:35,320 --> 00:03:40,210
it's going to be each of the student names. And once we've got a hold of the

8906
00:03:40,210 --> 00:03:43,570
score, well then we can use our if statement to check well

8907
00:03:43,840 --> 00:03:46,480
if the score is greater than 90,

8908
00:03:47,170 --> 00:03:48,940
so anything above 90,

8909
00:03:49,270 --> 00:03:53,020
then that means they're going to end up with outstanding.

8910
00:03:53,530 --> 00:03:58,530
Now, this is the part where we add a new entry to this student_grades dictionary.

8911
00:03:59,230 --> 00:04:04,000
So let's tap into the dictionary, use a set of square brackets again

8912
00:04:04,060 --> 00:04:06,640
to give it a key. And the key,

8913
00:04:06,640 --> 00:04:10,360
of course, should still be the student name which comes from here,

8914
00:04:10,900 --> 00:04:12,850
which is going to be the same as this.

8915
00:04:13,360 --> 00:04:17,769
Then we can add a equal sign and followed by the value

8916
00:04:18,220 --> 00:04:20,380
which is going to be outstanding.

8917
00:04:21,670 --> 00:04:25,780
So now we can repeat this process for the rest of these grades.

8918
00:04:26,130 --> 00:04:26,963
Yeah.

8919
00:04:29,130 --> 00:04:34,020
Everybody who scored above 80 but not above 90, so remember that this

8920
00:04:34,020 --> 00:04:38,640
if statement once triggered, will skip all of the rest of the elif statements.

8921
00:04:41,700 --> 00:04:46,290
And then if they scored above 70, they would get acceptable. And finally,

8922
00:04:46,290 --> 00:04:49,740
for everybody else, which means they scored lower than 70,

8923
00:04:50,100 --> 00:04:52,710
then they're going to end up with a fail grade.

8924
00:04:53,700 --> 00:04:58,590
Now it's really important that if you want the test to pass that each of these

8925
00:04:58,590 --> 00:05:02,430
strings has to match what you see over here exactly.

8926
00:05:03,120 --> 00:05:07,320
Now that we've done all of this hard work, manipulating our dictionary,

8927
00:05:07,710 --> 00:05:12,210
it's time to actually go ahead and run our code and see what we get.

8928
00:05:12,840 --> 00:05:15,060
So now our code has converted

8929
00:05:15,090 --> 00:05:18,300
each of these scores to the corresponding grade.

8930
00:05:18,750 --> 00:05:23,750
Harry gets exceeds expectations because his score is between 81 and 90, Ron gets

8931
00:05:25,320 --> 00:05:29,340
acceptable because it's between 70 and 80, and so on and so forth.

8932
00:05:30,300 --> 00:05:31,770
Now, did you manage to get it right,

8933
00:05:32,220 --> 00:05:35,700
or did you have any problems working with dictionaries? Now,

8934
00:05:35,760 --> 00:05:37,290
if you go beyond this lesson

8935
00:05:37,320 --> 00:05:41,400
I'm going to assume that you are comfortable with editing dictionaries,

8936
00:05:41,430 --> 00:05:43,500
adding to it, creating new ones.

8937
00:05:43,980 --> 00:05:47,880
So if you are not yet fully there, then I recommend just going back to the last

8938
00:05:47,880 --> 00:05:49,890
lesson, just reviewing it once more.

8939
00:05:50,910 --> 00:05:53,280
Once you've done that, head over to the next lesson

8940
00:05:53,490 --> 00:05:58,230
and we're going to talk more about nesting in dictionaries and lists. For all of that

8941
00:05:58,470 --> 00:05:59,820
and more, I'll see you there.

8942
00:00:00,420 --> 00:00:03,270
Now that we've seen lists as well as dictionaries

8943
00:00:03,630 --> 00:00:08,630
I want to talk about a concept that you often see in both of these collection

8944
00:00:09,300 --> 00:00:12,660
types and that's something called nesting. Now,

8945
00:00:12,690 --> 00:00:15,930
if we imagine a list or a dictionary

8946
00:00:15,960 --> 00:00:20,430
being something like a folder where lots of things can be stored inside it,

8947
00:00:20,850 --> 00:00:25,850
then nesting lists and dictionaries is just a matter of putting one inside the

8948
00:00:26,040 --> 00:00:28,200
other. For example,

8949
00:00:28,380 --> 00:00:31,320
here;s a dictionary that is very simple,

8950
00:00:31,320 --> 00:00:33,480
it's only got one key-value pair.

8951
00:00:34,170 --> 00:00:39,170
Now we know that we can add multiple key-value pairs into the same dictionary by

8952
00:00:40,110 --> 00:00:45,030
just adding a bunch of commas to separate them. Now, what if

8953
00:00:45,180 --> 00:00:50,100
instead of having a simple value like a string or a number,

8954
00:00:50,790 --> 00:00:54,270
I could also put a list as a value as well.

8955
00:00:55,200 --> 00:00:56,033
Similarly,

8956
00:00:56,040 --> 00:01:01,040
I could also use a dictionary as a value. In this case

8957
00:01:01,170 --> 00:01:05,910
we've got a list as the value for key, this first one,

8958
00:01:06,390 --> 00:01:11,390
and we've got a dictionary as the value for key2. Notice how this is a list and

8959
00:01:13,410 --> 00:01:17,550
a dictionary nested inside another dictionary.

8960
00:01:18,030 --> 00:01:20,490
The structure gets a little bit more complex,

8961
00:01:21,090 --> 00:01:26,070
but it gives us more flexibility when we're trying to store more complex pieces

8962
00:01:26,070 --> 00:01:29,580
of data. Coming back to our code,

8963
00:01:30,000 --> 00:01:34,050
let's go ahead and create some sample dictionaries to see what this actually

8964
00:01:34,050 --> 00:01:36,600
looks like in real life. For example,

8965
00:01:36,600 --> 00:01:41,600
this could be a dictionary that contains the country as the key and the city,

8966
00:01:43,350 --> 00:01:47,370
that is the capital, as the value. So for France,

8967
00:01:47,400 --> 00:01:49,980
that's Paris, for Germany that's Berlin.

8968
00:01:50,340 --> 00:01:54,360
This is a very simple dictionary that you've seen already. Now,

8969
00:01:54,360 --> 00:01:59,360
if I wanted to nest a list in a dictionary,

8970
00:02:00,180 --> 00:02:04,650
then I would be able to represent even more complex data. For example,

8971
00:02:04,650 --> 00:02:09,650
if I had a travel log where I was going to collect a dictionary of all the

8972
00:02:11,220 --> 00:02:15,990
cities I had been for each of the countries I've traveled to. So for example,

8973
00:02:16,560 --> 00:02:21,560
if I had traveled to France and I wanted to say that I've been to multiple

8974
00:02:21,600 --> 00:02:24,570
cities, I can't simply just say Paris,

8975
00:02:24,630 --> 00:02:29,630
and then Lille, Dijon, that doesn't really work because each key can only have one

8976
00:02:33,090 --> 00:02:37,530
value. The only way that we can make these three pieces of data

8977
00:02:37,560 --> 00:02:41,430
one value is by turning it into a list, like so.

8978
00:02:42,120 --> 00:02:45,300
So now in our travel log dictionary

8979
00:02:45,750 --> 00:02:47,850
as represented by the curly braces,

8980
00:02:48,180 --> 00:02:53,180
we have one key value pair and it just so happens that

8981
00:02:53,250 --> 00:02:55,920
the value in this case is a list.

8982
00:02:56,850 --> 00:03:01,570
And of course you can go on and add as many entries as you would like,

8983
00:03:01,930 --> 00:03:06,930
and still preserving this kind of structure of key being a string and the value

8984
00:03:07,630 --> 00:03:10,180
being a list. Now,

8985
00:03:10,210 --> 00:03:14,050
this idea of nesting isn't limited dictionaries by the way.

8986
00:03:14,050 --> 00:03:17,260
You could also just nest a list in a list.

8987
00:03:17,800 --> 00:03:20,200
So you could have a list which is A

8988
00:03:20,260 --> 00:03:25,260
and then B, and then the third item just happens to be another list which has C and D.

8989
00:03:26,140 --> 00:03:28,450
This is perfectly valid Python code

8990
00:03:28,990 --> 00:03:33,990
but it's not quite as useful as nesting a list in a dictionary or a dictionary

8991
00:03:34,420 --> 00:03:39,310
in a dictionary, because the way that data is structured. Now,

8992
00:03:39,310 --> 00:03:43,420
what if you wanted to nest a dictionary in a dictionary?

8993
00:03:44,570 --> 00:03:48,130
Let's say that we wanted to expand our travel log.

8994
00:03:48,790 --> 00:03:53,790
And instead of just storing the cities that I visited in each country,

8995
00:03:54,280 --> 00:03:59,280
what if I wanted to also keep track of how many visits I've made to that

8996
00:03:59,920 --> 00:04:00,753
country?

8997
00:04:00,880 --> 00:04:05,710
Or what if I wanted to actually label what this piece of data is?

8998
00:04:05,800 --> 00:04:07,660
Because at the moment it's kind of like here's

8999
00:04:07,660 --> 00:04:10,540
a bunch of cities that's associated with the country,

9000
00:04:10,840 --> 00:04:13,150
but it doesn't really describe this list.

9001
00:04:13,900 --> 00:04:16,450
And I'd like to give this to you as a challenge,

9002
00:04:16,630 --> 00:04:20,800
have a go at changing the France entry so that it contains another dictionary.

9003
00:04:21,310 --> 00:04:25,330
For the nested dictionary use the key cities_visited,

9004
00:04:25,600 --> 00:04:29,320
and for the value you can keep the list of Paris, Lille and Dijon.

9005
00:04:29,830 --> 00:04:32,110
Pause the video now and see if you can get that to work.

9006
00:04:32,130 --> 00:04:32,963
Yeah.

9007
00:04:36,150 --> 00:04:39,270
All right, so here's the solution. By nesting a dictionary

9008
00:04:39,300 --> 00:04:43,860
we can label the Paris, Lille and Dijon lists as cities visited.

9009
00:04:44,400 --> 00:04:46,860
All I need to do is create the string,

9010
00:04:46,890 --> 00:04:51,180
"cities_visited" and add a colon after it. But there's one more step.

9011
00:04:51,390 --> 00:04:55,950
We have to add a pair of curly braces so that France is associated with a single

9012
00:04:55,950 --> 00:04:58,560
value, namely our nested dictionary.

9013
00:04:59,430 --> 00:05:03,480
Now that we have a dictionary of the travel log,

9014
00:05:03,510 --> 00:05:08,510
all the countries I've been to, and each country has a value that is a dictionary

9015
00:05:09,870 --> 00:05:14,100
in itself and it can store multiple pieces of data

9016
00:05:14,400 --> 00:05:17,220
including the cities I've visited in that country

9017
00:05:17,550 --> 00:05:21,060
as well as things such as the total number of visits,

9018
00:05:22,470 --> 00:05:27,470
which in this case would have a string as the key and a

9019
00:05:27,570 --> 00:05:31,110
number of as the value. Now

9020
00:05:31,110 --> 00:05:35,970
have a go at creating your own travel log or modifying the second part of the

9021
00:05:35,970 --> 00:05:40,970
travel log so that you also have a dictionary nested in a dictionary and you're

9022
00:05:41,730 --> 00:05:44,730
able to represent something like this,

9023
00:05:44,730 --> 00:05:49,730
the number of cities you visited in a list and another additional piece of data,

9024
00:05:49,950 --> 00:05:50,783
if you wanted to.

9025
00:05:51,330 --> 00:05:52,163
Right,

9026
00:05:56,100 --> 00:05:59,630
And hopefully would have done something similar to this.

9027
00:06:00,380 --> 00:06:05,380
And so now our data structure is such that we've got a list nested inside a

9028
00:06:07,280 --> 00:06:12,110
dictionary, which is in itself nested in another dictionary.

9029
00:06:13,190 --> 00:06:16,850
Now that we've seen nesting lists inside dictionaries, dictionaries inside

9030
00:06:16,850 --> 00:06:17,683
dictionaries,

9031
00:06:17,690 --> 00:06:22,520
the last thing I want to show you is nesting a dictionary inside a list.

9032
00:06:22,970 --> 00:06:27,740
So we could basically have multiple dictionaries inside a single list.

9033
00:06:28,430 --> 00:06:33,430
So remember that lists are ordered and they're accessed by the positions inside the

9034
00:06:33,440 --> 00:06:38,060
list. So this dictionary would be the item at index zero,

9035
00:06:38,450 --> 00:06:41,240
this one at index one and so on and so forth.

9036
00:06:42,110 --> 00:06:43,580
Whereas inside a dictionary,

9037
00:06:43,610 --> 00:06:48,380
the items are accessed by their keys like this France or Germany.

9038
00:06:49,280 --> 00:06:54,140
Now I want to do the last type which is nesting a dictionary

9039
00:06:56,030 --> 00:06:57,080
in a list.

9040
00:06:57,620 --> 00:07:02,030
And I'm going to be working with the same travel log that we had previously,

9041
00:07:02,600 --> 00:07:07,160
but I want to change it so that instead of having this being one giant

9042
00:07:07,160 --> 00:07:10,160
dictionary with key-value pairs,

9043
00:07:10,490 --> 00:07:15,200
I want to change it so that each of these entries are a dictionary in itself.

9044
00:07:15,650 --> 00:07:19,610
Instead of having France be the key of this dictionary here,

9045
00:07:20,060 --> 00:07:25,060
I want the turn it into its own key-value pair. Going inside this dictionary,

9046
00:07:25,340 --> 00:07:27,440
I'm going to create a new key

9047
00:07:27,440 --> 00:07:32,440
which is called country and then put France as the value for that key.

9048
00:07:34,250 --> 00:07:39,110
So now I have an entire dictionary that has three pieces of data.

9049
00:07:39,380 --> 00:07:41,810
The country visited, the cities visited,

9050
00:07:42,110 --> 00:07:46,190
and the total number of visits. Let's do the same for Germany as well.

9051
00:07:48,140 --> 00:07:53,140
So now you can see we've got two dictionaries and instead of holding these two

9052
00:07:53,810 --> 00:07:55,760
dictionaries inside a dictionary,

9053
00:07:56,150 --> 00:08:01,130
I'm going to change it so that it's now a list. I'm going to turn these curly

9054
00:08:01,130 --> 00:08:03,380
braces into square brackets

9055
00:08:03,860 --> 00:08:08,860
and this way we can add as many of these dictionaries inside the list and

9056
00:08:09,260 --> 00:08:10,970
iterate through them if we need to.

9057
00:08:11,690 --> 00:08:15,710
When we've been creating dictionaries that only have one or two key-value pairs,

9058
00:08:15,950 --> 00:08:18,380
we've kind of just kept it all on one line.

9059
00:08:18,830 --> 00:08:22,190
But once you've got more and more key-value pairs in the dictionary,

9060
00:08:22,580 --> 00:08:27,580
it's usually a good idea to go ahead and separate out each of the entries,

9061
00:08:28,900 --> 00:08:29,733
Right?

9062
00:08:32,200 --> 00:08:33,700
Like what I'm doing here.

9063
00:08:34,809 --> 00:08:39,809
Now it's a little bit easier to see that we have a list which contains two

9064
00:08:40,510 --> 00:08:44,440
items, and each item is a dictionary.

9065
00:08:45,010 --> 00:08:50,010
Each dictionary has three key-value pairs and they all contain different types

9066
00:08:50,590 --> 00:08:54,640
of data. The first one has a value which is a string,

9067
00:08:55,020 --> 00:08:58,380
the second one holds a list and the third one holds a number.

9068
00:08:58,910 --> 00:09:03,890
The data types inside a dictionary can be completely mixed up if you want it to.

9069
00:09:04,280 --> 00:09:09,280
But what can't change is you still need a key and a value separated by a colon.

9070
00:09:11,990 --> 00:09:15,920
Now the only downside to this is you want to make sure that you're actually

9071
00:09:15,920 --> 00:09:19,520
aware that later on when you try to pull out the number of visits,

9072
00:09:19,790 --> 00:09:24,020
it's actually a number that you're working with rather than a string or when

9073
00:09:24,020 --> 00:09:26,060
you're trying to get hold of the cities visited

9074
00:09:26,330 --> 00:09:29,600
it's a list rather than a dictionary, for example.

9075
00:09:30,920 --> 00:09:34,610
So now that we've the various different types of nesting,

9076
00:09:35,000 --> 00:09:38,720
it's time for you to actually really understand this and get to grips with this

9077
00:09:38,720 --> 00:09:43,720
concept by completing a challenge yourself. In the next lesson,

9078
00:09:43,790 --> 00:09:48,710
I've got a coding challenge for you based on this travel log and you'll need to

9079
00:09:48,710 --> 00:09:51,760
use what you've learned so far to be able to complete it.

9080
00:09:52,130 --> 00:09:55,130
So for all of that and more, I'll see you on the next lesson.

9081
00:00:00,630 --> 00:00:00,870
Now,

9082
00:00:00,870 --> 00:00:05,870
if you head over to Repl.it, click on day 9.2 dictionary in list,

9083
00:00:06,600 --> 00:00:08,640
this coding exercise should appear.

9084
00:00:09,360 --> 00:00:14,360
And you'll see that we actually have the same list that we created at the end of the

9085
00:00:14,460 --> 00:00:15,293
last lesson.

9086
00:00:15,990 --> 00:00:20,990
This is a list called travel_log and it logs the countries that we've been

9087
00:00:21,570 --> 00:00:23,970
to, how many times we've visited it,

9088
00:00:24,330 --> 00:00:27,210
and the cities that we visited while we were there.

9089
00:00:28,110 --> 00:00:31,620
This is a list of dictionaries

9090
00:00:31,950 --> 00:00:34,830
which contain a list of cities.

9091
00:00:35,280 --> 00:00:37,320
There's some heavy nesting going on here.

9092
00:00:38,610 --> 00:00:43,610
Now your job is to make sure that this line of code on line 20 and 21 actually

9093
00:00:46,680 --> 00:00:51,060
work. In order to make it work, you are going to have to write a program.

9094
00:00:51,390 --> 00:00:52,830
So it's going to be a function

9095
00:00:52,830 --> 00:00:57,830
that's going to go somewhere in here. And you're going to get it to be able to add

9096
00:00:58,380 --> 00:01:00,330
new countries, the name,

9097
00:01:00,660 --> 00:01:05,190
the number of visits and the cities that you've been to so that it gets

9098
00:01:05,190 --> 00:01:09,510
populated in the travel log. And when we print travel log at the end,

9099
00:01:09,540 --> 00:01:12,630
it should show us all three of these entries.

9100
00:01:14,100 --> 00:01:18,630
So remember, the goal is not to modify this directly. In fact,

9101
00:01:18,630 --> 00:01:22,500
I don't want you to touch this part at all. Instead,

9102
00:01:22,500 --> 00:01:23,940
it should be your function

9103
00:01:24,150 --> 00:01:29,150
that's going to somehow go through this travel log and add these new pieces of

9104
00:01:29,550 --> 00:01:30,383
data.

9105
00:01:30,600 --> 00:01:33,840
Have a think about how are you going to achieve this and then pause the

9106
00:01:33,840 --> 00:01:38,520
video and give it a go. All right.

9107
00:01:38,520 --> 00:01:43,140
So, because we've already defined the name of the function here, in order for our

9108
00:01:43,140 --> 00:01:46,170
code to actually work and for the tests to go through,

9109
00:01:46,500 --> 00:01:51,060
we also have to create the function using exactly the same name.

9110
00:01:51,090 --> 00:01:53,160
So it's called add_new_country.

9111
00:01:53,880 --> 00:01:58,880
And then the inputs that it's going to take are the country_visited, the times_

9112
00:02:01,380 --> 00:02:02,213
visited,

9113
00:02:04,800 --> 00:02:07,140
and finally the cities_visited.

9114
00:02:08,430 --> 00:02:11,430
So now that we've created our new function,

9115
00:02:11,880 --> 00:02:14,220
the next job is to figure out, well,

9116
00:02:14,220 --> 00:02:16,890
how do we add these pieces of data

9117
00:02:17,160 --> 00:02:22,160
that's going to be passed in to these parameters and get that into this travel

9118
00:02:22,920 --> 00:02:23,753
log?

9119
00:02:24,060 --> 00:02:28,290
So the first thing you need to notice is each of the entries inside  the

9120
00:02:28,290 --> 00:02:30,390
travel_log is a dictionary.

9121
00:02:30,990 --> 00:02:34,380
In order to add to that list,

9122
00:02:34,650 --> 00:02:39,650
we should probably start off by creating a new dictionary that has all of these

9123
00:02:40,440 --> 00:02:43,170
pieces of data in it. For example,

9124
00:02:43,170 --> 00:02:47,940
we could create a new dictionary called new_country, which is an empty dictionary.

9125
00:02:48,630 --> 00:02:53,630
And then we can add each of these pieces of data to the dictionary. So we

9126
00:02:53,970 --> 00:02:56,670
could say new_country[]

9127
00:02:57,060 --> 00:03:00,190
and then we give the key that we want to add. So in this case,

9128
00:03:00,190 --> 00:03:03,130
it would be the key country as a string,

9129
00:03:04,990 --> 00:03:09,130
and the data or the value that's going to go in that is going to be whatever 

9130
00:03:09,130 --> 00:03:11,530
gets passed into country_visited.

9131
00:03:13,990 --> 00:03:18,990
So now all we have to do is repeat the process for the other keys in the

9132
00:03:19,450 --> 00:03:22,390
dictionary. So visits is the next one,

9133
00:03:23,290 --> 00:03:27,940
and that's going to be set equal to the times_visited. And finally,

9134
00:03:28,000 --> 00:03:32,290
we're also going to populate the final key which is cities,

9135
00:03:34,990 --> 00:03:38,230
and that is going to be equal to the cities_visited.

9136
00:03:39,430 --> 00:03:43,210
Now, at this point, if you were to print out new_country,

9137
00:03:43,240 --> 00:03:48,240
you should see a dictionary with the three key-value pairs and the keys will

9138
00:03:48,400 --> 00:03:49,390
always be the same,

9139
00:03:49,750 --> 00:03:54,750
but the values will depend on which arguments were passed in when this function

9140
00:03:55,090 --> 00:03:59,020
was called. So once we have that new country,

9141
00:03:59,320 --> 00:04:01,750
then we can actually take our travel log,

9142
00:04:02,290 --> 00:04:07,290
and remember that the travel log is actually at its base, a list.

9143
00:04:08,020 --> 00:04:11,110
So instead of adding to it like we have been doing

9144
00:04:11,140 --> 00:04:15,490
when we're using a dictionary, in order to add to lists if you remember,

9145
00:04:15,580 --> 00:04:20,050
you should probably use the function append. And inside here,

9146
00:04:20,079 --> 00:04:22,540
we can add a new item to our list.

9147
00:04:23,110 --> 00:04:27,700
And that new item is, of course, going to be this dictionary called new_country.

9148
00:04:28,570 --> 00:04:30,940
So now if we go ahead and click run,

9149
00:04:31,270 --> 00:04:35,710
then you can see when travel_log gets printed on now line 27,

9150
00:04:36,160 --> 00:04:38,110
it's now got three entries.

9151
00:04:38,920 --> 00:04:41,770
The first entry is the dictionary for France,

9152
00:04:42,130 --> 00:04:44,560
the second is the dictionary for Germany,

9153
00:04:45,070 --> 00:04:48,010
and the last one is the dictionary for Russia.

9154
00:04:48,550 --> 00:04:51,640
We have now a list with three items,

9155
00:04:52,090 --> 00:04:56,200
each being a dictionary, each with a nested list inside as

9156
00:04:56,200 --> 00:04:58,480
well. So if

9157
00:04:58,480 --> 00:04:59,320
you wanted to,

9158
00:04:59,380 --> 00:05:04,380
you now have a way of keeping track of all the places you visited.

9159
00:05:05,140 --> 00:05:06,760
And later on,

9160
00:05:06,850 --> 00:05:11,110
as we start building out more complex apps and web applications,

9161
00:05:11,440 --> 00:05:15,880
then you can easily see how logic like this might be really useful

9162
00:05:16,180 --> 00:05:20,680
if we were building a real-life website for tracking our travels.

9163
00:05:21,820 --> 00:05:25,300
Have a play around with nesting, dictionaries, and lists.

9164
00:05:25,660 --> 00:05:28,930
And once you're happy that you've understood everything that's going on,

9165
00:05:29,320 --> 00:05:33,490
then head over to the next lesson and we're going to start tackling our final

9166
00:05:33,490 --> 00:05:34,090
project.

9167
00:00:00,660 --> 00:00:03,600
All right. So now that you've learned all about dictionaries,

9168
00:00:03,750 --> 00:00:08,750
we're going to put all of that knowledge to test and to use by building a blind

9169
00:00:09,390 --> 00:00:13,860
auction program. So here's the program. When you first run it,

9170
00:00:13,890 --> 00:00:18,890
it's just going to show you the logo art and maybe a line that tells you what

9171
00:00:19,500 --> 00:00:22,320
program you're in. And then it's going to ask you for your name.

9172
00:00:22,320 --> 00:00:26,100
So let's say we have three bidders, right? So first go,

9173
00:00:26,220 --> 00:00:31,170
I go to the computer. I type in my name, I type in my bid and I hit enter.

9174
00:00:31,740 --> 00:00:34,650
It asked me if there are any other bidders, I look around the room,

9175
00:00:34,680 --> 00:00:37,620
I see two other colleagues. So I type yes.

9176
00:00:38,160 --> 00:00:40,080
And now it clears the entire screen.

9177
00:00:40,080 --> 00:00:43,470
So the other people can't see what my bid was.

9178
00:00:43,860 --> 00:00:47,940
So now I leave the computer and my colleague comes over.

9179
00:00:48,270 --> 00:00:52,170
They type in their name and also their bid.

9180
00:00:53,460 --> 00:00:54,270
And again,

9181
00:00:54,270 --> 00:00:57,660
they look around the room and they see this one other person who wants to bid.

9182
00:00:57,720 --> 00:01:01,830
So they hit yes, again, it clears their bid. And finally,

9183
00:01:01,830 --> 00:01:06,480
the last person makes their bid. At this point, everybody has bid

9184
00:01:06,510 --> 00:01:08,100
so she's going to type no.

9185
00:01:08,640 --> 00:01:12,480
And it's at this moment when our program is going to work out

9186
00:01:12,600 --> 00:01:17,600
who has made the highest bid and print out who the winner is and what their bid

9187
00:01:18,300 --> 00:01:22,140
was. This way, instead of competing with each other on bids,

9188
00:01:22,380 --> 00:01:25,320
we actually all just give the highest price we're willing to pay

9189
00:01:25,680 --> 00:01:29,190
and this is known as quite an efficient way of making a bid.

9190
00:01:29,580 --> 00:01:34,230
And you see that a lot in say the construction industry and government,

9191
00:01:34,230 --> 00:01:35,063
et cetera.

9192
00:01:35,610 --> 00:01:40,610
The important thing in this program is you're going to start out using the blind

9193
00:01:40,740 --> 00:01:42,510
auction start replit.

9194
00:01:43,380 --> 00:01:47,850
And the first thing you'll notice is that I've already imported this function

9195
00:01:47,850 --> 00:01:50,400
called clear from the replit module.

9196
00:01:50,520 --> 00:01:55,020
And you can basically call this function, clear, whenever you want to clear the

9197
00:01:55,020 --> 00:01:59,910
output just as you saw here. Whenever we typed yes after being asked

9198
00:01:59,910 --> 00:02:01,110
if there are any other bidders,

9199
00:02:01,130 --> 00:02:03,290
that just calls the clear

9200
00:02:03,500 --> 00:02:08,000
and then it gets rid of everything that's in the console. In addition,

9201
00:02:08,000 --> 00:02:11,810
we've also got the starting art of the gavel logo

9202
00:02:12,110 --> 00:02:14,210
which you're going to put into the program.

9203
00:02:14,600 --> 00:02:19,600
And the most important thing of all is that I want you to create a dictionary so

9204
00:02:20,750 --> 00:02:25,750
that each person's name will be the key and their bid will be the value.

9205
00:02:28,520 --> 00:02:33,520
And this dictionary is going to contain many of these key-value pairs

9206
00:02:34,070 --> 00:02:38,510
and at the very end of the program when everybody's done with bidding,

9207
00:02:38,810 --> 00:02:42,830
then we're going to loop through that dictionary and figure out who has made the

9208
00:02:42,830 --> 00:02:45,200
highest bid. If you want,

9209
00:02:45,260 --> 00:02:50,260
this is a good time to analyze this completed project and see if you can

9210
00:02:50,750 --> 00:02:55,040
create your own flowchart using something like draw.io that I've shown you

9211
00:02:55,040 --> 00:02:59,800
before, or just take a piece of paper and a pen and draw out flowchart.

9212
00:03:00,460 --> 00:03:02,200
Now, if you want a hint,

9213
00:03:02,290 --> 00:03:06,790
then you can head over to the course resources and you'll get taken to the flow

9214
00:03:06,790 --> 00:03:10,660
chart that I've created for this program. So spoiler alert,

9215
00:03:10,690 --> 00:03:13,920
I'm about to show you that flow chart. So if you don't want to see it

9216
00:03:13,940 --> 00:03:17,170
and you want to create your own because it's a relatively simple program,

9217
00:03:17,380 --> 00:03:20,530
then pause the video now and complete the challenge by yourself.

9218
00:03:21,190 --> 00:03:24,190
Now for everybody else, who's still here, I want to show you,

9219
00:03:24,190 --> 00:03:28,030
this is the flow chart I've created to represent this program.

9220
00:03:28,690 --> 00:03:33,580
So we start at the beginning. We first show the logo from that file, art.py,

9221
00:03:34,000 --> 00:03:36,940
and then we ask for a name input, we ask for their price.

9222
00:03:37,450 --> 00:03:41,470
Now we're gonna add the name and the bid into a dictionary with the name as the

9223
00:03:41,470 --> 00:03:45,430
key and the bid as the value. Now, once we're done with that,

9224
00:03:45,520 --> 00:03:49,600
then we get to ask the user for another input and see if there are any other

9225
00:03:49,600 --> 00:03:52,360
users who want to bid. So if they answer yes,

9226
00:03:52,600 --> 00:03:55,780
then we're going to clear the screen and we're going to go back to here,

9227
00:03:55,960 --> 00:04:00,790
ask for another name, another price, and so on and so forth. But if they say, no,

9228
00:04:00,790 --> 00:04:02,080
everybody's done with bidding,

9229
00:04:02,410 --> 00:04:05,140
then we're going to call some sort of function that we have,

9230
00:04:05,380 --> 00:04:10,000
which is going to loop through our dictionary that was created here and find the

9231
00:04:10,000 --> 00:04:15,000
person who had the highest bid value and then declare them as the winner and

9232
00:04:15,250 --> 00:04:18,670
print out their bid. So it's a relatively simple program,

9233
00:04:18,760 --> 00:04:21,010
at least compared to other things that you've built so far.

9234
00:04:21,370 --> 00:04:24,760
So this is the time to pause the video and give it a go.

9235
00:04:26,050 --> 00:04:29,110
I'll see you on the next lesson where we'll go through the solution together.

9236
00:00:00,120 --> 00:00:02,850
All right, so how did you get on with today's project?

9237
00:00:03,210 --> 00:00:07,190
Hopefully it went really well and you're just here to see how I did it.

9238
00:00:07,860 --> 00:00:13,860
As I mentioned before, it's really useful when you're trying to create a large project to break it

9239
00:00:13,860 --> 00:00:18,540
down into smaller pieces so that you can tackle each of the pieces one by one.

9240
00:00:18,960 --> 00:00:22,270
And a great way of doing that is by creating your own flowchart.

9241
00:00:22,770 --> 00:00:28,260
So as I've shown you before in the end of the last lesson, this is the flowchart that I've created

9242
00:00:28,260 --> 00:00:34,560
for this particular program, and I'm going to follow it step by step to create this final blind auction

9243
00:00:34,560 --> 00:00:35,100
program.

9244
00:00:35,880 --> 00:00:41,820
The first thing we're going to do is we're going to show the logo from this file art.py, and notice

9245
00:00:41,820 --> 00:00:45,480
how this logo is stored inside a variable called logo.

9246
00:00:46,080 --> 00:00:51,990
The first thing we have to do is to fork our own copy of the starting project, and then we're going

9247
00:00:51,990 --> 00:00:58,410
to look inside the art.py module and then we're going to import that logo.

9248
00:00:58,980 --> 00:01:04,030
So now I can go ahead and print my logo.

9249
00:01:04,830 --> 00:01:10,790
So that's the first step done. Next we're going to ask for a name.

9250
00:01:10,800 --> 00:01:13,030
So that's going to be in the form of an input.

9251
00:01:13,470 --> 00:01:19,020
So let's go ahead and create a variable called name and we're going to set it to be an input.

9252
00:01:19,920 --> 00:01:23,760
And the input is going to say, what is your name?

9253
00:01:25,310 --> 00:01:28,950
So they're going to type in their name and that's going to be stored inside this variable.

9254
00:01:29,690 --> 00:01:35,780
Now, the next thing we're going to do is ask them for their bidding price. We'll say that inside a variable

9255
00:01:35,780 --> 00:01:41,540
called price and we'll create another input to ask them what is your bid?

9256
00:01:42,080 --> 00:01:48,050
And at the end of this, I'm going to add a dollar sign just so that when they are typing their bids,

9257
00:01:48,140 --> 00:01:49,520
they'll see this line.

9258
00:01:49,860 --> 00:01:55,100
And when they start typing, the cursor should be about here so they can see the dollar symbol before

9259
00:01:55,100 --> 00:01:55,730
their price.

9260
00:01:57,050 --> 00:02:03,300
So now we're down to here and we have to add our name and our bidding price into a dictionary.

9261
00:02:03,800 --> 00:02:10,550
Let's go ahead and create it up here and we'll call it bids and it's going to start out as an empty dictionary.

9262
00:02:11,150 --> 00:02:15,680
And then later on, once we've got the name and the price, we said that the name was going to be the

9263
00:02:15,680 --> 00:02:22,850
key and the price was going to be the corresponding value. To add a new entry to our bids dictionary,

9264
00:02:22,970 --> 00:02:28,580
we specify the dictionary, we add a set of square brackets, and then we add the key.

9265
00:02:29,060 --> 00:02:33,230
The key is going to be the name and the value is going to be the price.

9266
00:02:33,410 --> 00:02:34,940
So we would write it like this.

9267
00:02:36,800 --> 00:02:42,410
Now, we get down to the slightly trickier part. We're going to ask if there are any other users who

9268
00:02:42,410 --> 00:02:47,840
want to bid. And if the answer is yes, then we're going to clear the screen and we're going to loop

9269
00:02:47,840 --> 00:02:51,260
back to where we ask for the next name and the next bid price.

9270
00:02:52,190 --> 00:02:53,990
How do we achieve this?

9271
00:02:56,090 --> 00:03:01,720
Well, we can put this into a while loop. Let's go ahead and indent this.

9272
00:03:02,090 --> 00:03:09,260
So I just typed command and then the right-sided square bracket. Or on Windows, it will be control and the right

9273
00:03:09,260 --> 00:03:10,270
side of the square bracket.

9274
00:03:10,670 --> 00:03:13,070
And then we can wrap this into a while loop.

9275
00:03:13,610 --> 00:03:18,950
If we had some sort of variable that would keep track whether if the bidding is finished.

9276
00:03:19,370 --> 00:03:22,190
So let's call it bidding_finished.

9277
00:03:23,300 --> 00:03:25,460
And of course, it starts out being False.

9278
00:03:26,120 --> 00:03:34,850
Now, while bidding is not finished, so while not bidding_finished, so basically while this is still

9279
00:03:34,850 --> 00:03:39,190
false, then we're going to keep running this until forever.

9280
00:03:39,770 --> 00:03:42,290
But of course, we need a way to stop this.

9281
00:03:42,290 --> 00:03:49,880
So we're going to create a new input where we ask the user, "are there any other bidders?"

9282
00:03:51,540 --> 00:03:54,030
Type "yes" or

9283
00:03:55,360 --> 00:04:02,680
"no". This way we get to get an input which is going to be either the word yes or the word no, and

9284
00:04:02,680 --> 00:04:07,400
we can save this inside a variable called maybe should_continue.

9285
00:04:08,320 --> 00:04:17,740
So this way we can check this variable and we can see, well, if should_continue is equal to "no",

9286
00:04:18,100 --> 00:04:24,400
well, in that case, that's when we're going to flip the switch and change this bidding_finished variable

9287
00:04:24,670 --> 00:04:25,600
to true.

9288
00:04:26,190 --> 00:04:32,350
So this means that when we get to the end of this block in the while loop, then when it checks this

9289
00:04:32,560 --> 00:04:37,010
bidding_finished, it's not going to continue to loop anymore.

9290
00:04:37,780 --> 00:04:44,620
Now, on the other hand, if should_continue was yes or in fact any other value, then we can keep continuing

9291
00:04:44,620 --> 00:04:48,910
and we don't actually have to change this variable because it's already false.

9292
00:04:50,500 --> 00:05:00,850
Now we have our code looping, which means that unless the user types in a 'no' at the very end and bidding

9293
00:05:00,850 --> 00:05:03,700
becomes finished, this is this path.

9294
00:05:04,030 --> 00:05:11,170
Otherwise then we're going to keep going through all of these lines of code which is basically all

9295
00:05:11,170 --> 00:05:16,040
of this until we get to the point where this switch actually gets flipped.

9296
00:05:16,780 --> 00:05:23,200
So if you notice that if the user actually answers yes, then we want to clear the screen before we

9297
00:05:23,200 --> 00:05:24,040
repeat the loop.

9298
00:05:24,550 --> 00:05:26,640
That means we can check to see

9299
00:05:26,650 --> 00:05:30,190
well, elif should continue is equal to.

9300
00:05:30,490 --> 00:05:31,140
yes,

9301
00:05:31,570 --> 00:05:36,850
well, in this case, we're going to call that clear() function that I showed you in the hint at the very

9302
00:05:36,850 --> 00:05:37,370
beginning.

9303
00:05:37,810 --> 00:05:44,260
So this function comes from the replit module and it allows us to clear the output in the console so

9304
00:05:44,260 --> 00:05:51,490
that the previous name and bid gets cleared on off the screen and it leaves a fresh start for the next

9305
00:05:51,490 --> 00:05:52,030
user.

9306
00:05:53,650 --> 00:06:01,090
The last thing we have to do is to actually address this right? So when they answered no, they get taken

9307
00:06:01,090 --> 00:06:08,650
out of the while loop, but we still have to find the highest bidder from our dictionary and to declare

9308
00:06:08,650 --> 00:06:09,860
them as the winner.

9309
00:06:10,570 --> 00:06:11,770
How do we do this?

9310
00:06:14,080 --> 00:06:21,340
Well, let's put this in a separate function. So we could create a new function called find_highest_bidder.

9311
00:06:23,750 --> 00:06:32,870
And this is going to get the bidding_record as the inputs, so this will be the dictionary that represents

9312
00:06:32,870 --> 00:06:40,400
all the bids, the names and the values. I think it's easier if we can visualize what this bidding_

9313
00:06:40,400 --> 00:06:41,680
record might look like.

9314
00:06:42,080 --> 00:06:51,060
So we know it's a dictionary of key-value pairs where each key is a name and each value is a number.

9315
00:06:51,530 --> 00:06:55,580
So let's say we had only two bidders, Angela and James.

9316
00:06:56,030 --> 00:06:58,370
Angela bid $123.

9317
00:06:58,370 --> 00:07:00,990
James bid $321.

9318
00:07:01,130 --> 00:07:03,700
So we can see who's clearly going to be the winner here.

9319
00:07:04,250 --> 00:07:07,100
But how do we get our code to figure that out?

9320
00:07:08,120 --> 00:07:14,680
We need to somehow loop through this dictionary, right? which is called bidding_record.

9321
00:07:15,920 --> 00:07:25,040
We know that we can use a for loop to do this so we can say for each bidder in the bidding_record,

9322
00:07:25,940 --> 00:07:33,410
and this is a good point to remember that when you use a for loop on a dictionary, instead of looping

9323
00:07:33,410 --> 00:07:39,560
through each item in the dictionary, like each of these key-value pairs, it actually loops through

9324
00:07:39,560 --> 00:07:40,940
each of the keys.

9325
00:07:41,360 --> 00:07:47,090
And we covered this in the very first lesson of today where we talked about how the for loop works

9326
00:07:47,090 --> 00:07:53,150
when we're looping through a dictionary. Now, we're going to get hold of each of the bidders inside

9327
00:07:53,180 --> 00:07:54,530
this dictionary.

9328
00:07:55,130 --> 00:07:56,540
So what do we do with it?

9329
00:07:57,260 --> 00:08:00,410
Well, we want to use the key to get the value.

9330
00:08:00,560 --> 00:08:05,630
Let's take the bidding_record and pass in the key,

9331
00:08:06,890 --> 00:08:09,330
and this should give us the value.

9332
00:08:09,710 --> 00:08:16,770
So now we can actually save this inside a variable which I'm going to call bid_amount.

9333
00:08:17,810 --> 00:08:23,090
So the first time this for loop runs, the bid_amount is going to equal 123

9334
00:08:23,690 --> 00:08:31,040
and the next time the for loop runs, the bid amount is going to be equal to 321. If we had some sort

9335
00:08:31,040 --> 00:08:33,320
of way outside of the for loop

9336
00:08:33,330 --> 00:08:42,110
that keeps track of the highest bid, well then we could use this number to check against the current

9337
00:08:42,110 --> 00:08:42,950
bidding amount.

9338
00:08:43,610 --> 00:08:45,560
We can use an if statement to check

9339
00:08:45,560 --> 00:08:53,600
well, if the bid amount is greater than the highest bid, well, in that case, then the highest bid

9340
00:08:53,600 --> 00:08:55,220
becomes the bid amount.

9341
00:08:57,290 --> 00:09:04,700
So what this means is that we start out with a zero. The first time the for loop is run, the bidder

9342
00:09:04,700 --> 00:09:06,280
is going to be equal to Angela,

9343
00:09:06,470 --> 00:09:12,410
the bid amount is going to be equal to Angela as the key passed into this dictionary, which is going

9344
00:09:12,410 --> 00:09:18,960
to get us the value 123. If 123 is greater than zero,

9345
00:09:19,100 --> 00:09:26,960
well, then this highest bid is now going to become 123. The next time the for loop runs

9346
00:09:26,960 --> 00:09:32,060
the bidder is now James and the bid amount is now 321.

9347
00:09:32,570 --> 00:09:37,330
Now we're checking if 321 is greater than the highest bid.

9348
00:09:37,520 --> 00:09:40,990
Remember this, in the last round, got set to 123.

9349
00:09:41,330 --> 00:09:42,680
So this is going to be true.

9350
00:09:42,920 --> 00:09:48,410
And this means James' bid, 321, is now going to be the highest bid.

9351
00:09:49,590 --> 00:09:56,850
In addition to keeping track of the highest bid, we can keep track of the winner. If this is indeed

9352
00:09:56,850 --> 00:10:04,110
true, if the current bidder has the highest bid, well then at the same time as setting the highest

9353
00:10:04,110 --> 00:10:04,390
bid,

9354
00:10:04,620 --> 00:10:07,650
we should also set the winner to the key,

9355
00:10:07,860 --> 00:10:09,210
so the current bidder.

9356
00:10:11,750 --> 00:10:18,500
And once we've gone through this for loop and we've looped through all of the records in the bidding record,

9357
00:10:18,770 --> 00:10:21,380
well then finally we can actually print

9358
00:10:22,670 --> 00:10:25,100
"The winner is..."

9359
00:10:26,140 --> 00:10:34,750
the winner that's stored in this variable. And we're going to say they won with a bid of... and let's add

9360
00:10:34,750 --> 00:10:38,830
a dollar sign and then we're going to pass in the highest_bid.

9361
00:10:40,270 --> 00:10:46,990
Now, we can turn this into an fstring and it will use both of these variables, which is storying

9362
00:10:46,990 --> 00:10:51,580
the highest bid and the winner's name to print out who the winner is.

9363
00:10:52,060 --> 00:10:58,210
So down here, when should_continue is no going down this path,

9364
00:10:58,540 --> 00:11:04,330
we can now print and declare the winner. In addition to saying that bidding finished is true,

9365
00:11:04,600 --> 00:11:11,200
we're also going to call that function, find_highest_bidder, and pass in all of the bids that we

9366
00:11:11,200 --> 00:11:13,240
have been keeping track of over here.

9367
00:11:14,480 --> 00:11:19,940
Now, just before we run our code, let's go through each line and make sure that everything looks all

9368
00:11:19,940 --> 00:11:20,270
right.

9369
00:11:20,780 --> 00:11:23,160
Firstly here, where it says, 'what is your name?'

9370
00:11:23,190 --> 00:11:25,940
maybe we can add a colon and then a space

9371
00:11:26,240 --> 00:11:28,180
so the user starts typing here.

9372
00:11:28,790 --> 00:11:30,240
Then it asks, 'what is your bid?'

9373
00:11:30,320 --> 00:11:35,390
We can add a colon as well and the user will start typing after the dollar sign.

9374
00:11:36,080 --> 00:11:41,720
Now, I can already see a problem that's actually going to happen because of this line 23.

9375
00:11:42,050 --> 00:11:47,210
I wonder if you can spot the issue here, especially if you think about what we're going to do with

9376
00:11:47,210 --> 00:11:48,560
this price later on.

9377
00:11:49,730 --> 00:11:56,300
But I'm going to add one more new line here and then I'm going to run the code and we'll see what actually

9378
00:11:56,300 --> 00:11:56,860
happens.

9379
00:11:58,030 --> 00:11:59,950
So now let's go ahead and run the code.

9380
00:12:02,930 --> 00:12:10,220
And you can see our gavel printed and then it asks us for our name, so I'm just going to put my name and

9381
00:12:10,220 --> 00:12:16,440
then 123. And then one other bidder who's going to be James, 321.

9382
00:12:16,460 --> 00:12:19,570
And now if I say no, there are no more bidders,

9383
00:12:19,940 --> 00:12:21,650
see what happens when I hit enter.

9384
00:12:22,370 --> 00:12:23,600
I get a type error

9385
00:12:23,720 --> 00:12:30,790
and it tells us that the greater sign is not supported between instances of a string and an int

9386
00:12:31,040 --> 00:12:33,500
and this happened on line 16.

9387
00:12:35,130 --> 00:12:42,870
If we take a look at line 16, basically we're comparing the bid amount, which is the value that came

9388
00:12:42,870 --> 00:12:46,490
out of the bidding record, which is what's being passed in here,

9389
00:12:46,950 --> 00:12:53,760
and that, of course, is a dictionary where the keys are the names of the bidders and the value is

9390
00:12:53,790 --> 00:12:54,390
the price.

9391
00:12:54,780 --> 00:12:56,310
So what's actually happening here?

9392
00:12:56,610 --> 00:13:02,820
Well, it's because when I took this price input in, I kept it as a normal input.

9393
00:13:03,060 --> 00:13:06,780
Instead, it should be turned into an integer.

9394
00:13:07,200 --> 00:13:14,370
So that way we can work with it as a number so that when we're comparing it against, say, zero or

9395
00:13:14,370 --> 00:13:18,190
whatever other number later on, it can actually do the comparison.

9396
00:13:18,570 --> 00:13:26,100
It doesn't actually make sense to the computer when you're comparing a string versus a number. That doesn't

9397
00:13:26,100 --> 00:13:26,940
actually work.

9398
00:13:26,970 --> 00:13:30,990
And this was covered when we talked about data types in Python.

9399
00:13:31,680 --> 00:13:33,810
Now, if we hit run again

9400
00:13:35,350 --> 00:13:42,700
and we do the same thing, and when I say no, you can see that it tells me the winner is James with

9401
00:13:42,700 --> 00:13:45,160
a bid of 321.

9402
00:13:46,060 --> 00:13:53,500
Essentially, the hardest part of this challenge is figuring out how to loop through a dictionary and

9403
00:13:53,500 --> 00:14:00,640
get hold of each of the bidders and each of their values and compare them historically against previous

9404
00:14:00,640 --> 00:14:03,070
values inside this dictionary.

9405
00:14:03,790 --> 00:14:11,020
If this function is confusing to you, then I really recommend either going over to Thonny, pasting

9406
00:14:11,020 --> 00:14:14,720
the code in and exploring it by going through it step by step.

9407
00:14:15,250 --> 00:14:20,680
Alternatively, if you can't install Thonny or you don't have access to your normal computer, then you

9408
00:14:20,680 --> 00:14:23,800
can also go to a website called pythontutor.com.

9409
00:14:24,670 --> 00:14:31,420
And this also lets you visualize your code, although in a slightly more simplified way. If I go ahead

9410
00:14:31,420 --> 00:14:38,740
and paste in my function, find_highest_bidder, passing in the bid record, let's go ahead and create

9411
00:14:38,740 --> 00:14:41,100
a new dictionary of bids.

9412
00:14:42,160 --> 00:14:47,770
So now we have a dictionary of bids with two key-value pairs just as we entered before,

9413
00:14:48,160 --> 00:14:56,410
and then I'm going to call this function, find_highest_bidder, and pass in these bids.

9414
00:14:57,370 --> 00:15:03,170
Now, if we go ahead and click visualize execution, you can see it's going to go line by line, and we

9415
00:15:03,170 --> 00:15:06,460
can click next to see how it's jumping through this.

9416
00:15:06,910 --> 00:15:12,980
Firstly, it's bypassing this function, creating this next dictionary.

9417
00:15:13,750 --> 00:15:17,710
So now it's got a function stored somewhere, which is this one,

9418
00:15:17,950 --> 00:15:21,010
it's got a dictionary called bids stored somewhere else.

9419
00:15:21,520 --> 00:15:26,950
And now we actually get to the line, which is going to execute that function and it's going to pass

9420
00:15:26,950 --> 00:15:31,330
over this dictionary of bids to this function.

9421
00:15:31,990 --> 00:15:40,390
And if you step through this line by line, you can see it creating these new variables and populating

9422
00:15:40,420 --> 00:15:42,720
them. The first time we run it

9423
00:15:42,730 --> 00:15:50,400
the highest bidder is zero, the winner is an empty string, and the bidder in the for loop is now Angela.

9424
00:15:50,410 --> 00:15:54,010
It's the first key from the dictionary as it points to here.

9425
00:15:54,610 --> 00:15:55,660
Now if we keep clicking

9426
00:15:55,660 --> 00:16:01,660
next, it works out the bid amount which is the value corresponding to that key, and then it works

9427
00:16:01,660 --> 00:16:08,920
out the highest bid by comparing whether if the current bid amount is greater than the current highest

9428
00:16:08,920 --> 00:16:09,220
bid.

9429
00:16:09,610 --> 00:16:11,900
So 123 is greater than zero

9430
00:16:12,190 --> 00:16:18,820
so when I click next, you'll see highest bid gets replaced with the bid amount and the winner is now

9431
00:16:18,820 --> 00:16:23,830
going to be set as Angela. The next time the loop runs the bidder is

9432
00:16:23,830 --> 00:16:30,040
now James, and if I keep going through this, you can see that James actually ends up with the highest

9433
00:16:30,040 --> 00:16:31,960
bid and becomes the winner.

9434
00:16:32,500 --> 00:16:37,990
So now the for loop is done because it's looped through all items in the dictionary and it's now going

9435
00:16:37,990 --> 00:16:43,190
to print the output, which is 'The winner is James with a bid of $321.'

9436
00:16:43,750 --> 00:16:48,040
This is another way that's really, really helpful to visualize your code.

9437
00:16:48,550 --> 00:16:52,990
And the other great thing is that even if while you're visualizing there's still something you don't

9438
00:16:52,990 --> 00:16:58,350
understand, you can actually click on this button to get live help from users across the Internet.

9439
00:16:58,840 --> 00:17:05,109
And if you want to practice your own debugging, just as we did in today's lesson, you can also click

9440
00:17:05,109 --> 00:17:09,160
to help some of these users who are looking for help with their code.

9441
00:17:09,310 --> 00:17:14,410
And you can practice reading code, understanding code and helping other people with their bugs and

9442
00:17:14,410 --> 00:17:15,119
their issues.

9443
00:17:16,540 --> 00:17:22,329
Finally, if you want to take a look at the completed code for today's project, then as always, you

9444
00:17:22,329 --> 00:17:27,339
can head over tor repl.it/@appbrewery/blind-auction-completed.

9445
00:17:27,910 --> 00:17:34,090
And it's important to remember that this is just one way of completing this project.

9446
00:17:34,120 --> 00:17:40,660
There are lots and lots of other ways. But as long as you test your program thoroughly and it works

9447
00:17:40,660 --> 00:17:44,670
in the same way, then it doesn't matter too much how you've done it.

9448
00:17:45,520 --> 00:17:51,940
But it's important that you've absorbed the knowledge in today's lessons, and the most important of

9449
00:17:51,940 --> 00:18:00,550
which is this concept of dictionaries, adding to dictionaries, and also looping through dictionaries.

9450
00:18:01,330 --> 00:18:07,030
So have a look through the completed code and also have a play around with Python Tutor, which is

9451
00:18:07,030 --> 00:18:09,460
a really great resource for your learning.

9452
00:18:09,940 --> 00:18:13,240
And I'll see you tomorrow for more lessons on Python.



9453
00:00:00,750 --> 00:00:05,010
Hey there! Welcome to Day 10 of a 100 Days of Code

9454
00:00:05,430 --> 00:00:08,560
and today we're gonna learn about functions with

9455
00:00:08,630 --> 00:00:10,850
outputs. Previously

9456
00:00:10,880 --> 00:00:15,770
we've already seen the other two flavors of functions; a plain function and

9457
00:00:15,800 --> 00:00:19,850
also functions with inputs. But in today's lessons,

9458
00:00:19,880 --> 00:00:22,400
we're going to be using the skills that we've learned

9459
00:00:22,730 --> 00:00:26,180
and we're going to be extending our knowledge of functions to build a

9460
00:00:26,210 --> 00:00:30,920
calculator app. I think at some point in every program has lives

9461
00:00:30,950 --> 00:00:33,230
they will have built a calculator app.

9462
00:00:33,440 --> 00:00:37,070
So if that hasn't already happened to you, then today is your lucky day,

9463
00:00:37,130 --> 00:00:39,740
because that's exactly what we're going to be making.

9464
00:00:40,310 --> 00:00:43,580
So it's a simple text base calculator,

9465
00:00:43,820 --> 00:00:48,820
and we can start off by writing a number and then picking one of the operations:

9466
00:00:48,860 --> 00:00:53,420
plus, minus, multiply or divide. So I'm going to divide this by two,

9467
00:00:53,870 --> 00:00:58,370
and then it shows us the full calculation, 5 / 2 = 2.5.

9468
00:00:58,820 --> 00:01:02,810
And now we can continue calculating with the answer from the previous step,

9469
00:01:02,990 --> 00:01:07,190
or we can type 'n' to start a new calculation. Let me type a 'y'

9470
00:01:07,310 --> 00:01:12,200
and maybe I'll do 2.5 + 6 

9471
00:01:13,010 --> 00:01:16,970
and now I get 8.5. By the end of the lessons today,

9472
00:01:17,000 --> 00:01:20,180
you'll have understood how functions really work,

9473
00:01:20,300 --> 00:01:25,300
how you can use them to reduce redundant code and how you can provide inputs to

9474
00:01:26,210 --> 00:01:31,210
functions as well as providing outputs. Once you're ready, head over to the next

9475
00:01:31,820 --> 00:01:33,680
lesson and let's get started.

9476
00:00:00,330 --> 00:00:01,163
To begin

9477
00:00:01,170 --> 00:00:05,460
the first thing I want to talk about is more on functions.

9478
00:00:05,880 --> 00:00:09,120
So we've already seen a couple of things that we can do with functions.

9479
00:00:09,630 --> 00:00:13,860
The first thing I showed you was how to create a very simple bog-standard 

9480
00:00:13,860 --> 00:00:18,060
function using the def, the name, the empty parentheses,

9481
00:00:18,240 --> 00:00:21,690
and then the colon. And then within the body of the function,

9482
00:00:21,780 --> 00:00:26,780
you can do a bunch of things which will be carried out every single time you

9483
00:00:27,420 --> 00:00:30,630
trigger or call the function like this.

9484
00:00:31,260 --> 00:00:35,310
And the first type of function basically just helps you reduce the amount of

9485
00:00:35,310 --> 00:00:36,420
code you have to write

9486
00:00:36,720 --> 00:00:40,980
when you have instructions that you want to execute repeatedly. Now,

9487
00:00:40,980 --> 00:00:45,420
the next type of function we saw actually had something inside the parentheses

9488
00:00:45,930 --> 00:00:50,930
and this something is an input which can be passed over when we call the

9489
00:00:51,480 --> 00:00:53,820
function. So in this case, 123

9490
00:00:53,820 --> 00:00:58,820
is the argument which gets passed into this parameter called something

9491
00:00:59,670 --> 00:01:02,520
and then it gets used within the body of the function.

9492
00:01:03,030 --> 00:01:05,160
The second type of function, the functions

9493
00:01:05,160 --> 00:01:10,160
which allow for inputs, gives us the ability to modify the code in the function

9494
00:01:10,920 --> 00:01:13,740
and to get it to do something different each time

9495
00:01:13,920 --> 00:01:16,350
depending on what input was passed in.

9496
00:01:17,070 --> 00:01:20,820
We're now onto the final sort of flavor functions

9497
00:01:21,270 --> 00:01:22,770
and these are functions

9498
00:01:22,830 --> 00:01:26,280
which allow you to have an output

9499
00:01:26,430 --> 00:01:28,170
once the function is completed.

9500
00:01:28,920 --> 00:01:32,460
We start off with a simple function, and in this case

9501
00:01:32,460 --> 00:01:36,720
you'll notice that even though I could, I'm actually not giving it any inputs.

9502
00:01:36,750 --> 00:01:39,840
The inputs and the outputs are completely separate from each other.

9503
00:01:40,350 --> 00:01:44,940
So this is a normal function that you've seen many times now. And within the

9504
00:01:44,940 --> 00:01:49,740
body of the function, I'm going to do some piece of calculation. Let's say

9505
00:01:49,740 --> 00:01:52,200
I'm going to calculate what is three times two,

9506
00:01:52,560 --> 00:01:56,790
and then save it to a variable called result. Now, once that's done,

9507
00:01:57,060 --> 00:02:00,980
I can use the output keyword, which is return.

9508
00:02:01,460 --> 00:02:04,940
And then after that keyword, I can put whatever it is

9509
00:02:04,940 --> 00:02:09,340
I want to be the output of this function. So in this case,

9510
00:02:09,500 --> 00:02:11,570
the output is the result.

9511
00:02:11,990 --> 00:02:16,990
And what that means is when I call this function later on and it runs,

9512
00:02:18,350 --> 00:02:22,400
then it will go ahead and output this result

9513
00:02:22,880 --> 00:02:27,710
and it replaces this line of code where this function was called.

9514
00:02:28,220 --> 00:02:33,220
Now that result is held in the code where the function was called and I could

9515
00:02:33,770 --> 00:02:38,180
save it to another variable. Result, of course, equals

9516
00:02:38,180 --> 00:02:42,770
3 * 2 and that means this output now equal 6.

9517
00:02:43,280 --> 00:02:47,960
So this is what the code might look like. Somewhere I would define my function

9518
00:02:48,140 --> 00:02:53,120
which has an output, which you can tell by the return keyword. Now,

9519
00:02:53,180 --> 00:02:57,230
at some other point in my code, I decide to call that function

9520
00:02:57,710 --> 00:03:02,710
and once that function executes, that return or whatever is outputted replaces

9521
00:03:03,760 --> 00:03:06,460
the function call. And at the very end,

9522
00:03:06,550 --> 00:03:11,200
it means this variable output will store whatever the output is.

9523
00:03:11,530 --> 00:03:14,710
So in this case, output would be equal to 6.

9524
00:03:15,790 --> 00:03:19,840
The way that I like to think about functions with outputs is almost kind of like

9525
00:03:19,840 --> 00:03:20,890
a machine, right?

9526
00:03:21,400 --> 00:03:26,400
If you had a machine where in goes some empty bottles and after some processing

9527
00:03:27,130 --> 00:03:31,360
or some inputs, outcomes a bottle filled with milk.

9528
00:03:31,750 --> 00:03:36,490
So in this case, this function has an input, the empty glass bottle.

9529
00:03:36,790 --> 00:03:41,380
It has an output, the glass bottle filled with milk and in the middle,

9530
00:03:41,410 --> 00:03:46,410
there's some processes or some code that's being executed to create this change.

9531
00:03:47,560 --> 00:03:50,980
This ties together all the things that we've learned about functions.

9532
00:03:51,430 --> 00:03:55,180
So now head over to the Day 10 starting replit,

9533
00:03:55,690 --> 00:03:59,320
and go ahead and fork your own copy of it. Now,

9534
00:03:59,320 --> 00:04:01,030
once you have your own copy of it,

9535
00:04:01,540 --> 00:04:05,890
we're going to create some functions with outputs of our own.

9536
00:04:06,640 --> 00:04:09,940
Let's start off by creating a new function

9537
00:04:10,330 --> 00:04:12,820
which I'm going to call format_name

9538
00:04:13,390 --> 00:04:18,390
and the reason is because this function is going to take a first name and a last

9539
00:04:19,810 --> 00:04:23,740
name, and it's going to change those inputs,

9540
00:04:24,160 --> 00:04:27,040
even if it was lowercase or if it was all caps,

9541
00:04:27,070 --> 00:04:31,270
it's going to change it into title case, something like this

9542
00:04:31,570 --> 00:04:36,570
where the first letter is capitalized in each word. To begin,

9543
00:04:37,030 --> 00:04:41,770
I want you to create this function and then go ahead and add two inputs to it.

9544
00:04:42,250 --> 00:04:47,200
One could f_name, so first name and another code l_name,

9545
00:04:47,740 --> 00:04:50,710
which is the last name. Pause the video and give that a go.

9546
00:04:53,110 --> 00:04:53,410
All right.

9547
00:04:53,410 --> 00:04:58,410
So all we have to do to add inputs to our function is just to put the names of

9548
00:04:58,660 --> 00:05:01,840
these parameters inside the parentheses.

9549
00:05:02,410 --> 00:05:07,410
So now our function is able to take these parameters as inputs

9550
00:05:07,780 --> 00:05:09,460
whenever this function gets called.

9551
00:05:10,630 --> 00:05:15,630
The next step is we're going to convert these strings that gets passed in,

9552
00:05:16,030 --> 00:05:19,240
so it could be something like this, all lower case.

9553
00:05:19,270 --> 00:05:23,410
It could be all capitalized, or it could be kind of random, right?

9554
00:05:23,410 --> 00:05:26,290
Like some are capitalized, some are not.

9555
00:05:26,650 --> 00:05:29,260
But we're going to make it all uniform,

9556
00:05:29,260 --> 00:05:33,910
so all of these are going to end up like this. And to do this,

9557
00:05:34,270 --> 00:05:39,270
we can search around in Google and you might come across a similar question in

9558
00:05:39,910 --> 00:05:44,740
Stack Overflow: How do you convert a string to title case in Python?

9559
00:05:45,220 --> 00:05:49,810
They have an example and it's trying to do exactly what we're trying to do.

9560
00:05:50,590 --> 00:05:52,660
If we take a look at the answers,

9561
00:05:52,930 --> 00:05:57,250
you can see that somebody is helpfully pointing to this title function.

9562
00:05:57,680 --> 00:06:02,390
So you take a string and then you write .title and then afterwards,

9563
00:06:02,390 --> 00:06:07,390
the string gets transformed and every word now starts off with a capital letter.

9564
00:06:09,650 --> 00:06:12,950
And if you want to know more about how this title case works,

9565
00:06:13,250 --> 00:06:17,420
then you can click on that link in title and then have a read through the Python

9566
00:06:17,420 --> 00:06:21,200
documentation. Once you've read through that,

9567
00:06:21,410 --> 00:06:26,410
go ahead and modify this Fname and Lname so that they end up being both in

9568
00:06:28,520 --> 00:06:31,340
title case. Pause the video and give that a go.

9569
00:06:33,700 --> 00:06:34,490
Right?

9570
00:06:34,490 --> 00:06:34,810
All right.

9571
00:06:34,810 --> 00:06:39,810
So we want to go ahead and take this Fname and then write a dot and then write

9572
00:06:40,160 --> 00:06:43,660
title to convert it to title case.

9573
00:06:44,410 --> 00:06:48,640
Once we've done that, then we're going to do the same with the l_name.

9574
00:06:50,260 --> 00:06:53,530
And if we go ahead and actually print these out,

9575
00:06:54,880 --> 00:06:57,460
and of course, in order for the function to actually execute,

9576
00:06:57,760 --> 00:07:02,080
we'll have to call the function. So I'm going to put two inputs in here,

9577
00:07:02,080 --> 00:07:07,000
one which is going to be, um, just angela, all in lowercase

9578
00:07:07,510 --> 00:07:11,620
and then the second one is going to be ANGELA all in up a case.

9579
00:07:12,190 --> 00:07:14,140
And now when I run this code,

9580
00:07:14,530 --> 00:07:18,640
you'll see that the result is they both get converted to title case.

9581
00:07:19,270 --> 00:07:19,960
In essence,

9582
00:07:19,960 --> 00:07:24,960
this part of the code becomes whatever the previous value of f_name is converted

9583
00:07:25,240 --> 00:07:30,240
to title case. You might have spotted already that this title function actually

9584
00:07:31,930 --> 00:07:33,400
has an output.

9585
00:07:33,730 --> 00:07:38,410
It returns a version of the string where each word is title cased.

9586
00:07:39,070 --> 00:07:41,770
Instead of simply just printing this,

9587
00:07:42,100 --> 00:07:44,980
we can also capture it inside a variable.

9588
00:07:45,460 --> 00:07:50,460
Let's create a new variable called formatted_f_name and also

9589
00:07:55,330 --> 00:07:57,490
formatted_l_name.

9590
00:07:58,690 --> 00:08:03,690
Now what's happening here is we are transforming this input f_name,

9591
00:08:05,680 --> 00:08:08,140
turning it into title case.

9592
00:08:08,560 --> 00:08:11,530
And then once this function executes,

9593
00:08:11,860 --> 00:08:16,860
it has an output and that output replaces this part of the code

9594
00:08:17,590 --> 00:08:20,830
and then it gets stored inside this variable.

9595
00:08:21,490 --> 00:08:26,020
Now we can go ahead and print the final version of our function

9596
00:08:26,380 --> 00:08:31,380
which is going to use an fstring to take the formatted Fname and then add a

9597
00:08:32,049 --> 00:08:37,049
space and then print out the formatted Lname, like this.

9598
00:08:39,280 --> 00:08:43,090
Now, if I start out with my first name

9599
00:08:43,120 --> 00:08:46,000
but all in strange sort of casing,

9600
00:08:46,330 --> 00:08:48,730
and then my last name in all caps,

9601
00:08:49,030 --> 00:08:51,580
let's go ahead and hit run and see what happens.

9602
00:08:52,240 --> 00:08:55,180
You can see that my first name gets converted to title the case,

9603
00:08:55,230 --> 00:08:57,600
my last name gets converted to title case

9604
00:08:57,990 --> 00:09:01,320
and then that result is stored in formatted Fname

9605
00:09:01,590 --> 00:09:05,130
and this result becomes stored in this Lname,

9606
00:09:05,460 --> 00:09:10,200
and then they get printed and formatted, like so. Now

9607
00:09:10,230 --> 00:09:13,110
instead of printing this result out,

9608
00:09:13,140 --> 00:09:18,140
we could also return it as well. In the same way that this title function

9609
00:09:19,650 --> 00:09:23,370
returns the output, replaces this part of the code,

9610
00:09:23,670 --> 00:09:27,330
we can also do the same with our format_name function.

9611
00:09:27,720 --> 00:09:32,520
So let's delete the print function and go ahead and use return

9612
00:09:32,550 --> 00:09:33,383
instead.

9613
00:09:34,440 --> 00:09:38,100
Now this formatted string becomes the output

9614
00:09:38,520 --> 00:09:40,380
and as we mentioned before,

9615
00:09:40,500 --> 00:09:45,500
what happens with functions with outputs is this output replaces the part of the

9616
00:09:46,620 --> 00:09:50,190
code where the function was called. Now,

9617
00:09:50,250 --> 00:09:53,280
if this is the string that we want to print,

9618
00:09:53,580 --> 00:09:58,050
then all we have to do is just to save the output

9619
00:09:58,110 --> 00:10:03,060
which replaces this part of the code inside a variable like this.

9620
00:10:03,660 --> 00:10:08,660
And then all we have to do is just go ahead and print that formatted string.

9621
00:10:10,170 --> 00:10:15,000
As you can see, when I run the code, the same thing happens. Now you can,

9622
00:10:15,090 --> 00:10:17,280
and you might've alternatively,

9623
00:10:17,310 --> 00:10:22,310
just taken this function call and put it straight inside the print statement.

9624
00:10:22,830 --> 00:10:24,930
That works exactly the same way.

9625
00:10:25,260 --> 00:10:27,870
And we can visualize this using Thonny.

9626
00:10:28,350 --> 00:10:33,350
If I go ahead and paste everything we have inside the editor and go ahead and

9627
00:10:34,110 --> 00:10:35,070
run debug,

9628
00:10:37,410 --> 00:10:41,760
then we can step into and see what are the steps that happen.

9629
00:10:42,270 --> 00:10:43,290
So the first thing

9630
00:10:43,410 --> 00:10:48,410
when this line 6 gets executed is it tries to call this function, format_name.

9631
00:10:50,190 --> 00:10:52,740
So it passes in these two inputs.

9632
00:10:54,000 --> 00:10:59,000
And we're now within the function where we have access to these two inputs,

9633
00:10:59,310 --> 00:11:00,660
Fname and Lname.

9634
00:11:01,410 --> 00:11:04,320
Now the formated_f_name becomes the title-cased

9635
00:11:04,320 --> 00:11:08,790
version of the first name and the same thing happens with the last name.

9636
00:11:09,090 --> 00:11:12,930
So we now have a formatted_f_name and a formatted_l_name

9637
00:11:13,320 --> 00:11:16,800
and that is what's going to be returned as the output.

9638
00:11:18,240 --> 00:11:22,230
Now, once that's completed, that output replaces

9639
00:11:22,260 --> 00:11:24,840
whatever was in between the print statement,

9640
00:11:25,140 --> 00:11:27,720
which is where we called this format name function

9641
00:11:28,110 --> 00:11:32,670
and this is what gets printed into the console. As I mentioned before,

9642
00:11:32,670 --> 00:11:37,530
we've actually already been using functions that we didn't create that have all

9643
00:11:37,530 --> 00:11:40,290
of these functionalities, right? For example,

9644
00:11:40,320 --> 00:11:44,190
the Len function takes an input and has an output.

9645
00:11:44,760 --> 00:11:47,370
The input is going to be a string,

9646
00:11:47,730 --> 00:11:51,300
my name again, seemed to be really obsessed with my own name.

9647
00:11:52,380 --> 00:11:57,160
So now this line of code is going to run this built in len function,

9648
00:11:57,640 --> 00:12:01,570
calculating the number of letters inside this input that we've given it.

9649
00:12:02,080 --> 00:12:04,900
And then it's going to return the result as an output,

9650
00:12:05,260 --> 00:12:08,320
which we can now capture inside a variable.

9651
00:12:09,040 --> 00:12:12,490
This is the inputs, this is the function

9652
00:12:12,910 --> 00:12:15,190
and once this is completed,

9653
00:12:15,490 --> 00:12:20,490
the return or whatever it is after the return statement is going to replace this

9654
00:12:21,940 --> 00:12:23,140
part of the code.

9655
00:12:23,650 --> 00:12:28,240
Then that result or output then gets stored inside of this variable.

9656
00:12:29,560 --> 00:12:34,150
So this return keyword is really the most important thing in order to create a

9657
00:12:34,150 --> 00:12:36,100
function that has an output,

9658
00:12:36,130 --> 00:12:41,130
because everything that comes after it is going to replace where the function

9659
00:12:41,170 --> 00:12:43,780
was called. In the next lesson

9660
00:12:43,810 --> 00:12:48,730
we'll take a quick look at the return keyword in more detail. Specifically,

9661
00:12:48,760 --> 00:12:49,840
let's see what happens

9662
00:12:49,870 --> 00:12:54,490
when we have more than one return statement in the same function. All right.

9663
00:12:54,700 --> 00:12:56,710
For all of that and more, I'll see you there.

9664
00:00:00,480 --> 00:00:04,530
In the last lesson, we looked at functions that return some sort of value.

9665
00:00:05,010 --> 00:00:09,570
We created a function called format_name that returned a string. In this

9666
00:00:09,570 --> 00:00:10,080
lesson

9667
00:00:10,080 --> 00:00:14,160
let's see what happens when a function has more than one return statement.

9668
00:00:14,520 --> 00:00:18,600
When the computer encounters a line that has the word return on it,

9669
00:00:19,140 --> 00:00:22,560
then it knows that this line is the end of the function.

9670
00:00:23,100 --> 00:00:28,100
If I add a line of code after the return keyword, notice what happens when I run

9671
00:00:29,970 --> 00:00:33,630
this code. It doesn't ever get executed.

9672
00:00:33,930 --> 00:00:38,930
And this has because the return tells the computer that this is the end of the

9673
00:00:39,480 --> 00:00:42,420
function and you should now exit the function.

9674
00:00:43,020 --> 00:00:47,130
You can actually have multiple return keywords within the same function,

9675
00:00:47,640 --> 00:00:51,300
and you can even have a empty return keyword.

9676
00:00:51,360 --> 00:00:55,170
So just the return keyword without anything afterwards.

9677
00:00:55,590 --> 00:00:56,790
So for example,

9678
00:00:56,820 --> 00:01:01,820
we could check whether if the fname is equal to an empty string or the lname

9679
00:01:04,470 --> 00:01:07,620
is equal to an empty string. So this case,

9680
00:01:07,620 --> 00:01:12,540
it means that when we called it format name, maybe we didn't give it any inputs.

9681
00:01:13,050 --> 00:01:17,430
For example, let's say that instead of just calling the function as it is,

9682
00:01:17,670 --> 00:01:20,400
we actually used the input function.

9683
00:01:20,580 --> 00:01:25,580
So what is your first name and what is your last name?

9684
00:01:28,350 --> 00:01:28,890
Now

9685
00:01:28,890 --> 00:01:33,890
what happens is it'll ask us for a input and it will take these two inputs

9686
00:01:36,990 --> 00:01:41,990
and then call that function and return the formatted version to be printed.

9687
00:01:43,470 --> 00:01:47,820
So now in this case, it's possible that we might have just not given it

9688
00:01:47,880 --> 00:01:52,880
a first name or not given it a last name and it probably shouldn't go through

9689
00:01:53,730 --> 00:01:57,660
these lines of code. But at the moment, it's still running this function

9690
00:01:57,960 --> 00:02:01,650
trying to get the title case from the empty string and then printing it.

9691
00:02:02,310 --> 00:02:06,360
And I can prove this to you by just adding an extra word in here.

9692
00:02:06,870 --> 00:02:09,479
So again, empty first name, empty, last name,

9693
00:02:09,900 --> 00:02:13,590
and then it's print result and then of course nothing.

9694
00:02:14,220 --> 00:02:19,220
How can we get it to bypass the rest of the code if the user typed in an empty

9695
00:02:19,830 --> 00:02:21,990
first name or last name? Well,

9696
00:02:21,990 --> 00:02:25,410
we could use what I mentioned before, an early return.

9697
00:02:25,860 --> 00:02:29,400
So we could just write return without anything afterwards

9698
00:02:29,730 --> 00:02:32,730
and this is going to escape the function.

9699
00:02:33,120 --> 00:02:35,850
So it's basically going to terminate the function early.

9700
00:02:36,690 --> 00:02:41,010
Now this time, if I leave an empty first name and last name,

9701
00:02:41,250 --> 00:02:46,250
you'll see it prints none because there is no output from this to print.

9702
00:02:47,700 --> 00:02:48,600
Now, of course,

9703
00:02:48,630 --> 00:02:53,340
it's probably safer to actually return something that tells the developer what's

9704
00:02:53,340 --> 00:02:57,240
actually going on so we can give a meaningful message,

9705
00:02:57,300 --> 00:03:00,580
like return, something like this.

9706
00:03:01,090 --> 00:03:06,090
So this way we can catch the cases when something is not quite right and then

9707
00:03:06,400 --> 00:03:11,200
exit our function instead of wasting time for it to continue working on

9708
00:03:11,200 --> 00:03:12,820
something that we don't want it to do.

9709
00:03:14,140 --> 00:03:17,050
We've covered a number of things in today's lesson

9710
00:03:17,530 --> 00:03:22,530
and I want you to combine this with your existing knowledge to tackle the

9711
00:03:22,990 --> 00:03:24,850
challenge in the next lesson

9712
00:03:25,300 --> 00:03:30,300
to get to grips with this concept of functions with inputs and with outputs.

9713
00:00:00,360 --> 00:00:04,440
Head over to the Repl.it day 10.1 Days in Month

9714
00:00:04,500 --> 00:00:06,810
coding exercise. Here,

9715
00:00:06,840 --> 00:00:11,840
you'll notice that I've copied over the is_leap year function that we created

9716
00:00:12,780 --> 00:00:16,260
a while back in another coding exercise. Now,

9717
00:00:16,290 --> 00:00:21,240
the first thing I want you to do is to modify this function so that instead of

9718
00:00:21,270 --> 00:00:24,150
printing leap year or not leap year,

9719
00:00:24,510 --> 00:00:29,070
we're actually just going to return true if it is a leap year and false

9720
00:00:29,130 --> 00:00:30,540
if it is not a leap year,

9721
00:00:31,080 --> 00:00:34,890
because we're going to be using that function in the next function that you're

9722
00:00:34,890 --> 00:00:35,723
going to modify,

9723
00:00:36,210 --> 00:00:40,590
which is a function that's going to tell you how many days there are in the

9724
00:00:40,590 --> 00:00:44,670
month that you specify. So for example,

9725
00:00:45,090 --> 00:00:49,860
if I was to call days_in_month and passing in the year as 

9726
00:00:49,860 --> 00:00:52,800
2022 in the month as 2,

9727
00:00:53,130 --> 00:00:55,950
then I should get an output of 28,

9728
00:00:56,160 --> 00:01:00,240
as in there's 28 days in February, 2022.

9729
00:01:00,870 --> 00:01:04,650
This is the reason why we need to know about leap years

9730
00:01:04,680 --> 00:01:09,270
'cause in a leap year, there's actually 29 days in February.

9731
00:01:09,840 --> 00:01:12,690
You're going to combine the output from this function

9732
00:01:13,050 --> 00:01:16,530
as well as this list of days_in_month

9733
00:01:16,830 --> 00:01:20,880
in order to modify this function to output the number of days in a month

9734
00:01:21,030 --> 00:01:22,950
when this line of code is called.

9735
00:01:23,430 --> 00:01:26,460
It's really important that you don't change any of the code below,

9736
00:01:26,820 --> 00:01:31,140
but you are going to modify this function and add more lines of code in it.

9737
00:01:32,280 --> 00:01:34,260
Take a look at the hints if you get stuck,

9738
00:01:34,410 --> 00:01:37,020
but otherwise, pause the video and give it a go.

9739
00:01:40,460 --> 00:01:40,790
All right.

9740
00:01:40,790 --> 00:01:44,390
So the first thing I'm going to do is I'm going to change each of these print

9741
00:01:44,390 --> 00:01:48,200
statements so that it returns a Boolean instead.

9742
00:01:48,680 --> 00:01:52,880
So this one should return true, and this one should return true. Now,

9743
00:01:52,880 --> 00:01:56,210
when it's not a leap year, I'm going to return false

9744
00:01:56,270 --> 00:01:58,310
instead. This way,

9745
00:01:58,310 --> 00:02:03,110
basically, when we call this function, is_leap, passing in a year,

9746
00:02:03,440 --> 00:02:06,980
then we'll get the output as either true or false.

9747
00:02:07,460 --> 00:02:11,540
So we can now use that inside our function days_in_month.

9748
00:02:11,930 --> 00:02:14,570
But before we do that, we need to get some inputs.

9749
00:02:14,810 --> 00:02:19,430
We need to know what is the year and what is the month the user is interested

9750
00:02:19,430 --> 00:02:24,260
in. So that is going to be passed in using these positional arguments.

9751
00:02:24,950 --> 00:02:28,640
We're going to ask the user to input a year and input a month,

9752
00:02:28,970 --> 00:02:33,970
and then each of these pieces of data gets passed into here and here,

9753
00:02:34,340 --> 00:02:37,340
which will end up inside our function ready for use.

9754
00:02:38,600 --> 00:02:43,130
The first thing I'm going to check is if the year is a leap year.

9755
00:02:43,940 --> 00:02:45,530
How are we going to do that? Well,

9756
00:02:45,530 --> 00:02:50,000
we're going to use our function here, is_leap, passing in that year,

9757
00:02:50,270 --> 00:02:53,960
and then the output will be checked using the if statement.

9758
00:02:54,560 --> 00:02:59,560
Remember that the way that if statements work is that if something is evaluated to true,

9759
00:03:00,490 --> 00:03:03,220
then it's gonna carry out the line of code below.

9760
00:03:03,550 --> 00:03:07,510
But if it was evaluated and it turned out to be false,

9761
00:03:07,720 --> 00:03:09,670
then it's going to skip this line of code.

9762
00:03:10,390 --> 00:03:14,920
So instead of using true or false, or if a three is bigger than two,

9763
00:03:15,250 --> 00:03:20,250
we're going to use the function, is_leap, and pass in the year that we got as an

9764
00:03:21,310 --> 00:03:23,350
input. So this way,

9765
00:03:23,380 --> 00:03:27,190
when a year is tested in this function,

9766
00:03:27,580 --> 00:03:30,700
then it's going to output either true or false

9767
00:03:30,730 --> 00:03:35,730
which is going to replace this part of the code because it's the output from

9768
00:03:36,010 --> 00:03:39,670
this function. So now if that output is true,

9769
00:03:40,060 --> 00:03:41,680
namely it is a leap year,

9770
00:03:42,190 --> 00:03:46,780
then we're going to check if the month they were interested in was the month of

9771
00:03:46,780 --> 00:03:50,290
February. So if the is_leap year

9772
00:03:50,290 --> 00:03:55,000
is true and the month is equal to 2, well,

9773
00:03:55,000 --> 00:03:55,810
in that case,

9774
00:03:55,810 --> 00:04:00,810
then we're going to return 29 because there's 29 days in February in a leap year.

9775
00:04:02,560 --> 00:04:04,240
If this is the case,

9776
00:04:04,270 --> 00:04:08,920
then this function is going to end right here when it returns 29.

9777
00:04:09,520 --> 00:04:11,440
But if this is not the case,

9778
00:04:11,470 --> 00:04:16,329
then it's going to bypass this line of code and we can output the number of days

9779
00:04:16,329 --> 00:04:20,110
in a month for any other condition, so when it's not a leap year.

9780
00:04:20,829 --> 00:04:25,830
We can go ahead and simply just use the return statement to tap into that list

9781
00:04:26,020 --> 00:04:27,700
called month_days

9782
00:04:28,240 --> 00:04:32,380
and we're gonna pull out the value at the current month

9783
00:04:32,410 --> 00:04:33,580
that's being requested.

9784
00:04:34,030 --> 00:04:39,030
But remember that because lists start counting from zero and the month that the

9785
00:04:39,250 --> 00:04:42,100
user's going to be interested in doesn't start from zero,

9786
00:04:42,220 --> 00:04:45,460
so if they're interested in January then this month,

9787
00:04:45,610 --> 00:04:49,660
instead of being 1, should actually be 0 to pull out this 31.

9788
00:04:49,960 --> 00:04:52,990
So then we actually have to subtract one from it.

9789
00:04:54,220 --> 00:04:58,120
So now if we test the code and we enter the year 

9790
00:04:58,120 --> 00:05:01,270
2022 and the month of February,

9791
00:05:01,630 --> 00:05:04,900
then we'll get the correct output, which is 28.

9792
00:05:05,890 --> 00:05:09,100
That solves the challenge. Now, some of you, I know,

9793
00:05:09,100 --> 00:05:14,100
might have gone even further because we talked about using the return statement to

9794
00:05:15,550 --> 00:05:20,320
catch out any situations where there might be invalid inputs.

9795
00:05:20,680 --> 00:05:21,670
So you could,

9796
00:05:21,700 --> 00:05:25,900
if you wanted to, also add an if statement that checks

9797
00:05:25,900 --> 00:05:30,900
whether if the month is greater than 12 or if the month is less than one. In

9798
00:05:34,390 --> 00:05:35,350
these cases,

9799
00:05:35,380 --> 00:05:40,380
then it's actually an invalid input and you could just return invalid month. And

9800
00:05:42,430 --> 00:05:44,710
you could of course do the same thing for the year.

9801
00:05:44,980 --> 00:05:49,980
And this way it ensures that our function doesn't progress unless we have clean

9802
00:05:50,800 --> 00:05:51,633
data.

9803
00:05:52,270 --> 00:05:57,270
But this, of course, is not necessary to complete the challenge because we're now able

9804
00:05:57,770 --> 00:06:02,330
to figure out the days in the month using this leap year function's output,

9805
00:06:02,810 --> 00:06:07,810
and the output from our days_in_month function. In the next lesson,

9806
00:06:08,900 --> 00:06:12,920
I'm going to address something that a lot of students are thinking at this

9807
00:06:12,920 --> 00:06:16,460
point. And the question is why return at all?

9808
00:06:16,850 --> 00:06:20,420
Why not just simply print the outputs instead,

9809
00:06:21,320 --> 00:06:25,670
because this way it seems to end up doing the same thing, right?

9810
00:06:25,730 --> 00:06:28,370
It's still going to print this down here.

9811
00:06:28,850 --> 00:06:33,850
And if we just added a print to this return and a print here and got rid of this

9812
00:06:35,030 --> 00:06:38,360
one, then it would still behave exactly the same.

9813
00:06:39,140 --> 00:06:42,290
This is exactly what I want to talk about in the next lessons.

9814
00:06:42,500 --> 00:06:43,430
So, see you there.

9815
00:00:00,090 --> 00:00:00,780
Hey guys,

9816
00:00:00,780 --> 00:00:05,780
I want to quickly spend a few minutes talking about a concept in Python known as

9817
00:00:05,939 --> 00:00:06,780
Docstrings.

9818
00:00:07,410 --> 00:00:12,410
Docstrings are basically a way for us to create little bits of documentation as

9819
00:00:12,780 --> 00:00:16,680
we're coding along in our functions or in our other blocks of code.

9820
00:00:17,490 --> 00:00:20,970
Now, previously, we've seen that when we use other functions

9821
00:00:20,970 --> 00:00:25,740
like the ones that were ready to find by Python, like the length function,

9822
00:00:26,070 --> 00:00:29,310
you can see that as soon as I open up my parentheses,

9823
00:00:29,640 --> 00:00:34,170
I can see this little piece of documentation that tells me what this function is

9824
00:00:34,170 --> 00:00:38,370
actually going to do, namely return the number of items in a container.

9825
00:00:39,000 --> 00:00:43,500
So how can we create the same kind of documentation for the functions that we

9826
00:00:43,500 --> 00:00:46,590
write? Well, we would do that using docstrings.

9827
00:00:46,980 --> 00:00:51,570
The docstring has to go as the first line after the declaration.

9828
00:00:51,900 --> 00:00:55,590
So here we've defined the name of our function, the inputs,

9829
00:00:55,800 --> 00:01:00,420
and then after the colon, the first indented line will be the docstring.

9830
00:01:00,810 --> 00:01:01,590
But that's not it.

9831
00:01:01,590 --> 00:01:06,590
You also have to use three of these quotation marks and it's in between these

9832
00:01:08,460 --> 00:01:11,550
three quotation marks that you can write your documentation.

9833
00:01:12,510 --> 00:01:14,820
We could write something like, well, what is this format_

9834
00:01:14,820 --> 00:01:16,260
name function going to do?

9835
00:01:16,290 --> 00:01:21,290
What would we want our future selves or another user who's using this function

9836
00:01:21,300 --> 00:01:22,530
to know about it? Well,

9837
00:01:22,530 --> 00:01:27,530
it's going to take a first and last name and format,

9838
00:01:29,360 --> 00:01:30,193
it.

9839
00:01:33,110 --> 00:01:34,730
Notice how with docstrings

9840
00:01:34,820 --> 00:01:39,440
you can actually write strings that are multi-line. Normally,

9841
00:01:39,440 --> 00:01:42,620
if I was to create a normal string, let's say, I dunno,

9842
00:01:42,710 --> 00:01:44,530
a = "A String".

9843
00:01:46,370 --> 00:01:47,720
If I hit the enter key,

9844
00:01:47,780 --> 00:01:51,770
I'm going to get a warning because it's going to interpret this as the end of

9845
00:01:51,770 --> 00:01:52,603
this line.

9846
00:01:53,090 --> 00:01:57,920
And it won't see this closing quotation mark as being a part of this string.

9847
00:01:58,670 --> 00:02:03,080
But when we use a docstring, we can write as many lines as we want

9848
00:02:03,380 --> 00:02:07,220
and it will be interpreted all as the same thing altogether,

9849
00:02:07,490 --> 00:02:11,210
as if it was fitted onto the same line like this.

9850
00:02:12,470 --> 00:02:17,330
Now that we've added our docstring, it's time to see what it looks like. Now,

9851
00:02:17,330 --> 00:02:21,590
if I call this function format_name, and I open up the parentheses,

9852
00:02:21,890 --> 00:02:26,890
you can see that the text we wrote here now gets populated in the documentation.

9853
00:02:27,650 --> 00:02:31,430
It takes the first and last name and formats it to return the title

9854
00:02:31,430 --> 00:02:32,690
case version of the name.

9855
00:02:33,650 --> 00:02:37,850
So this is a way for you to be able to start documenting your functions and

9856
00:02:37,850 --> 00:02:40,460
giving each function a little bit of an explainer.

9857
00:02:41,120 --> 00:02:46,120
Now you can also use this as a multiline comment.

9858
00:02:46,460 --> 00:02:49,700
So notice how when we write a comment and we go to the next line

9859
00:02:49,760 --> 00:02:50,900
it becomes code again.

9860
00:02:51,470 --> 00:02:54,860
Now you can in fact use something like this

9861
00:02:55,190 --> 00:02:58,850
where you just comment as many lines as you like

9862
00:02:59,140 --> 00:03:02,050
and this will be interpreted as a comment

9863
00:03:02,350 --> 00:03:05,500
as long as it's not assigned to anything. So for example,

9864
00:03:05,500 --> 00:03:06,820
if I create a variable

9865
00:03:07,150 --> 00:03:11,290
then this is now a piece of code. Because it's a little bit confusing

9866
00:03:11,320 --> 00:03:15,700
the official Python guidance is actually to avoid multiline comments like this.

9867
00:03:15,910 --> 00:03:20,910
What is actually much easier is to just write your multiline comment and then to

9868
00:03:21,760 --> 00:03:26,380
highlight all of it and then to hit command + forward slash or control + forward

9869
00:03:26,380 --> 00:03:27,370
slash on Windows.

9870
00:03:28,030 --> 00:03:32,350
That's a much better way of differentiating the comment from actual pieces of

9871
00:03:32,350 --> 00:03:33,183
code.

9872
00:03:33,730 --> 00:03:38,710
Have a go at adding docstrings to the other functions that you've created and

9873
00:03:38,710 --> 00:03:41,110
see it show up when you call your functions.

9874
00:00:00,150 --> 00:00:03,630
So we're now ready to tackle our final project of the day

9875
00:00:03,900 --> 00:00:06,900
and that's building up a calculator program.

9876
00:00:07,950 --> 00:00:12,150
If you head over to calculator-final.appbrewery.repl.run,

9877
00:00:12,450 --> 00:00:14,610
you'll see how the final project works.

9878
00:00:15,240 --> 00:00:20,240
We get to enter a number and then pick an operation and then pick the next

9879
00:00:21,360 --> 00:00:25,500
number and it will calculate the result. Now,

9880
00:00:25,800 --> 00:00:26,550
at this point,

9881
00:00:26,550 --> 00:00:30,900
we can either continue to calculate with the result from the previous step.

9882
00:00:30,960 --> 00:00:34,860
So let's multiply it by two, alternatively,

9883
00:00:34,890 --> 00:00:39,240
I can type N and that clears the screen and lets me start out a new

9884
00:00:39,240 --> 00:00:40,170
calculation,

9885
00:00:42,990 --> 00:00:44,760
like so. Now,

9886
00:00:44,790 --> 00:00:48,570
because a lot of the concepts that are covered in this project are actually

9887
00:00:48,570 --> 00:00:49,440
quite difficult,

9888
00:00:49,830 --> 00:00:53,850
I want to go through this project together and while we're building it up,

9889
00:00:53,910 --> 00:00:58,910
there's also a lot of small challenges along the way that I want you to tackle.

9890
00:00:59,700 --> 00:01:04,379
Once you're ready, head over to the calculator starting file and fork

9891
00:01:04,379 --> 00:01:06,210
your own copy to get started.

9892
00:01:06,380 --> 00:01:07,213
Right?

9893
00:01:09,170 --> 00:01:13,520
This calculator is going to have some different functions that it can do.

9894
00:01:13,670 --> 00:01:17,270
So for example, it will start out with a add function,

9895
00:01:17,720 --> 00:01:20,960
which takes two inputs and n1 and n2,

9896
00:01:21,440 --> 00:01:26,030
and then it's simply just returns n1 + n2.

9897
00:01:26,900 --> 00:01:29,930
This is pretty simple. This is all that there is to

9898
00:01:29,930 --> 00:01:33,920
the functionality of adding, takes one number and adds it to the other one.

9899
00:01:34,550 --> 00:01:39,550
And I want you to go ahead to create the functions in the same format for these

9900
00:01:41,360 --> 00:01:45,620
other mathematical operations. So subtract,

9901
00:01:45,770 --> 00:01:50,720
multiply, and divide. Pause the video and complete this challenge.

9902
00:01:51,860 --> 00:01:52,693
Right?

9903
00:01:54,800 --> 00:01:58,430
All right. So subtract is as simple as add.

9904
00:01:58,490 --> 00:02:02,420
So we'll just call it subtract. We pass in again

9905
00:02:02,480 --> 00:02:04,550
two numbers, n1 and n2,

9906
00:02:05,090 --> 00:02:09,530
and we'll return the outcome as n1 - n2.

9907
00:02:11,330 --> 00:02:16,310
And for time sake, I'm just going to copy and paste these for the last two

9908
00:02:16,610 --> 00:02:20,540
and I'm going to rename them multiply and divide.

9909
00:02:20,900 --> 00:02:23,330
And then when numbers are multiplied,

9910
00:02:23,360 --> 00:02:27,860
we use the asterisk sign and the number of divided we use the forward slash.

9911
00:02:28,430 --> 00:02:33,380
So now we have four functions; add, subtract, multiply, and divide.

9912
00:02:34,040 --> 00:02:39,040
And what we want to do is we want to somehow store these functions inside a

9913
00:02:39,770 --> 00:02:43,130
dictionary. Here's another challenge for you.

9914
00:02:43,520 --> 00:02:47,870
Can you create a dictionary where the keys are

9915
00:02:47,960 --> 00:02:52,960
each of these symbols that we've used to add or subtract or multiply,

9916
00:02:53,990 --> 00:02:57,200
and the values are just the names of the functions.

9917
00:02:57,440 --> 00:03:00,100
So pause the video and try that now.

9918
00:03:02,230 --> 00:03:06,760
Alright, let's go ahead and create this dictionary. Now we start out of course,

9919
00:03:06,790 --> 00:03:10,390
with a set of curly braces and as I mentioned,

9920
00:03:10,690 --> 00:03:15,690
each of the keys are going to be the symbols for the operations and the values

9921
00:03:16,150 --> 00:03:20,140
are going to be the names of the functions. So we've got plus,

9922
00:03:20,980 --> 00:03:24,820
and then we've got subtract, multiply,

9923
00:03:24,910 --> 00:03:28,720
and divide. So now we have this dictionary,

9924
00:03:28,750 --> 00:03:33,010
let's go ahead and save it inside a variable called operations.

9925
00:03:33,700 --> 00:03:38,700
Now this dictionary is going to act as the means in which we're going to call

9926
00:03:40,480 --> 00:03:43,870
these functions. At some point down here,

9927
00:03:44,200 --> 00:03:49,200
we want to be able to tap into the operations and then pass in the key that we

9928
00:03:49,510 --> 00:03:51,670
want, so for example multiply,

9929
00:03:52,270 --> 00:03:56,620
and then store this as the function that we want.

9930
00:03:57,340 --> 00:04:02,110
That means we can then call this function and then pass in one number and a

9931
00:04:02,110 --> 00:04:02,950
second number

9932
00:04:03,430 --> 00:04:07,480
and this function is currently going to act as the multiply function. Now,

9933
00:04:07,480 --> 00:04:08,950
if we change this to plus,

9934
00:04:09,220 --> 00:04:13,090
then this function is now going to act as the add function.

9935
00:04:14,350 --> 00:04:17,800
So now the next thing we're going to do is we're going to create a variable

9936
00:04:17,800 --> 00:04:18,820
called num1

9937
00:04:19,690 --> 00:04:23,290
where we ask the user for an input to say

9938
00:04:23,350 --> 00:04:24,880
what's the first number.

9939
00:04:25,780 --> 00:04:30,160
And there's number of course has to be converted into an integer.

9940
00:04:31,180 --> 00:04:35,230
Now, the next thing to do is to ask them for the second number,

9941
00:04:35,260 --> 00:04:38,770
so this is going to be pretty much the same as this line of code,

9942
00:04:39,340 --> 00:04:42,640
other than the word second. Now,

9943
00:04:42,640 --> 00:04:47,200
the next thing is we want to ask them which of these operations they want to do.

9944
00:04:47,800 --> 00:04:48,670
Firstly,

9945
00:04:48,760 --> 00:04:53,760
we want to be able to loop through this dictionary and print out each of these

9946
00:04:54,670 --> 00:04:55,503
keys.

9947
00:04:55,840 --> 00:05:00,070
And then we're going to ask the user to type out one of them so that we can

9948
00:05:00,070 --> 00:05:03,130
figure out which operation they actually want to do.

9949
00:05:03,790 --> 00:05:06,130
Go ahead and try to use a for loop

9950
00:05:06,340 --> 00:05:11,320
to loop through this dictionary of operations and print out each of these

9951
00:05:11,590 --> 00:05:16,120
symbols. All right,

9952
00:05:16,180 --> 00:05:17,860
now we're going to use a for loop

9953
00:05:17,920 --> 00:05:20,890
and we know that when we use a four loop with a dictionary,

9954
00:05:21,130 --> 00:05:26,130
it will loop through all the keys rather than the values or the actual entries.

9955
00:05:27,010 --> 00:05:32,010
We can say for each symbol in the dictionary operations,

9956
00:05:35,080 --> 00:05:39,970
go ahead and print out the symbol. And of the moment

9957
00:05:39,970 --> 00:05:43,600
if I run this code, you'll see that it'll ask us for the first number,

9958
00:05:43,930 --> 00:05:44,950
the second number,

9959
00:05:45,250 --> 00:05:48,550
and then it's gonna loop through that list and then print out all the

9960
00:05:48,550 --> 00:05:49,390
operations.

9961
00:05:49,810 --> 00:05:54,810
So now we're ready to go ahead and ask them for a operation symbol. Pick and

9962
00:05:56,200 --> 00:05:58,010
operation from the line above.

9963
00:05:58,100 --> 00:06:03,100
So they're going to see all of these keys and then they get to pick an operation

9964
00:06:03,530 --> 00:06:08,150
like so. And that symbol is now going to be saved within this variable.

9965
00:06:08,840 --> 00:06:13,840
So now we can go ahead and take that operation symbol to pick out the value

9966
00:06:16,040 --> 00:06:19,340
that's associated with it. For example, if in this case

9967
00:06:19,400 --> 00:06:21,890
the user chose the plus symbol,

9968
00:06:22,340 --> 00:06:24,950
then we're gonna pick out the add function.

9969
00:06:25,580 --> 00:06:27,800
And then just as I shown you before,

9970
00:06:27,860 --> 00:06:31,850
we want to use that add function to add these two numbers together.

9971
00:06:32,360 --> 00:06:32,960
But of course,

9972
00:06:32,960 --> 00:06:36,890
if they picked a different symbol then we want to be able to carry out the

9973
00:06:36,950 --> 00:06:41,950
different operation. See if you can get this calculator to work so we can print out

9974
00:06:43,850 --> 00:06:47,750
the num1 and then the operation symbol,

9975
00:06:48,320 --> 00:06:53,180
and then num2, and finally the equal sign

9976
00:06:53,570 --> 00:06:58,570
and then the answer. See if you can make this line of code work and make sure that

9977
00:07:00,740 --> 00:07:04,700
it works whenever you choose any of these operations,

9978
00:07:05,150 --> 00:07:08,150
and it will calculate it using these numbers that you input.

9979
00:07:08,570 --> 00:07:09,470
Pause the video now.

9980
00:07:12,530 --> 00:07:12,940
All right. 

9981
00:07:12,940 --> 00:07:17,940
The first thing we need to do is to get hold of the calculation function

9982
00:07:19,210 --> 00:07:22,390
and this is going to be done using the operation symbol.

9983
00:07:22,780 --> 00:07:26,590
So we're going to tap into our dictionary of operations here,

9984
00:07:27,070 --> 00:07:29,710
and then we're going to use the square brackets to pass in

9985
00:07:30,040 --> 00:07:31,360
the operation symbol.

9986
00:07:31,810 --> 00:07:36,810
Now we can use this calculation function as if it were any of these functions.

9987
00:07:38,740 --> 00:07:41,650
And that's of course, based on the choice the user made here.

9988
00:07:42,280 --> 00:07:47,280
So we can now say calculation function and we can pass in the num1 as the

9989
00:07:47,830 --> 00:07:50,860
first input, num2 as the second input.

9990
00:07:51,370 --> 00:07:55,060
And of course our function all have a return value.

9991
00:07:55,480 --> 00:08:00,430
And so this part is going to be replaced when the code runs with the actual

9992
00:08:00,430 --> 00:08:04,870
answer. So we can now save that inside a variable called answer,

9993
00:08:05,290 --> 00:08:09,520
and then that will get sent over here and we can now test it out.

9994
00:08:10,420 --> 00:08:13,360
So let's try adding three plus five.

9995
00:08:13,870 --> 00:08:17,710
So I'm going to use the add symbol and we end up with three plus five equals

9996
00:08:17,710 --> 00:08:21,010
eight. Now what about something a little bit more complicated?

9997
00:08:21,190 --> 00:08:25,930
Uhm, 45, 78 and we'll choose multiply.

9998
00:08:26,830 --> 00:08:30,790
Now, I think in reality that it actually makes more sense to put num2

9999
00:08:31,150 --> 00:08:35,710
after the user's enter the operation symbol so that you actually end up with a

10000
00:08:35,710 --> 00:08:40,240
better user experience like this. You can pick the first number,

10001
00:08:40,450 --> 00:08:43,570
pick the operation, and then pick the second number.

10002
00:00:00,390 --> 00:00:06,780
We've managed to get our calculator to work. But in this lesson, I want to talk about something else.

10003
00:00:07,200 --> 00:00:15,540
I want to talk about the difference between printing something to the console over here versus returning

10004
00:00:15,540 --> 00:00:22,020
something as an output from a function, because a lot of students get very confused at this stage and

10005
00:00:22,020 --> 00:00:27,440
they think, well, why don't I just print this results instead of returning it?

10006
00:00:27,750 --> 00:00:31,500
What's the actual difference and why would I use return?

10007
00:00:32,220 --> 00:00:34,440
That's what I want to address in this lesson.

10008
00:00:35,850 --> 00:00:43,050
At the moment, we've got these four functions, and when we call it, we pass over some inputs and

10009
00:00:43,050 --> 00:00:48,100
then once we get a hold of the output, we go ahead and print it out into the console.

10010
00:00:48,780 --> 00:00:54,660
Now, in the current state of the calculator, it's hard to see the difference between the print and

10011
00:00:54,660 --> 00:00:55,280
the return.

10012
00:00:55,860 --> 00:00:57,090
But here's a question.

10013
00:00:57,510 --> 00:01:04,110
What if we wanted to take the output that comes from calling this function and instead of just storing

10014
00:01:04,110 --> 00:01:11,560
it inside a variable and then printing it out, what if we want to pass it as an input to another function?

10015
00:01:12,150 --> 00:01:18,960
Let's say that at this point we decided, you know what, we're going to ask them to pick another operation.

10016
00:01:19,500 --> 00:01:22,620
And then let's ask them to pick another number.

10017
00:01:23,980 --> 00:01:30,820
And finally, let's go ahead and get the calculation function again based on this new operation symbol

10018
00:01:30,820 --> 00:01:34,930
that they picked. And then we're going to calculate the new answer

10019
00:01:35,320 --> 00:01:42,460
but this time, instead of passing over the calculation function, we're going to pass over the answer

10020
00:01:42,460 --> 00:01:44,320
that we got back from this step.

10021
00:01:44,740 --> 00:01:47,910
So num1 is now the previous answer

10022
00:01:48,490 --> 00:01:53,500
and the second number that's going to be the input is going to be num3.

10023
00:01:54,130 --> 00:02:01,780
At this point, when we're calling this calculation function, we're passing over the results or outputs

10024
00:02:01,810 --> 00:02:06,000
of this calculation function, and that is going in right here,

10025
00:02:06,370 --> 00:02:10,060
and then the third number goes in as the second input.

10026
00:02:10,509 --> 00:02:16,230
What basically has happened here is I've taken the output from this function,

10027
00:02:16,240 --> 00:02:21,160
so in fact, I could replace this answer with this output,

10028
00:02:21,610 --> 00:02:28,120
and I've taken that as the first input into the calculation function and then num3 as the second

10029
00:02:28,120 --> 00:02:28,600
input

10030
00:02:28,930 --> 00:02:32,350
and then using all of this in order to get the answer.

10031
00:02:33,970 --> 00:02:35,830
Let's call this first_answer,

10032
00:02:36,710 --> 00:02:41,330
and let's call this second_answer just to differentiate the two answers.

10033
00:02:42,390 --> 00:02:48,030
And now I'm going to write a slightly different print statement. In this case, the calculation is done

10034
00:02:48,210 --> 00:02:55,530
using the first_answer and then the operation symbol and then the num3 that was inserted at

10035
00:02:55,530 --> 00:02:59,490
this point in order to obtain the second_answer.

10036
00:03:00,000 --> 00:03:01,680
So now if we give this a run.

10037
00:03:06,180 --> 00:03:14,400
Let's do 3 + 2. Now, in this first step of the calculation, we get 5 as the result.

10038
00:03:14,820 --> 00:03:19,770
So now if I want to pick another operation, let's I want to multiply 5 by 3.

10039
00:03:20,190 --> 00:03:23,190
Then I'm going to take this 5, which is the previous answer,

10040
00:03:23,470 --> 00:03:28,710
I'm going to say multiply, and then I'm going to provide the next number, which we'll call 3.

10041
00:03:29,190 --> 00:03:36,000
And now it takes the previous answer from the last step and puts that in as the first number in the

10042
00:03:36,000 --> 00:03:41,760
calculation, multiplies it by 3 in order to get the final answer.

10043
00:03:43,080 --> 00:03:50,520
In this case, what I'm able to do because I have an output from my calculation function up here because

10044
00:03:50,520 --> 00:03:57,360
each of these all return their answer, I'm able to take the result from that calculation and plug it

10045
00:03:57,360 --> 00:04:06,480
right back into another calculation function using the result of that function call as the input to

10046
00:04:06,480 --> 00:04:07,970
another function call.

10047
00:04:08,550 --> 00:04:15,270
And I'm only able to do this because I'm using the return statement and because I have outputs from

10048
00:04:15,270 --> 00:04:15,990
my functions.

10049
00:04:16,320 --> 00:04:19,500
This would not be possible if I was using a print statement.

10050
00:04:28,680 --> 00:04:34,800
In the next lesson, we're going to reorganize our code and introduce a while loop so that we can continue

10051
00:04:34,800 --> 00:04:37,260
making as many calculations as we want to.

10052
00:00:00,960 --> 00:00:04,800
In the last lesson we made it possible to reuse the result of the first

10053
00:00:04,800 --> 00:00:05,633
calculation.

10054
00:00:06,060 --> 00:00:10,470
The answer for the first calculation became our input for the next calculation,

10055
00:00:10,830 --> 00:00:14,370
allowing us to chain the calculations together. However,

10056
00:00:14,400 --> 00:00:16,920
this created quite a bit of repetition in our code

10057
00:00:17,100 --> 00:00:20,520
and it limits our user to just two calculations.

10058
00:00:21,690 --> 00:00:25,950
Let's allow the user to chain as many calculations as they want to.

10059
00:00:26,760 --> 00:00:29,100
And I want to throw this over to you as a challenge,

10060
00:00:29,100 --> 00:00:33,000
so can you use a while loop and the input function to achieve this?

10061
00:00:33,360 --> 00:00:34,040
Ask the user

10062
00:00:34,040 --> 00:00:39,040
this question, type 'y' to continue calculating with the previous result or type 'n'

10063
00:00:39,630 --> 00:00:40,463
to exit.

10064
00:00:41,700 --> 00:00:45,570
If the user types y then your calculator should allow them to continue chaining

10065
00:00:45,570 --> 00:00:48,120
together calculations with the previous answer.

10066
00:00:48,780 --> 00:00:52,020
If they type anything else the program should exit for now.

10067
00:00:52,440 --> 00:00:55,500
I'll give you a few seconds to pause the video before I show you the result.

10068
00:00:57,960 --> 00:01:02,520
All right. So the easiest way to solve this is through the use of a while loop.

10069
00:01:02,940 --> 00:01:07,620
So let's say that after we've asked for the first number and we've shown them

10070
00:01:07,620 --> 00:01:10,440
all of the different symbols that they could possibly pick from,

10071
00:01:10,860 --> 00:01:14,130
lets set a flag called should_continue.

10072
00:01:15,990 --> 00:01:18,510
And we'll set that to start out as true.

10073
00:01:19,500 --> 00:01:24,120
Then we can create a while loop and while it should continue as true,

10074
00:01:24,540 --> 00:01:26,490
then we're going to perform these things.

10075
00:01:27,120 --> 00:01:31,500
Now we want to change some of this text so that it's a little bit more reusable.

10076
00:01:31,950 --> 00:01:34,410
Let's say pick an operation,

10077
00:01:35,460 --> 00:01:40,460
and what's the next number instead of the second number.

10078
00:01:41,220 --> 00:01:45,750
So now we have a first number, we have a operation,

10079
00:01:45,780 --> 00:01:50,610
we have a second number and then we pick out the function from that dictionary

10080
00:01:50,610 --> 00:01:53,400
of operations and we get our answer.

10081
00:01:53,670 --> 00:01:58,670
So I'm going to change this back to answer and we're passing in num1

10082
00:01:59,550 --> 00:02:03,960
and num2 into the calculation function. Now,

10083
00:02:03,960 --> 00:02:06,120
once this line has been printed,

10084
00:02:06,840 --> 00:02:10,199
everything that occurs afterwards is pretty much repetition.

10085
00:02:11,160 --> 00:02:16,160
And instead we're going to ask the user to type y-- type y to continue calculating

10086
00:02:19,380 --> 00:02:21,840
with the answer from the previous step.

10087
00:02:22,440 --> 00:02:27,440
Let's make that an fstring and let's check what this is actually equal to.

10088
00:02:28,380 --> 00:02:33,180
So remember that the input function is also a function that has an output,

10089
00:02:33,720 --> 00:02:35,040
which is a little bit then zen,

10090
00:02:35,250 --> 00:02:39,240
but the output of this function is whatever the user typed in.

10091
00:02:39,360 --> 00:02:44,360
So if they typed in y then this part is going to become y. That's where we're

10092
00:02:44,880 --> 00:02:45,750
going to check.

10093
00:02:45,840 --> 00:02:50,840
So we're going to check if the result of the input from the user is equal to y,

10094
00:02:51,360 --> 00:02:55,650
then in that case that means we should continue and it should repeat back.

10095
00:02:56,100 --> 00:02:57,930
But when it loops back,

10096
00:02:57,990 --> 00:03:02,990
we want to make sure that num1 is equal to the answer from the previous step.

10097
00:03:04,930 --> 00:03:07,540
So we can say if this is true,

10098
00:03:07,690 --> 00:03:11,740
then num1 is going to be set to equal the answer.

10099
00:03:12,460 --> 00:03:15,640
But on the other hand, else, if they typed anything else,

10100
00:03:15,940 --> 00:03:20,940
so we could say maybe type y to continue calculating with answer or type n to

10101
00:03:22,780 --> 00:03:23,613
exit.

10102
00:03:24,760 --> 00:03:29,760
So now if they type y then the answer is going to be set as the num1 back at

10103
00:03:30,940 --> 00:03:32,800
the start of this while loop

10104
00:03:33,100 --> 00:03:36,550
so that this num1 becomes the answer from the previous step.

10105
00:03:37,090 --> 00:03:40,510
But if they typed n then we want this while loop to the end.

10106
00:03:40,780 --> 00:03:44,110
So we're going to change the flag should_continue to false.

10107
00:03:44,830 --> 00:03:46,840
So now let's give that a run.

10108
00:03:50,670 --> 00:03:51,000
Right?

10109
00:03:51,000 --> 00:03:52,890
Let's say the first number is five.

10110
00:03:53,310 --> 00:03:57,570
Then we're going to add three to five and then we're going to type y to

10111
00:03:57,570 --> 00:04:00,990
continue. So now we get to pick another operation,

10112
00:04:01,020 --> 00:04:03,180
so let's multiply, um,

10113
00:04:03,240 --> 00:04:08,240
eight by two and we get the result from the next step and we can actually keep

10114
00:04:09,600 --> 00:04:12,360
going until we're basically done, right?

10115
00:04:12,360 --> 00:04:16,980
So we can take the 16 and we can divide it by four.

10116
00:04:17,610 --> 00:04:19,529
But if we type 'n' on the other hand,

10117
00:04:19,800 --> 00:04:23,250
then our program ends and we see the prompt once more.

10118
00:04:24,990 --> 00:04:26,790
And that's the solution to the challenge,

10119
00:04:26,850 --> 00:04:30,540
but it's a little bit sad to just exit, right?

10120
00:04:30,540 --> 00:04:33,270
Because with a calculator more often than not,

10121
00:04:33,270 --> 00:04:37,950
what you want to do is to start a fresh calculation where you get to determine

10122
00:04:37,980 --> 00:04:41,310
the first number and the second number once more.

10123
00:04:42,540 --> 00:04:45,120
If the user didn't want to exit

10124
00:04:45,570 --> 00:04:48,690
but if they wanted to start a new calculation,

10125
00:04:49,230 --> 00:04:54,230
then how can we get them to go back all the way up here so that they provide the

10126
00:04:54,720 --> 00:04:59,610
num1 as a fresh input? This is a little bit tricky

10127
00:04:59,760 --> 00:05:03,750
and in programming, this concept is known as recursion.

10128
00:05:04,260 --> 00:05:08,700
It's basically the idea that you could have a function that calls itself.

10129
00:05:09,300 --> 00:05:14,300
So let's define a new function called calculator and this function takes no

10130
00:05:14,820 --> 00:05:17,100
inputs and has no outputs.

10131
00:05:17,640 --> 00:05:22,410
But all of this code that we've got here so far is inside the calculator

10132
00:05:22,410 --> 00:05:25,230
function. To begin when we start,

10133
00:05:25,350 --> 00:05:30,350
we have to call the calculator function in order for it to find the place where

10134
00:05:30,450 --> 00:05:35,190
this function was defined and to actually carry out all of these instructions.

10135
00:05:35,790 --> 00:05:36,180
Now,

10136
00:05:36,180 --> 00:05:40,560
the next thing we get to do is a little bit interesting because when the user

10137
00:05:40,560 --> 00:05:41,850
types no,

10138
00:05:42,690 --> 00:05:47,280
and says that they don't want to continue calculating with the previous answer

10139
00:05:47,640 --> 00:05:50,760
but instead they want to start a new calculation,

10140
00:05:51,120 --> 00:05:54,270
what we want to do instead of just exiting the while loop,

10141
00:05:54,630 --> 00:05:59,630
we want to call the calculator function because what this is going to do is it's

10142
00:06:00,560 --> 00:06:05,030
basically going to take us all the way back up to the beginning where we get to

10143
00:06:05,030 --> 00:06:07,430
enter a new input again.

10144
00:06:08,510 --> 00:06:11,990
And remember that once you reach the end of a function,

10145
00:06:12,350 --> 00:06:17,300
everything gets reset to the beginning. So should_continue becomes true again

10146
00:06:17,570 --> 00:06:19,820
and this while loop will continue working.

10147
00:06:20,600 --> 00:06:22,970
So let's try running this new version.

10148
00:06:23,720 --> 00:06:28,720
We've performed a calculation and now we want to start a new calculation,

10149
00:06:29,030 --> 00:06:33,710
so I'm going to type n. And now I get to again define the first number again.

10150
00:06:37,100 --> 00:06:42,100
This recursion basically happens because we're calling this calculator function

10151
00:06:42,890 --> 00:06:45,110
within the calculator function.

10152
00:06:45,710 --> 00:06:49,490
Essentially the code runs and runs and runs until it reaches here

10153
00:06:50,060 --> 00:06:55,010
and if these conditions are met and this calculator function is called,

10154
00:06:55,250 --> 00:07:00,230
then it goes and finds the calculator function in order to call it once more.

10155
00:07:01,310 --> 00:07:05,960
But now you have to be quite careful with while loops and with these recursive

10156
00:07:05,960 --> 00:07:06,793
functions

10157
00:07:06,920 --> 00:07:11,920
because let's say that instead of having all of this code and some checking code

10158
00:07:12,500 --> 00:07:14,750
to determine when I should call calculator,

10159
00:07:15,230 --> 00:07:18,830
if I actually just called calculator within calculator,

10160
00:07:19,130 --> 00:07:21,590
then this is going to be a infinite loop.

10161
00:07:21,620 --> 00:07:23,900
It's just going to keep going back and forth.

10162
00:07:24,290 --> 00:07:27,410
The calculator function calls the calculator function,

10163
00:07:27,440 --> 00:07:31,400
which goes back up and calls and it goes around and round around until forever.

10164
00:07:32,090 --> 00:07:32,480
Again,

10165
00:07:32,480 --> 00:07:36,620
be careful and make sure that there is some sort of condition that needs to be

10166
00:07:36,620 --> 00:07:41,620
met in order for this function to call itself. In the next lesson,

10167
00:07:41,810 --> 00:07:45,830
we're gonna add the finishing touches to our program and also fix a bug that you

10168
00:07:45,830 --> 00:07:47,450
may have already spotted at this point.

10169
00:00:00,660 --> 00:00:05,370
Now that we've pretty much completed all of the logic and functionality of this

10170
00:00:05,370 --> 00:00:08,850
calculator, it's time to add in the bells and the whistles,

10171
00:00:09,120 --> 00:00:13,200
including adding in the calculator logo and also checking for any bugs.

10172
00:00:14,280 --> 00:00:16,590
Adding the calculator logo is pretty simple.

10173
00:00:17,280 --> 00:00:19,200
You've done this loads of times before.

10174
00:00:19,860 --> 00:00:22,740
All we have to do is import it from the art module,

10175
00:00:23,070 --> 00:00:27,480
and then we're going to print it at the beginning of our calculator function.

10176
00:00:28,470 --> 00:00:29,310
So this way

10177
00:00:29,370 --> 00:00:33,630
when we get to the end and the user wants to start a fresh calculation,

10178
00:00:33,930 --> 00:00:38,910
we'll also show them a logo again. Now the next thing to notice,

10179
00:00:39,060 --> 00:00:42,630
this is a bit of a bug that you might've seen or not.

10180
00:00:43,290 --> 00:00:48,090
But what happens if we try to enter a number with a decimal point?

10181
00:00:48,630 --> 00:00:52,470
Let's say we want to calculate 4.5 multiplied by 2.

10182
00:00:54,180 --> 00:00:55,860
Our program has already crashed

10183
00:00:55,950 --> 00:01:00,000
as soon as I've entered 4.5 and hit enter. As a challenge,

10184
00:01:00,030 --> 00:01:03,930
can you diagnose what went wrong and fix this bug? I'll give you a few seconds

10185
00:01:03,930 --> 00:01:05,530
to pause the video before I give you the 

10186
00:01:06,050 --> 00:01:06,883
solution.

10187
00:01:08,750 --> 00:01:10,070
Alright. Here's the solution.

10188
00:01:10,220 --> 00:01:15,110
The bug goes back to our lesson on datatypes.Notice how it's giving us an error

10189
00:01:15,230 --> 00:01:17,030
and it's pointing to this line

10190
00:01:17,060 --> 00:01:22,040
number 26. Line number 26 takes this input

10191
00:01:22,100 --> 00:01:26,570
which is a string and converts it into an integer. But of course,

10192
00:01:26,780 --> 00:01:30,380
a number with the decimal place shouldn't be converted into an integer.

10193
00:01:30,770 --> 00:01:35,480
We should actually hold it as a floating point number instead. This way

10194
00:01:35,480 --> 00:01:38,330
we're able to perform more accurate calculations.

10195
00:01:38,600 --> 00:01:40,670
So instead of just 4 times 5,

10196
00:01:40,670 --> 00:01:44,360
we can do 4.5 times 5.5, for example.

10197
00:01:44,930 --> 00:01:48,410
So instead of using int here, I'm going to change that to float

10198
00:01:48,920 --> 00:01:53,510
and I'm going to do the same here for num2. Now, when we hit run,

10199
00:01:53,690 --> 00:01:58,160
I can actually perform calculations using numbers with decimal places,

10200
00:01:58,520 --> 00:02:01,340
but I can also use numbers which are whole.

10201
00:02:01,670 --> 00:02:06,020
So let's multiply 2.5 by 2, the answer is 5,

10202
00:02:06,080 --> 00:02:10,789
and you can see that all the numbers are being reported to a greater level of

10203
00:02:10,789 --> 00:02:14,030
accuracy, meaning we have numbers after the decimal point.

10204
00:02:14,420 --> 00:02:18,260
And this is all because we converted that int to a float.

10205
00:02:19,850 --> 00:02:23,240
Now that there's a lot more features that you could add to your calculator.

10206
00:02:23,540 --> 00:02:28,310
You could add a square root capability, you could add exponent capability,

10207
00:02:28,670 --> 00:02:32,990
but the important thing here was really for you to see how functions that

10208
00:02:32,990 --> 00:02:35,810
provide outputs are really useful

10209
00:02:35,840 --> 00:02:40,840
when you come to a more complex program where you can take the output from one

10210
00:02:42,650 --> 00:02:47,360
function call and pass it into the next function

10211
00:02:47,360 --> 00:02:49,100
call as an input.

10212
00:02:49,940 --> 00:02:53,660
So this output can be reused in different parts of the code.

10213
00:02:54,170 --> 00:02:59,170
And this not only allows us to reduce repetition and also make our more reusable

10214
00:03:00,400 --> 00:03:01,420
and more modular,

10215
00:03:01,720 --> 00:03:06,720
but also it gives us the flexibility of performing more actions after a function

10216
00:03:08,590 --> 00:03:10,990
has completed. Now,

10217
00:03:10,990 --> 00:03:15,370
we're going to be using a lot of the concepts that we've learned here today in

10218
00:03:15,520 --> 00:03:19,780
tomorrow's capstone project. A lot of things I've explained,

10219
00:03:19,780 --> 00:03:22,240
including things like the recursion

10220
00:03:22,240 --> 00:03:26,980
where we're calling a function within its own definition or things like setting a

10221
00:03:26,980 --> 00:03:29,860
flag using a wall loop to continue

10222
00:03:29,860 --> 00:03:33,070
some piece of code execution is all going to come in really,

10223
00:03:33,070 --> 00:03:34,360
really handy tomorrow.

10224
00:03:34,780 --> 00:03:38,050
So make sure that if there's anything that you don't understand here

10225
00:03:38,380 --> 00:03:43,380
that you review it and you're comfortable with what the code is doing before you

10226
00:03:43,480 --> 00:03:47,410
proceed. That's all for today and I'll see you tomorrow.


10227
00:00:00,570 --> 00:00:04,110
Hey, it's Angela here. Congratulations on making it through the

10228
00:00:04,190 --> 00:00:08,870
first 10 days. Today, I've got something very special lined up for you,

10229
00:00:09,380 --> 00:00:13,100
our first capstone project. Today

10230
00:00:13,140 --> 00:00:17,750
we'll challenge you to apply everything you've learned so far into one big

10231
00:00:17,780 --> 00:00:18,613
project.

10232
00:00:18,770 --> 00:00:22,670
You're going to need to dig deep and apply all your Python skills for this

10233
00:00:22,670 --> 00:00:25,130
capstone project. But by the end of the day,

10234
00:00:25,160 --> 00:00:28,040
you'll have built an awesome blackjack game to enjoy.

10235
00:00:28,850 --> 00:00:31,610
This is probably going to be one of the hardest things you'll build yet,

10236
00:00:31,880 --> 00:00:36,140
but at the same time, the end result is also going to be the most fun.

10237
00:00:37,010 --> 00:00:40,130
The final project you're going to be building is blackjack.

10238
00:00:40,640 --> 00:00:42,530
And if you had over to

10239
00:00:42,530 --> 00:00:47,530
247blackjack.com or search for any other free online blackjack game,

10240
00:00:48,380 --> 00:00:53,380
you can hit play and you can click deal for the dealer to give you some cards.

10241
00:00:54,140 --> 00:00:56,150
The game is really simple. Essentially

10242
00:00:56,150 --> 00:01:01,150
you're trying to get as close to 21 as possible and all of the cards which have

10243
00:01:02,060 --> 00:01:05,720
a Jack, a Queen, or a King count as 10.

10244
00:01:05,930 --> 00:01:10,130
So you're adding these two cards up 5 + 10 equals 15.

10245
00:01:10,520 --> 00:01:14,090
And you're trying to figure out if you can risk getting another card.

10246
00:01:14,570 --> 00:01:18,620
So I'm going to click hit, and I'm going to get one other card

10247
00:01:18,830 --> 00:01:23,120
but that takes me over 21 and so the dealer wins.

10248
00:01:24,260 --> 00:01:26,480
So this is the game that we're trying to create.

10249
00:01:27,050 --> 00:01:29,870
This is what your version of Blackjack is going to look like.

10250
00:01:30,200 --> 00:01:32,480
Now the user interface is a little bit simpler,

10251
00:01:32,780 --> 00:01:34,640
but it's just as fun to play with.

10252
00:01:34,820 --> 00:01:37,820
So our first two cards are a 9 and a 10,

10253
00:01:38,480 --> 00:01:41,720
and it also shows us one of the computers cards.

10254
00:01:42,560 --> 00:01:45,440
Now I'm already on 19,10 + 9.

10255
00:01:45,980 --> 00:01:48,020
I'm close to going over 21.

10256
00:01:48,350 --> 00:01:51,650
So I'm going to type 'n' and end the game right there.

10257
00:01:52,160 --> 00:01:53,510
I end on 19,

10258
00:01:53,540 --> 00:01:57,560
the computer ends on 18 and because 19 is greater than 18,

10259
00:01:57,710 --> 00:01:58,730
that means I win.

10260
00:01:59,600 --> 00:02:04,600
Have a go at playing the final game by going to black-jack-final.appbrewery.repl.run.

10261
00:02:05,330 --> 00:02:06,710
But once you're ready,

10262
00:02:06,770 --> 00:02:10,669
head over to the next lesson so that we can actually build this game ourselves.

10263
00:02:10,970 --> 00:02:14,360
For all of that and more, I'll see you on the next lesson. Have fun.


10264
00:00:00,240 --> 00:00:00,630
All right.

10265
00:00:00,630 --> 00:00:04,230
Let's talk about the mechanics and the program requirements for the Blackjack 

10266
00:00:04,230 --> 00:00:08,100
game that you'll create. For those of you who are not familiar with the game of

10267
00:00:08,100 --> 00:00:10,170
Blackjack  also known as 21,

10268
00:00:10,560 --> 00:00:13,290
I'm just going to spend a few minutes to go through the rules with you.

10269
00:00:14,040 --> 00:00:16,980
Blackjack is a game that's played using cards.

10270
00:00:17,550 --> 00:00:22,550
And the goal of the game is to add up your cards to the largest number without

10271
00:00:23,730 --> 00:00:27,840
going over 21. If the cards in your hand

10272
00:00:27,960 --> 00:00:32,430
add up two more than 21, then it's called a bust

10273
00:00:32,700 --> 00:00:34,890
and it means that you lose immediately.

10274
00:00:35,610 --> 00:00:40,560
And it doesn't matter how much you've gone over 21, as long as it's over 21,

10275
00:00:40,620 --> 00:00:44,610
then you lose. Now the way that the cause are counted

10276
00:00:44,840 --> 00:00:49,790
is that all the cards from 2 to 10 count as their face value.

10277
00:00:50,090 --> 00:00:53,060
So a six is a six and a nine is a nine, et cetera.

10278
00:00:53,810 --> 00:00:58,810
But the Jack, Queen and King each count as 10 and the other special card is the

10279
00:01:00,350 --> 00:01:01,183
Ace.

10280
00:01:01,370 --> 00:01:05,720
Now the Ace can either count as a one towards your total,

10281
00:01:05,990 --> 00:01:09,770
or it can count as an 11. And depending on whether,

10282
00:01:09,770 --> 00:01:13,190
if you've gone over 21 or whether if you're under 21,

10283
00:01:13,220 --> 00:01:17,330
you can decide which value you want your Ace to represent.

10284
00:01:18,320 --> 00:01:22,370
Let's play a sample game. Let's say that the dealer over here got

10285
00:01:23,000 --> 00:01:28,000
a 10 to begin with and you got a queen which also counts as a 10 to begin with.

10286
00:01:29,660 --> 00:01:30,200
So these

10287
00:01:30,200 --> 00:01:34,730
are the first cars that are dealt and both of these cards are revealed.

10288
00:01:35,390 --> 00:01:40,100
And then the dealer deals another card to each of you. Now the dealer's

10289
00:01:40,130 --> 00:01:44,690
second hand is concealed so you can't work out what their total is,

10290
00:01:45,350 --> 00:01:47,120
but you can see your own card.

10291
00:01:47,720 --> 00:01:50,720
So the moment we don't know what the dealer has,

10292
00:01:50,720 --> 00:01:53,090
it might be 10 plus anything,

10293
00:01:53,630 --> 00:01:57,800
but we know that our score is 13, 10 + 3.

10294
00:01:59,540 --> 00:02:02,900
At this point you might ask the dealer for another card.

10295
00:02:03,380 --> 00:02:08,380
So now you have three cards and luckily it adds up to 20 without going over 21.

10296
00:02:11,150 --> 00:02:15,530
But there is also a possibility that you might've gotten a card that would have

10297
00:02:15,530 --> 00:02:20,180
pushed your total over 21 at which point you now lose.

10298
00:02:20,420 --> 00:02:23,180
And it doesn't matter what the dealer has in their hand,

10299
00:02:23,480 --> 00:02:26,000
you've already lost because you've gone over 21.

10300
00:02:27,050 --> 00:02:31,190
Now let's say that we got lucky and our total adds up to 20.

10301
00:02:31,910 --> 00:02:35,180
Now at this point we say we don't want any more cards

10302
00:02:35,540 --> 00:02:39,830
and the dealer reveals their hand. If. like in this case,

10303
00:02:39,980 --> 00:02:42,830
they end up with 20 and we have 20,

10304
00:02:43,310 --> 00:02:45,170
then we end up in a draw.

10305
00:02:45,590 --> 00:02:48,590
So whenever your score equals the dealer score,

10306
00:02:48,890 --> 00:02:53,150
then you will draw rather than win or lose. Now,

10307
00:02:53,180 --> 00:02:56,360
if on the other hand, the dealer ended up with an Ace,

10308
00:02:56,420 --> 00:03:01,420
which we know can count as an 11 and they actually scored higher than us.

10309
00:03:02,110 --> 00:03:06,550
They have 21 and we have 20, well, in this case, we would lose.

10310
00:03:07,510 --> 00:03:12,510
Now the rules also state that if the dealer ends up with a hand that's smaller

10311
00:03:13,720 --> 00:03:16,540
than 17, so 16 or under,

10312
00:03:16,900 --> 00:03:19,270
then they must take another card.

10313
00:03:19,840 --> 00:03:22,180
Those are the basic rules of blackjack,

10314
00:03:22,600 --> 00:03:27,100
but I'd recommend that before you get started head over to the link that's in

10315
00:03:27,100 --> 00:03:31,390
the Blackjack starting file and have a few games of Blackjack

10316
00:03:31,690 --> 00:03:36,370
just so that you can see for yourself how it actually works and how you win and

10317
00:03:36,370 --> 00:03:37,270
how you lose.

10318
00:03:38,140 --> 00:03:43,140
And then head over to the final version of the completed project and play our

10319
00:03:45,160 --> 00:03:49,060
simplified version of Blackjack. This way

10320
00:03:49,090 --> 00:03:52,540
you'll see what the end result is that you're trying to create

10321
00:03:52,900 --> 00:03:56,620
and it will be easier when you're creating the code yourself. Now,

10322
00:03:56,650 --> 00:03:57,550
as I mentioned,

10323
00:03:57,610 --> 00:04:01,780
we're going to try and keep our version of Blackjack a little bit simpler,

10324
00:04:02,560 --> 00:04:04,420
and we're going to assume a couple of things.

10325
00:04:04,990 --> 00:04:09,430
The first thing is that the card's that we're starting with comes from this

10326
00:04:09,430 --> 00:04:13,090
list. You'll notice that I've got 2 through to 10,

10327
00:04:13,120 --> 00:04:14,890
all represented in the list.

10328
00:04:15,430 --> 00:04:19,660
And then I've got Jack, Queen and King represented as tens as well.

10329
00:04:20,110 --> 00:04:25,110
So this means that the 10 has four times the probability of occurring compared

10330
00:04:25,870 --> 00:04:27,040
to the other cards.

10331
00:04:27,670 --> 00:04:31,660
Now the Ace is going to start off being represented as 11,

10332
00:04:31,990 --> 00:04:36,070
and it's going to count as 11 until the user goes over 21.

10333
00:04:37,060 --> 00:04:41,050
Now finally, we're going to assume that we have an infinite deck.

10334
00:04:41,470 --> 00:04:44,320
So it means that when a card is drawn from the deck,

10335
00:04:44,380 --> 00:04:48,130
it's not removed from the deck. Whereas in a real casino,

10336
00:04:48,280 --> 00:04:52,780
they have maybe six or eight decks of cards. When a card is drawn,

10337
00:04:53,050 --> 00:04:57,310
then there's less probability of that same card occurring again.

10338
00:04:57,790 --> 00:05:00,220
And this is how professional card counters,

10339
00:05:00,280 --> 00:05:02,260
the people that the casinos hate the most,

10340
00:05:02,680 --> 00:05:06,640
actually go about trying to optimize and improve their chances.

10341
00:05:07,240 --> 00:05:10,000
But in order to keep things simple in our game,

10342
00:05:10,270 --> 00:05:14,770
we're not going to deal with things regarding probability or removing cards from

10343
00:05:14,770 --> 00:05:15,460
the deck.

10344
00:05:15,460 --> 00:05:19,930
We're going to assume that each of these cards in the list have equal chance of

10345
00:05:19,930 --> 00:05:23,770
occurring. If you head over to the App Brewery Blackjack 

10346
00:05:23,790 --> 00:05:25,000
starting project,

10347
00:05:25,360 --> 00:05:28,870
you'll see each of these rules written out in more detail.

10348
00:05:29,260 --> 00:05:32,890
Take a look at it so that you're aware what our house rules dictate.

10349
00:05:34,030 --> 00:05:37,090
Now, if you scroll to the very top of the Blackjack project,

10350
00:05:37,360 --> 00:05:41,590
I've given you four tracks. So just as when you start a video game

10351
00:05:41,620 --> 00:05:46,330
you have the choice of normal, hard, extra hard or expert,

10352
00:05:46,720 --> 00:05:51,520
it's the same in this project. You can limit yourself to using only one

10353
00:05:51,520 --> 00:05:55,060
hint if you are at expert level in Python.

10354
00:05:55,630 --> 00:05:57,860
You can only use hint 1 and 2

10355
00:05:57,890 --> 00:06:02,890
if you want an extra hard challenge and maybe a little bit of a cry at the end,

10356
00:06:04,010 --> 00:06:08,510
there's also hard and normal. So I'll leave the choice up to you.

10357
00:06:09,050 --> 00:06:12,500
And if you scroll down, you'll find all the hints listed in here.

10358
00:06:13,070 --> 00:06:16,130
Now I recommend everybody, no matter your experience,

10359
00:06:16,550 --> 00:06:21,260
everybody should try out the Blackjack game and also look at how the final

10360
00:06:21,260 --> 00:06:23,000
project is supposed to work.

10361
00:06:23,510 --> 00:06:28,510
But then I've got other things such as a list where I've broken down the program

10362
00:06:29,090 --> 00:06:32,840
requirements. You know how we always say, when you have a big problem,

10363
00:06:33,080 --> 00:06:35,750
always try to break it down into smaller pieces.

10364
00:06:36,290 --> 00:06:41,290
Now you can of course create this list yourself by exploring the game,

10365
00:06:41,540 --> 00:06:43,070
exploring the final project,

10366
00:06:43,370 --> 00:06:47,210
and then writing your own to do list of things that need to be coded up.

10367
00:06:47,570 --> 00:06:48,770
Or alternatively,

10368
00:06:48,800 --> 00:06:53,800
you can look at the one that I've created inside hint 2. Inside hint 3

10369
00:06:54,650 --> 00:06:56,720
I've created a flowchart for you

10370
00:06:57,200 --> 00:07:01,580
which takes the to-do list and breaks it down into a flowchart where you can

10371
00:07:01,580 --> 00:07:06,020
look at the logic in more detail. Now, of course, as always,

10372
00:07:06,020 --> 00:07:08,390
it's a good idea to create your own flowchart

10373
00:07:08,750 --> 00:07:12,650
using a tool like draw.io or using a piece of pen and paper.

10374
00:07:13,190 --> 00:07:14,270
But if you need help,

10375
00:07:14,330 --> 00:07:18,170
it's there for you and you can download the PDF and read through it.

10376
00:07:19,010 --> 00:07:20,480
Now the rest of the hints

10377
00:07:20,510 --> 00:07:24,590
will go through how to solve this project in even smaller

10378
00:07:24,590 --> 00:07:29,510
bite-size chunks. Depending on your own level of Python at the moment,

10379
00:07:29,780 --> 00:07:31,880
choose your own difficulty level.

10380
00:07:32,270 --> 00:07:37,270
But I just want to say before you get started that this project is difficult and

10381
00:07:37,910 --> 00:07:42,560
I wanted to give you a bit of a challenge and to push yourself so that you get

10382
00:07:42,560 --> 00:07:43,393
stronger.

10383
00:07:43,970 --> 00:07:48,970
But it will inevitably be moments where you will have doubt and you will be

10384
00:07:49,010 --> 00:07:53,000
wondering, what am I doing? I don't understand anything. And in this moment,

10385
00:07:53,000 --> 00:07:56,510
I want you to look yourself in the mirror and tell yourself that you got this.

10386
00:07:56,540 --> 00:08:00,770
You can do it. And that remember that I'm here rooting for you.

10387
00:08:01,100 --> 00:08:02,300
I believe you can do it.

10388
00:08:02,300 --> 00:08:06,260
You've got everything that you've learned so far will enable you to do it.

10389
00:08:06,470 --> 00:08:09,140
There's nothing new in this challenge.

10390
00:08:09,470 --> 00:08:11,750
You just have to put all the pieces together.

10391
00:08:12,020 --> 00:08:16,370
You have to push through the difficult parts and maybe sleep on a problem and

10392
00:08:16,370 --> 00:08:21,050
think about it and then come back to it. But I believe you can do it. Once

10393
00:08:21,050 --> 00:08:23,030
you're ready, pause the video,

10394
00:08:23,660 --> 00:08:27,050
head over to the starting project and give it a go.

10395
00:08:28,310 --> 00:08:29,780
And once you're satisfied,

10396
00:08:29,840 --> 00:08:33,289
then head over to the next lesson and I'll walk through the solution with you.


10397
00:00:00,280 --> 00:00:02,009
Right. So how did that go?

10398
00:00:02,580 --> 00:00:06,150
I hope it went really well and you've managed to complete it all by yourself.

10399
00:00:06,660 --> 00:00:11,310
If you got stuck, I really recommend just having a sandwich, have a cup of tea,

10400
00:00:11,580 --> 00:00:13,500
take a break, and then come back to it.

10401
00:00:13,740 --> 00:00:17,460
You'd be surprised what your brain can do when it just has a little bit of rest.

10402
00:00:18,120 --> 00:00:21,840
But I want you to make sure that you've really given it a proper go before you

10403
00:00:21,840 --> 00:00:23,700
come here and watch the solution.

10404
00:00:24,120 --> 00:00:27,990
Cause I'm going to walk you through the solution step by step in case there are

10405
00:00:28,200 --> 00:00:32,159
little bits or something that you didn't understand or something that you want

10406
00:00:32,159 --> 00:00:33,960
to check. But I really,

10407
00:00:33,960 --> 00:00:38,250
really hope that you've managed to tackle most of this yourself. All right.

10408
00:00:38,250 --> 00:00:42,660
So without further ado, let's get started coding up our Blackjack project.

10409
00:00:43,740 --> 00:00:47,130
Hopefully you've already used hints 1, 2 or 3,

10410
00:00:47,550 --> 00:00:52,320
and I'm going to get started with hint 4 and build up our Blackjack project

10411
00:00:52,350 --> 00:00:56,760
step-by-step. Now the idea of the hints 1, 2,

10412
00:00:56,760 --> 00:01:01,760
and 3 is to get you to create these small to-dos of your own so that you

10413
00:01:03,300 --> 00:01:08,220
can have practice breaking down the problem into a list and then breaking it

10414
00:01:08,220 --> 00:01:13,170
down into a flowchart and then breaking it down into smaller bite-size to-dos.

10415
00:01:13,860 --> 00:01:15,750
So let's start out with the first one,

10416
00:01:16,350 --> 00:01:21,350
we have to create a deal_card function that uses the list below to return a

10417
00:01:22,470 --> 00:01:27,180
random card and 11 is going to be the Ace in this deck.

10418
00:01:27,990 --> 00:01:32,850
So let's get started by forking a copy of this repl and we're going to go and

10419
00:01:32,850 --> 00:01:34,740
create our deal_card function.

10420
00:01:35,610 --> 00:01:39,810
Now this function is going to contain these cards,

10421
00:01:39,840 --> 00:01:43,770
so I'm going to go ahead and paste it in, make sure it's indented

10422
00:01:43,830 --> 00:01:48,830
so it's inside the function. And now I'm going to use these cards to randomly

10423
00:01:49,650 --> 00:01:52,650
pick one out of this list. So to do that,

10424
00:01:52,680 --> 00:01:57,210
we can of course import our random module.

10425
00:01:57,840 --> 00:02:02,840
And then I'm going to use random.choice to pick a random card from my list

10426
00:02:03,900 --> 00:02:07,740
of cards. And then this of course has an output,

10427
00:02:07,770 --> 00:02:09,030
this random.choice

10428
00:02:09,330 --> 00:02:14,330
so I'm gonna save that output, namely the random card, inside a variable called

10429
00:02:15,480 --> 00:02:16,313
card.

10430
00:02:16,770 --> 00:02:21,540
And then finally we're going to return this chosen card as the output.

10431
00:02:22,200 --> 00:02:23,910
So that's step 4 done.

10432
00:02:25,590 --> 00:02:27,480
Now let's move on to step 5.

10433
00:02:28,110 --> 00:02:33,030
So we're going to deal the user and computer two cards each using the deal card

10434
00:02:33,030 --> 00:02:35,310
function, and very helpfully

10435
00:02:35,340 --> 00:02:38,760
the hint tells us that we can start out with a blank

10436
00:02:39,030 --> 00:02:42,810
user_card and a blank computer_card list.

10437
00:02:43,020 --> 00:02:46,110
So we basically just have to add two cards to

10438
00:02:46,110 --> 00:02:48,660
each of these lists. To do this,

10439
00:02:48,660 --> 00:02:53,660
I'm going to use a for loop and I'm going to use the range operator to run this

10440
00:02:55,560 --> 00:02:56,790
for-loop twice.

10441
00:02:57,150 --> 00:03:01,480
So you've seen this syntax before when we talked about for loops and I've got an

10442
00:03:01,510 --> 00:03:05,620
underscore here because we don't actually need this particular variable.

10443
00:03:05,920 --> 00:03:08,650
All we need is for this loop to run twice

10444
00:03:08,770 --> 00:03:13,390
and this code is going to achieve that. Every single time this loop runs

10445
00:03:13,420 --> 00:03:16,840
we're going to get a new card by calling deal_card.

10446
00:03:17,530 --> 00:03:20,440
Now remember that deal_card has an output,

10447
00:03:20,740 --> 00:03:23,800
it outputs a random card. So if you want,

10448
00:03:23,800 --> 00:03:27,160
it's actually quite helpful to add some documentation to this.

10449
00:03:27,400 --> 00:03:32,400
So we could say returns a random card from the deck.

10450
00:03:34,720 --> 00:03:37,510
And now when I write deal_card

10451
00:03:37,570 --> 00:03:41,560
you can see that the doc tells me that this function is going to return a random

10452
00:03:41,560 --> 00:03:46,330
card from the deck. So that random card is going to replace this function call

10453
00:03:46,420 --> 00:03:50,320
so we can capture that data by storing it inside of a variable.

10454
00:03:50,740 --> 00:03:55,740
So we'll call that new_card and set it equal to the output from the function

10455
00:03:57,670 --> 00:03:59,680
deal_card. Now,

10456
00:03:59,770 --> 00:04:04,690
the next thing we're going to do is we're going to add this new_card to the

10457
00:04:04,690 --> 00:04:05,860
user's cards.

10458
00:04:06,100 --> 00:04:11,100
So at the moment, it's an empty list and all we have to do is say user_cards

10459
00:04:11,890 --> 00:04:13,060
.append

10460
00:04:13,510 --> 00:04:17,890
and then the object that we want to add to that list is going to be the new_

10461
00:04:17,890 --> 00:04:18,723
card.

10462
00:04:19,240 --> 00:04:24,240
Now some of you might be tempted to instead use the plus equals.

10463
00:04:25,360 --> 00:04:30,280
You might want to write something like this; user_cards += new_card.

10464
00:04:30,970 --> 00:04:34,030
And I want to show you what actually happens when yourun this.

10465
00:04:34,030 --> 00:04:35,770
cause this is a really common error.

10466
00:04:36,370 --> 00:04:39,160
We get a trace back and we get a type error.

10467
00:04:39,370 --> 00:04:44,370
It tells us that the int object is not iterable and it highlights this line 49

10468
00:04:46,390 --> 00:04:50,500
as the reason for the error. So what's going on here?

10469
00:04:51,130 --> 00:04:51,400
Well,

10470
00:04:51,400 --> 00:04:56,400
this += is actually shorthand for writing the extend function.

10471
00:04:58,180 --> 00:05:02,410
Now you can see that the extend function is something that extends a list

10472
00:05:02,770 --> 00:05:07,360
by appending elements from the iterable. So what does this mean? Well,

10473
00:05:07,360 --> 00:05:11,410
it means that whatever you put inside this parentheses,

10474
00:05:11,770 --> 00:05:15,340
it has to be a list itself. For example,

10475
00:05:15,850 --> 00:05:20,680
if this new_card was a list of cards,

10476
00:05:20,830 --> 00:05:24,970
so maybe just the first dealt card and another card

10477
00:05:25,300 --> 00:05:29,500
or even just it by itself inside a set of square brackets

10478
00:05:29,590 --> 00:05:34,240
which turns it into a list, well then if we run this code right now

10479
00:05:35,680 --> 00:05:40,420
we no longer have any errors and if I convert this back to what you saw before,

10480
00:05:40,450 --> 00:05:44,260
which is using the plus equals, we also have no errors.

10481
00:05:44,920 --> 00:05:49,780
But when you only want to add a single item, not a list, to an existing list

10482
00:05:50,020 --> 00:05:53,770
then you have to use append. So hopefully you didn't have this issue,

10483
00:05:54,100 --> 00:05:54,940
but if you did,

10484
00:05:55,000 --> 00:05:59,750
this is the reason. Now that we've created these two lines,

10485
00:05:59,810 --> 00:06:04,340
you can see that it's a little bit redundant because we're creating this new

10486
00:06:04,340 --> 00:06:08,120
card variable just to hold the output from this function.

10487
00:06:08,600 --> 00:06:12,710
And then we're immediately putting it into this list using the append.

10488
00:06:13,220 --> 00:06:18,220
So instead we can actually just get rid of the middleman and put deal_card

10489
00:06:18,980 --> 00:06:21,440
directly inside the append.

10490
00:06:22,010 --> 00:06:25,460
And this does exactly the same thing in a single line of code.

10491
00:06:26,360 --> 00:06:28,430
Once we've done this for user_cards,

10492
00:06:28,460 --> 00:06:31,610
we'd probably want to do the same thing for the computers cards.

10493
00:06:32,000 --> 00:06:36,620
So it computer_cards.append, and then we call deal_card again,

10494
00:06:36,680 --> 00:06:37,970
remembering the parentheses.

10495
00:06:38,210 --> 00:06:43,210
So we've got a total of three parentheses at the end and this way we deal a new

10496
00:06:43,520 --> 00:06:47,360
card and that new card gets appended to the end of this 

10497
00:06:47,920 --> 00:06:48,010
list.


10498
00:00:00,120 --> 00:00:03,090
All right. So now let's tackle hint number 6.

10499
00:00:03,660 --> 00:00:06,870
We're going to create a function called calculate_score

10500
00:00:06,900 --> 00:00:09,570
that's going to take a list of cards as an input,

10501
00:00:09,990 --> 00:00:13,110
and then it returns the score after calculation.

10502
00:00:13,890 --> 00:00:16,050
And it tells us that if we get stuck,

10503
00:00:16,110 --> 00:00:18,420
we can look up the sum function to help us.

10504
00:00:19,080 --> 00:00:22,440
So let's create a function called calculate_score

10505
00:00:23,190 --> 00:00:27,720
and this calculate_score is going to take some cards as an input,

10506
00:00:28,350 --> 00:00:29,790
and then inside the body

10507
00:00:29,820 --> 00:00:34,670
it's going to calculate the total of all the cards in this list.

10508
00:00:35,360 --> 00:00:38,780
So if we take a look at the sum function in Python,

10509
00:00:39,260 --> 00:00:43,100
the way that it works is you can put a iterable,

10510
00:00:43,220 --> 00:00:47,930
so like a list inside the parentheses as an input

10511
00:00:48,440 --> 00:00:52,310
and then it's going to add up all of the items in the list

10512
00:00:52,640 --> 00:00:56,570
and it's going to return the total. Back in our code

10513
00:00:56,870 --> 00:01:00,950
we can simply write sum, and then inside these parentheses

10514
00:01:00,980 --> 00:01:05,980
we can pass over the cards and we can return this value as the output.

10515
00:01:07,760 --> 00:01:08,450
Basically

10516
00:01:08,450 --> 00:01:13,310
if we had cards equal to a list with 1, 5,

10517
00:01:13,340 --> 00:01:14,173
3,

10518
00:01:14,180 --> 00:01:19,180
4, then the sum function is going to end up being equal to 1 + 5 +

10519
00:01:19,580 --> 00:01:23,060
3 + 4, which is going to be equal to 13.

10520
00:01:23,360 --> 00:01:26,450
And then that will become the output of this function.

10521
00:01:27,530 --> 00:01:29,660
So now let's move on to hint 7.

10522
00:01:30,710 --> 00:01:32,660
A Blackjack only happens when

10523
00:01:32,740 --> 00:01:37,740
we have a hand with only two cards and those cards have to be an Ace and a 10

10524
00:01:39,470 --> 00:01:42,470
value card. In our deck

10525
00:01:42,500 --> 00:01:47,500
we know that an Ace is represented by 11 and we have a number of 10 value cards.

10526
00:01:50,570 --> 00:01:54,410
So there's a number of ways that we can check for this Blackjack.

10527
00:01:54,980 --> 00:01:59,980
One of the ways is by checking to see if the 11 is in our deck of cards,

10528
00:02:02,180 --> 00:02:07,180
and then we can combine that with an and to check if the 10 is also in our deck

10529
00:02:07,850 --> 00:02:09,800
of cards. And finally,

10530
00:02:09,830 --> 00:02:13,730
we can check to make sure that we've got a hand size of two.

10531
00:02:14,240 --> 00:02:19,070
So we can check that the length of our cards is equal to two,

10532
00:02:19,790 --> 00:02:24,790
and this would represent this logic: a hand with only two cards, an Ace

10533
00:02:25,220 --> 00:02:29,900
which is represented by 11 and a 10. Now, on the other hand

10534
00:02:29,930 --> 00:02:34,930
we could actually also simplify this because a hand with only two cards that

10535
00:02:35,630 --> 00:02:38,600
must contain an 11 and a 10, we can

10536
00:02:38,600 --> 00:02:42,380
instead of checking for both 11 and 10, we can check to

10537
00:02:42,410 --> 00:02:44,390
see if the total,

10538
00:02:44,420 --> 00:02:49,420
so that if we summed the cards and if this was equal to 21,

10539
00:02:50,750 --> 00:02:55,010
then it would be exactly the same thing, right? 10 + 11 is 21

10540
00:02:55,490 --> 00:02:59,740
and we've still only got a deck of two. In this case

10541
00:02:59,770 --> 00:03:04,600
what we want to happen is we want to return zero instead of the actual score.

10542
00:03:05,110 --> 00:03:10,110
So this way we can indicate that the user or the computer has got a score of

10543
00:03:10,720 --> 00:03:15,010
Blackjack. That's hint number 7 sorted,

10544
00:03:15,190 --> 00:03:20,110
let's move onto a hint number 8. It tells us that inside calculate_score,

10545
00:03:20,320 --> 00:03:23,770
we should check also for an 11, which is an Ace.

10546
00:03:24,400 --> 00:03:26,620
If the score is already over 21,

10547
00:03:27,010 --> 00:03:32,010
then we should remove the 11 from the cards and we could replace it with a one,

10548
00:03:32,920 --> 00:03:36,940
because remember that an Ace can count as an 11 or 1.

10549
00:03:37,420 --> 00:03:41,140
So in the beginning, when the user's score is very small,

10550
00:03:41,380 --> 00:03:43,840
then we probably want to count it as an 11.

10551
00:03:44,260 --> 00:03:46,690
But once the user goes over 21,

10552
00:03:46,960 --> 00:03:50,470
then we probably want to change it and count it as a 1 instead

10553
00:03:50,500 --> 00:03:55,000
so they don't go over and they don't lose. Let's first write

10554
00:03:55,000 --> 00:03:55,870
the if statement.

10555
00:03:56,140 --> 00:04:01,140
So if there is the 11 inside our deck of cards and the

10556
00:04:03,670 --> 00:04:08,650
sum of the cards, so the total_score, is already over 21,

10557
00:04:09,220 --> 00:04:11,140
then we want to do something about it.

10558
00:04:11,680 --> 00:04:15,550
And the hint tells us to look up the append and remove functions.

10559
00:04:16,089 --> 00:04:19,180
So we've already seen the append function many times,

10560
00:04:19,360 --> 00:04:23,500
and we know that it just adds a single element to the end of the list.

10561
00:04:24,520 --> 00:04:28,180
Now the one that we haven't used a lot of is the remove function

10562
00:04:28,750 --> 00:04:33,750
and this we'll search for the first instance of the given element and removes it

10563
00:04:34,870 --> 00:04:38,260
out of the list. This is kind of what we need to do.

10564
00:04:38,590 --> 00:04:43,360
We need to go ahead and remove the 11 from the list of cards. So we can write

10565
00:04:43,360 --> 00:04:47,080
cards.remove, and inside the parentheses,

10566
00:04:47,380 --> 00:04:52,030
we use the 11 and then we do cards.append,

10567
00:04:52,360 --> 00:04:55,960
so that we end up adding a 1 instead of the 11.

10568
00:04:56,740 --> 00:05:00,310
This way we remove the 11 and replace it with a 1.

10569
00:05:01,210 --> 00:05:05,140
And hopefully our cards will now take the user to below 21.


10570
00:00:00,810 --> 00:00:04,620
Now let's move on to a hint 9. So we want to call

10571
00:00:04,620 --> 00:00:07,350
calculate_score at some point in our code

10572
00:00:07,920 --> 00:00:10,830
and if the computer or the user has a Blackjack 

10573
00:00:11,250 --> 00:00:15,390
or if the user's score is over 21, then the game is going to end.

10574
00:00:15,900 --> 00:00:19,440
This might be a good time to start tidying up our code a little bit,

10575
00:00:19,860 --> 00:00:22,320
because we've got our function over here,

10576
00:00:23,310 --> 00:00:25,140
the calculate score function.

10577
00:00:25,710 --> 00:00:29,790
And remember that you can only call a function after it's been declared.

10578
00:00:30,150 --> 00:00:34,500
So for example, if I wanted to call this function over here,

10579
00:00:34,860 --> 00:00:36,090
then I actually can't.

10580
00:00:36,090 --> 00:00:40,710
I can't say calculate_score because it hasn't yet been declared.

10581
00:00:41,310 --> 00:00:42,210
So instead,

10582
00:00:42,240 --> 00:00:46,980
what I'm going to do is I'm going to take this function and I'm going to move it

10583
00:00:47,220 --> 00:00:51,720
to where we dealt our cards and I'm going to collapse some of these functions so

10584
00:00:51,720 --> 00:00:55,080
I can see my hints and my code a little bit easier.

10585
00:00:56,040 --> 00:01:00,360
So now that I've moved my function to above the line where I want to call it,

10586
00:01:00,690 --> 00:01:02,430
it's now become valid code.

10587
00:01:02,970 --> 00:01:07,530
And this is the place where I want to call it because it's only after I've dealt

10588
00:01:07,530 --> 00:01:12,390
the user and the computer some cards can I actually calculate their scores.

10589
00:01:12,900 --> 00:01:16,740
Firstly, I want to calculate the score using the user's cards.

10590
00:01:17,160 --> 00:01:22,160
So this list of cards from the user gets passed into this function and uses

10591
00:01:22,800 --> 00:01:26,280
all of the logic to output some sort of score.

10592
00:01:27,180 --> 00:01:29,820
And then I'm going to store that score in a variable

10593
00:01:29,820 --> 00:01:31,290
which I'll call user_score.

10594
00:01:32,190 --> 00:01:35,160
And I'm going to do the same thing for the computer,

10595
00:01:35,190 --> 00:01:40,170
so computer_score equals calculate_score. And remember,

10596
00:01:40,440 --> 00:01:45,440
it's always helpful to add a little bit of a docstring to tell ourselves and

10597
00:01:45,870 --> 00:01:49,650
other programmers what this function does. Let's quickly summarize it.

10598
00:01:49,650 --> 00:01:54,650
So this function is going to take a list of cards and return the score

10599
00:01:57,120 --> 00:01:58,980
calculated from the cards.

10600
00:02:00,780 --> 00:02:02,790
So now when I open that parentheses,

10601
00:02:03,150 --> 00:02:07,200
I know that I probably have to pass in my list of cards in order to get back the

10602
00:02:07,200 --> 00:02:08,032
score.

10603
00:02:08,130 --> 00:02:12,480
So let's put in the computer_cards in as the inputs,

10604
00:02:12,900 --> 00:02:15,690
and now we've got the user_score and the computer_score.

10605
00:02:16,110 --> 00:02:18,000
So this score could equal zero

10606
00:02:18,030 --> 00:02:22,890
if they got a Blackjack or it could just simply be the value of the cards that

10607
00:02:22,890 --> 00:02:24,930
they hold all added up together.

10608
00:02:26,070 --> 00:02:28,620
Now that we've called calculate_score

10609
00:02:29,040 --> 00:02:34,040
we also want to make sure that if the computer or the user has a Blackjack 

10610
00:02:34,710 --> 00:02:39,450
or if the user's score is over 21, then we have to end the game.

10611
00:02:40,740 --> 00:02:45,510
Let's write our if statements. If the user_score is equal to zero,

10612
00:02:46,080 --> 00:02:50,130
or the computer_score is equal to zero,

10613
00:02:50,760 --> 00:02:55,740
or the user_score is greater than 21, then in this case

10614
00:02:55,770 --> 00:02:58,140
we're going to tell the game to end.

10615
00:02:58,560 --> 00:03:03,130
So we could create a new variable called is_game_over

10616
00:03:04,450 --> 00:03:08,890
and we start out with false, of course. But then when this happens,

10617
00:03:08,950 --> 00:03:12,160
we're going to change that variable to true instead.

10618
00:03:13,180 --> 00:03:16,960
Our is_game_over variable is just a simple boolean.

10619
00:03:17,620 --> 00:03:21,100
It starts out as false and when certain conditions are met,

10620
00:03:21,310 --> 00:03:25,660
then we change it to true. Now at the moment, our program is not finished.

10621
00:03:25,750 --> 00:03:29,880
So it was not really obvious how we're going to be using this is_game_over

10622
00:03:29,890 --> 00:03:33,220
variable. But we're setting ourselves up for the next steps.

10623
00:03:33,670 --> 00:03:36,190
Now that we're tracking if the game should end,

10624
00:03:36,400 --> 00:03:39,520
we can look at this value to determine what to do next.

10625
00:03:39,880 --> 00:03:44,740
So that's hint 9 completed. Let's test our code and see how everything works so

10626
00:03:44,740 --> 00:03:45,573
far.

10627
00:03:45,820 --> 00:03:49,840
I'm going to add some print statements here so that I can see what the user's

10628
00:03:49,840 --> 00:03:54,670
cards are and what the user's score is. Using an fstring

10629
00:03:54,730 --> 00:03:59,470
I'm going to show your cards, so the user's cards, and the current score.

10630
00:04:00,880 --> 00:04:04,810
And I'm also going to print the computers first card.

10631
00:04:05,320 --> 00:04:08,350
Remember when I first explained the rules of Blackjack,

10632
00:04:08,710 --> 00:04:12,220
the dealer will reveal their first card

10633
00:04:12,640 --> 00:04:17,050
so you get a little bit of a clue as to what kind of hand they might have.

10634
00:04:18,160 --> 00:04:21,310
So in here, we're going to insert the computer's cards

10635
00:04:21,760 --> 00:04:26,470
and we're only gonna pick out the first item, so that the one at index zero,

10636
00:04:26,590 --> 00:04:30,610
and we do that using a square bracket after the name of the list.

10637
00:04:31,960 --> 00:04:36,220
Now let's give our program a run and see if it actually works.

10638
00:04:36,820 --> 00:04:40,780
The first thing that prints is a list of our cards.

10639
00:04:40,840 --> 00:04:41,920
So in our hand,

10640
00:04:41,950 --> 00:04:46,180
we have a 2 and we have a 6 and 2 + 6 added together

10641
00:04:46,210 --> 00:04:48,040
of course makes the score of 8.

10642
00:04:48,670 --> 00:04:52,630
And then it reveals to us the computer's first card, which is a 10.

10643
00:04:53,320 --> 00:04:57,730
Now we can be reasonably assured that our code is working.

10644
00:04:58,330 --> 00:05:02,170
And it's a good idea to regularly test your code so that you don't wait until

10645
00:05:02,170 --> 00:05:04,120
the end when they're a lot of problems

10646
00:05:04,360 --> 00:05:06,790
and you don't know which part of the code is responsible.


10647
00:00:00,390 --> 00:00:02,940
Now let's move on to hint number 10.

10648
00:00:03,660 --> 00:00:06,750
It says that if the game has not ended ask the user

10649
00:00:06,750 --> 00:00:09,630
if they want to draw another card. If yes

10650
00:00:09,660 --> 00:00:13,470
then use the deal card function to add another card to the user's card list.

10651
00:00:13,830 --> 00:00:15,840
If no, then the game has again

10652
00:00:15,900 --> 00:00:19,680
ended. Over here in the if statement

10653
00:00:19,740 --> 00:00:24,540
we can add an else because if the game hasn't ended, as in

10654
00:00:24,570 --> 00:00:27,840
they haven't gone over 21 or nobody's got a Blackjack,

10655
00:00:28,140 --> 00:00:31,920
then we're going to ask the user if they want to get another card.

10656
00:00:32,340 --> 00:00:34,410
I'm going to use a input

10657
00:00:35,370 --> 00:00:38,700
and I'm going to ask the user to type 'y' to get another card,

10658
00:00:39,120 --> 00:00:41,340
otherwise type 'n' to pass.

10659
00:00:42,000 --> 00:00:45,360
And I'm going to save this input inside a variable, which I'll

10660
00:00:45,410 --> 00:00:47,900
call user_should_deal.

10661
00:00:49,340 --> 00:00:54,340
Now we can check to see if this variable is equal to 'y'. Well in that case,

10662
00:00:57,410 --> 00:00:59,810
we're going to add another card to

10663
00:00:59,810 --> 00:01:03,980
the user's card list by doing the same thing that we did in the beginning

10664
00:01:04,069 --> 00:01:07,550
where we dealt two cards to each player by saying

10665
00:01:07,580 --> 00:01:12,380
user_cards.append and inside the parentheses

10666
00:01:12,400 --> 00:01:16,790
the thing that we want to append is the output from deal_card.

10667
00:01:18,080 --> 00:01:22,730
So just a quick check to make sure you've got all the parentheses there and then

10668
00:01:22,760 --> 00:01:26,990
we're ready to address the else. If they didn't type 'y',

10669
00:01:27,140 --> 00:01:30,920
then that means they don't want another card. Well, then in this case,

10670
00:01:30,950 --> 00:01:32,630
the game has again ended.

10671
00:01:32,780 --> 00:01:35,960
So we can say is_game_over equals true.

10672
00:01:38,210 --> 00:01:39,740
Let's test this out as well.

10673
00:01:40,340 --> 00:01:44,600
We got 7 and 11 with the current score of 18.

10674
00:01:45,140 --> 00:01:48,500
If we type 'y' hopefully we'll get another card.

10675
00:01:49,520 --> 00:01:52,460
And we did see that prompt and we saw something happen,

10676
00:01:52,820 --> 00:01:57,530
but our program then promptly ended. Let's take a look at the next step.

10677
00:01:57,650 --> 00:02:00,110
How can we get our game to repeat itself?

10678
00:02:00,830 --> 00:02:04,580
So hint number 11 tells us that the score will need to be rechecked with

10679
00:02:04,580 --> 00:02:05,990
every new card drawn

10680
00:02:06,470 --> 00:02:10,940
and the checks in hint 9 needs to be repeated until the game ends.

10681
00:02:11,510 --> 00:02:15,890
Notice how we've got this flag, is_game_over, which is set to true

10682
00:02:16,160 --> 00:02:19,880
whenever the game ends. It starts off being false

10683
00:02:20,240 --> 00:02:23,900
and what this means is we can actually create a while loop

10684
00:02:24,260 --> 00:02:27,260
which basically keeps on calculating the user_score

10685
00:02:27,350 --> 00:02:30,590
and the computer_score, makes all of these checks

10686
00:02:30,800 --> 00:02:32,390
which are in hint 9,

10687
00:02:32,780 --> 00:02:36,050
and then repeats itself until the game ends.

10688
00:02:36,860 --> 00:02:40,370
Let's go ahead and do that. After all the initial setup,

10689
00:02:40,520 --> 00:02:45,320
we're going to create a while loop and the while loop is going to be active

10690
00:02:45,500 --> 00:02:48,560
until the game is over. So we can say

10691
00:02:48,560 --> 00:02:50,900
while not is_game_over,

10692
00:02:51,770 --> 00:02:55,460
then go ahead and carry out all of these instructions.

10693
00:02:55,760 --> 00:02:59,060
So calculate the user_score, calculate the computer_score,

10694
00:02:59,380 --> 00:03:03,670
check that nobody's gone over 21 and nobody's gotten a Blackjack.

10695
00:03:04,090 --> 00:03:08,190
And if the user wants more cards than they should, if they don't then the

10696
00:03:08,190 --> 00:03:12,040
the game is over. So let's run this and try it again.

10697
00:03:14,160 --> 00:03:18,270
Our cards are 10 and 10 which probably means we shouldn't get another card

10698
00:03:18,270 --> 00:03:22,320
cause we're already so close to 21, but I'm going to be daring and press

10699
00:03:22,320 --> 00:03:26,730
'y' anyways. And it tells us that our cords are now 10,

10700
00:03:26,760 --> 00:03:28,260
10 plus two.

10701
00:03:28,590 --> 00:03:32,490
So we got an extra card and that takes up our score to 22.

10702
00:03:33,030 --> 00:03:34,620
That worked perfectly.

10703
00:03:35,310 --> 00:03:38,820
So now let's go back and tackle the next part. Hint

10704
00:03:38,820 --> 00:03:42,960
number 12 says once the user is done, it's time to let the computer play.

10705
00:03:43,410 --> 00:03:48,270
The computer should keep drawing cards as long as it has a score less than 17.

10706
00:03:49,200 --> 00:03:53,940
So the while loop is responsible for dealing with when the user wants to keep

10707
00:03:53,940 --> 00:03:56,880
drawing cards. But once that's done,

10708
00:03:56,970 --> 00:03:59,280
then we can tackle hint number 12,

10709
00:03:59,700 --> 00:04:04,110
which is how does the computer actually play? What is its strategy?

10710
00:04:04,680 --> 00:04:08,010
Well, we know that the computer has to keep drawing cards

10711
00:04:08,520 --> 00:04:13,020
as long as it has a score of less than 17. But, of course,

10712
00:04:13,260 --> 00:04:17,370
0 which represents a Blackjack is also less than 17,

10713
00:04:17,670 --> 00:04:21,420
but we don't want it to draw a card if it has a Blackjack.

10714
00:04:22,230 --> 00:04:27,230
We can represent this logic using a while loop; while the computer_score is not

10715
00:04:29,460 --> 00:04:34,460
equal to zero and the computer_score is less than 17,

10716
00:04:37,380 --> 00:04:40,410
then in this case we want to keep drawing cards.

10717
00:04:41,100 --> 00:04:43,350
We're going to take the computers cards

10718
00:04:43,830 --> 00:04:48,830
and we're going to use the append to add a card by dealing another card to the

10719
00:04:49,560 --> 00:04:50,393
computer.

10720
00:04:51,120 --> 00:04:56,120
And then we're going to recalculate the computer_score so that it updates

10721
00:04:56,760 --> 00:05:00,570
and this while loop is evaluated on the latest score.

10722
00:05:01,260 --> 00:05:06,150
So the computer_score is going to equal calculate_score using the computer's

10723
00:05:06,150 --> 00:05:06,983
cards.

10724
00:05:07,740 --> 00:05:12,740
And that means that the updated computer_score is equal to the return value from

10725
00:05:13,680 --> 00:05:18,600
calculate_score. So that's hint 12 complete. In the next step

10726
00:05:18,660 --> 00:05:22,020
we're going to start comparing our player's hand with the dealer's hand.

10727
00:05:22,350 --> 00:05:23,430
See you in the next lesson.


10728
00:00:00,690 --> 00:00:03,420
At this point, we've created two while loops.

10729
00:00:03,540 --> 00:00:08,070
The first while loop is for the user so that they can continue taking cards

10730
00:00:08,370 --> 00:00:12,660
and the second while loop is for the computer so that the dealer can follow

10731
00:00:12,660 --> 00:00:16,410
their strategy. Now it's time to tackle hint 13

10732
00:00:16,470 --> 00:00:18,870
where we create a function called compare.

10733
00:00:20,220 --> 00:00:23,520
We pass in the final user_score and computer_score,

10734
00:00:24,180 --> 00:00:28,380
and then we compare the scores to see who has won, who has lost,

10735
00:00:28,560 --> 00:00:30,330
or if they have a draw.

10736
00:00:31,740 --> 00:00:34,080
So remember that in order to call a function,

10737
00:00:34,470 --> 00:00:37,710
it has to be declared before the line we want to use it.

10738
00:00:38,160 --> 00:00:41,640
So let's go back up and after hint number six

10739
00:00:41,640 --> 00:00:43,560
where we had the last function,

10740
00:00:43,890 --> 00:00:47,880
let's add this hint here and create our compare function here.

10741
00:00:48,600 --> 00:00:53,600
This compare function is going to take the user_score and also the computer_

10742
00:00:54,060 --> 00:00:57,420
score and it's going to compare these two scores.

10743
00:00:58,080 --> 00:01:02,040
If the user_score is equal to the computer_score,

10744
00:01:02,790 --> 00:01:06,390
then we said this should mean that it's a draw.

10745
00:01:07,170 --> 00:01:11,430
So we'll return some sort of message that represents this.

10746
00:01:12,090 --> 00:01:17,090
But elif or else if the computer has a Blackjack,

10747
00:01:19,140 --> 00:01:23,610
so the computer_score is equal to zero, well in this case

10748
00:01:23,640 --> 00:01:28,640
we should return that the user has lost and the opponent has a Blackjack.

10749
00:01:29,460 --> 00:01:32,940
And then we go through this list and we add in all of these other conditions.

10750
00:01:33,090 --> 00:01:34,260
So I'm gonna speed it up a bit.

10751
00:01:37,440 --> 00:01:39,090
Now for the final condition,

10752
00:01:39,780 --> 00:01:43,110
it says that the player with the highest score should win.

10753
00:01:43,680 --> 00:01:48,680
So we can write an elif that compares the user_score against the computer score

10754
00:01:50,910 --> 00:01:55,890
and we're basically saying if the user_score is greater than the computer score,

10755
00:01:56,160 --> 00:01:58,800
well, then that means that the user wins.

10756
00:02:00,420 --> 00:02:05,250
But if that's not true and because we've covered everything else,

10757
00:02:05,640 --> 00:02:09,090
we now have the final return, which is you lose.

10758
00:02:11,700 --> 00:02:12,030
Now,

10759
00:02:12,030 --> 00:02:17,030
remember that if, elif, else statements are evaluated from top to bottom.

10760
00:02:18,570 --> 00:02:22,800
Even though if the computer score is a zero which is a Blackjack

10761
00:02:23,160 --> 00:02:26,490
which is obviously much less than whatever score the user might have,

10762
00:02:27,060 --> 00:02:32,060
because it's going to return at this point and it's going to exit the function,

10763
00:02:32,700 --> 00:02:37,020
it will never get to this comparison if this is already true.

10764
00:02:37,620 --> 00:02:40,770
If you get confused about how if elif and else works

10765
00:02:41,130 --> 00:02:44,580
especially the order in which you add the conditions,

10766
00:02:44,910 --> 00:02:48,630
have a look back at the lesson where we talked about this in more detail.

10767
00:02:49,050 --> 00:02:51,660
This might be a good time to revise that concept.

10768
00:02:52,380 --> 00:02:55,440
But now that we've completed our compare function,

10769
00:02:55,560 --> 00:02:58,830
we're going to use it at the end of our code here

10770
00:02:59,290 --> 00:03:02,440
because this is a time that the user is done drawing cards,

10771
00:03:02,500 --> 00:03:04,210
the computer's done drawing cards

10772
00:03:04,690 --> 00:03:07,660
and now we can call that compare function

10773
00:03:09,370 --> 00:03:14,370
and pass in the user_score and also the computer_score.

10774
00:03:16,060 --> 00:03:20,080
So this should hopefully give us the final result

10775
00:03:20,290 --> 00:03:24,550
as a piece of text. Let's run the code as it is and see what happens.

10776
00:03:25,120 --> 00:03:29,020
We started out with a 3 and a 6 making a 9.

10777
00:03:29,740 --> 00:03:34,000
Now we know the computer at least got a 10, so let's add another card.

10778
00:03:34,690 --> 00:03:38,050
So now we have a score of 11 with 3, 6, and 2,

10779
00:03:38,380 --> 00:03:43,330
so we can still keep going. And luckily we've managed to get a total of 21.

10780
00:03:43,870 --> 00:03:48,310
Now we're pretty much invincible I think. So if I go ahead and hit no

10781
00:03:48,310 --> 00:03:52,360
cause I don't want to take any more cards, then let's see what the result is.

10782
00:03:52,930 --> 00:03:56,230
So it tells us we win and a big smiley face.

10783
00:03:56,620 --> 00:03:59,590
So we can probably give the user a little bit more information,

10784
00:03:59,650 --> 00:04:04,630
like revealing the final deck; what the computer got, and what we got.

10785
00:04:05,350 --> 00:04:09,070
I'm going to go ahead and create some other print statements above this one.

10786
00:04:09,910 --> 00:04:14,910
Maybe I'll tell the user that your final hand is this,

10787
00:04:17,320 --> 00:04:20,290
and the final score was...

10788
00:04:21,519 --> 00:04:24,700
And then let's reveal to them the computer_score,

10789
00:04:27,190 --> 00:04:31,930
and then finally we can print the user_score and the computer_score to

10790
00:04:31,930 --> 00:04:35,110
tell them who won, who lost, or whether if its a draw.

10791
00:04:37,510 --> 00:04:41,380
In this deck, we've got 14, so let's add another card to it.

10792
00:04:41,740 --> 00:04:45,040
Unfortunately we went over because we've got another 10.

10793
00:04:45,340 --> 00:04:48,970
So our final hand is 10, 4, 10

10794
00:04:49,480 --> 00:04:54,220
and the final score was 24. The computer's final hand was 21,

10795
00:04:54,250 --> 00:04:55,083
lucky them.

10796
00:04:55,150 --> 00:05:00,150
So we went over and we lost. If we wanted to play another game because we are

10797
00:05:01,300 --> 00:05:02,470
Blackjack addicts,

10798
00:05:02,740 --> 00:05:06,160
then we want to give the user some sort of means of doing this right?

10799
00:05:06,730 --> 00:05:09,430
And that's what the last hint addresses.

10800
00:05:09,640 --> 00:05:12,790
So we're going to ask the user if they want to restart the game.

10801
00:05:13,120 --> 00:05:14,230
If the answer is yes,

10802
00:05:14,290 --> 00:05:18,580
then we're going to clear the console and start a new game of Blackjack and also

10803
00:05:18,760 --> 00:05:21,850
show the logo from art.py while we're at it.

10804
00:05:23,290 --> 00:05:27,580
Let's go ahead and add a input and we can ask them,

10805
00:05:27,670 --> 00:05:31,570
do you wanna play a game of Blackjack? Type yes or no.

10806
00:05:32,800 --> 00:05:37,800
So remember that this entire function is going to be evaluated and the result or

10807
00:05:38,620 --> 00:05:41,920
the output is going to replace this part of the code.

10808
00:05:42,520 --> 00:05:46,000
So we can say that while the input is equal to y

10809
00:05:46,660 --> 00:05:49,000
then we're going to keep playing the game.

10810
00:05:49,630 --> 00:05:54,630
The game is all the code between hint 5 and the end where we compare.

10811
00:05:57,140 --> 00:06:00,830
So if we actually put this inside a function by

10812
00:06:00,830 --> 00:06:05,830
indenting it over and then creating a function here called play_game,

10813
00:06:07,430 --> 00:06:10,280
well then we can actually call this function,

10814
00:06:10,340 --> 00:06:13,940
play_game, every time the user types 'y'.

10815
00:06:16,790 --> 00:06:20,810
Now we don't want to clutter up our screen with all the previous games.

10816
00:06:21,050 --> 00:06:23,480
So before we call play_game,

10817
00:06:23,540 --> 00:06:27,440
we also want to clear the console. And to do that

10818
00:06:27,470 --> 00:06:32,470
we obviously have to import the clear function from the replit module.

10819
00:06:33,110 --> 00:06:34,340
So from replit

10820
00:06:34,340 --> 00:06:39,340
import clear, and now we can call this clear function to clear the console in

10821
00:06:42,320 --> 00:06:43,880
here after each game.

10822
00:06:44,450 --> 00:06:49,450
And then we can call play_game so that the code in this function gets repeated.

10823
00:06:52,190 --> 00:06:55,220
And we also said that at the beginning when we play game

10824
00:06:55,340 --> 00:06:59,330
we're going to show the user the logo from art.py.

10825
00:06:59,930 --> 00:07:02,870
So let's go back and import that as well.

10826
00:07:02,870 --> 00:07:05,960
So from art import logo,

10827
00:07:07,580 --> 00:07:12,140
and then at the beginning of every game, we're going to print our logo.

10828
00:07:13,190 --> 00:07:16,490
That's all there is to this project

10829
00:07:16,880 --> 00:07:21,440
and now let's run it one final time and see the whole thing in action.

10830
00:07:22,520 --> 00:07:25,040
Do you wanna play a game of Blackjack? Yes.

10831
00:07:26,060 --> 00:07:28,730
And it reveals our beautiful Blackjack logo.

10832
00:07:29,150 --> 00:07:32,390
It tells us the cards that we have, so current score of 11.

10833
00:07:32,420 --> 00:07:36,590
I'm going to take another card. I'm on 21, which is perfect.

10834
00:07:36,620 --> 00:07:41,150
So I'm going to pass now. And it tells me that my final hand was 21,

10835
00:07:41,390 --> 00:07:46,390
the computer's final hand was 17 and I win. And now I can play another game just

10836
00:07:47,330 --> 00:07:48,950
by typing 'y' again.

10837
00:07:49,880 --> 00:07:54,200
And I can keep going on and on playing my game of Blackjack.

10838
00:07:54,950 --> 00:07:57,620
So I hope you had fun at building this game with me.

10839
00:07:57,980 --> 00:08:02,390
I know this was a really difficult project and I know that some of you would

10840
00:08:02,390 --> 00:08:03,710
have probably had some issues,

10841
00:08:03,710 --> 00:08:07,850
but I really hope that you persevered and you got through it in the end. And

10842
00:08:07,850 --> 00:08:09,020
through the process

10843
00:08:09,050 --> 00:08:12,740
you've managed to apply a lot of the things that we've learned in the last 10

10844
00:08:12,740 --> 00:08:13,573
days.

10845
00:08:13,760 --> 00:08:17,900
This is a good time to review the concepts you've learned and have a think about

10846
00:08:17,900 --> 00:08:22,460
what you might need to revise or revisit so that you're really,

10847
00:08:22,460 --> 00:08:24,740
really strong on all the concepts

10848
00:08:25,070 --> 00:08:29,450
and you're comfortable to continue on to the next 10 days. Now,

10849
00:08:29,480 --> 00:08:32,809
if you want to take a look at the final code that I've got here,

10850
00:08:33,080 --> 00:08:37,400
then just head over to repl.it/@appbrewery/blackjack-final

10851
00:08:37,820 --> 00:08:41,419
and you'll see all the code that I went through with you just now.



10852
00:00:06,680 --> 00:00:11,630
The first thing I want to talk about is a concept known in programming as Scope.

10853
00:00:12,200 --> 00:00:16,190
And this scope is something that we've actually come across already in our

10854
00:00:16,190 --> 00:00:20,090
programming, but I wanted to leave it until we've seen functions,

10855
00:00:20,330 --> 00:00:24,230
we've seen if and while loops, different types and blocks of code,

10856
00:00:24,470 --> 00:00:29,090
before we start talking about this really important concept. Now,

10857
00:00:29,120 --> 00:00:30,950
if you want to visualize this concept,

10858
00:00:31,400 --> 00:00:36,400
imagine you have a house with a fence around it and you plant an apple tree

10859
00:00:37,100 --> 00:00:42,020
inside your garden. Think about who can access those apples.

10860
00:00:42,230 --> 00:00:45,980
Just you and your family right? But what if instead,

10861
00:00:46,100 --> 00:00:50,540
you had an apple tree in the neighborhood by the sidewalk, for example.

10862
00:00:51,020 --> 00:00:55,640
Well, this is kind of free for all. Anybody can go and access those apples.

10863
00:00:56,300 --> 00:00:59,690
This is a starting point for how to understand scope.

10864
00:01:00,500 --> 00:01:04,940
Head over to the App Brewery Day 12 start Repl.it and go ahead and fork your own

10865
00:01:04,940 --> 00:01:05,773
copy of it.

10866
00:01:06,140 --> 00:01:11,140
Take a look at the code that's in the starting file in the main.py and try to

10867
00:01:12,110 --> 00:01:14,540
understand what it's doing. First

10868
00:01:14,540 --> 00:01:17,840
I create a variable called enemies and I set it to equal 1.

10869
00:01:18,470 --> 00:01:21,500
Then I create a function called increase_enemies,

10870
00:01:21,800 --> 00:01:25,610
and I try to set that variable to 2. Finally,

10871
00:01:25,640 --> 00:01:29,630
I call my function triggering all the lines of code inside,

10872
00:01:30,200 --> 00:01:35,000
and now I want you to predict what will this print statement print in the

10873
00:01:35,000 --> 00:01:38,120
console and what will this print statement print?

10874
00:01:38,960 --> 00:01:41,630
And it might not be what you expect it to be.

10875
00:01:42,380 --> 00:01:47,270
So I would expect that here I've got a variable which is equal to one.

10876
00:01:47,750 --> 00:01:49,340
When this function is called,

10877
00:01:49,670 --> 00:01:53,090
this variable enemies should now be equal to two.

10878
00:01:53,510 --> 00:01:56,750
So when it's printed down here from outside my function,

10879
00:01:57,050 --> 00:02:01,940
this should be equal to two, and this should also be equal to two.

10880
00:02:02,540 --> 00:02:04,100
But look at what happens instead.

10881
00:02:05,540 --> 00:02:08,870
I get enemies from inside the function equal to 2,

10882
00:02:09,410 --> 00:02:12,590
but from outside the function, it's equal to 1.

10883
00:02:12,980 --> 00:02:16,460
So what's going on here? To really understand this

10884
00:02:16,490 --> 00:02:20,390
we have to understand the concept of scope. And scope is a really,

10885
00:02:20,390 --> 00:02:22,880
really important thing in programing.

10886
00:02:22,910 --> 00:02:27,080
You see it in every programming language and although its a little bit different

10887
00:02:27,080 --> 00:02:28,790
between the programming languages,

10888
00:02:29,330 --> 00:02:33,950
it all goes back to that concept of the apple tree being within a fence or

10889
00:02:33,980 --> 00:02:34,940
outside a fence.

10890
00:02:35,360 --> 00:02:39,380
So let's take a look at some other examples before we come back to solve this

10891
00:02:39,380 --> 00:02:40,213
problem.

10892
00:02:41,330 --> 00:02:45,080
The first thing to think about is a concept called local scope.

10893
00:02:45,590 --> 00:02:49,970
Local scope exists within functions. So for example,

10894
00:02:50,150 --> 00:02:54,650
if I was creating a game and I had a function called drink_potion

10895
00:02:54,680 --> 00:02:57,740
which is somehow going to strengthen my player,

10896
00:02:58,220 --> 00:03:03,220
well, maybe it would have a variable that's created inside the function.

10897
00:03:03,830 --> 00:03:06,820
So it could be something like potion_strength

10898
00:03:08,080 --> 00:03:11,380
and I could set that to start off where the value of two.

10899
00:03:12,280 --> 00:03:13,330
Now in this case

10900
00:03:13,360 --> 00:03:18,360
if I was to go and print this variable potion strength from within the function,

10901
00:03:19,060 --> 00:03:20,650
notice I'm indented here,

10902
00:03:21,190 --> 00:03:24,910
and of course I need to call this function for that to happen.

10903
00:03:26,380 --> 00:03:30,640
Notice what happens when I run the code. It's equal to two.

10904
00:03:31,150 --> 00:03:32,680
That's what we would expect, right?

10905
00:03:33,340 --> 00:03:38,340
But notice what happens if I try to print the potion_strength from outside the

10906
00:03:40,060 --> 00:03:44,740
function here. This firstly gives me an error

10907
00:03:45,010 --> 00:03:49,390
right when I'm writing it inside the editor. And when I tried to run it,

10908
00:03:49,420 --> 00:03:54,420
it gives me an error inside the console. And the error is a name error

10909
00:03:54,760 --> 00:03:59,760
and it tells me that the name potion strength is not defined. Clearly I've

10910
00:04:00,490 --> 00:04:05,020
defined it here, but why can't I access it outside the function?

10911
00:04:05,320 --> 00:04:08,320
Well, this goes back to the concept of local scope.

10912
00:04:08,830 --> 00:04:13,830
When you create a new variable or indeed a new function inside another function,

10913
00:04:16,690 --> 00:04:18,700
it's only accessible,

10914
00:04:18,700 --> 00:04:23,700
you can only use it when you're inside that function because it has local scope.

10915
00:04:25,540 --> 00:04:29,920
It's only valid within the walls of this drink_

10916
00:04:29,950 --> 00:04:30,940
potion function.

10917
00:04:33,040 --> 00:04:37,420
What if we wanted it to be accessible outside the function? Well,

10918
00:04:37,420 --> 00:04:40,810
now we need to think about something called global scope.

10919
00:04:41,440 --> 00:04:46,440
The only difference between global scope and local scope is where you define or

10920
00:04:46,750 --> 00:04:49,720
where you create your variables or your functions.

10921
00:04:50,380 --> 00:04:52,450
So let's say we have a different variable.

10922
00:04:52,450 --> 00:04:57,190
Let's say that I created a variable called a player_health and it starts off

10923
00:04:57,220 --> 00:05:02,140
being equal to 10. Now let's say later on I have the same drink_

10924
00:05:02,170 --> 00:05:07,120
potion function, and this potion has strength of 2.

10925
00:05:07,720 --> 00:05:11,560
So now inside my function drink_potion,

10926
00:05:11,980 --> 00:05:15,550
if I wanted to print my player_health

10927
00:05:15,970 --> 00:05:20,500
even though it wasn't defined within the function, this is perfectly possible.

10928
00:05:20,740 --> 00:05:22,840
And if I call my function

10929
00:05:22,870 --> 00:05:27,520
drink_potion and then run the code as it is,

10930
00:05:27,730 --> 00:05:29,590
you will see 10 being printed.

10931
00:05:30,010 --> 00:05:35,010
So this has a global scope. It's available anywhere within our file because it

10932
00:05:36,250 --> 00:05:40,720
was defined at the top level of the file. Now, when I say top-level,

10933
00:05:40,720 --> 00:05:43,660
I don't mean physically at the very top of the file.

10934
00:05:44,020 --> 00:05:49,020
I mean that it's not within another function, like potion strength here because

10935
00:05:49,930 --> 00:05:53,650
this is defined indented inside a function.

10936
00:05:53,980 --> 00:05:55,960
So this is a local variable

10937
00:05:55,990 --> 00:06:00,990
whereas this is a global variable. And global variables are available within

10938
00:06:01,880 --> 00:06:05,210
functions, no matter how deep it gets nested

10939
00:06:05,570 --> 00:06:08,120
and it's also available outside of functions.

10940
00:06:09,860 --> 00:06:14,780
This concept of global and local scope doesn't just apply to variables.

10941
00:06:15,140 --> 00:06:20,140
As I alluded to before, it also applies to functions and basically anything else

10942
00:06:20,330 --> 00:06:24,290
you name. This is a concept called the Namespace.

10943
00:06:24,890 --> 00:06:28,730
So we defined this variable player_health, we define this function

10944
00:06:28,730 --> 00:06:29,563
drink_potion.

10945
00:06:29,930 --> 00:06:34,930
Anything that you give a name to has a namespace and that namespace is valid in

10946
00:06:37,160 --> 00:06:38,120
certain scopes.

10947
00:06:39,260 --> 00:06:42,980
This concept of scope applies to basically anything you name.

10948
00:06:43,940 --> 00:06:48,530
If I was to nest this function drink_potion inside another function,

10949
00:06:48,560 --> 00:06:50,720
let's call it game. Well,

10950
00:06:50,780 --> 00:06:55,780
this drink_potion now has local scope within the function game.

10951
00:06:56,660 --> 00:07:01,660
So this is why this line is now erroring out because it can't actually see inside

10952
00:07:03,620 --> 00:07:07,700
this function. So now in order to call this drink_potion,

10953
00:07:08,030 --> 00:07:11,780
I have to be within the four walls of the game function.

10954
00:07:12,830 --> 00:07:17,000
So whenever you give name to anything, a function or a variable,

10955
00:07:17,270 --> 00:07:20,210
you have to be aware of where you created it.

10956
00:07:20,780 --> 00:07:25,280
Now it's easy to notice where you've created functions, we have the def keyword,

10957
00:07:25,310 --> 00:07:28,010
right? But when you create a variable

10958
00:07:28,040 --> 00:07:32,570
that's the first time that you give it a name and you set it equal to something.

10959
00:07:33,200 --> 00:07:37,880
And where you write that line of code defines the scope of that particular

10960
00:07:37,880 --> 00:07:42,140
variable. Here it's outside of every other function,

10961
00:07:42,470 --> 00:07:46,700
whereas here it's inside a function actually nested two levels deep.

10962
00:07:47,090 --> 00:07:50,510
So it has a local scope to this function.


10963
00:00:06,390 --> 00:00:09,060
Now, unlike some other programming languages,

10964
00:00:09,090 --> 00:00:13,410
if you've come from say C++ or Java,

10965
00:00:14,160 --> 00:00:17,220
there is no such thing as block scope in Python.

10966
00:00:17,670 --> 00:00:21,690
What this means is that if you were to create an if statement,

10967
00:00:22,290 --> 00:00:25,140
say if 3 > 2,

10968
00:00:25,890 --> 00:00:30,890
and if you were to create a new variable inside an if block or a while loop or a

10969
00:00:31,680 --> 00:00:35,460
for loop, basically any sort of block of code that's indented,

10970
00:00:35,880 --> 00:00:38,130
this does not count as offence.

10971
00:00:38,640 --> 00:00:43,110
It still has the same scope as its enclosing function,

10972
00:00:43,410 --> 00:00:46,560
or if there is no enclosing function then it has global scope.

10973
00:00:47,100 --> 00:00:51,120
So let me show you a full example. Let's say we had a list of enemies,

10974
00:00:51,150 --> 00:00:56,010
so the enemies could be skeletons, zombies, or aliens. So now,

10975
00:00:56,010 --> 00:00:58,980
if I was to define a game level, right?

10976
00:00:59,010 --> 00:01:01,710
Like the level that the user is currently playing at,

10977
00:01:01,740 --> 00:01:03,240
let's say they're on level 3.

10978
00:01:03,930 --> 00:01:08,930
And I create an if statement and I check if the game_level is less than level

10979
00:01:09,570 --> 00:01:12,990
5, well, in that case, I want to create a new enemy,

10980
00:01:13,470 --> 00:01:16,560
but I don't want the enemy to be too difficult to beat.

10981
00:01:17,100 --> 00:01:21,450
So I'm going to pick from the list of enemies and I'm going to pick the first

10982
00:01:21,450 --> 00:01:23,520
one. Notice how,

10983
00:01:23,550 --> 00:01:28,470
even though this new enemy is a variable that's created within this

10984
00:01:28,530 --> 00:01:31,800
if block, if I go outside the if block

10985
00:01:31,860 --> 00:01:36,840
so I'm not indented at all anymore, and I try to print this new enemy,

10986
00:01:38,010 --> 00:01:41,070
this is perfectly valid code. And if I run the code,

10987
00:01:41,130 --> 00:01:43,230
you'll see skeleton being printed.

10988
00:01:44,070 --> 00:01:49,070
But notice how as soon as I embed this within a function,

10989
00:01:50,220 --> 00:01:52,320
so let's define a new function.

10990
00:01:53,670 --> 00:01:58,670
And now this line error is out because within the function there is local scope.

10991
00:01:59,580 --> 00:02:03,840
So now this new enemy is available anywhere within this function,

10992
00:02:04,110 --> 00:02:09,110
because blocks like if, while, for, all of these blocks of code with colons and

10993
00:02:09,960 --> 00:02:13,440
indentation, they don't count as creating a local scope.

10994
00:02:13,860 --> 00:02:16,470
So in order to print this new enemy,

10995
00:02:16,830 --> 00:02:20,490
I actually have to be within the boundary of this function,

10996
00:02:20,580 --> 00:02:22,710
which means my code has to be here.

10997
00:02:24,120 --> 00:02:29,070
The most important thing to remember from this is if you create a variable

10998
00:02:29,430 --> 00:02:34,320
within a function, then it's only available within that function.

10999
00:02:35,160 --> 00:02:40,160
But if you create a variable within an if block or a while loop or a for loop or

11000
00:02:42,060 --> 00:02:44,730
anything that has the indentation and the colon,

11001
00:02:45,150 --> 00:02:49,050
then that does not count as creating a separate local scope.


11002
00:00:06,410 --> 00:00:09,200
Coming back to our original example.

11003
00:00:09,860 --> 00:00:14,780
I want to talk more about the global scope and the concept of modifying

11004
00:00:14,930 --> 00:00:19,610
something within the global scope. Here we have enemies,

11005
00:00:20,030 --> 00:00:22,310
which is a variable that has global scope,

11006
00:00:23,030 --> 00:00:27,620
and here we have a function which creates a local scope.

11007
00:00:28,370 --> 00:00:33,370
Now we think that we're tapping into this variable and setting it to two.

11008
00:00:34,370 --> 00:00:37,880
But in fact, we're actually creating a completely new variable

11009
00:00:37,910 --> 00:00:40,400
that's entirely separate from this one.

11010
00:00:41,420 --> 00:00:44,270
And this is why when we printed it here,

11011
00:00:44,510 --> 00:00:49,100
it showed it was equal to 2. But when we printed it here, it showed

11012
00:00:49,130 --> 00:00:53,750
it was actually equal to 1. If you want to make this a little more obvious,

11013
00:00:53,780 --> 00:00:58,780
I can call this a skeleton and I can set this to be a zombie.

11014
00:01:00,590 --> 00:01:04,879
And when I hit run, you can see again, this prints zombie,

11015
00:01:05,030 --> 00:01:06,680
this prints skeleton,

11016
00:01:06,980 --> 00:01:11,750
because these two variables are actually entirely different things.

11017
00:01:12,290 --> 00:01:15,860
And we're not changing this right here at all,

11018
00:01:16,040 --> 00:01:19,640
we're just creating a new variable that has a local scope.

11019
00:01:21,020 --> 00:01:26,020
Now it's usually a terrible idea to call your local variables and your global

11020
00:01:26,690 --> 00:01:31,040
variables the same name. But in this case,

11021
00:01:31,070 --> 00:01:36,070
what we actually wanted to do was we wanted to modify this variable,

11022
00:01:36,320 --> 00:01:40,790
we wanted to do something like maybe += 1. And notice how

11023
00:01:40,790 --> 00:01:42,860
as soon as I write += 1,

11024
00:01:43,160 --> 00:01:48,160
that my editor starts going crazy and tells me that this local variable enemies

11025
00:01:49,370 --> 00:01:53,810
is defined in an enclosing scope is referenced before assignment.

11026
00:01:53,810 --> 00:01:54,643
What does that mean?

11027
00:01:54,680 --> 00:01:59,540
It means that the editor thinks you're trying to tap into a local variable that

11028
00:01:59,540 --> 00:02:01,700
you defined somewhere around here.

11029
00:02:02,930 --> 00:02:07,400
And then you tried to modify it by adding one to the previous value,

11030
00:02:07,670 --> 00:02:11,960
but you actually haven't defined it. What we wanted to do though,

11031
00:02:11,960 --> 00:02:16,850
is we wanted to tap into this variable and change it here.

11032
00:02:18,320 --> 00:02:19,550
In order to do this,

11033
00:02:19,610 --> 00:02:24,610
we actually have to explicitly say that we have a global variable

11034
00:02:25,430 --> 00:02:30,260
which is called enemies that's defined somewhere outside of this function.

11035
00:02:30,740 --> 00:02:34,880
And that is the enemies that we want to use inside this function.

11036
00:02:35,480 --> 00:02:40,480
So it basically takes that global enemies into the function and allows you to

11037
00:02:40,700 --> 00:02:43,580
modify it. Without this line of code

11038
00:02:43,700 --> 00:02:48,700
we cannot modify something that is global within a local scope.

11039
00:02:50,930 --> 00:02:55,930
Now there's a reason why it's so difficult to modify something that has global

11040
00:02:56,180 --> 00:02:57,013
scope.

11041
00:02:57,080 --> 00:03:02,080
You probably don't actually want to do this very often, because it's confusing and

11042
00:03:03,430 --> 00:03:08,430
it's prone to creating bugs and errors. Because this variable with global scope

11043
00:03:09,220 --> 00:03:12,640
could have been created anywhere in your code, right?

11044
00:03:12,970 --> 00:03:17,970
And you would be modifying it completely independent of when you created it.

11045
00:03:18,400 --> 00:03:22,480
So it might've been days between when you wrote this code and when you wrote

11046
00:03:22,480 --> 00:03:26,560
this code and it just makes everything more fallible,

11047
00:03:26,590 --> 00:03:27,820
more easy to fail.

11048
00:03:28,270 --> 00:03:33,270
This is why very often people will tell you when they're teaching you Python to

11049
00:03:33,460 --> 00:03:37,750
avoid modifying global scope. You can read it,

11050
00:03:37,780 --> 00:03:42,160
that's not a problem. You can use it within your code, like we are here.

11051
00:03:43,540 --> 00:03:48,540
But don't try to modify it within a function that has local scope.

11052
00:03:49,360 --> 00:03:50,680
But what can you do instead?

11053
00:03:50,710 --> 00:03:55,330
What if you wanted to have this functionality like a function that changes the

11054
00:03:55,330 --> 00:03:56,350
number of enemies?

11055
00:03:56,860 --> 00:04:01,480
How can you achieve this without modifying the global scope within the function?

11056
00:04:02,260 --> 00:04:06,940
Well, you could use what we learned about return statements instead,

11057
00:04:07,060 --> 00:04:11,440
right? What if instead of modifying the enemies,

11058
00:04:12,010 --> 00:04:15,310
you actually just simply returned it as the output.

11059
00:04:15,700 --> 00:04:19,329
So return the current value of enemies + 1.

11060
00:04:20,140 --> 00:04:22,150
Now once you call this function,

11061
00:04:22,420 --> 00:04:27,280
you'll get hold of the output and you can save it to the global variable enemies.

11062
00:04:27,790 --> 00:04:32,140
So this now means that this function can be taken away and placed anywhere in

11063
00:04:32,140 --> 00:04:35,410
your code and you don't actually need to know how it works.

11064
00:04:35,830 --> 00:04:39,010
As long as you know that this is how you increase enemies,

11065
00:04:39,580 --> 00:04:42,160
then all you have to do is just call it.


11066
00:00:07,020 --> 00:00:11,040
Remember, you should be careful with variables that have global scope,

11067
00:00:11,550 --> 00:00:15,150
but don't believe the people who tell you that you should never use global

11068
00:00:15,150 --> 00:00:18,000
scope. Global scope can be incredibly useful

11069
00:00:18,180 --> 00:00:22,170
especially when you're defining constants. Global constants

11070
00:00:22,260 --> 00:00:24,480
are variables which you define

11071
00:00:24,870 --> 00:00:28,620
and you're never planning on changing it ever again. It's just something like,

11072
00:00:28,650 --> 00:00:30,480
for example, the value of pi, right?

11073
00:00:31,380 --> 00:00:34,950
You want to look it up once and you want to put it into your code and you never

11074
00:00:34,950 --> 00:00:36,570
want to look it up ever again.

11075
00:00:37,230 --> 00:00:41,940
And every other time you want to use it, say inside of a function, then all you

11076
00:00:41,940 --> 00:00:45,540
want to do is just tap into that value of pi.

11077
00:00:46,860 --> 00:00:50,610
So usually, in order to differentiate these constants

11078
00:00:50,640 --> 00:00:54,780
which you're pretty much never going to change from the variables

11079
00:00:54,780 --> 00:00:56,460
which you are likely to change,

11080
00:00:56,730 --> 00:01:01,170
the naming convention in Python is to turn it into all uppercase.

11081
00:01:01,740 --> 00:01:02,370
For example,

11082
00:01:02,370 --> 00:01:07,370
if you had PI or you had a URL that you needed to use,

11083
00:01:07,860 --> 00:01:10,020
or you have some sort of Twitter handle,

11084
00:01:10,800 --> 00:01:15,240
then these are all going to be uppercased, separated with underscores.

11085
00:01:15,990 --> 00:01:20,990
What this means is that later on in your function and you want to use one of

11086
00:01:21,060 --> 00:01:25,260
these global constants, as soon as you type it,

11087
00:01:25,380 --> 00:01:27,690
you can see it's the uppercase and you know

11088
00:01:27,690 --> 00:01:31,560
to remind yourself to not modify this inside your code.

11089
00:01:33,090 --> 00:01:35,340
Now that we've talked a little bit about scope,

11090
00:01:35,670 --> 00:01:40,230
it's time to put your knowledge into action. Head over to the next lesson

11091
00:01:40,590 --> 00:01:43,530
and I've got a quiz that will test your understanding.

11092
00:01:43,860 --> 00:01:46,110
So, for all of that and more, I'll see you there.


11093
00:00:00,840 --> 00:00:05,610
Now that you've completed some of the scoping problems, it's time to tackle

11094
00:00:05,640 --> 00:00:06,810
the final project.

11095
00:00:07,260 --> 00:00:12,260
This final project is a little bit special because now I think you've got enough

11096
00:00:12,450 --> 00:00:17,430
experience and enough skills under your belt to actually create this project

11097
00:00:17,550 --> 00:00:22,140
entirely from scratch by yourself. So you're flying solo now.

11098
00:00:22,890 --> 00:00:26,490
Now the first thing I want you to do is head over to guess-the-number-

11099
00:00:26,490 --> 00:00:29,130
final.appbrewery.repl.run

11100
00:00:29,700 --> 00:00:33,630
and I want you to play this game quite a few times actually,

11101
00:00:33,990 --> 00:00:38,040
just so that you get a good idea of how it works. Now,

11102
00:00:38,100 --> 00:00:40,500
the first thing it tells us is Welcome.

11103
00:00:41,070 --> 00:00:44,790
And then it tells us it's thinking of a number between 1 and 100,

11104
00:00:45,090 --> 00:00:48,480
and then we get to choose a difficulty. So I'm going to choose hard.

11105
00:00:49,350 --> 00:00:52,380
Now it tells me that I have five attempts to guess the number,

11106
00:00:52,950 --> 00:00:55,020
and I'm going to make a guess.

11107
00:00:55,770 --> 00:01:00,000
Now it tells me that 50 is too high, it's not the number that it was thinking,

11108
00:01:00,270 --> 00:01:04,800
and I have to guess again. And notice how I started out with five attempts,

11109
00:01:04,860 --> 00:01:08,970
I'm now down to four attempts. So let's try 25.

11110
00:01:09,420 --> 00:01:12,510
So 25 is too low, but 50 is too high.

11111
00:01:12,900 --> 00:01:15,360
So that means the number is somewhere in between them.

11112
00:01:15,660 --> 00:01:19,950
Let's try 30. Again, too low. Let's try

11113
00:01:19,950 --> 00:01:22,980
4o. Too high. Maybe it's 45.

11114
00:01:23,250 --> 00:01:25,260
But I only have one attempt left

11115
00:01:25,260 --> 00:01:28,380
cause I went for the hard level. And as expected,

11116
00:01:28,440 --> 00:01:32,340
I didn't manage to get the right number and I've now run out of guesses.

11117
00:01:32,490 --> 00:01:34,980
So I've lost. If we run again,

11118
00:01:35,010 --> 00:01:37,770
we can try playing this on an easy level.

11119
00:01:39,150 --> 00:01:43,050
On an easy level, we get 10 attempts instead of 5.

11120
00:01:43,680 --> 00:01:46,080
That gives us a little bit of extra opportunity.

11121
00:01:46,590 --> 00:01:51,540
So let's try 50. 50 is too high. 25 is too high. 10,

11122
00:01:52,050 --> 00:01:56,910
10 is too low. So it's between 10 and 25. So let's try 15.

11123
00:01:57,510 --> 00:01:59,910
Now, if 15 is too high, but 10 is too low,

11124
00:02:00,300 --> 00:02:02,670
then we're pretty close to the answer.

11125
00:02:03,330 --> 00:02:08,039
It's now between 12 and 15, let's try 13, 14.

11126
00:02:08,490 --> 00:02:12,360
There we go. The actual answer that it had in mind was 14.

11127
00:02:13,020 --> 00:02:17,820
And I had four attempts remaining to get the final answer and I managed to get

11128
00:02:17,820 --> 00:02:22,170
it at the end. Play through this game at least three,

11129
00:02:22,170 --> 00:02:24,300
four times on the different levels

11130
00:02:24,840 --> 00:02:29,490
and remember that the easy level has 10 gos,

11131
00:02:29,850 --> 00:02:32,460
the hard level, the user gets 5 gos

11132
00:02:32,610 --> 00:02:37,610
at guessing the number. And look at how the code works and how it's functioning.

11133
00:02:38,880 --> 00:02:43,380
And then I want you to break down this problem. Write a to-do list,

11134
00:02:43,410 --> 00:02:47,970
create your own list of tasks that you need to solve and start with the simplest

11135
00:02:47,970 --> 00:02:52,620
one. And once you've tackled that, start putting in some comments into your code.

11136
00:02:52,650 --> 00:02:55,380
Write down the functionality your program needs,

11137
00:02:55,890 --> 00:03:00,890
and then write the code and then test out your code and keep going until you've

11138
00:03:01,330 --> 00:03:05,470
tested it and made sure that it works in all situations.

11139
00:03:06,430 --> 00:03:09,730
So this final project has no starting code.

11140
00:03:10,270 --> 00:03:13,900
I'm not going to give you any comments or to-dos to start off with.

11141
00:03:14,560 --> 00:03:18,340
I want you to try and tackle this entire project by yourself.

11142
00:03:18,910 --> 00:03:23,710
And the only thing I'm going to give you is this link so that you can try out the

11143
00:03:23,710 --> 00:03:27,310
final project. And I know that there's a lot of ways that you can cheat,

11144
00:03:27,430 --> 00:03:31,960
but don't do it. Have faith in yourself. If you tackle this for an hour,

11145
00:03:31,990 --> 00:03:34,180
I'm pretty sure you're going to get there in the end.

11146
00:03:34,570 --> 00:03:38,350
You have free reign on the styling or the wording,

11147
00:03:38,620 --> 00:03:40,360
whatever it is you want it to say.

11148
00:03:40,450 --> 00:03:43,750
But it has the have the same functionality. Now

11149
00:03:43,750 --> 00:03:46,960
this also means that if you want to get some ASCII art of your own,

11150
00:03:47,260 --> 00:03:49,060
then you can head over to this website

11151
00:03:49,120 --> 00:03:53,830
which I'll link to in the course resources and just type the name of your game.

11152
00:03:53,830 --> 00:03:55,330
So maybe it will be Guess

11153
00:03:56,220 --> 00:03:58,410
The Number.

11154
00:04:00,720 --> 00:04:03,870
And you can change the font that you want for it.

11155
00:04:04,020 --> 00:04:07,950
Maybe something a little bit isometric or maybe ogre,

11156
00:04:08,760 --> 00:04:11,190
or maybe train, whatever it is you want.

11157
00:04:11,430 --> 00:04:13,230
And then once you're happy with the font,

11158
00:04:13,260 --> 00:04:16,440
you can select and copy everything that's on there,

11159
00:04:16,769 --> 00:04:18,060
and then inside your project

11160
00:04:18,060 --> 00:04:23,060
you can create a new file called art.py and then create a new variable and set

11161
00:04:23,670 --> 00:04:28,350
it equal to the design that you've got in mind. Now,

11162
00:04:28,380 --> 00:04:32,820
in order for it to look right, you actually have to create this as a docstring,

11163
00:04:32,850 --> 00:04:37,850
so three quotation marks to begin with and then three quotation marks to end.

11164
00:04:39,900 --> 00:04:43,680
And then just make sure you have enough horizontal space to display the whole

11165
00:04:43,680 --> 00:04:46,260
thing in one go instead of it being truncated

11166
00:04:46,260 --> 00:04:49,530
when you have a little bit of space and you should be able to see the actual

11167
00:04:49,530 --> 00:04:50,363
design.

11168
00:04:51,120 --> 00:04:56,120
Pause the video now and create this number guessing game by yourself

11169
00:04:56,670 --> 00:04:57,870
as the final project.


11170
00:00:00,090 --> 00:00:01,020
How did you get on?

11171
00:00:01,680 --> 00:00:05,070
Hopefully you managed to complete the project and you're just here

11172
00:00:05,070 --> 00:00:07,470
to check through the solution. Now,

11173
00:00:07,530 --> 00:00:10,110
if you haven't given it a proper go and I mean,

11174
00:00:10,110 --> 00:00:14,400
at least an hour at tackling this, then go back, keep going.

11175
00:00:14,640 --> 00:00:17,460
It's only when you struggle that you actually get better.

11176
00:00:17,790 --> 00:00:19,800
You can watch me type code all day long,

11177
00:00:19,800 --> 00:00:21,630
and it's not going to make you a better programmer.

11178
00:00:21,930 --> 00:00:25,560
So I know you're going to try really hard and I want you to try really,

11179
00:00:25,560 --> 00:00:30,150
really extra hard and make sure that you can complete each of these projects by

11180
00:00:30,150 --> 00:00:34,230
yourself. I mentioned that this one doesn't have a starting repl,

11181
00:00:34,230 --> 00:00:38,610
so we're gonna start out with our own and you can call it anything you want,

11182
00:00:38,610 --> 00:00:42,930
but I'm going to call it guess-the-number game.

11183
00:00:43,860 --> 00:00:46,290
Now, when you're creating a new project from scratch

11184
00:00:46,320 --> 00:00:47,580
like we're doing right now,

11185
00:00:48,030 --> 00:00:51,420
it can seem a little bit intimidating staring at a blank screen.

11186
00:00:51,900 --> 00:00:56,820
The first thing to do is to just divide the project into the individual

11187
00:00:56,820 --> 00:00:59,910
components. So while you're playing this game,

11188
00:01:00,030 --> 00:01:03,930
you can see that there are different bits of it that we need to complete right?

11189
00:01:04,379 --> 00:01:08,280
The first one is printing all the starting parts of the game,

11190
00:01:08,640 --> 00:01:12,390
the next one is trying to figure out how to set this difficulty level,

11191
00:01:13,140 --> 00:01:15,960
getting the user to type in a word easy or hard,

11192
00:01:16,320 --> 00:01:21,320
and then changing the number of attempts based on that. We can already start

11193
00:01:21,870 --> 00:01:26,870
thinking about maybe we need to make a function to set difficulty,

11194
00:01:28,380 --> 00:01:31,290
and then we need to let the user make a guess, right?

11195
00:01:31,320 --> 00:01:35,280
So they're gonna guess a number. So let's say I'm going to type in 50,

11196
00:01:35,820 --> 00:01:39,660
and then we have to somehow check that guess against the number that was

11197
00:01:39,660 --> 00:01:44,340
originally selected and then check to see if it's too low or too high.

11198
00:01:45,030 --> 00:01:48,390
So now we have some additional parts of our program, right?

11199
00:01:48,390 --> 00:01:53,390
We need some sort of way of choosing a random number between 1 and 100.

11200
00:01:57,120 --> 00:02:00,000
So that's the first thing that's probably going to happen in our code.

11201
00:02:00,300 --> 00:02:02,970
We need to have a function to set difficulty,

11202
00:02:03,240 --> 00:02:06,270
we probably need some sort of functionality to, um,

11203
00:02:06,300 --> 00:02:10,470
let the user guess a number.

11204
00:02:12,450 --> 00:02:17,450
And we'll also want to check that number that they've guessed against the number

11205
00:02:18,660 --> 00:02:21,750
that we originally had to see if it's too high or too low.

11206
00:02:21,900 --> 00:02:26,040
So probably a function to check user's

11207
00:02:26,100 --> 00:02:30,750
guess against the actual answer.

11208
00:02:31,560 --> 00:02:35,130
Now notice how every single time I make a guess,

11209
00:02:35,190 --> 00:02:37,050
my number of attempts go down.

11210
00:02:37,410 --> 00:02:42,410
So we also need to track that right? Track the number of turns and reduce by one

11211
00:02:45,750 --> 00:02:47,460
if they get it wrong.

11212
00:02:48,870 --> 00:02:53,760
Now it's looping back again to this stage where we're making another guess.

11213
00:02:53,790 --> 00:02:56,640
So if 50 was too high, then maybe we'll guess 25.

11214
00:02:57,240 --> 00:03:01,450
We have to have some sort of way of repeating this part of the code, right?

11215
00:03:02,920 --> 00:03:07,510
We're going to repeat it as long as they have attempts left and they are wrong.

11216
00:03:08,350 --> 00:03:10,660
Now, if however they get it right,

11217
00:03:11,020 --> 00:03:14,800
so I think I have a good chance of getting it right. So if 25 is still too high,

11218
00:03:14,800 --> 00:03:18,760
let's try 12. And there we go. When I get the answer right,

11219
00:03:18,760 --> 00:03:20,980
it tells me, you got it. The answer was 12.

11220
00:03:21,520 --> 00:03:25,840
So now we've got some of the basic parts of our code down in comments,

11221
00:03:26,230 --> 00:03:29,590
and we can start thinking about how to write it out, right?

11222
00:03:30,220 --> 00:03:32,350
Let's start by tackling the easiest one,

11223
00:03:32,350 --> 00:03:35,410
which is choosing a random number between one and a hundred.

11224
00:03:35,950 --> 00:03:40,950
All you have to do for this one is just to import the random module, or even

11225
00:03:41,290 --> 00:03:46,150
better yet from the random module, import the randint function.

11226
00:03:47,410 --> 00:03:48,910
Now inside our code,

11227
00:03:48,940 --> 00:03:53,940
we can simply just use randint. We can say the answer is equal to a randint

11228
00:03:55,780 --> 00:04:00,430
that is between 1 and 100. And of course remember that rand

11229
00:04:00,430 --> 00:04:02,890
int includes a and b,

11230
00:04:02,890 --> 00:04:05,950
so both 1 and 100 can show up.

11231
00:04:07,090 --> 00:04:10,810
In addition to this, we probably have to give the user some of these messages.

11232
00:04:10,810 --> 00:04:13,060
So I'm just going to copy some of these messages.

11233
00:04:13,540 --> 00:04:17,769
So I'm going to print 'Welcome to the guessing game.'

11234
00:04:18,339 --> 00:04:20,440
And also I'm going to print that

11235
00:04:20,440 --> 00:04:25,390
I'm thinking of a number between 1 and 100, like that.

11236
00:04:25,990 --> 00:04:29,080
So now we've got an answer that they need to guess,

11237
00:04:29,260 --> 00:04:31,810
and we've got a little bit of starting text for them.

11238
00:04:32,350 --> 00:04:36,670
The next easiest thing in this is to figure out a way of letting the user

11239
00:04:36,700 --> 00:04:40,120
guess a number. So we know that we'll need an input to

11240
00:04:40,150 --> 00:04:45,040
ask them to make a guess, so we can copy this part.

11241
00:04:45,190 --> 00:04:48,130
And we can use that as the prompt,

11242
00:04:48,670 --> 00:04:52,810
and then we're going to have to save their guess and convert it to an integer.

11243
00:04:53,470 --> 00:04:58,060
So they're going to be typing a number here, right? And we'll call this guess.

11244
00:04:58,960 --> 00:05:03,960
Now the user is able to guess a number and we now have to figure out some sort of

11245
00:05:05,020 --> 00:05:09,970
way of checking the user's guess against the actual answer.

11246
00:05:10,750 --> 00:05:13,450
This is probably a good time to create a function.

11247
00:05:13,630 --> 00:05:18,310
So why don't we go up to the very top and create our function here.

11248
00:05:18,910 --> 00:05:20,770
We'll call this check_answer,

11249
00:05:21,700 --> 00:05:26,410
and we're gonna pass in the user's guess and the actual answer in order to

11250
00:05:26,410 --> 00:05:30,340
achieve this checking functionality. So in this case,

11251
00:05:30,340 --> 00:05:35,340
we're going to check to see if the guess is greater than the answer,

11252
00:05:36,010 --> 00:05:40,300
well, in this case, it's too high, right? So we'll just print too high.

11253
00:05:41,470 --> 00:05:44,920
Now, what if the guess was actually less than the answer,

11254
00:05:45,220 --> 00:05:49,360
still not equal to the answer, but in this case it's too low.

11255
00:05:50,290 --> 00:05:53,530
So now the final condition is they actually got it right.

11256
00:05:53,530 --> 00:05:57,040
So you could write elif guess is equal to answer,

11257
00:05:57,350 --> 00:06:00,650
but you could also just use else because there's no other possibilities.

11258
00:06:01,340 --> 00:06:04,970
This else statement catches the moment when they actually get it right.

11259
00:06:05,900 --> 00:06:08,690
So in this case, we're going to print what we have here,

11260
00:06:08,930 --> 00:06:10,790
and then we'll get to print out the answer. Of course,

11261
00:06:10,790 --> 00:06:14,690
we're going to replace that with whatever the actual answer is and turn this

11262
00:06:14,690 --> 00:06:18,860
into an fstring. So now that's that step done.

11263
00:06:19,310 --> 00:06:22,610
And let's think about what else is easy that we can knock off the list.

11264
00:06:23,120 --> 00:06:27,080
Let's think of function to set the difficulty. So up here,

11265
00:06:27,110 --> 00:06:29,420
in addition to our check_answer function,

11266
00:06:29,720 --> 00:06:34,720
I'm going to create this other function, some way of setting the difficulty.

11267
00:06:35,270 --> 00:06:37,580
So let's call this set_difficulty,

11268
00:06:38,480 --> 00:06:41,000
and it's probably not going to take any inputs.

11269
00:06:41,030 --> 00:06:45,800
It's just going to do some sort of action. So when we first start off the game,

11270
00:06:45,950 --> 00:06:48,980
it already asks us to choose a difficulty.

11271
00:06:48,980 --> 00:06:53,980
So I'm going to copy this text and I'm going to put that into an input,

11272
00:06:55,310 --> 00:06:58,280
choose a difficulty easy or hard.

11273
00:06:58,970 --> 00:07:03,380
And then we're going to save this probably into a variable,

11274
00:07:03,410 --> 00:07:08,090
which I'll call level, so the level of difficulty that they want. Now,

11275
00:07:08,120 --> 00:07:13,120
if this level that they chose was equal to easy,

11276
00:07:13,820 --> 00:07:14,660
well, in this case,

11277
00:07:14,690 --> 00:07:19,690
we want to set the number of attempts that they have to 10.

11278
00:07:20,180 --> 00:07:23,210
So they have 10 attempts. But on the other hand,

11279
00:07:23,900 --> 00:07:27,800
if they chose hard, then they only have 5 attempts.

11280
00:07:28,280 --> 00:07:33,280
So this is probably a really good time for creating a global constant.

11281
00:07:34,370 --> 00:07:37,250
So we already saw this in the previous lesson on scope,

11282
00:07:37,730 --> 00:07:42,110
but this is a really nice thing because it means if we create this global

11283
00:07:42,110 --> 00:07:46,760
constant at the very top, then if we want to switch around how our game works,

11284
00:07:46,910 --> 00:07:51,860
we can really easily access these constant by just scrolling through the top of

11285
00:07:51,860 --> 00:07:54,920
the page. Let's call the first one, um,

11286
00:07:54,980 --> 00:07:59,690
EASY_LEVEL_TURNS, so the number of terms you get on easy,

11287
00:07:59,990 --> 00:08:01,130
which is going to be 10.

11288
00:08:01,580 --> 00:08:06,410
And then we'll have HARD_LEVEL_TURNS

11289
00:08:06,860 --> 00:08:08,420
and this is going to be equal to 5.

11290
00:08:09,110 --> 00:08:13,370
Now I've got these two constants which is global

11291
00:08:13,430 --> 00:08:17,330
and I can use it inside any of my functions or basically anywhere on this

11292
00:08:17,330 --> 00:08:19,910
page. If the level is easy,

11293
00:08:20,060 --> 00:08:25,060
I'm going to set the number of turns to equal the EASY_LEVEL_TURNS.

11294
00:08:26,750 --> 00:08:29,960
So this is going to be a number right? Else,

11295
00:08:29,990 --> 00:08:31,910
so if they chose hard instead,

11296
00:08:32,360 --> 00:08:36,830
then turns should probably be the HARD_LEVEL_TURNS. Now,

11297
00:08:36,860 --> 00:08:41,390
setting it here is no use. I actually need it inside my game.

11298
00:08:42,320 --> 00:08:44,300
So now going back in my game,

11299
00:08:44,330 --> 00:08:47,690
I need to let the user know how many number of attempts,

11300
00:08:47,690 --> 00:08:50,840
how many turns they actually get. To start off

11301
00:08:50,870 --> 00:08:55,710
I'm going to use a print statement that just prints the number attempts they

11302
00:08:55,710 --> 00:08:58,560
have remaining. And it's not always going to be 5.

11303
00:08:58,560 --> 00:09:01,800
Sometimes it's going to be 5, sometimes it's going to be 10.

11304
00:09:02,220 --> 00:09:07,020
So what I'll need is some sort of way of tracking this number of turns,

11305
00:09:07,020 --> 00:09:11,400
right? But how do we know how many turns they get? Well,

11306
00:09:11,400 --> 00:09:16,260
it depends on what they chose here, right? If they had chosen hard,

11307
00:09:16,320 --> 00:09:20,700
then turns should be equal to the HARD_LEVEL_TURNS. If they chose easy,

11308
00:09:20,700 --> 00:09:22,410
it should be equal to the EASY_LEVEL_TURNS.

11309
00:09:22,980 --> 00:09:25,860
So instead of using this as some sort of global variable

11310
00:09:26,130 --> 00:09:30,840
which I have to change inside here, which would require me saying global,

11311
00:09:31,050 --> 00:09:32,790
and then turns so that

11312
00:09:32,790 --> 00:09:37,080
I can access this particular variable and change it inside

11313
00:09:37,080 --> 00:09:39,120
these steps, it'd would be much,

11314
00:09:39,150 --> 00:09:44,150
much better if I just returned these values as an output from this function.

11315
00:09:45,930 --> 00:09:47,760
If this is set as return,

11316
00:09:47,850 --> 00:09:51,600
then I can simply call this function set_difficulty,

11317
00:09:52,050 --> 00:09:56,350
which is going to trigger this input. And then once the user has set it,

11318
00:09:56,520 --> 00:10:00,540
then the output is going to be the actual number of turns they have.

11319
00:10:00,900 --> 00:10:05,340
And I can now use it inside this print statement to show them how many turns

11320
00:10:05,340 --> 00:10:07,710
they have. Now.

11321
00:10:07,800 --> 00:10:10,350
I've already written quite a bit of code actually,

11322
00:10:10,410 --> 00:10:15,410
and it's probably a good time to run the code. While I'm testing my code,

11323
00:10:15,600 --> 00:10:18,960
it's probably a good idea to actually see what the answer is.

11324
00:10:19,290 --> 00:10:23,730
So we can add a bit of testing code that just prints out what the actual answer

11325
00:10:23,730 --> 00:10:26,250
was selected as. And if we run the code

11326
00:10:26,250 --> 00:10:30,120
now you can see we've got the starting part pretty much down.

11327
00:10:30,510 --> 00:10:31,920
Welcome to the Number Guessing Game.

11328
00:10:31,920 --> 00:10:33,990
I'm thinking have a number between 1 and 100,

11329
00:10:34,290 --> 00:10:37,650
and then we've got our little hint here. The actual answer is 63.

11330
00:10:38,190 --> 00:10:39,930
So we have to make a guess.

11331
00:10:40,110 --> 00:10:44,730
And I've really noticed that that input needs a space here so that I'm not

11332
00:10:44,730 --> 00:10:48,960
writing right next to the colon. So let's say I guessed 50.

11333
00:10:49,920 --> 00:10:52,620
Now it's asking us to choose a difficulty.

11334
00:10:52,950 --> 00:10:54,990
So I've already got a little bit of a problem here.

11335
00:10:55,020 --> 00:10:58,230
I should actually have this before the other part.

11336
00:10:58,770 --> 00:11:02,520
So I should choose the difficulty and then make a guess.

11337
00:11:02,880 --> 00:11:07,740
So now let's stop and run and see if we fix that bug. And you can see

11338
00:11:07,740 --> 00:11:11,070
yep, indeed it asks us for a difficulty first.

11339
00:11:11,430 --> 00:11:12,840
So I'm going to choose easy

11340
00:11:13,140 --> 00:11:17,100
and it tells me that I've got 10 attempts remaining and then to make a guess.

11341
00:11:17,580 --> 00:11:22,260
And if I choose hard instead, then it tells me I've got 5 attempts.

11342
00:11:22,680 --> 00:11:24,990
Now, if while you are play testing this game

11343
00:11:24,990 --> 00:11:28,260
and you realize that actually 5 is not enough, then all you have to do is

11344
00:11:28,260 --> 00:11:29,580
scroll to the very top of the game,

11345
00:11:29,970 --> 00:11:33,630
change this one global variable here,

11346
00:11:34,080 --> 00:11:37,800
and all your changes, you know, will be reflected in the code below.

11347
00:11:39,270 --> 00:11:43,530
Now let's get back to our game. Let's say I make a guess and our code ends,

11348
00:11:43,560 --> 00:11:46,470
right? Even though I've got my check_answer,

11349
00:11:46,620 --> 00:11:48,750
it's not actually being called anywhere.

11350
00:11:48,930 --> 00:11:52,170
So it lets go ahead and call that function, check_answer

11351
00:11:52,710 --> 00:11:56,110
and then we can pass in the user's guess that they made at this step,

11352
00:11:56,470 --> 00:12:00,370
and we can also pass in the correct answer which comes from here.

11353
00:12:01,000 --> 00:12:02,830
So let's run our code again.

11354
00:12:06,550 --> 00:12:09,940
So I'm going to choose the easy mode and I'm going to make a guess.

11355
00:12:10,570 --> 00:12:14,380
Now 50 is too high because I can actually see the answer,

11356
00:12:14,380 --> 00:12:19,030
it's meant to be 32. So that works. But I can't guess again.

11357
00:12:19,030 --> 00:12:22,690
It's not letting me. It's actually ended the program.

11358
00:12:23,290 --> 00:12:26,950
So we probably have to tackle this particular todo

11359
00:12:26,980 --> 00:12:29,320
if we actually want to get the right functionality.

11360
00:12:29,710 --> 00:12:34,710
How do we get the guessing functionality to repeat if they get it wrong? So that

11361
00:12:35,980 --> 00:12:40,980
as you might've guessed is probably gonna require some sort of while loop. While

11362
00:12:41,440 --> 00:12:45,910
they've gotten it wrong, we probably should go and let them make a guess

11363
00:12:45,940 --> 00:12:49,690
again. These parts will definitely need to be repeated.

11364
00:12:50,380 --> 00:12:52,000
So let's create a while loop.

11365
00:12:52,540 --> 00:12:56,860
What are we going to check in our while loop to make sure that it keeps on going?

11366
00:12:57,430 --> 00:12:57,970
Well,

11367
00:12:57,970 --> 00:13:02,800
the thing that we're trying to aim for is to get the user to guess the actual

11368
00:13:02,800 --> 00:13:03,633
answer.

11369
00:13:03,820 --> 00:13:08,820
If we set the while condition as while guess is not equal to answer,

11370
00:13:09,550 --> 00:13:13,990
then that pretty much guarantees that these lines of code will keep going until

11371
00:13:13,990 --> 00:13:18,310
the user actually gets the right answer. Now however,

11372
00:13:18,340 --> 00:13:21,940
when we do this, we get an error, undefined name guess.

11373
00:13:22,030 --> 00:13:24,550
Well because guess hasn't been declared yet.

11374
00:13:25,030 --> 00:13:30,030
So why don't we declare it outside of the while loop and simply just create it as

11375
00:13:31,330 --> 00:13:35,980
a variable? So we'll set that to equal zero. Now at the moment,

11376
00:13:36,040 --> 00:13:40,660
this is a global variable. This is a global variable. This is a global variable.

11377
00:13:40,900 --> 00:13:45,900
So it's probably a good idea to put our game functionality inside its own

11378
00:13:47,140 --> 00:13:51,700
function. So we can create a new function here, which I'll call game,

11379
00:13:52,360 --> 00:13:57,360
and now we'll need to call and trigger this game inside the global scope

11380
00:13:58,480 --> 00:14:00,700
if we actually want this to be carried out.

11381
00:14:02,410 --> 00:14:04,360
Now that we've done all of this hard work,

11382
00:14:04,420 --> 00:14:07,030
let's run our code and let's try it out.

11383
00:14:09,640 --> 00:14:10,960
Lets go for easy.

11384
00:14:11,590 --> 00:14:16,590
And I'm going to start off by guessing 50 as always. 50 is too low and I can see

11385
00:14:17,290 --> 00:14:20,590
the answer is actually 90. So I'm going to go for the next number.

11386
00:14:20,590 --> 00:14:23,740
Lets try a number that is a bit too high. 95, too high.

11387
00:14:24,340 --> 00:14:28,690
Now, what if I actually get it right? What if I actually guessed 90? Well,

11388
00:14:28,690 --> 00:14:31,240
it tells me you got it. The answer was 90.

11389
00:14:32,140 --> 00:14:36,910
So the only thing that we're not really doing is tracking the number of turns so

11390
00:14:36,910 --> 00:14:39,940
that we tell them you have 10 attempts, you have 9 attempts,

11391
00:14:39,940 --> 00:14:42,430
you have zero attempts. And if they get zero,

11392
00:14:42,430 --> 00:14:45,310
then they're going to lose right? Here

11393
00:14:45,340 --> 00:14:49,630
we have this print statement that runs only once because it's not inside the

11394
00:14:49,630 --> 00:14:52,640
while loop. So let's tackle our final to-do

11395
00:14:52,790 --> 00:14:56,120
to track the number of turns and reduce it by one

11396
00:14:56,180 --> 00:15:01,100
if they get it wrong. Now, where do we know that the user got it wrong?

11397
00:15:01,580 --> 00:15:06,470
Well inside the check answer function. If it's too high or if it's too low,

11398
00:15:06,560 --> 00:15:10,700
then we have to deduct the number of turns they have. But if they got it,

11399
00:15:10,790 --> 00:15:13,370
then we don't. One way of tackling

11400
00:15:13,370 --> 00:15:18,140
this is again creating a global variable called turns,

11401
00:15:18,650 --> 00:15:21,200
set it to start off at zero,

11402
00:15:22,040 --> 00:15:24,290
and then inside this function,

11403
00:15:24,500 --> 00:15:29,500
we simply just say turns -= 1 and also turns -= 1 when

11404
00:15:31,160 --> 00:15:36,160
it's too low or too high. Now because this is a global variable

11405
00:15:36,830 --> 00:15:41,830
we again would need to say global turns in order to use it inside our function.

11406
00:15:43,580 --> 00:15:44,570
But as I mentioned,

11407
00:15:44,630 --> 00:15:49,250
this is not a good idea because it means that you're modifying the global

11408
00:15:49,250 --> 00:15:51,590
function within a local scope.

11409
00:15:52,010 --> 00:15:56,960
How can we achieve the same functionality without having to use a global

11410
00:15:56,960 --> 00:15:58,820
variable? Well,

11411
00:15:58,850 --> 00:16:03,850
we could instead just pass in the number of turns that we currently have and

11412
00:16:04,820 --> 00:16:06,980
then inside our function,

11413
00:16:08,060 --> 00:16:13,060
we can return the number of turns minus one. And we can do the same down here.

11414
00:16:18,130 --> 00:16:22,120
So now when we call this function check_answer,

11415
00:16:22,450 --> 00:16:25,840
we can pass in the current number of turns

11416
00:16:26,050 --> 00:16:29,530
which remember it got set by the set_difficulty function,

11417
00:16:30,100 --> 00:16:32,650
and we can pass that in into here.

11418
00:16:34,360 --> 00:16:38,740
Because it's not immediately obvious that this function actually has an output,

11419
00:16:39,430 --> 00:16:43,270
it's probably a good idea to add a docstring to this function.

11420
00:16:44,080 --> 00:16:46,330
Remember the three quotes,

11421
00:16:46,570 --> 00:16:49,600
and then in between we're going to say checks

11422
00:16:49,660 --> 00:16:54,310
answer against guess. Returns

11423
00:16:55,930 --> 00:16:59,050
the number of turns remaining.

11424
00:17:01,060 --> 00:17:04,060
Now when we actually call check_answer

11425
00:17:04,510 --> 00:17:09,510
you can see that this is what actually happens and that we have a return that we

11426
00:17:09,910 --> 00:17:10,900
can be aware of.

11427
00:17:12,670 --> 00:17:15,250
If this is going to be the number of turns remaining,

11428
00:17:15,520 --> 00:17:20,520
then we can save that to this variable turns so that we update this local

11429
00:17:21,250 --> 00:17:23,920
variable every time we check the answer.

11430
00:17:25,540 --> 00:17:27,790
Now this part is a little bit mind blowing,

11431
00:17:27,880 --> 00:17:30,940
so you might actually want to put this through Python

11432
00:17:30,940 --> 00:17:32,560
Tutor and step through it

11433
00:17:32,560 --> 00:17:37,420
step by step to see what's actually going on and how this turns variable is

11434
00:17:37,420 --> 00:17:40,480
being updated by the output from this function.

11435
00:17:40,960 --> 00:17:44,620
If you're totally happy with what's going on, then feel free to keep going.

11436
00:17:46,390 --> 00:17:48,460
So now let's check out our code.

11437
00:17:50,040 --> 00:17:55,040
50 is too high and 20 is too low, and 38 is just right. Now

11438
00:17:56,820 --> 00:18:00,510
what if I actually ran my number of turns down to zero?

11439
00:18:00,840 --> 00:18:04,350
So let's try hard because this is only going to give us five attempts.

11440
00:18:04,830 --> 00:18:08,730
So let's say I guess 50 and then 70,

11441
00:18:09,270 --> 00:18:13,920
and I'm just going to put in some random numbers so that I end up with no

11442
00:18:13,920 --> 00:18:18,630
remaining guesses. You can see it's actually not stopping me right?

11443
00:18:19,080 --> 00:18:23,160
And also for some reason we have a bug where the number of attempts we have

11444
00:18:23,160 --> 00:18:27,630
remaining is not actually being printed. So let's address that issue.

11445
00:18:27,960 --> 00:18:31,800
Well, if we want it to happen every time and repeat,

11446
00:18:32,100 --> 00:18:36,450
it's going to need to go into the while loop. Instead of printing our number of

11447
00:18:36,450 --> 00:18:40,980
turns here, why don't we print it here inside the while loop instead?

11448
00:18:42,000 --> 00:18:46,680
So let's make sure the indentation is correct and now let's try it again.

11449
00:18:50,330 --> 00:18:53,270
So I have 5 attempts remaining. Let's make a guess.

11450
00:18:53,660 --> 00:18:58,660
I have 4 attempts remaining. And notice how it's counting it down;

11451
00:18:59,120 --> 00:19:02,900
3, 2, 1. This should be my last guest,

11452
00:19:02,960 --> 00:19:06,680
but notice how it actually keeps on going. It doesn't stop the game.

11453
00:19:07,010 --> 00:19:10,220
I can keep going and it's going into negatives now.

11454
00:19:10,880 --> 00:19:14,870
How can we fix this? We need some sort of way of tracking

11455
00:19:14,900 --> 00:19:19,640
when this number of turns goes down to zero. When that happens,

11456
00:19:19,730 --> 00:19:22,790
we have to stop the game and tell them that they've lost.

11457
00:19:23,450 --> 00:19:26,120
Why don't we create an if statement, check

11458
00:19:26,120 --> 00:19:31,120
if the number of tons is equal to zero and print something.

11459
00:19:32,450 --> 00:19:36,830
Let's check the actual final version. Let's see what happens in this case.

11460
00:19:37,250 --> 00:19:39,050
When I run out of gos,

11461
00:19:40,400 --> 00:19:44,420
I make a guess, it's two low and it tells me you've run out of guesses.

11462
00:19:44,450 --> 00:19:47,780
You lose. We can print that here as well.

11463
00:19:49,940 --> 00:19:52,310
But notice how if we run the code as it is,

11464
00:19:52,460 --> 00:19:56,990
so let's just keep guessing the same number until I run it down to 1.

11465
00:19:57,380 --> 00:20:01,640
So now I make a guess, it tells me you run out of guesses. You lose.

11466
00:20:01,910 --> 00:20:05,150
But it's still letting me keep going even though I've lost.

11467
00:20:05,810 --> 00:20:09,350
How can we make our game end? Well,

11468
00:20:09,380 --> 00:20:13,130
luckily we've got our game inside a function

11469
00:20:13,280 --> 00:20:15,470
which is being called at the very beginning.

11470
00:20:16,100 --> 00:20:20,450
Now remember that with functions you have the return keyword.

11471
00:20:20,960 --> 00:20:25,960
You can return with an output or you can just write return for it to exit and end

11472
00:20:27,440 --> 00:20:32,360
the function. So now with that return keyword in place,

11473
00:20:32,780 --> 00:20:35,600
once I run out of turns, see what happens.

11474
00:20:38,690 --> 00:20:41,960
It stops and it doesn't let me guess any more.

11475
00:20:43,820 --> 00:20:45,320
Perfect. We've managed to get that

11476
00:20:45,320 --> 00:20:50,320
right. The thing that we're still missing is this prompt for the user to guess

11477
00:20:51,340 --> 00:20:53,440
again. Now this is kind of optional.

11478
00:20:53,440 --> 00:20:56,350
It depends on your own feel for the user experience.

11479
00:20:56,770 --> 00:21:00,430
I think it makes sense to say, 'It's too low. Guess again.' because it's kind of

11480
00:21:00,430 --> 00:21:03,130
telling them to do something. Although there's make a guess,

11481
00:21:03,160 --> 00:21:07,330
also prompts them to make a guess. So you can have, you don't have to.

11482
00:21:07,570 --> 00:21:08,950
If you wanted to have that,

11483
00:21:09,370 --> 00:21:14,050
then you probably actually have to check that they still have turns remaining.

11484
00:21:14,560 --> 00:21:19,560
And if they do, then make sure that the guess is not equal to the answer,

11485
00:21:21,070 --> 00:21:26,070
so they haven't got it right within this turn, and then to print that 'Guess

11486
00:21:26,180 --> 00:21:30,520
again'. So now every time they get it wrong,

11487
00:21:30,580 --> 00:21:32,770
but they still have remaining guesses

11488
00:21:33,100 --> 00:21:37,960
it should say 'Too low. Guess again.' or 'Too high. Guess again.'

11489
00:21:38,800 --> 00:21:40,570
But if they actually get it right,

11490
00:21:40,600 --> 00:21:44,440
so the answer should be 83, then it says 'You got it.

11491
00:21:44,440 --> 00:21:47,800
The answer was 83' without asking them to guess again.

11492
00:21:48,760 --> 00:21:51,880
Now we've pretty much completed this code.

11493
00:21:52,270 --> 00:21:54,760
Of course you could have added additional art.

11494
00:21:54,760 --> 00:21:59,760
So you could have created an art.py and then used the text to in the ASCII

11495
00:21:59,950 --> 00:22:03,580
generator to create a ASCII art.

11496
00:22:03,630 --> 00:22:04,463
Yeah.

11497
00:22:06,480 --> 00:22:08,840
And then back in here we could have imported it.

11498
00:22:12,240 --> 00:22:14,790
And we could put that at the very beginning of the game.

11499
00:22:15,510 --> 00:22:19,770
But the rest of the customization is basically your own, right?

11500
00:22:19,770 --> 00:22:24,770
You're free to do whatever it is that you want to and to change the wording, to

11501
00:22:25,020 --> 00:22:26,010
change the text.

11502
00:22:26,280 --> 00:22:30,600
The really important part was that you were able to play this game,

11503
00:22:30,990 --> 00:22:35,990
understand how it worked and then break down the problem into smaller pieces

11504
00:22:36,300 --> 00:22:38,100
that you could tackle one by one.

11505
00:22:38,760 --> 00:22:43,740
And if you had trouble actually completing this program by yourself,

11506
00:22:44,220 --> 00:22:47,370
then you should have noticed when we were walking through it

11507
00:22:47,610 --> 00:22:50,820
when I just broke down that big a problem into smaller chunks

11508
00:22:51,120 --> 00:22:55,140
how much easier it became tackling each of the smaller things, right?

11509
00:22:55,440 --> 00:23:00,240
Letting the user guess a number or choosing a random number between 1 and 100,

11510
00:23:00,480 --> 00:23:02,580
you can definitely do parts of this.

11511
00:23:03,120 --> 00:23:06,450
And as you built up the game, towards the end you realized, ah,

11512
00:23:06,480 --> 00:23:08,430
this was missing or that might be nice.

11513
00:23:08,760 --> 00:23:11,490
Then you could start adding more and more bits to it.

11514
00:23:12,330 --> 00:23:15,510
So if you wanted to review the final code that you see here,

11515
00:23:15,810 --> 00:23:20,490
you can, of course, head over to the guess-the-number-final Repl.it at this

11516
00:23:20,520 --> 00:23:23,010
particular link in the course resources.

11517
00:23:23,460 --> 00:23:27,150
But hopefully, you've actually managed to build out your own version and it's

11518
00:23:27,180 --> 00:23:31,320
even better than what I've done. And if you're particularly proud of it,

11519
00:23:31,470 --> 00:23:35,340
be sure to share it so that the rest of us can take a look and have a play with

11520
00:23:35,340 --> 00:23:36,173
it as well.

11521
00:23:36,570 --> 00:23:40,350
So I hope you enjoyed the project today and I'll see you tomorrow.



11522
00:00:00,030 --> 00:00:04,650
Hey guys! Welcome back to a 100 Days of Code. Today

11523
00:00:04,680 --> 00:00:06,720
we're going to look at debugging,

11524
00:00:07,020 --> 00:00:10,380
the process of removing bugs from your code.

11525
00:00:10,920 --> 00:00:12,600
If you manage to get to this point,

11526
00:00:12,690 --> 00:00:15,480
you've probably written quite a bit of code already,

11527
00:00:16,200 --> 00:00:20,280
and I will bet that you've probably made some mistakes, some typos,

11528
00:00:20,310 --> 00:00:24,060
some errors and some bugs. So in this lesson,

11529
00:00:24,090 --> 00:00:29,090
I want to talk about some techniques and tips for how to find bugs and how to

11530
00:00:30,000 --> 00:00:32,790
get rid of them from your code. Now,

11531
00:00:32,790 --> 00:00:37,710
the first documented bug was actually found by this lady, Grace Hopper.

11532
00:00:38,220 --> 00:00:43,220
She was probably one of the first programmers and one of the pioneers of the job

11533
00:00:43,380 --> 00:00:46,830
that we're undertaking right now. Now in her notes,

11534
00:00:47,250 --> 00:00:51,060
you'll find a moth that's been taped to the notebook,

11535
00:00:51,720 --> 00:00:56,370
and this was found in a relay that was preventing her code from running

11536
00:00:56,370 --> 00:00:59,400
properly. And this was pretty much the first

11537
00:00:59,400 --> 00:01:03,540
actual case of a bug that's been found in a computer.

11538
00:01:04,230 --> 00:01:07,140
Even though we're not dealing with moths these days anymore,

11539
00:01:07,530 --> 00:01:12,530
we're still going to end up finding bits of things in our code that prevent the

11540
00:01:13,110 --> 00:01:15,810
code from doing the things that we want it to.

11541
00:01:16,380 --> 00:01:20,700
The important thing to remember is don't feel down when you've created a bug

11542
00:01:21,000 --> 00:01:25,680
because everyone gets bugs. And when I say gets bugs,

11543
00:01:25,710 --> 00:01:30,630
I mean, we create them, right? So once you've gotten over this, next,

11544
00:01:30,690 --> 00:01:35,370
I want to talk about some of the tips and techniques that you should follow on

11545
00:01:35,370 --> 00:01:39,240
how to quickly be able to identify and remove these bugs.

11546
00:01:39,750 --> 00:01:42,720
So the first step is to describe the problem.

11547
00:01:43,170 --> 00:01:47,760
If the problem is messy and it's not well understood in your head,

11548
00:01:48,090 --> 00:01:50,160
then it's almost impossible to debug it.

11549
00:01:50,460 --> 00:01:55,460
So untangled the problem and try to make sense of what's going on. To begin,

11550
00:01:56,040 --> 00:02:00,360
go ahead and fork the starting repl for today's code.

11551
00:02:00,990 --> 00:02:04,860
Now, the first thing to notice here is that I've written a bunch of code in the

11552
00:02:04,860 --> 00:02:06,000
starting repl

11553
00:02:06,300 --> 00:02:10,259
and we're going to be uncommenting these blocks one by one and eventually

11554
00:02:10,259 --> 00:02:12,480
solving all of the debugging problems.

11555
00:02:13,650 --> 00:02:18,240
So the first thing you're going to do is to uncomment the first block of code.

11556
00:02:19,110 --> 00:02:20,700
Now in this block of code,

11557
00:02:20,730 --> 00:02:24,660
we're going to practice describing the problem to help us solve this debugging

11558
00:02:24,660 --> 00:02:27,480
problem. Now if you take a look at this function

11559
00:02:27,690 --> 00:02:30,510
you can see that at some point in the function,

11560
00:02:30,540 --> 00:02:33,300
we're supposed to print this line out into the console.

11561
00:02:34,050 --> 00:02:38,190
But if we go ahead and hit run, you can see that nothing gets printed.

11562
00:02:38,910 --> 00:02:40,530
So what's going on here?

11563
00:02:41,220 --> 00:02:46,220
I want you to take a look at this function and describe the actual problem.

11564
00:02:46,740 --> 00:02:51,150
What is the for-loop doing? When is the function meant to print "You got it"?

11565
00:02:51,600 --> 00:02:56,340
What assumptions are you making about the value of i? So pause the video,

11566
00:02:56,730 --> 00:02:59,830
read the function and have a go at describing the problem.

11567
00:03:02,200 --> 00:03:02,680
All right.

11568
00:03:02,680 --> 00:03:07,680
So what we've got here is we've got a function that loops through all the

11569
00:03:08,080 --> 00:03:10,240
numbers between 1 and 20,

11570
00:03:10,780 --> 00:03:15,220
and then once that number reaches 20, it's supposed to print "You got it".

11571
00:03:15,820 --> 00:03:19,660
But the problem is that when i reaches 20,

11572
00:03:19,780 --> 00:03:22,390
it doesn't print this line into the console.

11573
00:03:23,290 --> 00:03:27,610
So now that we've described the problem and we understand what's going on,

11574
00:03:28,000 --> 00:03:32,620
let's see if we can solve it. If we think about this problem,

11575
00:03:32,680 --> 00:03:35,770
when i reaches 20, it doesn't print out this line.

11576
00:03:36,130 --> 00:03:37,600
There's an assumption in there, right?

11577
00:03:37,960 --> 00:03:41,860
The assumption is that i will definitely reach 20.

11578
00:03:42,640 --> 00:03:46,240
But if you think back to how the range function works,

11579
00:03:46,840 --> 00:03:51,190
the stop or the upper bound is actually omitted.

11580
00:03:51,580 --> 00:03:53,740
So when you write range(4),

11581
00:03:54,100 --> 00:03:57,610
it actually produces a number from 0 up to 3.

11582
00:03:58,570 --> 00:04:01,690
And in our case, when we write (1, 20),

11583
00:04:02,140 --> 00:04:06,280
it actually goes from 1 all the way up to 19

11584
00:04:06,400 --> 00:04:08,410
but not including 20.

11585
00:04:09,130 --> 00:04:14,050
The problem here is that i actually never reaches 20.

11586
00:04:14,380 --> 00:04:19,089
So this assumption is completely false. Pause the video

11587
00:04:19,180 --> 00:04:23,680
and see if you can fix the code so that this line actually gets printed.

11588
00:04:25,270 --> 00:04:29,830
All right. So all we need to do is change this to 21 instead of 20

11589
00:04:30,220 --> 00:04:34,090
and now when we hit run, you can see it actually works

11590
00:04:34,120 --> 00:04:38,450
and we managed to debug this problem. Always when you come across a problem

11591
00:04:38,480 --> 00:04:39,313
in your code,

11592
00:04:39,340 --> 00:04:43,600
try to describe it so that you really understand what the issue is,

11593
00:04:44,110 --> 00:04:49,110
and then test your assumptions and see which of those assumptions is actually

11594
00:04:49,750 --> 00:04:50,290
false.


11595
00:00:00,750 --> 00:00:05,750
Now the next step is to think about reproducing the bug that you've encountered,

11596
00:00:06,840 --> 00:00:10,950
because when you encounter it once but you don't encounter it the next time

11597
00:00:11,310 --> 00:00:15,930
that becomes a really difficult bug to fix. Go ahead

11598
00:00:15,930 --> 00:00:18,570
and uncomment the next block of code.

11599
00:00:19,590 --> 00:00:23,130
And we're going to comment out the previous section because we're done with it

11600
00:00:23,130 --> 00:00:27,240
now. So this is the only part that should be active in your main.py.

11601
00:00:28,260 --> 00:00:31,020
In this section, we're going to try and reproduce the bug.

11602
00:00:31,170 --> 00:00:32,340
So when we run the code,

11603
00:00:32,369 --> 00:00:36,840
sometimes it will work and it will print out one of the dice images from this

11604
00:00:36,840 --> 00:00:40,260
list, but occasionally you will get an error.

11605
00:00:41,310 --> 00:00:45,840
These types of bugs are really difficult because you might test your code only

11606
00:00:45,840 --> 00:00:49,080
once or twice, and it looks all fine. It works.

11607
00:00:49,380 --> 00:00:51,750
But then occasionally you get an error.

11608
00:00:52,350 --> 00:00:55,470
And the important thing is to reproduce that error.

11609
00:00:55,500 --> 00:00:58,170
When does that error actually happen?

11610
00:00:59,040 --> 00:01:02,850
And based on that knowledge, we can fix our code.

11611
00:01:03,570 --> 00:01:08,570
Try to reproduce the bug yourself and try to notice when it happens and see if

11612
00:01:10,320 --> 00:01:14,400
you can change the code so that it always produces this error.

11613
00:01:14,690 --> 00:01:19,690
[inaudible],

11614
00:01:20,390 --> 00:01:25,160
We've got a list of dice images, which are just emojis.

11615
00:01:25,610 --> 00:01:30,610
And we've also got this random number, dice number between 1 and 6.

11616
00:01:31,730 --> 00:01:34,310
Now, when we try to pick out of our list,

11617
00:01:34,850 --> 00:01:37,400
occasionally we get an error.

11618
00:01:38,180 --> 00:01:42,530
Now we have to notice when the error occurs, and to reproduce the bug

11619
00:01:42,560 --> 00:01:46,490
we have to figure out which of these numbers is actually causing the problem.

11620
00:01:46,910 --> 00:01:51,470
So we know that this is a random number between 1 and 6

11621
00:01:51,920 --> 00:01:55,220
and if we check the documentation, it tells us that randint

11622
00:01:55,220 --> 00:01:57,680
works a little bit differently from range.

11623
00:01:58,070 --> 00:02:02,570
It will return a random integer in the range of a and b,

11624
00:02:02,930 --> 00:02:06,050
including both end points. So in our case,

11625
00:02:06,080 --> 00:02:11,080
both 1 and 6 could be generated and it could be any number.

11626
00:02:11,210 --> 00:02:15,950
So if that was equal to 1, well, does it generate an error?

11627
00:02:16,010 --> 00:02:18,890
No, it just picks out this particular item.

11628
00:02:19,370 --> 00:02:22,250
But what if it was 2 or 3 or 4?

11629
00:02:22,520 --> 00:02:25,790
Or what if we tested 6? Well,

11630
00:02:25,790 --> 00:02:30,230
now every time we hit run, you can see we get an error.

11631
00:02:30,980 --> 00:02:34,490
And now that we've got our error to show up consistently,

11632
00:02:34,610 --> 00:02:39,610
it's a lot easier to debug because we know that the index error list index out of

11633
00:02:40,160 --> 00:02:43,400
range happens when this dice number is 6.

11634
00:02:43,850 --> 00:02:48,080
So when we go back to our previous code, well,

11635
00:02:48,110 --> 00:02:53,110
we can't use 6 in this list because lists start counting from 0.

11636
00:02:54,440 --> 00:02:59,150
So to get this dice 1, we need dice_num to be 0.

11637
00:02:59,590 --> 00:03:02,410
And then this is 1, 2, 3, 4, 5,

11638
00:03:02,770 --> 00:03:07,420
and 6 is somewhere out here and it doesn't exist. Now,

11639
00:03:07,450 --> 00:03:12,190
go ahead and fix this code so that all the dice images are represented and we

11640
00:03:12,190 --> 00:03:16,240
never see this error again. Alright.

11641
00:03:16,240 --> 00:03:19,420
So that is as simple as shifting down these numbers.

11642
00:03:19,870 --> 00:03:22,870
So instead of making a random number between 1 and 6,

11643
00:03:23,110 --> 00:03:28,000
we actually want a random number between 0 and 5. And now,

11644
00:03:28,030 --> 00:03:30,190
no matter how many times we run our code,

11645
00:03:30,460 --> 00:03:32,530
we're never going to get that error show up again.


11646
00:00:00,870 --> 00:00:04,200
Very often I've asked you in the quizzes

11647
00:00:04,200 --> 00:00:06,090
especially to play computer.

11648
00:00:06,720 --> 00:00:11,310
And the reason is because this skill of pretending to be a computer reading

11649
00:00:11,310 --> 00:00:15,630
through your code and imagining what you going to do each time is really,

11650
00:00:15,630 --> 00:00:18,510
really useful, especially when you're debugging.

11651
00:00:19,290 --> 00:00:23,370
So let's comment out the previous block and try the next block.

11652
00:00:24,270 --> 00:00:25,620
Take a look at this code.

11653
00:00:26,180 --> 00:00:28,040
It takes an input

11654
00:00:28,250 --> 00:00:32,689
in the form of an integer and it ask the user for their year of birth.

11655
00:00:33,380 --> 00:00:38,380
And then it uses an if statement to check if they were born between 1980 and

11656
00:00:39,110 --> 00:00:43,220
1994, in which case they're classified as a millennial.

11657
00:00:44,270 --> 00:00:49,220
But if there were born later than 1994, then they're classified as a Gen Z.

11658
00:00:50,000 --> 00:00:52,130
So depending on which country you're from,

11659
00:00:52,310 --> 00:00:55,670
there's different classifications for your particular generation.

11660
00:00:56,210 --> 00:00:59,450
This is just the typical words that you hear on the internet.

11661
00:00:59,780 --> 00:01:02,540
You're a millennial, you're a Gen Z, you're a baby boomer,

11662
00:01:02,840 --> 00:01:07,100
and this comes from a lot of the history of the US. But nonetheless,

11663
00:01:07,160 --> 00:01:12,160
I want you to run the code and I want you to see what happens when I put in

11664
00:01:12,590 --> 00:01:15,950
1994. Absolutely nothing,

11665
00:01:16,220 --> 00:01:21,110
so we have our bug right there. Run through the code line-by-line and evaluate

11666
00:01:21,110 --> 00:01:25,610
each statement. For example, if year is equal to 1990,

11667
00:01:25,910 --> 00:01:29,630
will line 77 evaluate to true or to false?

11668
00:01:30,170 --> 00:01:32,630
What if year is equal to 1994?

11669
00:01:33,020 --> 00:01:38,000
Look at each line of code and follow the logic and check what it will evaluate

11670
00:01:38,000 --> 00:01:38,833
to.

11671
00:01:38,870 --> 00:01:43,100
So I want you to play computer and figure out what is the problem,

11672
00:01:43,520 --> 00:01:47,210
and then go ahead and fix the bug. Pause the video now.

11673
00:01:50,480 --> 00:01:51,313
All right. So

11674
00:01:51,410 --> 00:01:55,070
let's pretend that we got 1994 as the input.

11675
00:01:55,490 --> 00:01:57,320
So now I'm the computer

11676
00:01:57,380 --> 00:02:01,040
and I know that this year is equal to 1994.

11677
00:02:01,730 --> 00:02:04,520
Now with this year being equal to 1994,

11678
00:02:04,730 --> 00:02:09,139
I go into this if statement so is 1994,

11679
00:02:09,440 --> 00:02:13,340
greater than 1980? Yes it is.

11680
00:02:13,430 --> 00:02:15,980
So this actually becomes true.

11681
00:02:17,000 --> 00:02:22,000
Now I have to check the second condition and it also has to be true for this if

11682
00:02:22,040 --> 00:02:25,880
block to be triggered. So is 1994,

11683
00:02:26,270 --> 00:02:28,790
less than 1994? No, it's not.

11684
00:02:28,820 --> 00:02:32,210
It's actually less than equal to 1994,

11685
00:02:32,570 --> 00:02:36,620
or it's equal to 1994. So in this case,

11686
00:02:36,680 --> 00:02:39,050
this condition becomes false.

11687
00:02:39,530 --> 00:02:44,530
And we know that if we try to combine a true and a false then it actually just

11688
00:02:44,930 --> 00:02:46,070
becomes a false.

11689
00:02:46,490 --> 00:02:47,930
So this gets skipped.

11690
00:02:48,830 --> 00:02:51,980
Now, next, we look at the next statement, right?

11691
00:02:52,430 --> 00:02:56,840
If 1994 is greater than 1994,

11692
00:02:57,380 --> 00:03:00,610
well, that's also not true. It be greater or equal to,

11693
00:03:00,940 --> 00:03:02,800
or it could just be equal to.

11694
00:03:02,950 --> 00:03:06,280
So this condition is also false.

11695
00:03:06,700 --> 00:03:10,810
So that means it's also going to skip this next line and there's no more lines

11696
00:03:10,810 --> 00:03:14,680
of code left, which is why the computer doesn't print anything.

11697
00:03:15,190 --> 00:03:19,420
So let's restore our code to before we started playing computer

11698
00:03:19,960 --> 00:03:24,960
and we can identify that this problem occurs because there is no bucket that

11699
00:03:26,500 --> 00:03:29,470
actually catches the 1994.

11700
00:03:30,160 --> 00:03:35,160
We could simply fix this code by changing one of these conditions to be greater

11701
00:03:35,590 --> 00:03:38,950
than or equal to either here or here.

11702
00:03:39,640 --> 00:03:44,530
And that means that the year 1994 is not skipped over in our conditions.

11703
00:03:44,890 --> 00:03:48,880
And when we hit run, it will actually tell us that we are in fact,

11704
00:03:49,210 --> 00:03:49,900
a Gen Z.


11705
00:00:01,230 --> 00:00:02,820
Now the next step

11706
00:00:02,880 --> 00:00:07,230
and the next tip is pretty obvious. When the editor's giving you an error or when

11707
00:00:07,230 --> 00:00:11,670
the console is giving you an error, fix the errors before you continue.

11708
00:00:12,180 --> 00:00:16,379
Now, this is a little bit easier when you're dealing with errors in the editor,

11709
00:00:16,440 --> 00:00:19,530
because it will actually highlight to you the line that's broken.

11710
00:00:20,070 --> 00:00:23,520
So here we've got a print statement and when we hover over it,

11711
00:00:23,790 --> 00:00:28,790
it tells us that it expected an indented block. So that should be a good enough

11712
00:00:29,280 --> 00:00:32,189
clue to tell us what's actually wrong.

11713
00:00:32,610 --> 00:00:36,660
So if we go ahead and indent this block, then that error goes away.

11714
00:00:37,170 --> 00:00:40,830
But that's not the only error, no. When you run this code,

11715
00:00:40,890 --> 00:00:45,750
you still get another error. So let's say that I am a 12-year-old girl,

11716
00:00:46,980 --> 00:00:48,090
we get another error.

11717
00:00:48,570 --> 00:00:52,470
And this error does not show up when we write the code,

11718
00:00:52,770 --> 00:00:57,770
but it only shows up depending on what input we gave to this age variable.

11719
00:00:59,160 --> 00:01:03,900
So now we have a different type of error. We have an error that's in the console.

11720
00:01:04,470 --> 00:01:06,210
How do we solve this error? Well,

11721
00:01:06,210 --> 00:01:10,680
the easiest way is just to select the parts of the error

11722
00:01:10,710 --> 00:01:15,710
that's not specific to your code like this age greater than 18 or line 84,

11723
00:01:17,100 --> 00:01:21,480
but the part that is pretty much common to whenever anybody gets this error.

11724
00:01:22,200 --> 00:01:25,920
And now if we copy it and we paste it into Google,

11725
00:01:26,910 --> 00:01:30,390
then you can see there's a lot of other people who've had this issue.

11726
00:01:30,960 --> 00:01:32,850
And if we read what the problem is,

11727
00:01:32,910 --> 00:01:36,840
it tells us that you're getting the input from the console as a string

11728
00:01:37,020 --> 00:01:40,020
and you must cast that input as an int

11729
00:01:40,380 --> 00:01:45,380
before you try to do these numerical operations like comparisons. Back over here,

11730
00:01:46,380 --> 00:01:50,310
that's exactly what we're trying to do on line 84 right here.

11731
00:01:50,940 --> 00:01:55,940
This age comes out of this input function and it returns a string.

11732
00:01:58,350 --> 00:02:01,020
And so in order to turn this into a number,

11733
00:02:01,230 --> 00:02:06,230
we of course have to cast it or type convert it into an integer.

11734
00:02:07,230 --> 00:02:10,560
And now when we run our code and we give it our age,

11735
00:02:10,830 --> 00:02:12,810
it no longer errors out.

11736
00:02:13,380 --> 00:02:16,620
And if I tell it that I am in fact 21,

11737
00:02:16,860 --> 00:02:18,540
which is still not my real age,

11738
00:02:19,050 --> 00:02:21,900
then we actually get the print statement working.

11739
00:02:23,130 --> 00:02:28,130
But remember that the errors don't always solve all of your bugs, like this.

11740
00:02:31,170 --> 00:02:34,650
In this case there are no errors with my code whatsoever,

11741
00:02:34,920 --> 00:02:37,860
it's just not doing what I want it to do.

11742
00:02:38,430 --> 00:02:42,960
And these are the most frustrating bugs to debug because nobody is helping you

11743
00:02:42,960 --> 00:02:45,450
here. There is no errors that you can Google,

11744
00:02:45,660 --> 00:02:47,790
there's no underlines that you can check.

11745
00:02:48,210 --> 00:02:52,650
You actually have to rely on your skills as a programmer to fix this.

11746
00:02:53,310 --> 00:02:58,310
Now we, of course, know that this needs to be an fstring in order to insert that

11747
00:03:00,130 --> 00:03:03,430
variable into this position in the curly braces.

11748
00:03:04,120 --> 00:03:08,110
But if you didn't, then this would be a lot harder to debug.

11749
00:03:09,430 --> 00:03:13,840
Experience comes in really handy with debugging and the more bugs that you

11750
00:03:13,840 --> 00:03:18,100
solve, the better you get at it. So go onto the internet,

11751
00:03:18,130 --> 00:03:22,660
try to help people in Stack Overflow. Go on to the discord channel for the course,

11752
00:03:22,720 --> 00:03:27,220
try to solve other people's bugs and you will find yourself getting stronger

11753
00:03:27,550 --> 00:03:29,020
and better day by day.


11754
00:00:00,150 --> 00:00:04,320
Now the next tip has been the thing that you've probably been screaming out for.

11755
00:00:05,010 --> 00:00:10,010
Why don't we use print? And indeed you are correct.

11756
00:00:10,200 --> 00:00:14,220
Print is basically your best friend. Now as developers

11757
00:00:14,250 --> 00:00:15,870
I know we don't have a lot of friends,

11758
00:00:16,230 --> 00:00:20,220
but at least we can rely on print to be our trusty friend.

11759
00:00:21,120 --> 00:00:25,650
Do you have heartbreak? Use print. Now print probably can't help you with your

11760
00:00:25,650 --> 00:00:28,650
relationship issues or family issues,

11761
00:00:28,920 --> 00:00:32,100
but it can help you debug your code,

11762
00:00:32,430 --> 00:00:34,590
which is a pretty decent thing for it to do.

11763
00:00:35,280 --> 00:00:40,280
So let's go ahead and comment out the previous block and let's uncomment this

11764
00:00:40,920 --> 00:00:45,690
one. And now I'm sure you're pretty much dying to use print to solve these

11765
00:00:45,690 --> 00:00:49,560
debugging issues. Why Angela? Why haven't you been using it before? Well,

11766
00:00:49,560 --> 00:00:51,990
I've been saving it for this perfect moment.

11767
00:00:52,710 --> 00:00:57,710
Take a look at the code and see if you can use print as your friend to help you

11768
00:00:58,410 --> 00:01:02,070
solve the issue. Pause the video now and give that a go.

11769
00:01:04,430 --> 00:01:05,630
So here, we've got

11770
00:01:05,780 --> 00:01:10,780
a very simple program that figures out the number of words in a book. Pages

11771
00:01:11,690 --> 00:01:14,960
starts out zero, words starts out at zero,

11772
00:01:15,440 --> 00:01:20,440
and we have to input the number of pages in our book and the number of words in

11773
00:01:20,450 --> 00:01:21,260
our book.

11774
00:01:21,260 --> 00:01:26,260
And then we multiply the pages by the words to calculate the total number of

11775
00:01:26,330 --> 00:01:30,350
words in the book and then we print it out. But if we have a go,

11776
00:01:30,380 --> 00:01:32,990
you can see that let's say we have, um,

11777
00:01:33,020 --> 00:01:38,020
45 pages making a booklet and we have 250 words per page and we get 0.

11778
00:01:40,940 --> 00:01:44,900
So the output that's supposed to tell us the total number of words in the book

11779
00:01:45,320 --> 00:01:47,990
ends up being 0. So what's going on here?

11780
00:01:48,860 --> 00:01:53,330
How can we debug this? Let's go ahead and use print.

11781
00:01:53,810 --> 00:01:55,820
What are our assumptions? Well,

11782
00:01:55,880 --> 00:01:59,300
we're actually getting the number of pages and the number of words correct

11783
00:01:59,330 --> 00:02:00,890
so that we can calculate this.

11784
00:02:01,310 --> 00:02:05,720
Why don't we add some print statements before the final one? Let's print

11785
00:02:05,750 --> 00:02:10,580
what's the actual value of some of our variables that we're getting from the

11786
00:02:10,580 --> 00:02:14,030
user. For example, I could say, um,

11787
00:02:15,200 --> 00:02:20,200
the pages equals and then insert the pages variable in here in an fstring.

11788
00:02:22,730 --> 00:02:27,560
And I can also print my other variable in an fstring,

11789
00:02:27,680 --> 00:02:31,400
which is the word per page variable.

11790
00:02:31,910 --> 00:02:36,910
And this is equal to let's insert that variable as well.

11791
00:02:37,850 --> 00:02:40,190
And now when I run my code,

11792
00:02:40,220 --> 00:02:44,180
I've got my print statements going and I can test it out.

11793
00:02:44,300 --> 00:02:49,300
So we still got 45 pages and then 250 words per page.

11794
00:02:50,030 --> 00:02:54,680
Now you can see that my variables are logged. So this one,

11795
00:02:54,680 --> 00:02:59,000
this pages variable does equal 45. So it captured my data correctly.

11796
00:02:59,410 --> 00:03:02,080
But the word per page equals 0,

11797
00:03:02,320 --> 00:03:06,400
which is not what I entered at all. I entered 250

11798
00:03:06,490 --> 00:03:08,950
so I was expecting this to be 250.

11799
00:03:10,120 --> 00:03:13,030
So now using print, my best friend,

11800
00:03:13,450 --> 00:03:15,190
I've managed to narrow down the problem.

11801
00:03:15,250 --> 00:03:17,590
It's something to do with this variable.

11802
00:03:17,740 --> 00:03:21,220
So let's take a look at what's going on here. Well,

11803
00:03:21,550 --> 00:03:23,200
I've spotted the problem,

11804
00:03:23,290 --> 00:03:27,310
have you? Pause the video and see if you can fix this code

11805
00:03:27,460 --> 00:03:31,840
so the final total number of words actually gets printed when you run the code.

11806
00:03:32,440 --> 00:03:35,650
Pause the video now. All right,

11807
00:03:35,680 --> 00:03:40,000
we've narrowed down to this one line of code that's probably broken.

11808
00:03:40,900 --> 00:03:45,790
And if you look closely, you'll see that instead of a single equal sign

11809
00:03:45,820 --> 00:03:47,350
which means assignment,

11810
00:03:47,740 --> 00:03:51,160
this variable should be equal to this value.

11811
00:03:51,820 --> 00:03:53,920
We had two equal signs.

11812
00:03:54,370 --> 00:03:58,660
This means does this variable equal this value?

11813
00:03:59,230 --> 00:04:03,820
And this actually gets evaluated and becomes either true or false.

11814
00:04:04,330 --> 00:04:08,770
Now, in this case, it's actually false. Words per page starts out being equal to

11815
00:04:08,770 --> 00:04:11,710
zero, and then it becomes equal to 250.

11816
00:04:12,520 --> 00:04:17,110
So if this line of code is false, then that's just left as it is,

11817
00:04:17,140 --> 00:04:18,880
it doesn't actually affect anything.

11818
00:04:19,360 --> 00:04:24,190
And this total word is still using zero, which is why it's printing out zero.

11819
00:04:24,790 --> 00:04:29,440
So now that we've identified the issue, all we have to do to fix it is that.

11820
00:04:30,310 --> 00:04:31,870
And if we run our code again,

11821
00:04:34,860 --> 00:04:37,770
you can see it works exactly as it should do.


11822
00:00:00,870 --> 00:00:04,710
Now before you start getting really committed to print and start making

11823
00:00:04,710 --> 00:00:07,050
friendship bracelets for this print statements,

11824
00:00:07,410 --> 00:00:10,020
there's another tool that I really want to talk about

11825
00:00:10,230 --> 00:00:14,610
and it's a tool that's bigger, it's fancier, it's more complex.

11826
00:00:14,610 --> 00:00:15,840
So what is it?

11827
00:00:15,960 --> 00:00:19,770
It's a debugger and we've already seen debuggers a little bit.

11828
00:00:20,580 --> 00:00:23,070
So I've already shown you pythontutor.com

11829
00:00:23,430 --> 00:00:28,080
and you've also seen us use the debugger in the Thonny editor right here.

11830
00:00:28,890 --> 00:00:32,610
Now, in this example, I'm going to stick with the web version of Python Tutor

11831
00:00:32,850 --> 00:00:35,280
just so that you don't have to install anything extra.

11832
00:00:35,640 --> 00:00:39,450
But if we go ahead and comment out the previous block and uncomment

11833
00:00:39,480 --> 00:00:44,310
the last one, you can see that we have yet another problem to solve

11834
00:00:44,490 --> 00:00:48,360
and yet another piece of code, that's not doing what it's supposed to do.

11835
00:00:49,020 --> 00:00:49,830
So in this case,

11836
00:00:49,830 --> 00:00:54,830
we've got a function that's supposed to mutate a list so that it takes a list as

11837
00:00:55,320 --> 00:00:56,153
an input

11838
00:00:56,400 --> 00:01:00,600
and then it's supposed to multiply each of the items in the list

11839
00:01:00,840 --> 00:01:05,310
so the final output should be something like 2, 4,

11840
00:01:05,550 --> 00:01:08,310
6, 10, and so on and so forth.

11841
00:01:08,310 --> 00:01:12,240
Basically taking each of these numbers and multiplying them by 2,

11842
00:01:12,420 --> 00:01:16,620
which happens on this line of code. But unfortunately when we run it,

11843
00:01:16,830 --> 00:01:21,300
we just get a list with a single value, 26. So what's going on?

11844
00:01:21,750 --> 00:01:23,460
Let's try and debug it.

11845
00:01:23,550 --> 00:01:28,550
So I want you to copy these lines of code and then paste it into Python Tutor

11846
00:01:29,430 --> 00:01:32,310
and then go ahead and click Visualize Execution.

11847
00:01:32,940 --> 00:01:37,080
Now that it's inside the debugger, we can do a lot of things with it.

11848
00:01:37,230 --> 00:01:42,030
We can step through the code to see it line by line. So for example,

11849
00:01:42,030 --> 00:01:47,030
the first thing that happens is we create a function called mutate and this

11850
00:01:47,430 --> 00:01:51,150
mutate gets past a input called a_list.

11851
00:01:51,630 --> 00:01:54,630
So now inside this function, mutate,

11852
00:01:54,810 --> 00:01:59,550
we've got a variable called a_list and it's this list with these values.

11853
00:02:00,240 --> 00:02:04,740
Now, as we keep going, we can see we create a b_list, which is an empty list

11854
00:02:04,920 --> 00:02:09,690
and then we use the for-loop to loop through each of the items in the list.

11855
00:02:10,020 --> 00:02:13,980
So the first time this item is equal to the first item in the list,

11856
00:02:14,010 --> 00:02:14,843
which is 1,

11857
00:02:15,300 --> 00:02:19,470
and then we multiply it by 2 to create this new_item variable,

11858
00:02:19,620 --> 00:02:20,820
which is now equal to 2.

11859
00:02:21,510 --> 00:02:26,510
And now the loop goes back to the beginning and we keep doing this with each of

11860
00:02:27,180 --> 00:02:31,830
the numbers in the list. We multiply 2 to each of the numbers.

11861
00:02:32,520 --> 00:02:37,470
Now, once we're done with that loop, the next line that happens is this one.

11862
00:02:38,100 --> 00:02:42,870
This b_list gets appended with the new item and finally,

11863
00:02:43,140 --> 00:02:47,520
we print out the b_list. Now this is where the problem occurs.

11864
00:02:47,610 --> 00:02:52,470
Notice how b_list is just a list with one value.

11865
00:02:52,950 --> 00:02:57,300
And that is in fact what gets printed. So with this debugger,

11866
00:02:57,330 --> 00:03:01,000
we've managed to see line line what the computer is doing,

11867
00:03:01,390 --> 00:03:03,340
which is really helpful in itself.

11868
00:03:03,730 --> 00:03:07,990
But we can actually make this process even simpler. Inside

11869
00:03:07,990 --> 00:03:11,410
most debuggers, you can put a breakpoint

11870
00:03:11,470 --> 00:03:16,470
which tells the computer to stop what you're doing at this particular line.

11871
00:03:17,110 --> 00:03:19,120
And then at that moment in time,

11872
00:03:19,390 --> 00:03:24,390
I want to examine what all the variables and all the functions are doing.

11873
00:03:25,060 --> 00:03:28,920
So in our line, the key problem happens right here.

11874
00:03:29,220 --> 00:03:32,130
If I click on this line, you can see it becomes red

11875
00:03:32,580 --> 00:03:36,450
and this is where it happens, this is the break point basically.

11876
00:03:36,780 --> 00:03:41,780
So now I can scroll over to that point in time I can examine the values of all of

11877
00:03:42,720 --> 00:03:46,230
my variables. a_list is still what I expect it to be,

11878
00:03:46,350 --> 00:03:51,350
but b_list is completely empty. And this item happens to be on the last item

11879
00:03:52,830 --> 00:03:56,790
number 13 and the new item is doing what it needs to do,

11880
00:03:56,790 --> 00:03:58,350
multiplying it by 2,

11881
00:03:58,860 --> 00:04:03,570
but none of them are being added to my list because if I click next,

11882
00:04:03,840 --> 00:04:08,490
you can see this b_list is equal to just one value.

11883
00:04:08,760 --> 00:04:13,050
And it happens to be the last value that new_item was equal to.

11884
00:04:14,370 --> 00:04:16,079
So by using this debugger,

11885
00:04:16,380 --> 00:04:19,890
you should now have a good idea of what the problem is.

11886
00:04:20,160 --> 00:04:25,160
Pause the video and try to fix this code so that the mutated list with all of

11887
00:04:26,400 --> 00:04:29,790
its six values gets printed. Pause the video now.

11888
00:04:31,920 --> 00:04:32,250
All right.

11889
00:04:32,250 --> 00:04:37,250
So the simple problem is that when we are adding the new item to this b_list,

11890
00:04:38,160 --> 00:04:40,080
we're doing it outside the loop.

11891
00:04:40,890 --> 00:04:44,820
It's when this loop has completed and at the very end

11892
00:04:45,060 --> 00:04:46,500
do we actually call this line.

11893
00:04:46,950 --> 00:04:51,950
So what we needed to do to fix this code is just to indent that line over.

11894
00:04:52,290 --> 00:04:54,330
And now when we run the code,

11895
00:04:55,140 --> 00:04:58,170
you can see that the proper output gets printed

11896
00:04:58,770 --> 00:05:03,570
and if we change this code in there, the debugger, if we edited it right here,

11897
00:05:04,230 --> 00:05:08,160
then when we visualize it, you can see if I put a breakpoint here

11898
00:05:08,490 --> 00:05:12,120
that right line of code gets executed six times

11899
00:05:12,570 --> 00:05:15,300
and if we go to that line of code and we hit next,

11900
00:05:15,630 --> 00:05:20,630
you can see that the b_list is now getting new values added each time as we

11901
00:05:21,660 --> 00:05:25,530
would expect it to. And when we examine all of our variables

11902
00:05:25,620 --> 00:05:27,570
especially this b_list variable,

11903
00:05:27,900 --> 00:05:32,250
it's exactly what we expect it to equal each step of the code.

11904
00:05:33,120 --> 00:05:35,640
So a debugger can be really useful.

11905
00:05:35,880 --> 00:05:40,230
It's almost like you've put a print statement on all the variables in your

11906
00:05:40,230 --> 00:05:41,010
code,

11907
00:05:41,010 --> 00:05:46,010
and you can isolate a particular time point to see what each of the values are.

11908
00:05:46,980 --> 00:05:49,800
And as we become even more experienced,

11909
00:05:50,010 --> 00:05:52,320
we're going to be using the debugger more and more.


11910
00:00:00,420 --> 00:00:02,969
Now, I've got some final tips for debugging,

11911
00:00:03,150 --> 00:00:07,770
and these are not so much techniques, but there are just really,

11912
00:00:07,770 --> 00:00:11,820
really important tips from somebody who's done quite a lot of coding and created

11913
00:00:12,180 --> 00:00:14,520
a massive amount of bugs in my lifetime.

11914
00:00:15,150 --> 00:00:18,930
So tip number 7 is take a break. It's really,

11915
00:00:18,930 --> 00:00:23,930
really important when you're just staring at the code and you keep looking at

11916
00:00:24,480 --> 00:00:27,120
it, it's not going to tell you the solution.

11917
00:00:27,360 --> 00:00:30,210
Just have a cup of tea or have a nap,

11918
00:00:30,240 --> 00:00:32,850
or just go to sleep and try to tackle it tomorrow.

11919
00:00:33,240 --> 00:00:38,100
You will be surprised just how much easier things are when your brains had some

11920
00:00:38,100 --> 00:00:42,330
downtime and then you come back to it. Everything seems so much more obvious.

11921
00:00:43,110 --> 00:00:47,850
And if you really, really get stuck and you just can't see it, ask a friend,

11922
00:00:48,090 --> 00:00:51,540
not your friend print, but your actual friend,

11923
00:00:51,570 --> 00:00:56,010
a real human. Preferably a developer, but they don't have to be.

11924
00:00:56,040 --> 00:00:58,320
It could be somebody who's taking the course with you.

11925
00:00:58,560 --> 00:01:03,450
You could go onto discord and find other students to help you because after all,

11926
00:01:03,480 --> 00:01:06,150
you're all just leveling up your own programming skills

11927
00:01:06,150 --> 00:01:10,890
right? The really good thing about asking a friend to look through your code is

11928
00:01:11,100 --> 00:01:14,010
they won't make the same assumptions that you've made.

11929
00:01:14,310 --> 00:01:17,310
So they have some fresh eyes that they can look at the code with,

11930
00:01:17,550 --> 00:01:20,910
and it might be incredibly obvious what's actually happening.

11931
00:01:21,270 --> 00:01:23,010
And it's really not embarrassing at all.

11932
00:01:23,280 --> 00:01:25,320
If somebody managed to help you with your code,

11933
00:01:25,830 --> 00:01:30,780
you can offer to help them the next time when they get stuck. And for the person

11934
00:01:30,780 --> 00:01:31,650
who's helping you,

11935
00:01:31,980 --> 00:01:36,390
they're also just working out their programming muscles, right? Now

11936
00:01:36,390 --> 00:01:40,170
the next tip is to run often. No,

11937
00:01:40,200 --> 00:01:43,260
you don't have to go exercising to be a good programmer.

11938
00:01:43,860 --> 00:01:46,740
But what I mean is run your code often.

11939
00:01:47,100 --> 00:01:51,000
Don't wait until you've written loads and loads of code to hit run

11940
00:01:51,000 --> 00:01:54,090
and then find out you've got loads of snags and loads of bugs.

11941
00:01:54,420 --> 00:01:57,330
But run it after every little execution.

11942
00:01:57,750 --> 00:02:02,750
Once you feel like you've changed the program ever so slightly, run it. Confirm

11943
00:02:02,820 --> 00:02:04,770
that it's actually doing what you want it to do,

11944
00:02:05,400 --> 00:02:07,290
because if you leave it all to the end,

11945
00:02:07,380 --> 00:02:11,760
then you end up with a pile of bugs and you don't know where to start. Now,

11946
00:02:11,790 --> 00:02:16,680
if you do end up in that situation and you can see multiple bugs at the same

11947
00:02:16,680 --> 00:02:19,410
time, try to tackle them one at a time

11948
00:02:19,440 --> 00:02:23,280
instead of trying to do bits and bobs of each. It will really, really help.

11949
00:02:24,210 --> 00:02:28,710
And the final tip is, of course, Stack Overflow. I've saved this the last

11950
00:02:28,710 --> 00:02:33,030
because you really don't want to take every single small bug of yours to Stack

11951
00:02:33,030 --> 00:02:36,300
Overflow, that's not what it's designed for. Instead,

11952
00:02:36,330 --> 00:02:41,250
it's really designed as a way of asking other developers

11953
00:02:41,610 --> 00:02:46,610
when you think that you've come across a bug or an issue that should be unique.

11954
00:02:47,370 --> 00:02:51,240
Now, if you think that you issue isn't unique and other people should have

11955
00:02:51,330 --> 00:02:54,240
encountered this, then just search Stack Overflow.

11956
00:02:54,840 --> 00:02:58,410
If you really think that nobody in the world has had this issue that you are

11957
00:02:58,410 --> 00:03:02,890
having right now, then that's the moment to ask the oracle, I mean Stack

11958
00:03:02,890 --> 00:03:03,723
Overflow.

11959
00:03:04,360 --> 00:03:08,290
I've worked in a lot of companies where everybody just goes to the part when

11960
00:03:08,290 --> 00:03:11,980
Stack Overflow is down, because there's just no point. As programmers

11961
00:03:12,010 --> 00:03:17,010
we use it and we search it so much and it's become a really vital tool in the tool

11962
00:03:17,410 --> 00:03:18,243
belt.

11963
00:03:18,400 --> 00:03:23,230
But you only wanna ask a question when you've pretty sure that you've exhausted

11964
00:03:23,320 --> 00:03:28,090
all other avenues of debugging and you've searched all of Stack Overflow and you

11965
00:03:28,090 --> 00:03:32,080
finally end up with something very strange and very weird that you want others

11966
00:03:32,080 --> 00:03:35,680
to help you figure out. So don't worry about creating bugs.

11967
00:03:35,710 --> 00:03:39,190
And hopefully at this point, you're creating friendly bugs,

11968
00:03:39,190 --> 00:03:40,990
like this little Caterpillar right now.

11969
00:03:41,380 --> 00:03:44,260
And as you scale up and become even more advanced,

11970
00:03:44,530 --> 00:03:49,210
you're going to be creating bigger and more scary bugs.

11971
00:03:49,750 --> 00:03:53,110
So at some point in the future, when you're creating bugs like these,

11972
00:03:53,470 --> 00:03:56,260
then you really know that you've become a professional.

11973
00:03:56,620 --> 00:04:00,610
You will wish to come back to today when you can tackle bugs like these 

11974
00:04:00,630 --> 00:04:02,880
instead. So don't worry about

11975
00:04:02,880 --> 00:04:06,450
about creating them. It doesn't mean that you are bad programmer. In fact,

11976
00:04:06,450 --> 00:04:11,400
it's an important part of every programmer's journey. Just as a sort of personal

11977
00:04:11,400 --> 00:04:11,670
note,

11978
00:04:11,670 --> 00:04:15,570
there was a point in time where I've really thought that I was not a programmer of

11979
00:04:15,570 --> 00:04:18,899
code, that I was just a programmer of bugs.

11980
00:04:18,899 --> 00:04:21,810
It seemed like every line of code I wrote was a bug.

11981
00:04:22,530 --> 00:04:25,800
So these are my 10 top tips for debugging.

11982
00:04:26,100 --> 00:04:30,870
And I hope that any time when your code is not doing what you expect it to do to

11983
00:04:30,870 --> 00:04:35,610
come back to this lesson, review these 10 steps, go through them one by one

11984
00:04:36,060 --> 00:04:40,860
and I bet 99% of the time, once you've gone through all of these stages,

11985
00:04:41,130 --> 00:04:45,000
you will have solved your bug and you will have made your code a lot better.

11986
00:04:45,330 --> 00:04:50,330
And remember that every bug that you catch in your code and that you fix is like

11987
00:04:50,580 --> 00:04:53,190
lifting a dumbbell in the gym. It's just one rep.

11988
00:04:53,490 --> 00:04:57,930
And the more reps you do the better you'll get at programing. In the next

11989
00:04:57,930 --> 00:05:01,800
lesson, I've got some coding challenges for you to debug.

11990
00:05:02,340 --> 00:05:05,280
Are you ready to flex your programming muscles?

11991
00:05:05,640 --> 00:05:08,850
I hope so. Head over to the next lesson and get started.


11992
00:00:00,030 --> 00:00:04,800
To begin, go ahead and select the Debug Odd or Even exercise.

11993
00:00:05,490 --> 00:00:07,140
All right. So now that you

11994
00:00:07,140 --> 00:00:11,550
have learned all about the tips and tricks and the steps to go through

11995
00:00:11,550 --> 00:00:12,900
to debug your code,

11996
00:00:13,260 --> 00:00:18,120
it's time to put some of that into action. In the upcoming three lessons,

11997
00:00:18,270 --> 00:00:22,170
I've got a bunch of code that you've already written before.

11998
00:00:22,590 --> 00:00:24,150
The first one, for example,

11999
00:00:24,180 --> 00:00:28,470
is the Odd or Even code challenge that you did a long time ago.

12000
00:00:29,070 --> 00:00:33,690
Now, the important thing is for you to not just go back to the old code,

12001
00:00:33,690 --> 00:00:38,460
copy it, paste it in, submit, done. That isn't going to teach you anything.

12002
00:00:38,670 --> 00:00:42,600
There's no point doing this if you're not going to learn. But instead,

12003
00:00:42,630 --> 00:00:47,580
what I want you to do is to look at the code, see what it meant to do.

12004
00:00:47,610 --> 00:00:49,410
So for example, in this case,

12005
00:00:49,740 --> 00:00:54,740
we're trying to input a number and then we're trying to get our code to check

12006
00:00:54,870 --> 00:00:59,220
to see if it's an odd number or an even number, and then print it out. Now,

12007
00:00:59,250 --> 00:01:03,420
in most of these upcoming code exercises, they're going to be broken,

12008
00:01:03,570 --> 00:01:07,020
but it's your job to try and fix it

12009
00:01:07,080 --> 00:01:10,950
to make sure that it does what it's supposed to. In this case,

12010
00:01:10,980 --> 00:01:13,560
you should be able to type in a number and it should print,

12011
00:01:13,590 --> 00:01:17,820
"This is an even number." if it's even, "This is an odd number." if it's odd.

12012
00:01:18,240 --> 00:01:21,990
Once you've spotted the problem and debugged and fixed your code,

12013
00:01:22,290 --> 00:01:25,860
then I'll go through the solution with you. So pause the video now.

12014
00:01:28,520 --> 00:01:29,353
All right. So,

12015
00:01:29,630 --> 00:01:33,710
as always, let's first hit run to see if it actually works or not.

12016
00:01:34,280 --> 00:01:39,110
And in this case, it doesn't even run. It gives us a syntax error straightaway,

12017
00:01:39,500 --> 00:01:44,450
and it tells us that on line three, we've got some invalid syntax. Now,

12018
00:01:44,510 --> 00:01:47,450
on line three, that's actually not all that specific.

12019
00:01:47,840 --> 00:01:50,210
But notice how sometimes when you get errors,

12020
00:01:50,240 --> 00:01:55,240
it's actually nice enough to have a little arrow pointing towards the bit of the

12021
00:01:55,490 --> 00:01:58,520
code in that line that it thinks is problematic.

12022
00:01:59,150 --> 00:02:01,880
So let's try and fix this error before we proceed.

12023
00:02:02,510 --> 00:02:06,140
So why does it have an issue with this equal sign? Well,

12024
00:02:06,170 --> 00:02:11,170
remember that two equal signs is checking and one equal sign is assignment.

12025
00:02:13,490 --> 00:02:14,323
So in this case,

12026
00:02:14,330 --> 00:02:18,530
we're actually saying number % 2 should be equal to zero,

12027
00:02:18,560 --> 00:02:22,310
which is nonsense. It doesn't actually make any sense. Instead,

12028
00:02:22,340 --> 00:02:26,720
what we wanted was two equal signs so that we can check that the left-hand side

12029
00:02:26,960 --> 00:02:28,910
is equal to the right-hand side.

12030
00:02:29,480 --> 00:02:33,890
And now if we hit run and we enter a number, it should now work.

12031
00:02:34,010 --> 00:02:35,210
Did you manage to get it right?

12032
00:02:35,720 --> 00:02:40,580
If not, be sure to review some of the lessons on debugging and try to apply it in

12033
00:02:40,610 --> 00:02:44,810
the next exercise. So once you're ready, head over to the next lesson.


12034
00:00:00,090 --> 00:00:04,140
All right. So in this lesson, we're going to be debugging our leap year

12035
00:00:04,170 --> 00:00:09,060
coding exercise. You've done this coding exercise before, you wrote this code

12036
00:00:09,120 --> 00:00:12,660
which checks to see if a year is a leap year.

12037
00:00:12,990 --> 00:00:16,290
It prints leap year if it's true, and not leap year

12038
00:00:16,350 --> 00:00:18,000
if it's not a leap year.

12039
00:00:18,600 --> 00:00:21,540
All you have to do is to fix this code.

12040
00:00:22,020 --> 00:00:27,020
So use what you learned about debugging and try to fix this coding exercise.

12041
00:00:27,720 --> 00:00:28,800
So pause the video now.

12042
00:00:29,120 --> 00:00:29,953
Okay.

12043
00:00:32,630 --> 00:00:33,830
All right. So first off,

12044
00:00:33,860 --> 00:00:37,370
let's go ahead and just run our code and see if it works.

12045
00:00:37,760 --> 00:00:40,490
And then we're going to enter a known leap year.

12046
00:00:41,120 --> 00:00:45,080
So a quick Google away lets see when is a leap year.

12047
00:00:45,560 --> 00:00:49,220
Well, 2020 seems to be a leap year. So let's try that.

12048
00:00:49,250 --> 00:00:53,660
Let's check 2020. And we get an error.

12049
00:00:53,780 --> 00:00:58,160
So errors are good. They're much easier to fix than the Programming problems

12050
00:00:58,160 --> 00:00:59,210
which have no errors.

12051
00:00:59,720 --> 00:01:04,720
And it tells us that there's a problem on line three and it's a type error,

12052
00:01:05,390 --> 00:01:09,860
not all arguments converted during string formatting.

12053
00:01:10,250 --> 00:01:14,090
What does that mean? Well, what's a type error anyways?

12054
00:01:14,320 --> 00:01:19,320
A type error is when you're trying to do something with the wrong data type. In

12055
00:01:20,810 --> 00:01:25,190
our case, it's pointing at line three. So if we take a look at line three,

12056
00:01:25,190 --> 00:01:26,150
what's happening here?

12057
00:01:26,870 --> 00:01:31,870
Well, currently we're trying to take the year that the user inputted, so 2020, and

12058
00:01:33,260 --> 00:01:38,260
divide it by four to see if the remainder is equal to zero.

12059
00:01:39,080 --> 00:01:42,380
Now, this is a little bit harder to solve than the previous one.

12060
00:01:42,890 --> 00:01:47,660
But what you should realize is that it's pointing towards a type error,

12061
00:01:48,020 --> 00:01:51,170
so what data types have we got going on? Well,

12062
00:01:51,230 --> 00:01:56,000
if we go ahead and print the type of our year,

12063
00:01:56,750 --> 00:01:59,780
then you can see that it's of class string.

12064
00:02:00,410 --> 00:02:05,000
But if we print the type of this 4 that

12065
00:02:05,000 --> 00:02:08,509
we're trying to divide it by, that is of class int.

12066
00:02:08,780 --> 00:02:12,980
So this is the problem. These two types are not matched.

12067
00:02:13,280 --> 00:02:16,730
So when you try to divide a string by an integer,

12068
00:02:17,120 --> 00:02:19,760
this is what ends up giving you this problem.

12069
00:02:20,330 --> 00:02:24,140
So why is this a string when we entered a number?

12070
00:02:24,650 --> 00:02:29,650
Well it's because the input function, remember, gives the user a prompt and then

12071
00:02:30,620 --> 00:02:35,620
takes whatever they type in the console and turns it into a string.

12072
00:02:36,890 --> 00:02:40,580
So in order to turn this into an int which is what we want,

12073
00:02:41,030 --> 00:02:45,320
we have to wrap it around a set of parentheses and then type

12074
00:02:45,380 --> 00:02:49,850
convert it into an integer. And now when we run it again,

12075
00:02:50,120 --> 00:02:54,860
we can see that it actually works. And we're happy that we fixed our code.

12076
00:02:55,580 --> 00:02:57,110
Once you're done with this challenge,

12077
00:02:57,260 --> 00:03:00,860
head over to the next one and complete the final debugging exercise.


12078
00:00:00,060 --> 00:00:02,880
So we're onto our final debugging exercise.

12079
00:00:02,969 --> 00:00:07,530
This is debugging Fizzbuzz. Fizzbuzz, if you remember,

12080
00:00:07,530 --> 00:00:10,680
is a program that will print Fzzbuzz

12081
00:00:11,100 --> 00:00:15,690
if a number is divisible by both three and five.

12082
00:00:16,110 --> 00:00:17,370
It will print fizz

12083
00:00:17,400 --> 00:00:21,120
if it's only divisible by three, and it will print buzz

12084
00:00:21,180 --> 00:00:23,160
if it's only divisible by five.

12085
00:00:23,550 --> 00:00:26,640
If it's not divisible by three or five,

12086
00:00:26,970 --> 00:00:29,550
then it's just going to print the number.

12087
00:00:30,150 --> 00:00:34,950
And our code is going to do this all the way from 1 to 100.

12088
00:00:35,430 --> 00:00:40,230
So what should happen by the end of this is in our console when we hit run,

12089
00:00:40,590 --> 00:00:45,590
it should start typing one and then it should type two and then three,

12090
00:00:45,720 --> 00:00:49,710
it will type fizz. And four, it will type four. Five,

12091
00:00:49,710 --> 00:00:51,810
it will type buzz and so on and so forth.

12092
00:00:52,140 --> 00:00:55,590
You should remember this from the previous exercise where you actually had to

12093
00:00:55,590 --> 00:00:58,830
write all this code. Now, as always,

12094
00:00:59,040 --> 00:01:03,060
don't just paste the solution code in. That won't do anything.

12095
00:01:03,330 --> 00:01:05,550
You need to work for it to gain knowledge.

12096
00:01:06,120 --> 00:01:09,270
So now that you know what the program is supposed to do,

12097
00:01:09,930 --> 00:01:14,640
what you are going to do is try to figure out all of the bugs in here and try to

12098
00:01:14,670 --> 00:01:19,230
fix all the bugs so that the program runs as it should do.

12099
00:01:20,220 --> 00:01:24,690
Pause the video, think about the 10 steps and try to apply it here.

12100
00:01:25,140 --> 00:01:28,620
Now, just as a quick note, unlike the previous debugging exercises,

12101
00:01:28,860 --> 00:01:32,640
there's more than one bug in this code. So, good luck

12102
00:01:32,760 --> 00:01:34,020
and I'll see you on the other side.

12103
00:01:38,120 --> 00:01:38,630
All right.

12104
00:01:38,630 --> 00:01:39,800
So, as I mentioned,

12105
00:01:39,860 --> 00:01:43,490
there's quite a few bugs in here and we're going to fix them one by one.

12106
00:01:44,090 --> 00:01:44,630
As always,

12107
00:01:44,630 --> 00:01:48,410
the first thing we're gonna do is we're just gonna run the code and see what

12108
00:01:48,410 --> 00:01:49,243
happens.

12109
00:01:49,430 --> 00:01:53,810
So the first thing you'll notice that's a little bit odd is it's printing

12110
00:01:53,840 --> 00:01:56,240
instead of just one, two, three, four,

12111
00:01:56,600 --> 00:02:00,260
it's printing it as if it's a list with the square bracket around it.

12112
00:02:00,710 --> 00:02:04,730
So let's see if we can identify why. Well in our code,

12113
00:02:04,940 --> 00:02:09,320
if none of these if statements are true, then it prints the number.

12114
00:02:09,680 --> 00:02:11,690
But in this case it's not just the number.

12115
00:02:12,110 --> 00:02:14,900
There seems to be some square brackets around the number,

12116
00:02:15,230 --> 00:02:20,230
in which case it's printing a list with that number as the single item inside.

12117
00:02:21,710 --> 00:02:24,380
So let's get rid of that and let's run our code again.

12118
00:02:24,440 --> 00:02:29,330
That looks a little bit better, a bit cleaner. Now let's take a look at the code.

12119
00:02:29,780 --> 00:02:34,100
So we know that when the number is only divisible by three then it should print

12120
00:02:34,130 --> 00:02:34,963
fizz,

12121
00:02:35,240 --> 00:02:40,240
but three, in this case, is actually printing Fizzbuzz, and five is printing Fizzbuzz

12122
00:02:41,960 --> 00:02:46,580
and then three and four, it seems a bit of a mumbo-jumbo.

12123
00:02:47,300 --> 00:02:49,130
So, what's actually happening here?

12124
00:02:50,060 --> 00:02:53,210
It seems like instead of just printing fizz,

12125
00:02:53,480 --> 00:02:56,000
it's printing Fizzbuzz and the number.

12126
00:02:56,210 --> 00:02:59,180
So there must be a problem in our checking code.

12127
00:02:59,830 --> 00:03:04,780
So let's think about what our code needs to do. When the number is divisible by

12128
00:03:04,870 --> 00:03:09,400
both three and five, then instead of the number, it should print Fizzbuzz.

12129
00:03:09,760 --> 00:03:12,700
So Fizzbuzz should only be printed

12130
00:03:13,120 --> 00:03:18,120
if the number that we're currently checking is divisible by both three and five.

12131
00:03:19,630 --> 00:03:21,610
Let's use the print statement to help us.

12132
00:03:22,240 --> 00:03:27,240
If we use an f-string and we say that we are currently on number and then we

12133
00:03:30,670 --> 00:03:33,730
put the number in here. This way

12134
00:03:33,730 --> 00:03:36,820
we'll actually print out the current number we're looping through

12135
00:03:37,120 --> 00:03:40,810
and then we can see what's being printed each time. So let's run the code.

12136
00:03:41,320 --> 00:03:45,910
And if we scroll to the top, currently on number one it prints one,

12137
00:03:45,940 --> 00:03:49,270
currently on number two it prints two, currently on number three

12138
00:03:49,270 --> 00:03:53,980
it prints Fizzbuzz, Fizz and three. So that is very,

12139
00:03:53,980 --> 00:03:55,510
very strange behavior indeed.

12140
00:03:55,510 --> 00:04:00,510
It seems like lots of things are true in our if statement. What's happening? Well,

12141
00:04:03,610 --> 00:04:05,800
if number is equal to three,

12142
00:04:06,460 --> 00:04:09,220
then it seems to be printing Fizzbuzz,

12143
00:04:09,580 --> 00:04:14,410
which means if we walk backwards, this if statement must have been true.

12144
00:04:14,950 --> 00:04:18,820
Now three divided by three should have zero as the remainder,

12145
00:04:18,820 --> 00:04:22,720
so this should be true. But this can't be true,

12146
00:04:22,720 --> 00:04:27,720
so this must be false. And it should only print Fizzbuzz if it's divisible by

12147
00:04:28,990 --> 00:04:32,590
both three and five. So instead of an or,

12148
00:04:32,890 --> 00:04:34,570
this really needs to be an 'and'.

12149
00:04:34,900 --> 00:04:39,850
So let's hit run again and see what happens this time. Currently on number three,

12150
00:04:39,850 --> 00:04:44,050
it prints Fizz and three. So that's again,

12151
00:04:44,080 --> 00:04:47,920
a bit of a problem. So we fixed the Fizzbuzz parts.

12152
00:04:48,100 --> 00:04:51,430
It is now printing Fizzbuzz correctly. Namely,

12153
00:04:51,460 --> 00:04:56,290
when it's on number 15. But why is it still printing the number?

12154
00:04:57,190 --> 00:05:02,190
The number should only be printed if none of the others are true.

12155
00:05:03,970 --> 00:05:08,970
But instead, it seems to be printing Fizz and then also printing the number.

12156
00:05:10,540 --> 00:05:12,910
What's the reason here? Well,

12157
00:05:12,940 --> 00:05:17,800
notice how we've got an else statement here that triggers the printing of the

12158
00:05:17,800 --> 00:05:22,570
number. Now, an else is paired with an if. So in this case,

12159
00:05:22,570 --> 00:05:27,190
what's happening is it's checking if the number is not divisible by five,

12160
00:05:27,520 --> 00:05:31,780
then print the number. That's not what we want. And in fact,

12161
00:05:31,900 --> 00:05:33,460
if you look at the print statements,

12162
00:05:33,700 --> 00:05:37,870
you can see that only when the number is divisible by five

12163
00:05:38,140 --> 00:05:41,590
does it not print the number. When it's divisible by three,

12164
00:05:41,860 --> 00:05:45,700
it's still printing the number. This is not what we want.

12165
00:05:45,730 --> 00:05:50,650
What we want is for this to be checked, and if that's not true,

12166
00:05:50,950 --> 00:05:54,610
then check the next thing. And if that is not true, then the next thing.

12167
00:05:54,910 --> 00:05:59,300
And finally, if all three of these are not true, then print the number.

12168
00:06:00,080 --> 00:06:05,080
So what we actually need instead of a whole bunch of ifs is actually some else

12169
00:06:05,810 --> 00:06:06,560
ifs.

12170
00:06:06,560 --> 00:06:11,560
So let's replace those two ifs with some elifs and now let's run our code.

12171
00:06:13,570 --> 00:06:17,620
So currently on number one, two, three,

12172
00:06:17,680 --> 00:06:22,600
so three now prints Fizz, five prints Buzz, nine prints

12173
00:06:22,600 --> 00:06:26,770
Fizz, 10 prints Buzz and 15 prints Fizzbuzz.

12174
00:06:27,130 --> 00:06:30,550
So I think we've actually managed to fix all of our code.

12175
00:06:30,910 --> 00:06:33,880
So I think we should be able to remove our print statement now.

12176
00:06:34,300 --> 00:06:39,300
And indeed we've managed to successfully solve all of the debugging problems

12177
00:06:39,550 --> 00:06:43,090
here. Now did you manage to get all that right? Don't worry

12178
00:06:43,090 --> 00:06:45,700
if you have to struggle a little bit. In the future,

12179
00:06:45,730 --> 00:06:49,540
you're going to be making a lot more bugs and you're going to be repeating this

12180
00:06:49,540 --> 00:06:52,060
process of using the 10 steps

12181
00:06:52,270 --> 00:06:57,270
to try and identify the problems and fix the code and make it free of bugs.

12182
00:06:58,330 --> 00:07:00,970
So hope you had a fun and jam packed day.

12183
00:07:01,390 --> 00:07:05,710
Now this might be a good time to revisit some code that you've given up on a

12184
00:07:05,710 --> 00:07:08,650
long time ago or projects that you've started

12185
00:07:08,680 --> 00:07:12,700
but you've stopped because you ran into bugs. And then review them,

12186
00:07:12,760 --> 00:07:17,760
use what you learned today and try to fix the bugs and get your code working.

12187
00:07:18,790 --> 00:07:21,790
Now tomorrow, I've got a big day for you coming up.

12188
00:07:22,090 --> 00:07:26,500
We're going to spend the whole day creating a big project and we're going to be

12189
00:07:26,500 --> 00:07:29,950
making the Higher-Lower game. So I'm looking forward to it,

12190
00:07:30,220 --> 00:07:33,730
I hope you are too. So get a good night's rest and I'll see you tomorrow.



12191
00:00:00,030 --> 00:00:04,800
Hey guys, welcome to Day 14 of 100 Days of Code. Today

12192
00:00:04,800 --> 00:00:09,450
you are going to spend building an exciting game called Higher or Lower.

12193
00:00:10,020 --> 00:00:12,660
And if you want to have a go at it, just go over to higher

12194
00:00:12,660 --> 00:00:15,540
lowergame.com and click on classic.

12195
00:00:16,110 --> 00:00:20,910
So the classic version of higher lower is you compare one search term,

12196
00:00:20,940 --> 00:00:22,230
The Grand Budapest hotel

12197
00:00:22,230 --> 00:00:26,010
which is a movie, against another search term AFL,

12198
00:00:26,040 --> 00:00:27,690
which is the American Football League.

12199
00:00:28,260 --> 00:00:33,210
And you have to say if the second one has higher or lower searches

12200
00:00:33,480 --> 00:00:37,050
than the Grand Budapest hotel. So I think this probably has higher.

12201
00:00:37,740 --> 00:00:42,480
And indeed I'm right. And then now it gives you a new term to compare.

12202
00:00:42,990 --> 00:00:47,100
So Six Nations Rugby versus AFL who has lower.

12203
00:00:47,430 --> 00:00:50,250
I think this probably has lower and I'm right.

12204
00:00:50,610 --> 00:00:53,490
And you keep going until you get it wrong.

12205
00:00:53,670 --> 00:00:57,750
And it's a weirdly addictive game for some reason. Okay.

12206
00:00:57,750 --> 00:01:02,460
So now I've gotten it wrong and it tells me how many I got right as my score

12207
00:01:02,820 --> 00:01:07,230
and I can play again if I wish to. Have a play around with that game

12208
00:01:07,260 --> 00:01:10,740
because the final version we have looks a lot simpler,

12209
00:01:10,890 --> 00:01:13,050
but it's still just as fun to play.

12210
00:01:13,680 --> 00:01:17,520
Instead of comparing average monthly searches on Google,

12211
00:01:17,730 --> 00:01:21,300
we're comparing who has more followers on Instagram.

12212
00:01:21,750 --> 00:01:26,130
So we're bringing this game up to date. In this case, it's comparing Neymar,

12213
00:01:26,190 --> 00:01:30,210
a footballer from Brazil against Chloe Kardashian, a reality TV

12214
00:01:30,240 --> 00:01:34,530
personality and businesswoman from the US who has more followers.

12215
00:01:34,770 --> 00:01:39,300
So I think it's 'B', I could be wrong and I'm wrong.

12216
00:01:42,740 --> 00:01:43,880
So here we're comparing

12217
00:01:44,150 --> 00:01:49,070
Rihanna a musician and businesswoman from Barbados against Shakira

12218
00:01:49,100 --> 00:01:50,480
a musician from Columbia.

12219
00:01:50,810 --> 00:01:54,800
So I'm going to guess probably Rihanna and I get it right,

12220
00:01:54,800 --> 00:01:59,800
so I get to score one point. And this game continues on and on until you get to

12221
00:02:01,970 --> 00:02:05,600
the point where you get it wrong, same as the one that you saw before.

12222
00:02:06,980 --> 00:02:10,220
And there we go. So I got three as my final score,

12223
00:02:10,639 --> 00:02:12,830
and that's the end of the game.

12224
00:02:13,340 --> 00:02:18,260
The aim of the game is to try and stay alive for as long as possible and score

12225
00:02:18,290 --> 00:02:23,290
as high as possible by thinking about who might be more popular than the other.

12226
00:02:23,930 --> 00:02:25,670
Now here comes the interesting part.

12227
00:02:25,910 --> 00:02:29,690
You are going to be coding up this game entirely by yourself.

12228
00:02:30,320 --> 00:02:35,320
You're going to apply everything you've learned so far to understand how this

12229
00:02:35,510 --> 00:02:37,970
game works by playing it quite a few times,

12230
00:02:38,240 --> 00:02:42,770
going to this URL and looking at all the specific nuances;

12231
00:02:42,770 --> 00:02:45,920
what happens if you get it wrong, what happens if you get it right,

12232
00:02:46,490 --> 00:02:49,520
and you're gonna write the code all yourself,

12233
00:02:49,970 --> 00:02:54,320
and you're probably going to need your skills of debugging to fix some problems

12234
00:02:54,350 --> 00:02:55,730
as you go along as well.

12235
00:02:56,360 --> 00:03:01,270
So the approach I want you to take is first think about the problem and then

12236
00:03:01,330 --> 00:03:05,080
break down a large problem into smaller problems.

12237
00:03:05,560 --> 00:03:09,940
This way you can tackle them one by one, and it won't be so intimidating.

12238
00:03:10,480 --> 00:03:14,830
Now, step 2 is to look at those problems and make a

12239
00:03:14,830 --> 00:03:17,950
to-do list. Given the items on the to-do list,

12240
00:03:18,310 --> 00:03:22,240
you're going to pick the one that you think is the easiest to begin.

12241
00:03:22,930 --> 00:03:26,860
Let's say that, uhm, maybe generating a random number.

12242
00:03:26,890 --> 00:03:30,100
That's pretty simple, right? Well, in this to-do list,

12243
00:03:30,130 --> 00:03:33,190
that's the first one we're going to tackle. So in this case,

12244
00:03:33,190 --> 00:03:36,040
we're building a very simple dice game, right?

12245
00:03:36,160 --> 00:03:38,770
The game that you were going to be building is a lot more complex,

12246
00:03:38,770 --> 00:03:41,560
it won't just have three to-dos. But the idea is the same.

12247
00:03:41,770 --> 00:03:46,720
Once you pick the task that you think is the easiest, generating a random number,

12248
00:03:47,110 --> 00:03:48,880
then you gotta take that problem

12249
00:03:49,030 --> 00:03:52,450
and you're going to break it down into comments in your code.

12250
00:03:52,900 --> 00:03:56,740
So just as you've seen me do it for our previous project,

12251
00:03:57,010 --> 00:03:58,300
you are going to do the same thing.

12252
00:03:58,390 --> 00:04:02,320
You're going to take that problem of generating a random number and then split

12253
00:04:02,320 --> 00:04:04,660
it into different pieces, right?

12254
00:04:04,690 --> 00:04:08,440
First, you probably have to import the random module and then you probably have

12255
00:04:08,440 --> 00:04:11,260
to use a function like randint to generate

12256
00:04:11,290 --> 00:04:16,290
a random integer. So now that you've taken a big problem and broken it apart into

12257
00:04:16,870 --> 00:04:20,380
smaller problems, taking the easier smaller problem

12258
00:04:20,649 --> 00:04:23,110
and break it down into comments in your code,

12259
00:04:23,440 --> 00:04:25,690
then you are ready to start writing some code.

12260
00:04:26,500 --> 00:04:30,820
So write code beneath the comments, run your code,

12261
00:04:31,120 --> 00:04:35,110
make sure that it does what you want it to do. And if it doesn't, then fix the code.

12262
00:04:35,530 --> 00:04:37,930
And once you've done that, then it's back to the beginning,

12263
00:04:37,960 --> 00:04:41,140
write more code under the comments, run more code,

12264
00:04:41,170 --> 00:04:45,880
fix more code until you've managed to cross out that task.

12265
00:04:46,330 --> 00:04:50,140
And then its a case of tackling the next one that you think you can attempt.

12266
00:04:50,530 --> 00:04:54,700
So this is the real skill of programmers; taking something that's immensely

12267
00:04:54,700 --> 00:04:58,090
complex and difficult, breaking it down into smaller problems,

12268
00:04:58,390 --> 00:04:59,710
breaking it down further,

12269
00:04:59,740 --> 00:05:04,000
and then tackling them from the easiest to the hardest and doing this one by

12270
00:05:04,000 --> 00:05:08,170
one. Eventually by the end, you end up with your final product.

12271
00:05:08,650 --> 00:05:10,330
This is what I want you to do.

12272
00:05:10,900 --> 00:05:14,620
So the first thing you have to do is the head over to the final version of the

12273
00:05:14,620 --> 00:05:15,400
game,

12274
00:05:15,400 --> 00:05:20,400
play it at least 10 times just so you understand exactly how it works and then

12275
00:05:21,100 --> 00:05:25,960
pull up the starting code for the day, which is the higher-lower-start,

12276
00:05:26,560 --> 00:05:29,410
and go ahead and fork your own copy of it.

12277
00:05:30,280 --> 00:05:35,280
Now you'll notice that there's three files in the starting code. One is the art

12278
00:05:35,860 --> 00:05:40,860
.py that contains the logo and the versus symbol that shows up when it asks you

12279
00:05:41,950 --> 00:05:42,880
to compare.

12280
00:05:43,810 --> 00:05:48,040
So compare A, Christiano Ronaldo versus B, Vin Diesel.

12281
00:05:48,640 --> 00:05:51,640
And these are the art that you're going to display. And finally,

12282
00:05:51,910 --> 00:05:56,770
and probably most importantly, there is a file called game data. Now game data

12283
00:05:56,800 --> 00:05:59,180
only a single variable.

12284
00:05:59,600 --> 00:06:03,410
It's a list of dictionary entries.

12285
00:06:03,890 --> 00:06:08,720
Each of these dictionaries have four keys and the keys are the same for

12286
00:06:08,720 --> 00:06:12,920
all of the entries. They've got a name, the name of the account,

12287
00:06:13,190 --> 00:06:14,300
the follower count,

12288
00:06:14,300 --> 00:06:18,530
so how many followers in millions does that account have.

12289
00:06:18,710 --> 00:06:23,690
So for example, Christiano Ronaldo has 215 million followers,

12290
00:06:23,900 --> 00:06:28,490
at least at the time when I compiled the data. And then it has a description,

12291
00:06:28,580 --> 00:06:31,850
he's a footballer or this is a social media platform,

12292
00:06:32,120 --> 00:06:35,960
she's a musician and actress. And finally the country that they're from.

12293
00:06:36,230 --> 00:06:41,230
You're going to use all of these pieces of information to construct a comparison

12294
00:06:41,750 --> 00:06:44,610
line like this, compare A: Cristiano Ronaldo

12295
00:06:44,610 --> 00:06:46,850
a football from Portugal. We have B.

12296
00:06:47,360 --> 00:06:52,360
And you're going to ask the user to guess who has more followers. And if they get

12297
00:06:53,510 --> 00:06:58,280
it right, they get to keep playing, where A now becomes the previous B,

12298
00:06:58,760 --> 00:07:02,960
so Vin Diesel who you used to be B now becomes A,

12299
00:07:03,470 --> 00:07:08,470
and then you get to compare against a new person and it keeps on going until they

12300
00:07:09,710 --> 00:07:13,340
get it wrong. That is the task ahead of you

12301
00:07:13,670 --> 00:07:16,940
and it's not going to be easy, but I think you can do it.

12302
00:07:17,330 --> 00:07:21,530
So give this project at least an hour. You'll need to write the code,

12303
00:07:21,530 --> 00:07:23,840
you will need to fix problems, you'll need to debug,

12304
00:07:24,080 --> 00:07:27,560
you will need to test it quite a few times. But by the end of it,

12305
00:07:27,620 --> 00:07:30,110
you will emerge a stronger programmer

12306
00:07:30,140 --> 00:07:35,140
I promise. So good luck and make sure you have lots of struggle and I'll see you

12307
00:07:35,720 --> 00:07:36,560
on the other side.


12308
00:00:00,690 --> 00:00:07,080
All right, so I really hope you've given this challenge a good go and you've spent at least an hour

12309
00:00:07,080 --> 00:00:14,460
toiling over it and struggling, and you should be wiping sweat off your brows before you come and look

12310
00:00:14,460 --> 00:00:15,440
at the solution.

12311
00:00:16,110 --> 00:00:19,530
The struggle is so important and I can't stress it enough.

12312
00:00:20,130 --> 00:00:24,230
But in this lesson, I want to run through how I would tackle this problem.

12313
00:00:24,690 --> 00:00:27,430
Now, it doesn't mean that you have to do the same thing.

12314
00:00:27,450 --> 00:00:28,850
There isn't one solution.

12315
00:00:28,860 --> 00:00:32,549
There's probably thousands of different solutions for a project like this.

12316
00:00:32,700 --> 00:00:37,380
And as long as your program runs exactly the same way, then you've succeeded.

12317
00:00:37,710 --> 00:00:40,920
It doesn't matter at this stage how you've done it necessarily.

12318
00:00:41,160 --> 00:00:46,380
As long as you manage to organize your thoughts, break down the problem and write the solution code

12319
00:00:46,380 --> 00:00:49,450
and get it to run, then you are victorious.

12320
00:00:50,130 --> 00:00:57,750
The real challenge in today's project was for you to break down a big problem into smaller, solvable

12321
00:00:57,750 --> 00:00:58,180
chunks.

12322
00:00:58,500 --> 00:01:01,040
It isn't even so much the code that matters.

12323
00:01:01,500 --> 00:01:05,750
It's this skill that you really need to develop to become a really good programmer.

12324
00:01:06,420 --> 00:01:12,480
And so far I've been breaking down the problem for you, showing you the steps that would take you to

12325
00:01:12,480 --> 00:01:13,320
the solution.

12326
00:01:13,740 --> 00:01:18,120
But now you're really wearing the big-programmer pants and you're doing it all by yourself.

12327
00:01:18,900 --> 00:01:22,820
So let's think about this problem and how we would break it down.

12328
00:01:23,310 --> 00:01:25,270
There's some easy problems here, right?

12329
00:01:25,290 --> 00:01:26,960
We need the art to display.

12330
00:01:27,180 --> 00:01:30,200
So let's add a comment for each problem we identify.

12331
00:01:30,690 --> 00:01:35,480
We've got the ASCII art showing up here and we've got the versus showing up here.

12332
00:01:36,270 --> 00:01:43,260
Now, the next one is we've got these randomly generated accounts right from the data.

12333
00:01:43,260 --> 00:01:46,110
So we've got Camila  Cabello and Emma Watson.

12334
00:01:46,740 --> 00:01:49,240
How do we get these random accounts to show up?

12335
00:01:49,290 --> 00:01:50,930
That's another problem, right?

12336
00:01:51,450 --> 00:01:58,290
So we know that we've got all of this game data here in the format of a dictionary that's nested inside

12337
00:01:58,290 --> 00:01:58,800
a list.

12338
00:01:59,250 --> 00:02:04,140
And we need to figure out a way of pulling out a random account from this list.

12339
00:02:04,540 --> 00:02:06,910
So that's another problem I've identified.

12340
00:02:07,560 --> 00:02:13,470
Now, the next thing you'll notice is that the data contains many key value pairs, the name of the

12341
00:02:13,470 --> 00:02:20,490
account, the description, etc. But when we display it, it's all nicely formatted; the name and then

12342
00:02:20,490 --> 00:02:26,410
what they do and then where they're from. We'll have to add that as probably another problem to solve.

12343
00:02:26,430 --> 00:02:33,210
How do we format the account data into a printable format?

12344
00:02:33,660 --> 00:02:39,900
OK, so let's say we solve that and we've got A and B, now we have to ask the user for a guess.

12345
00:02:39,960 --> 00:02:41,510
Guess who has more followers.

12346
00:02:41,700 --> 00:02:43,730
So that's another problem to solve.

12347
00:02:44,730 --> 00:02:52,950
And when they do type an answer, let's say we think maybe A has more followers, then it's going to

12348
00:02:52,950 --> 00:02:56,960
have to check that answer and see if it's correct or if it's wrong.

12349
00:02:57,630 --> 00:02:59,640
So that's going to be a big problem.

12350
00:02:59,640 --> 00:03:05,160
Check if user is correct, because that's going to require a couple of things,

12351
00:03:05,160 --> 00:03:05,450
right?

12352
00:03:05,460 --> 00:03:11,650
We're going to probably have to break down this problem into smaller problems if we want to solve it.

12353
00:03:12,240 --> 00:03:19,230
So, for example, we probably need to figure out the follower count of each account, and then we'll

12354
00:03:19,230 --> 00:03:25,560
probably need to use an if statement to check if user is correct.

12355
00:03:26,490 --> 00:03:31,860
Now, if we get it right or if we get it wrong, the game is always going to give us some feedback.

12356
00:03:31,890 --> 00:03:35,290
"Sorry, that's wrong" or "You're right."

12357
00:03:36,390 --> 00:03:39,690
So let's add to our problem list. Now, 

12358
00:03:39,690 --> 00:03:44,430
in addition to giving them feedback whether if they got it right or whether if they got it wrong, it

12359
00:03:44,430 --> 00:03:46,590
also has a way of tracking score,

12360
00:03:46,590 --> 00:03:46,970
right?

12361
00:03:46,980 --> 00:03:50,220
Every time they get the answer right, the score goes up by one.

12362
00:03:50,880 --> 00:03:55,930
In addition to all of that, the game repeats itself when the user gets it right.

12363
00:03:56,490 --> 00:04:03,560
So let's say in this case, I guess Dwayne Johnson, then you see how the game repeats itself, right?

12364
00:04:03,570 --> 00:04:10,560
It goes back and it takes Dwayne Johnson puts it in position A and generates a new account in position

12365
00:04:10,560 --> 00:04:12,570
B for me to go again.

12366
00:04:12,960 --> 00:04:15,240
So I get another round because I got it right.

12367
00:04:16,050 --> 00:04:18,420
So we'll need to address that in our code as well.

12368
00:04:18,899 --> 00:04:23,850
Have some sort of way of make the game repeatable.

12369
00:04:25,830 --> 00:04:33,450
And it's not just repeatable, actually, because we also have to move the previous B up to the A position

12370
00:04:33,450 --> 00:04:35,640
if they do get it right for the next round.

12371
00:04:36,150 --> 00:04:40,920
So I think Khloe Kardashian maybe has less.

12372
00:04:42,320 --> 00:04:47,340
Oh. So let's say, I guess Dwayne Johnson again in this case.

12373
00:04:47,630 --> 00:04:54,110
Now, if I get it right, Taylor Swift, who used to be at position B now gets moved to position A,

12374
00:04:54,140 --> 00:04:55,310
ready for the next round.

12375
00:04:55,820 --> 00:04:58,540
So this is another problem we have to tackle.

12376
00:04:59,180 --> 00:05:06,980
So not only does the game have to be repeatable, we also have to have some sort of way of making the

12377
00:05:06,980 --> 00:05:13,580
accounts at Position B become the next account at position A.

12378
00:05:14,210 --> 00:05:21,350
And finally, notice that in between the rounds, if I get it right or if I get it wrong, the whole

12379
00:05:21,350 --> 00:05:27,560
game actually clears the previous progress other than letting me know that I got it right and my current

12380
00:05:27,560 --> 00:05:28,010
score

12381
00:05:28,520 --> 00:05:30,470
and it displays everything afresh.

12382
00:05:30,470 --> 00:05:33,690
It doesn't clutter up the screen and I have to scroll down.

12383
00:05:34,040 --> 00:05:37,100
So that's probably the last problem we'll need to tackle.

12384
00:05:37,100 --> 00:05:38,480
So clear the screen.

12385
00:05:39,810 --> 00:05:47,520
That's it, I think for now. I've broken down this large problem, which is build this game, into a bunch

12386
00:05:47,520 --> 00:05:52,950
of smaller problems and as we code along, we're probably going to break them down even further.

12387
00:05:53,640 --> 00:05:59,760
This really was the key skill that I wanted to test you on, being able to take a big project, turn

12388
00:05:59,760 --> 00:06:02,830
it into smaller problems, and then tackle them one by one.

12389
00:06:03,000 --> 00:06:07,740
So if you manage to get this far and you've managed to identify all the problems that you need to solve,

12390
00:06:07,920 --> 00:06:10,320
you're ready should consider yourself successful.

12391
00:06:10,950 --> 00:06:16,050
Now, the next stage, we're going to try and tackle each of these one by one and be able to create

12392
00:06:16,050 --> 00:06:17,370
the final version of the game.

12393
00:06:19,110 --> 00:06:24,390
Let's get started. Now, the first thing is probably the easiest, so I'm going to start from there and

12394
00:06:24,390 --> 00:06:29,580
I'm actually going to go in the order that I've written the problems rather than picking them off from

12395
00:06:29,580 --> 00:06:30,180
the easiest.

12396
00:06:30,360 --> 00:06:34,230
I think this just makes it easier for you to understand what's going on when I'm writing the code.

12397
00:06:34,620 --> 00:06:39,780
But in your case, you can pick off the problems in whichever order you want as long as the final version

12398
00:06:39,780 --> 00:06:45,930
works as you expect it to. To display the art which is going to be the logo to begin with,

12399
00:06:46,120 --> 00:06:52,730
I'm going to have to import that art file. And I'm going to use the from art import logo.

12400
00:06:53,100 --> 00:06:59,460
This way, I don't have to write art.logo every time I want to use it. Now I can simply just write print

12401
00:06:59,460 --> 00:07:00,110
logo.

12402
00:07:00,780 --> 00:07:02,820
So that's the first one tackled.

12403
00:07:03,030 --> 00:07:03,920
That was pretty easy.

12404
00:07:04,290 --> 00:07:05,940
Some of them are going to be a lot harder than that.

12405
00:07:06,720 --> 00:07:10,110
The next one is to generate a random account from the game data.

12406
00:07:10,110 --> 00:07:16,440
And remember, the game data is here in a separate file and the data is held inside a variable called

12407
00:07:16,470 --> 00:07:16,950
data.

12408
00:07:17,910 --> 00:07:26,100
So let's go to the top and let's do the same thing. So from game_data import data. And now we can

12409
00:07:26,100 --> 00:07:28,950
use that data to generate a random account.

12410
00:07:30,300 --> 00:07:36,180
In order to generate a random item from that list, we have to use the random module,

12411
00:07:36,180 --> 00:07:45,030
so I'm going to import the random module. And I can use that random module to tap into the choice function

12412
00:07:45,420 --> 00:07:48,250
and pass in my data, which is a list.

12413
00:07:48,630 --> 00:07:54,780
So this function is going to take this list and then find a random entry in there which will give

12414
00:07:54,780 --> 00:07:55,800
me a random account.

12415
00:07:56,340 --> 00:08:06,540
Let's call this account maybe account A and set that equal to the output from this random choice function.

12416
00:08:07,020 --> 00:08:13,770
Now, I'm probably going to need more than one random account because I need to compare A against B.

12417
00:08:14,550 --> 00:08:16,580
By calling random choice on data

12418
00:08:16,590 --> 00:08:20,490
again, I make sure that I get a different random account.

12419
00:08:21,510 --> 00:08:27,660
So at this point, we've got account A and account B, which hopefully are different from each other.

12420
00:08:27,990 --> 00:08:31,710
But if you wanted to, you could in fact check and just make sure.

12421
00:08:31,770 --> 00:08:38,940
So if account A equals account B, then in this case you make sure that account B is regenerated.

12422
00:08:40,860 --> 00:08:47,160
Often, as you're coding along, tackling the problems, smaller problems arise and you start thinking

12423
00:08:47,160 --> 00:08:51,210
about what could happen and you start addressing that with code as well.

12424
00:08:52,230 --> 00:08:57,900
So I think we're now done with this second problem and we're ready to move on to the next one.

12425
00:08:58,560 --> 00:09:02,370
Let's format the account data so that we can print it out in this format.

12426
00:09:02,550 --> 00:09:07,330
So the account name and then A and then whatever it is that they do,

12427
00:09:07,890 --> 00:09:09,930
and finally from and where they're from.

12428
00:09:10,950 --> 00:09:16,350
So we know that the data of each of these accounts is basically a dictionary.

12429
00:09:16,830 --> 00:09:23,340
And we know that we access dictionaries using the key-value pair. So we could, for example, access

12430
00:09:23,340 --> 00:09:24,450
the account name

12431
00:09:26,290 --> 00:09:33,580
by tapping into the random account, let's say, account A, and then we use that square brackets and

12432
00:09:33,580 --> 00:09:37,940
then we put in the key in here, which let me just check, is the name.

12433
00:09:38,470 --> 00:09:40,060
So let's put that right here.

12434
00:09:40,390 --> 00:09:47,230
And this will go into that dictionary and pull out the value under the key name and save it to this

12435
00:09:47,230 --> 00:09:47,740
variable.

12436
00:09:48,490 --> 00:09:51,820
And we can do the same thing for the other two pieces of data we need.

12437
00:09:52,480 --> 00:09:58,330
And just make sure that you don't have any typos in your keys here, because remember, they need to

12438
00:09:58,330 --> 00:10:02,560
match these precisely in order for it to not error out.

12439
00:10:04,230 --> 00:10:11,250
Now that we've got all of these pieces of data, we can now print the final version. So we're probably

12440
00:10:11,250 --> 00:10:16,380
going to use an fstring to insert all of these pieces of information, and we'll probably start off

12441
00:10:16,380 --> 00:10:27,480
with the account_name and then a comma. We can write a and then put in the account_desc, and finally

12442
00:10:27,480 --> 00:10:30,240
put from and the account_country.

12443
00:10:32,870 --> 00:10:34,110
That's pretty much it.

12444
00:10:34,670 --> 00:10:41,720
But notice how I've done this just for account A and I actually have to do it for both Account A and

12445
00:10:41,720 --> 00:10:48,050
account B. So instead of repeating all of this code, it might be a lot easier if I actually pulled

12446
00:10:48,050 --> 00:10:50,380
this out into a separate function.

12447
00:10:50,780 --> 00:10:52,180
So let's create that here.

12448
00:10:52,970 --> 00:10:54,890
Let's create a function that does this.

12449
00:10:55,640 --> 00:11:02,150
I'm going to turn this into a docstring to explain the function, and I'm going to call the function

12450
00:11:02,150 --> 00:11:06,380
format_data and it's going to take an input which is the account.

12451
00:11:07,540 --> 00:11:16,060
And now using this account, we can make this more reusable by deleting the _a part of it.

12452
00:11:19,930 --> 00:11:26,320
And of course, we need to indent everything over so that it's actually within this function. And instead

12453
00:11:26,320 --> 00:11:30,730
of printing the final outcome, I'm going to return it as the output.

12454
00:11:32,150 --> 00:11:40,550
So now we can call that function down here and we can pass in each account in turn. For example, we

12455
00:11:40,550 --> 00:11:46,640
could say print "Compare A: " which is going to be first_account.

12456
00:11:47,060 --> 00:11:52,970
So we're going to use our fstring to insert the data that we get back from our function call.

12457
00:11:53,360 --> 00:11:56,450
And I'm going to call it within the print statement.

12458
00:11:56,720 --> 00:11:59,690
You can, of course, take it out and create a separate variable,

12459
00:11:59,960 --> 00:12:02,940
but I think this should be clear enough to see what's going on.

12460
00:12:03,110 --> 00:12:09,770
So we're going to call format_data and we're going to pass in the account A for this first line, and

12461
00:12:09,770 --> 00:12:11,870
then I'm going to do the same for B.

12462
00:12:12,410 --> 00:12:17,930
So in this case, I'm going to pass an account B and it's going to format the data and then print it

12463
00:12:17,930 --> 00:12:18,150
out.

12464
00:12:18,710 --> 00:12:22,250
So as I always say, it's a good idea to run your code frequently.

12465
00:12:22,640 --> 00:12:28,010
Probably any time you solve a problem, you should probably run it and see if it works the way you expect

12466
00:12:28,010 --> 00:12:28,370
it to.

12467
00:12:28,910 --> 00:12:34,340
So the first one, the logo gets printed. The second one, we've managed to get some random accounts

12468
00:12:34,580 --> 00:12:37,890
because every time I run it, the accounts should be different.

12469
00:12:38,510 --> 00:12:46,280
And finally, we format the account into this format with their name, their description and their country

12470
00:12:46,550 --> 00:12:52,730
all written out from the print statement using this lovely format_data function we've created.

12471
00:12:54,020 --> 00:12:55,540
We've already done really well

12472
00:12:55,550 --> 00:12:58,010
so let's keep going. Now,

12473
00:12:58,010 --> 00:13:04,670
at the moment it just says compare A, compare B. But instead, it'd be much nicer if we can put in that

12474
00:13:04,670 --> 00:13:09,320
art, the versus ASCII art in between the A and B.

12475
00:13:10,610 --> 00:13:18,170
Now you could write the line again from art import versus, but instead you could also just add a comma

12476
00:13:18,170 --> 00:13:19,620
here and write versus.

12477
00:13:19,760 --> 00:13:26,120
So now it's going to import both the logo and that versus art and we're going to put it right here.

12478
00:13:26,120 --> 00:13:27,770
So we're going to use a print statement.

12479
00:13:28,160 --> 00:13:33,440
And instead of using a string inside double quotes, we're just going to write the name of the variable

12480
00:13:33,710 --> 00:13:34,940
which is called versus.

12481
00:13:35,450 --> 00:13:41,240
And if we take a look at the final version, you can see it also says compare A against B, so we'll

12482
00:13:41,240 --> 00:13:43,520
change the second word to against.

12483
00:13:44,480 --> 00:13:50,990
And now when we run the code, it should look pretty much identical to the starting point of our final

12484
00:13:50,990 --> 00:13:51,320
game.

12485
00:13:52,280 --> 00:14:00,080
Let's tackle the next problem. We need to ask the user for a guess to see who has more followers, right?

12486
00:14:00,620 --> 00:14:07,400
So I'm actually just going to copy this string right here and I'm going to put that into an input.

12487
00:14:08,910 --> 00:14:15,930
So who has more followers, A or B, and this input is going to come back as a string and I'm going

12488
00:14:15,930 --> 00:14:22,980
to save it inside a new variable called guess. Now because it asks them for A or B, they might type

12489
00:14:22,980 --> 00:14:25,670
A like this 'a' or they might type A like this 'A.'

12490
00:14:26,220 --> 00:14:29,550
Ideally, we should make it so that it doesn't matter what they typed.

12491
00:14:29,560 --> 00:14:37,520
It'll still be valid as long as they typed an A. So we can turn this all into a lowercase format.

12492
00:14:37,920 --> 00:14:43,200
So if they typed it capital like this, it'll become lower. If they typed it lowercase then it's already

12493
00:14:43,200 --> 00:14:45,180
lower and it will be fine as well.

12494
00:14:46,080 --> 00:14:48,010
So that way it's more consistent.

12495
00:14:48,930 --> 00:14:55,800
So now our final product actually looks pretty much exactly identical, but it doesn't really have much

12496
00:14:55,800 --> 00:14:57,470
gaming functionality yet.

12497
00:14:57,960 --> 00:15:04,800
To do that, we have to move on to the next problem and check if the user got it right. In order to check

12498
00:15:04,800 --> 00:15:05,640
if they got it right,

12499
00:15:05,640 --> 00:15:10,620
the first thing we'll need is to know how many followers they each have,

12500
00:15:10,620 --> 00:15:10,920
right?

12501
00:15:11,100 --> 00:15:16,350
Each of the accounts, A and B. Let's get a a_follower_count

12502
00:15:18,820 --> 00:15:25,710
and that is going to be using the account_a and then pulling out the data under the key follower_

12503
00:15:25,720 --> 00:15:31,090
count. So I'm actually just going to copy it to make sure I definitely don't make a typo and I'm going

12504
00:15:31,090 --> 00:15:38,650
to tap into account_a and then pass in that key follower_count remember as a string because our

12505
00:15:38,650 --> 00:15:39,640
key is a string.

12506
00:15:39,640 --> 00:15:42,970
So when we use it also has to be a string inside double quotes.

12507
00:15:43,570 --> 00:15:49,180
And I'm going to do the same for the b_follower_count from account_b.

12508
00:15:49,990 --> 00:15:53,200
Now I've tackled that mini-step inside the problem.

12509
00:15:53,500 --> 00:15:57,700
The next step is use an if statement to check if the user is correct.

12510
00:15:58,450 --> 00:16:04,100
Now, again, I think this piece of functionality would be really nice if it was reusable.

12511
00:16:04,540 --> 00:16:12,730
So I'm actually going to pull out of this main sort of flow of the game and define a separate function

12512
00:16:12,730 --> 00:16:13,480
at the top.

12513
00:16:14,020 --> 00:16:20,350
And this function is going to be called check_answer and it's going to get the guess,

12514
00:16:20,590 --> 00:16:22,660
the a_followers

12515
00:16:24,760 --> 00:16:27,160
and the b_followers.

12516
00:16:29,560 --> 00:16:31,840
And I'm going to add some docstrings.

12517
00:16:33,880 --> 00:16:40,240
So the docstrings are really important, especially when your function returns something. For example,

12518
00:16:40,240 --> 00:16:46,210
in this case, it should actually say takes the account data and returns the printable format.

12519
00:16:46,210 --> 00:16:50,580
That makes it so much clearer what this function actually does,

12520
00:16:50,980 --> 00:16:56,750
what are its inputs and what are its outputs. In our check answer

12521
00:16:57,010 --> 00:17:02,770
then it's going to take the user's guess and the follower counts of A and B and then returns if they

12522
00:17:02,770 --> 00:17:03,550
got it right.

12523
00:17:04,210 --> 00:17:06,220
So how might we write this?

12524
00:17:06,430 --> 00:17:09,589
Because the logic is actually a little bit difficult.

12525
00:17:10,300 --> 00:17:17,170
We need to check which account has more followers and then we need to check if the user actually got

12526
00:17:17,170 --> 00:17:17,500
it right.

12527
00:17:17,530 --> 00:17:19,510
So it's almost a two step process.

12528
00:17:20,560 --> 00:17:25,060
And I think in these cases it's actually really worth sort of sketching it out.

12529
00:17:25,540 --> 00:17:27,890
You can use a pen and a piece of paper.

12530
00:17:27,940 --> 00:17:31,360
I'm just using Skitch right here so I can show it to you more easily.

12531
00:17:32,020 --> 00:17:36,460
So let's just construct a simple sort of two by two matrix.

12532
00:17:37,750 --> 00:17:46,990
And at the top, we've got the-- let's say the user guess is A and an alternative is they guess B.

12533
00:17:48,070 --> 00:17:54,580
Now, these are the user's guesses, but then it's going to be compared against the actual reality or

12534
00:17:54,580 --> 00:18:02,380
the answer, which is that A has more followers than B, and the alternative is that B has more followers

12535
00:18:02,380 --> 00:18:10,150
than A. If the user guessed A and A indeed has more followers than B, then they got it right.

12536
00:18:10,840 --> 00:18:16,000
And similarly, if they guess B and B did indeed have more followers than A, then they would have

12537
00:18:16,000 --> 00:18:17,200
also gotten it right.

12538
00:18:18,100 --> 00:18:23,530
But if it was the opposite case, as in they guessed A but actually B had more followers, then they would

12539
00:18:23,530 --> 00:18:24,160
be wrong.

12540
00:18:24,430 --> 00:18:28,930
And also if they guessed B and A has more followers, then they would be wrong as well.

12541
00:18:29,560 --> 00:18:34,180
Now, using this table, we can now construct our if statement.

12542
00:18:35,560 --> 00:18:41,650
There is a very, very long version of it, and there is a much shorter version of it. So the very

12543
00:18:41,650 --> 00:18:50,260
long version would check for something like if the a_followers is greater than the b_followers,

12544
00:18:50,680 --> 00:18:56,860
so A has more followers than B, and the guess is equal to A.

12545
00:18:57,610 --> 00:19:04,090
Now you can go through this kind of way and create four of these if and elif, else statements.

12546
00:19:04,630 --> 00:19:07,750
But it's very easy to get lost in some of the logic.

12547
00:19:08,080 --> 00:19:13,930
And also it means you have to type a lot of this out instead of using the else as the alternative.

12548
00:19:14,530 --> 00:19:23,110
So I think a much easier way would be to first check if A has more followers than B, and in this case

12549
00:19:23,500 --> 00:19:24,850
you can then check

12550
00:19:24,850 --> 00:19:29,520
well, if the guess is equal to A, well then that means they got it right

12551
00:19:29,530 --> 00:19:30,490
so I should return

12552
00:19:30,490 --> 00:19:36,100
true. But if this was not right, then I should return false.

12553
00:19:36,830 --> 00:19:41,760
An alternative and a much easier way of expressing this is to simply return

12554
00:19:42,130 --> 00:19:51,430
guess == a because when this is evaluated, is guess equal to a, then it's going to return

12555
00:19:51,430 --> 00:19:57,620
true. But if guess is not A, if it's B, then it's going to return false.

12556
00:19:58,360 --> 00:20:00,130
So that's a little bit mind bending,

12557
00:20:00,130 --> 00:20:05,830
but if you actually go through it enough times, especially using a debugger like Python Tutor to

12558
00:20:05,830 --> 00:20:09,490
just see how it works, then it should become pretty clear pretty quickly.

12559
00:20:10,780 --> 00:20:19,510
In my case, all I need to do to express my table of possibilities is to first check if A is greater

12560
00:20:19,510 --> 00:20:27,820
than B. Now else, namely, if the opposite was true, B was greater than A, then I'm going to return

12561
00:20:27,820 --> 00:20:29,890
if guess is equal to B.

12562
00:20:30,640 --> 00:20:36,070
So now basically the code says if A has more followers and they guessed A then return

12563
00:20:36,070 --> 00:20:40,600
true. If B has more followers and they guessed B then return true.

12564
00:20:40,920 --> 00:20:43,870
And if the opposite happens, then return false.

12565
00:20:44,530 --> 00:20:49,870
Basically, it's going to return whether if the user got the answer right.

12566
00:20:51,390 --> 00:20:59,300
Now, we can basically check that in here and we could create a new variable could is_correct

12567
00:21:00,910 --> 00:21:05,390
and set that to equal the output of our check_answer function.

12568
00:21:05,980 --> 00:21:11,110
So we're going to call it and pass in all the necessary things, the guess, the followers from A and

12569
00:21:11,110 --> 00:21:17,710
B. So guess and then the a_follower count and the b_follower count.

12570
00:21:19,740 --> 00:21:26,250
Now, once we know whether if they got it right or not, we can tackle the next step, which is give

12571
00:21:26,250 --> 00:21:29,990
user some feedback on their guesses. So we can check,

12572
00:21:30,000 --> 00:21:31,980
well, if is_correct--

12573
00:21:32,430 --> 00:21:37,460
well, in this case, we should probably print something like "You're right."

12574
00:21:39,340 --> 00:21:46,270
But if they didn't get it right, then we're going to print sorry, that's wrong.

12575
00:21:47,450 --> 00:21:54,370
Now, in addition to giving them feedback, we should probably also keep track of the score. So we can

12576
00:21:54,370 --> 00:21:58,600
start off our game with a score of zero.

12577
00:21:59,140 --> 00:22:06,380
But as they play on and if they get it correct, then the score should be incremented by one each time.

12578
00:22:06,940 --> 00:22:09,250
And in addition to printing out, "You're right,"

12579
00:22:09,520 --> 00:22:12,870
we should also give them some feedback on the current score.

12580
00:22:15,010 --> 00:22:23,200
And if sorry they got it wrong, then we should also give them the final score,

12581
00:22:23,380 --> 00:22:27,640
because at this point the game is going to end and they should know how well they did.

12582
00:22:29,250 --> 00:22:33,780
So now let's go ahead and play our game and see if it works.

12583
00:22:34,530 --> 00:22:38,340
So compare Cardi B against Kourtney Kardashian.

12584
00:22:38,880 --> 00:22:46,980
I think it's probably going to be B, and it tells me you're right and current score happens to be inside

12585
00:22:46,980 --> 00:22:47,880
curly braces.

12586
00:22:48,390 --> 00:22:52,650
So there's going to be a lot of debugging that you're going to need to do while you're writing this

12587
00:22:52,650 --> 00:22:53,010
code,

12588
00:22:53,340 --> 00:22:55,710
and you're probably going to make a lot of mistakes.

12589
00:22:55,710 --> 00:22:58,260
But everybody does them, including me.

12590
00:22:59,180 --> 00:23:05,090
If we get it right, we get the feedback, you're right and the current score. If we get it wrong,

12591
00:23:05,300 --> 00:23:07,630
then we get the answer

12592
00:23:07,910 --> 00:23:09,320
Sorry, that's wrong.

12593
00:23:09,350 --> 00:23:10,810
And the final score as well.

12594
00:23:12,180 --> 00:23:13,990
That's all working so far.

12595
00:23:14,580 --> 00:23:20,940
Now we have to figure out some sort of way of making the game repeatable. And, as you might remember,

12596
00:23:20,940 --> 00:23:24,360
that's usually going to require some sort of while loop.

12597
00:23:24,930 --> 00:23:30,210
But it's important to think about which parts of our game actually repeat themselves,

12598
00:23:30,210 --> 00:23:34,170
right? Because when we play the game, it looks like everything's kind of static.

12599
00:23:34,560 --> 00:23:41,430
But if we think about it, the score is set to zero probably can't be repeated, but the accounts

12600
00:23:41,430 --> 00:23:46,110
probably do need to be generated and they do need to be randomized again.

12601
00:23:46,590 --> 00:23:53,070
And then we need to ask the user again, compare A against B and then ask them for an input and then check

12602
00:23:53,070 --> 00:23:53,690
the answer.

12603
00:23:53,910 --> 00:23:56,900
So all the rest of this probably needs to be repeated.

12604
00:23:57,270 --> 00:24:01,440
So I would say everything from here probably should be within our while loop.

12605
00:24:02,010 --> 00:24:04,860
So what is our while loop going to check?

12606
00:24:05,490 --> 00:24:14,420
Well, maybe we could create a flag like game_should_continue and start out as true.

12607
00:24:15,000 --> 00:24:20,700
And then while that's still true, then we'll repeat all of this code below.

12608
00:24:22,540 --> 00:24:28,660
So let's indent that into the while loop. Now, at which point should this become false?

12609
00:24:29,140 --> 00:24:32,940
Well, they get to keep going as long as they get the answer right,

12610
00:24:33,280 --> 00:24:36,530
but the game ends as soon as they get it wrong.

12611
00:24:37,060 --> 00:24:38,800
This is the point where we're going to change

12612
00:24:38,950 --> 00:24:42,850
game_should_continue to false so that once it prints "Sorry,

12613
00:24:42,850 --> 00:24:43,510
that's wrong."

12614
00:24:43,510 --> 00:24:45,250
It's going to end the game.

12615
00:24:46,390 --> 00:24:50,770
Now let's try and run the game and see if we can get our loop to repeat itself.

12616
00:24:51,550 --> 00:24:58,390
I'm going to choose A, and you can see you're right, current score is one. And now it's telling me to compare

12617
00:24:58,420 --> 00:25:04,420
A which is a new random person against B, a new random person.

12618
00:25:05,200 --> 00:25:12,340
As long as I get it right, it will allow me to keep playing the game. But as soon as I get it wrong,

12619
00:25:13,090 --> 00:25:18,720
so I'm pretty sure that National Geographic sadly doesn't have as many followers as Kim Kardashian.

12620
00:25:19,000 --> 00:25:21,900
So I think this is going to get me to exit the game.

12621
00:25:22,420 --> 00:25:23,370
Sorry, that's wrong.

12622
00:25:23,380 --> 00:25:28,060
Your final score is three, and as you can see, my game has now ended.

12623
00:25:28,900 --> 00:25:35,080
But notice how in the final version of the game, the count at position B actually becomes the one at

12624
00:25:35,080 --> 00:25:37,120
position A in the next round.

12625
00:25:37,510 --> 00:25:40,750
So the game kind of continues like this.

12626
00:25:41,080 --> 00:25:48,520
And then once I guess this, Kim Kardashian is now going to become the one at position A and it keeps

12627
00:25:48,520 --> 00:25:50,680
on going as long as I got it right.

12628
00:25:51,310 --> 00:25:55,780
So we now need to code this functionality into our program.

12629
00:25:56,410 --> 00:25:57,580
At the very beginning,

12630
00:25:57,580 --> 00:26:05,080
we generate a random account A and a random account B. But instead, what we want to happen is we want

12631
00:26:05,080 --> 00:26:10,670
to make sure that the account at position B becomes the next account at position A.

12632
00:26:11,050 --> 00:26:18,520
So once this game has run its course and we're looping back to the beginning again, the account A

12633
00:26:18,910 --> 00:26:26,710
should become the previous version of account B. But this obviously will give us an error because there

12634
00:26:26,710 --> 00:26:35,380
is no previous account B. So what we could do is we could actually take this out of the loop and say

12635
00:26:35,380 --> 00:26:45,400
account B is equal to a random choice of data and account A becomes that account B. But then the actual

12636
00:26:45,400 --> 00:26:50,240
account B is going to be a new random account.

12637
00:26:50,770 --> 00:26:53,640
Let's play this through in our heads as a computer.

12638
00:26:54,070 --> 00:27:00,160
The first thing that happens when the game starts for the very first time is we generate a random account

12639
00:27:00,160 --> 00:27:07,450
B. Now that account becomes the account A and then account B becomes a new random account.

12640
00:27:08,140 --> 00:27:12,400
Now when the game loops back, it's not going to touch these parts of the code.

12641
00:27:12,400 --> 00:27:14,140
It's going to start from here.

12642
00:27:14,620 --> 00:27:23,410
So now the account A is going to be replaced by the previous account B, and this new account B is going

12643
00:27:23,410 --> 00:27:25,260
to be a new random account.

12644
00:27:25,660 --> 00:27:28,580
But what if the new random account is still the same account?

12645
00:27:28,870 --> 00:27:32,740
How can we get the code to continue checking until it has found a different account?

12646
00:27:33,010 --> 00:27:37,840
Well, we could replace the if statement with a while loop, then the code will keep checking until

12647
00:27:37,840 --> 00:27:39,070
they are no longer equal.

12648
00:27:39,310 --> 00:27:45,130
And this way, when we run our code, you can see that as long as I get the answer correct,

12649
00:27:47,800 --> 00:27:55,360
then the previous B becomes the new A and B now becomes a new random account.

12650
00:27:57,620 --> 00:28:03,590
That's pretty much all of the functionality sorted, right? But we've got a couple of things to tidy

12651
00:28:03,590 --> 00:28:03,800
up.

12652
00:28:03,980 --> 00:28:10,850
One is we need to clear the screen in between the rounds of our game so we know that we can import the

12653
00:28:10,850 --> 00:28:14,870
clear function from the replit module.

12654
00:28:17,570 --> 00:28:24,350
But here's a question, where do you call it? Because if you call it at the very beginning of the loop,

12655
00:28:24,710 --> 00:28:31,810
like here, then what's going to happen is that your logo is never going to be displayed.

12656
00:28:32,300 --> 00:28:37,460
And also, when you actually get the answer correct, like we will here,

12657
00:28:39,320 --> 00:28:47,240
the result isn't shown because the result is shown at the very end of this while loop. And once that's

12658
00:28:47,240 --> 00:28:52,010
done, it's going to loop right the way back here and it's going to clear everything in the console.

12659
00:28:52,370 --> 00:28:55,350
And that's all going to happen in a fraction of a second.

12660
00:28:55,350 --> 00:28:57,060
So the user won't actually see it.

12661
00:28:57,620 --> 00:28:59,860
So we need to move this clear function.

12662
00:29:00,410 --> 00:29:08,570
The ideal time, I think, to actually show it is just before they're about to see the outcome of their

12663
00:29:08,570 --> 00:29:09,130
action.

12664
00:29:09,500 --> 00:29:11,000
So somewhere here.

12665
00:29:11,570 --> 00:29:18,020
So now, once we've asked the user what we need to ask and we've got their answer, we clear the screen

12666
00:29:18,290 --> 00:29:20,090
and then we show them the outcome.

12667
00:29:20,450 --> 00:29:21,890
Now we get to see the logo,

12668
00:29:21,890 --> 00:29:29,350
we get to see all the versus and A and B, let's select B and we got it right.

12669
00:29:29,510 --> 00:29:31,550
So we get to see that feedback as well.

12670
00:29:31,820 --> 00:29:34,910
It clears the screen and we have a new comparison to make.

12671
00:29:36,390 --> 00:29:42,240
Now, the only thing you'll notice is that the logo disappears in each successive round.

12672
00:29:42,840 --> 00:29:46,890
It might be nice to see it even if we're going to the next round.

12673
00:29:47,340 --> 00:29:54,210
So to do that, we have to print the logo just after we clear the screen right here.

12674
00:29:55,650 --> 00:30:02,370
So now, even though we've cleared the screen, we still get to see the logo again as long as we get

12675
00:30:02,370 --> 00:30:03,370
the answer correct.

12676
00:30:04,530 --> 00:30:05,920
That's all there is to it.

12677
00:30:06,060 --> 00:30:12,960
We've now completed all of the functionality that's in the final version of the game, and it took quite

12678
00:30:12,960 --> 00:30:14,160
a bit of code at the end.

12679
00:30:14,490 --> 00:30:20,400
But as long as you broke it down into these smaller components, each of the components and each of

12680
00:30:20,400 --> 00:30:23,400
the problems are much, much easier to tackle.

12681
00:30:23,640 --> 00:30:26,820
I hope you enjoyed building this game and you have fun playing with it.

12682
00:30:27,360 --> 00:30:29,250
I hope you enjoyed building this game.

12683
00:30:29,250 --> 00:30:31,110
And I'll see you on the next lesson.



12684
00:00:00,270 --> 00:00:03,390
Hey, welcome back to 100 Days of Code.

12685
00:00:03,990 --> 00:00:11,090
This is Angela from the App Brewery, and today is day 15 where we're going to set up our local development

12686
00:00:11,160 --> 00:00:15,780
environment for Python and we're going to be building a Coffee Machine project.

12687
00:00:16,470 --> 00:00:17,850
So when we designed the course,

12688
00:00:17,850 --> 00:00:23,390
we really wanted you to get up and running as fast as possible and start coding straight away.

12689
00:00:23,880 --> 00:00:30,150
But as our project gets more and more complex, then it's really important to start thinking about setting

12690
00:00:30,150 --> 00:00:32,250
up a proper development environment.

12691
00:00:32,880 --> 00:00:38,760
Now, if you were a chef, then you need really sharp knives. And as a programmer, you need a good development

12692
00:00:38,760 --> 00:00:39,440
environment.

12693
00:00:39,660 --> 00:00:43,680
In today's lesson, I'm going to show you how to set up my favorite IDE,

12694
00:00:44,220 --> 00:00:48,000
and the IDE stands for Integrated Development Environment.

12695
00:00:48,690 --> 00:00:53,430
This is a piece of software that will help you as you're creating your code,

12696
00:00:53,730 --> 00:00:59,550
and it's going to do a whole bunch of things for you including things like linting your code, finding

12697
00:00:59,550 --> 00:01:06,270
errors in it, giving you guidance on your coding style, helping you debug issues, just making life

12698
00:01:06,270 --> 00:01:09,630
easier for you as you start writing more and more code.

12699
00:01:10,260 --> 00:01:14,120
This is the moment where you're graduating from a newbie developer.

12700
00:01:14,220 --> 00:01:20,280
It's like as if you've gone into the mountains, you've fetched water for this old sensei for like 20

12701
00:01:20,280 --> 00:01:23,310
years and finally he's going to show you how to use a sword.

12702
00:01:24,030 --> 00:01:27,030
This is going to be the equivalent of our sword.

12703
00:01:27,630 --> 00:01:32,400
Now, in terms of development environment, there's actually a whole bunch to choose from.

12704
00:01:32,880 --> 00:01:36,340
And you might have heard of some of these like Jupiter or Spider,

12705
00:01:36,360 --> 00:01:36,640
VS

12706
00:01:36,660 --> 00:01:40,200
Code and some of them we've already used like Thonny.

12707
00:01:40,920 --> 00:01:44,910
But the one that we're going to use is something called PyCharm.

12708
00:01:45,330 --> 00:01:51,510
And this is an Intelligent Development Environment, an IDE, that is specialized for Python.

12709
00:01:52,020 --> 00:01:58,590
The tool has been sharpened especially for python coding, and it's what the professionals use. In

12710
00:01:58,590 --> 00:01:59,520
the coming lessons,

12711
00:01:59,520 --> 00:02:01,860
we're going to get really familiar with this tool.

12712
00:02:02,040 --> 00:02:08,389
And gradually, I want to show you how it can help you become a better and more productive developer.

12713
00:02:09,180 --> 00:02:14,820
But before we can get started installing PyCharm, we first have to get the latest version of Python

12714
00:02:15,090 --> 00:02:17,220
installed on your computer.

12715
00:02:18,120 --> 00:02:25,110
In the course resources, you can go ahead and find the download link for Python. Then once you're

12716
00:02:25,110 --> 00:02:29,230
there, it should automatically detect your current operating system.

12717
00:02:29,790 --> 00:02:36,840
So here I am on Windows and it says download the latest version for Windows. And then if you click on

12718
00:02:36,840 --> 00:02:41,250
the big download button, it'll ensure that you get the latest version of Python.

12719
00:02:41,820 --> 00:02:46,260
Now, it's actually a very small file, so it shouldn't take very long to download.

12720
00:02:47,070 --> 00:02:51,510
And once it's complete, go ahead and open up that .exe file.

12721
00:02:52,320 --> 00:02:59,760
Now, go ahead and make sure that the checkbox for Add Python 3.8 to Path is checked and

12722
00:02:59,760 --> 00:03:01,890
then leave everything else as it is

12723
00:03:01,890 --> 00:03:08,740
and click on Install now. And make sure that you have admin privileges while you're installing

12724
00:03:09,390 --> 00:03:15,870
so you have to be logged on as the administrator. And say yes to any of the prompts.

12725
00:03:16,140 --> 00:03:22,590
Now, installation should only take a few minutes. And once it's done, you might get a hint here saying

12726
00:03:22,590 --> 00:03:25,260
"Disable path length limit."

12727
00:03:25,830 --> 00:03:28,710
If you see that, then go ahead and click on it.

12728
00:03:30,540 --> 00:03:37,610
And again, say yes for allow. And then you're done and you can close off the wizard. If you're on a Mac,

12729
00:03:37,650 --> 00:03:39,840
the process is virtually identical.

12730
00:03:40,290 --> 00:03:46,860
Once you head over to the link from the course resources, you should see it automatically, let's you download

12731
00:03:46,860 --> 00:03:48,330
the latest version for Mac.

12732
00:03:48,870 --> 00:03:53,520
And once the download is complete, you can go through the wizard clicking

12733
00:03:53,520 --> 00:03:59,280
continue agreeing to everything that they ask you to agree and click install.

12734
00:04:00,350 --> 00:04:06,200
And again, you'll need to be on the administrator account and type in your password to allow Python

12735
00:04:06,200 --> 00:04:13,430
to be installed on your computer. Once installation is completed, it should open up this folder and

12736
00:04:13,430 --> 00:04:19,100
you should see Python 3.8 or a later version like 3.9 or 3.10.

12737
00:04:19,519 --> 00:04:25,250
But as long as you see this, then you've been successful and you can delete the installer from your

12738
00:04:25,250 --> 00:04:25,890
computer.

12739
00:04:26,570 --> 00:04:32,990
So now you should have successfully installed Python onto your computer, and we're ready to proceed to

12740
00:04:32,990 --> 00:04:36,050
the next step. Head over to the next lesson

12741
00:04:36,050 --> 00:04:38,330
and we're going to download and install PyCharm.


12742
00:00:00,390 --> 00:00:04,440
So you should have now successfully installed Python onto your computer,

12743
00:00:04,830 --> 00:00:06,870
and we're ready to proceed to the next step,

12744
00:00:06,930 --> 00:00:11,220
which is to download PyCharm. Again, in the course resources,

12745
00:00:11,250 --> 00:00:16,140
you'll find a link to the home page to download PyCharm.

12746
00:00:16,710 --> 00:00:18,480
And once you get to this page,

12747
00:00:18,510 --> 00:00:23,510
you should click on the download button and this takes you to the options page.

12748
00:00:23,820 --> 00:00:27,210
Now, here, it should automatically select your system.

12749
00:00:27,540 --> 00:00:29,760
So currently I'm on a Windows computer,

12750
00:00:30,060 --> 00:00:33,090
and it's automatically selected the Windows tab.

12751
00:00:33,330 --> 00:00:36,960
And you can click on the system requirements to make sure that your computer is

12752
00:00:36,960 --> 00:00:41,760
compatible. And you can also take a look at the installation instructions,

12753
00:00:41,820 --> 00:00:44,820
which is pretty simple. It's basically download and run.

12754
00:00:45,270 --> 00:00:47,490
So there's two versions of PyCharm;

12755
00:00:47,580 --> 00:00:49,830
the professional and the community version.

12756
00:00:50,220 --> 00:00:53,760
You're going to select the community version because it's completely free and

12757
00:00:53,760 --> 00:00:54,870
open source to use.

12758
00:00:55,290 --> 00:00:58,680
The professional version has a free trial and after that you'll have to pay for

12759
00:00:58,680 --> 00:01:02,880
it, but the community version already has all of the features that we need

12760
00:01:03,060 --> 00:01:07,200
and more. Once you click on download, that will take a little while,

12761
00:01:07,410 --> 00:01:11,970
anywhere between 5 to 10 minutes. So while you're waiting for that to run,

12762
00:01:12,060 --> 00:01:13,920
you can head over to the next lesson

12763
00:01:14,190 --> 00:01:17,490
and I'll talk about some of the features of PyCharm that we can look forward

12764
00:01:17,490 --> 00:01:22,230
to. Now, if you are on a Mac, the process is pretty much the same.

12765
00:01:22,290 --> 00:01:25,380
So head over to the link that's in the course resources,

12766
00:01:25,770 --> 00:01:30,540
click on download and download the community version of PyCharm.

12767
00:01:31,320 --> 00:01:34,920
Now, if you're a Linux user, you can also toggle to the Linux tab.

12768
00:01:35,430 --> 00:01:36,270
And while your here,

12769
00:01:36,270 --> 00:01:39,720
you can look at the system requirements and the installation instructions.

12770
00:01:40,500 --> 00:01:44,310
Once you are ready, go ahead and click on the download button for the community

12771
00:01:44,310 --> 00:01:48,630
edition, which is free and open-source, and then download will begin.

12772
00:01:49,170 --> 00:01:52,140
And again, it'll take anywhere between 5 to 10 minutes.

12773
00:01:52,230 --> 00:01:56,310
So let it download and head over to the next lesson where I want to show you

12774
00:01:56,310 --> 00:01:58,260
some of the great features of PyCharm.


12775
00:00:00,480 --> 00:00:05,480
Up until now we've been using Repl.it as our code editor and Repl.it has a

12776
00:00:06,330 --> 00:00:11,330
number of great features like how easy it is to share code and to fork copies of

12777
00:00:12,720 --> 00:00:17,370
the same code so that you can always get the starting code and the final code.

12778
00:00:18,120 --> 00:00:21,090
But Repl.it does have its limitations.

12779
00:00:21,600 --> 00:00:26,600
And as you're becoming more and more advanced and you start building more

12780
00:00:26,610 --> 00:00:31,380
complex projects, you'll start to feel the constraints of a simple text editor

12781
00:00:31,410 --> 00:00:36,390
like Repl.it. Now PyCharm is a tool that's used by professionals.

12782
00:00:36,900 --> 00:00:41,280
And I want to show you a couple of features so that you can see firsthand why

12783
00:00:41,280 --> 00:00:44,340
PyCharm is so popular with Python developers.

12784
00:00:44,640 --> 00:00:48,450
And the first thing I really like about it is also a very, very basic thing,

12785
00:00:48,840 --> 00:00:53,040
it's spellcheck for the English words that you use in your code.

12786
00:00:53,610 --> 00:00:55,710
This just means that while you're writing code,

12787
00:00:55,710 --> 00:00:59,970
you are creating names for your variables, creating your keys, your values,

12788
00:01:00,450 --> 00:01:05,160
or your print statements, that it makes sure that the English that you write,

12789
00:01:05,160 --> 00:01:09,060
the parts that's not actually code, is actually spell-checked

12790
00:01:09,240 --> 00:01:12,330
and you won't believe how many times this will save your skin.

12791
00:01:13,050 --> 00:01:15,840
Here's an example, something that's really,

12792
00:01:15,840 --> 00:01:19,380
really sensitive to spelling is a dictionary.

12793
00:01:19,770 --> 00:01:24,770
We all know that when we're using a dictionary and let's say we wanted to print

12794
00:01:26,100 --> 00:01:31,100
one of the values from our dictionary. We're taking our contacts and getting hold

12795
00:01:31,860 --> 00:01:36,720
of James's details, and then we're trying to get hold of his phone number.

12796
00:01:37,170 --> 00:01:40,230
Now, if you type this wrong, for example,

12797
00:01:40,230 --> 00:01:44,910
if I wrote phone number without an 'e', and I try to run this,

12798
00:01:45,090 --> 00:01:47,100
then you'll see, I get an error.

12799
00:01:47,610 --> 00:01:52,050
But the spell check should already alert you to the issue before you even hit

12800
00:01:52,050 --> 00:01:55,590
run. See how this is underlined with a squiggle

12801
00:01:55,890 --> 00:01:58,890
and it tells you that there's a typo in the word phon,

12802
00:01:59,310 --> 00:02:02,610
and you can click change to phone maybe.

12803
00:02:03,360 --> 00:02:06,300
And it's just a subtle hint to say, 'Hey,

12804
00:02:06,570 --> 00:02:10,800
I think maybe you got that wrong. Just DoubleCheck.' And indeed,

12805
00:02:10,830 --> 00:02:11,970
once we fix that,

12806
00:02:12,270 --> 00:02:16,290
then we get rid of all our issues and everything works perfectly.

12807
00:02:17,070 --> 00:02:22,070
The next feature that I really like is having more space to develop.

12808
00:02:23,370 --> 00:02:25,140
What do I mean by this? Well,

12809
00:02:25,200 --> 00:02:29,940
very often we actually tend to have more than one code file, right?

12810
00:02:30,210 --> 00:02:30,840
For example,

12811
00:02:30,840 --> 00:02:35,840
let's say that we moved our contacts into this data file and we imported it

12812
00:02:37,200 --> 00:02:38,033
instead.

12813
00:02:38,460 --> 00:02:42,870
So it will say from data import contacts.

12814
00:02:43,590 --> 00:02:48,590
And now when I want to code things up and I want to get hold of certain things,

12815
00:02:49,350 --> 00:02:51,840
for example I want to get Jenny's email,

12816
00:02:53,190 --> 00:02:57,300
then ideally I would want to see this side by side,

12817
00:02:57,300 --> 00:02:59,500
right? In PyCharm

12818
00:02:59,710 --> 00:03:03,190
all you have to do to split the screen is just right

12819
00:03:03,190 --> 00:03:06,640
click on the file and then say split and move right.

12820
00:03:07,390 --> 00:03:10,990
And now all of a sudden you can see both sides at once.

12821
00:03:11,230 --> 00:03:16,120
This means it so much easier to refer to some other piece of code when you're

12822
00:03:16,120 --> 00:03:16,953
developing.

12823
00:03:17,020 --> 00:03:22,020
So here I can now easily see that the key for Jenny has a capital J,

12824
00:03:22,540 --> 00:03:24,430
so I have to tap into my contacts,

12825
00:03:24,730 --> 00:03:28,600
tap into the key Jenny and then get hold of her email.

12826
00:03:29,020 --> 00:03:34,020
This split-screen comes in really handy as your code gets more complex and

12827
00:03:34,330 --> 00:03:35,890
there's more and more files.

12828
00:03:37,240 --> 00:03:42,240
And now another advanced feature of an IDE compared to a simple text editor like

12829
00:03:43,300 --> 00:03:46,630
Repl.it is a built-in linter.

12830
00:03:47,020 --> 00:03:52,020
So what is a linter? Well, a linter in real life, is something that picks off a

12831
00:03:52,510 --> 00:03:53,470
little bits of dust,

12832
00:03:53,470 --> 00:03:58,470
bits of lint from your clothing, and in Programming it's something that picks out

12833
00:04:00,370 --> 00:04:05,370
bits of code that you've written that might not be in accordance to the style

12834
00:04:05,770 --> 00:04:10,540
guide. When we're writing code and we're trying to decide, well,

12835
00:04:10,570 --> 00:04:15,430
how many spaces do I leave between things, do I use tabs or spaces,

12836
00:04:15,790 --> 00:04:17,680
what is the maximum line length,

12837
00:04:18,010 --> 00:04:22,720
all of these sort of things that maybe won't break your program per se,

12838
00:04:23,140 --> 00:04:27,550
but it will mean that your program might look different from somebody else's

12839
00:04:27,880 --> 00:04:31,630
and you just want to know what is the convention so that you can keep your code

12840
00:04:31,630 --> 00:04:34,480
consistent with other Python developers. Well,

12841
00:04:34,480 --> 00:04:36,760
this is what a style guide is for.

12842
00:04:37,030 --> 00:04:41,650
And the style guide that most Python developers will abide by is something

12843
00:04:41,650 --> 00:04:43,000
called PEP 8.

12844
00:04:43,600 --> 00:04:47,560
And we've already seen this when we were talking about tabs versus spaces.

12845
00:04:47,860 --> 00:04:48,460
For example,

12846
00:04:48,460 --> 00:04:53,460
the guidance is that an indentation should have four spaces, and indeed it should

12847
00:04:55,360 --> 00:04:57,970
be spaces over tabs.

12848
00:04:58,540 --> 00:05:02,020
And then there are other things like what's the maximum line length

12849
00:05:02,050 --> 00:05:04,630
so that your lines of code don't become really,

12850
00:05:04,630 --> 00:05:09,630
really long and difficult to read, or things like how many blank lines should

12851
00:05:09,970 --> 00:05:14,970
there between functions and variables in your code and all sorts of things.

12852
00:05:15,340 --> 00:05:20,340
This is a very long document and it's actually very difficult to read all of it

12853
00:05:21,160 --> 00:05:24,040
and remember all of it while you're in the middle of coding.

12854
00:05:24,550 --> 00:05:28,030
But luckily for us, if we're using PyCharm,

12855
00:05:28,300 --> 00:05:33,070
it automatically applies those rules and guidance to our code

12856
00:05:33,430 --> 00:05:36,130
and lints our code. For example,

12857
00:05:36,130 --> 00:05:39,250
if I was to create a function called my_function,

12858
00:05:40,030 --> 00:05:41,290
and inside here

12859
00:05:41,320 --> 00:05:45,280
I've just got two inputs, n1 and n2,

12860
00:05:45,820 --> 00:05:50,560
and then it calculates the total by adding n1 to n2,

12861
00:05:51,220 --> 00:05:55,210
and it returns the total as an output. Now,

12862
00:05:55,420 --> 00:05:59,870
at a later point, I decide to call my function, passing in some numbers,

12863
00:05:59,900 --> 00:06:03,470
maybe say 4 and 5. Now firstly,

12864
00:06:03,500 --> 00:06:08,500
notice how I've got some light yellow squiggly lines under both of these lines.

12865
00:06:09,200 --> 00:06:12,320
And when I hover over it, so I don't have to click on it.

12866
00:06:12,350 --> 00:06:16,400
I just keep my cursor on top of the line which has the squiggles,

12867
00:06:16,820 --> 00:06:17,390
you can see

12868
00:06:17,390 --> 00:06:22,390
it tells me that PEP 8 guidance specifies that there should be two blank lines

12869
00:06:23,210 --> 00:06:25,550
after a class or function definition,

12870
00:06:25,970 --> 00:06:28,370
but instead it only found one.

12871
00:06:28,880 --> 00:06:32,510
So basically what it's trying to say is that the style guide says that there

12872
00:06:32,510 --> 00:06:37,510
should be two lines after and before each of your functions so that everything

12873
00:06:38,450 --> 00:06:43,430
is more spaced out and easier to read. And here, when I hover over it,

12874
00:06:43,760 --> 00:06:47,150
you can see it says there's missing white space after the comma.

12875
00:06:47,570 --> 00:06:50,960
So the style guide says that every time you use a comma in your code,

12876
00:06:51,290 --> 00:06:54,920
you should always have a space. This way again

12877
00:06:54,920 --> 00:06:59,000
it's easier to read and it keeps your code consistent with other Python

12878
00:06:59,000 --> 00:07:01,460
developers so that when people look at your code,

12879
00:07:01,610 --> 00:07:04,700
they can see that you're following the standard conventions.

12880
00:07:05,210 --> 00:07:09,260
But remember that this does not affect how your code runs.

12881
00:07:09,650 --> 00:07:13,610
Even with all of these suggestions and these style guide rule breaks,

12882
00:07:13,940 --> 00:07:17,420
it doesn't actually mean my code won't work. If I run it,

12883
00:07:17,540 --> 00:07:21,350
you can see that it works perfectly without any errors.

12884
00:07:21,770 --> 00:07:26,770
And it's only a matter of keeping your code tidy and keeping it in line with the

12885
00:07:27,260 --> 00:07:30,890
conventions that Python developers have set out. Now,

12886
00:07:30,920 --> 00:07:35,920
another advanced feature of an IDE compared to a text editor is the ability to

12887
00:07:36,650 --> 00:07:38,270
view your local history.

12888
00:07:39,080 --> 00:07:42,980
What that means is I can go to show history

12889
00:07:43,550 --> 00:07:47,030
and just as if you were in a browser, you can see your browsing history,

12890
00:07:47,360 --> 00:07:50,450
well here you can see all of your coding history.

12891
00:07:50,810 --> 00:07:55,640
So you can scroll back all the way in the last 12 hours and see the edits that

12892
00:07:55,640 --> 00:08:00,230
you've made. For example, at thirteen past four today,

12893
00:08:00,650 --> 00:08:05,030
I created this brand new function. So this is the current file

12894
00:08:05,090 --> 00:08:08,150
and this is what it looked like at that moment in time.

12895
00:08:08,810 --> 00:08:11,390
Now scrolling forward into the future,

12896
00:08:11,600 --> 00:08:16,600
the next thing I did was I added a new function call here and I added some space

12897
00:08:17,540 --> 00:08:18,373
here.

12898
00:08:18,500 --> 00:08:23,000
So if you've had some sort of catastrophic events and you realize that you've

12899
00:08:23,000 --> 00:08:25,070
really messed up, you've deleted everything,

12900
00:08:25,370 --> 00:08:29,810
you can always scroll back to previous time points and simply just copy and

12901
00:08:29,810 --> 00:08:30,643
paste the code.

12902
00:08:30,920 --> 00:08:35,059
Or you can revert back to that particular time point.

12903
00:08:35,690 --> 00:08:40,340
Can you imagine if you are writing your essay and the number of times I have

12904
00:08:40,340 --> 00:08:43,309
lost my essay because my computer is crashed.

12905
00:08:43,760 --> 00:08:48,500
Imagine if you had this ability to just scroll back in time and find one

12906
00:08:48,500 --> 00:08:52,910
snapshot that you liked and then revert everything back to that moment in time,

12907
00:08:53,450 --> 00:08:55,830
how powerful could that be? Well,

12908
00:08:55,860 --> 00:08:59,820
you now have that in your hands with local history in PyCharm.

12909
00:09:00,480 --> 00:09:05,130
Now another really handy feature is the ability to view the structure of your

12910
00:09:05,130 --> 00:09:08,610
code. Instead of going to the project navigation,

12911
00:09:08,640 --> 00:09:11,130
if I click on this structure pane here

12912
00:09:11,580 --> 00:09:16,580
you can see that it breaks down my code into all of the variables and all of the

12913
00:09:16,860 --> 00:09:21,180
functions. That means that my function could be declared, you know,

12914
00:09:21,210 --> 00:09:24,270
many hundreds of lines somewhere else,

12915
00:09:24,630 --> 00:09:28,080
and I'm scrolling around and I'm trying to find it.

12916
00:09:28,410 --> 00:09:32,490
All I have to do is look at well, here's my function,

12917
00:09:32,730 --> 00:09:33,690
and if I click on it

12918
00:09:33,930 --> 00:09:37,860
it takes me straight there and I can now edit it if I wish.

12919
00:09:38,130 --> 00:09:41,040
And if I needed the variable jenny_email, well

12920
00:09:41,040 --> 00:09:42,630
it takes me straight there as well.

12921
00:09:42,750 --> 00:09:46,650
Once you start having lots and lots of variables and lots of lots of functions,

12922
00:09:47,010 --> 00:09:48,570
this is a lifesaver.

12923
00:09:49,320 --> 00:09:53,280
Now there's a lot of other features that I'm going to show you that PyCharm

12924
00:09:53,290 --> 00:09:56,250
can do, but I want to do it gradually. For now

12925
00:09:56,310 --> 00:09:58,380
here's the last tip on PyCharm.

12926
00:09:58,980 --> 00:10:03,980
Whenever you create a variable or a function name and you end up using it in

12927
00:10:04,740 --> 00:10:06,900
lots of places, so for example

12928
00:10:06,900 --> 00:10:11,340
you might call my_function here and then you might call my_function again

12929
00:10:11,340 --> 00:10:15,270
passing in some different parameters at some later point in time.

12930
00:10:15,810 --> 00:10:17,700
And then you decide that actually,

12931
00:10:18,120 --> 00:10:21,000
I really don't like the way that I've named that function.

12932
00:10:21,420 --> 00:10:26,420
It would make so much more sense if it was called add instead because it returns

12933
00:10:26,970 --> 00:10:31,500
the total right? If I was to do this manually in a code editor,

12934
00:10:31,500 --> 00:10:32,880
I would have to go add,

12935
00:10:33,150 --> 00:10:37,530
and then all of these lines will break and I have to find all of them and then

12936
00:10:37,530 --> 00:10:40,050
change them manually. And that's very painful.

12937
00:10:40,590 --> 00:10:43,890
So instead, what you can do in PyCharm is you can

12938
00:10:43,980 --> 00:10:48,980
right-click on the name of your function or your variable, go to refactor -> rename.

12939
00:10:50,790 --> 00:10:55,590
And now it will find all of the places where this function is created,

12940
00:10:55,620 --> 00:10:59,100
where it's called, and you can now change it everywhere.

12941
00:10:59,490 --> 00:11:01,080
So click refactor,

12942
00:11:01,560 --> 00:11:06,560
and it's now found the function that needs to be renamed and also all the places

12943
00:11:07,440 --> 00:11:10,770
where it's used. So it's used in two places, here

12944
00:11:10,770 --> 00:11:13,140
on line 11 and here on line 14.

12945
00:11:13,560 --> 00:11:18,560
So now I click do refactor and what'll happen is it'll change all the places where

12946
00:11:20,250 --> 00:11:22,590
it occurs. And it's much,

12947
00:11:22,590 --> 00:11:26,160
much safer than say just using find and replace.

12948
00:11:26,520 --> 00:11:30,420
Let's say that I had a print statement here that said, um,

12949
00:11:30,450 --> 00:11:33,090
my_function is a function.

12950
00:11:33,990 --> 00:11:37,110
And if I used find and replace where I just say, well,

12951
00:11:37,110 --> 00:11:42,110
my_function now equals add and I click on replace all,

12952
00:11:42,420 --> 00:11:47,160
it's going to now change it in all the places. But on the other hand,

12953
00:11:47,160 --> 00:11:49,020
if I use refactor -> rename,

12954
00:11:49,590 --> 00:11:54,590
then it's going to be intelligent enough to know that this print statement is

12955
00:11:55,000 --> 00:11:55,470
just

12956
00:11:55,470 --> 00:11:57,630
text whereas the places 

12957
00:11:57,630 --> 00:12:02,630
where my function is used and the places where my function is declared,

12958
00:12:02,880 --> 00:12:05,640
that is what I want to refactor and rename.

12959
00:12:05,820 --> 00:12:09,090
And it leaves all of the innocent bystanders alone.

12960
00:12:10,080 --> 00:12:15,080
There's a lot of really exciting things yet to come as we start getting used to

12961
00:12:15,120 --> 00:12:18,540
using PyCharm. But as with any new tool,

12962
00:12:18,840 --> 00:12:22,530
you'll spend a little bit of time getting up and running with it and getting

12963
00:12:22,530 --> 00:12:26,190
used to using it. Now, when I was in primary school,

12964
00:12:26,520 --> 00:12:31,520
I still remember the moment when I got to graduate from writing with pencils

12965
00:12:32,220 --> 00:12:35,640
to writing with a Berol handwriting pen.

12966
00:12:36,150 --> 00:12:41,150
And it was a really significant moment in my life when I was allowed to write

12967
00:12:41,250 --> 00:12:46,230
with the adult tools. So this is kind of what's happening right here.

12968
00:12:46,560 --> 00:12:48,270
We're graduating to PyCharm.

12969
00:12:48,510 --> 00:12:52,320
It's going to take a little bit of getting used to and learning our ropes,

12970
00:12:52,620 --> 00:12:55,170
but it's going to take us closer to our goals.

12971
00:12:55,710 --> 00:13:00,300
Hopefully by now, PyCharm should have now downloaded and you're ready to head

12972
00:13:00,300 --> 00:13:03,450
over to the next lesson where we're going to install it.


12973
00:00:00,480 --> 00:00:02,430
Now that you've downloaded PyCharm,

12974
00:00:02,490 --> 00:00:07,320
we're ready to go ahead and install it onto your computer. Now this video,

12975
00:00:07,350 --> 00:00:11,280
I'm going to go through all the steps for installing and setting up PyCharm on

12976
00:00:11,280 --> 00:00:13,740
Windows. If you're on a Mac system,

12977
00:00:13,890 --> 00:00:18,210
then go ahead and skip this lesson and you'll find the walkthrough on the next

12978
00:00:18,210 --> 00:00:20,970
lesson. Once you download has completed,

12979
00:00:21,000 --> 00:00:23,370
go ahead and click on the exe file

12980
00:00:23,490 --> 00:00:27,780
if you're running on Windows. And then you're just going to go ahead and follow

12981
00:00:27,840 --> 00:00:32,729
the wizard. And if you want to have an icon on your desktop, check the checkbox

12982
00:00:32,729 --> 00:00:36,750
to add the launcher, and then go ahead and click next.

12983
00:00:37,710 --> 00:00:42,710
Now leave everything as the default and click install. Installation should only

12984
00:00:43,530 --> 00:00:46,830
take a couple of minutes. And once it's done,

12985
00:00:46,860 --> 00:00:49,020
you can go ahead and click finish.

12986
00:00:49,440 --> 00:00:54,440
Now, you can double click on the icon to open up the program and the first time

12987
00:00:55,140 --> 00:00:59,370
you do so you'll need to agree to the privacy policy and choose whether if you

12988
00:00:59,370 --> 00:01:03,960
want to share data with them. Now you get to pick your UI style,

12989
00:01:04,019 --> 00:01:06,030
either dark mode or light mode,

12990
00:01:06,900 --> 00:01:09,900
and then you can skip all the rest of the setup.

12991
00:01:11,040 --> 00:01:15,750
Now to test it out, go ahead and create a new project and name it

12992
00:01:15,780 --> 00:01:20,370
whatever you want. But the really important thing is to click the Project

12993
00:01:20,370 --> 00:01:25,370
Interpreter drop-down and under base interpreter that you select the latest

12994
00:01:26,190 --> 00:01:28,650
version of Python that you just installed,

12995
00:01:28,980 --> 00:01:33,480
which in my case is Python 38, which stands for 3.8.

12996
00:01:34,110 --> 00:01:37,530
It will take a few moments before your project gets set up.

12997
00:01:38,100 --> 00:01:41,190
And once it does, you might see 

12998
00:01:41,190 --> 00:01:45,090
a little popup that says something about Windows Defender.

12999
00:01:45,690 --> 00:01:46,710
If you see this,

13000
00:01:46,740 --> 00:01:51,360
then go ahead and click fix and click configure automatically.

13001
00:01:51,810 --> 00:01:54,690
If you don't see this pop up, then don't worry about it.

13002
00:01:55,350 --> 00:02:00,350
Now you can go ahead and right-click on your project folder and select new,

13003
00:02:02,910 --> 00:02:06,960
and then new file. Now we're going to create a new file,

13004
00:02:07,020 --> 00:02:11,430
which is going to be called main.py. And in this file,

13005
00:02:11,460 --> 00:02:16,200
we're going to test it out just by writing a hello world that will get printed

13006
00:02:16,230 --> 00:02:19,500
to the console. And once you're done,

13007
00:02:19,530 --> 00:02:24,530
then go ahead and click on Run and then select the main.py file to run.

13008
00:02:26,280 --> 00:02:30,480
And the console should now popup and you should see hello world printed.

13009
00:02:31,290 --> 00:02:31,950
That's it.

13010
00:02:31,950 --> 00:02:35,880
You're ready to start working with PyCharm and you should be able to use it in

13011
00:02:35,880 --> 00:02:37,560
the same way that you used Repl.it.


13012
00:00:00,090 --> 00:00:00,930
In this video,

13013
00:00:00,960 --> 00:00:05,100
I'm going to walk through the process to install PyCharm on Mac. Now,

13014
00:00:05,100 --> 00:00:08,880
if you're on a Windows computer and you've already installed PyCharm,

13015
00:00:08,940 --> 00:00:10,290
then you can skip this video.

13016
00:00:10,890 --> 00:00:13,860
So you should have now downloaded the PyCharm installer.

13017
00:00:14,250 --> 00:00:17,820
So go ahead and open up the DMG file. Now,

13018
00:00:17,820 --> 00:00:22,680
when you see this window, drag the icon for PyCharm into the applications

13019
00:00:22,680 --> 00:00:26,730
folder. And now you can go to spotlight and search for PyCharm.

13020
00:00:27,360 --> 00:00:30,930
Then go ahead and click on it to open it up. Now,

13021
00:00:30,960 --> 00:00:35,960
make sure that you have admin privileges and go ahead and say open. And then

13022
00:00:36,240 --> 00:00:40,680
agree to the privacy policy and decide if you want to share data with them or

13023
00:00:40,680 --> 00:00:44,310
not. Now you can select never used 

13024
00:00:44,310 --> 00:00:46,410
PyCharm and click next.

13025
00:00:46,980 --> 00:00:51,480
Then you can pick between dark theme or light theme and click next.

13026
00:00:52,050 --> 00:00:56,160
And then go ahead and click on skip remaining and set defaults.

13027
00:00:57,630 --> 00:01:01,860
Now we can go ahead and create our first project in PyCharm.

13028
00:01:02,730 --> 00:01:04,620
Name your project whatever you want,

13029
00:01:05,069 --> 00:01:10,070
but it's really important that you click on this drop-down to check that your

13030
00:01:10,140 --> 00:01:15,140
project interpreter, and especially the base interpreter, is set to the latest

13031
00:01:16,020 --> 00:01:20,820
version of Python that you installed, which in my case is Python 3.8.

13032
00:01:22,080 --> 00:01:24,750
Now, if you're running on a Mac or a Linux,

13033
00:01:24,900 --> 00:01:28,200
you might see several versions of Python in that dropdown list.

13034
00:01:28,560 --> 00:01:32,670
So make sure that you select the latest version that you installed and then

13035
00:01:32,670 --> 00:01:36,810
click next. Once it has configured and created your new project,

13036
00:01:37,110 --> 00:01:38,310
this is what you should see.

13037
00:01:38,970 --> 00:01:42,600
And now you're going to go into your project folder, right-click on it,

13038
00:01:42,960 --> 00:01:47,130
and then go to new -> file. Now on a Mac, right

13039
00:01:47,130 --> 00:01:49,800
click is also the same as control clicking.

13040
00:01:49,830 --> 00:01:54,120
So you could hold down the control key and then click on the project folder.

13041
00:01:54,480 --> 00:01:56,610
And again, choose new, and then file.

13042
00:01:57,240 --> 00:02:01,500
And the file we're going to create is going to be our main.py. Now,

13043
00:02:01,530 --> 00:02:05,760
inside here, all that we're going to do is just print hello world.

13044
00:02:07,410 --> 00:02:10,680
And we're going to run this code and make sure that it works.

13045
00:02:11,009 --> 00:02:16,010
So go to run and then click on this run button and select the main Python file

13046
00:02:18,780 --> 00:02:23,280
as the one you want to run and then down here, you should see the run tab

13047
00:02:23,340 --> 00:02:24,690
pop up all of a sudden,

13048
00:02:25,200 --> 00:02:29,400
and you should see your hello world printed in the console.

13049
00:02:30,630 --> 00:02:33,690
And then it'll say process finished with exit code zero,

13050
00:02:33,930 --> 00:02:35,700
zero is a success,

13051
00:02:36,030 --> 00:02:40,380
and that means you're now all set up and you're ready to start using PyCharm

13052
00:02:40,740 --> 00:02:43,680
as if it were any other Python editor.

13053
00:02:44,160 --> 00:02:47,760
So anything that you've done in Repl.it you can now do in PyCharm.

13054
00:02:48,120 --> 00:02:52,650
You can create new files, you can write the files and you can run those files.


13055
00:00:00,360 --> 00:00:02,850
Now you should have PyCharm up and running,

13056
00:00:03,030 --> 00:00:05,939
and we're finally ready to tackle today's project,

13057
00:00:06,240 --> 00:00:10,110
which we're going to write in PyCharm. You've just been hired.

13058
00:00:10,200 --> 00:00:14,250
Congratulations, but first there's the matter of coffee.

13059
00:00:14,790 --> 00:00:18,750
We all know that programmers can't work unless they're loaded up on coffee.

13060
00:00:19,260 --> 00:00:24,180
So your company has asked you to create the code for a coffee machine.

13061
00:00:25,050 --> 00:00:29,310
Now you, very cleverly, go online and look at the other coffee machines.

13062
00:00:29,580 --> 00:00:34,380
And you notice that it only costs $230 to buy a coffee machine,

13063
00:00:34,860 --> 00:00:38,310
but you're not going to cheat. You're going to create everything from scratch.

13064
00:00:38,910 --> 00:00:42,960
And luckily we don't actually have to build the hardware because we're programmers,

13065
00:00:42,990 --> 00:00:43,740
right?

13066
00:00:43,740 --> 00:00:48,740
But we're going to use this real-life coffee machine as the inspiration for our

13067
00:00:49,170 --> 00:00:53,670
virtual coffee machine, noting the features and the capabilities.

13068
00:00:54,330 --> 00:00:58,770
So what does it say? I found some wonderful graphics on here

13069
00:00:59,130 --> 00:01:02,130
which tells me that they're three hot flavors

13070
00:01:02,640 --> 00:01:07,170
which I'm guessing are these three buttons, it's coins operate

13071
00:01:07,830 --> 00:01:12,720
which I think they mean it's coin operated, and there's not much else that it can

13072
00:01:12,720 --> 00:01:13,530
do.

13073
00:01:13,530 --> 00:01:18,510
Let's take this example and we're going to make a digital version of it.

13074
00:01:18,510 --> 00:01:20,880
We're going to create our own coffee machine.

13075
00:01:21,330 --> 00:01:25,830
And the first step we need to replicate is the ability to make three hot

13076
00:01:25,830 --> 00:01:30,210
flavors. So the flavors we're going to make are 1. espresso,

13077
00:01:30,420 --> 00:01:33,750
2. latte, and 3. cappuccino. Here

13078
00:01:33,750 --> 00:01:36,870
are the recipes for these three types of drinks.

13079
00:01:37,410 --> 00:01:40,140
Each of them requires a different quantity of water,

13080
00:01:40,260 --> 00:01:43,470
a different quantity of coffee and a different quantity of milk.

13081
00:01:43,920 --> 00:01:46,770
And they also each half a different price.

13082
00:01:47,520 --> 00:01:51,360
We're going to be modeling all this data in our coffee machine program as well.

13083
00:01:52,430 --> 00:01:55,040
But luckily for you in the starting code,

13084
00:01:55,100 --> 00:01:58,250
I've already included all of this data inside a dictionary.

13085
00:01:58,550 --> 00:02:00,170
So you don't have to remember this,

13086
00:02:00,470 --> 00:02:03,530
although it might help if you're at home and you decided that you really wanted

13087
00:02:03,530 --> 00:02:07,520
a latte instead of your usual black coffee. Now, in addition,

13088
00:02:07,520 --> 00:02:10,820
the coffee machine has some resources that it has to manage.

13089
00:02:11,180 --> 00:02:14,390
So it starts out with 300ml of water in the tank,

13090
00:02:14,630 --> 00:02:18,050
200ml of milk and 100 grams of coffee.

13091
00:02:18,530 --> 00:02:22,970
The second feature of our coffee machine is that it's coin operated.

13092
00:02:23,450 --> 00:02:28,450
So we're going to be using American coins and they have four types of coins:

13093
00:02:29,060 --> 00:02:31,760
the penny, the nickel, the dime, and the quarter.

13094
00:02:32,330 --> 00:02:34,520
They used to also have the dollar as a coin

13095
00:02:34,910 --> 00:02:38,000
but a few years ago they stopped minting that. So we're not going to count it

13096
00:02:38,120 --> 00:02:40,370
and it probably means one less if statement for us.

13097
00:02:40,880 --> 00:02:45,680
Notice what each of these coins are worth. The penny is worth a cent,

13098
00:02:46,040 --> 00:02:49,010
the nickel worth 5 cents and the dime 10 cents,

13099
00:02:49,040 --> 00:02:51,200
and the quarter is a quarter of a dollar.

13100
00:02:51,650 --> 00:02:56,650
These represented in decimal values would look something like this.

13101
00:02:57,920 --> 00:03:02,620
Now here's the important part. Let's think about what our program requirements are

13102
00:03:02,650 --> 00:03:05,080
if we break it down one.

13103
00:03:05,230 --> 00:03:08,050
1. We need our coffee machine to be able to print a report.

13104
00:03:08,440 --> 00:03:11,680
It needs to be able to tell us what resources it has left,

13105
00:03:11,710 --> 00:03:14,470
how much water has left, how much milk, et cetera.

13106
00:03:14,980 --> 00:03:18,430
If you head over to the completed version of the coffee machine,

13107
00:03:18,790 --> 00:03:21,190
the link is in the course resources,

13108
00:03:21,610 --> 00:03:25,780
and you can go ahead and try out the final version of the coffee machine.

13109
00:03:26,500 --> 00:03:31,500
So let's say that we wanted a report on all the resources that the machine has.

13110
00:03:31,990 --> 00:03:36,970
All we have to do is type report, and we can see all the resources we have.

13111
00:03:37,600 --> 00:03:40,030
Now, in addition to being able to print a report,

13112
00:03:40,420 --> 00:03:45,400
we also want to be able to check that the resources are sufficient when the user

13113
00:03:45,400 --> 00:03:50,380
orders a drink. Now let's say that the user decided to order a latte.

13114
00:03:50,950 --> 00:03:55,950
It asks me to insert some coins and then it gives me the change and it gives me

13115
00:03:56,530 --> 00:03:59,650
the latte. But now if I check the report,

13116
00:04:00,010 --> 00:04:03,520
I can see that I've only got a hundred mils of water left.

13117
00:04:03,910 --> 00:04:08,470
And I know from the previous slide that a latte and a cappuccino is going to

13118
00:04:08,470 --> 00:04:12,370
need more than that amount of water. So let's see what happens

13119
00:04:12,400 --> 00:04:16,510
if I go ahead and order a cappuccino. It says, sorry,

13120
00:04:16,510 --> 00:04:17,800
there's not enough water.

13121
00:04:18,279 --> 00:04:23,280
So our program is able to look through all the resources that the machine has,

13122
00:04:24,340 --> 00:04:29,340
checks it against the recipe of the drink that we're trying to make, and tells the

13123
00:04:29,890 --> 00:04:34,270
user if there is insufficient water or if there's insufficient milk,

13124
00:04:34,630 --> 00:04:37,390
and as long as one of the resources is insufficient,

13125
00:04:37,630 --> 00:04:42,580
then it can't make the drink and it gives the feedback to the user. Now,

13126
00:04:42,610 --> 00:04:43,720
as you saw before,

13127
00:04:44,140 --> 00:04:48,550
our program also needs to be able to process coins because our machine is coin

13128
00:04:48,580 --> 00:04:49,413
operated.

13129
00:04:50,170 --> 00:04:54,610
So no fancy contactless payments or pay with your Apple watch, none of that.

13130
00:04:54,700 --> 00:04:57,910
We've only got coins. When we order something,

13131
00:04:58,690 --> 00:05:01,090
it should ask us to insert coins.

13132
00:05:01,630 --> 00:05:04,810
And it's going to ask for the quantity of each type of coin.

13133
00:05:05,260 --> 00:05:09,490
So let's say that I insert one of each, then in this case,

13134
00:05:09,580 --> 00:05:14,580
there's actually not enough money to cover my drink and it refunds the money and

13135
00:05:14,740 --> 00:05:19,630
doesn't give me a drink. But on the other hand, if I do insert enough money,

13136
00:05:20,410 --> 00:05:25,150
then it should be able to calculate how much money all of these coins are worth

13137
00:05:25,570 --> 00:05:29,530
and then calculate the amount of change based on the cost of my drink.

13138
00:05:30,010 --> 00:05:34,480
And then it should hand me my drink and tell me to enjoy. So,

13139
00:05:34,510 --> 00:05:37,720
in addition to being able to process the four types of coins,

13140
00:05:37,750 --> 00:05:41,560
calculating the actual monetary value based on the number of points,

13141
00:05:41,860 --> 00:05:44,500
it should also check that the transaction is successful.

13142
00:05:44,530 --> 00:05:49,530
That the user didn't try to hoodwink us by not giving enough coins and asking

13143
00:05:49,540 --> 00:05:53,080
for a drink. So if they haven't inserted enough coins,

13144
00:05:53,350 --> 00:05:55,780
then we're just going to refund them and tell them, sorry

13145
00:05:55,780 --> 00:05:58,970
that's not enough money, and not give them their drink.

13146
00:05:59,390 --> 00:06:02,150
But if the transaction was successful,

13147
00:06:02,450 --> 00:06:07,040
then we're going to make the coffee. And in the process of making the coffee,

13148
00:06:07,280 --> 00:06:09,560
we're going to have to deduct the resources.

13149
00:06:10,070 --> 00:06:12,680
Notice how every time we make a drink,

13150
00:06:12,710 --> 00:06:16,670
say in this time we made a latte and previous to the latte,

13151
00:06:16,700 --> 00:06:20,300
we have 300 mills of milk. But after the latte,

13152
00:06:20,330 --> 00:06:24,110
when we asked for the report, you can see that the water has been reduced,

13153
00:06:24,110 --> 00:06:25,190
the milk has been reduced,

13154
00:06:25,220 --> 00:06:28,840
the coffee has been reduced and the money has been put into the coffer.

13155
00:06:29,690 --> 00:06:32,150
This program, even though it seems simple,

13156
00:06:32,180 --> 00:06:35,240
just a simple digital version of a coffee machine,

13157
00:06:35,720 --> 00:06:38,420
it actually has quite a few requirements.

13158
00:06:38,960 --> 00:06:43,960
So I recommend that you look at the screen and try to see how each of the

13159
00:06:44,510 --> 00:06:49,510
requirements work by having a play around with the final version of the code. Now

13160
00:06:51,080 --> 00:06:56,080
I've created a detailed program specification for you as a PDF file

13161
00:06:56,690 --> 00:06:59,510
which you can download in the course resources.

13162
00:06:59,930 --> 00:07:04,520
And this goes into a lot more details on each of those points. For example,

13163
00:07:04,520 --> 00:07:08,360
what should the prompt print in the beginning of the program,

13164
00:07:08,810 --> 00:07:12,020
and then how to turn the machine off,

13165
00:07:12,410 --> 00:07:17,410
how to print the reports and how each of those points should work in detail.

13166
00:07:19,010 --> 00:07:23,780
Go ahead and download this and make sure you read each of the sections and test

13167
00:07:23,780 --> 00:07:27,620
it out in the final working version of the project.

13168
00:07:28,730 --> 00:07:29,810
Once you're ready,

13169
00:07:29,870 --> 00:07:34,760
you can go ahead and head over to the starting version of the code. And again,

13170
00:07:34,760 --> 00:07:36,560
I'm sharing this using Repl.it,

13171
00:07:36,830 --> 00:07:39,560
but I want you to copy everything that's in here,

13172
00:07:39,650 --> 00:07:42,290
there's only one file the main.py file,

13173
00:07:43,010 --> 00:07:48,010
and I want you to create a new project using PyCharm and call it coffee

13174
00:07:48,410 --> 00:07:48,880
machine,

13175
00:07:48,880 --> 00:07:49,713
Right?

13176
00:07:51,940 --> 00:07:56,920
And then create a new file inside your project called main.py,

13177
00:07:58,750 --> 00:08:03,550
and then paste all of the starting code into your main.py.

13178
00:08:04,060 --> 00:08:08,260
And now you are going to code inside this file. And once you're ready,

13179
00:08:08,290 --> 00:08:13,210
you're going to click run and you'll be able to run this main.py down here

13180
00:08:13,510 --> 00:08:16,750
and this will act as your console. Now,

13181
00:08:16,750 --> 00:08:19,750
one really handy feature of 

13182
00:08:19,750 --> 00:08:23,020
PyCharm is something called to-do tracking.

13183
00:08:23,830 --> 00:08:28,780
Whereas previously in Repl.it I've been creating to-dos and you've been able to

13184
00:08:28,780 --> 00:08:33,280
view them. But if I have lots of to-dos in different places,

13185
00:08:33,580 --> 00:08:35,409
you can't actually see all of them at once.

13186
00:08:35,409 --> 00:08:37,419
You have to scroll through the file looking for them.

13187
00:08:37,960 --> 00:08:39,850
But in a professional tool,

13188
00:08:40,120 --> 00:08:45,070
we actually have something called to-do tracking and its a tab that's down here.

13189
00:08:45,940 --> 00:08:49,210
So if I go ahead and take some of these program requirements,

13190
00:08:49,510 --> 00:08:52,540
I can put them in as to-dos. To create a

13191
00:08:52,540 --> 00:08:57,540
to-do you have to follow the syntax. First is a pound sign

13192
00:08:58,320 --> 00:09:03,320
and then we write TODO in all caps, and notice how that's just changed color just

13193
00:09:03,570 --> 00:09:06,690
now, and now you can see in the todo tab,

13194
00:09:06,720 --> 00:09:08,640
it's found one todo item.

13195
00:09:09,420 --> 00:09:12,930
Now we can write todo number one

13196
00:09:13,530 --> 00:09:17,970
and this is to print a report of all the coffee machine resources.

13197
00:09:19,080 --> 00:09:23,010
Now let's say that I created a todo somewhere else, right?

13198
00:09:23,040 --> 00:09:24,630
Like all the way up here,

13199
00:09:25,770 --> 00:09:30,770
check that the resources are sufficient to make the drink order. And notice how

13200
00:09:31,620 --> 00:09:34,620
they're completely in different places in a different order.

13201
00:09:34,920 --> 00:09:38,490
But every time I create one of these todos using this format,

13202
00:09:38,520 --> 00:09:39,810
it will get picked up in the

13203
00:09:39,810 --> 00:09:43,500
todo tab. And you can go ahead and see where they live.

13204
00:09:43,860 --> 00:09:47,370
So it's found two items inside our main.py

13205
00:09:47,850 --> 00:09:51,390
and you can see that this one is todo one, this one is todo two.

13206
00:09:51,690 --> 00:09:52,770
And when you click on them,

13207
00:09:52,860 --> 00:09:55,500
they'll take you to the correct places in your code.

13208
00:09:56,460 --> 00:10:01,460
Use this to break down the problem into smaller problems that you can solve one

13209
00:10:01,530 --> 00:10:02,310
by one,

13210
00:10:02,310 --> 00:10:06,720
just as you've done before and try to see if you can complete this project.

13211
00:10:07,500 --> 00:10:11,100
Just the word of warning: this project is quite ambitious.

13212
00:10:11,400 --> 00:10:14,130
But you've now got professional tools to help you,

13213
00:10:14,520 --> 00:10:17,850
and you've got a lot more skill under your belt.

13214
00:10:18,390 --> 00:10:22,680
So give this problem at least an hour to work on it and make sure that you

13215
00:10:22,680 --> 00:10:27,180
satisfy all the criteria that's set out in the program requirements

13216
00:10:27,270 --> 00:10:32,270
and also that your program works exactly the same as the final version of the

13217
00:10:33,690 --> 00:10:34,500
coffee machine.


13218
00:00:00,150 --> 00:00:00,540
Now,

13219
00:00:00,540 --> 00:00:05,540
there are so many possible solutions to create this coffee machine program

13220
00:00:05,760 --> 00:00:10,760
satisfying all the requirements. And the way that you code it up is essentially

13221
00:00:12,000 --> 00:00:13,080
your choice, right?

13222
00:00:13,440 --> 00:00:17,970
Whether if you decide to use a while loop or use a for loop or create a

13223
00:00:17,970 --> 00:00:21,540
different data structure, there are endless possibilities.

13224
00:00:21,840 --> 00:00:25,320
What I'm going to show you now is just one of those possibilities.

13225
00:00:25,890 --> 00:00:29,790
And what's really important is you don't feel like you've done it wrong

13226
00:00:29,790 --> 00:00:33,120
just because it's different to mine. As long as it works

13227
00:00:33,120 --> 00:00:36,900
the way that you expect it to, then consider yourself successful.

13228
00:00:37,650 --> 00:00:41,520
The first thing I'm going to do is create a new project in PyCharm,

13229
00:00:41,910 --> 00:00:46,740
and I'm going to call my project coffee machine. Again,

13230
00:00:46,770 --> 00:00:51,570
making sure that I've got the latest version of Python as the interpreter I'll

13231
00:00:51,570 --> 00:00:52,403
click

13232
00:00:52,490 --> 00:00:53,323
create.

13233
00:00:54,860 --> 00:00:58,700
Now that the first thing I'm going to do here is right-click on this and create

13234
00:00:58,730 --> 00:01:02,210
a new file, which is going to be my main.py.

13235
00:01:02,810 --> 00:01:07,160
And then I'm going to go to my starting project in Repl.it and I'm just going to

13236
00:01:07,160 --> 00:01:12,160
copy everything there is over here and paste it into this main.py.

13237
00:01:13,370 --> 00:01:18,370
Now you might find the font of your code or of PyCharm a little bit too big or

13238
00:01:19,190 --> 00:01:21,350
too small. If that's the case,

13239
00:01:21,350 --> 00:01:26,350
you can just go into preferences and change the appearance and the font to a

13240
00:01:27,830 --> 00:01:30,680
different size. And this is for the user interface.

13241
00:01:31,130 --> 00:01:35,210
And if you want to change the font of the editor, then you can go here,

13242
00:01:35,270 --> 00:01:38,120
go to font and then change that size here.

13243
00:01:38,600 --> 00:01:41,810
I've tried to make it as large as possible so that when you were looking at this

13244
00:01:41,810 --> 00:01:46,100
video on an iPad or an iPhone, all the code still be readable.

13245
00:01:46,460 --> 00:01:48,230
But of course, normally when you're coding,

13246
00:01:48,230 --> 00:01:52,250
you'd probably want to fit more lines into the same screen,

13247
00:01:52,730 --> 00:01:56,300
but it's not good to strain your eyes. So try to strike a balance there.

13248
00:01:57,110 --> 00:02:00,800
Now I'm going to collapse that sidebar because I'm going to be coding entirely

13249
00:02:00,800 --> 00:02:01,880
in this one file.

13250
00:02:02,510 --> 00:02:06,080
Now notice that the beginning we get given a menu,

13251
00:02:07,070 --> 00:02:11,210
and this is a dictionary which contains three entries.

13252
00:02:11,690 --> 00:02:15,050
And each of those entries have a name of a drink,

13253
00:02:15,140 --> 00:02:16,820
espresso, latte and cappuccino.

13254
00:02:17,210 --> 00:02:21,140
And then each of them have a value that holds a bunch of data,

13255
00:02:21,500 --> 00:02:24,650
including the ingredients that are required to make that drink

13256
00:02:24,980 --> 00:02:29,840
and also the price of the drink. Now there's also a resources dictionary,

13257
00:02:29,870 --> 00:02:32,900
which holds the resources of the coffee machine.

13258
00:02:33,740 --> 00:02:36,440
Now that we've got all of that, then we're ready to go.

13259
00:02:37,070 --> 00:02:39,740
I'm going to tackle these requirements one by one.

13260
00:02:40,370 --> 00:02:43,670
And the first one says to prompt the user by asking,

13261
00:02:43,700 --> 00:02:46,880
what would you like? Espresso, latte or cappuccino.

13262
00:02:46,880 --> 00:02:51,880
So I'm actually gonna just straight up copy this line and put that into an

13263
00:02:51,950 --> 00:02:55,730
input. This is going to be saved into some sort of variable,

13264
00:02:55,730 --> 00:02:57,140
which I'll name choice.

13265
00:02:58,550 --> 00:03:03,010
Now it tells me that the prompt should show every time action has completed.

13266
00:03:03,280 --> 00:03:03,820
For example,

13267
00:03:03,820 --> 00:03:07,660
once the drink is dispensed and it should show again and again and again.

13268
00:03:07,930 --> 00:03:11,970
So that means we probably going to have to embed this input in some sort of while

13269
00:03:11,970 --> 00:03:16,270
loop. So I'm just gonna say for now while something is true,

13270
00:03:16,570 --> 00:03:20,110
then keep asking for this prompt. Right now

13271
00:03:20,140 --> 00:03:25,140
if we decide to go and run this code where we go to run and then click on this

13272
00:03:25,540 --> 00:03:29,140
button and then select the main.py to run,

13273
00:03:29,800 --> 00:03:33,790
then you can see that it asks me what would you like? And if I've put an input,

13274
00:03:33,880 --> 00:03:36,910
it'll keep asking me until eternity, basically,

13275
00:03:36,910 --> 00:03:40,870
because that there's currently no way of turning that true into a false.

13276
00:03:41,740 --> 00:03:43,720
So let's take a look at the next requirement.

13277
00:03:43,900 --> 00:03:48,010
We should be able to turn off the coffee machine by entering off into the prompt.

13278
00:03:48,610 --> 00:03:50,290
For maintainers of the coffee machine,

13279
00:03:50,290 --> 00:03:54,160
they can use off as the secret word to turn off the machine and your code should

13280
00:03:54,160 --> 00:03:58,450
end execution when this happens. So when somebody wants to buy coffee,

13281
00:03:58,480 --> 00:04:03,160
this is the line that they see. But when a maintenance guy comes along,

13282
00:04:03,160 --> 00:04:05,140
then they should be able to enter something.

13283
00:04:05,500 --> 00:04:08,290
And if this choice happens to equal the secret code,

13284
00:04:08,590 --> 00:04:13,090
which is off, then in this case we should stop the while loop and exit.

13285
00:04:13,510 --> 00:04:18,510
So that gives us a way of changing this true into some other form of variable,

13286
00:04:18,870 --> 00:04:22,320
right? So we could create a new variable code is_on,

13287
00:04:22,650 --> 00:04:27,180
start it off as true and while the machine is on,

13288
00:04:27,510 --> 00:04:31,530
then it should continue to loop through and ask the user for their choice.

13289
00:04:31,890 --> 00:04:35,280
But if the choice happens to be off, then we're going to turn

13290
00:04:35,280 --> 00:04:39,060
that is_on into false. Now,

13291
00:04:39,060 --> 00:04:40,650
if we run our code again,

13292
00:04:40,650 --> 00:04:44,790
so now that you've run it once you can either stop it or you can rerun it,

13293
00:04:45,390 --> 00:04:49,770
and now it's going to stop your existing code and rerun the code.

13294
00:04:50,040 --> 00:04:52,140
So if you don't want to see this dialogue every time,

13295
00:04:52,170 --> 00:04:55,230
then just check this box and then click stop and rerun.

13296
00:04:55,950 --> 00:05:00,950
So now if we make a selection or we say something basically anything other than

13297
00:05:01,380 --> 00:05:02,970
the key word, which is off,

13298
00:05:03,240 --> 00:05:06,810
it's going to loop back and forth and keep prompting us.

13299
00:05:07,170 --> 00:05:12,170
But if I say off, then the machine turns off and you can see that I've now exited

13300
00:05:12,870 --> 00:05:16,920
the program. Now we've tackled 1 and 2.  

13301
00:05:16,950 --> 00:05:21,930
Let's go on to number 3. When the user enters the keyword report to

13302
00:05:21,930 --> 00:05:24,600
the prompt, another secret word, a report

13303
00:05:24,630 --> 00:05:28,410
should be generated that shows the current resource values. For example,

13304
00:05:28,410 --> 00:05:33,150
water, milk, coffee, and money. So how can we do that? Well, firstly,

13305
00:05:33,180 --> 00:05:36,360
we don't actually have a variable that holds the amount of money.

13306
00:05:36,690 --> 00:05:37,950
So let's create something,

13307
00:05:37,950 --> 00:05:41,940
let's call it profit maybe and set it to equal zero to begin with.

13308
00:05:42,240 --> 00:05:44,790
Our machine has an empty money box in the beginning.

13309
00:05:45,390 --> 00:05:48,720
So now we have to check to see, well, elif

13310
00:05:48,750 --> 00:05:52,590
the choice was equal to report. Well, in this case,

13311
00:05:52,620 --> 00:05:57,620
we have to generate a report and the report is basically going to print all the

13312
00:05:58,820 --> 00:06:00,500
values of these resources.

13313
00:06:01,010 --> 00:06:06,010
So I'm simply going to copy the expected output and I'm going to paste it here.

13314
00:06:07,550 --> 00:06:12,080
And then we can try and turn that into print statements,

13315
00:06:12,170 --> 00:06:16,220
making it a dynamic instead of hard-coded. In my case,

13316
00:06:16,220 --> 00:06:19,670
I want to add print in front of all of these lines.

13317
00:06:19,790 --> 00:06:23,990
And previously we've been doing this just by writing it one by one,

13318
00:06:23,990 --> 00:06:25,970
and then maybe we could copy and paste it.

13319
00:06:26,330 --> 00:06:30,890
But let me show you a quick tip that you can do in PyCharm. If you're on Windows,

13320
00:06:30,920 --> 00:06:35,510
hold down the alt and the shift key on your keyboard. If you are on a Mac,

13321
00:06:35,540 --> 00:06:37,790
hold down the option and the shift key.

13322
00:06:38,300 --> 00:06:42,710
Now click at the beginning and hold and drag down.

13323
00:06:43,580 --> 00:06:45,470
So if that doesn't work, try out a few times,

13324
00:06:45,470 --> 00:06:49,400
you'll get the hang of it eventually. But notice how I've now got four cursors

13325
00:06:49,520 --> 00:06:52,580
and that means when I write print, check this out.

13326
00:06:53,870 --> 00:06:54,703
Isn't that cool?

13327
00:06:55,550 --> 00:06:59,780
I've managed to write on four lines at once because I need that repeat

13328
00:06:59,780 --> 00:07:03,980
functionality and this is a way of doing multiline editing.

13329
00:07:04,190 --> 00:07:07,910
Remember that shortcut and use it in the future if you find it useful.

13330
00:07:08,480 --> 00:07:13,430
So I'm actually going to change this all into fstrings because I want to change

13331
00:07:13,460 --> 00:07:16,160
these numbers instead of being hard-coded,

13332
00:07:16,490 --> 00:07:19,700
I want to insert them into here using the curly braces.

13333
00:07:20,210 --> 00:07:23,120
The water is stored under resources,

13334
00:07:23,510 --> 00:07:26,270
and then it's in the key called water.

13335
00:07:27,830 --> 00:07:31,670
And now notice how I've got a outer double quote,

13336
00:07:31,910 --> 00:07:33,770
so I can't have an inner double quote.

13337
00:07:33,770 --> 00:07:37,100
So I'm going to change this into single quotes instead,

13338
00:07:38,960 --> 00:07:42,530
like, so. And I'm going to do the same for milk and coffee.

13339
00:07:44,420 --> 00:07:48,590
So now I've added the water, milk, and coffee into my print statement.

13340
00:07:48,620 --> 00:07:50,990
All I have left is the money.

13341
00:07:51,230 --> 00:07:56,230
So let's delete the value and let's insert that profit into here.

13342
00:07:57,020 --> 00:08:00,170
Now let's run our code again and let's check it out.

13343
00:08:00,650 --> 00:08:05,650
If I type report it should now give me a report of all the current values and

13344
00:08:06,140 --> 00:08:10,130
money is equal to $0 because that's what we start off with.

13345
00:08:11,120 --> 00:08:14,540
We're now ready to tackle number 4. Here

13346
00:08:14,570 --> 00:08:19,370
we have to check that when the user chooses a drink, we're going to check

13347
00:08:19,370 --> 00:08:23,360
if there are enough resources to make that particular drink they chose.

13348
00:08:23,690 --> 00:08:26,630
For example, if a latte requires 200 ml of water

13349
00:08:26,930 --> 00:08:29,390
but there's only 100ml left in the machine,

13350
00:08:29,750 --> 00:08:32,960
it should not make the drink because it actually can't make the drink

13351
00:08:33,289 --> 00:08:37,390
and it's going to print out, 'Sorry, there's not enough water' or not enough milk,

13352
00:08:37,440 --> 00:08:39,320
not enough coffee, whatever it may be.

13353
00:08:39,770 --> 00:08:42,350
So let's tackle this particular checkpoint.

13354
00:08:43,909 --> 00:08:48,650
Now that I've got the if choices equal off, if choice equals report.

13355
00:08:48,980 --> 00:08:50,990
Now, if it's not either of those,

13356
00:08:51,020 --> 00:08:54,080
then they're probably going to be entering the name of a drink.

13357
00:08:54,380 --> 00:08:56,820
So let's catch that using an else statement.

13358
00:08:57,480 --> 00:08:59,430
And then inside this else statement

13359
00:08:59,430 --> 00:09:04,350
I'm going to get hold of the particular drink that they ordered by tapping into

13360
00:09:04,350 --> 00:09:09,120
our menu dictionary and then using that choice they typed in as the key.

13361
00:09:09,630 --> 00:09:14,190
Let's say that the particular drink that they chose is equal to menu

13362
00:09:14,610 --> 00:09:18,480
and then the key is of course going to be the choice.

13363
00:09:18,930 --> 00:09:23,930
So now if I just print this drink and I run my code..

13364
00:09:24,270 --> 00:09:29,270
So the shortcut for running is actually holding down the control and R and now

13365
00:09:29,730 --> 00:09:34,200
it can go down here and you can see it's asking me for what I would like,

13366
00:09:34,230 --> 00:09:38,010
so I'm going to choose latte. And what's going to be printed

13367
00:09:38,040 --> 00:09:43,040
is the latte entry in my recipes dictionary up here, so this particular

13368
00:09:44,010 --> 00:09:44,843
value.

13369
00:09:46,050 --> 00:09:50,070
Now that I've got this value stored inside a variable called drink,

13370
00:09:50,340 --> 00:09:55,340
well then I can tap into its ingredients and loop through each of the ingredients

13371
00:09:56,160 --> 00:10:00,600
comparing it against the resources and seeing if there's enough.

13372
00:10:00,990 --> 00:10:04,680
Now this is a little bit of functionality that should probably be self-

13373
00:10:04,680 --> 00:10:07,950
contained. So instead of just printing the drink,

13374
00:10:07,950 --> 00:10:11,520
I'm actually going to create a new function. So up here,

13375
00:10:11,520 --> 00:10:15,930
I'm going to create a new function with our def and I'm going to call it is_

13376
00:10:15,960 --> 00:10:17,940
resource_sufficient.

13377
00:10:20,370 --> 00:10:25,370
And this is_resource_efficient is going to take the order ingredients as a

13378
00:10:27,180 --> 00:10:29,910
input and then it's going to work on that.

13379
00:10:29,910 --> 00:10:34,860
So if we want to call that function and pass in the order ingredients we'll have

13380
00:10:34,860 --> 00:10:36,930
to call is_resource_efficient

13381
00:10:37,410 --> 00:10:42,410
and then the other ingredients will be from the drink and then getting hold of

13382
00:10:43,350 --> 00:10:46,470
the values under the key ingredients.

13383
00:10:48,860 --> 00:10:49,580
All right.

13384
00:10:49,580 --> 00:10:54,350
So under this particular key, it will fetch this particular dictionary.

13385
00:10:54,710 --> 00:10:58,880
And this is the dictionary that's going to be passed over to this function as

13386
00:10:58,880 --> 00:10:59,713
the input.

13387
00:11:00,140 --> 00:11:04,130
So now that we have a hold of a dictionary with all the ingredients that are

13388
00:11:04,130 --> 00:11:06,950
required and the amount of each ingredient,

13389
00:11:07,250 --> 00:11:09,950
we can now compare it against our resources

13390
00:11:09,980 --> 00:11:14,980
which is a very similar dictionary with the resources and the amount that's left

13391
00:11:15,800 --> 00:11:16,633
in the machine.

13392
00:11:17,750 --> 00:11:22,750
We can loop through the order ingredients and for each of the items in the

13393
00:11:23,720 --> 00:11:24,380
ingredients,

13394
00:11:24,380 --> 00:11:29,380
we're going to check to see if the order ingredients at that particular key,

13395
00:11:30,080 --> 00:11:35,080
so this is getting hold of the value, is greater than or equal to the resources

13396
00:11:37,700 --> 00:11:41,090
using the same particular key. For example,

13397
00:11:41,090 --> 00:11:43,580
if we were looking at the first example,

13398
00:11:43,940 --> 00:11:46,580
the item would be equal to water.

13399
00:11:47,090 --> 00:11:51,020
So if we fetch the value from order ingredients

13400
00:11:51,050 --> 00:11:54,010
with the key of water, we should get of 200.

13401
00:11:54,460 --> 00:11:59,460
And we would now test to see if 200 is greater than or equal to the 300 that

13402
00:12:02,110 --> 00:12:05,050
we have under the resources. Well, in this case,

13403
00:12:05,080 --> 00:12:09,370
then we should probably tell the user that we actually can't make it.

13404
00:12:09,370 --> 00:12:14,370
So let's put an if statement there and I'm going to use this same string here to

13405
00:12:15,880 --> 00:12:16,713
print it out.

13406
00:12:18,340 --> 00:12:22,000
Now notice when I pasted that string in and

13407
00:12:22,000 --> 00:12:27,000
it has the double quotes from the PDF file here that it's actually not being

13408
00:12:27,910 --> 00:12:29,740
recognized and I'm getting an error here.

13409
00:12:30,220 --> 00:12:33,820
And the important thing to know is that there's a difference between decorative

13410
00:12:33,820 --> 00:12:35,260
double quotes, like these,

13411
00:12:35,320 --> 00:12:38,680
which looked different for the beginning quote and the end quote.

13412
00:12:39,130 --> 00:12:43,060
And then there are Programming double quotes which look like this,

13413
00:12:43,060 --> 00:12:44,770
so I'm going to select this whole line

13414
00:12:45,070 --> 00:12:50,070
and I'm going to add a double quote and notice how they look identical from the

13415
00:12:50,260 --> 00:12:54,550
front and the back. So now it's going to print, Sorry

13416
00:12:54,550 --> 00:12:56,050
there is not enough.

13417
00:12:56,140 --> 00:12:59,560
And the enough of what? It's going to be

13418
00:12:59,590 --> 00:13:01,990
the item that we're currently looping through.

13419
00:13:02,500 --> 00:13:04,210
So let's change that to an fstring

13420
00:13:04,540 --> 00:13:08,080
which makes that an active piece of code that's going to be inserted.

13421
00:13:08,980 --> 00:13:09,880
And in this case,

13422
00:13:09,910 --> 00:13:14,530
we're going to return false because there is not enough resources.

13423
00:13:14,980 --> 00:13:16,210
But otherwise,

13424
00:13:16,450 --> 00:13:21,130
if we managed to get to the end of the for loop and we still haven't returned or

13425
00:13:21,130 --> 00:13:25,420
exited the function by returning false, then in this case

13426
00:13:25,450 --> 00:13:26,560
we can return true.

13427
00:13:26,980 --> 00:13:30,520
So if this particular logic is a little bit confusing for you,

13428
00:13:30,520 --> 00:13:35,080
you could have something like, like this.

13429
00:13:35,110 --> 00:13:39,730
So you have is_enough = true, and you could change is_enough

13430
00:13:41,380 --> 00:13:42,640
to false.

13431
00:13:42,910 --> 00:13:46,810
If any of the order ingredients are greater than the resources.

13432
00:13:47,380 --> 00:13:51,250
And finally at the end, you could return is_enough.

13433
00:13:51,460 --> 00:13:55,630
So basically it stays true unless one of these if statements gets activated.

13434
00:13:56,800 --> 00:14:01,540
But for simplicity sake, I'm actually just going to keep it simple like this.

13435
00:14:02,140 --> 00:14:04,720
And we're now ready to receive that result here

13436
00:14:05,140 --> 00:14:07,270
so we can put an if statement here.

13437
00:14:07,390 --> 00:14:10,630
If the resources are sufficient for the drink,

13438
00:14:11,080 --> 00:14:14,800
then we can proceed to continue to the next step.

13439
00:14:15,970 --> 00:14:18,580
The next step is to process coins.

13440
00:14:18,730 --> 00:14:21,820
The user's going to be asked for the number of quarters

13441
00:14:21,820 --> 00:14:24,070
they have, the number of dimes, nickels, and pennies,

13442
00:14:24,460 --> 00:14:26,950
and you have to remember their values.

13443
00:14:26,980 --> 00:14:31,000
So if you're from the US this shouldn't be a problem. But if you're like me

13444
00:14:31,030 --> 00:14:33,610
somebody who's not from the US, um,

13445
00:14:33,640 --> 00:14:36,940
I actually find it really confusing when I go to the States.

13446
00:14:37,450 --> 00:14:41,860
I always think that the larger coin, that the nickel, should be worth more than

13447
00:14:41,860 --> 00:14:44,200
the dime, but I think it was just me being silly.

13448
00:14:45,070 --> 00:14:49,570
So we're going to ask the user to insert some coins, we're going to process it

13449
00:14:49,630 --> 00:14:52,340
and then we're going to calculate the total value of the coins

13450
00:14:52,340 --> 00:14:54,590
they inserted. That, to me,

13451
00:14:54,590 --> 00:14:57,440
sounds like it should be a separate function as well.

13452
00:14:58,040 --> 00:15:02,120
So let's create another function here, which I'm going to call process_coins.

13453
00:15:04,130 --> 00:15:06,410
And this is not going to take any input,

13454
00:15:06,470 --> 00:15:10,610
but it is going to return the total value of the coins inserted.

13455
00:15:11,270 --> 00:15:13,310
Now, how do we process coins? Well,

13456
00:15:13,310 --> 00:15:18,310
first we can print to ask them to please insert coins.

13457
00:15:19,340 --> 00:15:23,780
And then afterwards, we're going to somehow calculate a total, right?

13458
00:15:23,810 --> 00:15:25,940
This is the variable that we're going to keep track of

13459
00:15:26,270 --> 00:15:29,150
and we're going to return as the output of this function.

13460
00:15:29,930 --> 00:15:34,160
The total is going to be calculated based on the four types of coins.

13461
00:15:34,670 --> 00:15:38,600
So the first question we're going to ask them is how many quarters?

13462
00:15:40,700 --> 00:15:43,670
And this of course is going to be a whole number,

13463
00:15:43,670 --> 00:15:46,910
so we're going to turn it from a string into an integer.

13464
00:15:47,570 --> 00:15:51,860
And we know that each quarter is worth 0.25

13465
00:15:51,860 --> 00:15:53,090
of a dollar,

13466
00:15:53,390 --> 00:15:57,470
so we can multiply the number of quarters by 0.25

13467
00:15:57,770 --> 00:15:59,720
and then we'll get the monetary value.

13468
00:16:01,190 --> 00:16:06,190
Now we'll need to do the same thing for a bunch of other coins.

13469
00:16:06,980 --> 00:16:09,860
So instead of quarters, this is going to be dimes,

13470
00:16:10,130 --> 00:16:14,690
and then it's going to be nickels and finally,

13471
00:16:14,690 --> 00:16:18,920
it's going to be pennies. Dimes are worth 10 cents,

13472
00:16:19,310 --> 00:16:21,380
nickels are worth 5 cents,

13473
00:16:22,010 --> 00:16:26,030
and pennies are worth 1 cent. Now,

13474
00:16:26,060 --> 00:16:30,950
instead of just setting the totals of each of these values, every subsequent one

13475
00:16:30,980 --> 00:16:32,240
other than the first one

13476
00:16:32,240 --> 00:16:35,810
which remember creates this variable and sets its value,

13477
00:16:36,230 --> 00:16:41,230
every other one is just going to be added to the current value like this.

13478
00:16:42,620 --> 00:16:44,840
So now at the very end of all of this,

13479
00:16:44,870 --> 00:16:48,260
we're going to return the total as the output.

13480
00:16:48,740 --> 00:16:52,850
And whenever you have something that returns like both of these functions,

13481
00:16:53,210 --> 00:16:56,960
you should probably be adding a docstring. So in this case,

13482
00:16:56,960 --> 00:16:58,280
this returns

13483
00:16:58,280 --> 00:17:02,870
the total calculated from coins

13484
00:17:02,870 --> 00:17:06,349
inserted. And in this case,

13485
00:17:06,380 --> 00:17:11,380
what happens is it returns true when order can be made and false

13486
00:17:15,500 --> 00:17:19,130
if ingredients are insufficient.

13487
00:17:20,990 --> 00:17:25,160
Now let's call this function that we created, process_coins.

13488
00:17:25,849 --> 00:17:28,310
If there's enough resources to make the drink,

13489
00:17:28,339 --> 00:17:31,520
then the next step is to actually ask them for the money.

13490
00:17:31,820 --> 00:17:34,820
So here is where we're going to call process coins.

13491
00:17:35,450 --> 00:17:40,400
And notice when I write this and I hover over it, you can see that docstring

13492
00:17:40,400 --> 00:17:43,700
we just wrote, returns the total from coins inserted.

13493
00:17:44,990 --> 00:17:47,180
That means this is going to return

13494
00:17:47,330 --> 00:17:52,110
and we need to capture the user's payment in this variable.

13495
00:17:52,110 --> 00:17:56,760
So this returns the output replaces this function call,

13496
00:17:57,060 --> 00:18:01,230
and then it gets saved inside this variable called payment. Now,

13497
00:18:01,230 --> 00:18:05,340
what are we going to do with this payment? Well, that goes onto the next step,

13498
00:18:05,790 --> 00:18:08,970
which is to check that the transaction was successful.

13499
00:18:09,270 --> 00:18:13,380
So we have to make sure that the user has inserted enough money to actually

13500
00:18:13,380 --> 00:18:18,060
purchase the drink they wanted. But each drink of course has a different price.

13501
00:18:18,330 --> 00:18:22,920
So if the user inserts enough money, then we're going to give them some change.

13502
00:18:23,250 --> 00:18:26,910
But if they haven't inserted enough money, then we're going to say, sorry,

13503
00:18:26,910 --> 00:18:29,460
that's not enough money. And the money is refunded.

13504
00:18:30,240 --> 00:18:33,990
But if they have inserted enough money then the cost of the drink is going to be

13505
00:18:33,990 --> 00:18:38,700
added to the machine as the profit. So the next time when we trigger the report,

13506
00:18:38,730 --> 00:18:42,570
then we're going to get to see the increase in the monetary value.

13507
00:18:44,010 --> 00:18:44,490
Again,

13508
00:18:44,490 --> 00:18:48,900
let's create a new function and let's get rid of some of these squiggly lines by

13509
00:18:48,900 --> 00:18:51,630
adding enough spaces in between the functions.

13510
00:18:52,530 --> 00:18:56,370
This one I'm going to call is_transaction_successful,

13511
00:18:58,290 --> 00:19:00,810
because that's basically what we're going to be checking.

13512
00:19:01,380 --> 00:19:03,990
And it's going to take two inputs.

13513
00:19:04,110 --> 00:19:08,520
It's going to take a input in terms of the amount of money that was received,

13514
00:19:09,180 --> 00:19:14,130
and it's also going to have another input, which is cost of the drink.

13515
00:19:15,060 --> 00:19:20,060
This function's goal is to return true when the payment is accepted or it's

13516
00:19:24,570 --> 00:19:25,980
going to return false

13517
00:19:26,370 --> 00:19:29,610
if the money is insufficient.

13518
00:19:29,630 --> 00:19:30,463
Uhm

13519
00:19:32,390 --> 00:19:36,410
Notice how there's this line to the right here of your editor.

13520
00:19:36,890 --> 00:19:41,890
Basically what happens is if you have a line of code that's a little bit too

13521
00:19:41,930 --> 00:19:45,320
long past the recommendation from PEP 8,

13522
00:19:45,650 --> 00:19:50,150
you can see that PEP 8 recommends that a line should not be longer than 120

13523
00:19:50,150 --> 00:19:50,983
characters

13524
00:19:51,140 --> 00:19:54,650
because it's very hard to read for somebody scrolling around like this.

13525
00:19:54,980 --> 00:19:55,880
So in this case,

13526
00:19:55,880 --> 00:20:00,020
they would want you to put it onto a new line so that you don't have to scroll

13527
00:20:00,020 --> 00:20:03,500
and you can see it all on the same screen. But in our case,

13528
00:20:03,500 --> 00:20:07,520
this is not a problem because we have not exceeded the line length 

13529
00:20:07,520 --> 00:20:08,353
recommendation.

13530
00:20:09,590 --> 00:20:13,790
So how are you going to check if the transaction is successful?

13531
00:20:14,420 --> 00:20:14,690
Well,

13532
00:20:14,690 --> 00:20:19,690
if the money received is greater or equal to the cost of the drink, well in this case

13533
00:20:21,770 --> 00:20:26,300
that means we should return true, right? The transaction is successful.

13534
00:20:26,990 --> 00:20:30,530
And if it's not the case, if it's the opposite case,

13535
00:20:30,860 --> 00:20:34,160
then we're going to print, Sorry that's not enough money.

13536
00:20:34,220 --> 00:20:36,380
And the money is refunded to them.

13537
00:20:36,620 --> 00:20:37,453
Right.

13538
00:20:39,590 --> 00:20:44,420
So let's print that here. And we're also going to return false.

13539
00:20:44,960 --> 00:20:48,340
Remember that the return has to be the last thing in your function.

13540
00:20:48,400 --> 00:20:52,420
If you put this above the print statement then the print statement will never

13541
00:20:52,420 --> 00:20:55,840
get called, and that's why you have this highlight. And if you click on it,

13542
00:20:55,840 --> 00:20:58,810
you can see that it tells you this code is unreachable.

13543
00:21:00,520 --> 00:21:04,780
So there's a lot of these little hints and tips that really help you when you're

13544
00:21:04,780 --> 00:21:05,613
developing.

13545
00:21:06,340 --> 00:21:10,990
But if the user has inserted enough money then the cost of the drink should be

13546
00:21:10,990 --> 00:21:15,310
added to the machine as the profit so that we can see it in the next time report

13547
00:21:15,310 --> 00:21:16,143
is triggered.

13548
00:21:16,420 --> 00:21:21,420
So this means that if this money_received is greater or equal to the drink cost,

13549
00:21:22,420 --> 00:21:27,420
then we're going to add to this variable called profit that we have up here,

13550
00:21:28,870 --> 00:21:30,340
which starts out at zero,

13551
00:21:30,580 --> 00:21:34,420
but we're going to add the drinks cost to profit.

13552
00:21:34,720 --> 00:21:37,600
So we're going to say profit += drink_cost.

13553
00:21:38,110 --> 00:21:41,740
And now you'll see an error under the profit

13554
00:21:42,070 --> 00:21:45,100
because this is acting inside

13555
00:21:45,130 --> 00:21:50,130
a local scope and profit is outside in the global scope.

13556
00:21:50,830 --> 00:21:54,550
So in order to reach it, we have to say global profit.

13557
00:21:56,260 --> 00:22:01,260
And the final part of checking the transaction is seeing if the user has

13558
00:22:01,420 --> 00:22:06,070
inserted too much money then the machine is going to offer change. For example,

13559
00:22:06,340 --> 00:22:11,080
here is however many dollars in change and the change should be rounded to two

13560
00:22:11,080 --> 00:22:15,760
decimal places. Again, it's going to be inside this if statement.

13561
00:22:16,420 --> 00:22:21,130
So the change is going to be equal to the amount of money received,

13562
00:22:21,430 --> 00:22:23,740
subtracting the drink cost.

13563
00:22:24,280 --> 00:22:27,430
And this of course could be any number of decimal places.

13564
00:22:28,060 --> 00:22:30,040
So we can use the round function

13565
00:22:30,040 --> 00:22:34,150
which you've seen a long time ago to round this number

13566
00:22:34,510 --> 00:22:38,230
and the second input is the number of decimal places.

13567
00:22:39,310 --> 00:22:43,270
So if you just hover over the function name, then you can see the docs come up

13568
00:22:43,720 --> 00:22:48,670
and this function is basically going to around a number to a given precision in

13569
00:22:48,670 --> 00:22:52,840
decimal digits. So the first is the number you want to round,

13570
00:22:53,140 --> 00:22:57,850
and the second is the number of digits that you want after the dot

13571
00:22:57,880 --> 00:23:02,080
basically. Now that we've gotten hold of the change,

13572
00:23:02,110 --> 00:23:05,260
we're going to print and tell the user,

13573
00:23:05,440 --> 00:23:09,730
basically, here is this many dollars in change.

13574
00:23:11,260 --> 00:23:14,860
And of course I have to add an F to activate that fstring.

13575
00:23:16,570 --> 00:23:21,010
So now we're ready to call is_transaction_successful

13576
00:23:21,550 --> 00:23:25,630
and we're going to pass in the money_received and the drink_cost.

13577
00:23:26,050 --> 00:23:30,280
So the money_received is, of course, going to be the payment from the previous step

13578
00:23:30,730 --> 00:23:35,530
that was calculated from all the coins and the drink_cost is going to be based

13579
00:23:35,530 --> 00:23:38,650
on the drink and it's under the key cost,

13580
00:23:38,980 --> 00:23:43,750
which we can confirm up here. So the drink is this dictionary,

13581
00:23:44,080 --> 00:23:46,550
and then there's the ingredients and the cost.

13582
00:23:48,760 --> 00:23:49,030
Right.

13583
00:23:49,030 --> 00:23:54,030
Let's rerun our code and let's test it out with something. Let's say

13584
00:23:54,070 --> 00:23:57,100
I want a latte. Please insert coins.

13585
00:23:57,280 --> 00:24:02,170
Let's say we tried to insert insufficient coins.

13586
00:24:03,700 --> 00:24:07,150
It tells us, sorry, that's not enough money. Money is refunded.

13587
00:24:07,660 --> 00:24:11,020
But let's try giving it enough coins this time.

13588
00:24:13,750 --> 00:24:14,950
And in this case,

13589
00:24:14,980 --> 00:24:19,980
it accepts it and it tells us here's $2.42 in change rounded to two decimal places,

13590
00:24:21,700 --> 00:24:25,570
and we're ready to take another drink. So now if we hit report,

13591
00:24:25,630 --> 00:24:30,630
you can see that we've now earned some money in our machine and all our code is

13592
00:24:30,730 --> 00:24:32,440
working as expected.

13593
00:24:33,550 --> 00:24:37,450
So we're now ready to tackle the final part, which is to make coffee.

13594
00:24:38,050 --> 00:24:42,580
If the transaction is successful and there are enough resources to make the

13595
00:24:42,580 --> 00:24:42,880
drinks

13596
00:24:42,880 --> 00:24:47,350
the user selected, then the ingredients to make the drink should be deducted from

13597
00:24:47,350 --> 00:24:51,010
the coffee machine's resources. For example, before I purchased a latte

13598
00:24:51,070 --> 00:24:52,660
I have 300ml of water.

13599
00:24:53,050 --> 00:24:57,010
After I purchased the latte that gets reduced by 200 to 100,

13600
00:24:57,340 --> 00:25:00,520
and the same happens to the other ingredient values.

13601
00:25:00,790 --> 00:25:04,750
But of course the money goes up because I've already taken payment in the

13602
00:25:04,750 --> 00:25:08,770
previous step. Let's take this into an if statement

13603
00:25:08,800 --> 00:25:13,800
because remember this function returns true when the payment is accepted or false

13604
00:25:14,440 --> 00:25:15,820
if their money is insufficient.

13605
00:25:16,240 --> 00:25:19,510
So this is where we're going to call on next function

13606
00:25:19,540 --> 00:25:23,740
which is to make coffee. So let's create

13607
00:25:23,770 --> 00:25:27,940
make_coffee. In order to make coffee

13608
00:25:27,940 --> 00:25:32,940
we need to know the drink name so that we can tell the user here's your

13609
00:25:33,910 --> 00:25:34,810
particular drink.

13610
00:25:35,230 --> 00:25:39,130
And it will also need to have the order ingredients.

13611
00:25:40,060 --> 00:25:45,060
The goal of this function is to deduct the required ingredients from the

13612
00:25:46,960 --> 00:25:49,660
resources. In order to do that,

13613
00:25:49,840 --> 00:25:54,840
we're going to get hold of the order ingredients and we're going to loop

13614
00:25:55,900 --> 00:26:00,730
through them. So for each of the items in the order_ingredients,

13615
00:26:01,630 --> 00:26:05,770
we're going to look inside the resources for that particular item

13616
00:26:06,220 --> 00:26:10,570
and we're going to subtract the amount that's in the order_ingredients.

13617
00:26:11,620 --> 00:26:14,410
And once all of that is done, so the for loop

13618
00:26:14,440 --> 00:26:19,440
ends, then we can print and we can even add an emoji to this.

13619
00:26:21,160 --> 00:26:21,993
Right.

13620
00:26:22,390 --> 00:26:22,930
On a Mac

13621
00:26:22,930 --> 00:26:27,850
you can insert an emoji by going to edit, emoji, and symbols. On Windows

13622
00:26:27,850 --> 00:26:32,560
the easiest thing to do is to just search Google for a coffee emoji

13623
00:26:32,890 --> 00:26:35,200
and then copy and paste it into your code.

13624
00:26:35,860 --> 00:26:40,060
So now let's call make_coffee here and notice how

13625
00:26:40,240 --> 00:26:42,940
if we are here the machine is on

13626
00:26:44,250 --> 00:26:47,610
and it's not any of these other previous choices,

13627
00:26:48,270 --> 00:26:52,530
and then the resource is sufficient and the transaction is successful.

13628
00:26:52,560 --> 00:26:57,560
These are all the steps that it took us to get to this particular stage in our

13629
00:26:57,630 --> 00:26:58,463
code.

13630
00:26:58,680 --> 00:27:02,790
So now we're going to make the coffee and we're going to pass in two things.

13631
00:27:02,820 --> 00:27:06,900
So let's just see the prompt again. We need to give the drink name

13632
00:27:06,960 --> 00:27:11,960
which is going to be the choice that the user entered, and the order ingredients

13633
00:27:12,060 --> 00:27:16,260
which is going to come from the drink and it's under the key ingredients.

13634
00:27:17,700 --> 00:27:21,810
So now we're ready to test and run our code once more.

13635
00:27:22,230 --> 00:27:26,340
Let's say, I want a latte and I'm going to insert lots of money.

13636
00:27:27,180 --> 00:27:31,200
And now I have my latte. If I hit report,

13637
00:27:31,350 --> 00:27:36,150
you should be able to see that a bunch of resources were subtracted and the

13638
00:27:36,150 --> 00:27:40,800
money is increased. If I try to order another latte,

13639
00:27:40,830 --> 00:27:45,750
it should fail because there is not enough water and there's not enough milk.

13640
00:27:46,620 --> 00:27:51,030
You can see that it's not going to let me go through as long as one of the

13641
00:27:51,030 --> 00:27:52,770
ingredients is not enough.

13642
00:27:54,390 --> 00:27:59,070
So we've now managed to fulfill all of the requirements of our coffee machine

13643
00:27:59,100 --> 00:28:00,450
program. Now,

13644
00:28:00,450 --> 00:28:04,620
this probably a lot more complexity that you could add to your coffee machine,

13645
00:28:05,010 --> 00:28:10,010
but basically what I wanted to show you today is how you would program something

13646
00:28:11,160 --> 00:28:12,660
that exists in real life,

13647
00:28:12,690 --> 00:28:17,690
like a coffee machine and even something that seems as simple as a coffee

13648
00:28:18,030 --> 00:28:20,760
machine. It can lead to a lot of errors,

13649
00:28:20,790 --> 00:28:25,080
a lot of bugs and a lot of anguish, but its good.

13650
00:28:25,080 --> 00:28:26,370
The more that you struggle,

13651
00:28:26,670 --> 00:28:31,170
the closer you get towards your goals. And the clearer the role of the function,

13652
00:28:31,560 --> 00:28:35,100
the easier it will be for you to untangle the logic.

13653
00:28:36,480 --> 00:28:39,990
If you want to take a look at the completed code that I've written in this

13654
00:28:39,990 --> 00:28:40,823
lesson,

13655
00:28:40,860 --> 00:28:45,000
then simply head over to the link that's in the resources and you'll be able to

13656
00:28:45,000 --> 00:28:45,720
see it in

13657
00:28:45,720 --> 00:28:50,700
Repl.it. Make sure that you've managed to fix any issues in your code

13658
00:28:51,060 --> 00:28:56,060
and that it runs exactly the same way as expected in the program requirements.



13659
00:00:00,030 --> 00:00:04,500
Hey! Welcome to Day 16 of 100 Days of Code. Now

13660
00:00:04,530 --> 00:00:05,100
today,

13661
00:00:05,100 --> 00:00:08,250
we're going to be pulling out the big guns, we're going to be learning about

13662
00:00:08,280 --> 00:00:12,210
Object Oriented Programming otherwise known as OOP.

13663
00:00:12,630 --> 00:00:16,890
Why are we learning about it? Well, if you think back to yesterday's project,

13664
00:00:17,310 --> 00:00:21,450
some of you I'm sure at some point during the project, would have had this

13665
00:00:21,450 --> 00:00:25,740
feeling of what on earth is going on with my code?

13666
00:00:25,920 --> 00:00:30,060
And the reason is because our code is getting more complex,

13667
00:00:30,330 --> 00:00:32,369
it's trying to do a lot of things,

13668
00:00:32,490 --> 00:00:35,850
and it's trying to manage a whole bunch of relationships.

13669
00:00:36,150 --> 00:00:39,540
So one function is changing a variable,

13670
00:00:39,540 --> 00:00:43,740
and then that same function is doing something else to another variable.

13671
00:00:44,100 --> 00:00:48,810
And at some point, the logic of our code starts looking very, very spaghetti-

13672
00:00:48,810 --> 00:00:49,643
like.

13673
00:00:49,920 --> 00:00:54,630
And it's at this point where it's really hard to track and remember what's

13674
00:00:54,720 --> 00:00:56,460
actually going on in our code.

13675
00:00:57,180 --> 00:01:00,510
So this style of programming is called Procedural

13676
00:01:00,510 --> 00:01:05,510
Programming where we set up procedures or functions that do particular things.

13677
00:01:06,600 --> 00:01:11,250
And then one procedure leads to another procedure, and all in all, the computer's

13678
00:01:11,250 --> 00:01:15,690
mostly working from top to bottom and then jumping out into a function as

13679
00:01:15,690 --> 00:01:16,523
needed.

13680
00:01:17,250 --> 00:01:22,110
Procedural programming is one of the earliest paradigms of Programming.

13681
00:01:22,410 --> 00:01:27,210
In fact, back in the days when we had older languages like Fortran and COBOL,

13682
00:01:27,840 --> 00:01:30,840
they rely pretty much exclusively on procedural

13683
00:01:30,840 --> 00:01:32,670
programming like what we've been doing.

13684
00:01:33,780 --> 00:01:36,120
But the increase in complexity,

13685
00:01:36,150 --> 00:01:40,410
the increase in the number of relationships that we need to remember and manage

13686
00:01:40,800 --> 00:01:45,540
starts making it look a bit like the dating history of the Kardashians.

13687
00:01:45,930 --> 00:01:47,160
And it gets very,

13688
00:01:47,160 --> 00:01:52,020
very confusing because everybody has been in touch with somebody else. Now,

13689
00:01:52,080 --> 00:01:56,280
the kind of relationships I prefer are one to one, me and my couch.

13690
00:01:56,700 --> 00:02:01,700
So how can we maintain a simple relationship in our code while being able to

13691
00:02:03,120 --> 00:02:07,320
write more and more complex projects? Well,

13692
00:02:07,350 --> 00:02:11,430
this is where the Object-Oriented paradigm comes in really handy.

13693
00:02:12,090 --> 00:02:17,090
Now let's imagine that you're tasked with creating the program for a self-

13694
00:02:18,150 --> 00:02:21,090
driving car. Now, as you can imagine,

13695
00:02:21,090 --> 00:02:24,660
this is a pretty complex project and it's many,

13696
00:02:24,660 --> 00:02:29,220
many notches above the coffee machine that we've been struggling with so far.

13697
00:02:29,970 --> 00:02:33,630
But what if you broke it down? What is a self-driving car?

13698
00:02:34,020 --> 00:02:38,160
What are the different components that make up a self-driving car? Well,

13699
00:02:38,220 --> 00:02:43,220
it probably needs some sort of camera module to keep track of what's on the road

13700
00:02:43,560 --> 00:02:45,360
and to recognize what's on the road,

13701
00:02:45,990 --> 00:02:50,990
it will probably need a form of lane detection to know if we're actually within

13702
00:02:51,750 --> 00:02:56,750
the lane or if we need to turn off or if we need to park, and it will need some

13703
00:02:58,560 --> 00:03:02,740
way of navigating so that when the user says, I want to go to the bank,

13704
00:03:02,980 --> 00:03:05,290
they identify the branch they want to go to,

13705
00:03:05,380 --> 00:03:09,370
and then the navigation gets set up and the car knows how to get there.

13706
00:03:09,940 --> 00:03:14,080
And finally, you'll probably need some form of fuel management, right?

13707
00:03:14,140 --> 00:03:16,330
What should happen when the fuel gets low?

13708
00:03:16,660 --> 00:03:20,290
Should it go and automatically recharge at a specified point?

13709
00:03:20,800 --> 00:03:24,010
Now I'm obviously simplifying this task. There's a lot,

13710
00:03:24,010 --> 00:03:27,160
a lot more that goes into making an automated car.

13711
00:03:27,730 --> 00:03:32,140
But we've already managed to break it down into several modules that we can

13712
00:03:32,320 --> 00:03:34,000
think about tackling, right?

13713
00:03:34,540 --> 00:03:39,540
But imagine if you have a whole team who are all working on this project and

13714
00:03:39,790 --> 00:03:40,750
within that team,

13715
00:03:40,750 --> 00:03:45,010
there's sub-teams who are working on each of these different modules.

13716
00:03:45,490 --> 00:03:50,490
Well then by splitting up this big complex task into separate modules,

13717
00:03:51,520 --> 00:03:54,640
then we can all work on this car simultaneously,

13718
00:03:55,570 --> 00:03:57,820
massively improving our productivity,

13719
00:03:58,180 --> 00:04:02,500
making it much quicker to eventually build all the software for this car.

13720
00:04:03,280 --> 00:04:06,850
Plus on top of that, a lot of these modules are reusable.

13721
00:04:07,270 --> 00:04:12,270
So if it just so happens that the next year we're tasked with building a drone,

13722
00:04:12,640 --> 00:04:16,390
well, a lot of those programming modules that we built, like the camera module,

13723
00:04:16,390 --> 00:04:18,700
the fuel management, the navigation,

13724
00:04:18,910 --> 00:04:23,910
that's all going to be incredibly useful in our drone delivery software as well.

13725
00:04:24,370 --> 00:04:29,370
And because we've taken out these individual chunks of code and modularized them

13726
00:04:29,890 --> 00:04:32,020
using Object Oriented Programming,

13727
00:04:32,260 --> 00:04:36,340
we won't have to code them up again in the same way that we might need to

13728
00:04:36,460 --> 00:04:38,380
if we were using procedural programming.

13729
00:04:39,180 --> 00:04:44,180
So what exactly is all Object Oriented Programming? We've seen that we can split

13730
00:04:46,140 --> 00:04:49,620
a larger task into that smaller pieces.

13731
00:04:50,070 --> 00:04:54,690
And each of those pieces can be worked on by separate teams, separate people,

13732
00:04:54,990 --> 00:04:59,460
and also each of those pieces become reusable if we need the same

13733
00:04:59,460 --> 00:05:03,030
functionality in the future. But Object Oriented

13734
00:05:03,030 --> 00:05:05,940
Programming actually takes that concept even further.

13735
00:05:06,510 --> 00:05:08,130
And I think the best way to explain it

13736
00:05:08,340 --> 00:05:11,730
is to imagine that you are tasked with running a restaurant.

13737
00:05:12,420 --> 00:05:16,320
So you take over this restaurant from your long lost uncle

13738
00:05:16,440 --> 00:05:19,980
and you realize that it's actually really hard running a restaurant.

13739
00:05:20,550 --> 00:05:25,550
So, first off, you have to be the receptionist and you reserve seats for your

13740
00:05:26,220 --> 00:05:29,400
restaurant visitor's and then when they order something,

13741
00:05:29,430 --> 00:05:32,520
you have to be the waitress and bring them their order.

13742
00:05:32,970 --> 00:05:35,370
And then of course the order needs to be cooked up, right?

13743
00:05:35,370 --> 00:05:39,600
So you're also gonna run into the kitchen and be the chef, create the thing that

13744
00:05:39,600 --> 00:05:41,130
they ordered and finally,

13745
00:05:41,130 --> 00:05:44,550
you're also going to be the cleaner tidying up after everybody

13746
00:05:44,580 --> 00:05:47,070
once they've left. As you can imagine,

13747
00:05:47,070 --> 00:05:50,280
if you were one person having to do all of these tasks,

13748
00:05:50,730 --> 00:05:55,410
that's going to be a pretty rough day. There are in fact one-man restaurants,

13749
00:05:55,500 --> 00:05:58,310
and I've seen some work really in well Japan,

13750
00:05:58,700 --> 00:06:01,970
where you have one person who's taking the order,

13751
00:06:02,300 --> 00:06:05,300
who's making the food, who's tidying up after you.

13752
00:06:05,720 --> 00:06:10,040
But the limitation here though, is that look at how many seats he has.

13753
00:06:10,190 --> 00:06:15,190
You can't have a large restaurant running everything by yourself. In the same

13754
00:06:16,340 --> 00:06:20,780
way we can't create a very complex and really large software project

13755
00:06:21,170 --> 00:06:25,370
if we are using a procedural style of programming where we're sort of running a

13756
00:06:25,370 --> 00:06:27,380
one man band. It gets very,

13757
00:06:27,380 --> 00:06:30,620
very complex and very hard to manage very quickly.

13758
00:06:31,280 --> 00:06:33,260
So lets consider the alternative.

13759
00:06:33,770 --> 00:06:38,770
What if we had just hired a bunch of people where they each have their own

13760
00:06:39,290 --> 00:06:42,590
individual roles. They're trained for it, they know what to do.

13761
00:06:42,800 --> 00:06:46,940
The waiter knows how to wait and the chef knows how to cook. Well,

13762
00:06:46,940 --> 00:06:47,600
in this case,

13763
00:06:47,600 --> 00:06:52,600
you could just be the manager and you can manage all of your staff and tell them

13764
00:06:53,210 --> 00:06:54,560
what it is that they need to do.

13765
00:06:54,980 --> 00:06:59,510
But then you won't have to worry about the nitty-gritty details of exactly how

13766
00:06:59,510 --> 00:07:02,660
they need to go about doing their jobs. So for example,

13767
00:07:02,660 --> 00:07:04,040
you don't need to tell the waiter

13768
00:07:04,050 --> 00:07:08,300
how to wait on customers and you don't need to tell the chef how to cook an egg

13769
00:07:08,450 --> 00:07:10,370
because they already know how to do that.

13770
00:07:11,000 --> 00:07:16,000
And we can use the same concept to simplify the relationships in our code and

13771
00:07:17,090 --> 00:07:21,080
make it scalable for a larger and more complex project.


13772
00:00:00,060 --> 00:00:04,620
We've seen a little bit of why Object Oriented Programming is really useful,

13773
00:00:04,980 --> 00:00:09,510
but now let's take a look at how you would actually go about implementing Object

13774
00:00:09,510 --> 00:00:10,530
Oriented Programming.

13775
00:00:11,370 --> 00:00:15,240
So in the last lesson we talked of this example of the restaurant,

13776
00:00:15,750 --> 00:00:18,600
where we hired three types of staff,

13777
00:00:19,020 --> 00:00:24,020
and we had a manager who would then manage all of these three different types of

13778
00:00:24,300 --> 00:00:25,830
staff. Now,

13779
00:00:26,160 --> 00:00:31,160
the reason why Object Oriented Programming is called that is because it's trying

13780
00:00:31,410 --> 00:00:34,350
to model a real world object.

13781
00:00:34,770 --> 00:00:39,570
So let's say that we are creating a virtual restaurant. Well, in this case,

13782
00:00:39,570 --> 00:00:43,320
we probably have to model a virtual chef, waiter,

13783
00:00:43,350 --> 00:00:44,760
cleaner, and manager.

13784
00:00:45,270 --> 00:00:50,270
So let's say that we were going to model a waiter. In order to model our waiter,

13785
00:00:50,910 --> 00:00:55,910
there's probably two things we need to think about: what it has and what it does.

13786
00:00:56,790 --> 00:01:00,540
In terms of what it has, well, it might have variables like,

13787
00:01:00,570 --> 00:01:02,790
is it holding a plate, true or false?

13788
00:01:03,360 --> 00:01:08,360
Or which tables is it responsible for? Maybe table 4, 5 and 6.

13789
00:01:09,510 --> 00:01:11,940
Now it also has things that it does.

13790
00:01:12,390 --> 00:01:17,390
Maybe they're able to take an order to the chef and maybe they also need to take

13791
00:01:17,670 --> 00:01:22,470
payments and add money to the restaurant. So these two different things,

13792
00:01:22,500 --> 00:01:25,650
what the waiter has and what the waiter does are

13793
00:01:25,650 --> 00:01:30,650
the two most important things that make up an object: its attributes and its

13794
00:01:32,520 --> 00:01:34,980
methods. By looking at the code,

13795
00:01:35,010 --> 00:01:39,750
you can pretty much see that the attributes is basically a variable.

13796
00:01:40,260 --> 00:01:45,260
An attribute is just a fancy word for a variable that's associated with a

13797
00:01:46,410 --> 00:01:48,660
modeled object like our waiter here.

13798
00:01:49,260 --> 00:01:52,500
Because it's not just a free floating bit of a variable, right?

13799
00:01:52,500 --> 00:01:54,690
It's not just somewhere in our main.py.

13800
00:01:55,050 --> 00:01:59,130
It's actually a variable that's attached to a particular object.

13801
00:01:59,400 --> 00:02:02,130
It's the waiter's tables responsible.

13802
00:02:02,850 --> 00:02:05,970
Now the method goes along the same vein. These,

13803
00:02:06,060 --> 00:02:08,520
as you can clearly see, are just functions

13804
00:02:09,090 --> 00:02:14,090
but we call it a method because it's a function that a particular modeled

13805
00:02:14,730 --> 00:02:16,500
object can do.

13806
00:02:17,160 --> 00:02:22,160
We need a waiter object to take the order and we need a waiter object to take

13807
00:02:22,260 --> 00:02:25,950
payment. Again, these are not just free-floating functions.

13808
00:02:26,520 --> 00:02:31,520
Now, there's a lot of new words that are part of Object Oriented Programming and

13809
00:02:31,740 --> 00:02:35,160
programming in general, we're going to see them again and again,

13810
00:02:35,220 --> 00:02:38,160
and eventually it's going to become a word that's going to be in your

13811
00:02:38,160 --> 00:02:42,720
dictionary. But for now, just remember that in Object Oriented

13812
00:02:42,720 --> 00:02:43,350
Programming,

13813
00:02:43,350 --> 00:02:48,350
we're trying to model real-life objects and those objects have things

13814
00:02:49,590 --> 00:02:51,720
and they also can do things.

13815
00:02:52,110 --> 00:02:54,780
The things that they have are their attributes

13816
00:02:55,200 --> 00:02:59,980
and these are usually modeled with variables, and the things that they can do

13817
00:03:00,280 --> 00:03:03,400
are called methods and they are modeled by functions.

13818
00:03:04,060 --> 00:03:09,060
So essentially, an object is just a way of combining some piece of data and some

13819
00:03:10,810 --> 00:03:14,170
functionality altogether in the same thing.

13820
00:03:15,370 --> 00:03:20,370
But we can actually have multiple objects generated from the same type.

13821
00:03:21,190 --> 00:03:24,940
So when we've modeled a particular job in our virtual restaurant

13822
00:03:25,030 --> 00:03:26,800
like the waiter's job,

13823
00:03:27,490 --> 00:03:31,090
and we figured out what are the things that the waiter have and what are the

13824
00:03:31,090 --> 00:03:33,220
things that it can do, well,

13825
00:03:33,220 --> 00:03:38,220
we can actually generate multiple versions of the same object. So we could have

13826
00:03:38,950 --> 00:03:43,270
Henry who's a waiter and we can also have Betty who's a waiter,

13827
00:03:43,840 --> 00:03:48,460
and we can generate as many of these as we want from the same blueprint.

13828
00:03:48,970 --> 00:03:53,970
And in OOP we call this blueprint, or this type, a class.

13829
00:03:56,170 --> 00:04:01,170
And we call these individual objects that are generated from the blueprint

13830
00:04:01,480 --> 00:04:02,320
an object.

13831
00:04:03,070 --> 00:04:08,070
So now let's take a look at how you use these class blueprints to create an actual

13832
00:04:08,380 --> 00:04:08,950
object.


13833
00:00:00,000 --> 00:00:05,000
[inaudible]

13834
00:00:06,020 --> 00:00:08,210
So here's a blueprint for a car.

13835
00:00:08,840 --> 00:00:13,010
And that blueprint that specifies what the color of the car is,

13836
00:00:13,010 --> 00:00:17,900
how many wheels it should have, what its mileage is, how much fuel it has,

13837
00:00:17,900 --> 00:00:22,310
all of those bits of data combined with all of its functionality

13838
00:00:22,340 --> 00:00:26,840
like the ability to drive, the ability to stop and break.

13839
00:00:27,470 --> 00:00:32,470
And that blueprint which models a real-life car is known as the class.

13840
00:00:33,380 --> 00:00:35,060
And it's from this blueprint,

13841
00:00:35,060 --> 00:00:40,040
this class, that we can generate as many objects as we want. Now,

13842
00:00:40,040 --> 00:00:43,970
the object is the actual thing that we're going to be using in our code.

13843
00:00:44,720 --> 00:00:47,090
The code equivalent of what just happened,

13844
00:00:47,150 --> 00:00:50,300
creating a new object from a blueprint,

13845
00:00:50,480 --> 00:00:54,770
looks like this in Python. You have the class

13846
00:00:55,010 --> 00:00:59,930
which is normally written with the first letter of each word capitalized,

13847
00:01:00,350 --> 00:01:02,510
which is known as Pascal case.

13848
00:01:03,230 --> 00:01:08,030
This is to differentiate it from all the variable and function names that we

13849
00:01:08,030 --> 00:01:12,140
give in Python, where each word is separated by underscores.

13850
00:01:12,740 --> 00:01:13,790
So in this case,

13851
00:01:14,090 --> 00:01:19,090
the car is the object and it gets created from this car blueprint.

13852
00:01:21,320 --> 00:01:26,320
All we have to do to create the object from the class is to give the object a

13853
00:01:27,260 --> 00:01:32,150
name, it can be anything you want, set it equal to the name of the class,

13854
00:01:32,570 --> 00:01:36,920
and then the parentheses, which in the same way as it activates the function,

13855
00:01:37,220 --> 00:01:41,090
it activates the construction of this object from the blueprint.

13856
00:01:41,990 --> 00:01:46,220
Now, in order for us to practice this and to see it in action,

13857
00:01:46,580 --> 00:01:51,170
we're going to using a library of code that somebody else has created.

13858
00:01:51,830 --> 00:01:56,830
And what it allows us to do is to finally start putting graphics onto the

13859
00:01:57,290 --> 00:01:59,990
screen. The premise is really simple.

13860
00:02:00,410 --> 00:02:05,240
Let's say that somebody somewhere has created a blueprint for a turtle.

13861
00:02:05,870 --> 00:02:09,050
Now this turtle has a paintbrush on its back,

13862
00:02:09,500 --> 00:02:13,460
and you can tell the turtle to dip the paintbrush in different colors,

13863
00:02:13,790 --> 00:02:17,120
pick a different of size paint brushes and most importantly,

13864
00:02:17,210 --> 00:02:19,430
you can tell it to draw onto the screen.

13865
00:02:20,300 --> 00:02:25,300
This library is called turtle graphics and it's preloaded with every download of

13866
00:02:25,820 --> 00:02:29,150
Python so we can get started with it straight away.

13867
00:02:30,200 --> 00:02:34,100
So go ahead and open up PyCharm and create a new project.

13868
00:02:34,700 --> 00:02:39,440
Now I'm going to call mine, buy the old convention day 16 start

13869
00:02:41,240 --> 00:02:45,350
and making sure that I'm on the latest version of Python in my base interpreter,

13870
00:02:45,680 --> 00:02:50,660
I'm going to click create. Now, once you've created the new project,

13871
00:02:51,080 --> 00:02:54,800
go ahead and create the main.py as we have always done.

13872
00:02:55,310 --> 00:02:56,143
In our case,

13873
00:02:56,150 --> 00:03:00,610
we're going to be creating an object from a blueprint that somebody else has

13874
00:03:00,610 --> 00:03:01,630
already created,

13875
00:03:02,230 --> 00:03:05,650
and the blueprint lives in another module called turtle.

13876
00:03:05,890 --> 00:03:07,990
So we'll have to import that module.

13877
00:03:09,190 --> 00:03:11,680
And we know that from previously,

13878
00:03:11,710 --> 00:03:16,710
we can import other modules and use the things that are declared inside the

13879
00:03:17,110 --> 00:03:21,340
module by importing it, and then tapping into various things in there.

13880
00:03:21,790 --> 00:03:25,600
So for example, if I was to go and create another new file

13881
00:03:25,810 --> 00:03:27,400
which I'll call another_module.

13882
00:03:29,470 --> 00:03:33,250
Now inside another_module, let's say I create another variable.

13883
00:03:34,810 --> 00:03:38,290
And now I can go back to my main.py,

13884
00:03:38,320 --> 00:03:42,190
I can import my another_module I just created

13885
00:03:42,580 --> 00:03:44,920
and I can tap into that variable

13886
00:03:44,950 --> 00:03:49,950
that's inside another module by saying another module dot another variable.

13887
00:03:51,100 --> 00:03:54,010
Now let's go ahead and run this code as it is.

13888
00:03:55,570 --> 00:04:00,400
And you can see the value of that variable from the other module being used

13889
00:04:00,430 --> 00:04:02,200
inside our main.py.

13890
00:04:03,070 --> 00:04:07,510
Now I want to do the same thing using turtle, but in this case,

13891
00:04:07,540 --> 00:04:11,050
I want to tap into the class called turtle

13892
00:04:11,320 --> 00:04:16,269
that's declared inside this turtle module. The wording's a little bit confusing,

13893
00:04:16,300 --> 00:04:17,500
but let me show you what I mean.

13894
00:04:18,070 --> 00:04:23,070
So I'm going to tap into the turtle module and I'm going to get hold of a

13895
00:04:24,640 --> 00:04:28,390
turtle class. So notice how it's got the C here

13896
00:04:28,690 --> 00:04:33,070
denoting that this is a blueprint for creating a new turtle

13897
00:04:33,070 --> 00:04:38,070
object. Now, remember that to actually construct the object

13898
00:04:38,770 --> 00:04:41,260
we need to add the parentheses at the end,

13899
00:04:41,710 --> 00:04:46,600
and now we can save all of this into an actual object, which we get to name.

13900
00:04:47,020 --> 00:04:49,180
So I'm going to call my turtle timmy

13901
00:04:49,870 --> 00:04:54,790
and now I've got a new turtle object. Essentially,

13902
00:04:54,790 --> 00:04:57,550
we've done the same thing as we have done up here.

13903
00:04:58,060 --> 00:05:01,090
We've imported a module called turtle,

13904
00:05:01,630 --> 00:05:05,140
we've tapped into that turtle module here,

13905
00:05:05,620 --> 00:05:09,460
and then we've fetched something from that module. In this case,

13906
00:05:09,460 --> 00:05:10,990
it's a variable. And in this case,

13907
00:05:11,020 --> 00:05:15,580
it's a class which is denoted by the capital T, the Pascal case here.

13908
00:05:16,300 --> 00:05:19,300
And then we've used the parentheses to initialize

13909
00:05:19,330 --> 00:05:22,870
or basically construct an object from that blueprint

13910
00:05:23,230 --> 00:05:26,530
and we've saved it into an object called Timmy.

13911
00:05:27,550 --> 00:05:31,990
Now I can simplify this code to make it look more like what we had in the slides

13912
00:05:32,290 --> 00:05:35,380
by saying, instead of import turtle, I can say from,

13913
00:05:35,380 --> 00:05:39,850
from the turtle module import the turtle class.

13914
00:05:40,420 --> 00:05:43,150
So now, instead of writing all of this,

13915
00:05:43,210 --> 00:05:45,520
I can simply just write Timmy

13916
00:05:45,790 --> 00:05:50,790
equals a new object created from the turtle class and it's constructed.

13917
00:05:52,000 --> 00:05:55,540
This is how we would construct our new object.

13918
00:05:56,770 --> 00:05:59,780
So now I have this brand new object called Timmy

13919
00:06:00,290 --> 00:06:02,480
and if I go ahead and print timmy

13920
00:06:02,900 --> 00:06:07,900
you can see that when I run this code what gets printed is a new turtle object

13921
00:06:09,770 --> 00:06:11,180
from the turtle module

13922
00:06:11,480 --> 00:06:14,990
and it's saved at this location in the computer's memory.

13923
00:06:15,590 --> 00:06:17,690
So this is very different from say

13924
00:06:17,690 --> 00:06:21,050
if we just printed a string or a number.

13925
00:06:21,440 --> 00:06:24,710
It works completely differently. In this case,

13926
00:06:24,740 --> 00:06:29,660
it's actually a object that's being printed. Now,

13927
00:06:29,660 --> 00:06:31,640
what can we do with this object?

13928
00:06:32,380 --> 00:06:37,380
[inaudible]

13929
00:06:37,660 --> 00:06:40,480
Now, as we saw before with our car

13930
00:06:40,510 --> 00:06:44,440
object it has certain attributes, right?

13931
00:06:44,680 --> 00:06:49,680
Like speed and fuel, data that it could keep track of that are really important

13932
00:06:51,190 --> 00:06:55,720
to the modeling of an actual car object. Now,

13933
00:06:55,720 --> 00:06:58,720
when it comes to accessing these attributes,

13934
00:06:58,840 --> 00:07:03,840
the syntax or the code looks like this. Car in this case is the object

13935
00:07:04,480 --> 00:07:09,480
and then we use a dot or a full stop to separate the object from the actual

13936
00:07:10,960 --> 00:07:14,530
attribute that we want to get hold of, which in this case is speed.

13937
00:07:15,100 --> 00:07:18,940
What this code does is it essentially identifies the object

13938
00:07:19,660 --> 00:07:23,590
and then it says, from this object get the speed attribute.

13939
00:07:24,130 --> 00:07:28,030
This is actually gonna represent the speed of this particular car

13940
00:07:28,030 --> 00:07:31,270
object. Coming back to our turtle.

13941
00:07:31,900 --> 00:07:36,900
One of the other classes that is inside this turtle module is something called

13942
00:07:37,480 --> 00:07:38,313
screen.

13943
00:07:38,680 --> 00:07:43,680
And the screen represents the window in which this turtle is going to show up.

13944
00:07:45,400 --> 00:07:47,320
So let's go ahead and create this screen

13945
00:07:47,320 --> 00:07:50,260
object. I'm going to call my object my_screen

13946
00:07:50,800 --> 00:07:54,970
and then I'm going to create it from this blueprint of a screen that we

13947
00:07:54,970 --> 00:07:59,320
imported. Now we can tap into one of the screens properties

13948
00:07:59,770 --> 00:08:03,070
which is called the canvas height and canvas width.

13949
00:08:03,370 --> 00:08:07,690
So let's see what the height is, and notice how we're using that dot notation.

13950
00:08:07,960 --> 00:08:12,670
So this is the object and then separated by a dot we've got the attributes that

13951
00:08:12,670 --> 00:08:14,980
we want to access from this object.

13952
00:08:15,400 --> 00:08:19,390
So I'm going to print that into the console. Now,

13953
00:08:19,390 --> 00:08:21,220
when I go ahead and run this code,

13954
00:08:21,550 --> 00:08:25,030
you'll see a window pop up very briefly

13955
00:08:25,480 --> 00:08:29,530
and that was the screen on which our turtle is going to show up.

13956
00:08:31,060 --> 00:08:33,850
Now, if you take a look in the console,

13957
00:08:34,150 --> 00:08:37,510
you can see that not only have we printed the turtle object,

13958
00:08:37,840 --> 00:08:42,840
but we've also printed the height of the canvas for this particular screen that

13959
00:08:43,600 --> 00:08:44,500
we've created.

13960
00:08:45,610 --> 00:08:50,380
So the screen here is the object and that canvas height is an attribute that's

13961
00:08:50,380 --> 00:08:52,360
associated with that screen.

13962
00:08:58,910 --> 00:09:02,540
Now, in addition to the things that an object has,

13963
00:09:02,780 --> 00:09:06,140
so data that it holds like the speed or the fuel

13964
00:09:06,470 --> 00:09:11,060
which we've already seen, it also has things that it can do, right?

13965
00:09:11,060 --> 00:09:16,060
So functions that are associated with that particular object. And these functions

13966
00:09:16,730 --> 00:09:19,880
when it's tied to an object is known as a method.

13967
00:09:20,630 --> 00:09:24,530
But essentially we would use it the same way as we have done with any other

13968
00:09:24,530 --> 00:09:26,330
function that we've created so far.

13969
00:09:27,560 --> 00:09:30,980
The only difference is the syntax. Firstly,

13970
00:09:31,010 --> 00:09:35,570
we would tap into the car object and then using that same dot notation that

13971
00:09:35,570 --> 00:09:39,500
we saw with the attributes, we're saying car.stop.

13972
00:09:39,710 --> 00:09:43,640
So essentially what we're doing is we're getting hold of the object and then

13973
00:09:43,640 --> 00:09:47,870
we're calling this function that's associated with that object,

13974
00:09:48,170 --> 00:09:52,790
which is known as a method. So coming back to our code here,

13975
00:09:53,060 --> 00:09:57,830
one of the things that we can do with this screen object that we've created here

13976
00:09:58,070 --> 00:10:02,840
called my_screen is we can tap into one of its functions.

13977
00:10:03,320 --> 00:10:06,110
And because it's a function that's tied to an object,

13978
00:10:06,110 --> 00:10:07,640
it's actually called a method.

13979
00:10:08,150 --> 00:10:11,930
So the method name is called exitonclick.

13980
00:10:12,530 --> 00:10:17,390
And what this will allow us to do is instead of having our screen show up and

13981
00:10:17,390 --> 00:10:20,510
then quickly disappear when our code ends,

13982
00:10:21,110 --> 00:10:26,110
this exitonclick will allow our program to continue running until we click on

13983
00:10:27,980 --> 00:10:30,530
the screen and then it exits our code.

13984
00:10:31,010 --> 00:10:36,010
So let's try this again and notice how we've now got our screen show up

13985
00:10:36,770 --> 00:10:41,240
and this canvas has a height of 300 and a width of 300,

13986
00:10:41,930 --> 00:10:46,730
but now we can see our turtle in the form of the arrow. So this is our

13987
00:10:46,730 --> 00:10:48,830
a little Timmy shown up in the middle.

13988
00:10:49,280 --> 00:10:53,600
And our code is only going to exit when the screen detects a click

13989
00:10:53,720 --> 00:10:58,720
because we've called this function that's associated with the screen object.

13990
00:10:59,000 --> 00:11:00,530
So now if I click on the screen,

13991
00:11:00,800 --> 00:11:05,390
you can see process finished with exit code zero, our code is ended and the screen

13992
00:11:05,390 --> 00:11:08,900
has disappeared. Now there are other functions as well.

13993
00:11:08,900 --> 00:11:13,310
So if we take our little timmy object and we say, well, timmy,

13994
00:11:13,520 --> 00:11:17,090
why don't we change the shape of you on the screen

13995
00:11:17,150 --> 00:11:19,550
and we'll change you into an actual turtle?

13996
00:11:20,750 --> 00:11:22,310
So now when I run the code,

13997
00:11:23,180 --> 00:11:27,770
you can see that object in the center is now in the shape of a turtle.

13998
00:11:29,000 --> 00:11:29,300
Now,

13999
00:11:29,300 --> 00:11:33,590
if you want to know how I know about all these things I can do with the turtle

14000
00:11:33,590 --> 00:11:36,440
graphics library, then of course,

14001
00:11:36,470 --> 00:11:40,160
I'm getting all of this information from the documentation.

14002
00:11:40,610 --> 00:11:42,200
So in the course resources,

14003
00:11:42,230 --> 00:11:45,740
you'll see a link to this Turtle graphics documentation,

14004
00:11:46,160 --> 00:11:49,520
and it tells you all the things that you can do with your turtle.

14005
00:11:49,940 --> 00:11:50,900
So for example,

14006
00:11:50,900 --> 00:11:55,510
you can call all of these methods that are associated with your turtle object to

14007
00:11:55,510 --> 00:11:58,180
get your turtle to move and draw,

14008
00:11:58,540 --> 00:12:03,400
and you can also use it to change its position or change its coordinates,

14009
00:12:03,580 --> 00:12:07,720
as well as doing things like changing the color or resetting.

14010
00:12:08,140 --> 00:12:12,250
And you can browse through this list to see how you would use each of these

14011
00:12:12,250 --> 00:12:15,040
things. So for example,

14012
00:12:15,370 --> 00:12:18,550
if I wanted to change the color of my turtle,

14013
00:12:18,880 --> 00:12:22,600
I can do that by simply just calling this method, color,

14014
00:12:23,020 --> 00:12:25,420
and then inside the parentheses

14015
00:12:25,450 --> 00:12:29,650
I pass in the argument of the actual color string.

14016
00:12:30,400 --> 00:12:35,400
Now you can choose from a whole range of colors just by putting in the name as a

14017
00:12:36,280 --> 00:12:40,240
string into that method which is called color.

14018
00:12:40,870 --> 00:12:45,870
So go ahead and see if you can change our turtle timmy's color from the default

14019
00:12:46,960 --> 00:12:51,960
which is just black to one of the colors that you see in this link here,

14020
00:12:53,290 --> 00:12:55,840
and the link, of course, is in the course resources.

14021
00:12:59,170 --> 00:13:03,070
So let's say I want to change it to a coral color like this one.

14022
00:13:03,670 --> 00:13:07,510
All I have to do is tap into my object which is called timmy,

14023
00:13:08,050 --> 00:13:11,860
and then call the method which is called color onto it.

14024
00:13:12,220 --> 00:13:14,260
And you can see all the methods are 

14025
00:13:14,260 --> 00:13:16,870
denoted by a little M here in the circle.

14026
00:13:17,500 --> 00:13:21,520
Now this color, of course, expects some sort of input.

14027
00:13:22,180 --> 00:13:27,180
So the input that it expects is a actual string of a color.

14028
00:13:28,030 --> 00:13:32,500
And my string is going to be coral, which I picked up from here.

14029
00:13:33,640 --> 00:13:37,510
So now let's run our code and see what it looks like now.

14030
00:13:37,960 --> 00:13:39,580
Once the screen refreshes,

14031
00:13:39,610 --> 00:13:43,090
you can see that our turtle is now a nice coral color,

14032
00:13:43,600 --> 00:13:46,990
and we've managed to do all of this to change the shape,

14033
00:13:47,020 --> 00:13:52,020
change the color, all because we were able to call these functions

14034
00:13:52,720 --> 00:13:53,800
which belong to this

14035
00:13:53,800 --> 00:13:58,800
object. Now see if you can use the documentation here and figure out how to get the

14036
00:13:59,440 --> 00:14:02,560
turtle to move forward by a hundred paces.

14037
00:14:03,760 --> 00:14:06,250
Pause the video and try to complete this challenge.

14038
00:14:08,860 --> 00:14:09,190
All right.

14039
00:14:09,190 --> 00:14:13,420
So we saw earlier that it has a whole bunch of move and draw methods.

14040
00:14:13,870 --> 00:14:18,550
So we can simply use this forward method to get it to move forward.

14041
00:14:19,030 --> 00:14:21,070
And in terms of the parameters that it takes,

14042
00:14:21,340 --> 00:14:25,750
it takes a number which is going to determine the distance that it's going to

14043
00:14:25,750 --> 00:14:26,740
move forward by.

14044
00:14:27,580 --> 00:14:31,600
So we said that we wanted our turtle to move forward by a hundred paces.

14045
00:14:33,040 --> 00:14:37,900
All I have to do is specify the object that I want to move which is timmy,

14046
00:14:38,470 --> 00:14:43,360
and then call that method forward and pass in the distance.

14047
00:14:43,450 --> 00:14:47,650
So I said a hundred paces. So now let's run our code again,

14048
00:14:48,430 --> 00:14:53,180
and you can see that little turtle just move forward by a hundred paces.

14049
00:14:53,630 --> 00:14:58,630
So now we've seen how to create a new Object from a blueprint,

14050
00:15:00,020 --> 00:15:05,020
we've seen how we can tap into its attributes by using the object name dot and

14051
00:15:08,060 --> 00:15:09,350
then the name of the attribute.

14052
00:15:09,650 --> 00:15:14,450
So this is the same as having a variable that's associated with that object.

14053
00:15:14,930 --> 00:15:15,590
And finally,

14054
00:15:15,590 --> 00:15:20,300
we've seen how we can call methods that are associated with the object.

14055
00:15:20,540 --> 00:15:21,410
For example, here

14056
00:15:21,410 --> 00:15:25,190
when we changed the shape or when we changed the color or when we told it to go

14057
00:15:25,190 --> 00:15:27,830
forwards. Now in the next lesson,

14058
00:15:27,860 --> 00:15:32,000
I'm going to show you how you can get hold of more external libraries

14059
00:15:32,300 --> 00:15:37,160
not just turtle, but a whole world of packages that you can tap into.

14060
00:15:37,460 --> 00:15:42,230
And you can start using these packages of code that other programmers have

14061
00:15:42,230 --> 00:15:43,130
already developed,

14062
00:15:43,430 --> 00:15:48,430
and simply by creating objects from the existing blueprints and reading the

14063
00:15:48,710 --> 00:15:52,070
documentation to get it to do various things that you want it to.

14064
00:15:52,550 --> 00:15:55,580
So for all of that and more, I'll see you on the next lesson.


14065
00:00:00,330 --> 00:00:05,330
Now I've mentioned a lot about using code that other developers have written and

14066
00:00:05,939 --> 00:00:09,960
the most common way to do this is through using packages of code.

14067
00:00:10,710 --> 00:00:11,543
In this lesson,

14068
00:00:11,820 --> 00:00:16,200
I'll show you how to integrate an existing package of code into our project so

14069
00:00:16,200 --> 00:00:20,820
that we can practice creating objects and working with attributes and methods.

14070
00:00:21,480 --> 00:00:26,480
Now we've seen modules of code where each file that we create in our project is

14071
00:00:27,870 --> 00:00:29,850
essentially a module in itself.

14072
00:00:30,540 --> 00:00:35,540
But a package differs from a module in the sense that it's actually a whole

14073
00:00:36,120 --> 00:00:41,120
bunch of code that other people have written, lots and lots of files all packaged

14074
00:00:41,610 --> 00:00:46,470
together to achieve some sort of goal or purpose. Now,

14075
00:00:46,470 --> 00:00:51,450
let's say that we wanted to create a table of Pokemon and their type.

14076
00:00:51,780 --> 00:00:56,780
So we wanted some way of documenting that Pikachu is an electric type and maybe

14077
00:00:58,590 --> 00:01:01,950
Squirtle is a water type. Now,

14078
00:01:01,980 --> 00:01:06,930
if we wanted to do that in ASCII so that we could print it in the console, well

14079
00:01:06,930 --> 00:01:10,410
then we would have to go about formatting it and it'll be quite painful.

14080
00:01:10,800 --> 00:01:15,800
So we might have to print some sort of pipe and then maybe we would have the

14081
00:01:16,650 --> 00:01:20,580
name of the field, so Pokemon name,

14082
00:01:21,180 --> 00:01:25,410
and then maybe another pipe. And then we would have the name of the next column,

14083
00:01:25,740 --> 00:01:27,000
which is their type.

14084
00:01:27,720 --> 00:01:32,010
And then finally we would close that off and then we would have to print some

14085
00:01:32,010 --> 00:01:36,000
sort of a horizontal line

14086
00:01:36,120 --> 00:01:40,890
maybe like this and so on and so forth just to create this table.

14087
00:01:41,100 --> 00:01:45,660
And it's quite difficult if you're not used to manipulating ASCII and

14088
00:01:45,660 --> 00:01:49,080
visualizing it. I certainly am not up to this task.

14089
00:01:49,770 --> 00:01:52,500
So what could we do instead? Well,

14090
00:01:52,500 --> 00:01:57,500
we could search for a package that other developers have created to achieve this

14091
00:01:58,200 --> 00:02:02,880
goal. And the place that we would do that is somewhere called PyPi,

14092
00:02:03,330 --> 00:02:06,030
which is the Python package index.

14093
00:02:06,480 --> 00:02:11,480
And this is a bunch of software for the Python programming language that is

14094
00:02:11,640 --> 00:02:16,080
developed and shared by the Python community. So we can see their source code,

14095
00:02:16,350 --> 00:02:17,460
but more importantly,

14096
00:02:17,490 --> 00:02:22,290
we can see how to implement the code and how to put it into our project.

14097
00:02:23,190 --> 00:02:26,670
In here, I'm going to search for something called prettytable.

14098
00:02:27,600 --> 00:02:32,600
And this is a very simple library that is going to help us to display tables in

14099
00:02:34,410 --> 00:02:36,000
a ASCII format.

14100
00:02:36,780 --> 00:02:41,130
We can click on the project links to find out more about it.

14101
00:02:41,820 --> 00:02:45,150
And this will take us to the Google code archive,

14102
00:02:45,420 --> 00:02:47,370
where the documentation is hosted.

14103
00:02:47,940 --> 00:02:50,460
If you go to Wikis and go to tutorial,

14104
00:02:50,580 --> 00:02:53,700
you'll see some documentation on how to use it.

14105
00:02:54,210 --> 00:02:59,210
Now, this particular package is not as extensive as the turtle graphics package.

14106
00:03:00,760 --> 00:03:03,670
So there's actually not a lot of things you can do with it,

14107
00:03:04,090 --> 00:03:06,850
but its got more than we need for our use case.

14108
00:03:07,840 --> 00:03:12,640
The first thing we have to do is to install this package into our project.

14109
00:03:13,120 --> 00:03:15,220
Now, unlike the turtle package

14110
00:03:15,220 --> 00:03:19,780
which is already preloaded with every copy of Python, in order to use the

14111
00:03:19,780 --> 00:03:23,110
packages that you find in the Python package index,

14112
00:03:23,620 --> 00:03:25,660
you actually have to install it.

14113
00:03:25,750 --> 00:03:30,550
So here's how we do it in PyCharm. First, go to the preferences,

14114
00:03:30,730 --> 00:03:35,590
so in Windows, I think it's under file and then preferences. On Mac is under 

14115
00:03:35,590 --> 00:03:37,030
PyCharm and then preferences.

14116
00:03:37,600 --> 00:03:40,540
And then here you'll see a whole bunch of things you can change

14117
00:03:40,570 --> 00:03:44,950
including the editor or appearance which we've already messed around with.

14118
00:03:45,400 --> 00:03:47,770
But I want you to click on your project.

14119
00:03:47,950 --> 00:03:52,660
So my project is called day-16-start and then we're going to go into the project

14120
00:03:52,660 --> 00:03:57,660
interpreter. And here we can click on the plus button to install any package that

14121
00:04:00,310 --> 00:04:04,930
you find in the Python package index. Make a note of what it's called.

14122
00:04:05,020 --> 00:04:09,670
So ours is called PrettyTable and then we're going to search for it inside the

14123
00:04:09,670 --> 00:04:12,310
available packages. And once we found it,

14124
00:04:12,340 --> 00:04:14,650
we're going to select it and then click install.

14125
00:04:15,610 --> 00:04:16,990
If you are working with Repl.it,

14126
00:04:17,019 --> 00:04:21,010
you can also install packages just by going to the packages tab

14127
00:04:21,310 --> 00:04:26,050
and then again, searching for PrettyTable. Once you click on the package 

14128
00:04:26,050 --> 00:04:29,920
that you want, click on the plus button to add it to your project.

14129
00:04:30,640 --> 00:04:34,120
Now Repl.it is a little bit weird because it says installing

14130
00:04:34,120 --> 00:04:38,320
but it never actually confirms the success. But once you click run,

14131
00:04:38,440 --> 00:04:41,170
everything will go through and it will work perfectly

14132
00:04:41,440 --> 00:04:45,130
as long as you see it in your list of packages here. Now,

14133
00:04:45,130 --> 00:04:48,640
if you want to remove the package, you can simply click on the minus button,

14134
00:04:49,000 --> 00:04:50,650
but now we're going to work with it.

14135
00:04:52,450 --> 00:04:54,790
So now it's installed successfully,

14136
00:04:55,030 --> 00:04:57,790
we can go ahead and close this down and click okay.

14137
00:04:58,360 --> 00:05:02,650
And we can now access this package called PrettyTable in our code.

14138
00:05:03,220 --> 00:05:03,640
Again,

14139
00:05:03,640 --> 00:05:08,440
I'm going to import it so I can say import prettytable.

14140
00:05:08,560 --> 00:05:13,120
And now I can use everything that's inside this package. Now,

14141
00:05:13,150 --> 00:05:14,650
if you want to see the source code,

14142
00:05:14,830 --> 00:05:19,720
you can actually right-click on it and select, go to, implementation.

14143
00:05:19,780 --> 00:05:24,250
And this will take you to the Python file where this entire prettytable is

14144
00:05:24,250 --> 00:05:27,250
implemented, so all of the code that they've written.

14145
00:05:28,120 --> 00:05:31,330
It's a little bit daunting and it's got a lot of code in it,

14146
00:05:31,630 --> 00:05:35,620
but we don't have to worry about how the code is created and how it works.

14147
00:05:36,040 --> 00:05:41,040
All we need to do is look at the documentation for this package and see how we

14148
00:05:41,290 --> 00:05:45,190
can implement it into our project. Now in the next lesson,

14149
00:05:45,460 --> 00:05:46,540
we're going to get some practice

14150
00:05:46,540 --> 00:05:51,540
constructing a prettytable object and using the documentation to explore this

14151
00:05:51,700 --> 00:05:55,630
object's attributes and methods. For all of that and more, I'll see you there.


14152
00:00:00,300 --> 00:00:03,780
In the last lesson, we added an external library to our project.

14153
00:00:04,230 --> 00:00:09,060
Now it's time to construct a prettytable object and practice using its methods

14154
00:00:09,060 --> 00:00:12,090
and attributes. Our starting point as always

14155
00:00:12,120 --> 00:00:14,190
is the documentation. Here

14156
00:00:14,190 --> 00:00:17,580
you can see how to construct an actual prettytable object.

14157
00:00:18,420 --> 00:00:22,950
So let's use what we've learned previously about constructing objects to go

14158
00:00:22,950 --> 00:00:27,360
ahead and create this object from the class. Now, firstly,

14159
00:00:27,360 --> 00:00:30,600
we're going to do the same thing as we did previously with turtle.

14160
00:00:31,110 --> 00:00:33,630
We're going to tap into the package prettytable,

14161
00:00:34,050 --> 00:00:39,050
and then we're going to import the prettytable class noted by the c here.

14162
00:00:41,340 --> 00:00:44,640
Now that we have access to this class inside our code,

14163
00:00:45,030 --> 00:00:50,030
I want you to go ahead and create an object from this pretty table class and the

14164
00:00:50,370 --> 00:00:54,780
object should be named table. So pause the video and give that a go.

14165
00:00:57,120 --> 00:00:59,790
All right. So we said I'll object is going to be called table,

14166
00:01:00,210 --> 00:01:04,319
and then we're going to construct it from this class called a prettytable.

14167
00:01:05,069 --> 00:01:07,770
So we're going to put it in with its casing.

14168
00:01:08,130 --> 00:01:11,160
So this is the Pascal case that we spoke about earlier on,

14169
00:01:11,640 --> 00:01:15,060
and then in order to actually give it the go-ahead and construct,

14170
00:01:15,420 --> 00:01:18,090
we have to add the parentheses at the end.

14171
00:01:18,630 --> 00:01:23,630
So now you've created a new object called table from this prettytable and we

14172
00:01:24,960 --> 00:01:28,770
can actually go ahead and print this table. And even at this stage,

14173
00:01:28,800 --> 00:01:33,450
it's ready going to start printing out a bare bones version all the table.

14174
00:01:33,810 --> 00:01:36,060
But of course this table has no datas

14175
00:01:36,180 --> 00:01:39,960
So it's actually kind of hard to visualize what all of these ASCII characters

14176
00:01:39,960 --> 00:01:41,610
are doing in an empty table.

14177
00:01:42,390 --> 00:01:47,390
But no matter, the next thing we can see in our documentation is how to go about

14178
00:01:48,420 --> 00:01:52,110
adding columns. So it's got this method, remember methods

14179
00:01:52,110 --> 00:01:57,110
are functions that are associated with an object and this method will add columns to

14180
00:01:57,930 --> 00:02:02,670
whatever table we specify. Now the method takes two inputs.

14181
00:02:02,970 --> 00:02:05,220
One is the name of the field,

14182
00:02:05,820 --> 00:02:09,270
so our field names are Pokemon name and type.

14183
00:02:10,350 --> 00:02:13,320
And then we've got a list of strings

14184
00:02:13,620 --> 00:02:18,420
which is going to be the data that's going to go into that column. Essentially,

14185
00:02:18,510 --> 00:02:21,690
every time we call that method, add column,

14186
00:02:21,990 --> 00:02:25,740
it's going to allow us to give a field name as a string,

14187
00:02:26,070 --> 00:02:29,970
and then a list of data in order that they're going to go into the table.

14188
00:02:30,450 --> 00:02:35,450
So we're going to add our table one column at a time. Using that documentation

14189
00:02:36,600 --> 00:02:41,600
see if you can add both of these columns to our table object and then once

14190
00:02:43,080 --> 00:02:46,410
you've done that, we're going to print the table object again

14191
00:02:46,740 --> 00:02:51,270
and we should be to see an ASCII table. This is what you're aiming for

14192
00:02:51,270 --> 00:02:52,470
when you run your code.

14193
00:02:52,830 --> 00:02:57,810
It should print out your table and nicely format it in this ASCII style.

14194
00:02:58,200 --> 00:03:00,460
Pause the video and complete the challenge.

14195
00:03:04,110 --> 00:03:04,380
Right?

14196
00:03:04,380 --> 00:03:04,650
All right.

14197
00:03:04,650 --> 00:03:09,510
So we've got our table object and remember that methods are functions that are

14198
00:03:09,510 --> 00:03:14,190
associated with the object. So we say table object dot,

14199
00:03:14,310 --> 00:03:16,140
and then we get to call that method,

14200
00:03:16,530 --> 00:03:21,090
add_column. And notice how it takes two inputs,

14201
00:03:21,120 --> 00:03:24,240
the field name and the data that's going to go into the column.

14202
00:03:24,840 --> 00:03:26,700
So the field name is going to be a string,

14203
00:03:27,000 --> 00:03:31,350
and this is going to be the name at the top of our column. So in our case,

14204
00:03:31,350 --> 00:03:35,490
it was called Pokemon name. And then after a comma,

14205
00:03:35,490 --> 00:03:40,380
we get to put in a list of all the data that's going to go into our column.

14206
00:03:41,280 --> 00:03:44,880
So just as a quick reminder, our first column contains Pikachu,

14207
00:03:44,880 --> 00:03:46,140
Squirtle and Charmander.

14208
00:03:46,140 --> 00:03:51,140
Now, we should have added a column to our table and you can safely ignore all

14209
00:03:53,340 --> 00:03:57,690
of these typos because of course, Pokemon names are not real words.

14210
00:03:58,020 --> 00:04:01,200
But if you wanted to check against the poke dex

14211
00:04:01,380 --> 00:04:04,110
you can actually go to this link in the course resources,

14212
00:04:04,440 --> 00:04:08,490
and you can see how each of these Pokemon are spelt. Now,

14213
00:04:08,700 --> 00:04:12,870
the next thing we want to add is the associated type with each of these

14214
00:04:12,870 --> 00:04:17,130
Pokemons. So for example, Charmander is a fire type of Pokemon,

14215
00:04:17,160 --> 00:04:19,230
Squirtle is a water type Pokemon,

14216
00:04:19,709 --> 00:04:23,430
but essentially we're going to add the data that's in the second column.

14217
00:04:23,880 --> 00:04:27,270
So the field name is called type, and then we've got three pieces of data

14218
00:04:27,570 --> 00:04:32,430
that's going to need to go into the list in the same order as the previous

14219
00:04:32,430 --> 00:04:35,370
Pokemon. That way we'll actually match them up properly.

14220
00:04:37,200 --> 00:04:40,110
So if you haven't already, go ahead and add the second column.

14221
00:04:40,920 --> 00:04:41,753
Right?

14222
00:04:44,460 --> 00:04:45,090
So again,

14223
00:04:45,090 --> 00:04:50,090
I'm going to call the same method on my table and this time I'm going to add the

14224
00:04:50,310 --> 00:04:55,310
field type and the data is going to go in the order of the data that I had from

14225
00:04:56,670 --> 00:05:01,440
the previous column. So the first one is the type of Pikachu which is electric.

14226
00:05:02,010 --> 00:05:06,900
And the second one is the type for Squirtle, which is Water. And finally,

14227
00:05:06,930 --> 00:05:08,880
we've got fire for Charmander.

14228
00:05:09,480 --> 00:05:12,210
So now this will be matched to this,

14229
00:05:12,300 --> 00:05:14,730
this will be matched this and so on and so forth.

14230
00:05:15,210 --> 00:05:17,700
If we go ahead and print our table now, so

14231
00:05:17,820 --> 00:05:20,820
if we run our code and take a look in here,

14232
00:05:20,850 --> 00:05:25,850
you can see how we've now got a nicely formatted table by creating an object

14233
00:05:27,870 --> 00:05:32,640
from this pre-made prettytable class and we've now called this method

14234
00:05:32,730 --> 00:05:36,810
add_column to add two columns. And when we print our table,

14235
00:05:36,870 --> 00:05:41,160
it's now nicely formatted in ASCII. Now,

14236
00:05:41,190 --> 00:05:44,880
remember that we can also change the object's attributes.

14237
00:05:45,900 --> 00:05:48,780
For example, if we wanted to change the appearance of our table,

14238
00:05:49,170 --> 00:05:53,580
that's probably controlled by an attribute. If you scroll down,

14239
00:05:53,640 --> 00:05:58,640
you can see that we can change the table style by tapping into each of these attributes.

14240
00:05:59,600 --> 00:06:03,710
For example, if I wanted to change the alignment of my data in the table,

14241
00:06:04,040 --> 00:06:09,040
I can change this align attribute to L for left-align, C for the center-align or

14242
00:06:10,550 --> 00:06:11,900
R for right-aligned.

14243
00:06:13,010 --> 00:06:17,750
Do you remember how to tap into an object's attribute? If you do,

14244
00:06:18,110 --> 00:06:23,110
go ahead and see if you can change our table from center-aligned by default to

14245
00:06:23,600 --> 00:06:27,650
left-aligned. Pause the video and try to complete that challenge.

14246
00:06:28,180 --> 00:06:29,013
Right?

14247
00:06:30,340 --> 00:06:31,090
So again,

14248
00:06:31,090 --> 00:06:36,090
we're going to tap into our table object and we're going to use the dot

14249
00:06:36,250 --> 00:06:38,290
notation, but this time

14250
00:06:38,320 --> 00:06:42,280
instead of accessing a method associated with the object

14251
00:06:42,550 --> 00:06:47,110
which is of course denoted by the M, we're going to access an attribute or in

14252
00:06:47,110 --> 00:06:50,140
this case, they've titled F which is a field.

14253
00:06:50,710 --> 00:06:55,510
And the one that we want is this align. So let's go ahead and type align,

14254
00:06:55,960 --> 00:07:00,340
and now we have access to this attribute. Let's see what happens

14255
00:07:00,340 --> 00:07:03,340
if I go ahead and print this align attribute.

14256
00:07:04,270 --> 00:07:08,770
You can see that for both of my columns, Pokemon name and type,

14257
00:07:09,100 --> 00:07:12,370
the align attribute is set to C, which is centered.

14258
00:07:13,240 --> 00:07:18,240
What I want to do is change the whole table to be left-aligned. Just as we would

14259
00:07:18,730 --> 00:07:21,760
with any other variable we can of course print it,

14260
00:07:22,090 --> 00:07:23,800
but we can also change it.

14261
00:07:24,280 --> 00:07:28,090
And we would change a variable by just using the equal sign, right?

14262
00:07:28,390 --> 00:07:31,330
So let's change the alignment to left-aligned,

14263
00:07:31,810 --> 00:07:33,490
and now let's run the code again.

14264
00:07:34,570 --> 00:07:39,570
And you can see now both of my columns are now aligning with the left hand

14265
00:07:40,150 --> 00:07:40,983
margin.

14266
00:07:42,700 --> 00:07:45,580
So we've seen how we can use attributes

14267
00:07:45,640 --> 00:07:49,480
like the ones here to change the styling of our table.

14268
00:07:49,750 --> 00:07:52,300
We've seen how we can use methods

14269
00:07:52,510 --> 00:07:57,510
like add_column or add_row to work with this table object and get it to

14270
00:07:58,810 --> 00:08:02,680
perform some sort of functionality, like adding pieces of data to it.

14271
00:08:03,130 --> 00:08:08,130
And we've seen how we can create new objects by simply constructing it from the

14272
00:08:08,350 --> 00:08:13,000
blueprint class. Feel free to mess around with prettytable

14273
00:08:13,240 --> 00:08:15,940
as much as you like change, other things about it,

14274
00:08:16,000 --> 00:08:17,770
or add different pieces of data.

14275
00:08:18,130 --> 00:08:23,130
But once you're happy with creating the object changing the attributes and

14276
00:08:23,770 --> 00:08:25,150
calling the methods,

14277
00:08:25,510 --> 00:08:28,900
then head over to the next lesson where I've got a quiz for you.


14278
00:00:00,240 --> 00:00:05,240
Now as we start using objects and their attributes and methods more and more,

14279
00:00:05,640 --> 00:00:10,410
we're going to start to see why it is that they are so useful and so loved by

14280
00:00:10,410 --> 00:00:12,120
programmers. Now,

14281
00:00:12,150 --> 00:00:17,150
I think one of the non-programmers that explained OOP the best is actually the late

14282
00:00:18,350 --> 00:00:19,183
Steve Jobs.

14283
00:00:19,730 --> 00:00:24,730
And he has this brilliant example that makes it really clear why objects are so

14284
00:00:25,880 --> 00:00:28,100
great. In his story

14285
00:00:28,280 --> 00:00:33,280
he talks about this concept where let's say you were traveling to Japan and

14286
00:00:33,440 --> 00:00:35,450
after a long flight,

14287
00:00:36,020 --> 00:00:40,910
you finally land and you go outside and there's beautiful cherry blossoms, Mt.

14288
00:00:40,910 --> 00:00:44,270
Fuji is looking wonderful. But unfortunately on the flight,

14289
00:00:44,630 --> 00:00:45,920
you had soiled your T-shirt.

14290
00:00:45,950 --> 00:00:50,950
You were overly eager with the tomato juice and you spilled everything upon

14291
00:00:51,560 --> 00:00:55,460
yourself. So what do we do? Well,

14292
00:00:55,520 --> 00:00:58,700
you're in this unfamiliar city and you have no idea

14293
00:00:58,730 --> 00:01:02,420
even whether the hell you are let alone where to find the nearest

14294
00:01:02,600 --> 00:01:06,320
dry cleaners or launderette. And plus on top of that,

14295
00:01:06,380 --> 00:01:09,470
you don't have the local currency. They take yen,

14296
00:01:09,500 --> 00:01:14,240
but you only have pounds and you don't even speak Japanese. So what do you do?

14297
00:01:14,750 --> 00:01:18,890
It's going to be a real struggle trying to solve this problem. Well,

14298
00:01:19,130 --> 00:01:22,970
you staying at a hotel, right? And the hotel staff probably speak English.

14299
00:01:23,420 --> 00:01:28,250
So you go the receptionist and you tell it the hotel that, Hey,

14300
00:01:28,280 --> 00:01:32,270
my t-shirt is soiled and they say, Hey, no problems. We'll take that from you.

14301
00:01:32,420 --> 00:01:35,240
And we'll go and handle all of that messy stuff.

14302
00:01:35,540 --> 00:01:37,280
We know how to find the dry cleaners,

14303
00:01:37,550 --> 00:01:40,820
we can pay them in the local currency and we speak the local language.

14304
00:01:41,270 --> 00:01:44,990
And what you get back is just a nice clean t-shirt.

14305
00:01:45,500 --> 00:01:50,360
So this is similar to the process of working with objects. Essentially,

14306
00:01:50,360 --> 00:01:52,640
if you have this hotel object

14307
00:01:52,790 --> 00:01:56,450
which has a blueprint for how to handle dry cleaning

14308
00:01:56,510 --> 00:02:01,510
some sort of clothing, then all you have to do is just get the object hotel and

14309
00:02:03,170 --> 00:02:06,500
then call its associated method dry clean,

14310
00:02:06,920 --> 00:02:10,039
and then it will do all of the messy stuff for you.

14311
00:02:10,280 --> 00:02:14,090
And you don't have to worry about the implementation of this function at all.

14312
00:02:14,750 --> 00:02:18,020
So now you can work with multiple objects

14313
00:02:18,350 --> 00:02:23,330
getting them to do different things and trust that they know how to manage their

14314
00:02:23,330 --> 00:02:26,510
data and how to perform the necessary functionality.

14315
00:02:27,350 --> 00:02:30,410
Coming back to a problem that we've already solved

14316
00:02:30,710 --> 00:02:35,090
creating that coffee machine with all of the program requirements. Well,

14317
00:02:35,090 --> 00:02:39,740
it's time to put our Object Oriented Programming knowledge to the test because

14318
00:02:39,740 --> 00:02:44,180
we're going to be making a OOP version of our coffee machine.

14319
00:02:44,990 --> 00:02:48,020
Now the program still has the same requirements

14320
00:02:48,020 --> 00:02:51,050
as before. You have to print reports for

14321
00:02:51,050 --> 00:02:54,350
all the resources, you have to check if the resources are sufficient,

14322
00:02:54,530 --> 00:02:59,530
process coins, check transaction is successful, and finally make coffee.

14323
00:03:00,100 --> 00:03:03,700
But in this case, you're going to be working with objects.

14324
00:03:04,810 --> 00:03:06,220
In the course resources,

14325
00:03:06,250 --> 00:03:11,110
you'll find a link to the starting project for the OOP coffee machine.

14326
00:03:11,620 --> 00:03:13,090
So if you head over to this link,

14327
00:03:13,240 --> 00:03:17,170
you can see that there's a whole bunch of code that we've already written for

14328
00:03:17,170 --> 00:03:18,250
you. Now,

14329
00:03:18,280 --> 00:03:22,300
the idea here is you're not going to touch any of these other files,

14330
00:03:22,300 --> 00:03:27,160
the money machine, the menu, or the coffee maker. All that code has already

14331
00:03:27,160 --> 00:03:28,360
been written for you

14332
00:03:28,690 --> 00:03:31,750
and it's almost like you're working with an external library.

14333
00:03:32,260 --> 00:03:35,020
You're just going to trust that they do what they say they do.

14334
00:03:35,980 --> 00:03:40,270
And you'll find a link to this coffee machine documentation that I've created

14335
00:03:40,630 --> 00:03:45,630
which describes in detail what each of these classes or blueprints allow you to

14336
00:03:46,390 --> 00:03:50,560
do. So once you construct an object from the menu item class,

14337
00:03:50,830 --> 00:03:54,340
then you have access to the name attribute, the cost attribute,

14338
00:03:54,340 --> 00:03:58,690
ingredient attributes, and there's also descriptions of what it should do

14339
00:03:58,930 --> 00:04:00,610
and what an example might be.

14340
00:04:01,450 --> 00:04:05,860
You have access to all of these classes and you can build objects from each of

14341
00:04:05,860 --> 00:04:08,620
these classes to solve this project.

14342
00:04:09,670 --> 00:04:13,540
In order to work with PyCharm, all you need to do is to download the zip

14343
00:04:13,540 --> 00:04:16,810
file it with all the starting code from our course resource website.

14344
00:04:17,260 --> 00:04:18,160
Alternatively,

14345
00:04:18,190 --> 00:04:22,270
if you are already logged in on Repl.it, simply fork the project and then click

14346
00:04:22,270 --> 00:04:26,350
on these three dots to download the zip file here. Now,

14347
00:04:26,350 --> 00:04:28,510
once you found that in your downloads folder,

14348
00:04:28,540 --> 00:04:31,450
all you have to do is uncompressed or unzip it.

14349
00:04:32,020 --> 00:04:35,140
And then you can go into PyCharm and open it here.

14350
00:04:35,260 --> 00:04:40,030
So click on the open button and then navigate to where you had that folder

14351
00:04:40,030 --> 00:04:43,330
downloaded. Remember it needs to be unzipped.

14352
00:04:44,260 --> 00:04:48,550
If you're on windows, right-click the zip file and choose extract all.

14353
00:04:48,880 --> 00:04:50,260
Then click extract.

14354
00:04:50,560 --> 00:04:54,280
You should see an unzipped folder popup next to your zip file.

14355
00:04:55,240 --> 00:05:00,240
If you're on Mac then all you need to do is just double-click on the .zip file.

14356
00:05:01,750 --> 00:05:04,000
Now, if we click open on that folder,

14357
00:05:04,660 --> 00:05:08,740
then it will open up this project. And when you open up the project folder,

14358
00:05:08,770 --> 00:05:11,230
you'll see all of the same files.

14359
00:05:11,770 --> 00:05:16,300
Now you're only going to be working from the main.py. In fact,

14360
00:05:16,300 --> 00:05:20,200
I don't even want you to care that much about the code that's in the other

14361
00:05:20,200 --> 00:05:21,033
files.

14362
00:05:21,190 --> 00:05:25,840
It has class definitions and a whole bunch of other things that we're going to

14363
00:05:25,840 --> 00:05:27,370
learn about in the next lesson.

14364
00:05:27,790 --> 00:05:32,170
But for now, I want you to treat it as if it is an external library

14365
00:05:32,350 --> 00:05:37,000
which you're just going to use. At the very beginning of the main.py file,

14366
00:05:37,060 --> 00:05:41,380
I've already imported all four classes that you are going to be using; menu,

14367
00:05:41,410 --> 00:05:44,110
menu item, coffee maker, and money machine.

14368
00:05:44,800 --> 00:05:49,690
Now all of these classes are documented in the coffee machine documentation

14369
00:05:49,690 --> 00:05:50,523
website.

14370
00:05:50,800 --> 00:05:55,800
All you have to do is head over to this website and read through what each of

14371
00:05:56,140 --> 00:05:59,930
the classes do. Some of them have attributes and methods,

14372
00:06:00,260 --> 00:06:02,120
others just have methods.

14373
00:06:02,720 --> 00:06:07,720
So each of these classes have already pre-written code that do a lot of the

14374
00:06:08,450 --> 00:06:12,740
heavy lifting and all of the code that we had to write when we wrote the coffee

14375
00:06:12,740 --> 00:06:14,330
machine code from scratch.

14376
00:06:14,810 --> 00:06:19,790
But this time you're only going to be using these four classes and the objects

14377
00:06:19,790 --> 00:06:24,470
created from them in order to achieve exactly the same goals as before.

14378
00:06:25,100 --> 00:06:29,120
So while the goals are fresh in your mind from the previous day,

14379
00:06:29,540 --> 00:06:33,500
you should review the code from the previous day and then have a read of the

14380
00:06:33,500 --> 00:06:38,500
documentation and see how you would implement exactly the same project

14381
00:06:38,930 --> 00:06:43,310
but this time using only the objects created from these classes.

14382
00:06:43,880 --> 00:06:47,300
You'll need to spend some time on this because you'll need to think through how

14383
00:06:47,300 --> 00:06:52,300
to create objects from these blueprint classes and then how to use the objects,

14384
00:06:52,510 --> 00:06:56,420
how to call the methods and the logic that's required to put everything

14385
00:06:56,420 --> 00:06:58,430
together. Pause the video

14386
00:06:58,430 --> 00:07:02,480
now, have a think about this problem, and try to make the coffee machine do

14387
00:07:02,480 --> 00:07:07,480
exactly the same and have all the same functionality as the coffee machine that

14388
00:07:08,030 --> 00:07:10,190
you created in yesterday's project.


14389
00:00:00,450 --> 00:00:07,140
If you got stuck or if you had any problems completing this project, the first port of call is to review

14390
00:00:07,140 --> 00:00:08,380
the lessons you learned today.

14391
00:00:08,760 --> 00:00:14,280
It might just be that you need to see some of the theory a few more times and listen to it a few more

14392
00:00:14,280 --> 00:00:19,410
times and practice it a few more times before you're ready to tackle this final challenge.

14393
00:00:20,070 --> 00:00:24,660
But if you have completed it and you just want to see the solution, then I'm going to go through it

14394
00:00:24,660 --> 00:00:25,380
with you right now.

14395
00:00:26,400 --> 00:00:30,210
Again, we're going to complete all of the program requirements step by step.

14396
00:00:30,570 --> 00:00:38,610
So the first thing is to print a report for all of the current resources in the coffee machine. Back

14397
00:00:38,610 --> 00:00:39,090
in PyCharm,

14398
00:00:39,330 --> 00:00:44,310
I'm actually going to collapse this entire project folder because I'm not going to be writing any code

14399
00:00:44,310 --> 00:00:46,140
other than inside main.py.

14400
00:00:47,040 --> 00:00:54,270
Now you can see up here, we've got access to four classes. And if we take a look inside the documentation,

14401
00:00:54,480 --> 00:01:00,990
you can see that both the coffeemaker class and the money machine class have a method called report.

14402
00:01:01,560 --> 00:01:06,690
And this is going to print a report of all of the resources like water, milk, coffee,

14403
00:01:06,990 --> 00:01:09,810
and this is going to print a report of the current profit.

14404
00:01:10,260 --> 00:01:16,290
So our final report is going to be both a report from the money machine as well as the coffee maker.

14405
00:01:17,310 --> 00:01:22,380
Let's go ahead and start off by creating some objects from these classes.

14406
00:01:22,950 --> 00:01:27,840
For example, the money machine is going to be just called money_machine

14407
00:01:27,870 --> 00:01:30,250
or you could call it my_money_machine.

14408
00:01:30,270 --> 00:01:33,090
You can actually name your objects anything you like.

14409
00:01:33,720 --> 00:01:41,160
But I'm just going to use the default Python snake case to create a new variable money_machine, which

14410
00:01:41,160 --> 00:01:46,980
is going to hold my object. And my object is going to be created, of course, from the money machine

14411
00:01:46,980 --> 00:01:47,520
class.

14412
00:01:48,090 --> 00:01:51,900
And the construction happens when I add the parentheses.

14413
00:01:52,500 --> 00:01:58,440
So now I have a object created and stored inside this variable money_machine.

14414
00:01:59,280 --> 00:02:06,870
Now, if I want this money machine to create a report, then all I have to do is tap into the object

14415
00:02:07,260 --> 00:02:12,360
and then write a dot and then call the method that I need, which is report.

14416
00:02:13,020 --> 00:02:15,630
So now if I go ahead and run my code,

14417
00:02:18,360 --> 00:02:22,110
you can see it prints out the current amount of money in the machine.

14418
00:02:22,890 --> 00:02:25,710
Now let's do the same thing for our coffee maker.

14419
00:02:26,630 --> 00:02:31,010
Again, I'm going to call it coffee_maker, and you see this frequently.

14420
00:02:31,020 --> 00:02:39,840
The object naming tends to be the lower case and snake case, so separated by underscores, version of the

14421
00:02:39,840 --> 00:02:40,740
name of the class.

14422
00:02:40,950 --> 00:02:47,580
So the name of the class is CoffeeMaker, and usually you'll see people name the object exactly the

14423
00:02:47,580 --> 00:02:49,290
same, but in lowercase.

14424
00:02:50,280 --> 00:02:57,900
And now that I have my coffee _maker, then I can go ahead and call the report method on that object

14425
00:02:57,900 --> 00:02:58,410
as well.

14426
00:02:58,800 --> 00:03:04,980
And now, if I run my code once more, you can see that I've got everything now being reported and printed

14427
00:03:04,980 --> 00:03:05,190
out.

14428
00:03:06,060 --> 00:03:12,870
So in this case, we don't actually have to care how report is implementing all of this functionality.

14429
00:03:13,200 --> 00:03:19,470
All we have to do is read the documentation, find the method that does the thing that we want, and

14430
00:03:19,470 --> 00:03:23,640
then trust that it will carry out the functionality as described.

14431
00:03:24,870 --> 00:03:30,480
Now that we've completed step 1, the next one is to check that resources are sufficient.

14432
00:03:31,080 --> 00:03:35,370
My first port of call is going to be going over to the documentation.

14433
00:03:35,820 --> 00:03:42,240
And you can see that the coffeemaker class actually has a method called is _resource_efficient.

14434
00:03:42,600 --> 00:03:50,130
And all we have to do is pass in the drink, which is a menu item, and then it's going to check and

14435
00:03:50,130 --> 00:03:56,640
give us true, if that drink order can be made, and false if the ingredients are insufficient.

14436
00:03:57,840 --> 00:04:03,930
So how do we get hold of this drink menu item to pass over to this method?

14437
00:04:04,650 --> 00:04:11,700
Well, if we take a look at the menu class, you can see it has a method called get_items and this is

14438
00:04:11,700 --> 00:04:15,030
where you really see reading the documentation properly,

14439
00:04:15,450 --> 00:04:19,800
actually absorbing everything that's in here becomes really, really helpful.

14440
00:04:20,459 --> 00:04:24,570
This menu class has two methods that are really useful.

14441
00:04:25,050 --> 00:04:30,870
One, It's able to get a hold of the names of all the items that are available on the menu.

14442
00:04:31,350 --> 00:04:35,370
And it returns it as a string separated by forward slashes.

14443
00:04:36,120 --> 00:04:40,560
It's also able to find a drink based on the order name.

14444
00:04:40,590 --> 00:04:47,550
So if we passed in one of these names to this function find_drink, then it's going to return a menu

14445
00:04:47,550 --> 00:04:49,770
item object if it actually exists.

14446
00:04:50,040 --> 00:04:51,990
Otherwise, it's going to return none.

14447
00:04:52,620 --> 00:04:56,670
We're going to need both of these in order to ask the user what they want.

14448
00:04:57,530 --> 00:05:02,520
Let's go ahead and set up our while loop. As we had previously

14449
00:05:02,540 --> 00:05:08,660
I'm going to create a new variable called is_on and it's going to start off being true.

14450
00:05:09,230 --> 00:05:16,880
And then while coffee machine is on, well then we're going to get hold of all the options that we

14451
00:05:16,880 --> 00:05:22,850
can offer the user. And we get that by calling that method get_items.

14452
00:05:23,300 --> 00:05:28,580
But of course, because this is a method, it's associated with an object.

14453
00:05:28,670 --> 00:05:32,240
So we have to create an object from this menu blueprint.

14454
00:05:33,440 --> 00:05:36,770
So let's do that next to all the other objects being created.

14455
00:05:37,190 --> 00:05:42,050
So let's create a menu object and it's going to be created from the menu class,

14456
00:05:42,050 --> 00:05:43,640
and then we add the parentheses.

14457
00:05:44,030 --> 00:05:47,840
And now we have access to that object by the name menu.

14458
00:05:48,380 --> 00:05:54,800
The options are going to be equal to the menu object and then we're going to call the get_items method.

14459
00:05:55,340 --> 00:06:01,580
And then when this method returns, it's going to save the string and all the options into this variable

14460
00:06:01,580 --> 00:06:02,390
called options.

14461
00:06:02,990 --> 00:06:09,800
Now we can get the user's choice by asking them for what would you like?

14462
00:06:11,170 --> 00:06:17,650
And then inside a set of parenthesis we'll offer them all the options. And then, of course, I need

14463
00:06:17,650 --> 00:06:19,480
to turn this into an fstring.

14464
00:06:19,630 --> 00:06:24,070
And the code highlighting immediately tells me that this is actually now working.

14465
00:06:24,640 --> 00:06:32,740
So once I've got the user's choice, then I can incorporate the reporting behaviour into this choice.

14466
00:06:33,130 --> 00:06:42,310
Remember, previously we said if the choice was equal to off, then that means the is_on is going

14467
00:06:42,310 --> 00:06:45,390
to be equal to false, and elif

14468
00:06:45,400 --> 00:06:47,860
the choice is equal to report,

14469
00:06:48,310 --> 00:06:53,110
well, in this case, we're going to get the coffeemaker and the money machine to make their reports

14470
00:06:53,110 --> 00:06:54,040
into the console.

14471
00:06:54,970 --> 00:07:03,040
Finally, we're ready to tackle the next problem, which is how do we check that we have enough resources?

14472
00:07:04,100 --> 00:07:10,520
And this is going to require us to find the drink given the order name that the user chose from the

14473
00:07:10,520 --> 00:07:17,440
choice and then get hold of the menu item which comes as the output from this method call.

14474
00:07:18,430 --> 00:07:26,110
So else, we're going to save our drink as a variable called drink, and then we're going to tap into

14475
00:07:26,110 --> 00:07:35,500
the menu.find_drink. And find_drink, you'll notice, takes a order name as the input.

14476
00:07:35,980 --> 00:07:42,370
So this is a string and this is going to be equal to whatever the user chose inside this choice.

14477
00:07:42,940 --> 00:07:45,910
So let's put the choice in here as the input.

14478
00:07:46,450 --> 00:07:51,190
And now, once we've got hold of this drink, let's go ahead and print it.

14479
00:07:51,820 --> 00:07:55,930
Remember, we're expecting a menu item object at this stage.

14480
00:07:56,500 --> 00:08:01,480
So let's click run, and let's make sure that we can hit report to get the report,

14481
00:08:01,870 --> 00:08:11,440
we can say off to switch off the machine and exit the code, and we can also get hold of a latte by

14482
00:08:11,440 --> 00:08:14,530
passing in latte as the drink that we want.

14483
00:08:15,040 --> 00:08:21,940
And we now get printed a menu item object at this particular location in the computer's memory.

14484
00:08:22,450 --> 00:08:23,040
Perfect.

14485
00:08:23,050 --> 00:08:25,330
Everything is working as expected.

14486
00:08:26,140 --> 00:08:32,590
Now, instead of printing the drink, I'm going to tackle this step 2, which is to check that the

14487
00:08:32,590 --> 00:08:34,330
resources are sufficient.

14488
00:08:35,440 --> 00:08:42,400
Again, that's going to require us to look through our documentation. And you'll see that the coffee

14489
00:08:42,400 --> 00:08:43,600
maker class has

14490
00:08:43,600 --> 00:08:50,260
that method is_resource _sufficient, and it expects a menu item object as the input.

14491
00:08:50,710 --> 00:08:54,970
And then it's going to return true when it can be made and false if it can't.

14492
00:08:55,960 --> 00:09:03,550
So let's get hold of our coffee maker object and then get it to check if the resources are sufficient

14493
00:09:03,940 --> 00:09:07,000
to make the current drink that we're interested in.

14494
00:09:07,870 --> 00:09:11,770
And let's go ahead and print the results here

14495
00:09:12,820 --> 00:09:14,350
and run our code.

14496
00:09:15,190 --> 00:09:23,290
Let's say that we wanted to make a latte. That's going to be resource sufficient, so true. Espresso,

14497
00:09:23,620 --> 00:09:27,560
also true, and a Cappuccino is also true.

14498
00:09:27,580 --> 00:09:29,740
So we can make all three drinks, basically.

14499
00:09:30,070 --> 00:09:37,480
Now, instead of printing this, what we want to do is we want to check if this is true and then proceed

14500
00:09:37,480 --> 00:09:40,210
to the next step if there are enough resources.

14501
00:09:40,870 --> 00:09:47,830
Now the next step is to take payment from the user and to process the coins and check the transaction

14502
00:09:47,830 --> 00:09:48,700
is successful.

14503
00:09:49,630 --> 00:09:56,980
Notice how in our coffee machine documentation for the money machine, we don't actually have a way

14504
00:09:56,980 --> 00:10:05,050
of processing the coins. But it what it does have is it allows us to make payments passing in the cost

14505
00:10:05,050 --> 00:10:11,530
of the drink and then it will return true when the payment is accepted or false, if insufficient.

14506
00:10:12,160 --> 00:10:15,650
So let's see what happens if we actually try to make payment.

14507
00:10:16,510 --> 00:10:23,110
Let's tap into our money machine object and then call the make_payment method and we have to pass in

14508
00:10:23,110 --> 00:10:26,170
the cost of the drink that the user ordered.

14509
00:10:26,710 --> 00:10:34,480
So we've got the drink object here, which remember is a menu item, and each of the menu items have

14510
00:10:34,480 --> 00:10:39,880
three attributes that we care about: the name of the drink, the cost of the drink and the ingredient

14511
00:10:39,880 --> 00:10:40,240
list.

14512
00:10:40,630 --> 00:10:49,360
So this is what we're interested in at the moment. So we can pass in the drink.cost which is the

14513
00:10:49,360 --> 00:10:52,270
attribute that's associated with the drink object,

14514
00:10:52,750 --> 00:10:59,110
and that cost is going to be processed by this make_payment method from the money machine.

14515
00:10:59,740 --> 00:11:05,020
And then finally, it's going to tell us whether if this was successful or not.

14516
00:11:05,410 --> 00:11:08,200
So let's see what happens when we run this code as it is.

14517
00:11:09,230 --> 00:11:11,230
Let's say I wanted a latte,

14518
00:11:12,170 --> 00:11:14,820
notice how it's asking me to insert coins:

14519
00:11:14,840 --> 00:11:22,340
how many quarters, how many dimes, how many nickels and how many pennies. A the coffee machine,

14520
00:11:22,700 --> 00:11:28,490
I don't actually need to care about how the money and the coins are processed.

14521
00:11:29,090 --> 00:11:35,180
All I had to do is call make_payment and it deals with all of this automatically.

14522
00:11:36,170 --> 00:11:43,430
Finally, it gives me the change and it returns true, telling me that this make_payment was indeed

14523
00:11:43,430 --> 00:11:44,240
successful.

14524
00:11:45,140 --> 00:11:52,610
If you actually look inside the money_machine code, then you can see that it has a method called process_

14525
00:11:52,610 --> 00:11:56,790
coins, but it's called when make payment is triggered.

14526
00:11:57,290 --> 00:12:02,960
This class is going to process coins, and then it's going to decide whether if it was successful

14527
00:12:03,170 --> 00:12:07,820
or not. And if it was successful, it's going to add the cost to the profit,

14528
00:12:08,120 --> 00:12:13,130
and if not, it's going to tell you that that was not enough money and your money is refunded.

14529
00:12:14,980 --> 00:12:23,620
Coming back over here, if this is successful, then that means the user has managed to pay and we fulfilled

14530
00:12:23,680 --> 00:12:27,850
step 3 and 4 just using one method.

14531
00:12:28,960 --> 00:12:32,440
The final thing we have to do is to actually make the coffee.

14532
00:12:33,160 --> 00:12:35,830
And that, of course, happens right at the end here.

14533
00:12:36,430 --> 00:12:42,730
And all we have to do to make the coffee is get hold of the coffee maker object and then call the make_

14534
00:12:42,730 --> 00:12:48,220
coffee method and we can pass in the order, which is our drink.

14535
00:12:48,700 --> 00:12:54,850
Because remember that the make_coffee method expects a menu item as the input parameter.

14536
00:12:55,990 --> 00:13:03,280
We can actually simplify this code even more by saying, well, if the coffee maker is_resource_sufficient

14537
00:13:04,030 --> 00:13:11,620
and the money machine was able to take payment, well then we can get the coffee_maker to make coffee.

14538
00:13:12,310 --> 00:13:14,320
So now let's go ahead and run our code.

14539
00:13:16,530 --> 00:13:21,930
And let's report to begin with, to see how much resources we have to begin with.

14540
00:13:22,380 --> 00:13:24,780
And then let's order a coffee.

14541
00:13:26,930 --> 00:13:30,890
Insert lots of money and we've got our coffee back.

14542
00:13:31,400 --> 00:13:39,800
So now let's go ahead and order a different coffee, latte, and let's go ahead and insert lots of money.

14543
00:13:40,370 --> 00:13:42,380
And you can see, here's my latte.

14544
00:13:42,770 --> 00:13:49,910
But now, if I hit report, you can see that the objects, the coffee maker has been managing our resources

14545
00:13:50,420 --> 00:13:53,240
and the money_machine has been managing our profit.

14546
00:13:53,960 --> 00:13:59,900
Now, if I decided to order another latte, then it should actually tell me, sorry, there's not enough

14547
00:13:59,900 --> 00:14:04,520
water and there's not enough milk. So it can't make me that drink.

14548
00:14:05,150 --> 00:14:12,650
And we've managed to achieve all of this functionality by writing very few lines of code, and the code

14549
00:14:12,650 --> 00:14:16,130
itself is actually very, very easy to understand.

14550
00:14:16,370 --> 00:14:22,840
Even if you came to this completely fresh, you've never seen how each of the methods are implemented,

14551
00:14:22,850 --> 00:14:24,440
you don't know how the coffee maker works,

14552
00:14:24,710 --> 00:14:26,240
you don't know how the money machine works,

14553
00:14:26,540 --> 00:14:29,000
you can see quite easily what it's trying to do.

14554
00:14:29,960 --> 00:14:35,660
And so if you only have to write this kind of code, then it would make it so much easier to create

14555
00:14:35,660 --> 00:14:39,440
even more complex functionality in your coffee machine, right?

14556
00:14:40,430 --> 00:14:43,130
So have a play around with these classes:

14557
00:14:43,580 --> 00:14:50,270
the coffeeMaker, the moneyMachine, the menu, the menu item, etc. And see what else it is that

14558
00:14:50,270 --> 00:14:51,590
you can do with this code

14559
00:14:51,860 --> 00:14:55,880
while not touching any of the blueprints for each of these classes.

14560
00:14:57,200 --> 00:15:02,660
Now, in the next lesson, I'm going to be showing you how to create your own classes so that you can

14561
00:15:02,660 --> 00:15:07,880
actually start structuring your code using full object-oriented programming.

14562
00:15:08,390 --> 00:15:14,420
And we're going to learn about these things like the initialization and how classes are declared and

14563
00:15:14,420 --> 00:15:16,910
why there's all this self all over the place.

14564
00:15:17,630 --> 00:15:20,480
That's all yet to come on tomorrow's lessons.



14565
00:00:00,060 --> 00:00:04,740
Hey guys, welcome to day 17 of 100 Days of Code. Now,

14566
00:00:04,770 --> 00:00:05,430
today

14567
00:00:05,430 --> 00:00:09,690
we're going to be focusing on how we actually create the classes that we've been

14568
00:00:09,690 --> 00:00:11,910
using in yesterday's lessons.

14569
00:00:12,480 --> 00:00:17,480
Today's final project that we're going to be building up towards is a quiz game.

14570
00:00:18,180 --> 00:00:20,460
So we're going to be able to create a true-false quiz,

14571
00:00:20,850 --> 00:00:22,260
and we'll be able to play the quiz,

14572
00:00:22,620 --> 00:00:25,110
answer the questions and keep track of score.

14573
00:00:25,560 --> 00:00:30,560
But we're gonna be building this completely using Object Oriented Programming. We're

14574
00:00:30,570 --> 00:00:35,040
going to be creating our classes ourselves and then using the objects created

14575
00:00:35,040 --> 00:00:39,480
from those classes in order to build this game. And once you're done,

14576
00:00:39,570 --> 00:00:44,520
this is what you'll be able to create. Question one, A slug's blood is green,

14577
00:00:44,520 --> 00:00:47,760
true or false. True. Now,

14578
00:00:47,790 --> 00:00:51,090
if you want to have a play around with the final project to get a feel for how

14579
00:00:51,090 --> 00:00:51,690
it works,

14580
00:00:51,690 --> 00:00:56,550
then you'll find a link to this final version of the quiz game in the course

14581
00:00:56,550 --> 00:00:58,920
resources. But once you're ready,

14582
00:00:59,130 --> 00:01:02,610
then head over to the next lesson and we're going to get started by learning how

14583
00:01:02,610 --> 00:01:07,110
to create our own custom classes. So, for all of that and more,

14584
00:01:07,230 --> 00:01:07,710
I'll see you there.


14585
00:00:00,270 --> 00:00:04,920
Throughout all of yesterday, we've been using other people's classes.

14586
00:00:05,460 --> 00:00:10,460
And we said that a class is simply just a blueprint for creating an eventual

14587
00:00:11,490 --> 00:00:13,800
object. In this lesson,

14588
00:00:13,830 --> 00:00:17,490
we're going to talk about how we can create our own classes,

14589
00:00:17,970 --> 00:00:22,830
so our own blueprints, which we can use to create our own objects.

14590
00:00:23,910 --> 00:00:28,080
Now let's go ahead and create our own custom classes in code.

14591
00:00:28,530 --> 00:00:33,240
Go ahead and create a new project either in PyCharm or Repl.it wherever you

14592
00:00:33,240 --> 00:00:37,140
prefer. And we're going to name it day-17-start,

14593
00:00:37,950 --> 00:00:41,430
and then hit create. And again, as always,

14594
00:00:41,460 --> 00:00:46,170
once you've created your project, it's time to create your first file

14595
00:00:46,170 --> 00:00:48,090
which we're going to name main.py.

14596
00:00:48,480 --> 00:00:52,890
And then we can collapse our project sidebar and focus on the code.

14597
00:00:54,240 --> 00:00:59,070
So how do we create a class? The syntax looks very simple.

14598
00:00:59,100 --> 00:01:05,120
You have the "class" keyword followed by the name of your class and then a colon

14599
00:01:05,122 --> 00:01:05,123
.

14600
00:01:05,129 --> 00:01:09,360
and then all of the code that's in your class will follow this and it will be

14601
00:01:09,360 --> 00:01:13,320
indented. Let's create our very first class in Python.

14602
00:01:13,920 --> 00:01:14,760
As I mentioned,

14603
00:01:14,790 --> 00:01:19,440
the way that we would create a class is first by using the class keyword.

14604
00:01:20,250 --> 00:01:22,740
And then we get to give our class a name.

14605
00:01:23,220 --> 00:01:28,220
Let's say that we're building a website and we need a class to model our website's

14606
00:01:29,490 --> 00:01:30,323
users.

14607
00:01:30,570 --> 00:01:35,570
So this class is basically going to be the blueprint to represent what our

14608
00:01:35,880 --> 00:01:39,450
users have and what they can do on our website.

14609
00:01:40,170 --> 00:01:42,000
Let's call our class User

14610
00:01:42,510 --> 00:01:47,510
and then we finished this declaration with a colon as usual. And everything

14611
00:01:48,480 --> 00:01:50,010
else that's going to go inside

14612
00:01:50,010 --> 00:01:54,180
this class is going to need to be indented after the colon.

14613
00:01:54,870 --> 00:01:57,780
Let's start out with a completely empty class.

14614
00:01:58,200 --> 00:02:02,820
Our user class is going to do absolutely nothing for now. However,

14615
00:02:02,820 --> 00:02:04,530
because I've created my blueprint

14616
00:02:04,620 --> 00:02:08,310
I can already use it to create my first user object.

14617
00:02:08,940 --> 00:02:11,220
So let's say I wanted to create a user_1

14618
00:02:11,640 --> 00:02:14,490
and I'm going to create it using that class,

14619
00:02:14,880 --> 00:02:17,760
which notice it's now being recognized by PyCharm,

14620
00:02:18,150 --> 00:02:21,330
and it's got the C symbol next to it. And of course,

14621
00:02:21,330 --> 00:02:23,850
to initialize an object from a class,

14622
00:02:23,880 --> 00:02:26,190
we have to add the parentheses at the end.

14623
00:02:26,940 --> 00:02:31,020
Now we get an error here because there's an indent expected.

14624
00:02:31,440 --> 00:02:33,540
So basically Python doesn't like it

14625
00:02:33,630 --> 00:02:38,340
when you create something like a class or when you create something like a

14626
00:02:38,340 --> 00:02:40,950
function and you have a colon,

14627
00:02:41,280 --> 00:02:46,080
but you don't have anything inside that function or class. For example,

14628
00:02:46,080 --> 00:02:49,560
if I just immediately wanted to print "hello" afterwards,

14629
00:02:49,590 --> 00:02:52,650
I get exactly the same error; indent expected.

14630
00:02:53,100 --> 00:02:56,640
It's expecting this function that you've created or this class

14631
00:02:56,640 --> 00:03:01,640
you've just created to have some sort of content before you go ahead and do something

14632
00:03:01,810 --> 00:03:04,630
else. So how can we fix this? Well,

14633
00:03:04,660 --> 00:03:08,200
if we actually really want to leave this function or this class empty,

14634
00:03:08,320 --> 00:03:10,390
we can use a keyword which is pass.

14635
00:03:10,960 --> 00:03:15,370
And all it does is it just passes. It says, I don't want to have a go right now.

14636
00:03:15,640 --> 00:03:19,840
Just continue to the next line of code. And this gets rid of our errors

14637
00:03:19,900 --> 00:03:21,880
both in the function declaration

14638
00:03:22,210 --> 00:03:26,650
as well as in our class declaration. We've now essentially completed the

14639
00:03:26,650 --> 00:03:29,050
first step towards creating our custom classes,

14640
00:03:29,320 --> 00:03:34,320
which is writing the declaration and then building an object called user_1 out

14641
00:03:34,960 --> 00:03:39,370
of that class. And we've also seen how to name classes in Python.

14642
00:03:39,940 --> 00:03:43,960
Now the name of the class should have the first letter of every word

14643
00:03:44,140 --> 00:03:44,980
capitalized.

14644
00:03:45,550 --> 00:03:50,550
And this particular style of naming in Programming is known as Pascal case.

14645
00:03:52,060 --> 00:03:55,030
So if you think of Blaise Pascal as a person,

14646
00:03:55,060 --> 00:03:56,950
then we know that everybody's name,

14647
00:03:56,950 --> 00:04:01,950
every person's name, has the first letter capitalized and also the first letter

14648
00:04:02,400 --> 00:04:04,890
of their surname or their middle name

14649
00:04:04,980 --> 00:04:08,100
and basically every subsequent name capitalized. Now,

14650
00:04:08,130 --> 00:04:12,180
this is different from another type of casing which you may have come across

14651
00:04:12,420 --> 00:04:13,800
which is called camel casing.

14652
00:04:14,160 --> 00:04:19,160
And camel casing is only different from Pascal case because the first word is

14653
00:04:19,380 --> 00:04:23,910
lowercase, but every subsequent word it has it's first letter capitalized in

14654
00:04:24,030 --> 00:04:27,870
exactly the same way as Pascal case. And finally,

14655
00:04:27,900 --> 00:04:31,590
we've also come across snake case where all the words are lowercase

14656
00:04:31,740 --> 00:04:32,880
but they're separated by 

14657
00:04:32,880 --> 00:04:37,830
an underscore. In Python programming, you won't see a lot of camel casing.

14658
00:04:37,860 --> 00:04:41,430
You will see Pascal case being used for the class names,

14659
00:04:41,760 --> 00:04:45,210
snake case being used pretty much to name everything else.


14660
00:00:00,060 --> 00:00:03,480
Now that we've seen how we can create a new class.

14661
00:00:03,540 --> 00:00:06,060
Even if it's a class with nothing inside.

14662
00:00:06,600 --> 00:00:10,290
And we've seen how we can create a new object from that class

14663
00:00:10,740 --> 00:00:14,010
by using the same code that we used in yesterday's lessons.

14664
00:00:14,430 --> 00:00:19,350
The next question is: "Well, how do we create an attribute for that class?". Well,

14665
00:00:19,350 --> 00:00:24,350
one of the easiest ways of doing this is simply tapping into your object and

14666
00:00:24,390 --> 00:00:26,130
then adding an attribute.

14667
00:00:26,310 --> 00:00:31,310
So we could say user_1.id = 

14668
00:00:32,460 --> 00:00:33,293
"001".

14669
00:00:33,960 --> 00:00:38,960
And we could add as many attributes as we want just by using this method of

14670
00:00:39,570 --> 00:00:42,570
using the dot notation after the name of the object,

14671
00:00:42,960 --> 00:00:47,370
and then just adding any piece of data we want. So now,

14672
00:00:47,370 --> 00:00:51,930
if I go ahead and print user_1.username,

14673
00:00:52,290 --> 00:00:55,860
you'll see that this attribute now exists in this object

14674
00:00:55,880 --> 00:00:56,713
[Inaudible]

14675
00:00:58,910 --> 00:01:03,470
And you can see the value that's held in that attribute being printed in the

14676
00:01:03,470 --> 00:01:05,870
console. So just a quick reminder,

14677
00:01:05,900 --> 00:01:10,820
an attribute is a variable that's associated with an object.

14678
00:01:11,450 --> 00:01:16,130
So it's almost as if we just created a new variable, but in this case,

14679
00:01:16,160 --> 00:01:20,630
we've attached it to an object. But here's a question though,

14680
00:01:21,710 --> 00:01:25,640
if we had lots and lots of attributes like this,

14681
00:01:25,880 --> 00:01:29,030
and every single time we create a new user,

14682
00:01:29,420 --> 00:01:34,420
let's say we created user_2 and we had to do the same thing,

14683
00:01:34,550 --> 00:01:36,830
create it from the class and then say,

14684
00:01:36,830 --> 00:01:41,000
user_2.id = "002",

14685
00:01:41,120 --> 00:01:43,910
and user_2.username

14686
00:01:45,440 --> 00:01:49,430
= "jack". And this is one,

14687
00:01:49,610 --> 00:01:54,500
a little bit prone to error because it's perfectly valid for me to make a typo

14688
00:01:54,530 --> 00:01:58,940
or change the name of an attribute where I end up with something like this.

14689
00:01:59,300 --> 00:02:02,120
So is there a way of making this simpler?

14690
00:02:02,510 --> 00:02:06,770
How can I specify all these starting pieces of information

14691
00:02:07,040 --> 00:02:11,300
when I create my object from the class? Now,

14692
00:02:11,330 --> 00:02:15,320
in order to do this, we have to understand something called a constructor,

14693
00:02:15,770 --> 00:02:20,770
which is a part of the blueprint that allows us to specify what should happen

14694
00:02:21,470 --> 00:02:24,410
when our object is being constructed.

14695
00:02:25,160 --> 00:02:29,240
And this is also known in programming as initializing

14696
00:02:29,270 --> 00:02:32,840
an object. When the object is being initialized,

14697
00:02:32,870 --> 00:02:37,870
we can set variables or counters to they're starting values. In Python,

14698
00:02:39,560 --> 00:02:44,560
the way that we would create the constructor is by using a special function,

14699
00:02:45,980 --> 00:02:47,570
which is the init function.

14700
00:02:48,140 --> 00:02:52,070
And you can tell it's special because it isn't just the Def keyword

14701
00:02:52,310 --> 00:02:55,850
and then the name of the function. It's got two underscores

14702
00:02:55,910 --> 00:02:57,110
either side of the name.

14703
00:02:57,740 --> 00:03:02,740
And this means that it's a method that the Python interpreter knows about and

14704
00:03:03,100 --> 00:03:05,800
knows that it has a special function. Now,

14705
00:03:05,800 --> 00:03:10,800
what is the special function? Well, it's normally used to initialize the attributes.

14706
00:03:12,580 --> 00:03:14,260
So if inside our class

14707
00:03:14,590 --> 00:03:19,590
we add this init function and you can see as soon as I write def and then 

14708
00:03:19,690 --> 00:03:23,320
init, I've really got autofill helping me so I can just hit enter

14709
00:03:23,620 --> 00:03:25,510
once it's selected. Now,

14710
00:03:25,630 --> 00:03:30,630
inside this init function is where we initialize or create the starting

14711
00:03:30,970 --> 00:03:33,940
values for our attributes. Now,

14712
00:03:34,000 --> 00:03:39,000
the important thing to remember is that the init function is going to be called

14713
00:03:39,370 --> 00:03:43,210
every time you create a new object from this class.

14714
00:03:43,690 --> 00:03:45,400
For example, if I print,

14715
00:03:47,830 --> 00:03:51,460
then every time that this construction happens

14716
00:03:51,730 --> 00:03:53,770
when we create a new user,

14717
00:03:54,130 --> 00:03:57,220
then this print statement is going to be triggered.

14718
00:03:59,920 --> 00:04:03,940
So you can see here, this print statement gets triggered

14719
00:04:04,360 --> 00:04:08,410
and then we print the user_1's username, and then we've got 

14720
00:04:08,410 --> 00:04:12,490
another user being created. Just as a quick reminder,

14721
00:04:12,520 --> 00:04:16,720
the attributes are the things that the object will have.

14722
00:04:17,350 --> 00:04:22,210
And they are basically just variables that are associated with the final

14723
00:04:22,210 --> 00:04:25,870
object. So for example, if you're constructing a car bject,

14724
00:04:25,900 --> 00:04:29,500
then one of those attributes could be the number of seats it has and

14725
00:04:29,500 --> 00:04:31,150
normally that's equal to five.

14726
00:04:31,720 --> 00:04:36,220
So how do we set these attributes in the constructor? Well,

14727
00:04:36,220 --> 00:04:37,930
this is what the code would look like.

14728
00:04:38,350 --> 00:04:42,460
We have our init function and inside the init function

14729
00:04:42,820 --> 00:04:44,950
in addition to this thing called self

14730
00:04:45,010 --> 00:04:50,010
which is the actual object that's being created or being initialized,

14731
00:04:50,890 --> 00:04:54,250
in addition, you can add as many parameters as you wish.

14732
00:04:54,670 --> 00:04:59,670
And that parameter is going to be passed in when an object gets constructed from

14733
00:05:00,850 --> 00:05:04,300
this class. And once you receive that data,

14734
00:05:04,390 --> 00:05:09,010
then you can use it to set the object's attributes.

14735
00:05:10,090 --> 00:05:14,470
This is what it would look like when we actually call our constructor.

14736
00:05:15,250 --> 00:05:20,250
We know that we can create an object by calling the name of the class and then

14737
00:05:20,980 --> 00:05:25,810
adding the parentheses. But if inside our init function

14738
00:05:25,900 --> 00:05:27,970
we have some additional parameters,

14739
00:05:28,240 --> 00:05:32,350
then we can also pass in data to those parameters

14740
00:05:32,470 --> 00:05:36,460
which will be used to set the attributes for that object.

14741
00:05:36,760 --> 00:05:40,330
So in this case, once this line of code has completed,

14742
00:05:40,510 --> 00:05:44,710
then my_car.seats is going to be equal to five.

14743
00:05:45,790 --> 00:05:49,390
And this is exactly the same as if we created our

14744
00:05:49,390 --> 00:05:53,560
my_car object first and then we said my_car.seats = 5.

14745
00:05:53,590 --> 00:05:55,180
It's completely the same.

14746
00:05:56,230 --> 00:06:00,500
But it does make it a lot quicker when you're creating a lot of objects that

14747
00:06:00,500 --> 00:06:05,150
need all the same attributes. Let's see how we would do it here.

14748
00:06:05,150 --> 00:06:07,400
We've got our init function already declared.

14749
00:06:08,000 --> 00:06:11,780
So if we wanted to pass over a user ID

14750
00:06:11,810 --> 00:06:15,890
when we construct our objects, we can add that as a parameter

14751
00:06:16,340 --> 00:06:20,060
and then inside the init we can say self.id,

14752
00:06:20,330 --> 00:06:25,330
so self.id is going to be the attribute that's associated with this class

14753
00:06:25,910 --> 00:06:30,910
and we can set it equal to the user_id that's passed in when any user gets

14754
00:06:31,580 --> 00:06:35,450
constructed. So now when we create our user,

14755
00:06:36,050 --> 00:06:40,880
instead of creating these attributes later on, at the time of construction

14756
00:06:41,000 --> 00:06:44,420
you can already see that we can add a user ID.

14757
00:06:45,170 --> 00:06:47,000
So let's give it the same ID.

14758
00:06:48,020 --> 00:06:50,990
And now let's add another attribute.

14759
00:06:51,320 --> 00:06:56,320
So we're going to pass in the username and I'm going to set the attribute

14760
00:06:56,930 --> 00:07:00,710
self.username equal the username that's past it.

14761
00:07:01,280 --> 00:07:05,510
Notice how in this case I've named my parameter user_id

14762
00:07:05,840 --> 00:07:10,640
and that value is going to become the self.id attribute.

14763
00:07:11,060 --> 00:07:14,120
So notice how these two actually have different names.

14764
00:07:14,510 --> 00:07:17,480
You can name either of these anything you want.

14765
00:07:18,230 --> 00:07:23,120
It's normally convention that you will see the name of the parameter be equal to

14766
00:07:23,120 --> 00:07:27,590
the name of the attribute, but you don't always have to stick to these rules.

14767
00:07:28,970 --> 00:07:33,590
Now let's go back to our constructor whereas previously it was empty,

14768
00:07:33,830 --> 00:07:38,830
now we have our user ID being passed in and I can now pass in the second

14769
00:07:39,620 --> 00:07:44,060
attribute, which is the username. So my username was going to be Angela.

14770
00:07:45,650 --> 00:07:49,370
And now we've created a new user,

14771
00:07:49,520 --> 00:07:53,480
which is user_1 from this user class

14772
00:07:53,690 --> 00:07:58,690
and we're initializing it with these starting values where the first value is

14773
00:07:59,690 --> 00:08:03,860
going to become the user ID which is going to be the self.id,

14774
00:08:04,220 --> 00:08:08,780
and the second value is going to become the self.username. So now,

14775
00:08:08,780 --> 00:08:12,560
if I wanted to print the user_1's username,

14776
00:08:12,950 --> 00:08:14,420
then I can simply write

14777
00:08:14,420 --> 00:08:17,690
user_1.username exactly the same way as before,

14778
00:08:17,990 --> 00:08:21,350
or if I wanted the ID, it would be user_1.id.

14779
00:08:22,070 --> 00:08:26,750
So now let's comment out the rest of the code and hit run,

14780
00:08:27,680 --> 00:08:32,179
and you can see we've got the user ID being printed here. Now,

14781
00:08:32,179 --> 00:08:35,539
remember that when you add parameters to the constructor

14782
00:08:35,659 --> 00:08:36,919
which is the init function,

14783
00:08:37,460 --> 00:08:42,460
you're now saying that whenever a new object is being constructed from this

14784
00:08:43,130 --> 00:08:47,600
class, it must provide these two pieces of data.

14785
00:08:48,530 --> 00:08:53,150
If we uncomment this and you try to run it, you'll see you get an error.

14786
00:08:53,840 --> 00:08:56,160
And it says that on line 12,

14787
00:08:56,940 --> 00:09:00,840
this user is being created from the user class.

14788
00:09:01,320 --> 00:09:06,180
But according to the init, we're actually missing two required arguments;

14789
00:09:06,360 --> 00:09:08,010
user ID and username.

14790
00:09:08,790 --> 00:09:12,300
So now when we create any object from this class,

14791
00:09:12,600 --> 00:09:16,290
we have to provide the user ID and the username.

14792
00:09:17,190 --> 00:09:20,190
But this is now much more convenient, right?

14793
00:09:20,250 --> 00:09:23,970
While we previously needed three lines of code, we now only have one.

14794
00:09:25,200 --> 00:09:27,540
Now sometimes when we're creating our attributes,

14795
00:09:27,840 --> 00:09:31,170
we might want a default value to start with.

14796
00:09:31,230 --> 00:09:35,460
And if at some later point in our program we want to modify it,

14797
00:09:35,460 --> 00:09:36,840
then we'll do it at that point.

14798
00:09:37,140 --> 00:09:42,140
But it doesn't make sense for all attributes to be initialized when we actually

14799
00:09:42,510 --> 00:09:46,200
create our object. So if, for example, in our case,

14800
00:09:46,230 --> 00:09:50,010
let's say that we were coding up the Instagram app, right? Well,

14801
00:09:50,010 --> 00:09:53,160
each of the Instagram users, they would have an ID,

14802
00:09:53,430 --> 00:09:56,940
they would have a username and they would probably have a follower count.

14803
00:09:57,330 --> 00:10:01,170
So they might have something like self.followers.

14804
00:10:02,460 --> 00:10:07,050
This is always going to start out as zero, right? You start a new account,

14805
00:10:07,110 --> 00:10:10,350
you're going to have zero followers. You might get some followers later on,

14806
00:10:10,620 --> 00:10:11,453
you might not.

14807
00:10:11,700 --> 00:10:16,700
But it doesn't make sense for followers to be something that we have to provide

14808
00:10:17,520 --> 00:10:19,410
whenever we construct a new object.

14809
00:10:19,680 --> 00:10:23,670
It seems very wasteful to have to always write zero

14810
00:10:23,880 --> 00:10:27,900
when you construct any object from this class. So in Python,

14811
00:10:27,900 --> 00:10:31,770
we can also provide a default value just as I've done here.

14812
00:10:32,220 --> 00:10:37,170
Instead of setting it equal to one of the parameters that's being passed in when

14813
00:10:37,170 --> 00:10:41,610
this class is being initialized, instead I'm just setting it to a value,

14814
00:10:41,640 --> 00:10:46,470
which is zero. Let's get rid of that from the initializer

14815
00:10:46,500 --> 00:10:48,840
because we now have a default value of zero.

14816
00:10:49,380 --> 00:10:52,530
And if I go ahead and print my, let's say,

14817
00:10:52,530 --> 00:10:57,180
user_1.followers attribute, and I hit run,

14818
00:10:57,570 --> 00:11:02,570
then you can see it's zero because all objects being created from this class will

14819
00:11:04,170 --> 00:11:07,830
have a followers attribute that set out to zero to begin with.


14820
00:00:00,570 --> 00:00:04,920
In addition to creating attributes, we know that we can also create methods.

14821
00:00:05,370 --> 00:00:09,360
The attributes are the things that the object has and the methods

14822
00:00:09,420 --> 00:00:11,520
are the things that the object does.

14823
00:00:12,330 --> 00:00:16,620
Let's say that we were creating the car class and we've really created the seats

14824
00:00:16,650 --> 00:00:18,810
attribute. Well, later on

14825
00:00:18,840 --> 00:00:23,840
we might decide that we want to call a method to change that seats attribute's

14826
00:00:24,420 --> 00:00:29,370
value. So for example, I've been watching a lot of truck racing recently.

14827
00:00:29,520 --> 00:00:29,720
Yeah.

14828
00:00:29,720 --> 00:00:34,720
[inaudible]

14829
00:00:35,690 --> 00:00:39,920
And one of the things that people do when they mod their cars for racing is they

14830
00:00:39,920 --> 00:00:43,940
take out some of the seats. This way it reduces the weight of the car,

14831
00:00:43,970 --> 00:00:48,170
and it means that you can go a bit faster. So in our car class,

14832
00:00:48,200 --> 00:00:49,250
we might, in fact,

14833
00:00:49,250 --> 00:00:53,780
have a method where the car can enter race mode,

14834
00:00:54,170 --> 00:00:57,110
where the seats are dropped from 5 to 2.

14835
00:00:58,010 --> 00:01:02,270
This is what the method would look like. Inside the class declaration,

14836
00:01:02,630 --> 00:01:07,250
we have a function, but remember when a function is attached to an object

14837
00:01:07,310 --> 00:01:08,810
then it's called a method.

14838
00:01:09,830 --> 00:01:14,540
This method looks exactly the same as how we've created other functions.

14839
00:01:14,540 --> 00:01:17,660
We have the Def keyword, we have the name of the method,

14840
00:01:17,900 --> 00:01:21,470
we have some parentheses which can take inputs, a colon,

14841
00:01:21,560 --> 00:01:24,650
and then the body of the method. So in this case,

14842
00:01:24,650 --> 00:01:29,650
all it does is it gets hold of the object and then the object seats attribute

14843
00:01:32,030 --> 00:01:36,620
and then changes it to 2. So now when you call that method,

14844
00:01:36,710 --> 00:01:41,710
all you need to do is get hold of the object and then you use the dot notation

14845
00:01:42,560 --> 00:01:46,310
to call that method enter_race_mode, and of course,

14846
00:01:46,310 --> 00:01:47,750
with the parentheses at the end.

14847
00:01:48,920 --> 00:01:52,640
So let's say that while we're modeling our Instagram user,

14848
00:01:53,120 --> 00:01:56,720
we want to have a way for the users to follow each other, right?

14849
00:01:57,140 --> 00:02:01,550
And when they follow each other, their follower counts obviously go up.

14850
00:02:02,000 --> 00:02:06,890
So let's define a new method. So we're going to use the def keyword

14851
00:02:07,190 --> 00:02:11,690
and then we're going to name our method follow. Now a method,

14852
00:02:11,780 --> 00:02:16,780
unlike a function, always needs to have a self parameter as the first parameter.

14853
00:02:18,980 --> 00:02:21,230
This means that when this method is called,

14854
00:02:21,560 --> 00:02:25,490
it knows the object that called it. Now,

14855
00:02:25,520 --> 00:02:27,380
in addition to that self parameter,

14856
00:02:27,410 --> 00:02:31,430
we're also going to pass in the user that we've decided to follow.

14857
00:02:32,270 --> 00:02:35,510
So now let's say that we actually had two attributes,

14858
00:02:35,930 --> 00:02:39,860
the followers and the following count, right?

14859
00:02:39,860 --> 00:02:43,430
So they both start from zero, so two default attributes.

14860
00:02:44,000 --> 00:02:47,990
But when a user decides to follow another user,

14861
00:02:48,500 --> 00:02:49,460
well in this case,

14862
00:02:49,580 --> 00:02:54,580
the user who we're following, their follower count goes up by one and our own,

14863
00:02:57,500 --> 00:03:02,500
so the self.following count goes up by one as well.

14864
00:03:03,550 --> 00:03:07,930
So the self keyword becomes quite important when we're working with classes and

14865
00:03:07,930 --> 00:03:12,760
objects. It's a way for us to refer to the object 

14866
00:03:12,790 --> 00:03:17,790
that's going to be created from this class inside the class blueprint.

14867
00:03:18,790 --> 00:03:22,030
So you'll never see self when you're using objects

14868
00:03:22,540 --> 00:03:26,530
but you see it a lot when you're writing your code inside your class.

14869
00:03:27,340 --> 00:03:30,070
Now let's go ahead and call this.

14870
00:03:30,310 --> 00:03:35,310
And let's say that user_1 decided to follow

14871
00:03:37,120 --> 00:03:41,530
user_2. This is the user_1 object,

14872
00:03:41,980 --> 00:03:46,300
and this is the follow method from the user_1 object.

14873
00:03:46,750 --> 00:03:50,560
And then the user_2 is the person who we're going to follow.

14874
00:03:51,160 --> 00:03:55,630
So now let's go ahead and print the user_1's

14875
00:03:56,050 --> 00:04:01,050
follower count and the user_1's following count.

14876
00:04:03,280 --> 00:04:06,820
And let's do the same for user_2 as well.

14877
00:04:09,370 --> 00:04:12,220
You can see once this method has run,

14878
00:04:12,790 --> 00:04:16,089
then user_1's follow account is still zero,

14879
00:04:16,390 --> 00:04:18,790
but user_1 is now following one person.

14880
00:04:19,360 --> 00:04:24,340
User_2 has one followers and has zero people that it's following.

14881
00:04:26,640 --> 00:04:26,730
Right?


14882
00:00:00,390 --> 00:00:04,230
Now that we've seen how to create our own custom classes,

14883
00:00:04,650 --> 00:00:06,990
we're finally ready to build the quiz game.

14884
00:00:07,680 --> 00:00:10,710
Now this game is going to be a simple true/false game.

14885
00:00:11,010 --> 00:00:15,000
So a question will be asked to the user and they'll select true or false,

14886
00:00:15,420 --> 00:00:19,080
and then we'll tell them if they got it right or wrong and give them a score.

14887
00:00:20,040 --> 00:00:24,270
Now to begin, the first step you'll need to do is to download the zip

14888
00:00:24,270 --> 00:00:27,570
file it with all the starting code from our course resource website.

14889
00:00:28,020 --> 00:00:28,920
Alternatively,

14890
00:00:28,950 --> 00:00:33,030
if you are already logged in on Repl.it simply fork the project and then click

14891
00:00:33,030 --> 00:00:35,550
on these three dots to download the zip file here.

14892
00:00:36,720 --> 00:00:40,050
And once you've extracted the actual folder, quiz-game-

14893
00:00:40,050 --> 00:00:44,520
start from the.zip file, then we're ready to go ahead and open it

14894
00:00:44,670 --> 00:00:47,610
using PyCharm. In PyCharm 

14895
00:00:47,640 --> 00:00:51,960
we're going to click open and then we're going to navigate to the place where we

14896
00:00:51,960 --> 00:00:56,460
have our quiz-game-start, which in my case is in the downloads folder.

14897
00:00:57,390 --> 00:01:01,080
PyCharm should automatically configure the latest version of Python you've got

14898
00:01:01,080 --> 00:01:03,120
installed as the interpreter.

14899
00:01:03,480 --> 00:01:06,150
So you can go ahead and close these popups.

14900
00:01:06,630 --> 00:01:09,480
And if we open up our quiz-game-start folder,

14901
00:01:09,720 --> 00:01:13,110
you can see we have four files, data,

14902
00:01:13,140 --> 00:01:15,450
main, question_model and quiz_brain.

14903
00:01:16,050 --> 00:01:18,240
And over the course of the next few lessons,

14904
00:01:18,300 --> 00:01:22,290
we're going to be writing the code in all of these files so that we end up

14905
00:01:22,320 --> 00:01:24,600
creating our final quiz project.

14906
00:01:25,650 --> 00:01:30,650
The first task that we have is to create a model for a question in our quiz.

14907
00:01:32,280 --> 00:01:37,280
If we had a question object, well what kind of attributes should it have?

14908
00:01:37,860 --> 00:01:42,030
It might have a text attribute for the question texts,

14909
00:01:42,360 --> 00:01:44,940
and it might also hold an answer attribute

14910
00:01:45,090 --> 00:01:49,260
which is going to be the correct answer to that question. Now,

14911
00:01:49,260 --> 00:01:53,340
these two attributes should be initialized with a value

14912
00:01:53,640 --> 00:01:57,720
when a new question object is created from this class.

14913
00:01:58,230 --> 00:02:02,040
For example, if our first question was 2 + 3 = 5,

14914
00:02:02,340 --> 00:02:05,340
which we know the correct answer should be true. Well,

14915
00:02:05,340 --> 00:02:10,139
then we might write the code like this to actually initialize a new question

14916
00:02:10,139 --> 00:02:15,140
object. And when this initialization goes through the constructor code inside the

14917
00:02:16,890 --> 00:02:17,820
question class

14918
00:02:18,120 --> 00:02:23,120
will take these two pieces of data and then add them to the corresponding

14919
00:02:23,220 --> 00:02:25,470
attributes, the text and the answer.

14920
00:02:26,070 --> 00:02:31,070
And so our new question object will have both of these attributes initialized

14921
00:02:31,470 --> 00:02:32,490
with a value

14922
00:02:32,760 --> 00:02:37,760
when a new question object is being created. Inside your project,

14923
00:02:39,030 --> 00:02:42,660
go over to the question_model.py file,

14924
00:02:43,110 --> 00:02:48,030
and go ahead and create a new class called question

14925
00:02:48,510 --> 00:02:51,960
and that question class should have an init method

14926
00:02:52,200 --> 00:02:55,170
which will initialize two attributes,

14927
00:02:55,440 --> 00:02:59,950
the text and the answer just as you've seen in the previous slides.

14928
00:03:00,850 --> 00:03:04,600
Pause the video and see if you can complete this challenge by creating this

14929
00:03:04,600 --> 00:03:05,130
class.

14930
00:03:05,130 --> 00:03:05,963
Right.

14931
00:03:10,590 --> 00:03:12,600
All right. So we know that to create a class,

14932
00:03:12,600 --> 00:03:16,260
we first have to use the class keyword. And then in our case,

14933
00:03:16,290 --> 00:03:20,700
the name of the class is going to be called Question because we're modeling what

14934
00:03:20,700 --> 00:03:23,160
a question would be like in our game.

14935
00:03:23,940 --> 00:03:27,270
We know that each of these questions have two attributes;

14936
00:03:27,690 --> 00:03:30,240
a self.text and a self.answer.

14937
00:03:30,840 --> 00:03:34,650
And those two attributes are going to be initialized

14938
00:03:35,400 --> 00:03:40,400
when we create a new question object. So we need the init function in here.

14939
00:03:41,520 --> 00:03:43,770
And we're pretty much going to use the autofill.

14940
00:03:43,830 --> 00:03:46,980
So once you write Def and then you write init,

14941
00:03:47,280 --> 00:03:50,610
you can see it in the dropdown list and then just hit enter

14942
00:03:50,970 --> 00:03:54,240
and the code will be inserted automatically. This way

14943
00:03:54,240 --> 00:03:58,050
you don't have to remember the exact order of the parentheses or where to put

14944
00:03:58,050 --> 00:04:02,340
the colon, et cetera, et cetera. Now, inside the init function,

14945
00:04:02,370 --> 00:04:05,580
we're going to set up two attributes as we said.

14946
00:04:05,910 --> 00:04:09,660
One is going to be called text and one is going to be called answer.

14947
00:04:10,290 --> 00:04:13,980
And if we want to create an attribute, we have to use this syntax,

14948
00:04:14,050 --> 00:04:17,040
self. and then the name of the attribute,

14949
00:04:17,370 --> 00:04:21,120
because eventually when we create a new object from this class

14950
00:04:21,390 --> 00:04:26,390
say a new question object, then we're going to be passing in these two items,

14951
00:04:27,510 --> 00:04:30,270
a piece of text which is going to be the question,

14952
00:04:30,510 --> 00:04:35,400
and then either true or false as the answer. And then later on

14953
00:04:35,400 --> 00:04:37,320
if we wanted to access the text,

14954
00:04:37,380 --> 00:04:40,590
then we would say new_q.text.

14955
00:04:41,190 --> 00:04:42,720
Now of course at the moment,

14956
00:04:42,750 --> 00:04:46,680
these are all yellowed out because it seems to have no effect.

14957
00:04:47,010 --> 00:04:51,510
There's no way of receiving a value for each of these attributes.

14958
00:04:51,990 --> 00:04:56,010
And to do that, we have to add some inputs inside the init function.

14959
00:04:56,490 --> 00:04:59,730
So let's just call it q_text and a q_answer.

14960
00:05:00,090 --> 00:05:02,910
You can of course call these parameters anything you want.

14961
00:05:03,330 --> 00:05:08,330
But the important part is you set the self.text to that first value and the

14962
00:05:09,960 --> 00:05:12,450
self.answer to the second value.

14963
00:05:13,020 --> 00:05:18,020
So now when we actually go ahead and print this new_q.text

14964
00:05:18,840 --> 00:05:20,730
object like we have here,

14965
00:05:20,820 --> 00:05:24,750
then it will go ahead and actually fetch this value into the output.

14966
00:05:26,250 --> 00:05:30,810
If you go to run and then run and then select a question model,

14967
00:05:31,380 --> 00:05:35,400
you can see that is what gets printed in the console.

14968
00:05:37,110 --> 00:05:41,940
Let's delete those two lines and now we have completed our first task,

14969
00:05:42,270 --> 00:05:46,200
which is creating our question class from scratch.


14970
00:00:00,330 --> 00:00:01,650
Now in the last lesson,

14971
00:00:01,680 --> 00:00:05,610
we created our question class. In this lesson,

14972
00:00:05,640 --> 00:00:10,470
we're going to be creating a question bank of question objects.

14973
00:00:11,070 --> 00:00:15,930
Notice how we can create a question object by using the name of the class and

14974
00:00:15,930 --> 00:00:20,250
then giving it some inputs for the question and the answer. Now,

14975
00:00:20,250 --> 00:00:25,080
if we create a whole bunch of those and then put them into a list like this,

14976
00:00:25,140 --> 00:00:29,580
then we can create a question bank of questions to use in our quiz.

14977
00:00:30,720 --> 00:00:33,570
If you take a look inside the data.py file,

14978
00:00:33,900 --> 00:00:38,900
you'll see that I've already included a whole bunch of questions inside here,

14979
00:00:39,270 --> 00:00:42,300
and you can see it's got some text and it's got some answer.

14980
00:00:42,780 --> 00:00:47,780
So the exact structure of this file is that it's got a whole bunch of

14981
00:00:48,360 --> 00:00:51,030
dictionaries, 12 in total,

14982
00:00:51,330 --> 00:00:55,110
and all of these dictionaries are saved inside a list

14983
00:00:55,440 --> 00:01:00,270
and that list is called question_data. Now, when you first come onto this file

14984
00:01:00,300 --> 00:01:04,019
you'll see some warnings, these little yellow squiggly lines.

14985
00:01:04,500 --> 00:01:08,190
And the reason is because it would expect for proper formatting,

14986
00:01:08,580 --> 00:01:13,140
each of these dictionaries should be indented inside the list. Now,

14987
00:01:13,200 --> 00:01:16,620
in terms of actual functionality, this won't change anything.

14988
00:01:16,650 --> 00:01:21,650
The indentation of the items in a list are not as important as the indentation

14989
00:01:21,810 --> 00:01:23,820
in say a method or a for loop.

14990
00:01:24,360 --> 00:01:27,210
But it's still better to get rid of all of these warnings.

14991
00:01:27,630 --> 00:01:32,250
So what we're going to do is we're going to select everything inside this file,

14992
00:01:32,310 --> 00:01:35,520
we're going to go to code and then auto-indent lines.

14993
00:01:36,090 --> 00:01:39,060
And this you'll notice has now auto-indented

14994
00:01:39,330 --> 00:01:42,120
all of the dictionaries inside the list.

14995
00:01:42,720 --> 00:01:47,190
Now you'll still notice some red squiggly lines. So in this case,

14996
00:01:47,190 --> 00:01:51,690
the reason is because the line is too long, it's greater than 120 characters.

14997
00:01:51,960 --> 00:01:55,260
You can see that's where the cutoff is. So in PyCharm

14998
00:01:55,260 --> 00:01:57,390
it's really easy to separate lines.

14999
00:01:57,420 --> 00:02:01,020
If you just identify a good spot in that line, hit enter,

15000
00:02:01,050 --> 00:02:05,700
and it will automatically add some quotation marks around it so that it still

15001
00:02:05,700 --> 00:02:09,660
behaves the same way as before, but now it's on separate lines.

15002
00:02:10,090 --> 00:02:12,450
And I'm going to do the same to line 8 as well.

15003
00:02:12,840 --> 00:02:16,440
Now the final warning expect a new line at the end of the file,

15004
00:02:16,650 --> 00:02:17,790
so it let's give it that.

15005
00:02:18,150 --> 00:02:22,710
And the last thing that you'll notice here is that there's a squiggly line here

15006
00:02:22,740 --> 00:02:26,880
under Backrub because that is a unknown word in the dictionary.

15007
00:02:27,240 --> 00:02:31,050
So if you want to, you can actually save words into the dictionary

15008
00:02:31,320 --> 00:02:33,420
to you get rid of all of these squiggly lines.

15009
00:02:33,780 --> 00:02:35,940
This is actually a name of a company,

15010
00:02:35,940 --> 00:02:38,280
so it's probably not going to be in the dictionary.

15011
00:02:38,580 --> 00:02:41,250
But if you go ahead and put your cursor on it like this,

15012
00:02:41,490 --> 00:02:45,720
you'll see a little light-bulb light up and you can go ahead and select save 

15013
00:02:45,720 --> 00:02:47,490
'Backrub' to project-level dictionary,

15014
00:02:47,910 --> 00:02:50,850
and that will get rid of all of your warnings and errors

15015
00:02:51,120 --> 00:02:54,000
and you'll see a nice green check mark in the right corner.

15016
00:02:55,110 --> 00:02:57,990
Now that we've done all of this formatting with the data,

15017
00:02:58,020 --> 00:03:03,020
let's really examine it. What we have here is a list of dictionaries.

15018
00:03:04,390 --> 00:03:09,390
Each of the dictionaries have the same key for the question text and the same

15019
00:03:09,640 --> 00:03:11,320
key for the question answer.

15020
00:03:11,890 --> 00:03:16,890
So what we need to do is we need to be able to bring this question data into the

15021
00:03:17,560 --> 00:03:21,850
main.py file. But instead of having a list of dictionaries,

15022
00:03:22,240 --> 00:03:25,120
we want a list of question objects.

15023
00:03:25,690 --> 00:03:30,690
We know already that we can create a new question object by simply constructing

15024
00:03:31,690 --> 00:03:35,740
one from the question and then giving it the required inputs.

15025
00:03:36,160 --> 00:03:39,700
But in order to do this inside the main.py file,

15026
00:03:40,420 --> 00:03:45,420
we, of course, have to import the question model and we'll also need to import the

15027
00:03:45,790 --> 00:03:49,480
data.py. So from the question model

15028
00:03:49,480 --> 00:03:54,310
I'm going to import the question class, and from the data file

15029
00:03:54,340 --> 00:03:56,830
I'm going to import the question data.

15030
00:03:57,550 --> 00:04:02,260
Now that you've got both the question data and the question class,

15031
00:04:02,950 --> 00:04:06,010
your goal is to create the question bank.

15032
00:04:06,670 --> 00:04:08,020
And once you're done,

15033
00:04:08,200 --> 00:04:12,100
it should contain a list of question objects

15034
00:04:12,520 --> 00:04:15,610
each being initialized with a question and an answer,

15035
00:04:16,390 --> 00:04:21,390
and the data is going to come from these dictionaries from the question data.

15036
00:04:22,450 --> 00:04:26,440
So you'll need to think about how you can loop through that question data in

15037
00:04:26,440 --> 00:04:28,930
order to create this list of question objects.

15038
00:04:29,440 --> 00:04:31,510
Pause the video and give that a go now.

15039
00:04:34,930 --> 00:04:37,690
All right. So we know that we need to create this question bank

15040
00:04:37,750 --> 00:04:40,600
which is going to be a list of question objects.

15041
00:04:41,110 --> 00:04:43,930
So I'm going to start out just by creating an empty list

15042
00:04:44,380 --> 00:04:49,380
and then I'm going to loop through each of the questions inside the question

15043
00:04:49,720 --> 00:04:53,380
data. And for each of these questions,

15044
00:04:53,380 --> 00:04:58,180
I'm going to create a variable, which we'll call a question_text

15045
00:04:58,870 --> 00:05:03,870
and the question_text is going to come from those question dictionaries from

15046
00:05:04,660 --> 00:05:06,730
here. And if we imagine

15047
00:05:06,730 --> 00:05:10,330
we have one of these dictionaries and we want to get hold of the question_text,

15048
00:05:10,660 --> 00:05:12,910
then we'll need to tap into the text key.

15049
00:05:13,390 --> 00:05:18,130
So I'm going to put text inside here and I'm going to do the same thing for the

15050
00:05:18,130 --> 00:05:18,963
answer.

15051
00:05:19,570 --> 00:05:24,570
So this is going to be using the answer key that we see right here.

15052
00:05:25,600 --> 00:05:29,500
So now if we're looping through the first one, we should have 'A slug's

15053
00:05:29,500 --> 00:05:34,500
blood is green.' and 'True' for these two variables.

15054
00:05:35,080 --> 00:05:38,230
So now I'm ready to create my new question,

15055
00:05:39,040 --> 00:05:41,980
which is going to be created from the question class.

15056
00:05:42,430 --> 00:05:46,660
And you can see that in the constructor, it's expecting two parameters;

15057
00:05:46,930 --> 00:05:51,930
one is the q_text and another is the q_answer.

15058
00:05:53,650 --> 00:05:58,340
We can set the q_text to this local variable called question_text,

15059
00:05:58,760 --> 00:06:02,750
and we can set the answer to the question_answer. And of course,

15060
00:06:02,750 --> 00:06:04,100
for simplicity sake,

15061
00:06:04,130 --> 00:06:09,130
we can also get rid of the named parameters and have them just as the parameters

15062
00:06:09,400 --> 00:06:10,233
like this.

15063
00:06:10,630 --> 00:06:15,630
So now that we've created this new question object and saved it in the variable

15064
00:06:16,000 --> 00:06:19,690
new_question, we're ready to add it into our question bank.

15065
00:06:19,870 --> 00:06:22,060
So we can say a question_bank.append,

15066
00:06:22,450 --> 00:06:26,560
and we'll append each of these new questions that we create in the for loop.

15067
00:06:27,190 --> 00:06:30,640
So now if I go ahead and print this question bank,

15068
00:06:31,120 --> 00:06:35,350
you'll see that when I hit run and select my main file,

15069
00:06:35,830 --> 00:06:40,830
then it prints out a list denoted by the square brackets and inside the list

15070
00:06:41,830 --> 00:06:46,090
you've got a whole bunch of question objects. And if you count,

15071
00:06:46,120 --> 00:06:47,920
there's actually 12 in total,

15072
00:06:48,190 --> 00:06:52,060
one for each of the dictionaries inside our question_data.

15073
00:06:52,750 --> 00:06:55,600
So very often when you're getting data from the

15074
00:06:55,810 --> 00:06:59,410
internet or from somewhere else, it'll likely be in a format

15075
00:06:59,410 --> 00:07:04,210
that's very similar to this. What we're doing is we're converting each of these

15076
00:07:04,210 --> 00:07:08,500
pieces of data which has a string key,

15077
00:07:08,680 --> 00:07:10,630
which means it's very easy to make typos

15078
00:07:10,630 --> 00:07:12,880
if we're using this in our code everywhere,

15079
00:07:13,270 --> 00:07:15,760
and we're converting it into a object

15080
00:07:16,120 --> 00:07:21,120
which now has all of that data in a very easy and foolproof way of accessing the

15081
00:07:22,660 --> 00:07:26,380
text and the answer. And you'll notice here,

15082
00:07:26,410 --> 00:07:29,050
if I actually write the wrong thing,

15083
00:07:29,320 --> 00:07:31,810
then it's actually going to highlight to me

15084
00:07:32,080 --> 00:07:35,980
this is not something that you can use. And if I start typing,

15085
00:07:36,010 --> 00:07:38,920
I've also got the help of the auto-insert.

15086
00:07:40,480 --> 00:07:45,480
Now that we've created our question bank of question objects, the next step is to

15087
00:07:46,240 --> 00:07:48,160
actually get our quiz up and running.


15088
00:00:00,480 --> 00:00:03,360
Now that we've managed to create a question bank

15089
00:00:03,420 --> 00:00:06,960
which consists of a list of question

15090
00:00:06,990 --> 00:00:11,990
objects, the next natural thing to do is to actually bring up one of those

15091
00:00:13,440 --> 00:00:18,440
questions and to ask the user to answer the question. Now,

15092
00:00:19,380 --> 00:00:23,370
for all of the questioning and quizzing functionality,

15093
00:00:23,760 --> 00:00:25,890
we're going to put that into the QuizBrain,

15094
00:00:26,370 --> 00:00:28,800
which is going to be a class in its own right.

15095
00:00:29,280 --> 00:00:33,570
And it's going to manage everything from asking the user for the next question,

15096
00:00:33,870 --> 00:00:37,920
checking whether if the answer was right and also checking to see if we're

15097
00:00:37,920 --> 00:00:39,660
actually at the end of the quiz.

15098
00:00:40,530 --> 00:00:44,070
You're going to be creating this QuizBrain and class

15099
00:00:44,550 --> 00:00:49,550
and this class is going to have two attributes to begin with; a question number

15100
00:00:50,910 --> 00:00:53,760
which is going to have a default value of zero

15101
00:00:54,090 --> 00:00:57,660
because all our quizzes will start from the first question.

15102
00:00:58,290 --> 00:01:02,700
And this is going to keep track of which question the user is currently on.

15103
00:01:03,210 --> 00:01:07,410
And we're going to use that number to go through the list of questions

15104
00:01:07,770 --> 00:01:12,570
which will be passed over to this QuizBrain object when it gets initialized.

15105
00:01:13,230 --> 00:01:17,100
And then you're going to have a method which is called next_question

15106
00:01:17,490 --> 00:01:21,210
which will pull up the question from that list

15107
00:01:21,450 --> 00:01:23,880
depending on which current question number we're on.

15108
00:01:24,480 --> 00:01:28,080
If you take a look at the final version of the quiz game,

15109
00:01:28,500 --> 00:01:33,500
you can see that it displays the question number, Q. and then that number.

15110
00:01:34,050 --> 00:01:36,120
And then it displays the question text,

15111
00:01:36,600 --> 00:01:39,900
and then it asks the user for an input, true or false.

15112
00:01:40,860 --> 00:01:43,380
This is what we're going to be focusing on in this lesson.

15113
00:01:44,130 --> 00:01:46,890
Inside your quiz-game-start,

15114
00:01:47,160 --> 00:01:51,060
go to the quiz_brain file and create the quiz brain class.

15115
00:01:51,600 --> 00:01:54,930
Add those two attributes; one is the question number

15116
00:01:54,930 --> 00:01:59,310
which starts out with a default value and the other is the question list

15117
00:01:59,520 --> 00:02:03,000
which is going to be initialized when you create a new quiz brain.

15118
00:02:03,540 --> 00:02:08,539
And we're going to be passing over this question bank here into this question

15119
00:02:08,940 --> 00:02:11,280
list when we initialize a new QuizBrain.

15120
00:02:12,030 --> 00:02:15,300
Pause the video and see if you can complete this challenge.

15121
00:02:15,380 --> 00:02:16,213
Right?

15122
00:02:19,880 --> 00:02:23,030
All right. So let's start off by creating our new class

15123
00:02:23,060 --> 00:02:28,060
which is going to be called QuizBrain and inside this class, we'll need to

15124
00:02:28,790 --> 00:02:30,920
initialize some of those attributes,

15125
00:02:31,280 --> 00:02:35,870
so I'm going to create the init method. Inside the init method

15126
00:02:35,930 --> 00:02:40,700
I'm going to create that first attribute which was called question_number

15127
00:02:41,570 --> 00:02:45,230
and I said we would set it to have a default value of zero.

15128
00:02:45,380 --> 00:02:48,800
So this means every time we create a new QuizBrain 

15129
00:02:48,800 --> 00:02:50,390
object from this class,

15130
00:02:50,750 --> 00:02:55,190
it's ready going to have an attribute called question_number that set to zero.

15131
00:02:56,030 --> 00:03:00,520
Now the next attribute is called question_list,

15132
00:03:01,210 --> 00:03:05,230
and this is not going to have a default value. Instead,

15133
00:03:05,290 --> 00:03:08,470
it's going to get it as a value passed over.

15134
00:03:09,040 --> 00:03:14,040
So lets put that as a q_list here and set it equal to question_list.

15135
00:03:15,490 --> 00:03:18,640
So what's going to happen is inside our main.py file,

15136
00:03:18,910 --> 00:03:23,260
we're going to be initializing that QuizBrain and the value that we're going to

15137
00:03:23,260 --> 00:03:28,260
put in there as the question list is going to be the question bank. This way

15138
00:03:30,010 --> 00:03:34,810
we'll receive the question bank and it will be inside this question list

15139
00:03:34,840 --> 00:03:38,170
attribute. Now I have another challenge for you.

15140
00:03:38,560 --> 00:03:42,640
Create a method called next_question inside the QuizBrain.

15141
00:03:43,360 --> 00:03:48,250
This method needs to retrieve the item at the current question number from the

15142
00:03:48,250 --> 00:03:51,250
question list. And once you have this item,

15143
00:03:51,310 --> 00:03:56,310
use the input function to show the user the question text and ask for the

15144
00:03:56,440 --> 00:03:59,650
user's answer. Pause the video and give this a go.

15145
00:04:04,930 --> 00:04:06,430
Alright, here's the solution.

15146
00:04:06,880 --> 00:04:10,330
First we're gonna define a new method called the next_question,

15147
00:04:11,470 --> 00:04:16,470
and this method is basically going to get hold of the current question and that

15148
00:04:17,980 --> 00:04:21,279
is of course going to be from the question list.

15149
00:04:21,730 --> 00:04:26,650
And then we're going to tap into that list and get hold of the item at the

15150
00:04:26,860 --> 00:04:30,430
current question_number. So for example,

15151
00:04:30,430 --> 00:04:32,920
question_number is going to start out being zero

15152
00:04:33,460 --> 00:04:36,160
and so it's going to go into this list

15153
00:04:36,220 --> 00:04:41,220
which is basically going to be our list of questions from our main.py,

15154
00:04:41,830 --> 00:04:43,300
so our question bank.

15155
00:04:43,870 --> 00:04:48,870
And remember, each of the items inside that list is a question object and

15156
00:04:49,030 --> 00:04:52,900
question objects have text attributes and answer attributes.

15157
00:04:53,440 --> 00:04:56,800
So in addition to getting hold of the current question,

15158
00:04:57,310 --> 00:05:02,310
we can then get hold of the current question text by taking the current question

15159
00:05:04,690 --> 00:05:09,610
and then just simply writing .text to get the value that's saved in that

15160
00:05:09,610 --> 00:05:10,443
attribute.

15161
00:05:11,290 --> 00:05:14,830
We're going to use an input to ask the user for

15162
00:05:14,890 --> 00:05:17,200
what their answer is to this question.

15163
00:05:17,560 --> 00:05:21,550
This is going to be an fstring because we're going to be inserting the current_

15164
00:05:21,550 --> 00:05:25,960
question.text. And at the very beginning

15165
00:05:26,470 --> 00:05:27,340
if you remember,

15166
00:05:27,340 --> 00:05:31,660
we also have the Q. and then the number and then the colon.

15167
00:05:32,260 --> 00:05:35,530
So that will be the self.question_number.

15168
00:05:36,100 --> 00:05:39,490
And then we've got our colon and then it's going to be the question text.

15169
00:05:39,880 --> 00:05:44,530
And then we're going to ask the user for a input; true or false.

15170
00:05:45,880 --> 00:05:48,220
And that's it. That completes the challenge.

15171
00:05:48,670 --> 00:05:53,650
Now all that's left is to show the very first question to the user and run our

15172
00:05:53,650 --> 00:05:58,250
code. Let's go back to the main.py and import the QuizBrain class.

15173
00:05:58,970 --> 00:06:03,970
So we're going to say from the quiz_brain file import the QuizBrain class.

15174
00:06:05,840 --> 00:06:08,030
And once we've created our question bank,

15175
00:06:08,390 --> 00:06:11,810
then the next thing to do is to create our new quiz.

15176
00:06:12,290 --> 00:06:15,380
So this is going to be a new QuizBrain object

15177
00:06:15,980 --> 00:06:20,090
and when we initialize it, we have to pass in a list of questions.

15178
00:06:20,510 --> 00:06:23,450
And that is of course going to be the question bank.

15179
00:06:24,290 --> 00:06:27,050
So now that we've got our quiz up and running,

15180
00:06:27,110 --> 00:06:31,460
then we can say quiz.next_question.

15181
00:06:32,090 --> 00:06:35,000
Let's go ahead and run this main.py file.

15182
00:06:35,660 --> 00:06:40,660
And you can see we get our question text being displayed, true or false being

15183
00:06:41,240 --> 00:06:45,110
asked, but our question number starts from zero.

15184
00:06:45,770 --> 00:06:46,790
And that is, of course,

15185
00:06:46,790 --> 00:06:51,790
because we need zero here in order to get hold of the first question from the

15186
00:06:52,520 --> 00:06:56,330
list and that's why this has a default value of zero.

15187
00:06:56,840 --> 00:06:59,030
But by the time we reach this input,

15188
00:06:59,120 --> 00:07:03,080
it would be really good if this actually read one instead of zero.

15189
00:07:03,620 --> 00:07:07,160
So one way we could do this is we could do this plus one,

15190
00:07:07,610 --> 00:07:12,140
but remembering that we actually need to increase the question number every

15191
00:07:12,140 --> 00:07:14,570
single time we call next_question anyways,

15192
00:07:14,930 --> 00:07:17,870
then once we've gotten hold of the current question,

15193
00:07:18,170 --> 00:07:23,170
we can actually tap into that self.question_number and increase it by one.

15194
00:07:23,900 --> 00:07:25,610
This will have the same effect,

15195
00:07:25,760 --> 00:07:30,320
and if you look at it now we've got the right question number being shown here,

15196
00:07:30,680 --> 00:07:35,570
the right text being shown, and then we can insert true or false.

15197
00:07:36,680 --> 00:07:37,760
Now at this stage,

15198
00:07:37,790 --> 00:07:42,020
our program is just going to exit. In the next lesson,

15199
00:07:42,260 --> 00:07:47,260
we're going to have to work out a way for our questions to keep being asked. And

15200
00:07:48,080 --> 00:07:50,840
we'll need to write some more code for that to work.


15201
00:00:00,330 --> 00:00:01,620
In the previous lesson,

15202
00:00:01,650 --> 00:00:06,650
we managed to get our QuizBrain up and running and to start asking the user for

15203
00:00:07,200 --> 00:00:08,032
their answer.

15204
00:00:08,550 --> 00:00:13,550
But currently, there's no way for our program to continue to the next question

15205
00:00:14,220 --> 00:00:17,250
once the user has typed an input. However,

15206
00:00:17,250 --> 00:00:19,920
if we take a look at the final version of the quiz game,

15207
00:00:20,280 --> 00:00:23,400
you can see once the user's typed an input, it

15208
00:00:23,400 --> 00:00:28,400
then goes to the next question and shows them the question number 2

15209
00:00:28,620 --> 00:00:31,320
and the question text for that second question.

15210
00:00:32,189 --> 00:00:36,360
How can we create that functionality to work with our QuizBrain?

15211
00:00:37,050 --> 00:00:37,290
Well,

15212
00:00:37,290 --> 00:00:42,210
if we could create another method called still_has_questions

15213
00:00:42,540 --> 00:00:46,800
well then inside our main.py we could probably create a while loop and

15214
00:00:47,140 --> 00:00:48,420
the while loop checks

15215
00:00:48,480 --> 00:00:52,950
if the quiz still has questions remaining.

15216
00:00:53,550 --> 00:00:57,240
Well, then in that case, we're going to keep going to the next question.

15217
00:00:57,870 --> 00:01:02,870
So how do we create this functionality and how do we create it inside the 

15218
00:01:03,270 --> 00:01:07,680
QuizBrain? Your job is to create a new method here

15219
00:01:08,040 --> 00:01:11,820
which is going to be called still_has_questions.

15220
00:01:12,450 --> 00:01:16,440
And this is going to return a boolean, either true or false.

15221
00:01:16,800 --> 00:01:18,240
And depending on that boolean,

15222
00:01:18,360 --> 00:01:22,290
we can get our while loop to keep working and keep running and looping,

15223
00:01:22,650 --> 00:01:25,020
or we're going to get the loop to stop

15224
00:01:25,260 --> 00:01:28,050
once the quiz has run out of questions.

15225
00:01:29,250 --> 00:01:33,000
Here's the behavior that you're looking for by the end of the challenge.

15226
00:01:33,420 --> 00:01:38,280
The while loop should continue serving up the next question to the user until we

15227
00:01:38,280 --> 00:01:40,050
reach the end of the quiz.

15228
00:01:40,380 --> 00:01:45,380
Have a think about how the question number and the length of the question list

15229
00:01:45,870 --> 00:01:50,190
relate to each other and see if you can complete this challenge.

15230
00:01:53,820 --> 00:01:54,180
All right.

15231
00:01:54,180 --> 00:01:59,180
So we know that we can get the length of our question list by using the Len

15232
00:02:00,120 --> 00:02:05,120
function. Currently, in all the current version of the question bank,

15233
00:02:05,700 --> 00:02:08,430
we have 12 questions in total.

15234
00:02:08,880 --> 00:02:11,250
So the length is going to be 12.

15235
00:02:11,850 --> 00:02:16,850
Now we want our loop to keep going until we've reached the number of questions

15236
00:02:17,700 --> 00:02:18,570
in our list.

15237
00:02:19,170 --> 00:02:24,170
What we could do is we could check to see if the self.question_number is

15238
00:02:25,530 --> 00:02:30,530
less than the length of self.question_list. In that case, we'll return true,

15239
00:02:32,430 --> 00:02:35,130
but otherwise we'll return false.

15240
00:02:36,600 --> 00:02:40,980
Remember that this question number gets increased every time we show the user

15241
00:02:40,980 --> 00:02:44,640
the next question. It starts out being zero

15242
00:02:44,880 --> 00:02:46,920
and then it goes immediately to one.

15243
00:02:47,370 --> 00:02:51,150
And then we get to the end of the next question function

15244
00:02:51,540 --> 00:02:54,570
and we get to our while loop. So in our while loop,

15245
00:02:54,600 --> 00:02:59,100
we can check to see if the quiz still has questions.

15246
00:02:59,710 --> 00:03:04,210
And if this is true, then go to the next question. But if it's false,

15247
00:03:04,240 --> 00:03:06,970
then exit the loop and we're at the end of the game.

15248
00:03:08,050 --> 00:03:10,090
Back inside our QuizBrain

15249
00:03:10,300 --> 00:03:15,300
we can actually simplify this method even more because we know that this is

15250
00:03:16,020 --> 00:03:18,570
going to be evaluated by the computer

15251
00:03:18,930 --> 00:03:23,010
and it's going to be either that true or false. If it is it's true

15252
00:03:23,040 --> 00:03:26,130
then it goes into this block. And if it's false,

15253
00:03:26,190 --> 00:03:27,900
then it goes into the else block.

15254
00:03:28,410 --> 00:03:32,100
We can actually save ourselves all of this effort by 

15255
00:03:32,130 --> 00:03:36,540
simply just returning this expression. Now,

15256
00:03:36,540 --> 00:03:41,540
what it's going to do is, let's say that a = 5 and b =

15257
00:03:45,030 --> 00:03:45,863
3.

15258
00:03:46,260 --> 00:03:50,100
And if we were to return five is 

15259
00:03:50,130 --> 00:03:51,540
greater than three,

15260
00:03:51,870 --> 00:03:55,560
then this is basically the same as this expression

15261
00:03:55,890 --> 00:04:00,150
which gets evaluated by the computer. And when this code runs,

15262
00:04:00,180 --> 00:04:05,080
it's going to be either true or it's going to be false. So that

15263
00:04:05,130 --> 00:04:07,860
that value is then going to be straight away

15264
00:04:07,860 --> 00:04:12,180
returned by this method back into this while loop

15265
00:04:12,240 --> 00:04:15,960
to see if we should continue going to the next question or not.

15266
00:04:16,620 --> 00:04:21,510
So let's run this file and you can see it asks me the first question.

15267
00:04:22,230 --> 00:04:24,480
And then it's going to go to the next question.

15268
00:04:24,810 --> 00:04:29,810
And then it's going to basically keep going until it gets to the end of the list

15269
00:04:31,230 --> 00:04:32,910
of questions and then it

15270
00:04:32,970 --> 00:04:37,230
ends our entire program. In the next lesson

15271
00:04:37,290 --> 00:04:42,150
we're going to figure out how we can check the answer that the user has inputted

15272
00:04:42,150 --> 00:04:45,930
here and see if its actually the correct answer.


15273
00:00:00,180 --> 00:00:02,490
Currently when we run our code

15274
00:00:02,910 --> 00:00:06,780
you can see that while we can input our answer,

15275
00:00:07,380 --> 00:00:12,030
our code doesn't actually really care because it's not checking to see if it's

15276
00:00:12,030 --> 00:00:14,280
right or wrong. In this lesson

15277
00:00:14,310 --> 00:00:17,520
we're going to add one more method to our QuizBrain

15278
00:00:17,970 --> 00:00:22,970
and that's the ability to check the answer that the user inputted and see if it

15279
00:00:22,980 --> 00:00:27,870
was correct. And that means we need to keep track of the user's score.

15280
00:00:27,990 --> 00:00:30,300
So we'll add another attribute score

15281
00:00:30,540 --> 00:00:33,030
which has a default value of zero to begin with

15282
00:00:33,360 --> 00:00:38,220
and it'll increase every time they get a question right. So in this lesson,

15283
00:00:38,250 --> 00:00:42,660
we're going to create a new method called check_answer.

15284
00:00:43,470 --> 00:00:48,470
And this check_answer function is going to be used to see if the user's answer

15285
00:00:50,640 --> 00:00:55,640
which comes from this input is the same as the actual answer to the current

15286
00:00:57,240 --> 00:00:58,073
question.

15287
00:00:58,920 --> 00:01:03,920
What we need to do is we need to save this user's input inside a variable

15288
00:01:05,190 --> 00:01:07,350
which we'll call user_answer.

15289
00:01:08,430 --> 00:01:12,150
And then I'm going to call our check_answer method

15290
00:01:12,600 --> 00:01:17,100
and I want to pass over the user_answer. Now, in addition,

15291
00:01:17,100 --> 00:01:22,100
I also want to pass over the correct answer and the correct answer is going to

15292
00:01:22,830 --> 00:01:26,130
be the current_question.answer.

15293
00:01:26,430 --> 00:01:30,330
So let's replace that with current_question.answer

15294
00:01:30,990 --> 00:01:35,190
because we know that current_question is a question object

15295
00:01:35,490 --> 00:01:38,820
which has a text attribute and an answer attribute.

15296
00:01:39,480 --> 00:01:44,480
And once we've passed over the user's answer and the correct answer,

15297
00:01:45,180 --> 00:01:49,440
then we can receive it inside our check_answer function as a parameter.

15298
00:01:50,580 --> 00:01:52,770
So we'll call this user_answer

15299
00:01:53,340 --> 00:01:56,760
and the second one we'll call the correct_answer.

15300
00:01:58,560 --> 00:02:01,860
So now this input is going to be passed over here

15301
00:02:02,310 --> 00:02:06,210
and the correct answer is going to be under this variable name.

15302
00:02:06,780 --> 00:02:11,780
So now we can see if the user_answer is equal to the correct_answer.

15303
00:02:13,260 --> 00:02:14,790
And just for safety sake,

15304
00:02:14,820 --> 00:02:18,840
it's usually a good idea to drop both sides to

15305
00:02:18,840 --> 00:02:22,050
a lowercase so they are comparable. This way

15306
00:02:22,050 --> 00:02:25,620
just in case the user answers True or true,

15307
00:02:25,890 --> 00:02:27,660
it will be treated exactly the same.

15308
00:02:28,860 --> 00:02:32,940
If the user_answer matches the correct answer, well

15309
00:02:32,940 --> 00:02:35,880
then this means that they got it right, so let's print it.

15310
00:02:38,550 --> 00:02:42,960
But on the other hand, if that was false then that means they got it wrong.

15311
00:02:43,080 --> 00:02:45,210
So let's tell them that's wrong.

15312
00:02:46,500 --> 00:02:51,500
Now it might also be a good idea to tell the user what the actual correct answer

15313
00:02:51,750 --> 00:02:56,010
was. Now you have a choice depending on where you want to put that.

15314
00:02:56,070 --> 00:03:01,070
So you can either choose to only show them the correct answer if they got it

15315
00:03:01,510 --> 00:03:03,340
wrong like this.

15316
00:03:03,580 --> 00:03:06,670
But I think it's actually a good idea to show them the correct answer

15317
00:03:06,970 --> 00:03:08,320
even if they're got it right.

15318
00:03:08,470 --> 00:03:13,030
So I'm going to change the indentation so that it's actually outside of the

15319
00:03:13,030 --> 00:03:13,990
if/else block,

15320
00:03:14,500 --> 00:03:19,120
and it's just simply going to happen once the if/else block is complete.

15321
00:03:19,930 --> 00:03:24,930
Now, the next thing to do is to keep track of the user's score so that every

15322
00:03:25,780 --> 00:03:30,760
time they get a question right then it should increase the score by one.

15323
00:03:31,450 --> 00:03:36,450
Pause the video and add a new attribute called score to the QuizBrain class and

15324
00:03:37,510 --> 00:03:41,650
increment it by one every time the user gets it right. Now,

15325
00:03:41,650 --> 00:03:46,510
what you're aiming for is to be able to print out the score and the current

15326
00:03:46,510 --> 00:03:51,510
question so that you can tell the user 'Your current score is:' and printed out

15327
00:03:52,330 --> 00:03:54,340
after every single question.

15328
00:03:55,300 --> 00:03:57,730
Pause the video now and complete this challenge.

15329
00:04:00,400 --> 00:04:04,750
All right. So let's go ahead and create our new score attribute

15330
00:04:05,110 --> 00:04:08,440
which is again going to have a default starting value of zero.

15331
00:04:09,070 --> 00:04:12,820
And then whenever the user gets a question right,

15332
00:04:13,090 --> 00:04:16,300
then we're going to increase their score by one.

15333
00:04:16,660 --> 00:04:20,290
So let's tap into that score attribute and then increase it by one.

15334
00:04:21,250 --> 00:04:24,010
Now we've got our score being tracked,

15335
00:04:24,070 --> 00:04:28,810
then we want to be able to print out what the users' current score is.

15336
00:04:29,350 --> 00:04:34,090
So at the end of the check_answer, let's create another print statement

15337
00:04:34,450 --> 00:04:36,640
which gives the user their score.

15338
00:04:36,820 --> 00:04:39,820
So 'Your current score is:'

15339
00:04:40,360 --> 00:04:43,360
and then we'll insert the self.score.

15340
00:04:44,440 --> 00:04:49,090
And we'll also tell them out of a possible number of questions,

15341
00:04:49,120 --> 00:04:52,240
so we can insert the self.question_number.

15342
00:04:52,660 --> 00:04:56,380
So this means that they've completed five questions so far where they've had

15343
00:04:56,380 --> 00:04:58,600
five chances to get things right

15344
00:04:58,930 --> 00:05:03,040
then we can show them that they got however many right out of those five.

15345
00:05:03,370 --> 00:05:07,510
So maybe they got 3/5 right, or maybe they got 5/5

15346
00:05:07,510 --> 00:05:10,570
right. And now if we run our code,

15347
00:05:10,630 --> 00:05:12,970
we can see that print statement in action.

15348
00:05:15,400 --> 00:05:18,850
So it tells me that I got it right and then the--

15349
00:05:19,930 --> 00:05:23,590
and then the correct answer was true.

15350
00:05:24,070 --> 00:05:26,950
And that my current score is 1/1.

15351
00:05:32,940 --> 00:05:33,773
Right

15352
00:05:34,260 --> 00:05:36,780
Now, if I get one of these wrong,

15353
00:05:37,350 --> 00:05:42,300
then you can see that my current score is now 3/4.

15354
00:05:43,230 --> 00:05:46,800
And it tells the user that they've missed out on one point.

15355
00:05:47,760 --> 00:05:51,510
It'd be nice to add a little bit of space in between each of the questions.

15356
00:05:51,570 --> 00:05:55,110
I want to be able to see all the questions that I've done so far.

15357
00:05:55,320 --> 00:05:56,910
So I don't want to clear the screen,

15358
00:05:57,230 --> 00:06:00,020
but I want to be able to add a new line here.

15359
00:06:00,560 --> 00:06:05,540
So at the end of my print statement, I'm going to add a print

15360
00:06:05,570 --> 00:06:07,490
which is just going to print a new line.

15361
00:06:08,780 --> 00:06:10,670
So that in between each question

15362
00:06:10,670 --> 00:06:14,930
I have a little bit of space to tell each question apart from the other.

15363
00:06:16,010 --> 00:06:20,060
The final thing I need to do is to tell the user

15364
00:06:20,330 --> 00:06:23,660
their final score once the entire quiz is finished,

15365
00:06:24,170 --> 00:06:29,170
and we want to be able to print something like 'You've completed the quiz' and

15366
00:06:32,450 --> 00:06:34,730
then we'll print out, um,

15367
00:06:34,760 --> 00:06:38,210
something like 'Your final score was:'

15368
00:06:38,390 --> 00:06:42,230
and then we'll give them their final score so maybe they got 10/12

15369
00:06:42,620 --> 00:06:47,420
correct. And this way they can see what their final outcome was.

15370
00:06:47,900 --> 00:06:51,740
So have a think about how you might be able to print these two lines here

15371
00:06:52,190 --> 00:06:57,190
and how you can get hold of the question number and the user's score to print

15372
00:06:57,800 --> 00:07:01,820
inside our main.py. So pause the video and complete this challenge.

15373
00:07:03,620 --> 00:07:06,080
All right. So the first line is very easy to print.

15374
00:07:06,140 --> 00:07:08,990
All we need to do is wrap a print statement around it.

15375
00:07:09,560 --> 00:07:13,610
The second line is a little bit more tricky because it will need to have an 

15376
00:07:13,610 --> 00:07:14,443
fstring.

15377
00:07:14,450 --> 00:07:19,450
So we want this second value to be the total number of questions in the question

15378
00:07:20,300 --> 00:07:21,133
bank,

15379
00:07:21,350 --> 00:07:25,700
or it could be the current question number that the user is on.

15380
00:07:26,270 --> 00:07:27,200
You can do either.

15381
00:07:27,230 --> 00:07:32,230
You can either say question bank and wrap a length function around it,

15382
00:07:34,100 --> 00:07:37,010
like this, which will give you the total number of questions

15383
00:07:37,310 --> 00:07:40,880
cause we're at the end of the quiz now. Alternatively,

15384
00:07:40,910 --> 00:07:45,910
you can also tap into the quiz object and get the question number when the quiz

15385
00:07:46,910 --> 00:07:50,150
ended. And similarly with the score,

15386
00:07:50,150 --> 00:07:52,370
you can say quiz.score.

15387
00:07:53,120 --> 00:07:56,300
So now once the quiz has completed,

15388
00:07:57,980 --> 00:08:01,700
you can see our print statements. You've completed the quiz and your final score

15389
00:08:01,730 --> 00:08:06,500
was 0/12 because I was just button mashing and it didn't get any

15390
00:08:06,500 --> 00:08:07,370
questions right.


15391
00:00:00,120 --> 00:00:03,360
So I'm sure you've had a few gos with your quiz now

15392
00:00:03,360 --> 00:00:06,930
and you've answered all the questions and you know all the correct answers.

15393
00:00:07,440 --> 00:00:11,670
It's a little bit dry if we only have one question bank, right?

15394
00:00:12,210 --> 00:00:15,660
Wouldn't it be nice to be able to switch out the question data with some new

15395
00:00:15,660 --> 00:00:19,530
questions? Now you could certainly write your own questions,

15396
00:00:19,560 --> 00:00:24,000
just change each of the texts and the answers to whatever question you want to

15397
00:00:24,000 --> 00:00:28,740
add. An alternative though, is to use the Open Trivia database,

15398
00:00:28,920 --> 00:00:33,480
which is a free-to-use user contributed trivia question database

15399
00:00:33,900 --> 00:00:38,900
and it has over 3000 verified questions to pick from. In the course resources

15400
00:00:39,300 --> 00:00:44,190
I've got a link to the open TDB, the open trivia database,

15401
00:00:44,610 --> 00:00:49,610
and we can go ahead and take a look at their API to see how we can generate some

15402
00:00:49,710 --> 00:00:54,120
questions. For example, if I wanted 10 questions on,

15403
00:00:54,480 --> 00:00:59,430
let's say computers and I want the difficulty to be easy

15404
00:00:59,880 --> 00:01:02,850
and I want to select the type to be true or false

15405
00:01:03,270 --> 00:01:06,840
And then I'm going to go and click generate API URL.

15406
00:01:07,420 --> 00:01:08,940
Now that I've got my URL,

15407
00:01:08,940 --> 00:01:12,600
I can open up a new tab and go to that location.

15408
00:01:13,320 --> 00:01:18,320
Now, we'll get some data generated in a JSON format

15409
00:01:18,990 --> 00:01:21,750
which is a JavaScript object notation

15410
00:01:22,170 --> 00:01:26,700
but it actually looks pretty much the same as a Python dictionary.

15411
00:01:27,210 --> 00:01:32,210
So let's go ahead and copy everything that's here and then go into our data.py

15412
00:01:33,570 --> 00:01:38,570
and I'm going to replace the entire question data with what I got just now.

15413
00:01:39,330 --> 00:01:42,870
Now once you paste it in, it's going to be very hard to read.

15414
00:01:42,930 --> 00:01:47,930
So we'll need to go to code and then reformat code in order to get it to look a

15415
00:01:48,870 --> 00:01:50,160
little bit more normal.

15416
00:01:50,610 --> 00:01:55,610
So you can see that we've got this dictionary and it has two key-value pairs.

15417
00:01:57,480 --> 00:02:02,480
One is a response code and another is a list which is under the key results.

15418
00:02:04,350 --> 00:02:06,060
If I go and reformat this again,

15419
00:02:06,090 --> 00:02:10,949
you can see that results is comprised of 10 dictionaries.

15420
00:02:11,490 --> 00:02:11,700
Now,

15421
00:02:11,700 --> 00:02:16,700
each of these dictionaries contain a whole bunch of key-value pairs and inside

15422
00:02:17,430 --> 00:02:20,760
each of these key-value pairs it has a bunch of things

15423
00:02:20,760 --> 00:02:24,960
including the category, that type, the difficulty,

15424
00:02:24,960 --> 00:02:29,370
the question, the correct answer, and the incorrect answers.

15425
00:02:29,850 --> 00:02:34,850
So what we can see here is we have a dictionary and then we have these two key

15426
00:02:35,820 --> 00:02:36,653
value pairs.

15427
00:02:37,110 --> 00:02:42,110
So you can simply just get rid of the enclosing dictionary and leave it so that

15428
00:02:43,080 --> 00:02:47,940
you have this as a list of dictionaries. Now,

15429
00:02:47,970 --> 00:02:52,970
if we go and reformat our code so that we can see each of these dictionary

15430
00:02:53,310 --> 00:02:54,143
objects,

15431
00:02:54,390 --> 00:02:59,070
you can see there's a total of five key value pairs and they each have the keys

15432
00:02:59,080 --> 00:03:03,970
category, type, question, which is the question text and the correct answer

15433
00:03:04,000 --> 00:03:06,550
which is a string that's true or false.

15434
00:03:07,120 --> 00:03:10,360
These are the two bits of information that we're interested in.

15435
00:03:10,840 --> 00:03:15,840
So can you figure out how you can modify the main.py in order to get our

15436
00:03:16,030 --> 00:03:20,320
quiz to start working again with this new data?

15437
00:03:20,830 --> 00:03:23,110
Pause the video and complete this challenge.

15438
00:03:26,400 --> 00:03:30,810
All right. So we've got our question data from the data file,

15439
00:03:31,320 --> 00:03:35,010
but now we have to change the names of these keys.

15440
00:03:35,460 --> 00:03:37,890
Whereas before it was called text and answer,

15441
00:03:38,310 --> 00:03:41,340
now it's called question and correct answer.

15442
00:03:41,520 --> 00:03:46,520
So the question_text is under the key question and correct answer is under

15443
00:03:46,830 --> 00:03:48,330
the key correct _answer.

15444
00:03:48,840 --> 00:03:53,250
So just by changing those two things and pasting all of that data in

15445
00:03:53,640 --> 00:03:58,640
we can already get started with this brand new quiz. And you can play with it and

15446
00:04:00,780 --> 00:04:04,620
mess around with different data from the open trivia database,

15447
00:04:04,860 --> 00:04:07,380
change the category, change the difficulty,

15448
00:04:07,710 --> 00:04:10,770
and you have endless number of questions to play with.

15449
00:04:11,460 --> 00:04:16,260
And this really brings about some of the advantages of Object Oriented

15450
00:04:16,260 --> 00:04:21,260
Programming. Notice how only our main.py file actually has knowledge of how each

15451
00:04:23,550 --> 00:04:28,550
of these classes work and behave. Our QuizBrain actually didn't need to be

15452
00:04:30,000 --> 00:04:31,470
touched at all

15453
00:04:31,500 --> 00:04:36,150
when we changed our data over. This is modularity at its best.

15454
00:04:36,450 --> 00:04:41,450
We're able to completely switch up the question data to a different language,

15455
00:04:41,670 --> 00:04:46,200
to a different topic, to a different format, and the quiz brain doesn't care.

15456
00:04:46,680 --> 00:04:51,680
All it has to concern itself with is how to track which question we're on,

15457
00:04:52,080 --> 00:04:55,230
how to get the next question, how to check the answer.

15458
00:04:55,650 --> 00:04:59,940
And as long as it's able to do that and perform the functionality of a quiz,

15459
00:05:00,330 --> 00:05:04,440
it's unconcerned by where the data comes from, how it's formatted,

15460
00:05:04,770 --> 00:05:08,430
and it will continue to work. So, as you can imagine,

15461
00:05:08,460 --> 00:05:10,770
if your colleague was working on quiz brain,

15462
00:05:11,190 --> 00:05:15,450
they don't actually need to know how the data looks or how it's structured.

15463
00:05:15,840 --> 00:05:19,170
And you, on the other hand, could be working on the data,

15464
00:05:19,200 --> 00:05:23,070
getting hold of each of these pieces of data or writing the quiz.

15465
00:05:23,550 --> 00:05:26,910
And you can already see how we've got a piece of program

15466
00:05:27,210 --> 00:05:32,210
that's able to be far more complex than what we used to be able to create with

15467
00:05:32,580 --> 00:05:34,050
simple procedural code.



15468
00:00:00,090 --> 00:00:04,890
Hey guys, welcome to Day 18 of 100 Days of Code. Now,

15469
00:00:04,890 --> 00:00:07,680
today, we're going to learn about some really exciting things.

15470
00:00:07,710 --> 00:00:10,110
We're going to look deeper into turtle graphics,

15471
00:00:10,470 --> 00:00:15,120
starting to do things with graphics, with the help of the turtle module.

15472
00:00:15,450 --> 00:00:19,020
And we're also going to be learning about Python tuples as well as looking

15473
00:00:19,020 --> 00:00:22,200
deeper into importing modules in Python.

15474
00:00:23,010 --> 00:00:24,540
By the end of today,

15475
00:00:24,570 --> 00:00:29,570
we will have written some code that is capable of generating million dollar

15476
00:00:31,110 --> 00:00:34,740
pieces of odd work. So we're looking at a Damien Hirst,

15477
00:00:35,010 --> 00:00:38,640
which sold for 1.275

15478
00:00:38,640 --> 00:00:41,970
million pounds a little while ago.

15479
00:00:42,450 --> 00:00:47,450
And we're going to be using Python turtle to create a similarly beautiful dot spot

15480
00:00:50,820 --> 00:00:51,653
painting,

15481
00:00:51,690 --> 00:00:56,580
which could be randomized and create beautiful pieces of art

15482
00:00:56,700 --> 00:00:59,550
like this one. Once you're ready,

15483
00:00:59,610 --> 00:01:02,790
head over to the next lesson and let's get started.


15484
00:00:00,540 --> 00:00:02,700
As I mentioned, in this section

15485
00:00:02,700 --> 00:00:06,030
we're going to be working heavily with the Python turtle module.

15486
00:00:06,630 --> 00:00:08,070
And as we've seen before,

15487
00:00:08,130 --> 00:00:13,130
this turtle module is essentially a way for us to be able to draw graphics onto

15488
00:00:13,380 --> 00:00:14,213
the screen.

15489
00:00:14,520 --> 00:00:19,320
And you can imagine it as just this little wandering turtle with a pen on its

15490
00:00:19,320 --> 00:00:23,160
back and everywhere it goes, it leaves a trail of line.

15491
00:00:23,970 --> 00:00:28,230
So let's take a closer look at the turtle graphics module. Now here,

15492
00:00:28,260 --> 00:00:33,240
I've already created a brand new PyCharm project called day-18-start,

15493
00:00:33,630 --> 00:00:37,800
and I've created a blank main.py. Inside this project,

15494
00:00:37,890 --> 00:00:42,450
we're going to import our turtle. So as you saw from previous lessons,

15495
00:00:42,450 --> 00:00:47,070
we can import the turtle module and get hold of the turtle class

15496
00:00:47,100 --> 00:00:50,220
by simply saying from the turtle module,

15497
00:00:50,520 --> 00:00:55,520
import the Turtle class with the capital T. And now we can work with that class

15498
00:00:56,760 --> 00:01:01,230
and we're going to use it to create a new turtle object.

15499
00:01:01,680 --> 00:01:03,540
Let's call it timmy_the_turtle,

15500
00:01:05,310 --> 00:01:09,210
and this is going to be created from the turtle class.

15501
00:01:09,240 --> 00:01:13,410
So this is going to be a new turtle object saved inside this variable.

15502
00:01:14,070 --> 00:01:16,680
Now, when we actually run our project,

15503
00:01:18,630 --> 00:01:21,450
you'll see a brief flash of a window

15504
00:01:21,510 --> 00:01:25,950
and then it will disappear. In order for that window to stay where it is

15505
00:01:26,040 --> 00:01:29,430
and only exit when we actually click on the window,

15506
00:01:29,730 --> 00:01:33,510
we have to create another object, which we'll call our screen.

15507
00:01:34,020 --> 00:01:36,870
And this comes from the total module as well.

15508
00:01:36,960 --> 00:01:39,690
And it's a class called Screen.

15509
00:01:40,140 --> 00:01:42,720
We also have to import that if we want to use it.

15510
00:01:43,260 --> 00:01:45,390
So now that we've got hold of the screen,

15511
00:01:45,420 --> 00:01:49,110
we can use one of the functions called exitonclick.

15512
00:01:50,520 --> 00:01:52,560
So this way, when we run our code,

15513
00:01:52,590 --> 00:01:57,590
we can see our turtle show up in the middle as this little arrow and our window

15514
00:01:58,200 --> 00:02:02,490
won't disappear until we click on it. That's what exitonclick does.

15515
00:02:02,970 --> 00:02:06,210
So we need to keep this bit of the code at the very bottom.

15516
00:02:06,330 --> 00:02:09,810
It has to happen after we've done all this stuff with turtle.

15517
00:02:09,930 --> 00:02:13,920
So I'm going to move it to the bottom of the file. Now here's a question.

15518
00:02:13,950 --> 00:02:18,850
How do I know how to do that? Is it because I am super experienced 

15519
00:02:18,850 --> 00:02:21,450
and I remember everything off the top of my head? No.

15520
00:02:21,780 --> 00:02:25,920
Is it because I'm super clever and I can just work things out? No,

15521
00:02:26,070 --> 00:02:27,750
that's definitely not the answer.

15522
00:02:28,170 --> 00:02:32,730
The way that programmers go about figuring out how to use these modules or

15523
00:02:32,730 --> 00:02:36,240
packages is through the use of documentation.

15524
00:02:36,570 --> 00:02:41,570
So let's take a look at the turtle graphics documentation.

15525
00:02:42,810 --> 00:02:46,530
And this is what the documentation looks like. It's a very,

15526
00:02:46,530 --> 00:02:51,530
very long document that goes through all of the things that you can do with this

15527
00:02:52,560 --> 00:02:55,260
module. Now, if we scroll down,

15528
00:02:55,260 --> 00:03:00,260
you've got a contents page here and you can see the various things you can do

15529
00:03:00,550 --> 00:03:05,550
with the turtle. Control it's motion or control the pen or change its visibility

15530
00:03:06,910 --> 00:03:11,380
or appearance. Now let's take a look at this shape function,

15531
00:03:11,890 --> 00:03:16,240
and you can see the documentation explains to us that this particular function

15532
00:03:16,570 --> 00:03:20,800
will set the turtles shape to one with a given name.

15533
00:03:21,520 --> 00:03:26,440
And we can choose from the various shapes, including arrow, turtle, circle,

15534
00:03:26,450 --> 00:03:29,370
square, triangle, and classic. So 

15535
00:03:29,380 --> 00:03:34,380
let's use this knowledge and change timmy_the_turtle to have a different shape.

15536
00:03:35,440 --> 00:03:38,050
So inside here, we can put any of those strings.

15537
00:03:38,080 --> 00:03:42,490
So I'm going to change it to a turtle shape. This way when I run my code,

15538
00:03:42,520 --> 00:03:45,610
you can see an actual turtle appear on the screen.

15539
00:03:45,670 --> 00:03:49,510
It just makes it a little bit easier to visualize what's going on with this

15540
00:03:49,510 --> 00:03:53,290
module. Now, of course you can change it to any of the other ones,

15541
00:03:53,380 --> 00:03:57,610
test it out and see if it works. In an ideal world

15542
00:03:57,640 --> 00:04:02,640
you would read through the entire documentation of a module before you start

15543
00:04:02,650 --> 00:04:05,170
using it. But of course, in the real world,

15544
00:04:05,170 --> 00:04:08,110
we all know that that's not quite possible.

15545
00:04:08,680 --> 00:04:13,030
Very often you'll need the help of Stack Overflow. For example,

15546
00:04:13,060 --> 00:04:18,060
if we wanted to look at turtle graphics and we wanted to change the shape

15547
00:04:19,980 --> 00:04:21,420
of the turtle.

15548
00:04:22,500 --> 00:04:26,310
Then you can see that when you actually search for this inside the Stack

15549
00:04:26,310 --> 00:04:30,690
Overflow search bar, your results are not very relevant.

15550
00:04:31,260 --> 00:04:36,260
But if I put the same query into google.com and at the end I tag on the keyword

15551
00:04:37,530 --> 00:04:41,490
Stack Overflow, we get results that are a lot more relevant.

15552
00:04:41,610 --> 00:04:43,950
So if we take a look at this post,

15553
00:04:44,010 --> 00:04:48,090
you can see that it's starting to talk about this shape method.

15554
00:04:48,600 --> 00:04:52,740
And down here, this answer even links to the relevant part of the documentation

15555
00:04:53,100 --> 00:04:57,150
which we've already seen previously, this shape method.

15556
00:04:57,600 --> 00:05:02,600
The idea is that you might need to Google around to see how to achieve a certain

15557
00:05:02,940 --> 00:05:03,960
thing you want to do.

15558
00:05:04,410 --> 00:05:07,710
And then once you've seen some of the methods that they mentioned in the

15559
00:05:07,710 --> 00:05:08,543
answers,

15560
00:05:08,580 --> 00:05:13,470
then go to the documentation and read up on it in order to actually understand

15561
00:05:13,470 --> 00:05:18,120
what it does and how to use it. Coming back to our turtle,

15562
00:05:18,240 --> 00:05:22,200
what if we wanted to change the color of the turtle? Well,

15563
00:05:22,200 --> 00:05:26,550
this should be quite easy. We can see that in the color control section,

15564
00:05:26,850 --> 00:05:31,850
we can use this color method to set the pen color and fill color.

15565
00:05:32,880 --> 00:05:36,600
So for example, we could say timmy_the_turtle.color,

15566
00:05:36,870 --> 00:05:39,180
and we can put in a string here like red.

15567
00:05:39,690 --> 00:05:42,000
So now when I run my code,

15568
00:05:42,330 --> 00:05:47,330
you can see that my turtle timmy is now red instead of the previous default

15569
00:05:48,660 --> 00:05:50,760
color of black. Now,

15570
00:05:50,760 --> 00:05:55,140
how do I know which colors I can use other than the ones shown in the example,

15571
00:05:55,170 --> 00:05:57,350
red or green? Well,

15572
00:05:57,350 --> 00:06:02,350
it says that when we want to change the color using a color string or an RGB

15573
00:06:02,690 --> 00:06:07,190
color, then it accepts inputs as in pen color.

15574
00:06:07,220 --> 00:06:12,220
So it basically says it's using this method to set the color. And this method

15575
00:06:12,560 --> 00:06:16,880
gets the color from a Tk color specifications string.

15576
00:06:17,300 --> 00:06:19,700
So let's Google and see what that is.

15577
00:06:21,950 --> 00:06:23,300
If we click on the first link,

15578
00:06:23,330 --> 00:06:28,330
you can see it takes us to the strings and we've got a whole bunch of names and

15579
00:06:28,610 --> 00:06:31,160
their corresponding RGB values.

15580
00:06:31,640 --> 00:06:34,610
So what is this Tk exactly?

15581
00:06:35,390 --> 00:06:39,170
Tk is short for the module tkinter,

15582
00:06:39,200 --> 00:06:40,820
which is the Tk interface.

15583
00:06:40,910 --> 00:06:45,200
And this is one of the ways that you can use Python to create a graphical user

15584
00:06:45,200 --> 00:06:48,350
interface, which is also known as a GUI.

15585
00:06:48,680 --> 00:06:52,520
If you think back to the beginning of computer history,

15586
00:06:53,060 --> 00:06:55,340
if you think about the Apple Lisa one,

15587
00:06:55,400 --> 00:06:59,270
that was the first computer that had a graphical user interface,

15588
00:06:59,270 --> 00:07:01,430
where it had a mouse and you can point and click.

15589
00:07:01,820 --> 00:07:04,100
And this was huge back in the day.

15590
00:07:04,640 --> 00:07:08,480
But before then we had text interfaces like MS-

15591
00:07:08,480 --> 00:07:12,170
DOS or like our console when we're using Python.

15592
00:07:12,770 --> 00:07:17,540
The text interfaces accept text commands and the graphical user interfaces can

15593
00:07:17,540 --> 00:07:22,540
show images and allows you to click and drag and do all of those things by

15594
00:07:23,150 --> 00:07:28,150
looking instead of just typing commands. And tkinter is what the turtle module

15595
00:07:29,810 --> 00:07:34,460
actually relies on under the hood to create these graphics,

15596
00:07:34,700 --> 00:07:36,860
like our turtle showing up here.

15597
00:07:37,790 --> 00:07:40,520
So now that we've seen where these names come from,

15598
00:07:40,970 --> 00:07:45,970
a much easier way of using these colors is through a page where they have all

15599
00:07:46,550 --> 00:07:50,030
been rendered on screen. So in the course resources,

15600
00:07:50,060 --> 00:07:54,680
we link to this page where you can see all the colors next to their names,

15601
00:07:54,920 --> 00:07:57,290
and you can pick and choose whichever one you want.

15602
00:07:57,980 --> 00:08:02,980
Have a go at changing the color of the turtle by using one of these colors that

15603
00:08:03,050 --> 00:08:04,040
you see on screen.

15604
00:08:05,390 --> 00:08:09,710
Now that we've seen how we can create a new turtle and change its appearance,

15605
00:08:09,980 --> 00:08:14,750
it's time to look at how we can make it do certain things. In the documentation,

15606
00:08:14,780 --> 00:08:18,620
you can see there's a whole bunch of things you can do in terms of moving and

15607
00:08:18,620 --> 00:08:23,600
drawing. A very simple one would be to move it forward or to move it backwards.

15608
00:08:26,570 --> 00:08:30,590
So we can tell it to move forwards by a hundred paces.

15609
00:08:31,310 --> 00:08:33,980
And when we rerun the code, this is what we see.

15610
00:08:35,059 --> 00:08:39,110
So we can get it to move forwards, move backwards, and also move left

15611
00:08:39,110 --> 00:08:43,400
and right. So here, the input that it takes is an angle,

15612
00:08:43,490 --> 00:08:48,490
a number between zero and 360 to tell it what angle

15613
00:08:48,740 --> 00:08:51,530
to turn right or to turn left. For example,

15614
00:08:51,560 --> 00:08:56,100
currently our turtle is facing East. So if we wanted to face

15615
00:08:56,310 --> 00:08:56,960
South,

15616
00:08:56,960 --> 00:09:01,670
then we have to get it to turn right by 90 degrees. So we can say,

15617
00:09:01,910 --> 00:09:05,090
timmy_the_turtle.right and then we put 90 in here.

15618
00:09:06,380 --> 00:09:10,400
And that's what it looks like. In the upcoming lessons

15619
00:09:10,430 --> 00:09:13,820
we've got a whole bunch of turtle challenges for you

15620
00:09:14,300 --> 00:09:18,290
that's going to test not only your knowledge of programming that you've learned so

15621
00:09:18,290 --> 00:09:23,150
far, but also how well you can read and understand documentation.

15622
00:09:23,630 --> 00:09:28,630
This is a key skill to acquire as a seasoned developer because after all,

15623
00:09:29,390 --> 00:09:32,030
we can't always rely on other people telling us what to do.

15624
00:09:32,060 --> 00:09:34,070
We have to be able to get it from the source.

15625
00:09:34,490 --> 00:09:38,420
So make sure that you've got the documentation pulled up and have a glance

15626
00:09:38,450 --> 00:09:39,283
through it.

15627
00:09:39,320 --> 00:09:42,950
Then you can head over to the next lesson and start tackling some of these

15628
00:09:42,950 --> 00:09:43,783
challenges.

15629
00:09:44,390 --> 00:09:48,770
Now remember that some of these challenges can be quite a bit of a struggle,

15630
00:09:49,130 --> 00:09:53,180
but keep in mind that the struggle is good. The more that you struggle,

15631
00:09:53,180 --> 00:09:55,940
the stronger you get. I'll see you on the next lesson.


15632
00:00:00,420 --> 00:00:01,050
All right. Now,

15633
00:00:01,050 --> 00:00:05,460
the first turtle challenge I've got for you is pretty easy.

15634
00:00:05,490 --> 00:00:09,060
It's kind of like doing your stretches before we get started with the proper

15635
00:00:09,060 --> 00:00:14,040
workout. So in this challenge, you're going to be using turtle to draw a square.

15636
00:00:14,400 --> 00:00:17,610
It's going to be a simple 100 by 100 square,

15637
00:00:18,060 --> 00:00:19,980
and it doesn't matter where it is on the screen.

15638
00:00:20,250 --> 00:00:24,000
As long as you can get it to draw this, then consider yourself successful.

15639
00:00:24,600 --> 00:00:27,300
Pause the video, have a read through the documentation,

15640
00:00:27,330 --> 00:00:30,510
have a think about the challenge and go ahead and complete it.

15641
00:00:34,590 --> 00:00:34,920
All right.

15642
00:00:34,920 --> 00:00:38,370
So I'm going to comment out the previous lines of code other than the line where

15643
00:00:38,370 --> 00:00:39,960
we created our timmy_

15644
00:00:39,960 --> 00:00:43,890
the_turtle. Now to draw a square is pretty simple.

15645
00:00:43,920 --> 00:00:48,240
All we have to do is to get it to go forwards by a hundred paces,

15646
00:00:48,570 --> 00:00:52,470
and then we turn left or turn right by 90 degrees.

15647
00:00:52,890 --> 00:00:57,890
And then we get it to repeat this process one time for each of the sides.

15648
00:00:58,320 --> 00:00:59,760
And when we run the code,

15649
00:00:59,820 --> 00:01:04,680
now you can see it draws a simple square. Now,

15650
00:01:04,680 --> 00:01:07,410
of course, because we're programmers and we're lazy

15651
00:01:07,410 --> 00:01:11,970
and we don't like looking at repeated code, a much simpler way of doing this is

15652
00:01:11,970 --> 00:01:13,920
to simply create a for loop.

15653
00:01:14,280 --> 00:01:19,280
And we're going to use the range operator to say that this loop should run four

15654
00:01:19,830 --> 00:01:23,040
times and then let's indent these two lines of code.

15655
00:01:23,490 --> 00:01:26,640
And now it will do exactly the same as before

15656
00:01:26,940 --> 00:01:31,140
but this time we've only had to write three lines of code instead of a million.

15657
00:01:31,350 --> 00:01:33,720
This is probably the best solution,

15658
00:01:33,810 --> 00:01:38,340
but I will also take this solution because after all,

15659
00:01:38,370 --> 00:01:42,240
we're just doing the warmup right? Now, while doing that exercise

15660
00:01:42,270 --> 00:01:46,260
you might have realized that it's actually really painful to keep calling our

15661
00:01:46,260 --> 00:01:49,590
object timmy_the_turtle with such a long name.

15662
00:01:50,100 --> 00:01:52,710
But now that we've written it in so many lines

15663
00:01:52,770 --> 00:01:55,020
especially if you created this version of the code,

15664
00:01:55,410 --> 00:01:58,920
it's actually quite painful to go through each of them and change its name.

15665
00:01:59,400 --> 00:02:00,840
Remember in PyCharm

15666
00:02:00,840 --> 00:02:05,370
we have a really simple way of changing the name of a variable or a function,

15667
00:02:05,550 --> 00:02:09,840
basically anything that we've named ourselves. All we have to do is right-

15668
00:02:09,840 --> 00:02:12,300
click on the name, refactor and rename,

15669
00:02:12,630 --> 00:02:17,100
and we can change it to something really simple like how about Tim. Now

15670
00:02:17,100 --> 00:02:21,600
we've drastically made our code look a lot simpler just by doing that one thing.

15671
00:02:22,500 --> 00:02:25,440
I'll try to remind you of some of these shortcuts as we go along,

15672
00:02:25,860 --> 00:02:28,530
but once you're ready, head over to the next challenge.


15673
00:00:00,330 --> 00:00:04,500
So we're importing the turtle module in order to use it in our code.

15674
00:00:05,010 --> 00:00:09,450
So I want to spend a few minutes just quickly talking about all the ways that we

15675
00:00:09,450 --> 00:00:10,770
can import modules.

15676
00:00:10,940 --> 00:00:15,940
[inaudible]

15677
00:00:18,380 --> 00:00:21,740
You've already seen the basic import and it's very simple.

15678
00:00:21,740 --> 00:00:23,480
We have the keyword import,

15679
00:00:23,750 --> 00:00:26,300
and then we have the module name that we want to import.

15680
00:00:27,320 --> 00:00:31,580
So if we had just imported our turtle module with the simple import,

15681
00:00:32,000 --> 00:00:34,280
then in order to create a new turtle,

15682
00:00:34,640 --> 00:00:39,620
we would have to say the module name and then the name of the class.

15683
00:00:40,100 --> 00:00:42,290
And we would create a new turtle like this.

15684
00:00:49,970 --> 00:00:50,630
Now this is,

15685
00:00:50,630 --> 00:00:54,170
perfectly fine, but it would make it so much more convenient

15686
00:00:54,200 --> 00:00:59,120
if we were using that turtle class a lot to write our code like this.

15687
00:00:59,660 --> 00:01:04,099
This way, we don't have to keep writing turtle.Turtle or turtle.

15688
00:01:04,129 --> 00:01:07,580
whatever else it is that we want to import. And this code is again

15689
00:01:07,610 --> 00:01:11,240
pretty simple. We have the keyword from, we have the keyword import,

15690
00:01:11,570 --> 00:01:13,160
we have the module name,

15691
00:01:13,280 --> 00:01:16,280
and also the thing in the module that we want to import.

15692
00:01:17,570 --> 00:01:21,110
As you've seen with this kind of syntax, we can simply write...

15693
00:01:24,440 --> 00:01:27,890
And this means that if we were creating a lot of turtles, let's say

15694
00:01:27,980 --> 00:01:30,680
instead of just creating tim, we also created tom

15695
00:01:32,690 --> 00:01:33,800
and terry.

15696
00:01:34,340 --> 00:01:39,020
Then we don't have to keep writing turtle.Turtle,

15697
00:01:39,020 --> 00:01:41,180
turtle.Turtle every single time.

15698
00:01:41,660 --> 00:01:44,510
So this from import is really helpful

15699
00:01:44,510 --> 00:01:48,890
if you're going to use this thing that you're importing a lot and you don't want

15700
00:01:48,890 --> 00:01:51,320
to keep writing the name of the module in front of it.

15701
00:01:51,740 --> 00:01:55,430
Now you can actually go one step further. Instead of saying

15702
00:01:55,430 --> 00:01:58,640
just from turtle import whatever it is you want,

15703
00:01:59,000 --> 00:02:04,000
you can actually import everything by using the asterix.

15704
00:02:06,020 --> 00:02:10,759
Now you can use everything that's in that module as if it were in the current

15705
00:02:10,759 --> 00:02:14,870
file. And this has advantages as well as disadvantages

15706
00:02:15,410 --> 00:02:20,410
because it can make it really hard to see where each of these classes or methods

15707
00:02:20,630 --> 00:02:25,580
come from. So for example, if I just wrote forward, you can see, I can,

15708
00:02:25,580 --> 00:02:26,420
I can do this.

15709
00:02:26,720 --> 00:02:31,720
But it's really confusing to just see this method somewhere in isolation

15710
00:02:32,600 --> 00:02:36,380
because it's like, well, what is moving forward? What's actually happening,

15711
00:02:36,380 --> 00:02:37,550
where does this come from?

15712
00:02:39,230 --> 00:02:43,640
And it's more obvious when you import a module like random.

15713
00:02:43,640 --> 00:02:46,520
So from random import everything,

15714
00:02:47,180 --> 00:02:49,310
and then somewhere else in our code,

15715
00:02:49,340 --> 00:02:52,250
we might just write something like choice.

15716
00:02:52,490 --> 00:02:57,490
And this is a method from random where we can pick a random item from a

15717
00:02:57,620 --> 00:03:01,060
sequence, like a list. Now this code works

15718
00:03:01,090 --> 00:03:04,990
but it's really confusing. Like, how is this choice working?

15719
00:03:05,410 --> 00:03:10,150
Where does it come from? Which module enables this capability? Instead,

15720
00:03:10,150 --> 00:03:13,150
we just have the method whack right in our code

15721
00:03:13,510 --> 00:03:16,030
and it's very confusing as to its origins.

15722
00:03:16,570 --> 00:03:18,370
So well, amongst the Python community,

15723
00:03:18,400 --> 00:03:22,210
it's very unusual that you'll see good code written like this.

15724
00:03:22,540 --> 00:03:26,890
I want you to know what it does because you might come across it in the wild,

15725
00:03:27,130 --> 00:03:29,350
just so you understand what it's actually doing,

15726
00:03:29,650 --> 00:03:32,410
but I want you to try and avoid writing code like this.

15727
00:03:32,860 --> 00:03:36,610
Instead if you're using something from a module many times,

15728
00:03:36,610 --> 00:03:41,380
so more than three times, then you can think about using this from import.

15729
00:03:41,770 --> 00:03:44,080
But if you're only using it once or twice,

15730
00:03:44,320 --> 00:03:49,320
then just import the whole module and write out this turtle.Turtle so that

15731
00:03:49,380 --> 00:03:54,380
you can see that this module is the one that contains this class and that is

15732
00:03:55,060 --> 00:03:58,540
imported and we're using it to create this object.

15733
00:03:59,110 --> 00:04:01,960
It's just a lot more expressive in terms of the code.

15734
00:04:09,240 --> 00:04:12,660
Now, the final thing I want to show you which is quite a useful thing,

15735
00:04:12,870 --> 00:04:16,019
is how to alias modules. So for example,

15736
00:04:16,110 --> 00:04:19,500
we can import our turtle as t.

15737
00:04:19,709 --> 00:04:24,710
So what this does is we import from the turtle module and we give that module an

15738
00:04:25,830 --> 00:04:27,930
alias name, so a name that we define.

15739
00:04:29,700 --> 00:04:33,630
And what this means is that if you were to create your new object from the

15740
00:04:33,630 --> 00:04:37,770
module turtle, instead of writing out turtle every single time,

15741
00:04:37,980 --> 00:04:41,760
you can just write t and that it will represent the entire module.

15742
00:04:42,030 --> 00:04:45,360
So sometimes you'll have modules which are really, really long.

15743
00:04:45,360 --> 00:04:49,350
So it could have a really long name and you don't want to type it out every

15744
00:04:49,350 --> 00:04:50,183
single time.

15745
00:04:50,400 --> 00:04:54,780
So you give it an alias name and it will be exactly the same as referring to the

15746
00:04:54,780 --> 00:04:56,490
entire name of the module.

15747
00:04:57,240 --> 00:05:00,990
And you can create a turtle like this. Now,

15748
00:05:01,050 --> 00:05:03,330
even though we've been writing import,

15749
00:05:03,630 --> 00:05:07,170
there are some modules that you can't just import, right?

15750
00:05:15,030 --> 00:05:19,560
So for example, if I wanted to import the heroes module

15751
00:05:19,920 --> 00:05:24,920
which is something that I can use to generate hero names like Decepticon or 

15752
00:05:26,160 --> 00:05:28,950
Leopardon, or Askew-Tronics,

15753
00:05:29,310 --> 00:05:33,390
then I can use one of the functions that's in that module,

15754
00:05:33,450 --> 00:05:35,310
heroes, called generate.

15755
00:05:35,940 --> 00:05:40,940
But if I just go into my code and I straight up try to import this module

15756
00:05:42,420 --> 00:05:45,900
which is called heroes, then you can see I get an error.

15757
00:05:46,290 --> 00:05:49,830
And the error says, there's no module named heroes.

15758
00:05:50,580 --> 00:05:55,170
Why is it that I can't do this but I can import turtle?

15759
00:05:55,980 --> 00:06:00,620
Well, the reason is because turtle is a module that's packaged with the Python

15760
00:06:00,620 --> 00:06:04,640
standard library. And this is a small library of code

15761
00:06:04,940 --> 00:06:09,800
which contains just the basics to get you started like a core set when you buy a

15762
00:06:09,800 --> 00:06:14,150
board game or like the basic track pieces when you buy a set of hot wheels.

15763
00:06:14,810 --> 00:06:19,130
So you can imagine this library of code as like a family library,

15764
00:06:19,160 --> 00:06:22,580
easily accessible, but very small. Now,

15765
00:06:22,610 --> 00:06:27,140
if we wanted to access the whole world of Python modules and packages,

15766
00:06:27,530 --> 00:06:32,150
then we need to go to a much bigger library. And that is,

15767
00:06:32,150 --> 00:06:34,580
of course, the Python packages,

15768
00:06:34,880 --> 00:06:39,470
which are hosted on the internet and we can install into our project as

15769
00:06:39,470 --> 00:06:41,540
and when we need them. So this way,

15770
00:06:41,540 --> 00:06:46,540
our final project doesn't become gigantic because we've got all of the modules

15771
00:06:46,640 --> 00:06:48,260
loaded into it from the internet.

15772
00:06:48,560 --> 00:06:51,860
Instead we only plug and play whatever it is we need.

15773
00:06:52,760 --> 00:06:57,050
So PyCharm is actually already smart enough to know that I probably want a module

15774
00:06:57,320 --> 00:06:58,670
that I haven't installed.

15775
00:06:59,150 --> 00:07:03,740
And you can see that as soon as I click on this error with the red underline,

15776
00:07:04,250 --> 00:07:08,480
I get a red light bulb over here. And if I click on it,

15777
00:07:08,550 --> 00:07:12,440
it gives me the prompt to install this package called heroes.

15778
00:07:12,950 --> 00:07:14,180
And once it's done,

15779
00:07:14,360 --> 00:07:19,360
then we can actually tap into this module and we can say heroes.gen.

15780
00:07:20,780 --> 00:07:24,200
And this is going to generate us a new hero name.

15781
00:07:24,830 --> 00:07:27,080
So let's go ahead and run our code.

15782
00:07:30,460 --> 00:07:33,820
And you can see we've got a name called Galvatron,

15783
00:07:33,850 --> 00:07:35,680
which is not bad actually.

15784
00:07:36,880 --> 00:07:41,410
So it's important to remember that when you try to import something that hasn't

15785
00:07:41,410 --> 00:07:44,440
been installed, like this villains package,

15786
00:07:44,800 --> 00:07:46,540
then when you try to run the code

15787
00:07:46,840 --> 00:07:50,230
you'll get an error that says no module named villains.

15788
00:07:50,770 --> 00:07:53,050
And this should prompt you to think, ah,

15789
00:07:53,080 --> 00:07:57,460
maybe that module is not a part of the Python standard library like turtle

15790
00:07:57,760 --> 00:07:59,710
and I actually have to install it.

15791
00:08:00,220 --> 00:08:03,100
Just remember that before you can import a module

15792
00:08:03,280 --> 00:08:06,670
sometimes if it's not bundled with the Python standard library,

15793
00:08:07,030 --> 00:08:08,710
then you might have to install it.


15794
00:00:00,390 --> 00:00:03,480
All right. Onwards to the next turtle challenge.

15795
00:00:03,990 --> 00:00:06,960
So this one is going to be a little bit more intensive,

15796
00:00:06,990 --> 00:00:08,880
but still a bit of a warmup.

15797
00:00:08,910 --> 00:00:13,910
So we're just going to go for a light jog and we're going to draw a dashed line.

15798
00:00:15,150 --> 00:00:18,720
You're going to get your turtle to draw a line like this

15799
00:00:19,050 --> 00:00:24,000
where it's going to draw a line for 10 paces and then a gap of 10 paces,

15800
00:00:24,360 --> 00:00:26,400
and then a solid line for 10 paces again

15801
00:00:26,400 --> 00:00:30,150
and it's going to repeat this until it does this 50 times.

15802
00:00:30,720 --> 00:00:33,270
The actual length of the line doesn't really matter,

15803
00:00:33,630 --> 00:00:37,260
the actual length of each of the sections doesn't really matter.

15804
00:00:37,260 --> 00:00:41,580
What's really important is you're able to get this alternating draw-

15805
00:00:41,580 --> 00:00:44,850
no-draw thing going on. To complete this challenge

15806
00:00:44,880 --> 00:00:49,880
you're going to need to look through the documentation and maybe also use the

15807
00:00:50,760 --> 00:00:55,230
help of Google or Stack Overflow and figure out how you can get this behavior to

15808
00:00:55,230 --> 00:01:00,090
happen. Have a think about it and pause the video and complete the challenge.

15809
00:01:03,000 --> 00:01:06,330
All right. So if we look through the table of contents here,

15810
00:01:06,720 --> 00:01:11,550
we can see that the thing that controls the pen is in this section.

15811
00:01:11,670 --> 00:01:15,660
We can control it's drawing, color, filling and more.

15812
00:01:16,080 --> 00:01:18,960
Now if we look at the drawing control you can see

15813
00:01:18,960 --> 00:01:23,790
we can get it to pen down and pen up. When we pull the pen down,

15814
00:01:23,970 --> 00:01:27,450
that means the pen is on the paper and it's going to make a mark.

15815
00:01:27,840 --> 00:01:32,370
But when the pen is pulled up, then there's going to be no drawing happening

15816
00:01:32,610 --> 00:01:34,740
when our turtle is moving.

15817
00:01:35,700 --> 00:01:39,270
That means we can write some sort of loop, right?

15818
00:01:39,270 --> 00:01:44,070
Where we get our turtle to move forwards by 10 paces

15819
00:01:44,640 --> 00:01:48,720
and then we can get this to pull the pen up.

15820
00:01:49,620 --> 00:01:54,300
And what this is going to do is allow us to move forwards without drawing.

15821
00:01:54,720 --> 00:01:59,220
So now, while the pen is held up we're going to go forwards. Once more

15822
00:01:59,310 --> 00:02:03,420
another 10 paces this is going to draw the blank. And then finally,

15823
00:02:03,420 --> 00:02:06,000
we're gonna go ahead and put the pen down again.

15824
00:02:07,890 --> 00:02:12,890
So now, all we need is for these four steps to repeat 15 times so we can write a

15825
00:02:15,780 --> 00:02:20,280
for loop and then create a range that goes from 0 to 15.

15826
00:02:20,730 --> 00:02:25,730
And then once we indent this block inside the for loop and run our code,

15827
00:02:26,430 --> 00:02:29,340
then you can see it draw our dashed line.

15828
00:02:30,030 --> 00:02:31,620
Did you manage to get this solution?

15829
00:02:31,980 --> 00:02:36,420
Did you manage to find the relevant part of the documentation to be able to pull

15830
00:02:36,420 --> 00:02:41,420
the pen up and put the pen down, or did you simply change your code so that it

15831
00:02:41,790 --> 00:02:45,840
drew black and then it drew white? All of these solutions would work,

15832
00:02:45,930 --> 00:02:50,930
but what I really wanted you to do is to dig through the documentation and find

15833
00:02:51,540 --> 00:02:54,360
the parts which will help you to achieve your goals.

15834
00:02:55,710 --> 00:02:57,000
Head over to the next lesson

15835
00:02:57,120 --> 00:03:00,180
and I've got another slightly harder challenge for you.


15836
00:00:00,390 --> 00:00:03,969
All right, so the next challenge gets a little bit harder.

15837
00:00:04,110 --> 00:00:10,200
It's like we're doing our sit ups now. In this challenge, you're going to be drawing a triangle, square,

15838
00:00:10,200 --> 00:00:13,950
pentagon, hexagon, heptagon, octagon, nonagon, and decagon.

15839
00:00:14,220 --> 00:00:21,180
So from three-sided shape to ten-sided shape and each of those shapes is going to be drawn with a random

15840
00:00:21,180 --> 00:00:26,340
color, and each of the sides are going to be 100 in terms of length,

15841
00:00:26,700 --> 00:00:34,470
and the final outcome should look something like this. All of these shapes overlaid on each other and

15842
00:00:34,470 --> 00:00:36,390
drawn out in sequence.

15843
00:00:37,140 --> 00:00:42,900
So you'll have to think a little bit about this because we know that a square has 90-degree angles.

15844
00:00:43,230 --> 00:00:48,980
So we could get our robot to go forwards and then turn right 90 degrees and then go forwards again.

15845
00:00:49,470 --> 00:00:51,430
But what about a Pentagon?

15846
00:00:51,690 --> 00:00:52,890
Well, a pentagon,

15847
00:00:52,890 --> 00:00:56,210
each of the corners has a 72 degree angle.

15848
00:00:57,390 --> 00:00:59,330
So what's the actual relationship?

15849
00:00:59,340 --> 00:01:00,570
How can we work this out?

15850
00:01:01,110 --> 00:01:05,700
Well, we know that to turn a full circle, it's 360 degrees.

15851
00:01:06,150 --> 00:01:14,370
So the way you work out the angle of each of these shapes is by dividing 360 by the number of sides.

15852
00:01:14,730 --> 00:01:17,410
So 360 divided by five is 72.

15853
00:01:17,490 --> 00:01:20,700
So each of the corners is 72 degrees.

15854
00:01:21,570 --> 00:01:27,000
Using this knowledge and what you've learned about Turtle, go ahead and see if you can complete this

15855
00:01:27,000 --> 00:01:27,570
challenge.

15856
00:01:27,750 --> 00:01:29,400
Pause video now and give it a go.

15857
00:01:32,880 --> 00:01:36,840
All right, so I'm going to delete the previous code and we're going to write the code that's going

15858
00:01:36,840 --> 00:01:43,560
to draw all of these shapes. The first thing I want to do is I want to put down that equation. So we

15859
00:01:43,560 --> 00:01:51,550
know that if we have 360 degrees divided by the number of sides, then we get the angle, right?

15860
00:01:51,780 --> 00:01:55,620
So let's save that into a variable called angle.

15861
00:01:56,520 --> 00:02:02,840
And then all we have to do is to get our robot to go forwards

15862
00:02:04,350 --> 00:02:13,800
by 100, we said. And then to get it to turn right and the angle that it's going to turn right by is

15863
00:02:13,800 --> 00:02:16,320
the one that we defined at the top there.

15864
00:02:17,010 --> 00:02:22,680
So then we just need this to be repeated for as many times as we have number of sides.

15865
00:02:23,580 --> 00:02:25,830
So we could create a for loop, for example.

15866
00:02:27,520 --> 00:02:31,120
And the range is going to take into account the number of sites.

15867
00:02:32,650 --> 00:02:39,520
So now if the number of sites is equal to let's say five, let's say we're trying to draw a pentagon,

15868
00:02:40,090 --> 00:02:42,050
then this would be the code.

15869
00:02:42,640 --> 00:02:44,170
So let's shift that along.

15870
00:02:44,530 --> 00:02:47,200
And now if we go ahead and run this code,

15871
00:02:48,680 --> 00:02:56,900
you can see it draws us a pentagon, a five-sided shape. So how can we get this loop to run for the

15872
00:02:56,900 --> 00:02:58,220
different sides?

15873
00:02:58,700 --> 00:03:07,550
How can we get it to go from a three-sided shape, a triangle, all the way to a ten-sided shape, a decagon?

15874
00:03:08,780 --> 00:03:13,220
To do this, instead of setting the number of sides statically like this,

15875
00:03:13,530 --> 00:03:16,700
why don't we create a function? Let's call it draw_shape.

15876
00:03:17,270 --> 00:03:24,470
And this function is going to take the number of sides that this shape has as an input.

15877
00:03:24,980 --> 00:03:29,660
And then the rest of this code can be indented inside the function.

15878
00:03:30,260 --> 00:03:33,890
And it probably makes sense to only calculate the angle once

15879
00:03:34,130 --> 00:03:39,080
when we need to draw the shape because for the given number of sides, that angle is going to be the

15880
00:03:39,080 --> 00:03:41,340
same across the entire shape.

15881
00:03:42,500 --> 00:03:48,950
For example, if it was a square then we're going to go from one to four drawing this four times.

15882
00:03:49,700 --> 00:03:56,960
So now later on, we can define another for loop and this for loop is going to go through all of the

15883
00:03:56,960 --> 00:03:59,270
different number of sides that we need.

15884
00:03:59,870 --> 00:04:06,560
Now, if we want a range of numbers between 3 and 10, we actually need to write the function 3,

15885
00:04:06,560 --> 00:04:10,700
11, because the stop number is excluded

15886
00:04:10,710 --> 00:04:14,150
so it'll stop at 10. As we loop through this range.

15887
00:04:14,570 --> 00:04:21,010
this shape_side_n is going to take on the value depending on where we are in the range.

15888
00:04:21,350 --> 00:04:26,630
So when we're first drawing this, we're going to draw a triangle with three sides so then we can pass

15889
00:04:26,630 --> 00:04:33,380
this shape_side_n into our draw_shape function and that should go from 3 to 10.

15890
00:04:33,920 --> 00:04:40,970
So let's run our code and see it draw our triangle first and then our square and then it just keeps

15891
00:04:40,970 --> 00:04:44,000
on going until it draws all of the shapes that we need.

15892
00:04:45,020 --> 00:04:51,030
Now, the very last part of the challenge is to make each of the lines a different random color.

15893
00:04:51,560 --> 00:04:53,090
So how can we do this?

15894
00:04:54,440 --> 00:04:59,270
So, of course, we're going to go to our good friend Google and we're going to search for the turtle

15895
00:04:59,270 --> 00:05:01,140
colors in Python.

15896
00:05:01,370 --> 00:05:08,510
I first tried to Google this without the python, and I got the different colors of various turtles,

15897
00:05:08,840 --> 00:05:10,280
which was really fascinating

15898
00:05:10,280 --> 00:05:11,980
but that's not what I wanted.

15899
00:05:12,560 --> 00:05:14,270
So if we take a look at the first link

15900
00:05:14,630 --> 00:05:21,260
this comes from a website called Trinket, and it has this interactive color palette where you can select

15901
00:05:21,260 --> 00:05:27,740
one of these colors that you like and then you'll get the turtle name, which then you can copy and

15902
00:05:27,740 --> 00:05:30,230
paste into maybe a list.

15903
00:05:30,740 --> 00:05:31,910
Let's call it colors.

15904
00:05:34,180 --> 00:05:39,940
And you can put as many colors into this palette as you want, and you can make it as extensive or as

15905
00:05:39,940 --> 00:05:41,200
short as you want it to be.

15906
00:05:41,860 --> 00:05:44,490
So here's a list that I created earlier.

15907
00:05:44,950 --> 00:05:55,990
And now, if we go ahead and set our turtle's color, so let's go ahead and get Tim and set his color to

15908
00:05:56,020 --> 00:06:03,160
a random color from this list which we know to be as simple as simply importing the random module

15909
00:06:03,550 --> 00:06:06,880
and then we can get hold of the random. choice

15910
00:06:07,240 --> 00:06:14,080
and then inside that method, we can pass in our list of colors so that it picks a random color from

15911
00:06:14,080 --> 00:06:14,680
that list.

15912
00:06:15,280 --> 00:06:16,990
So now let's run it again,

15913
00:06:16,990 --> 00:06:23,860
and you can see each time the shape is being drawn it's picking a random color from our list of colors.

15914
00:06:24,610 --> 00:06:25,680
So there you have it.

15915
00:06:26,020 --> 00:06:28,680
That's the solution to this challenge.

15916
00:06:29,140 --> 00:06:34,330
And this was a little bit more challenging I would say because we're doing functions and loops and

15917
00:06:34,330 --> 00:06:37,780
you have to get hold of some colors and you have to figure all of that out.

15918
00:06:38,050 --> 00:06:42,700
But hopefully you've managed just fine and you're ready to move on to the next challenge.


15919
00:00:00,360 --> 00:00:03,330
Now, our next challenge is our press up.

15920
00:00:04,170 --> 00:00:09,170
And this challenge is going to require you to draw a random walk.

15921
00:00:10,080 --> 00:00:14,850
Well, it's basically your turtle making random movements North, East,

15922
00:00:14,850 --> 00:00:19,620
South, or West, each time it progresses by the same distance,

15923
00:00:19,950 --> 00:00:24,810
but it can at any point choose which direction it wants to go out of the four.

15924
00:00:25,290 --> 00:00:29,130
And also you can see we've kept the color palette from the previous challenge,

15925
00:00:29,460 --> 00:00:34,410
and I've just applied it to the random walk so that each time it walks,

15926
00:00:34,470 --> 00:00:36,090
it's going to pick a different color.

15927
00:00:37,110 --> 00:00:42,110
Now this random walk is something that's used often in mathematics and other

15928
00:00:42,630 --> 00:00:43,463
disciplines.

15929
00:00:43,650 --> 00:00:48,650
So it's a way that can be used to model various real life situations.

15930
00:00:49,380 --> 00:00:50,700
Like for example

15931
00:00:50,700 --> 00:00:55,700
the financial status of a gambler or things like the path of a molecule in a

15932
00:00:57,270 --> 00:01:01,320
liquid or gas or the search path of a foraging animal,

15933
00:01:01,380 --> 00:01:06,000
and a whole bunch of other things. Take a look at this Wikipedia article

15934
00:01:06,030 --> 00:01:09,600
which I'll link to and take a look at all the applications

15935
00:01:09,630 --> 00:01:14,630
including sculpture making or Physics or brain research and a whole lot more.

15936
00:01:16,560 --> 00:01:17,820
So once you're ready,

15937
00:01:18,030 --> 00:01:23,030
go ahead and see if you can program your turtle to create a random walk using

15938
00:01:23,310 --> 00:01:24,210
random colors.

15939
00:01:24,480 --> 00:01:29,480
And I want you to think about how you can get the thickness of the drawing seen

15940
00:01:30,180 --> 00:01:33,600
here, so each of the lines is a lot thicker than before.

15941
00:01:34,140 --> 00:01:39,140
And also see if you can figure out how you can speed up the turtle so that it

15942
00:01:39,330 --> 00:01:43,050
draws much faster. And everything is of course

15943
00:01:43,050 --> 00:01:47,430
going to be in the documentation somewhere for you to find. Pause the video and

15944
00:01:47,430 --> 00:01:48,660
complete the challenge now.

15945
00:01:52,820 --> 00:01:56,240
Alright. So I'm going to delete all the code from our previous challenge,

15946
00:01:56,510 --> 00:01:59,150
but I'm going to keep my list of random colors,

15947
00:01:59,450 --> 00:02:01,610
which I'm going to use for my random walk here.

15948
00:02:02,510 --> 00:02:04,370
Now I'm going to keep the random import

15949
00:02:04,400 --> 00:02:08,180
even though it's currently unused because, as you guessed it, our random

15950
00:02:08,190 --> 00:02:10,759
walk is going to require some randomness.

15951
00:02:11,780 --> 00:02:16,640
So how do we actually get our robot to move in the four different directions?

15952
00:02:17,090 --> 00:02:20,240
Well, let's define another list called directions

15953
00:02:20,750 --> 00:02:24,560
and this is going to have all of the different directions

15954
00:02:24,590 --> 00:02:27,800
the turtle can face. So we'll start from 0

15955
00:02:28,190 --> 00:02:32,240
which will be facing East and then 90,

15956
00:02:32,240 --> 00:02:37,240
which will be facing North, 180 will be West and 270 will be South.

15957
00:02:40,220 --> 00:02:42,800
So now that we've got these random directions,

15958
00:02:42,830 --> 00:02:46,160
we can get Tim, our little turtle, to start moving.

15959
00:02:46,610 --> 00:02:49,940
So every time we're going to move forward by the same distance,

15960
00:02:50,630 --> 00:02:53,360
and it doesn't really matter how far you move your turtle

15961
00:02:53,780 --> 00:02:56,480
as long as you set a reasonable number.

15962
00:02:56,750 --> 00:03:01,750
So I'm just going to choose 30 and then I'm going to get my turtle to turn in a

15963
00:03:02,560 --> 00:03:03,820
random direction.

15964
00:03:04,330 --> 00:03:09,330
So I don't want to just use right all the time, so you can use left or right,

15965
00:03:10,390 --> 00:03:14,710
and pick a random direction from the list. But alternatively,

15966
00:03:14,710 --> 00:03:18,490
you can actually use this set heading. So for example,

15967
00:03:18,520 --> 00:03:21,100
we can set it to those four directions.

15968
00:03:21,640 --> 00:03:26,560
All we have to do is call setheading and then pass in one of those angles.

15969
00:03:27,250 --> 00:03:28,210
That's what we're going to do here.

15970
00:03:28,240 --> 00:03:33,240
We're going to use the random module and the random choice method to pick a

15971
00:03:34,900 --> 00:03:36,340
random direction.

15972
00:03:37,660 --> 00:03:42,660
So now this robot is going to move forwards and then it's going to turn a random

15973
00:03:43,420 --> 00:03:47,230
direction. But of course, we want this to loop a few times.

15974
00:03:47,320 --> 00:03:50,350
So let's say that we get it to loop 200 times.

15975
00:03:50,410 --> 00:03:53,740
I think that should be enough to draw a decent sized image.

15976
00:03:54,400 --> 00:03:58,600
Let's set the range to maybe 200 times for this loop to run.

15977
00:03:58,930 --> 00:04:01,480
I think that should get us a decent image. Now,

15978
00:04:01,480 --> 00:04:05,770
if you chose 300 or 500 or whatever the number, it doesn't matter.

15979
00:04:06,190 --> 00:04:10,240
As long as you can get a decent image on screen, then it's perfectly fine.

15980
00:04:10,960 --> 00:04:14,170
So we've now satisfied the basic constraints of a random walk

15981
00:04:14,350 --> 00:04:18,130
and you can see our turtle is now wandering around this alleyway,

15982
00:04:18,160 --> 00:04:21,820
completely aimlessly and modeling a real life process,

15983
00:04:21,880 --> 00:04:23,650
like an animal that's hunting for food.

15984
00:04:25,120 --> 00:04:27,370
Now let's implement the next part of this.

15985
00:04:27,490 --> 00:04:32,490
Let's go ahead and change our code so that it generates a random color for each

15986
00:04:32,560 --> 00:04:33,393
step.

15987
00:04:33,850 --> 00:04:37,870
That's pretty simple cause we did it before in the last lesson.

15988
00:04:38,200 --> 00:04:42,640
So we're going to get Tim to change his color and we're going to use the random

15989
00:04:42,640 --> 00:04:43,473
module

15990
00:04:45,100 --> 00:04:50,100
and the choice method to pick from all the colors that we've already got in this

15991
00:04:50,800 --> 00:04:55,390
list here. Now that it's pretty much random colors,

15992
00:04:55,540 --> 00:04:58,510
random walking, the next thing we want to do

15993
00:04:58,780 --> 00:05:03,780
if you saw my demo of it is we want to make each of the lines a bit thicker.

15994
00:05:04,570 --> 00:05:09,040
So how do we do that? Well, we have to head back to the documentation.

15995
00:05:09,670 --> 00:05:12,370
So it's probably going to be one of these methods.

15996
00:05:12,760 --> 00:05:15,100
And if we just read through the names of the methods,

15997
00:05:15,400 --> 00:05:20,400
they should give us a bit of an indication of which one might be the one that we

15998
00:05:20,680 --> 00:05:21,513
want.

15999
00:05:22,540 --> 00:05:26,020
If we take a look at the drawing control for our pen,

16000
00:05:26,290 --> 00:05:31,290
you can see there's a method called pen size and you can call this either pen

16001
00:05:31,480 --> 00:05:35,350
size or width, but it does the same thing. Essentially

16002
00:05:35,350 --> 00:05:39,130
it just sets the size of the pen which the turtle draws with.

16003
00:05:40,900 --> 00:05:45,070
If we set the pen size to something a little bit wider,

16004
00:05:47,380 --> 00:05:50,710
say maybe 15 in width,

16005
00:05:51,370 --> 00:05:53,830
then you can see when our turtle draws,

16006
00:05:53,890 --> 00:05:57,130
it's now a lot wider and it's a lot easier to

16007
00:05:57,260 --> 00:05:59,420
see what it's doing. Now,

16008
00:05:59,420 --> 00:06:03,290
the final trick I want to show you is how you can speed up the turtle's

16009
00:06:03,290 --> 00:06:07,100
animation. So if I was to wait for it to finish drawing here,

16010
00:06:07,100 --> 00:06:08,630
that's perfectly possible,

16011
00:06:08,840 --> 00:06:13,840
but I can also speed it up by tapping into the speed method for turtle.

16012
00:06:15,020 --> 00:06:20,020
And I can either specify this speed as an integer or as a string.

16013
00:06:22,070 --> 00:06:25,940
So the strings are fastest, fast, normal, slow, slowest,

16014
00:06:26,240 --> 00:06:30,950
and this determines the animation speed of the turtle as it draws.

16015
00:06:31,370 --> 00:06:35,900
So I'm going to go for fastest so we can say tim.

16016
00:06:35,900 --> 00:06:40,340
speed. And we'll put in that string, fastest.

16017
00:06:41,480 --> 00:06:46,040
And now when we run it, you can see it animates way faster

16018
00:06:46,400 --> 00:06:48,500
and it's drawing at the speed of light.

16019
00:06:49,070 --> 00:06:52,580
Our little turtle is completely going nuts,

16020
00:06:53,780 --> 00:06:58,610
but this means that it will take much less time to complete our 200 cycles as

16021
00:06:58,630 --> 00:06:59,620
we requested. 

16022
00:07:00,970 --> 00:07:04,870
So I hope you enjoyed this lesson and you managed to get your turtle to do a random

16023
00:07:04,870 --> 00:07:06,130
walk. Now,

16024
00:07:06,250 --> 00:07:09,760
many of you would have done this challenge and you might've thought, wouldn't it

16025
00:07:09,760 --> 00:07:14,760
be nice if I could generate a completely random color rather than just selecting

16026
00:07:15,070 --> 00:07:17,800
a random one from this list? Well,

16027
00:07:17,920 --> 00:07:21,520
we can do that and I'll show you how in the next lesson.


16028
00:00:00,330 --> 00:00:05,250
So in the last lesson, we saw how to create a turtle that does a random walk.

16029
00:00:05,760 --> 00:00:07,020
Now in this lesson,

16030
00:00:07,080 --> 00:00:12,080
I want to show you how you can create a random color for your turtle drawing

16031
00:00:12,540 --> 00:00:16,890
rather than just using the named colors and then picking a random one out of the

16032
00:00:16,890 --> 00:00:21,390
list. When you take a look at the pen color of the turtle,

16033
00:00:21,810 --> 00:00:26,810
you can see that you can use a color string such as what we've been doing using

16034
00:00:26,940 --> 00:00:30,420
red, yellow, or a hex string that represents the color,

16035
00:00:31,020 --> 00:00:33,690
or we can use a RGB color.

16036
00:00:34,170 --> 00:00:39,170
And the RGB color is going to be represented by a tuple of different amounts of

16037
00:00:39,510 --> 00:00:43,560
red, green, and blue. So what exactly is a tuple?

16038
00:00:44,310 --> 00:00:44,760
Well,

16039
00:00:44,760 --> 00:00:49,760
a tuple is a data type in Python and it looks like this.

16040
00:00:50,130 --> 00:00:52,830
It has round brackets around it

16041
00:00:53,190 --> 00:00:56,970
and then each of the items inside are separated by a comma.

16042
00:00:57,570 --> 00:00:59,970
So does this remind you of another data type?

16043
00:01:00,600 --> 00:01:04,110
Does it not look a little bit like a list? Well,

16044
00:01:04,110 --> 00:01:08,880
indeed a tuple is very similar to a list. Each of the items that go into the

16045
00:01:08,880 --> 00:01:10,260
tuple are ordered.

16046
00:01:10,740 --> 00:01:15,720
So let's pull up my Python console here and let's create my tuple 

16047
00:01:17,130 --> 00:01:21,060
which is denoted by a set of round parentheses

16048
00:01:21,450 --> 00:01:25,410
and then let's put in three items, 1, 3, and 8,

16049
00:01:26,010 --> 00:01:28,320
and there we have created a new tuple.

16050
00:01:28,950 --> 00:01:32,370
Now in order to get hold of any of those items in there,

16051
00:01:32,460 --> 00:01:36,540
I can write the name of the variable and then using square brackets

16052
00:01:36,570 --> 00:01:38,460
I can access the index.

16053
00:01:38,730 --> 00:01:43,710
So 1 is going to be at position zero, 3 is going to be at position one and

16054
00:01:43,740 --> 00:01:47,220
8 is going to be at position two. So if I hit enter on this,

16055
00:01:47,280 --> 00:01:49,350
then you can see that's going to be equal to 8.

16056
00:01:50,820 --> 00:01:52,860
And if you click this drop down on the right,

16057
00:01:52,890 --> 00:01:56,700
you can see the same representation; position 0, 1,  2,

16058
00:01:57,060 --> 00:02:00,510
and those pieces of data and the total length is three.

16059
00:02:01,110 --> 00:02:05,760
So at this point you might be asking yourself, well, I already know about lists,

16060
00:02:05,820 --> 00:02:10,320
so why do I need to know about tuples? What's the difference anyways? Well,

16061
00:02:10,350 --> 00:02:14,220
a tuple is going to be carved in stone

16062
00:02:14,460 --> 00:02:18,390
so you can't change the values like you can with lists.

16063
00:02:19,500 --> 00:02:22,020
For example, if I wanted to say

16064
00:02:22,020 --> 00:02:26,220
get hold of my tuple and instead of the 8 at position two,

16065
00:02:26,610 --> 00:02:30,630
I want to change it to 12. Now, if I go ahead and hit enter,

16066
00:02:30,660 --> 00:02:34,350
you can see I get a error and this is a type error.

16067
00:02:34,890 --> 00:02:39,390
This particular type, tuple, does not support item assignment.

16068
00:02:39,600 --> 00:02:42,720
So I can't just change it willingly like this.

16069
00:02:43,290 --> 00:02:46,380
And I also can't remove items from the tuple,

16070
00:02:46,620 --> 00:02:51,330
I can't change it in any way. Once you've created your tuple 

16071
00:02:51,360 --> 00:02:56,360
you can consider it as carved in stone and it is what we call immutable.

16072
00:02:57,150 --> 00:03:01,900
It cannot be changed. So why would you use a tuple then?

16073
00:03:02,620 --> 00:03:03,880
Well, think about the times

16074
00:03:04,150 --> 00:03:07,990
like say if you're creating a color scheme for your website or are you creating

16075
00:03:07,990 --> 00:03:12,220
some sort of list that you want to stay constant and you don't want somebody to

16076
00:03:12,220 --> 00:03:16,360
accidentally change it or accidentally mess it up, well,

16077
00:03:16,360 --> 00:03:18,610
then you might want to consider using a tuple.

16078
00:03:20,050 --> 00:03:23,800
And if you find yourself creating a tuple and then realizing, Oh,

16079
00:03:23,830 --> 00:03:26,020
actually I need to change it well,

16080
00:03:26,020 --> 00:03:29,650
then you can simply put your tuple inside a list like this,

16081
00:03:30,010 --> 00:03:32,800
and you can actually convert it into a list.

16082
00:03:34,150 --> 00:03:36,010
Coming back to our documentation,

16083
00:03:36,400 --> 00:03:41,400
the color is represented by a tuple because if you define a color,

16084
00:03:41,680 --> 00:03:43,330
you're unlikely to change it.

16085
00:03:44,020 --> 00:03:46,870
And then we have a r, g, and b,

16086
00:03:46,960 --> 00:03:50,380
which is in the range between zero and the color mode.

16087
00:03:50,860 --> 00:03:55,860
So the mode can be between 0 and 1 or 0 and 255. In the course resources,

16088
00:03:58,030 --> 00:04:01,810
I've linked to this really handy RGB calculator tool,

16089
00:04:02,290 --> 00:04:06,190
which demonstrates how RGB colors work so perfectly.

16090
00:04:06,610 --> 00:04:10,060
You can see that if we have zero amount of red, zero amounts of green,

16091
00:04:10,090 --> 00:04:11,920
zero amounts of blue, we get black.

16092
00:04:12,430 --> 00:04:17,430
But if we mix different amounts of red and different amounts of green and

16093
00:04:18,670 --> 00:04:22,029
different amounts of blue, then we can get all of the colors in the rainbow.

16094
00:04:22,360 --> 00:04:26,020
The three primary colors can create any color that you dream of.

16095
00:04:26,620 --> 00:04:29,110
And each of these sliders,

16096
00:04:29,140 --> 00:04:34,000
you can see, goes from 0 all the way up to 255.

16097
00:04:34,570 --> 00:04:38,230
So more red, more green or more blue.

16098
00:04:39,220 --> 00:04:42,730
And this is what the RGB color ends up looking like.

16099
00:04:43,930 --> 00:04:48,790
I find it easier to think about the range between 0 and 255.

16100
00:04:49,330 --> 00:04:50,200
So in turtle,

16101
00:04:50,200 --> 00:04:54,880
we actually have to change the color mode to 255.

16102
00:04:55,510 --> 00:04:57,340
So to do this, it's a little bit tricky

16103
00:04:57,370 --> 00:04:59,920
which is why I didn't want to put this as part of the challenge.

16104
00:05:00,310 --> 00:05:04,750
But we have to tap into the actual turtle module and not the turtle object,

16105
00:05:04,990 --> 00:05:09,910
and then change the color mode for that module. Back in our code,

16106
00:05:09,940 --> 00:05:12,490
we can tap into our turtle module

16107
00:05:12,820 --> 00:05:15,910
which is known as 't' in our code.

16108
00:05:17,080 --> 00:05:22,080
And then we can tap into the color mode to make it go from 0 to 255.

16109
00:05:24,610 --> 00:05:29,590
So now that we've changed the color mode, we can now create a random color.

16110
00:05:30,040 --> 00:05:33,280
So let's get rid of this list of colors. Instead,

16111
00:05:33,280 --> 00:05:36,880
I'm going to create a new function called a random_color,

16112
00:05:37,960 --> 00:05:42,960
and this function is going to return a random color using RGB.

16113
00:05:44,440 --> 00:05:47,410
So let's first create a random red.

16114
00:05:48,280 --> 00:05:53,280
So we use the random module and then use the randint and then generate a number

16115
00:05:53,620 --> 00:05:56,740
between 0 and 255.

16116
00:05:57,710 --> 00:06:02,420
And then we can repeat this process for the other two color spaces,

16117
00:06:02,750 --> 00:06:05,900
so green and for blue.

16118
00:06:06,920 --> 00:06:08,930
Now we've got three random numbers,

16119
00:06:08,960 --> 00:06:11,480
one each representing each of the color spaces,

16120
00:06:11,840 --> 00:06:15,590
and then we can generate our tuple. Here's the challenge for you.

16121
00:06:15,950 --> 00:06:18,290
See if you can return from this function

16122
00:06:18,350 --> 00:06:23,350
a tuple that consists of the three random integers, r, g and b,

16123
00:06:24,710 --> 00:06:29,710
and then use that random color to color the turtle drawing instead of this broken

16124
00:06:30,920 --> 00:06:34,070
code which relied on that previous list of colors.

16125
00:06:34,610 --> 00:06:37,220
Pause the video and see if you can complete this challenge.

16126
00:06:40,150 --> 00:06:42,460
All right. So we know that to create a tuple 

16127
00:06:42,460 --> 00:06:45,460
we need a set of round brackets or parentheses,

16128
00:06:45,940 --> 00:06:48,610
and then we're going to put each of these in order,

16129
00:06:48,610 --> 00:06:53,380
so r, g and b. So here's our tuple created,

16130
00:06:53,410 --> 00:06:56,860
and this is basically our new random color.

16131
00:06:57,460 --> 00:07:02,460
And then this function is going to return that random color as the output.

16132
00:07:03,850 --> 00:07:08,350
So now instead of using random.choice and using that previous list,

16133
00:07:08,860 --> 00:07:11,770
all we have to do is get hold of a random color

16134
00:07:12,160 --> 00:07:16,840
that's going to be outputted from this function and then use it to color Tim's

16135
00:07:16,840 --> 00:07:19,780
drawing. So let's run this code again,

16136
00:07:20,320 --> 00:07:23,380
and you should be able to see that in this random walk,

16137
00:07:23,500 --> 00:07:25,780
the color is completely random.

16138
00:07:26,110 --> 00:07:31,110
Pretty much every single turn is going to draw something completely different in

16139
00:07:31,540 --> 00:07:32,373
terms of color.

16140
00:07:33,190 --> 00:07:38,080
And this is achieved by learning a little bit about how colors work and how we

16141
00:07:38,080 --> 00:07:41,860
can generate them using the random RGB colors.


16142
00:00:00,180 --> 00:00:05,180
Now the final challenge for today comes courtesy of a childhood toy that you

16143
00:00:05,190 --> 00:00:08,310
might've already seen. So this is going to be our training bike,

16144
00:00:08,610 --> 00:00:12,330
and it's going to be the last coding exercise before we tackle our final

16145
00:00:12,330 --> 00:00:16,500
project. So what are we doing? We're making a spirograph.

16146
00:00:16,800 --> 00:00:19,350
Do you remember those geometric gear shaped things

16147
00:00:19,350 --> 00:00:23,160
which you would draw and draw and it would make these funky circular shapes?

16148
00:00:23,490 --> 00:00:25,980
Well, that's what we're going to be doing, but with turtle.

16149
00:00:26,400 --> 00:00:31,400
We're going to get our turtle to draw a number of circles each with a radius of

16150
00:00:32,040 --> 00:00:35,250
a hundred in distance. And once it's done,

16151
00:00:35,280 --> 00:00:39,060
we should end up with something that looks like this.

16152
00:00:39,900 --> 00:00:43,710
So we're going to be using our random colors and we're going to be using the

16153
00:00:43,710 --> 00:00:44,640
documentation.

16154
00:00:45,540 --> 00:00:50,070
I want you to dig through the documentation and see if you can figure out how to

16155
00:00:50,070 --> 00:00:54,330
draw a circle and to determine how large the circle should be.

16156
00:00:55,020 --> 00:00:59,910
And then I want you to figure out how you can get it to repeatedly draw a circle

16157
00:01:00,180 --> 00:01:05,129
and change the tilt of the circle by a little bit each time,

16158
00:01:05,370 --> 00:01:09,930
so that you end up with that effect. Pause the video and give that a go now.

16159
00:01:12,960 --> 00:01:13,770
Alright. Again,

16160
00:01:13,770 --> 00:01:16,530
we're going to be scrolling through all of the available methods

16161
00:01:16,590 --> 00:01:18,960
looking for something that might help us.

16162
00:01:19,800 --> 00:01:23,790
I think it's going to be somewhere in the turtle motion's move and draw section.

16163
00:01:24,150 --> 00:01:25,740
And if you look down this list,

16164
00:01:25,770 --> 00:01:30,770
you can see there is a method that allows us to draw a circle with a given

16165
00:01:31,110 --> 00:01:31,943
radius.

16166
00:01:32,070 --> 00:01:37,070
So we can put in the radius as one of the inputs and draw our circle. Heading

16167
00:01:37,950 --> 00:01:39,420
back to our code,

16168
00:01:39,450 --> 00:01:44,450
I'm going to delete some of the previous parts where we've got the directions

16169
00:01:44,970 --> 00:01:46,710
and also changing the pen size.

16170
00:01:47,040 --> 00:01:51,090
I'm going to leave the speed as fastest because we're going to need it to go

16171
00:01:51,090 --> 00:01:53,430
pretty quick to draw all of those circles.

16172
00:01:53,910 --> 00:01:56,400
And I'm also going to delete the final for loop.

16173
00:01:57,270 --> 00:02:01,710
Now notice how I've got this warning here telling me that it doesn't really like

16174
00:02:01,740 --> 00:02:06,740
the idea of me calling a variable the same as the name of a function.

16175
00:02:07,470 --> 00:02:10,889
So why don't we just call this color instead

16176
00:02:11,250 --> 00:02:16,230
and then we can return that as the output and get rid of that warning.

16177
00:02:16,860 --> 00:02:20,490
Now we're ready to code up our spirograph.

16178
00:02:20,820 --> 00:02:25,170
So the first thing that we're going to try and do is to draw a circle.

16179
00:02:25,650 --> 00:02:29,100
Now the circle requires a radius,

16180
00:02:29,130 --> 00:02:33,570
so I'm going to give it a radius of a hundred. And when I hit run,

16181
00:02:33,810 --> 00:02:37,080
we can see briefly that it painted a circle.

16182
00:02:37,530 --> 00:02:42,060
So let's go ahead and create our screen from t.screen.

16183
00:02:42,660 --> 00:02:47,660
And then we can use that screen.exitonclick method so that when we run our

16184
00:02:48,480 --> 00:02:53,130
code, it doesn't actually remove the window until we click on it.

16185
00:02:53,880 --> 00:02:57,120
So I can see that I've painted my first circle

16186
00:02:57,300 --> 00:03:01,750
and I would like, if possible, to make my circle

16187
00:03:01,960 --> 00:03:04,060
have a different color each time.

16188
00:03:04,420 --> 00:03:09,420
So I'm going to change the color to use a random color that's produced by this

16189
00:03:10,030 --> 00:03:13,630
function. So now every time I run my code,

16190
00:03:13,690 --> 00:03:16,270
you'll see a different colored circle.

16191
00:03:17,050 --> 00:03:22,050
The turtle is basically gonna draw out this path and then go back to its

16192
00:03:22,870 --> 00:03:25,600
original position facing East.

16193
00:03:26,020 --> 00:03:29,740
If we wanted multiple circles to overlap with each other,

16194
00:03:29,860 --> 00:03:34,150
then we're going to have to change the heading or the pointing direction of our

16195
00:03:34,150 --> 00:03:37,450
turtle. If we look at this section,

16196
00:03:37,750 --> 00:03:40,300
the current state of our turtle,

16197
00:03:40,540 --> 00:03:43,420
you can see that you can get the current position,

16198
00:03:43,450 --> 00:03:46,900
the current Y coordinate and X coordinate,

16199
00:03:47,110 --> 00:03:49,450
but you can also get hold of the current heading,

16200
00:03:49,480 --> 00:03:52,150
so which direction it's pointing towards.

16201
00:03:52,720 --> 00:03:55,840
And all we have to do is just call this heading method.

16202
00:03:56,770 --> 00:04:01,210
So now if I print my tim.heading,

16203
00:04:01,720 --> 00:04:06,720
then you can see that when I run my code and I take a look inside the console,

16204
00:04:07,030 --> 00:04:09,400
it's pointing at 0.0.

16205
00:04:10,090 --> 00:04:15,040
What if we could change the heading to make it a little bit shifted?

16206
00:04:15,670 --> 00:04:15,880
Well,

16207
00:04:15,880 --> 00:04:20,740
there's actually a different method for changing the heading and getting the

16208
00:04:20,740 --> 00:04:25,570
heading. For example, if we want to set the heading,

16209
00:04:25,600 --> 00:04:29,590
then we have to use this method and give it a number.

16210
00:04:30,370 --> 00:04:32,890
So what if I get the current heading

16211
00:04:35,980 --> 00:04:39,580
and then maybe I add 5 or 10 degrees to it,

16212
00:04:39,910 --> 00:04:44,050
and then I change my turtle's heading using set

16213
00:04:44,050 --> 00:04:47,560
heading to the current heading plus 10.

16214
00:04:49,450 --> 00:04:54,190
And then we get a new circle drawn. So let's see what this looks like.

16215
00:04:55,840 --> 00:04:59,830
And you can see that I've drawn one circle and then I've tilted to the left a

16216
00:04:59,830 --> 00:05:03,940
little bit and then drawn a second circle. So extrapolating this,

16217
00:05:03,970 --> 00:05:06,610
you can imagine that if we had a loop that kept going,

16218
00:05:06,850 --> 00:05:09,610
then we could draw our final spirograph shape.

16219
00:05:10,180 --> 00:05:11,860
Let's create that loop.

16220
00:05:12,160 --> 00:05:15,910
So the parts that don't need to be in the loop is setting the speed.

16221
00:05:16,300 --> 00:05:18,880
But the color needs to change each time,

16222
00:05:19,120 --> 00:05:23,410
the circle needs to be drawn each time and the heading needs to be updated each

16223
00:05:23,410 --> 00:05:24,243
time.

16224
00:05:24,280 --> 00:05:29,280
Now I'm going to simplify this line of code to contract it into a single line.

16225
00:05:31,540 --> 00:05:34,870
So I'm setting Tim to a new heading

16226
00:05:35,230 --> 00:05:38,290
and that is from the current heading plus 10.

16227
00:05:39,250 --> 00:05:43,000
So now let's create our loop and let's say

16228
00:05:43,000 --> 00:05:45,550
we're going to loop a hundred times.

16229
00:05:48,540 --> 00:05:51,900
Now let's run our code and see what it looks like.

16230
00:05:54,090 --> 00:05:56,910
You can see it's drawing out our spirograph.

16231
00:05:56,930 --> 00:06:00,350
It's not as dense as it previously was,

16232
00:06:00,830 --> 00:06:02,330
but look at what it's doing.

16233
00:06:02,390 --> 00:06:06,410
It's drawing the same circle on top of a previous circle,

16234
00:06:06,650 --> 00:06:08,510
cause it doesn't know when to stop.

16235
00:06:09,200 --> 00:06:13,790
It's stopping only once it's gone through the hundred rotations.

16236
00:06:14,270 --> 00:06:19,270
So how can we figure out a way to get it to only draw as many circles as we

16237
00:06:19,730 --> 00:06:20,563
need?

16238
00:06:21,740 --> 00:06:26,740
Let's say that I created a new function called draw_spirograph,

16239
00:06:27,890 --> 00:06:31,520
and this function accepts a single parameter,

16240
00:06:31,790 --> 00:06:35,390
which is the size of the gap.

16241
00:06:37,550 --> 00:06:42,260
And that is going to be the size that's going to be in between each of these

16242
00:06:42,260 --> 00:06:43,490
circles that gets drawn.

16243
00:06:44,000 --> 00:06:48,230
And that's of course determined by the direction heading of my arrow.

16244
00:06:48,890 --> 00:06:51,710
So if I pass in this size of gap,

16245
00:06:51,740 --> 00:06:56,450
I'm going to use it here to change the tilt of my circle.

16246
00:06:57,020 --> 00:07:02,020
But I can also use that because it's a degree to determine how many times my

16247
00:07:02,780 --> 00:07:04,460
spirograph needs to be drawn.

16248
00:07:04,910 --> 00:07:09,440
So we know that there's 360 degrees in a full circle.

16249
00:07:09,980 --> 00:07:12,980
And for each circle that we're drawing,

16250
00:07:13,310 --> 00:07:17,720
we're basically giving it a different offset right? And

16251
00:07:17,720 --> 00:07:19,070
that's our size_of_gap.

16252
00:07:19,490 --> 00:07:22,760
So if we divide 360 by each offset,

16253
00:07:23,120 --> 00:07:28,120
then we'll repeat our code for as many times as we need to draw all the circles

16254
00:07:28,760 --> 00:07:31,940
and complete the final spirograph. Now,

16255
00:07:32,000 --> 00:07:35,960
the only problem is if I call this method,

16256
00:07:36,770 --> 00:07:40,460
dra, I think I meant to write draw.

16257
00:07:41,540 --> 00:07:45,410
So draw spirograph and I give it a size of five.

16258
00:07:45,470 --> 00:07:47,750
So a little bit smaller than last time,

16259
00:07:48,050 --> 00:07:52,100
tilting a little bit less each time. You can see that if I run this code,

16260
00:07:52,490 --> 00:07:53,780
we get an error.

16261
00:07:54,350 --> 00:07:59,350
And the error says that the float object can't be used as an integer

16262
00:08:00,650 --> 00:08:03,380
and it's telling us where we have that float object.

16263
00:08:03,950 --> 00:08:08,240
So remember that this number is going to go into here

16264
00:08:08,300 --> 00:08:13,220
and then 360 divided by five is actually going to give us a floating point

16265
00:08:13,220 --> 00:08:16,070
number, even though it divides cleanly

16266
00:08:16,100 --> 00:08:19,340
just because this is how division works in Python. Now,

16267
00:08:19,370 --> 00:08:24,370
unfortunately though our range function is going to need a whole number,

16268
00:08:25,160 --> 00:08:26,030
an integer.

16269
00:08:26,360 --> 00:08:30,890
It can't take a floating point number because then how many times are we

16270
00:08:30,890 --> 00:08:34,070
repeating it? 3.4 times? What does that even mean?

16271
00:08:34,370 --> 00:08:37,130
So this input has to be a whole number.

16272
00:08:37,520 --> 00:08:42,520
So let's turn it into an integer by creating an integer and then wrapping this

16273
00:08:44,059 --> 00:08:48,470
calculation inside the brackets. So now when we run our code,

16274
00:08:48,500 --> 00:08:53,500
you can see it paints our spirograph, shifting by five degrees each time.

16275
00:08:54,710 --> 00:08:59,670
And once it's gone through all of the iterations and the spirograph is

16276
00:08:59,670 --> 00:09:02,280
complete, then it actually stops.

16277
00:09:03,750 --> 00:09:07,050
Did you manage to get the solution for this challenge?

16278
00:09:07,500 --> 00:09:12,500
If not, be sure to review this lesson and fix your code as needed. Once you're

16279
00:09:13,020 --> 00:09:15,600
happy with everything that we've explained so far,

16280
00:09:16,050 --> 00:09:19,080
then it's time to head to the final challenge.

16281
00:09:19,530 --> 00:09:22,560
Let's go ahead and create a million dollar painting.

16282
00:09:23,160 --> 00:09:26,400
So for all of that and more, I'll see you on the next lesson.


16283
00:00:00,480 --> 00:00:02,370
This might seem a bit of an odd question,

16284
00:00:02,400 --> 00:00:07,260
but have you ever been to an art museum and looked at the exhibition and thought

16285
00:00:07,260 --> 00:00:08,093
to yourself,

16286
00:00:08,550 --> 00:00:13,550
I think I could probably do this and don't really understand why it's considered

16287
00:00:14,160 --> 00:00:16,880
art. Well, this is a piece of art

16288
00:00:16,940 --> 00:00:21,320
by Goldschmied and Chiari called 'Where should we go dancing tonight?'.

16289
00:00:22,130 --> 00:00:24,950
And it's meant to be a piece of concept art,

16290
00:00:25,280 --> 00:00:30,110
but when the museum cleaners came here at the end of the day and looked at this

16291
00:00:30,110 --> 00:00:35,110
mess of cigarette butts and shoes and random bottles,

16292
00:00:35,600 --> 00:00:39,140
they thought it was rubbish and they promptly cleaned everything up.

16293
00:00:39,590 --> 00:00:43,640
So this is what the exhibition looked like after the cleaners were done the next

16294
00:00:43,640 --> 00:00:46,190
day. So to the museum's horror,

16295
00:00:46,550 --> 00:00:51,550
their star exhibition gets cleared up and mistaken for rubbish.

16296
00:00:52,880 --> 00:00:56,480
So I was talking to a friend and I said, well, you know,

16297
00:00:56,540 --> 00:00:59,510
a lot of these modern art pieces, I could probably do it, right?

16298
00:00:59,540 --> 00:01:03,680
We could probably get together, put some bottles on the floor, make a mess,

16299
00:01:03,710 --> 00:01:07,070
call it art. And he told me, actually, no, you can't.

16300
00:01:07,220 --> 00:01:10,820
And you should read this book called the $12 million stuffed shark.

16301
00:01:11,360 --> 00:01:14,150
And it talks all about the economics of contemporary art.

16302
00:01:14,210 --> 00:01:15,650
And it's a fascinating read.

16303
00:01:15,680 --> 00:01:20,680
I've learned so much more about how contemporary art is priced and why they're

16304
00:01:20,720 --> 00:01:25,670
priced the way they are. But it also led me to discover some pretty big,

16305
00:01:25,700 --> 00:01:28,190
shocking discoveries. Like for example,

16306
00:01:28,190 --> 00:01:33,190
the art piece that's referred to on the cover of the page is this shark.

16307
00:01:33,920 --> 00:01:37,040
It's a shark that was fished off of the coast of Australia

16308
00:01:37,370 --> 00:01:42,200
and then it was preserved in formaldehyde. But it was preserved really badly

16309
00:01:42,200 --> 00:01:44,060
like they didn't use enough chemicals

16310
00:01:44,090 --> 00:01:48,500
and the shark started going a bit green and a bit of gray in other places

16311
00:01:48,500 --> 00:01:50,060
and it also started molding.

16312
00:01:50,660 --> 00:01:55,660
But this moldy green shark was bought for $12 million.

16313
00:01:56,510 --> 00:02:00,470
And this is not even the craziest piece. So for example,

16314
00:02:00,470 --> 00:02:04,790
this diamond encrusted skull was reportedly sold for $50 million.

16315
00:02:05,150 --> 00:02:07,130
And these butterfly wings

16316
00:02:07,130 --> 00:02:12,130
which have been dissected and stuck to a canvas was sold for 8.5 million.

16317
00:02:13,280 --> 00:02:15,920
So who exactly is this crazy man

16318
00:02:15,950 --> 00:02:20,090
who's creating all of these pieces of art that's fetching these insane

16319
00:02:20,090 --> 00:02:23,180
valuations? Well, it's a guy called Damien Hirst.

16320
00:02:23,750 --> 00:02:28,460
And I think out of all his paintings, the craziest ones are the spot paintings,

16321
00:02:28,790 --> 00:02:33,790
because it's literally spots of color that are organized randomly on a page. And

16322
00:02:37,130 --> 00:02:38,060
check this out.

16323
00:02:38,120 --> 00:02:43,120
This particular piece was sold for a whopping 1.275

16324
00:02:43,700 --> 00:02:45,920
million pounds.

16325
00:02:46,580 --> 00:02:48,950
So maybe like $1.5 million.

16326
00:02:49,580 --> 00:02:53,120
It's insane for a painting of dots.

16327
00:02:53,720 --> 00:02:57,770
But what I thought was even crazier is if you look at this painting,

16328
00:02:57,800 --> 00:02:59,920
at least it's got quite few dots, right?

16329
00:03:00,340 --> 00:03:04,150
You're getting your money's worth of dots. But look at this one!

16330
00:03:04,550 --> 00:03:07,740
This is the same artist, Damien Hirst, and this painting,

16331
00:03:07,770 --> 00:03:12,770
I counted only has 25 spots and this sold for half a million pounds.

16332
00:03:15,390 --> 00:03:19,980
It's not even about the number of spots. So I personally still,

16333
00:03:19,980 --> 00:03:22,560
as you can see, can't really work out contemporary art,

16334
00:03:23,070 --> 00:03:28,070
but what I can work out is how to get Python code to crack Damien Hirst's color

16335
00:03:29,520 --> 00:03:30,353
palette,

16336
00:03:30,360 --> 00:03:35,360
and use those colors to generate a random canvas of spot paintings that look

16337
00:03:39,540 --> 00:03:40,373
equally,

16338
00:03:40,470 --> 00:03:44,670
if not more appealing than some of the original Damien Hirst.

16339
00:03:45,180 --> 00:03:48,480
So this is what we're going to be making as our project.

16340
00:03:49,080 --> 00:03:54,080
And we're going to be using that package, colorgram, to get hold of the color

16341
00:03:54,810 --> 00:03:55,643
palette

16342
00:03:55,800 --> 00:04:00,780
and then we're going to use those colors to create our own spot painting

16343
00:04:01,020 --> 00:04:03,600
that's going to look like this. Firstly,

16344
00:04:03,630 --> 00:04:08,630
we're going to be using a package called colorgram and colorgram is a library

16345
00:04:10,560 --> 00:04:14,700
of code written in Python that lets you extract colors from images.

16346
00:04:15,150 --> 00:04:18,149
So for example, if you take a look at this picture,

16347
00:04:18,360 --> 00:04:23,360
once it was run through colorgram and 10 of the most common colors extracted,

16348
00:04:24,690 --> 00:04:29,160
you end up with a palette that pretty much looks the same as the colors in the

16349
00:04:29,160 --> 00:04:29,993
image.

16350
00:04:30,360 --> 00:04:35,340
This is the example of how you would use this colorgram package.

16351
00:04:35,760 --> 00:04:39,480
And in this case, they're extracting six colors from an image,

16352
00:04:39,750 --> 00:04:44,670
so it basically takes two inputs, an image, and the number of colors.

16353
00:04:45,510 --> 00:04:49,860
If we go into Google image search, and we search for a Hirst spot painting,

16354
00:04:50,280 --> 00:04:53,940
you can see that there's a lot of spot paintings that this guy created.

16355
00:04:54,480 --> 00:04:59,460
I want you to pick a painting with a color palette that you like, um,

16356
00:04:59,790 --> 00:05:04,470
maybe something like this, or maybe a bit brighter like this one.

16357
00:05:05,010 --> 00:05:05,850
But essentially,

16358
00:05:05,910 --> 00:05:09,810
pick one of these images and then go ahead and download it.

16359
00:05:10,260 --> 00:05:11,910
So save image.

16360
00:05:12,600 --> 00:05:16,560
And then you're going to save that image as image.jpg, 

16361
00:05:16,620 --> 00:05:20,820
so jpg. And then go ahead and hit save.

16362
00:05:22,620 --> 00:05:26,070
Now go ahead and create a new PyCharm project.

16363
00:05:26,130 --> 00:05:30,090
I've called mine hirst-painting, you can call yours whatever you want.

16364
00:05:30,870 --> 00:05:33,720
Now we're going to drag our newly downloaded image,

16365
00:05:33,990 --> 00:05:38,640
image.jpeg into this project folder, hirst-painting.

16366
00:05:39,210 --> 00:05:42,120
And it's going to ask you whether if you want to move the file from,

16367
00:05:42,150 --> 00:05:46,020
in my case, the downloads folder to my hirst-painting project.

16368
00:05:46,620 --> 00:05:49,470
So then we're going to agree and click refactor.

16369
00:05:50,040 --> 00:05:54,600
So now this painting is inside my hirst-painting project,

16370
00:05:54,990 --> 00:05:59,180
and I'm ready to go ahead and create a new file called main.py

16371
00:05:59,570 --> 00:06:04,160
which is what I'm going to use to extract the colors from this image.

16372
00:06:05,720 --> 00:06:06,920
Here's a challenge for you.

16373
00:06:07,070 --> 00:06:10,790
See if you can figure out how to use this package,

16374
00:06:10,820 --> 00:06:15,820
colorgram, using their project description here and using the example code.

16375
00:06:16,880 --> 00:06:21,880
What you're aiming for is to be able to print out a list of all the colors

16376
00:06:22,520 --> 00:06:27,520
extracted from the image and each item in the list to be a tuple that you

16377
00:06:28,610 --> 00:06:29,443
create.

16378
00:06:29,690 --> 00:06:34,690
So remember previously we saw how the turtle module likes to work with color

16379
00:06:34,940 --> 00:06:38,900
tuples which are created with a amount of red,

16380
00:06:39,200 --> 00:06:44,200
the amount of green and the amount of blue, all contained inside a tuple.

16381
00:06:44,900 --> 00:06:47,990
This is the format that you're going to try and get your data into.

16382
00:06:48,340 --> 00:06:50,720
Might take a little bit of wrangling and a little bit of thought,

16383
00:06:50,990 --> 00:06:54,440
but just before you get started, here's a quick heads up.

16384
00:06:54,980 --> 00:06:59,630
I noticed that when I was testing this on repl.it and when I searched for color

16385
00:06:59,630 --> 00:07:01,880
gram in the packages,

16386
00:07:02,060 --> 00:07:06,560
I couldn't actually find the package to install into the project.

16387
00:07:06,980 --> 00:07:10,790
So this is another good reason for using PyCharm.

16388
00:07:11,120 --> 00:07:15,320
It just gives you all the professional tools and it has access to all the things

16389
00:07:15,320 --> 00:07:18,830
that you need. So pause the video and complete this challenge.

16390
00:07:20,870 --> 00:07:24,260
All right. So we know that in order to use external packages,

16391
00:07:24,290 --> 00:07:28,010
ones that weren't installed with the Python standard library,

16392
00:07:28,340 --> 00:07:33,340
we have to first install the package. To install a package

16393
00:07:33,410 --> 00:07:38,000
we go to our preferences and then we select our project

16394
00:07:38,450 --> 00:07:40,700
and then we go to our project interpreter.

16395
00:07:41,240 --> 00:07:44,720
Now we click the plus button and we search for colorgram.

16396
00:07:45,500 --> 00:07:49,250
And there it is. Now let's go ahead and install the package.

16397
00:07:49,640 --> 00:07:54,470
And once that's installed successfully, then we can close all of this and click

16398
00:07:54,500 --> 00:07:58,400
okay. Now that we've got our package,

16399
00:07:58,430 --> 00:08:01,910
we can actually import it. So we'll import colorgram,

16400
00:08:02,780 --> 00:08:07,780
and we can use the method that's described here called cologram.extract in

16401
00:08:10,160 --> 00:08:15,050
order to get ahold of six colors. Now, if we want more colors,

16402
00:08:15,620 --> 00:08:18,830
for example, in this image, that's probably a good 30 colors.

16403
00:08:18,920 --> 00:08:23,060
So let's go ahead and extract 30 colors from this image.

16404
00:08:23,360 --> 00:08:27,320
But of course our image is not called sweet_pic.jpg.

16405
00:08:27,440 --> 00:08:29,870
Ours is actually called image.jpg.

16406
00:08:30,320 --> 00:08:35,150
So let's go ahead and rename this image so that it matches with our file.

16407
00:08:35,630 --> 00:08:40,520
And remember that your image has to be at the same level as your main.py for

16408
00:08:40,520 --> 00:08:42,380
this kind of code to work.

16409
00:08:42,590 --> 00:08:46,820
So make sure that you've got it inside the hirst-painting project folder, on the

16410
00:08:46,820 --> 00:08:48,980
same indentation level as main.

16411
00:08:49,400 --> 00:08:54,260
Now let's go ahead and print out our colors that are generated.

16412
00:08:54,710 --> 00:08:58,620
And remember that when you hit run, this process might take a little while.

16413
00:08:59,100 --> 00:09:02,370
And the author of the library says that for a

16414
00:09:02,370 --> 00:09:07,170
512 by 512 image, it takes about 0.6 of a second.

16415
00:09:07,770 --> 00:09:10,980
Obviously, if the image is larger, it'll probably take a bit longer.

16416
00:09:11,580 --> 00:09:15,720
Let's go ahead and hit run and see what we get.

16417
00:09:17,070 --> 00:09:19,350
Once the process is finished,

16418
00:09:19,380 --> 00:09:24,380
you can see it's created some colors and these colors are in a list and it's got

16419
00:09:26,730 --> 00:09:31,730
some different formats for the color. To understand that we have to go back to

16420
00:09:32,280 --> 00:09:33,720
our documentation.

16421
00:09:34,260 --> 00:09:38,610
You can see that the color that's extracted can either be a RGB color

16422
00:09:38,640 --> 00:09:42,120
which is what we're interested in, or an HSL color

16423
00:09:42,330 --> 00:09:44,130
which is not quite what we want.

16424
00:09:44,610 --> 00:09:49,610
So let's go ahead and write a for loop that taps into each of those colors.

16425
00:09:53,750 --> 00:09:56,210
So for color in colors,

16426
00:09:56,810 --> 00:10:01,810
let's go ahead and create a new list called rgb_colors,

16427
00:10:04,700 --> 00:10:09,470
and we'll just leave it as an empty list. And then for each of these colors,

16428
00:10:09,530 --> 00:10:14,530
we're going to add to our rgb_colors by appending.

16429
00:10:15,440 --> 00:10:19,550
And the thing we're going to pend is each of these individual color objects,

16430
00:10:19,970 --> 00:10:22,400
and then we're going to get the RGB value.

16431
00:10:23,240 --> 00:10:25,820
And once this process is done,

16432
00:10:26,120 --> 00:10:29,330
then let's go ahead and print our RGB colors.

16433
00:10:30,500 --> 00:10:35,480
So now you can see we've got a whole bunch of RGB colors with r equals what, g

16434
00:10:35,480 --> 00:10:37,130
equals what and b equals what,

16435
00:10:37,430 --> 00:10:41,870
but this is not quite the format that we need it in order to use it inside the

16436
00:10:41,870 --> 00:10:45,380
turtle. We actually have to go one step further.

16437
00:10:45,830 --> 00:10:47,900
We have to create a r

16438
00:10:48,110 --> 00:10:53,110
which is from the color.rgb.r

16439
00:10:55,520 --> 00:10:59,180
and then we repeat this process for green

16440
00:11:00,890 --> 00:11:02,090
and blue.

16441
00:11:04,700 --> 00:11:09,700
And then we create our tuple by creating our new_color

16442
00:11:10,850 --> 00:11:14,780
which is going to be equal to a tuple with a parentheses

16443
00:11:14,810 --> 00:11:19,490
and then r, g and b. Finally,

16444
00:11:19,490 --> 00:11:24,490
we're going to add to our rgb_colors by appending this new color.

16445
00:11:25,910 --> 00:11:29,150
Now let's print our rgb_colors.

16446
00:11:34,550 --> 00:11:35,600
And you can see

16447
00:11:35,600 --> 00:11:40,600
we finally got it in the format that we need, a tuple with the r value, g value

16448
00:11:41,600 --> 00:11:45,530
and b value that we can use in our project.

16449
00:11:46,190 --> 00:11:50,990
Now we've managed to get the first part of the problem solved so we can go ahead

16450
00:11:50,990 --> 00:11:55,990
and copy this entire list and paste it into our main.py.

16451
00:11:58,270 --> 00:12:01,540
I recommend actually testing out these colors

16452
00:12:01,840 --> 00:12:04,780
using the w3schools RGB tool.

16453
00:12:05,050 --> 00:12:09,760
Go ahead and paste your color to replace this current tuple here.

16454
00:12:10,180 --> 00:12:14,230
Make sure that you still got that word rgb there, and then hit enter

16455
00:12:14,680 --> 00:12:18,190
and it will insert each of these values into the r, g and b.

16456
00:12:18,640 --> 00:12:22,030
So you can see the first color we got is actually a shade of white,

16457
00:12:22,030 --> 00:12:24,100
so probably one of the backgrounds.

16458
00:12:24,730 --> 00:12:28,630
So we can go ahead and delete that one because we're not going to be painting

16459
00:12:28,630 --> 00:12:31,090
the background in our own. It's just going to be white.

16460
00:12:31,510 --> 00:12:36,310
Now let's check the next one. As you can see, the closer the numbers are to

16461
00:12:36,340 --> 00:12:40,450
255, the more likely it is that it's a shade of white.

16462
00:12:40,840 --> 00:12:45,280
So this one is probably one of the other background colors in this image

16463
00:12:45,490 --> 00:12:48,730
so we can delete that one as well. And finally,

16464
00:12:48,730 --> 00:12:52,570
this last one is probably going to be also quite white-ish,

16465
00:12:53,020 --> 00:12:58,020
and we can probably delete that one too. This one because of the blue that's

16466
00:12:58,810 --> 00:13:03,580
109 I'm going to be pretty sure that this is actually a real color.

16467
00:13:04,270 --> 00:13:06,370
And there we go, we get this kind of sand color,

16468
00:13:06,910 --> 00:13:10,690
which looks very similar to some of these colors that we see on here.

16469
00:13:11,080 --> 00:13:13,060
So we can presume that the rest of these,

16470
00:13:13,120 --> 00:13:17,770
because they're sampled by the frequency of occurrence, are probably going to be

16471
00:13:17,770 --> 00:13:20,290
real colors that we can put into our painting.

16472
00:13:20,770 --> 00:13:24,340
Let's save this list as our color_list,

16473
00:13:27,070 --> 00:13:32,070
and we can comment out the rest of this code because we don't need to run this

16474
00:13:32,110 --> 00:13:33,970
computation every single time.

16475
00:13:34,240 --> 00:13:39,240
We just want to extract the colors and then you can delete or comment out the

16476
00:13:39,490 --> 00:13:43,030
colorgram related code. In the next lesson,

16477
00:13:43,060 --> 00:13:47,230
we're going to be using this color list to create our Hirst painting.

16478
00:13:47,650 --> 00:13:49,210
So for all of that and more, I'll see you there.


16479
00:00:00,270 --> 00:00:05,270
Now that we've used colorgram to extract all of the colors from our image

16480
00:00:06,630 --> 00:00:11,490
and we've created a list from that extraction and we've gotten rid of all the

16481
00:00:11,490 --> 00:00:12,323
white shades,

16482
00:00:12,660 --> 00:00:17,660
then we're now ready to go ahead and start using this color list to create our Hirst

16483
00:00:18,630 --> 00:00:19,463
painting.

16484
00:00:19,620 --> 00:00:23,490
So you can either delete the rest of the code or leave it commented out.

16485
00:00:24,000 --> 00:00:29,000
But the goal of the challenge is to use turtle and those colors that you've just

16486
00:00:29,400 --> 00:00:33,240
extracted to create a spot painting like this.

16487
00:00:33,750 --> 00:00:36,270
Here's the requirements of the program.

16488
00:00:36,810 --> 00:00:41,810
You're going to paint a painting with 10 by 10 rows of spots.

16489
00:00:42,900 --> 00:00:47,700
So that's going to be 10 along this side and 10 along this side.

16490
00:00:48,330 --> 00:00:53,330
Each of your dots should be around 20 in size and spaced apart by around 50

16491
00:00:53,490 --> 00:00:54,323
paces.

16492
00:00:54,990 --> 00:00:59,990
So you're going to need to look at the documentation for turtle to figure out

16493
00:01:00,060 --> 00:01:01,590
how to draw these dots.

16494
00:01:02,160 --> 00:01:06,750
You're going to have to figure out how to move your turtle so that it creates

16495
00:01:06,780 --> 00:01:11,780
this 10 by 10 pattern and paint our hundred dots using the color palette that

16496
00:01:13,260 --> 00:01:16,410
we generated. This is your chance to shine,

16497
00:01:16,710 --> 00:01:20,100
and it's time to pause the video and complete the final project.

16498
00:01:25,880 --> 00:01:30,140
So the first thing we're going to do is we're of course going to need to import

16499
00:01:30,200 --> 00:01:31,070
our turtle.

16500
00:01:31,640 --> 00:01:35,720
And I'm going to give it an alias just to make it more clear what it is that I'm

16501
00:01:35,720 --> 00:01:40,550
referring to. I'm going to create my turtle, which I'll call Tim again.

16502
00:01:40,970 --> 00:01:45,050
And it's going to be created from the turtle module and inside there,

16503
00:01:45,080 --> 00:01:46,700
there's a turtle class.

16504
00:01:47,360 --> 00:01:51,740
Now that we have our object created and saved inside Tim,

16505
00:01:52,160 --> 00:01:55,310
we're ready to go ahead and do some things with this turtle.

16506
00:01:55,880 --> 00:01:59,210
If you take a look at the documentation for turtle,

16507
00:01:59,630 --> 00:02:04,630
you can see that instead of just drawing circles or just moving forwards or left

16508
00:02:05,030 --> 00:02:07,280
or right, you can also draw a dot.

16509
00:02:07,820 --> 00:02:10,280
Now a dot takes two parameters,

16510
00:02:10,580 --> 00:02:13,310
its size and its color.

16511
00:02:13,760 --> 00:02:18,170
So we mentioned that we were going to draw a 20-size dot and then we're going to

16512
00:02:18,170 --> 00:02:22,340
pass in a random color. So let's create our dot.

16513
00:02:22,370 --> 00:02:25,040
Let's say tim.dot,

16514
00:02:25,550 --> 00:02:30,550
and then let's give it a size of 20 and then let's give it a random color. Now

16515
00:02:31,640 --> 00:02:36,640
because we're using the RGB color that has the r, g and b values between 0 and

16516
00:02:39,380 --> 00:02:40,790
255,

16517
00:02:41,330 --> 00:02:46,330
we first have to get the turtle module to change its color mode to

16518
00:02:46,610 --> 00:02:49,910
255. And we saw this in previous lessons already.

16519
00:02:50,510 --> 00:02:55,510
So now we can go into our color list and pick a random color using the random

16520
00:02:56,870 --> 00:02:57,703
module.

16521
00:02:58,160 --> 00:03:03,160
So let's tap the random module and get hold of the choice method and pass in our

16522
00:03:04,450 --> 00:03:05,320
color_list.

16523
00:03:05,830 --> 00:03:10,210
So now it's going to choose a random color from that list and then create a dot

16524
00:03:10,360 --> 00:03:15,360
hopefully. Now we don't want our painting to disappear once we hit run,

16525
00:03:15,760 --> 00:03:17,800
because right now if I run this code,

16526
00:03:18,040 --> 00:03:20,650
you can see it paints a dot and then it quickly flashes away.

16527
00:03:21,190 --> 00:03:26,190
So let's create a new screen object from the turtle module and the class is

16528
00:03:27,580 --> 00:03:28,630
called a screen.

16529
00:03:29,170 --> 00:03:34,170
And then we can get our screen to change its behavior by calling exitonclick.

16530
00:03:36,430 --> 00:03:40,030
This way when we run our code, you can see our dot painted,

16531
00:03:40,450 --> 00:03:42,910
and then only when we click does it disappear.

16532
00:03:43,450 --> 00:03:46,060
So we've managed to get our first dot onto the screen.

16533
00:03:46,570 --> 00:03:50,710
The next step is figuring out how we can get this process repeated.

16534
00:03:51,280 --> 00:03:56,280
What if we get our Tim to move forwards by say,

16535
00:03:56,500 --> 00:04:00,520
50 paces, and then we draw another dot.

16536
00:04:00,640 --> 00:04:03,100
So let's put this into a loop,

16537
00:04:04,540 --> 00:04:06,460
let's get it to run 10 times,

16538
00:04:07,090 --> 00:04:11,800
and then let's indent this block so that it goes inside the loop.

16539
00:04:12,430 --> 00:04:15,670
And now our turtle is going to draw 10 dots.

16540
00:04:16,180 --> 00:04:20,620
But notice how it goes off the screen and it kind of starts bang in the middle.

16541
00:04:21,130 --> 00:04:25,120
And there's also other problems like we're drawing the path as the turtle is

16542
00:04:25,120 --> 00:04:28,330
traveling. Let's address one thing at a time.

16543
00:04:28,390 --> 00:04:33,100
Let's try to move our starting dot so it starts somewhere down here.

16544
00:04:33,730 --> 00:04:38,730
Now there's quite a few ways of solving this. One way is simply by turning our

16545
00:04:40,120 --> 00:04:45,120
Tim, the turtle, before we go into the loop and setting its heading so that it

16546
00:04:46,000 --> 00:04:48,250
points in this direction.

16547
00:04:51,030 --> 00:04:56,030
You can have a play around with the heading and through my experimentation or

16548
00:04:56,820 --> 00:04:58,110
playing around with the code,

16549
00:04:58,140 --> 00:05:03,060
I've realized that I need to get this heading somewhere between 180 and 

16550
00:05:03,060 --> 00:05:03,893
270.

16551
00:05:04,320 --> 00:05:09,120
So what's halfway between 270 and 180? Well,

16552
00:05:09,120 --> 00:05:12,150
it's going to be 225.

16553
00:05:12,630 --> 00:05:16,080
So let's change our heading and let's try again.

16554
00:05:17,670 --> 00:05:22,320
And you can see that our turtle is now moving roughly in the right direction.

16555
00:05:22,890 --> 00:05:26,250
So we know that each time the turtle moves by 50.

16556
00:05:26,640 --> 00:05:31,530
So if we want it to start about here, ish, then we need to move it one,

16557
00:05:31,530 --> 00:05:33,480
two, three, four, five times.

16558
00:05:33,480 --> 00:05:36,840
So 50 times five is 250.

16559
00:05:37,230 --> 00:05:42,230
So we'll set our heading for Tim and then we'll get him to move forward by 250

16560
00:05:42,720 --> 00:05:47,580
paces. So that way we get started right over here.

16561
00:05:48,270 --> 00:05:49,290
Now, at this point

16562
00:05:49,290 --> 00:05:53,880
it's still going to be pointing in that direction that we set over here.

16563
00:05:54,240 --> 00:05:57,680
So we'll have to set the heading back to zero

16564
00:05:57,710 --> 00:06:00,560
if we want it to continue in this direction.

16565
00:06:03,380 --> 00:06:04,280
Now at this stage,

16566
00:06:04,310 --> 00:06:09,310
you might realize you need to do a little bit of tweaking. So we could maybe move

16567
00:06:10,220 --> 00:06:15,220
our turtle forwards a little bit more so that it starts around here and we get

16568
00:06:15,950 --> 00:06:18,440
enough space for our dots.

16569
00:06:19,640 --> 00:06:23,270
But the next important thing we need to solve before we get rid of the lines

16570
00:06:23,300 --> 00:06:25,730
because we can still see the path of our turtle

16571
00:06:25,760 --> 00:06:29,990
which is really helpful, is we need to figure out how to get the turtle to

16572
00:06:30,260 --> 00:06:33,860
turn left, move up by 50, turn left again

16573
00:06:34,220 --> 00:06:36,650
and then start creating the second row.

16574
00:06:37,580 --> 00:06:42,230
That means we need to turn Tim so that it faces up

16575
00:06:42,620 --> 00:06:45,500
which is a heading of 90,

16576
00:06:45,860 --> 00:06:48,650
or you could also just turn it left by 90 degrees.

16577
00:06:49,190 --> 00:06:53,570
And then we're going to get it to move forwards by 50 paces.

16578
00:06:54,110 --> 00:06:57,200
And then we're going to get it to turn left again.

16579
00:06:57,230 --> 00:07:01,400
So we'll set the heading to 180, which is facing left.

16580
00:07:02,270 --> 00:07:05,450
It's through these step-wise changes to your code

16581
00:07:05,660 --> 00:07:08,660
that you can actually get a good sense of what it's doing

16582
00:07:08,840 --> 00:07:12,680
because you can see it drawing and then see if it's doing what you want it to

16583
00:07:12,680 --> 00:07:16,970
do. Now we know that we have our for loop

16584
00:07:17,000 --> 00:07:20,840
which is able to draw a line of dots going from left to right.

16585
00:07:21,350 --> 00:07:25,040
Why don't we move our turtle so that it starts out here again,

16586
00:07:25,460 --> 00:07:28,100
and then it can move along and create another line?

16587
00:07:29,510 --> 00:07:31,250
So after turning it to the left,

16588
00:07:31,490 --> 00:07:36,170
we're going to get it to go forwards by one, two, three, four,

16589
00:07:36,170 --> 00:07:38,240
five, six, seven, eight, nine,

16590
00:07:38,240 --> 00:07:42,110
ten, by 10 times 50 paces.

16591
00:07:42,380 --> 00:07:44,450
So that's going to be 500.

16592
00:07:46,940 --> 00:07:51,940
So now the final thing we need to do is to change its heading so that it faces

16593
00:07:53,450 --> 00:07:56,390
right again. And now we're pretty close.

16594
00:07:56,600 --> 00:07:59,060
All we need to do is to get this

16595
00:07:59,090 --> 00:08:02,690
to repeat every single time we draw 10 dots.

16596
00:08:03,680 --> 00:08:06,830
How can we do that? Well, firstly,

16597
00:08:06,860 --> 00:08:10,460
this needs to go inside the for loop. Well,

16598
00:08:10,490 --> 00:08:15,490
let's say that we create a new variable called number_of_dots,

16599
00:08:18,170 --> 00:08:22,790
and we set it to a hundred. We're going to use that instead of the range

16600
00:08:23,390 --> 00:08:27,680
and we're going to create a range from 1 to the total number of dots we need

16601
00:08:27,680 --> 00:08:28,513
to create.

16602
00:08:28,700 --> 00:08:32,750
And then we can replace this underscore with an actual variable that we'll use

16603
00:08:32,780 --> 00:08:35,480
inside the for loop. So we'll call it

16604
00:08:36,980 --> 00:08:41,980
dot_count because this is going to represent the current number of dots that

16605
00:08:42,590 --> 00:08:46,250
have been painted. Now that we've got the dot count,

16606
00:08:46,400 --> 00:08:51,400
we can then go ahead and use an if statement to check and see if the dot_count

16607
00:08:54,720 --> 00:08:59,460
% 10 is equal to zero.

16608
00:09:00,060 --> 00:09:05,040
Then this means that the dot count is either 10 or it's 20, 30,

16609
00:09:05,040 --> 00:09:07,410
40, 50, 60, 70, 100.

16610
00:09:08,430 --> 00:09:10,680
And under those circumstances,

16611
00:09:10,740 --> 00:09:15,740
we want our tim to move so that it can go to a new line.

16612
00:09:16,770 --> 00:09:18,270
So now, if I run this,

16613
00:09:19,320 --> 00:09:24,320
you can see that Tim draws one row of dots and then swings back around,

16614
00:09:24,900 --> 00:09:29,900
start at the beginning and draws another row of dots. And then keeps on repeating

16615
00:09:30,030 --> 00:09:34,020
this until it gets to the point where it's drawn hundred dots.

16616
00:09:34,530 --> 00:09:36,300
But this is obviously very slow

16617
00:09:36,390 --> 00:09:41,390
so we could speed things up a little bit by changing the speed of Tim at the

16618
00:09:42,060 --> 00:09:44,280
very beginning to fastest.

16619
00:09:44,730 --> 00:09:49,730
So this way it'll animate a lot quicker and we can see our dots show up and it

16620
00:09:51,060 --> 00:09:53,310
takes a little bit less time to see it in action.

16621
00:09:54,060 --> 00:09:57,930
Once our painting is completed, you can see there's one other bug.

16622
00:09:58,440 --> 00:10:02,580
Our final dot is not painted. And this is of course

16623
00:10:02,580 --> 00:10:07,350
because our range operator goes from 1 to 100

16624
00:10:07,890 --> 00:10:12,890
and that means it's only going to run 99 times because 100 - 1 is equal to

16625
00:10:15,120 --> 00:10:18,330
99. So we can add one to this.

16626
00:10:21,140 --> 00:10:21,590
Yeah.

16627
00:10:21,590 --> 00:10:25,550
So once we've changed that, then we managed to get our hundredth dot,

16628
00:10:26,000 --> 00:10:29,660
which of course, again, triggers a new line. Now,

16629
00:10:29,720 --> 00:10:32,180
a lot of these lines were really useful when

16630
00:10:32,250 --> 00:10:35,540
we were trying to visualize how our turtle is moving.

16631
00:10:36,020 --> 00:10:37,970
But now that we've got our painting in place,

16632
00:10:38,180 --> 00:10:40,220
we need to try and get rid of these lines.

16633
00:10:40,880 --> 00:10:45,880
So we know that from the documentation we can use pen up and pen down. At the

16634
00:10:46,310 --> 00:10:49,310
very beginning and the moment where we've created Tim,

16635
00:10:49,610 --> 00:10:54,610
we can already get the pen to come up so that we don't draw those lines that you

16636
00:10:54,980 --> 00:10:59,420
see. By drawing dots we don't actually need the pen to go down.

16637
00:10:59,720 --> 00:11:02,000
It's just going to leave a dot and then move on.

16638
00:11:02,450 --> 00:11:05,300
So just by writing pen up and no pen down,

16639
00:11:05,540 --> 00:11:08,150
we already to get our dots being drawn.

16640
00:11:09,830 --> 00:11:14,300
Now the very last improvement that I can think of is once our painting is

16641
00:11:14,300 --> 00:11:18,440
completed, I'd really like to get rid of the shape of the turtle,

16642
00:11:18,470 --> 00:11:20,720
which in our case is a little arrow.

16643
00:11:21,170 --> 00:11:24,140
Now that's really helpful when we're trying to figure out which direction it's

16644
00:11:24,140 --> 00:11:29,090
facing or how it's moving. But at the very end, we don't really want this.

16645
00:11:31,010 --> 00:11:35,660
So again, back to the documentation, how can we get rid of our turtle?

16646
00:11:36,110 --> 00:11:39,290
Well, there's show turtle and hide turtle.

16647
00:11:39,710 --> 00:11:41,540
And this is how we make the turtle

16648
00:11:41,540 --> 00:11:46,540
invisible. It even tells us that you can do this while in the middle of a drawing because

16649
00:11:47,660 --> 00:11:50,840
hiding the turtle will speed up the drawing observably.

16650
00:11:51,320 --> 00:11:56,320
So let's go ahead and hide our turtle as well as moving the pen up.

16651
00:11:58,570 --> 00:12:01,390
And let's re-visualize this.

16652
00:12:03,400 --> 00:12:07,570
And you can see our dots being drawn without our turtle

16653
00:12:07,930 --> 00:12:12,930
and we end up with a beautiful Hirst painting that we've created completely

16654
00:12:13,930 --> 00:12:15,220
from scratch. Well,

16655
00:12:15,250 --> 00:12:18,310
maybe with a little bit of help from Damien Hirst's color palette.

16656
00:12:19,060 --> 00:12:23,920
So I hope you enjoyed this project. And I look forward to seeing you tomorrow.



16657
00:00:00,480 --> 00:00:01,050
Hey guys,

16658
00:00:01,050 --> 00:00:06,050
welcome to Day 19 of 100 Days of Code. Today

16659
00:00:06,150 --> 00:00:09,060
we're going to be learning more about turtle graphics,

16660
00:00:09,330 --> 00:00:14,220
but we're also going to look at event listeners, higher order functions, state,

16661
00:00:14,310 --> 00:00:16,950
and multiple instances of an object.

16662
00:00:17,160 --> 00:00:21,540
And we're going to be using this knowledge to build a whole bunch of games. We're

16663
00:00:21,540 --> 00:00:24,960
going to be making Etch-a-Sketch, one of my favorite childhood toys.

16664
00:00:25,320 --> 00:00:30,320
And this game is going to allow us to use the up and down arrows to move our

16665
00:00:30,360 --> 00:00:32,040
turtle forwards and back

16666
00:00:32,369 --> 00:00:37,370
and then we can turn our turtle clockwise and anticlockwise to continue

16667
00:00:38,640 --> 00:00:39,270
drawing.

16668
00:00:39,270 --> 00:00:44,270
So we can use this to create circles or to create lines.

16669
00:00:46,140 --> 00:00:50,430
And we can basically create drawings using our turtle program.

16670
00:00:51,060 --> 00:00:51,660
In addition,

16671
00:00:51,660 --> 00:00:56,660
we're also going to be making a turtle racing game where we will get to bet on

16672
00:00:56,820 --> 00:00:59,850
the color of a turtle who will win the race.

16673
00:01:00,270 --> 00:01:02,850
And then once we click okay to the popup,

16674
00:01:03,150 --> 00:01:08,150
then all of our turtles go to the starting line and they start moving at a

16675
00:01:08,340 --> 00:01:09,360
random pace.

16676
00:01:09,990 --> 00:01:14,250
And then once the first turtle hits the right edge of the screen,

16677
00:01:14,520 --> 00:01:19,520
it will be declared the winner and we will get to see if our turtle won or not.

16678
00:01:20,340 --> 00:01:24,300
So at the moment, the red turtle is not looking like it's going to make it.

16679
00:01:24,500 --> 00:01:28,010
I think the orange is probably-- Oh, the yellow's overtaking it.

16680
00:01:30,500 --> 00:01:34,040
And there we go. We lose. The purple turtle

16681
00:01:34,140 --> 00:01:36,920
was the winner of the race. So I hope you're

16682
00:01:37,130 --> 00:01:41,660
as excited as I am to build these projects together. Once you're ready,

16683
00:01:41,690 --> 00:01:46,280
head over to the next lesson and let's learn about how we can listen to key

16684
00:01:46,280 --> 00:01:47,810
strokes on the keyboard.


16685
00:00:00,270 --> 00:00:03,870
Now in order to be able to create a lot of the games that we've spoken about,

16686
00:00:04,290 --> 00:00:09,290
we need a way of being able to listen to things the user does,

16687
00:00:10,020 --> 00:00:14,580
like when the user taps a specific key on the keyboard. And the code that allows

16688
00:00:14,580 --> 00:00:17,220
us to do this are called event listeners.

16689
00:00:17,610 --> 00:00:20,370
So if we look at the turtle documentation,

16690
00:00:20,520 --> 00:00:24,150
you can see that there's a whole section on screen events,

16691
00:00:24,540 --> 00:00:29,540
including listening to key presses or listening to a click or other things that

16692
00:00:31,050 --> 00:00:35,700
you can listen to. So the important thing is this listen method.

16693
00:00:36,150 --> 00:00:41,150
This allows the turtle screen to start listening and waiting for events that the

16694
00:00:42,180 --> 00:00:44,910
user might trigger, like tapping on a key.

16695
00:00:45,540 --> 00:00:50,460
I've gone ahead and created a new PyCharm project which I've called day-19

16696
00:00:50,850 --> 00:00:54,810
and I've created my main.py file inside the project. Now,

16697
00:00:54,810 --> 00:00:59,810
the first thing I'm going to do is I'm going to import the turtle class and the

16698
00:01:00,090 --> 00:01:02,400
screen class from the turtle module.

16699
00:01:02,850 --> 00:01:06,600
And then I'm going to use them to create my Tim the turtle,

16700
00:01:08,310 --> 00:01:12,000
and also create a screen object.

16701
00:01:12,390 --> 00:01:17,130
This is basically going to control the window when we run our code.

16702
00:01:17,160 --> 00:01:19,560
So you saw it just flash just now.

16703
00:01:20,160 --> 00:01:22,770
Now in order to start listening for events,

16704
00:01:22,800 --> 00:01:27,570
we have to get hold of the screen object and then tell it to start listening.

16705
00:01:28,140 --> 00:01:29,970
And once it starts listening,

16706
00:01:30,000 --> 00:01:34,920
we have to bind a function that will be triggered when a particular key is

16707
00:01:34,920 --> 00:01:37,470
pressed on the keyboard. Now,

16708
00:01:37,530 --> 00:01:41,730
in order to bind a key stroke to an event in our code,

16709
00:01:42,090 --> 00:01:44,460
we have to use an event listener.

16710
00:01:45,090 --> 00:01:48,990
So the one that we're going to be using is this onkey method.

16711
00:01:49,350 --> 00:01:54,350
And you can see it expects a function with no arguments and also a key,

16712
00:01:56,250 --> 00:01:57,060
like the

16713
00:01:57,060 --> 00:02:02,060
'a' key on your keyboard or a key symbol, so the space or up or down.

16714
00:02:02,700 --> 00:02:05,610
So I'm going to say screen.onkey

16715
00:02:06,180 --> 00:02:10,259
and then I have to bind some sort of function to this method.

16716
00:02:10,500 --> 00:02:14,400
So let's create a function and we'll call it move_

16717
00:02:14,990 --> 00:02:15,860
forwards.

16718
00:02:17,510 --> 00:02:22,340
And all that this function is going to do is it's going to get Tim to go forward

16719
00:02:22,400 --> 00:02:26,780
by 10 paces. And let's not forget our colon here.

16720
00:02:27,320 --> 00:02:30,200
Now, coming back to my onkey method,

16721
00:02:30,440 --> 00:02:35,330
I'm going to say that when the space key, so the space bar, is pressed,

16722
00:02:35,750 --> 00:02:38,450
then trigger the function move_forwards.

16723
00:02:38,990 --> 00:02:43,990
Now here's a really important point; when we use a function as a argument,

16724
00:02:44,270 --> 00:02:48,230
so something that is going to be passed into another function,

16725
00:02:48,650 --> 00:02:51,440
we don't actually add the parentheses at the end.

16726
00:02:51,920 --> 00:02:55,430
The parentheses triggers the function to happen there and then.

16727
00:02:55,880 --> 00:03:00,880
But what we want is we want this method, onkey, to listen for when the space bar

16728
00:03:02,710 --> 00:03:07,710
is pressed and only when that happens to trigger this move_forwards function.

16729
00:03:08,770 --> 00:03:13,750
Now, the final thing I need to do is to add the exitonclick so that my screen

16730
00:03:13,750 --> 00:03:15,460
doesn't disappear when I run it.

16731
00:03:16,180 --> 00:03:20,470
And now what I'm going to try is when I hit the spacebar,

16732
00:03:20,860 --> 00:03:25,780
you should see my turtle move forwards by 10 paces each time.

16733
00:03:26,440 --> 00:03:30,790
So we're now controlling our turtle using a keystroke.

16734
00:03:31,360 --> 00:03:36,360
What we've essentially got here is a function that's being used as an input.

16735
00:03:37,270 --> 00:03:39,970
Let's say we have a function called function_a

16736
00:03:39,970 --> 00:03:42,490
that takes some sort of input.

16737
00:03:43,090 --> 00:03:48,090
And then we have a function called function_b, we can actually pass function_b

16738
00:03:48,280 --> 00:03:50,980
into function_a like this.

16739
00:03:51,400 --> 00:03:54,370
So notice that when we pass a function as an input,

16740
00:03:54,670 --> 00:03:58,480
we only pass the name without the parentheses at the end.

16741
00:03:59,050 --> 00:04:03,220
But how exactly does this function onkey work?

16742
00:04:03,250 --> 00:04:08,250
Because it's kind of crazy to use a function as the input to another function,

16743
00:04:09,670 --> 00:04:10,390
right?

16744
00:04:10,390 --> 00:04:15,390
So want to show you a quick example of passing a function into another function,

16745
00:04:16,540 --> 00:04:21,190
and I'm going to use the calculator example that we did many,

16746
00:04:21,190 --> 00:04:26,080
many moons ago. Um, when we created a calculator that could take two numbers,

16747
00:04:26,170 --> 00:04:29,410
add, subtract, multiply, or divide those numbers.

16748
00:04:29,980 --> 00:04:32,260
So we've got our four functions here. Now,

16749
00:04:32,290 --> 00:04:35,260
you don't actually have to write any of this out, cause it's quite tedious.

16750
00:04:35,590 --> 00:04:37,480
I just want you to watch and listen.

16751
00:04:38,170 --> 00:04:42,880
So let's say I create a final function, which I'll call calculator.

16752
00:04:43,630 --> 00:04:48,610
And this function is going to take a n1 and n2, two numbers,

16753
00:04:49,000 --> 00:04:53,050
but it's also going to take a function as an input.

16754
00:04:53,770 --> 00:04:56,110
Now, inside this calculator function,

16755
00:04:56,260 --> 00:05:00,010
I'm going to take the function name that was passed in

16756
00:05:00,460 --> 00:05:05,460
and then call that function by adding the parentheses and then passing in n1

16757
00:05:06,100 --> 00:05:10,300
and n2. So now I have my calculator function

16758
00:05:10,690 --> 00:05:13,840
which can take any function as an input.

16759
00:05:14,140 --> 00:05:16,630
And once that function has been passed in here,

16760
00:05:17,050 --> 00:05:22,050
then that function will get triggered passing in n1 and n2. Let's return

16761
00:05:23,590 --> 00:05:25,510
this result as the output,

16762
00:05:25,900 --> 00:05:28,690
and then let's call our calculator function,

16763
00:05:28,990 --> 00:05:33,340
let's pass in some numbers and let's pass in the name of a function.

16764
00:05:34,060 --> 00:05:39,060
So now let's go ahead and save this into a variable and then print that variable

16765
00:05:40,450 --> 00:05:43,000
result. So now when I run the code,

16766
00:05:43,030 --> 00:05:48,030
you can see I get five printed and that's because I've got add as the third

16767
00:05:48,070 --> 00:05:52,630
input here. But what happens if I change this to multiply? Well,

16768
00:05:52,630 --> 00:05:54,700
I get six instead of five.

16769
00:05:55,150 --> 00:05:59,360
And what happens if I put divide? Well, I get zero because,

16770
00:05:59,380 --> 00:06:01,210
because it's rounding up to a whole number.

16771
00:06:01,690 --> 00:06:05,470
But essentially what I'm trying to demonstrate to you is this concept

16772
00:06:05,620 --> 00:06:09,640
which is known in Python as Higher Order Functions.

16773
00:06:10,150 --> 00:06:15,150
And the idea of a higher order function is a function that can work with other

16774
00:06:15,670 --> 00:06:17,650
functions. So in this case,

16775
00:06:17,710 --> 00:06:22,710
our calculator is a higher order function because it's actually taking another

16776
00:06:23,230 --> 00:06:28,180
function as an input, and then working with it inside the body of the function.

16777
00:06:28,870 --> 00:06:33,190
Now there are certain programming languages where you can't do this at all.

16778
00:06:33,460 --> 00:06:36,280
But in Python, this is pretty commonly used.

16779
00:06:36,550 --> 00:06:41,550
And it's really useful when we need to listen for events and then trigger a

16780
00:06:42,160 --> 00:06:46,270
particular function. Now, while we're on the topic of functions,

16781
00:06:46,450 --> 00:06:51,340
I recommend that when you're using methods that you haven't created yourself

16782
00:06:51,370 --> 00:06:55,330
like for example onkey, to use keyword arguments

16783
00:06:55,360 --> 00:06:59,050
instead of positional arguments especially if like in this case,

16784
00:06:59,260 --> 00:07:01,390
the position doesn't actually have any meaning.

16785
00:07:02,230 --> 00:07:04,630
So now that you've seen how event listeners work,

16786
00:07:04,870 --> 00:07:08,980
we're going to be using event listeners to build out our Etch-A-Sketch program

16787
00:07:09,040 --> 00:07:12,790
in the next lesson. So for all of that and more, I'll see you there.


16788
00:00:00,030 --> 00:00:04,080
Now that you've seen how event listeners work, here's a challenge for you.

16789
00:00:04,650 --> 00:00:07,680
I want you to build a Etch-A-Sketch app.

16790
00:00:08,370 --> 00:00:09,840
This is what you're aiming for.

16791
00:00:10,320 --> 00:00:15,320
You should be able to create a turtle that will allow you to press the W key to

16792
00:00:15,990 --> 00:00:19,980
go forwards, the S key to go backwards,

16793
00:00:20,310 --> 00:00:25,310
the A key to go counterclockwise or leftwards and the D key to go right or

16794
00:00:26,970 --> 00:00:31,440
clockwise. And then be able to draw things like this,

16795
00:00:31,530 --> 00:00:36,000
or you could do up and right to draw curves like this.

16796
00:00:36,330 --> 00:00:40,410
We're kind of creating that childhood game which is Etch-A-Sketch.

16797
00:00:41,070 --> 00:00:42,660
When you press the C key,

16798
00:00:42,720 --> 00:00:47,100
it should clear all your drawings and put your turtle back in the center.

16799
00:00:47,640 --> 00:00:51,450
So think about what you've learned so far about how event listeners work,

16800
00:00:51,690 --> 00:00:53,880
and then use the turtle documentation,

16801
00:00:54,120 --> 00:00:56,550
read through the different methods that you have access to,

16802
00:00:56,910 --> 00:01:00,900
and then try to figure out how you can get this Etch-A-Sketch program to work in

16803
00:01:00,900 --> 00:01:04,739
the way that it's shown here. So pause the video and give this challenge a go.

16804
00:01:08,870 --> 00:01:11,780
This is the demo code from previously

16805
00:01:11,870 --> 00:01:16,870
and this is a really simplified version of how the event handlers work.

16806
00:01:17,960 --> 00:01:21,740
So for example, we've got our move_forwards function

16807
00:01:22,040 --> 00:01:27,040
which is going to be triggered when the space key is detected by the screen.

16808
00:01:28,880 --> 00:01:33,620
And the screen is able to detect it because it's listening for those keyboard

16809
00:01:33,620 --> 00:01:35,720
strokes and clicks. Now,

16810
00:01:35,720 --> 00:01:40,720
because the onkey function can only receive a function with no arguments,

16811
00:01:41,270 --> 00:01:43,640
at least this is what we see in the documentation,

16812
00:01:43,970 --> 00:01:48,680
then that means we have to create four separate functions, moveforwards,

16813
00:01:48,710 --> 00:01:50,810
move back, turn left, and turn right.

16814
00:01:51,260 --> 00:01:55,970
So now all I need is three more of these functions,

16815
00:01:56,360 --> 00:02:01,070
move backwards, turn left, and turn right. Now,

16816
00:02:01,130 --> 00:02:06,130
I'm going to change this binding from space to w which is going to be move

16817
00:02:07,080 --> 00:02:07,913
forwards.

16818
00:02:08,330 --> 00:02:13,330
And then I'm going to copy this and make three more of these so that I've got my

16819
00:02:13,730 --> 00:02:15,950
w as move_forwards,

16820
00:02:16,430 --> 00:02:20,210
and then I've got my S as move_backwards,

16821
00:02:21,050 --> 00:02:26,050
my a as turn_left and my d as turn_

16822
00:02:28,070 --> 00:02:28,903
right.

16823
00:02:29,840 --> 00:02:34,520
So now all we need to do is to actually create these functions.

16824
00:02:35,000 --> 00:02:37,850
So let's create our move_backwards

16825
00:02:40,130 --> 00:02:44,990
which is going to take Tim backwards by 10 paces.

16826
00:02:45,380 --> 00:02:49,160
And then the next function we're going to create is to turn_left.

16827
00:02:49,760 --> 00:02:54,760
And this is going to get the current heading of our turtle and add 10 degrees to

16828
00:02:58,400 --> 00:02:59,050
it.

16829
00:02:59,050 --> 00:03:03,940
So if you imagine that the turtle starts out pointing towards East

16830
00:03:04,120 --> 00:03:08,620
and this heading is going to be zero. And we know that to point North,

16831
00:03:08,680 --> 00:03:12,400
it becomes 90. So if we want this to turn leftwards,

16832
00:03:12,700 --> 00:03:16,960
then we have to add to the current heading value like this.

16833
00:03:17,470 --> 00:03:19,570
So this could be our new_heading,

16834
00:03:20,200 --> 00:03:23,170
and then we can get Tim to set

16835
00:03:23,230 --> 00:03:28,230
it's heading to that new heading so that we turn left by 10 degrees each time.

16836
00:03:30,520 --> 00:03:34,240
Now you could have also used simply just the left function.

16837
00:03:34,240 --> 00:03:38,590
So you could have said tim.left by 10 degrees. Both methods work

16838
00:03:38,680 --> 00:03:43,630
and it's totally up to you which one you choose. Now in order to turn right

16839
00:03:43,660 --> 00:03:48,610
it's basically the opposite. So instead of adding 10 degrees,

16840
00:03:48,850 --> 00:03:53,620
all we have to do is subtract 10 degrees or alternatively calling

16841
00:03:53,620 --> 00:03:55,870
tim.right, passing in 10 degrees.

16842
00:03:56,590 --> 00:04:01,590
Now we have all four functions defined and tied to a keystroke

16843
00:04:02,470 --> 00:04:03,730
let's go ahead and test it out.

16844
00:04:04,240 --> 00:04:08,320
So w should take us forwards, s should take us backwards,

16845
00:04:08,680 --> 00:04:12,160
a should turn left and D should turn right.

16846
00:04:12,670 --> 00:04:13,750
So perfect.

16847
00:04:14,500 --> 00:04:18,760
Now the last thing we wanted to code in was some sort of way of clearing the

16848
00:04:18,760 --> 00:04:22,750
screen. And we said we would bind that to the C key.

16849
00:04:23,290 --> 00:04:27,790
So I'm going to create a function called clear which I'll define here.

16850
00:04:28,570 --> 00:04:33,160
And this function is going to clear the screen wipe out all the drawing

16851
00:04:33,520 --> 00:04:36,940
and then take our turtle back to the beginning,

16852
00:04:36,940 --> 00:04:38,950
which was at the middle of the screen.

16853
00:04:39,490 --> 00:04:43,750
This is going to require a little bit of reading in the turtle documentation.

16854
00:04:43,960 --> 00:04:48,670
If you scroll through this list, you'll actually find two clear methods.

16855
00:04:49,150 --> 00:04:53,680
One is a method that is for the turtle

16856
00:04:54,130 --> 00:04:58,750
and another is a clear method for the screen,

16857
00:04:59,650 --> 00:05:04,330
which is the window basically. Now this clear is going to clear everything.

16858
00:05:04,330 --> 00:05:08,260
It's going to delete our turtle and everything else that's onscreen.

16859
00:05:08,710 --> 00:05:10,450
Whereas this clear,

16860
00:05:10,450 --> 00:05:15,220
which is tied to the turtle, is just going to delete this particular turtle's

16861
00:05:15,220 --> 00:05:18,220
drawings. So this is what we need to do.

16862
00:05:18,250 --> 00:05:23,250
We need to get hold of Tim and then call clear on him to get rid of all the

16863
00:05:23,800 --> 00:05:25,630
drawings he's made so far. Now,

16864
00:05:25,630 --> 00:05:30,220
the next thing we're going to do is we're going to bring our turtle back to the

16865
00:05:30,220 --> 00:05:32,230
center, to the starting point.

16866
00:05:32,560 --> 00:05:37,420
And this is going to be aided by one of the methods called home.

16867
00:05:37,450 --> 00:05:41,710
So I found this in the documentation and it says that it moves the turtle to the

16868
00:05:41,710 --> 00:05:45,190
origin, which is in the middle of the screen. Now,

16869
00:05:45,190 --> 00:05:50,190
all we need to do is to call home and notice what happens if I run this as it is.

16870
00:05:52,120 --> 00:05:56,530
So I can draw and basically make a mess.

16871
00:05:57,740 --> 00:06:00,170
And then when I hit C

16872
00:06:02,180 --> 00:06:04,160
you can see it goes back to the home,

16873
00:06:04,190 --> 00:06:09,190
but it's actually drawing its whole path back there as well. To prevent this from

16874
00:06:09,740 --> 00:06:13,250
happening we have to pull the pen up, which we've used before.

16875
00:06:13,760 --> 00:06:17,960
And then once Tim has reached home, then we're going to put the pen down

16876
00:06:18,200 --> 00:06:19,850
ready for the next drawing.

16877
00:06:20,390 --> 00:06:25,390
So now we can make a drawing, hit C, and then it goes back to the center.

16878
00:06:26,420 --> 00:06:30,470
Did you manage to complete this challenge? Don't beat yourself up

16879
00:06:30,500 --> 00:06:34,400
if you didn't manage to find some of the methods like home or clear.

16880
00:06:34,820 --> 00:06:38,630
It's a matter of getting practice with reading the documentation and having the

16881
00:06:38,630 --> 00:06:42,200
patience to go through it and look for the relevant methods.

16882
00:06:42,680 --> 00:06:45,950
And on top of that, it's just a matter of messing around with the code.

16883
00:06:46,280 --> 00:06:50,600
Try things out, see what happens. And each time you add something, run the code,

16884
00:06:50,600 --> 00:06:54,020
see if it does what you want it to do. And if not, fix it.

16885
00:06:54,320 --> 00:06:56,810
And that is the endless cycle of software development.

16886
00:06:57,140 --> 00:06:59,450
So don't get frustrated if you got stuck.

16887
00:06:59,660 --> 00:07:01,520
As long as you managed to make it work in the end

16888
00:07:01,790 --> 00:07:03,680
and you've learned some lessons from this process,

16889
00:07:04,130 --> 00:07:07,190
then you can congratulate yourself on completing the job.

16890
00:07:07,550 --> 00:07:10,310
And I find that I always learn more when I make more mistakes

16891
00:07:10,340 --> 00:07:13,670
and when I struggle more. Once you're done playing around with the code,

16892
00:07:13,820 --> 00:07:17,770
head over to the next lesson, and we're going to be learning about object

16893
00:07:17,770 --> 00:07:22,770
state and creating multiple instances of the same object.

16894
00:07:23,360 --> 00:07:26,300
So for all of that and more, I'll see you on the next lesson.


16895
00:00:00,540 --> 00:00:04,530
The objective is we want to be able to build a turtle race,

16896
00:00:04,860 --> 00:00:09,860
where we have multiple turtles to run along a line and then see who actually

16897
00:00:10,860 --> 00:00:14,400
reaches the finish line first. Now here's a question though.

16898
00:00:14,970 --> 00:00:18,660
We know how to build one turtle from the turtle blueprint,

16899
00:00:18,930 --> 00:00:23,130
but what if we need more turtles? How do we get hold of them?

16900
00:00:23,490 --> 00:00:24,210
Well,

16901
00:00:24,210 --> 00:00:29,210
we know that we can use a class or a blueprint to define what a turtle should

16902
00:00:31,950 --> 00:00:34,350
appear like and how it should behave.

16903
00:00:34,710 --> 00:00:37,830
So what it has and what it can do. Now,

16904
00:00:37,830 --> 00:00:42,830
we can then take this class and construct an actual turtle object from it

16905
00:00:43,470 --> 00:00:46,980
which is then doing all the drawing and walking around on the screen.

16906
00:00:47,430 --> 00:00:51,900
So this is what the code has looked like so far. We have Timmy

16907
00:00:51,960 --> 00:00:56,960
which is our turtle object, and turtle coming from the turtle module is the

16908
00:00:57,330 --> 00:01:00,060
class which is used to construct this object.

16909
00:01:00,420 --> 00:01:05,420
But that's not the end of the story because the whole reason why we can have

16910
00:01:06,120 --> 00:01:10,440
these blueprints is so we can make more objects.

16911
00:01:10,830 --> 00:01:15,060
So, we're not limited to just one turtle object.

16912
00:01:15,090 --> 00:01:19,980
We can create as many as we need in the same way that we have created Timmy.

16913
00:01:20,220 --> 00:01:23,910
We create Tommy, Johnny, Jenny, and Benny.

16914
00:01:24,840 --> 00:01:28,890
Even though both Timmy and Tommy are turtle objects,

16915
00:01:29,130 --> 00:01:32,610
they actually function completely independent of each other.

16916
00:01:32,940 --> 00:01:37,920
So in programming, we would say that they are each a separate instance.

16917
00:01:38,100 --> 00:01:39,750
So what does that mean? Well,

16918
00:01:39,750 --> 00:01:43,830
that means that they're each an example of the turtle object.

16919
00:01:44,160 --> 00:01:48,810
So just as you and I are both examples of human objects,

16920
00:01:48,930 --> 00:01:52,140
Timmy and Tommy are both examples of turtle objects.

16921
00:01:52,650 --> 00:01:55,020
And that means that at any moment in time,

16922
00:01:55,140 --> 00:01:59,070
they could have different attributes and they could be doing different things.

16923
00:01:59,730 --> 00:02:01,260
So that means, for example,

16924
00:02:01,290 --> 00:02:06,290
Timmy could have his color set to green while Tommy could have its color set to

16925
00:02:06,960 --> 00:02:09,360
something completely different, like purple.

16926
00:02:09,750 --> 00:02:14,750
Now the fact that each of these objects can have different attributes and can be

16927
00:02:16,050 --> 00:02:21,050
performing different methods at any one time in programming is known as their

16928
00:02:21,660 --> 00:02:22,493
state.

16929
00:02:23,070 --> 00:02:28,070
So the state of Timmy's color attribute is green and Tommy's color attribute is

16930
00:02:29,370 --> 00:02:31,260
purple. So in this case,

16931
00:02:31,290 --> 00:02:35,970
they have different state in terms of their attribute or their appearance.

16932
00:02:36,510 --> 00:02:39,780
But they can also have different state in terms of whether

16933
00:02:39,780 --> 00:02:42,780
if they are doing something. For example,

16934
00:02:42,810 --> 00:02:47,810
Timmy could be asked to move forwards while Tommy is staying completely

16935
00:02:48,750 --> 00:02:51,900
stationary. So Timmy is in the middle of a method call

16936
00:02:51,930 --> 00:02:56,340
whereas Tommy is not doing anything at all. Now in the next lesson,

16937
00:02:56,370 --> 00:02:59,200
we're going to be building out our turtle racing game

16938
00:02:59,620 --> 00:03:01,360
and we're going to see this in action.

16939
00:03:01,540 --> 00:03:06,540
The idea that you could have separate versions of the same object each with a

16940
00:03:07,480 --> 00:03:12,480
different state and acting completely independently from each other in order to

16941
00:03:13,600 --> 00:03:17,560
race against each other. So don't worry if this doesn't make sense

16942
00:03:17,560 --> 00:03:20,440
a hundred percent just yet. Head over to the next lesson

16943
00:03:20,740 --> 00:03:24,190
and we're going to start writing some real code to better understand this

16944
00:03:24,190 --> 00:03:24,850
concept.


16945
00:00:00,060 --> 00:00:04,470
All right guys. In this lesson, we're going to be building out our turtle race.

16946
00:00:04,830 --> 00:00:06,060
And through building this race,

16947
00:00:06,090 --> 00:00:11,090
we're going to get more familiar with these concepts of state and instances.

16948
00:00:11,820 --> 00:00:15,720
And that's because we need to create multiple turtles to join our race.

16949
00:00:16,110 --> 00:00:18,390
This is what we're aiming for. In the beginning,

16950
00:00:18,450 --> 00:00:23,450
there's going to be a little popup that will ask us to bet who will win the

16951
00:00:23,610 --> 00:00:26,640
race. And it asked me to choose a color.

16952
00:00:27,000 --> 00:00:29,370
Now the turtles are in the color of the rainbow,

16953
00:00:29,370 --> 00:00:33,060
so I'm just going to pick the red one. Once I hit okay,

16954
00:00:33,060 --> 00:00:37,830
we have all of our turtles lined up in the starting position and they will start

16955
00:00:37,860 --> 00:00:42,450
making random steps towards the right edge of the screen. Now,

16956
00:00:42,450 --> 00:00:46,620
the first hurdle that reaches past the right edge of the screen is going to be

16957
00:00:46,620 --> 00:00:47,453
the winner.

16958
00:00:47,670 --> 00:00:52,670
And at the moment it looks like the green turtle is probably going to get there

16959
00:00:52,770 --> 00:00:57,750
first. There we go. So as soon as a turtle crosses the finish line,

16960
00:00:58,920 --> 00:01:03,390
then it will print out a line telling us whether if we won or whether

16961
00:01:03,390 --> 00:01:06,990
if we lost our bets and which turtle won the game.

16962
00:01:07,200 --> 00:01:08,430
So this is the goal.

16963
00:01:08,970 --> 00:01:13,800
Now I'm going to get started by deleting all of the code inside our previous

16964
00:01:13,800 --> 00:01:17,220
Etch-A-Sketch project other than these few lines.

16965
00:01:17,280 --> 00:01:19,890
So I've got Tim my turtle, screen

16966
00:01:19,890 --> 00:01:24,890
which is a screen object that is going to hold the screen until I click on it so

16967
00:01:26,130 --> 00:01:30,150
that I can see what's going on. Now, because in this game

16968
00:01:30,180 --> 00:01:35,180
the dimensions of the screen or of the window is really crucial,

16969
00:01:35,940 --> 00:01:40,020
I'm not just going to get the default screen size show up. Instead

16970
00:01:40,020 --> 00:01:44,430
I'm actually going to use one of the methods that is in the screen object

16971
00:01:44,460 --> 00:01:48,060
which is called setup. And setup, as you can see,

16972
00:01:48,060 --> 00:01:52,290
allows me to set up the width and the height of this window

16973
00:01:52,290 --> 00:01:53,310
that's going to show up.

16974
00:01:54,510 --> 00:01:59,510
So I'm going to set the width of my screen to 500 and the height to 400.

16975
00:02:00,360 --> 00:02:05,000
So I should end up with a 500 pixel wide, 400 pixel high screen.

16976
00:02:05,480 --> 00:02:09,710
And once I hit run, you can see this is what it gets resized to.

16977
00:02:10,370 --> 00:02:13,700
Now, if you came across this code and it was somebody else's code,

16978
00:02:14,030 --> 00:02:17,960
then these numbers and their positions don't actually make a lot of sense,

16979
00:02:17,990 --> 00:02:21,230
which one's the height, which one's the width. So in these situations,

16980
00:02:21,260 --> 00:02:25,880
I recommend using keyword arguments rather than positional arguments. Oh,

16981
00:02:25,910 --> 00:02:29,000
let's write out the parameters explicitly. Our width

16982
00:02:29,030 --> 00:02:32,540
to be 500 and our height to be 400. This way

16983
00:02:32,540 --> 00:02:34,880
when somebody else comes along and reads your code,

16984
00:02:34,910 --> 00:02:38,990
it's a lot easier to understand rather than just 500 and 400,

16985
00:02:38,990 --> 00:02:40,880
cause it could be both ways.

16986
00:02:41,630 --> 00:02:44,120
So now that we've got our screen set up,

16987
00:02:44,180 --> 00:02:49,180
the next thing I want to do is to bring up that popup and ask the user to make a

16988
00:02:49,280 --> 00:02:53,510
bet. Now, if we take a look at the Python documentation,

16989
00:02:53,960 --> 00:02:56,750
um, where we've been spending a lot of time recently,

16990
00:02:57,020 --> 00:03:00,910
you can see that there is a method on the screen

16991
00:03:00,970 --> 00:03:03,670
which is called textinput.

16992
00:03:04,060 --> 00:03:09,060
And this is going to show up a popup window and it allow the user to look at the

16993
00:03:09,940 --> 00:03:13,960
prompt and the title and to enter a piece of text.

16994
00:03:14,410 --> 00:03:18,100
And if you want the user to enter a number, then you would use numinput.

16995
00:03:18,550 --> 00:03:22,570
So let's go ahead and add that here. So it will be a method from screen

16996
00:03:22,600 --> 00:03:26,800
which is called textinput and then it's got two parameters.

16997
00:03:26,860 --> 00:03:31,000
One is the title which in my case

16998
00:03:31,000 --> 00:03:33,220
I'm just going to say 'Make your bet'.

16999
00:03:33,850 --> 00:03:38,710
And then the second parameter is going to be the prompt. And in my case,

17000
00:03:38,740 --> 00:03:40,750
I will probably say, um,

17001
00:03:40,870 --> 00:03:45,610
which turtle win the race and tell them to enter a color.

17002
00:03:46,120 --> 00:03:48,490
Now, this works really similarly to our input

17003
00:03:48,490 --> 00:03:53,350
which we've been really used to because it will return the string and we can

17004
00:03:53,350 --> 00:03:56,170
catch that string inside a variable.

17005
00:03:56,200 --> 00:04:01,200
So we'll call it user_bet and we'll set it to equal the output from this

17006
00:04:02,620 --> 00:04:03,453
method.

17007
00:04:06,870 --> 00:04:09,150
Now let's give this a shot.

17008
00:04:09,570 --> 00:04:14,130
Let's run the code and then let's enter a color, hit okay.

17009
00:04:14,190 --> 00:04:16,350
And if we take a look in our console,

17010
00:04:16,589 --> 00:04:20,550
you can see that that bet string is printed in here.

17011
00:04:21,540 --> 00:04:25,680
So now the next thing we're going to do is we need to do something with our

17012
00:04:25,680 --> 00:04:28,200
turtle. I'm going to move it down a little bit.

17013
00:04:28,590 --> 00:04:33,590
And what I want my turtle to do is I want it to go to the start of the line.

17014
00:04:35,130 --> 00:04:39,810
So the very left edge of my screen. Now I could,

17015
00:04:39,810 --> 00:04:43,890
of course, just say tim.backward by, um,

17016
00:04:43,920 --> 00:04:45,330
however many paces,

17017
00:04:45,750 --> 00:04:50,520
but thinking forward and knowing that I'm going to have six or seven of these

17018
00:04:50,520 --> 00:04:51,240
turtles,

17019
00:04:51,240 --> 00:04:54,720
I can't just tell them all to go backwards because they're going to go to the

17020
00:04:54,720 --> 00:04:59,660
same position. Instead, we're going to use a method that the turtle has

17021
00:04:59,710 --> 00:05:01,110
which is called goto.

17022
00:05:01,650 --> 00:05:06,210
And this allows us to define an X value and a Y value.

17023
00:05:06,600 --> 00:05:10,650
But how do we know what X and Y values to give it? Well,

17024
00:05:10,650 --> 00:05:14,640
we first have to understand how the Python turtle coordinate system works.

17025
00:05:14,970 --> 00:05:19,970
So if you imagine your program window as a graph where the center of it is at

17026
00:05:20,460 --> 00:05:22,740
the coordinate (0, 0). Well

17027
00:05:22,740 --> 00:05:27,330
then if you have a window that has a height of 400,

17028
00:05:27,690 --> 00:05:32,690
then that graph will have a Y-axis that extends from the center at zero all the

17029
00:05:34,590 --> 00:05:37,740
way up to the top edge and then from the middle

17030
00:05:37,740 --> 00:05:42,630
it goes down to the very bottom edge, which is going to be -200.

17031
00:05:42,840 --> 00:05:47,840
So 200 plus 200 makes up 400 and the same happens with the X-axis.

17032
00:05:49,500 --> 00:05:52,530
So if the width of the screen is 500, then

17033
00:05:52,750 --> 00:05:57,750
the X-axis goes from the center 0 to positive 250,

17034
00:05:58,310 --> 00:06:03,050
so half of 500. And then from zero to -250.

17035
00:06:03,470 --> 00:06:07,310
So here's a question. Let's say we wanted to move our turtle here.

17036
00:06:07,430 --> 00:06:10,370
What do you think would be the X and Y coordinate of that point?

17037
00:06:13,210 --> 00:06:14,350
Okay. So let's say

17038
00:06:14,460 --> 00:06:19,460
that this is roughly halfway on the X-axis and about halfway on the Y-axis.

17039
00:06:21,250 --> 00:06:26,250
Then half of 250 is 125 and half of 200 is 100.

17040
00:06:28,300 --> 00:06:33,300
So at this point would have the coordinate of 125 by 100.

17041
00:06:35,500 --> 00:06:40,210
If we wanted our turtle to go all the way to the left side of the screen

17042
00:06:40,420 --> 00:06:44,020
say maybe starting over here or starting over here, well,

17043
00:06:44,020 --> 00:06:45,520
then we would have to use that

17044
00:06:45,550 --> 00:06:50,550
goto method and then specify a X-value and a Y-value. Following the logic of the

17045
00:06:54,700 --> 00:06:59,560
total coordinate system then in order to move our turtle to the very left edge,

17046
00:06:59,800 --> 00:07:03,520
then we should supply an X-value of minus 250

17047
00:07:03,610 --> 00:07:05,770
which is half of the width of 500.

17048
00:07:06,400 --> 00:07:11,400
Now the Y-value will determine where on the Y-axis our turtle moves to.

17049
00:07:12,850 --> 00:07:14,500
So if we had it at zero

17050
00:07:14,500 --> 00:07:18,730
then it would basically just go straight backwards and it would not go up or

17051
00:07:18,730 --> 00:07:21,970
down. But let's say that we put it at, um,

17052
00:07:22,060 --> 00:07:26,260
-100. So now if I run this code,

17053
00:07:26,920 --> 00:07:29,170
you can see that it goes in the right direction,

17054
00:07:29,380 --> 00:07:31,180
but it's actually gone off the screen.

17055
00:07:31,510 --> 00:07:36,510
So what's happened here is that -250 is on the very,

17056
00:07:36,730 --> 00:07:38,530
very edge of the window.

17057
00:07:38,890 --> 00:07:42,910
And once our turtle moves over there and the arrow is at the back,

17058
00:07:43,150 --> 00:07:45,160
then you can't actually see it at all.

17059
00:07:45,400 --> 00:07:50,320
So let's try changing that X-value and shifting our turtle a little bit more to

17060
00:07:50,320 --> 00:07:55,270
the right. Then you can see it moves to pretty much the start of the window.

17061
00:07:55,840 --> 00:08:00,840
So I recommend using this goto method and trying out some different numbers

17062
00:08:02,170 --> 00:08:04,570
just to see where it ends up on the screen.

17063
00:08:05,080 --> 00:08:07,300
And once you put in some different numbers in here,

17064
00:08:07,510 --> 00:08:11,350
you'll start to get the hang of how this coordinate system actually works.

17065
00:08:11,740 --> 00:08:15,280
But just remember that the X-axis is along the horizontal.

17066
00:08:15,580 --> 00:08:18,790
It goes from zero to positive and zero to negative.

17067
00:08:19,120 --> 00:08:21,790
And then the Y-axis is along the vertical,

17068
00:08:21,820 --> 00:08:24,940
going from zero to positive and zero to negative.

17069
00:08:25,930 --> 00:08:30,930
So we want to get rid of this line and we don't actually want our turtle to draw

17070
00:08:31,660 --> 00:08:36,549
at all. So to do that, we're going to do tim.penup,

17071
00:08:37,000 --> 00:08:40,299
and we're actually never going to put the pen down because we're going to be

17072
00:08:40,299 --> 00:08:42,130
moving the turtle itself.

17073
00:08:42,640 --> 00:08:46,360
And the other thing is that it would be really nice if instead of an arrow,

17074
00:08:46,360 --> 00:08:48,250
we actually got a turtle.

17075
00:08:48,640 --> 00:08:53,640
So we can of course say tim.shape and set it to a turtle shape,

17076
00:08:54,960 --> 00:08:59,370
but here's an even easier way. When we create a new turtle,

17077
00:08:59,700 --> 00:09:01,770
look at the prompt that it's giving us.

17078
00:09:02,040 --> 00:09:07,040
It's actually giving us a way to initialize a new turtle object already with a

17079
00:09:08,730 --> 00:09:09,720
shape set up.

17080
00:09:10,230 --> 00:09:14,130
Now this shape is set to have a default value

17081
00:09:14,160 --> 00:09:15,600
which is basically the arrow.

17082
00:09:16,020 --> 00:09:21,020
But we can also specify the shape and give it the turtle shape to begin with.

17083
00:09:23,580 --> 00:09:27,570
Now, when I run the code you can see that firstly,

17084
00:09:27,990 --> 00:09:32,990
I get a turtle shape and then the pen is up and I'm not drawing

17085
00:09:33,120 --> 00:09:37,980
and then it moves to this place on the graph; -230, -100.

17086
00:09:38,880 --> 00:09:43,880
So now the next thing we want to do is to be able to create lots of turtles,

17087
00:09:44,430 --> 00:09:45,263
right?

17088
00:09:45,420 --> 00:09:50,420
What if we had all of the colors in the rainbow and we create a turtle for each

17089
00:09:51,420 --> 00:09:52,253
color?

17090
00:09:52,290 --> 00:09:56,580
So there's six colors in this list and these of course,

17091
00:09:56,670 --> 00:10:00,600
correspond to the colors which turtle will recognize.

17092
00:10:01,050 --> 00:10:02,760
So here's a challenge for you.

17093
00:10:03,330 --> 00:10:06,360
I want you to create six turtles,

17094
00:10:06,840 --> 00:10:10,050
one for each of the colors in this list of colors.

17095
00:10:10,320 --> 00:10:15,320
You're aiming for the turtles to all go to the starting line in a distribution

17096
00:10:15,960 --> 00:10:19,350
that looks something like this. It doesn't have to be precise,

17097
00:10:19,380 --> 00:10:21,150
you don't have to get it perfectly right.

17098
00:10:21,480 --> 00:10:25,980
But just make sure that they're sort of evenly spaced out and they are at the

17099
00:10:25,980 --> 00:10:30,570
starting line. So this is what you're aiming for; six turtles, six colors,

17100
00:10:30,600 --> 00:10:34,650
all starting at the starting point along a different point on the Y axis.

17101
00:10:35,340 --> 00:10:36,780
Pause the video and give that a go.

17102
00:10:39,060 --> 00:10:41,610
So we know that in order to create lots of turtles,

17103
00:10:41,670 --> 00:10:43,920
we're going to need some sort of a loop.

17104
00:10:44,370 --> 00:10:49,370
So let's go ahead and use a for loop to say turtle_index

17105
00:10:50,130 --> 00:10:55,130
and we're going to create a range to specify how many turtles we need.

17106
00:10:56,730 --> 00:11:00,900
Our range function will go from 0 to 6.

17107
00:11:01,380 --> 00:11:05,880
And remember that the range function actually doesn't include the number six,

17108
00:11:05,910 --> 00:11:10,890
so it'll create a range from 0 to 5. And once we've done that,

17109
00:11:10,890 --> 00:11:15,890
then we can indent this block of code so that we create six turtles.

17110
00:11:17,160 --> 00:11:19,650
But at the moment, they're all going to the same position.

17111
00:11:20,790 --> 00:11:23,220
So how can we change this? Well,

17112
00:11:23,580 --> 00:11:27,900
we want the X-position to always be the same for all the turtles,

17113
00:11:27,960 --> 00:11:31,260
because the X-position is along the horizontal axis

17114
00:11:31,410 --> 00:11:34,680
and we want all the turtles to start at the starting point.

17115
00:11:35,010 --> 00:11:39,780
Nobody gets a headstart. But the Y-position is the thing that we want to change.

17116
00:11:40,290 --> 00:11:45,290
A really simple way of doing this is to simply create a list of Y-positions

17117
00:11:46,650 --> 00:11:50,400
and you can work out some sort of reasonable position that you want to take.

17118
00:11:50,670 --> 00:11:55,660
So let's say we start out at -70 and then we just increased by 30 each

17119
00:11:55,660 --> 00:11:56,380
time.

17120
00:11:56,380 --> 00:12:01,380
So then that becomes -40 and then -10 and then 20,

17121
00:12:01,720 --> 00:12:04,000
50 and 80.

17122
00:12:04,060 --> 00:12:08,410
So it's roughly distributed somewhere along the middle. Now,

17123
00:12:08,410 --> 00:12:11,380
instead of using this Y-position

17124
00:12:11,380 --> 00:12:13,630
which is hardcoded -100,

17125
00:12:14,020 --> 00:12:19,020
we're going to take the Y-positions and then pass in our turtle_index like

17126
00:12:19,080 --> 00:12:21,900
this. So now when we rerun this code,

17127
00:12:21,960 --> 00:12:24,270
you can see that for each of the turtles

17128
00:12:24,300 --> 00:12:27,060
they're all going to get an individual Y-position

17129
00:12:27,450 --> 00:12:30,660
and they're all separated by 30 in distance.

17130
00:12:31,080 --> 00:12:34,650
Now we've got our turtles neatly lined up at the starting point.

17131
00:12:34,950 --> 00:12:37,530
The next thing is to give them a different color.

17132
00:12:37,650 --> 00:12:42,030
So we're going to use the list of colors and then picking out the color using

17133
00:12:42,090 --> 00:12:43,440
the turtle_index.

17134
00:12:43,770 --> 00:12:48,770
So now we should get some multicolored turtles and it will be much easier to bet

17135
00:12:49,830 --> 00:12:53,280
on a turtle. So now that we have our turtle race

17136
00:12:53,340 --> 00:12:55,020
all set up and ready to go,

17137
00:12:55,350 --> 00:12:58,890
the next step is to actually get the turtles to start moving.

17138
00:12:59,310 --> 00:13:00,750
But before we can do that,

17139
00:13:00,840 --> 00:13:05,840
I really want you to get a good grasp of how the coordinate system works in

17140
00:13:05,940 --> 00:13:08,220
turtle. So in the next lesson,

17141
00:13:08,310 --> 00:13:11,850
I've got a quick quiz for you just to make sure that you really understand

17142
00:13:11,880 --> 00:13:12,930
what's going on here.


17143
00:00:00,030 --> 00:00:01,140
In the last lesson,

17144
00:00:01,170 --> 00:00:06,170
we figured out how we can get our turtle race up and running and get our turtles

17145
00:00:06,930 --> 00:00:09,270
at the starting positions. Now,

17146
00:00:09,300 --> 00:00:13,980
the next job we have is to figure out how we can get these turtles to start

17147
00:00:14,010 --> 00:00:18,150
moving. The movement is going to have to be randomized

17148
00:00:18,540 --> 00:00:23,540
and each step they take will have to be a random number. That way they don't go

17149
00:00:23,580 --> 00:00:24,690
straight to the end

17150
00:00:24,960 --> 00:00:28,620
and we end up with a terrible gaming experience.

17151
00:00:29,190 --> 00:00:33,360
So what we're going to do is we're going to create a random number,

17152
00:00:33,390 --> 00:00:36,000
let's say between 0 and 10,

17153
00:00:36,450 --> 00:00:40,860
and then we're going to tell the turtle to go forward by that random amount.

17154
00:00:40,860 --> 00:00:43,230
So it could be anywhere between 0 and 10.

17155
00:00:43,950 --> 00:00:47,490
And then we're going to get this to repeat itself many, many times.

17156
00:00:48,840 --> 00:00:49,740
As you might've guessed,

17157
00:00:49,770 --> 00:00:52,740
this is probably going to involve some sort of while loop.

17158
00:00:53,160 --> 00:00:58,160
So let's say we start out with a variable called is_race_on and it starts out as

17159
00:00:59,460 --> 00:01:00,293
false.

17160
00:01:00,570 --> 00:01:05,570
But then once the user has made their bet and we can check to see

17161
00:01:05,880 --> 00:01:10,170
user_bet exists, then in that case

17162
00:01:10,230 --> 00:01:13,800
we're going to switch that is_race_on to true.

17163
00:01:16,050 --> 00:01:20,430
And then we can use our is_race_on inside our while loop.

17164
00:01:20,910 --> 00:01:25,910
Now this way we prevent our while loop from starting up while the user is still

17165
00:01:25,980 --> 00:01:28,920
deciding on which turtle they're going to bet on.

17166
00:01:29,160 --> 00:01:31,020
So it doesn't start prematurely.

17167
00:01:31,710 --> 00:01:36,480
Now when the user has made their bet and the race is now on, well

17168
00:01:36,480 --> 00:01:40,080
now we're going to need to get hold of a random number.

17169
00:01:43,130 --> 00:01:48,130
We're going to use the random module to get hold of a random int between the

17170
00:01:49,430 --> 00:01:52,220
range of 0 and 10.

17171
00:01:52,610 --> 00:01:55,250
Now randint is actually inclusive,

17172
00:01:55,250 --> 00:01:59,060
so the random number could be zero all the way up to 10.

17173
00:01:59,780 --> 00:02:03,740
So now we're gonna call this the rand_distance,

17174
00:02:04,520 --> 00:02:09,520
and this is going to be the distance that one of our turtles is going to move

17175
00:02:09,949 --> 00:02:10,580
forwards by.

17176
00:02:10,580 --> 00:02:15,580
So we want some sort of turtle.forward and the distance that it goes forward

17177
00:02:18,350 --> 00:02:20,030
is the random distance.

17178
00:02:20,750 --> 00:02:23,720
Now we have lots of turtles that we've created,

17179
00:02:24,050 --> 00:02:26,240
but we kind of haven't really done anything with them.

17180
00:02:26,690 --> 00:02:31,280
What we want to do instead is to have some sort of list of turtle.

17181
00:02:31,310 --> 00:02:33,380
So we'll call all_turtles,

17182
00:02:34,070 --> 00:02:36,350
and this list starts out as empty.

17183
00:02:36,740 --> 00:02:39,290
But every single time we create a new turtle,

17184
00:02:39,560 --> 00:02:43,970
then we can append that turtle to this list. So at this stage,

17185
00:02:44,000 --> 00:02:47,870
it doesn't really make sense to call all the turtles tim anymore, right?

17186
00:02:47,870 --> 00:02:50,900
Because they're all going to be individual instances.

17187
00:02:51,470 --> 00:02:56,470
So let's go ahead and refactor and rename this to a new_turtle.

17188
00:02:58,900 --> 00:03:03,900
And now what's happening in our for loop is we're creating a new turtle and

17189
00:03:04,060 --> 00:03:09,060
each of those new turtles are going to be appended to our all_turtles list.

17190
00:03:11,320 --> 00:03:15,730
So now we're going to have a list of multiple turtle instances,

17191
00:03:16,270 --> 00:03:20,260
and each of those instances is going to have a different state.

17192
00:03:20,530 --> 00:03:21,490
So for example,

17193
00:03:21,520 --> 00:03:25,780
they already start out with a different Y-position and a different color.

17194
00:03:26,320 --> 00:03:27,340
But later on,

17195
00:03:27,400 --> 00:03:31,600
we're also going to get them to move forwards by a different amount.

17196
00:03:32,170 --> 00:03:35,560
So we can loop through our list of turtles,

17197
00:03:35,590 --> 00:03:38,080
so for turtle in all_turtles,

17198
00:03:40,980 --> 00:03:45,980
let's go ahead and create a random distance for each of them and then move that

17199
00:03:46,740 --> 00:03:49,320
turtle forward by the random distance.

17200
00:03:49,860 --> 00:03:52,050
So now if we run our code

17201
00:03:53,670 --> 00:03:55,200
and see it in action,

17202
00:03:55,620 --> 00:03:59,580
you can see that once all of the turtles have gone into their starting

17203
00:03:59,580 --> 00:04:04,560
positions, they stop creeping along each time by a different amount.

17204
00:04:08,190 --> 00:04:12,990
Now, however, our turtles are actually going to keep going until forever.

17205
00:04:13,110 --> 00:04:16,140
It's basically a loop that's never going to stop.

17206
00:04:16,620 --> 00:04:20,700
So let's think about what the stopping conditions should be. Well,

17207
00:04:20,730 --> 00:04:25,730
once any of these turtles have actually reached the end of the screen

17208
00:04:26,730 --> 00:04:31,170
which is the X-value of +250,

17209
00:04:31,170 --> 00:04:35,820
once they've reached this line, then that's kind of the end of the race,

17210
00:04:35,850 --> 00:04:36,683
right?

17211
00:04:36,990 --> 00:04:41,490
But a turtle object is a 40 by 40 object.

17212
00:04:41,910 --> 00:04:45,390
So if we're only detecting for the 250,

17213
00:04:45,660 --> 00:04:48,390
then our turtle would have already overshot.

17214
00:04:48,480 --> 00:04:53,480
So instead, we want to detect when the turtle has reached the 230 mark. Back in our

17215
00:04:55,230 --> 00:04:56,700
code in our for-loop,

17216
00:04:57,060 --> 00:05:01,620
we can check to see if the turtle that we're currently looping through,

17217
00:05:02,190 --> 00:05:07,190
if it's X-coordinate is greater than 

17218
00:05:09,210 --> 00:05:13,710
230. Well, in this case, it's basically won.

17219
00:05:14,190 --> 00:05:15,510
Now at this stage,

17220
00:05:15,600 --> 00:05:19,890
if we print this current turtle's color,

17221
00:05:20,340 --> 00:05:23,370
then you'll actually see something a little bit strange.

17222
00:05:25,530 --> 00:05:27,360
You can see that firstly,

17223
00:05:27,360 --> 00:05:31,890
it prints multiple values because the while loop is still continuing and the

17224
00:05:31,890 --> 00:05:34,020
other turtles continue to go forward.

17225
00:05:34,470 --> 00:05:37,770
But the first value is going to be the turtle that won.

17226
00:05:38,340 --> 00:05:41,370
And you can see it prints yellow and yellow.

17227
00:05:41,880 --> 00:05:45,840
So what's going on here? Well, if we look at this color method,

17228
00:05:45,930 --> 00:05:50,790
you can see that you can either use it to set the pen color and fill color,

17229
00:05:51,090 --> 00:05:54,720
or it will return the pen color and fill color.

17230
00:05:55,170 --> 00:05:56,940
So when it prints out two colors,

17231
00:05:57,650 --> 00:06:01,430
the first one is going to be the pen color and the second is going to be the

17232
00:06:01,430 --> 00:06:05,720
fill color. So if we only want to know the pen color,

17233
00:06:06,050 --> 00:06:10,910
then we can just get hold of the turtle.pencolor.

17234
00:06:10,970 --> 00:06:15,290
This is going to be the color of the body of the turtle. So in our code,

17235
00:06:15,320 --> 00:06:20,320
we can say that the winning color is equal to the current turtle.pencolor.

17236
00:06:25,100 --> 00:06:30,100
And then we can now check to see if the winning color is equal to the user's

17237
00:06:31,100 --> 00:06:35,420
bet, because if this is the case, well then the user has won, right?

17238
00:06:35,450 --> 00:06:38,090
So we can tell them you've won.

17239
00:06:38,330 --> 00:06:41,300
And then we can tell them the color of the winning turtle.

17240
00:06:44,200 --> 00:06:45,070
Now, however,

17241
00:06:45,070 --> 00:06:49,480
if this is false or rather in the else statement,

17242
00:06:49,870 --> 00:06:53,140
well, in that case, we're going to have to print the same thing

17243
00:06:53,470 --> 00:06:56,770
but now we're going to tell them that they've lost.

17244
00:06:59,020 --> 00:06:59,410
Yeah.

17245
00:06:59,410 --> 00:07:03,790
Finally, when the first turtle reaches the X-coordinate,

17246
00:07:03,790 --> 00:07:06,160
when this first color gets printed,

17247
00:07:06,280 --> 00:07:09,160
we want to stop the while loop. This way

17248
00:07:09,160 --> 00:07:12,490
the remaining turtles don't continue to nudge forward

17249
00:07:12,790 --> 00:07:17,170
and we get end up with lots of winners like this. So inside this

17250
00:07:17,200 --> 00:07:21,520
if statement, when the turtle's X-coordinate has surpassed 230,

17251
00:07:21,820 --> 00:07:25,390
we're going to change the is_race_on to false.

17252
00:07:26,020 --> 00:07:30,190
Now we're ready to test out our code. And again,

17253
00:07:30,190 --> 00:07:34,390
I'm going to bet on the red turtle and I'm going to speed up the playback speed

17254
00:07:34,420 --> 00:07:36,640
of this race when I'm editing this video.

17255
00:07:37,240 --> 00:07:42,240
And now the game has ended and you can see that the blue turtle is the one that

17256
00:07:42,760 --> 00:07:44,920
first got its head across the finish line.

17257
00:07:45,460 --> 00:07:50,260
And it tells me just as much. I've lost and the blue turtle is the winner.

17258
00:07:51,070 --> 00:07:56,070
So we've now used Python turtle to build a very simple turtle racing game.

17259
00:07:56,680 --> 00:08:01,680
And we're starting to use these X and Y positions in the turtle coordinate

17260
00:08:02,350 --> 00:08:06,520
system. Now, these coordinates take a little bit of getting used to,

17261
00:08:06,850 --> 00:08:11,850
especially thinking about things such as if a turtle is 40 pixels wide,

17262
00:08:12,160 --> 00:08:14,770
then in order to get the turtle to the starting line

17263
00:08:14,980 --> 00:08:19,300
we have to subtract half of the width of the turtle, which is 20.

17264
00:08:19,540 --> 00:08:23,350
So then 250 minus 20 becomes 230.

17265
00:08:23,680 --> 00:08:26,740
And it's things like this that takes a little bit of getting used to.

17266
00:08:27,220 --> 00:08:31,480
So what I really recommend is to have a play around with these values,

17267
00:08:31,750 --> 00:08:36,429
make it smaller, or make it larger, change the size of the screen.

17268
00:08:36,730 --> 00:08:41,049
And just until you're really familiar with how the coordinate system works

17269
00:08:41,080 --> 00:08:44,620
before you proceed to the next lesson, because as you keep going,

17270
00:08:44,620 --> 00:08:48,160
I'm going to presume that you've already had a play around with it and you know

17271
00:08:48,160 --> 00:08:50,560
exactly how it works. Now,

17272
00:08:50,590 --> 00:08:55,150
the other thing that we saw a lot of in this project is this concept of having

17273
00:08:55,380 --> 00:08:59,700
multiple objects created from the same class. So in this case,

17274
00:08:59,700 --> 00:09:04,590
we're using the turtle class to construct a turtle object called Timmy,

17275
00:09:04,860 --> 00:09:09,860
but we've also got a separate object called Tommy. And Timmy and Tommy are both

17276
00:09:10,020 --> 00:09:14,900
Tuttle objects, but they're different instances. So they can act independently,

17277
00:09:14,900 --> 00:09:18,110
they can have different appearances, they can have different colors,

17278
00:09:18,110 --> 00:09:21,380
different attributes, and also a different speed of movement.

17279
00:09:21,830 --> 00:09:26,830
So we've seen in our turtle race that each of these instances can act of their

17280
00:09:27,140 --> 00:09:29,690
own accord and have different state.

17281
00:09:29,930 --> 00:09:33,860
And that's shown in the different speed of movement and this capability of

17282
00:09:33,860 --> 00:09:37,580
creating multiple objects which can act and behave independently

17283
00:09:37,880 --> 00:09:42,590
is really the secret to why Object Oriented Programming can be so

17284
00:09:42,590 --> 00:09:43,423
powerful.

17285
00:09:43,550 --> 00:09:48,050
We can create so many of these objects and get them to do our bidding in various

17286
00:09:48,050 --> 00:09:50,480
parts of our program. And in the coming lessons

17287
00:09:50,510 --> 00:09:52,970
as we build more and more complex projects,

17288
00:09:53,270 --> 00:09:58,130
you'll see this concept of having multiple instances with different state being

17289
00:09:58,130 --> 00:10:02,060
shown again and again. And we're going to come to see and enjoy the benefits.



17290
00:00:00,510 --> 00:00:04,010
Hey guys, welcome to Day 20 of 100

17291
00:00:04,010 --> 00:00:05,560
Days of Code. Today

17292
00:00:05,680 --> 00:00:09,200
is really exciting because we're going to be using the knowledge that we've

17293
00:00:09,200 --> 00:00:11,630
gained about Object Oriented Programming

17294
00:00:11,990 --> 00:00:16,370
as well as what we learned about how to use the turtle module to build the

17295
00:00:16,370 --> 00:00:18,830
famous snake game. Now,

17296
00:00:18,830 --> 00:00:22,430
this is probably one of the most famous mobile games that ever was,

17297
00:00:22,490 --> 00:00:27,490
and it's definitely one of my favorite. And my history with it goes back all the

17298
00:00:28,760 --> 00:00:32,390
way to my very first mobile phone,

17299
00:00:32,420 --> 00:00:37,280
the Nokia 3310. It might be showing my age a little bit here,

17300
00:00:37,340 --> 00:00:40,580
but this was my first ever mobile phone.

17301
00:00:40,890 --> 00:00:45,830
I remember loving it so much that I actually had it next to my pillow when I

17302
00:00:45,830 --> 00:00:50,180
went to sleep. And this was probably one of the first affordable mobile phones.

17303
00:00:50,270 --> 00:00:55,270
And it was endlessly customizable with different cases and different keys.

17304
00:00:56,360 --> 00:00:58,640
But the most exciting thing about it

17305
00:00:58,880 --> 00:01:01,090
was the snake game. I would compare

17306
00:01:01,190 --> 00:01:04,489
with my friends and see who got the highest score in snake

17307
00:01:04,730 --> 00:01:09,590
and we would spend days and days playing this game. And compared to the iPhone

17308
00:01:09,590 --> 00:01:14,060
games of today, of course, this was very, very simple, but nonetheless,

17309
00:01:14,060 --> 00:01:17,990
it is still super addictive. Over the next two days

17310
00:01:18,110 --> 00:01:22,700
this is the game that we're going to build. A snake game that has,

17311
00:01:22,760 --> 00:01:26,180
um, a moving snake, which you control using your keyboard,

17312
00:01:26,630 --> 00:01:29,030
and you can go and get food,

17313
00:01:29,300 --> 00:01:31,910
and then it grows in length as it eats more food.

17314
00:01:32,240 --> 00:01:35,480
And you have to make sure that you don't end up getting tangled or hitting the

17315
00:01:35,480 --> 00:01:36,170
wall.

17316
00:01:36,170 --> 00:01:40,940
And the goal is to eat as much food as you can while staying alive.

17317
00:01:41,600 --> 00:01:45,350
There are some people who are truly masters at this game, um,

17318
00:01:45,410 --> 00:01:47,420
which I personally am not,

17319
00:01:47,780 --> 00:01:52,430
but they managed to get their snakes to crazy lengths and start having these

17320
00:01:52,430 --> 00:01:57,430
strategies for how you can avoid hitting your tail and how you can keep going.

17321
00:01:58,100 --> 00:02:01,400
So once you've built your snake game, you'll be able to play with it,

17322
00:02:01,550 --> 00:02:04,700
and you'll be able to show off your high scores to the rest of us,

17323
00:02:04,910 --> 00:02:07,310
but I'm sure you're going to do a lot better than me.

17324
00:02:07,700 --> 00:02:10,850
It's not that hard to beat me at snake. As always,

17325
00:02:10,850 --> 00:02:13,040
when we're thinking about a complex problem

17326
00:02:13,070 --> 00:02:16,340
the first step is to break down the problem.

17327
00:02:16,940 --> 00:02:21,940
And I'm going to break down this problem of building the snake game into seven

17328
00:02:22,040 --> 00:02:23,150
separate steps.

17329
00:02:23,420 --> 00:02:26,660
And the way we're going to do it is we're going to tackle the first three steps

17330
00:02:26,660 --> 00:02:30,470
on Day 1 and the last four steps on Day 2.

17331
00:02:30,950 --> 00:02:34,730
So we're going to split up this game into two parts and we're going to tackle it

17332
00:02:34,760 --> 00:02:39,680
over two days. The first step is to create a snake body,

17333
00:02:40,070 --> 00:02:43,880
and we're going to do that by creating three squares on the screen,

17334
00:02:44,270 --> 00:02:45,950
all lined up next to each other.

17335
00:02:46,760 --> 00:02:51,290
And then we're going to figure out how to move the snake so that it continuously

17336
00:02:51,290 --> 00:02:52,250
moves forward

17337
00:02:52,460 --> 00:02:57,170
and all we have to do is tell it to change direction. Afterwards,

17338
00:02:57,230 --> 00:03:01,300
we're going to figure out how to control the snake using keyboard controls.

17339
00:03:01,570 --> 00:03:06,570
So we're going to be using the up, left, down, and right arrow keys to move our

17340
00:03:07,240 --> 00:03:08,680
snake across the screen.

17341
00:03:09,070 --> 00:03:12,520
And that is what we're aiming for by the end of today,

17342
00:03:12,520 --> 00:03:14,920
Day 20. On Day 21,

17343
00:03:15,070 --> 00:03:18,340
we're going to continue and we're going to build out the last four steps of the

17344
00:03:18,340 --> 00:03:19,173
snake game.

17345
00:03:19,630 --> 00:03:24,100
Then we'll need to start putting some food onto the screen and started to detect

17346
00:03:24,100 --> 00:03:28,210
the collision with the food so that once the snake hits the food,

17347
00:03:28,450 --> 00:03:33,400
then a new piece of food gets created randomly on the screen at some sort of

17348
00:03:33,520 --> 00:03:34,570
random location.

17349
00:03:35,410 --> 00:03:40,240
And then it's a matter of keeping track of the score and creating a scoreboard.

17350
00:03:40,510 --> 00:03:45,430
So we're going to learn how to write text in our program so that once the snake

17351
00:03:45,430 --> 00:03:48,970
hits a piece of food, the score automatically updates.

17352
00:03:49,480 --> 00:03:52,870
And then next we're going to figure out when the game should end.

17353
00:03:53,020 --> 00:03:58,020
So one of the cases when the game should end is when the snake has collided with

17354
00:03:58,480 --> 00:04:02,470
the wall. And at this point we should see game over,

17355
00:04:02,470 --> 00:04:06,430
show up on screen and the snake should no longer move.

17356
00:04:06,910 --> 00:04:08,140
And then finally,

17357
00:04:08,200 --> 00:04:12,880
the other reason why our game could end is when the snake has collided with its

17358
00:04:12,880 --> 00:04:17,470
own tail. So the snake basically can't chase his own tail.

17359
00:04:17,740 --> 00:04:21,610
And as the snake gets longer, this problem is more likely to occur.

17360
00:04:22,060 --> 00:04:26,500
And when their head hits any part of the body of the snake, then it's again,

17361
00:04:26,560 --> 00:04:29,860
game over. So these are the seven steps

17362
00:04:29,890 --> 00:04:32,040
that it takes to create the snake game.

17363
00:04:32,670 --> 00:04:37,440
And once you're ready, we're gonna get started with step one on the next lesson.

17364
00:04:37,650 --> 00:04:38,340
So I'll see you there.


17365
00:00:00,330 --> 00:00:01,650
So to start off,

17366
00:00:01,740 --> 00:00:06,210
go ahead and create a new project called snake_game in PyCharm.

17367
00:00:06,870 --> 00:00:11,340
And then inside this project, we're going to create a new main.py file.

17368
00:00:12,450 --> 00:00:16,500
And inside our file, we're going to need our normal imports.

17369
00:00:16,860 --> 00:00:21,860
So I'm going to say from turtle import the screen class and also the turtle

17370
00:00:24,120 --> 00:00:25,890
class. Now,

17371
00:00:25,920 --> 00:00:29,880
the first thing we're going to do is we're going to create a new screen,

17372
00:00:29,940 --> 00:00:32,820
which is basically going to be the window that shows up.

17373
00:00:33,390 --> 00:00:38,390
And then we're going to set up our screen so that it is 600 by 600.

17374
00:00:40,380 --> 00:00:45,380
So the width is going to be 600 pixels and the height is also going to be 600

17375
00:00:47,310 --> 00:00:51,780
pixels. And notice how I'm using these keyword arguments

17376
00:00:51,810 --> 00:00:55,530
so that it's a little bit clearer to the next person looking at this code

17377
00:00:55,770 --> 00:00:58,290
what's actually happening here. Now,

17378
00:00:58,320 --> 00:01:01,770
the other thing I want to change is the screen's background color.

17379
00:01:02,160 --> 00:01:06,570
So there's a method called bgcolor and inside here

17380
00:01:06,570 --> 00:01:11,310
we're going to write the text black so that we end up with a black screen.

17381
00:01:11,880 --> 00:01:12,300
Now,

17382
00:01:12,300 --> 00:01:17,300
another thing that you might not have seen before is how to set the title of

17383
00:01:17,340 --> 00:01:21,600
the window that shows up. And we do that through a method called title,

17384
00:01:21,870 --> 00:01:26,430
and you can name your program here. So I'm going to call it 'My Snake Game',

17385
00:01:26,790 --> 00:01:30,870
but you can of course call it whatever it is you want. Now finally,

17386
00:01:30,870 --> 00:01:35,550
at the very bottom of the file, I'm going to say screen.exitonclick.

17387
00:01:35,790 --> 00:01:40,050
So this way, when I actually run it, it doesn't just disappear straight away

17388
00:01:40,770 --> 00:01:44,640
and it waits for me and I can look at what's actually happened so far.

17389
00:01:45,090 --> 00:01:49,230
So I'm going to click run and then select my main file.

17390
00:01:49,680 --> 00:01:51,000
And once it pops up,

17391
00:01:51,030 --> 00:01:56,030
this is what you should see, a 600 by 600 square window

17392
00:01:56,520 --> 00:01:59,880
and then at the top of the window, you'll see the name of your program,

17393
00:01:59,910 --> 00:02:04,620
which is My Snake Game. And the background is now black.

17394
00:02:05,640 --> 00:02:07,500
Now that we've set up our screen,

17395
00:02:07,530 --> 00:02:11,039
we're ready to tackle the first of our seven steps,

17396
00:02:11,340 --> 00:02:13,500
which is to create a snake body.

17397
00:02:14,160 --> 00:02:17,520
And we're going to create three squares

17398
00:02:17,610 --> 00:02:19,590
which are each going to be turtles,

17399
00:02:19,830 --> 00:02:24,090
and they're going to be lined up next to each other along the horizontal axis.

17400
00:02:24,210 --> 00:02:28,020
So let's think about this. When we create a new turtle,

17401
00:02:28,290 --> 00:02:33,290
it has a dimension of 20 pixels wide by 20 pixels tall.

17402
00:02:34,530 --> 00:02:38,100
And if we want three of them lined up next to each other,

17403
00:02:38,370 --> 00:02:43,050
then we have to think about how we create their coordinates. As a challenge,

17404
00:02:43,170 --> 00:02:46,260
I want you to think about how we can create this. Here

17405
00:02:46,260 --> 00:02:48,990
we have three separate squares

17406
00:02:49,050 --> 00:02:54,050
which are each a turtle object and they're shaped like a square and they have a

17407
00:02:54,330 --> 00:02:57,420
white color. Now, they're positioned

17408
00:02:57,450 --> 00:03:00,130
so that the first one is (0, 0),

17409
00:03:00,490 --> 00:03:04,810
the next one is 20 pixels to the left and the next one is again

17410
00:03:04,870 --> 00:03:08,920
20 pixels to the left so that none of the squares overlap with each other,

17411
00:03:09,100 --> 00:03:12,940
but there's also no gaps. So it looks like a whole snake.

17412
00:03:13,510 --> 00:03:14,980
This is your challenge

17413
00:03:15,160 --> 00:03:18,820
and you might have to think about a few of the things that we've done before in

17414
00:03:18,820 --> 00:03:22,450
order to achieve this. So browse the documentation,

17415
00:03:22,810 --> 00:03:26,650
look back to the previous code that you've written and see if you can solve this

17416
00:03:26,650 --> 00:03:28,240
challenge. Pause the video now.

17417
00:03:32,590 --> 00:03:32,980
Alright.

17418
00:03:32,980 --> 00:03:37,060
So the first thing we're going to need to do is to create some sort of turtle,

17419
00:03:37,060 --> 00:03:37,660
right?

17420
00:03:37,660 --> 00:03:42,660
So let's call this segment_1 and this is going to be a new turtle.

17421
00:03:43,150 --> 00:03:45,880
And remember that when we initialize the turtle,

17422
00:03:46,090 --> 00:03:48,310
we can already specify the shape.

17423
00:03:48,580 --> 00:03:51,850
So we can either say shape = "square",

17424
00:03:51,940 --> 00:03:56,740
or simply just leave it as square. So now at this point,

17425
00:03:56,740 --> 00:04:01,150
we should end up with a square turtle, but because it's black,

17426
00:04:01,180 --> 00:04:04,630
when we run the code, we won't actually see it on screen.

17427
00:04:05,140 --> 00:04:09,970
So let's change this segment color to white.

17428
00:04:10,570 --> 00:04:14,920
And all we have to do is write the word for the color

17429
00:04:15,370 --> 00:04:18,279
and now when we rerun our code,

17430
00:04:18,339 --> 00:04:22,330
you can see a white square at the center,

17431
00:04:22,360 --> 00:04:24,790
which is at position (0, 0).

17432
00:04:25,690 --> 00:04:30,690
Now the next step is to create our other two white squares.

17433
00:04:32,290 --> 00:04:35,560
So let's go ahead and copy these bits of code,

17434
00:04:36,070 --> 00:04:39,340
and I'm going to create three of them in total.

17435
00:04:39,340 --> 00:04:43,300
So segment_2 and segment_3.

17436
00:04:45,130 --> 00:04:47,860
Now here, we're going to create the same thing,

17437
00:04:48,040 --> 00:04:52,600
but we obviously have to change the positioning because otherwise we end up with

17438
00:04:52,630 --> 00:04:55,000
three squares all on top of each other,

17439
00:04:55,030 --> 00:04:58,960
and we can only see one square because this is a 2-D image.

17440
00:04:59,530 --> 00:05:04,530
So let's go ahead and make segment_2 go to a different position.

17441
00:05:05,320 --> 00:05:09,070
So the first thing we have to specify is the X,

17442
00:05:09,220 --> 00:05:12,790
which you remember is the horizontal axis here.

17443
00:05:13,030 --> 00:05:15,550
And if we want another square to the left of it,

17444
00:05:15,970 --> 00:05:20,970
then we're going to have to go to -20 from zero.

17445
00:05:21,550 --> 00:05:25,240
That way it will be shifted to the left by 20 pixels.

17446
00:05:25,840 --> 00:05:28,750
Let's say go to -20

17447
00:05:29,110 --> 00:05:32,650
and then the Y-axis is going to be zero because it's not going to move up or

17448
00:05:32,650 --> 00:05:33,483
down.

17449
00:05:33,640 --> 00:05:38,200
Now let's take a look at the result of this and you can see we've now got two

17450
00:05:38,200 --> 00:05:40,210
squares lining side by side,

17451
00:05:40,540 --> 00:05:43,990
but the third square is still at the center.

17452
00:05:44,620 --> 00:05:49,030
So the third segment is going to be shifted a further 20 pixels.

17453
00:05:49,390 --> 00:05:54,310
This is centered on (0, 0), this is at (-20, 0),

17454
00:05:54,610 --> 00:05:57,100
then this has to be at (-40, 0).

17455
00:05:57,350 --> 00:06:01,700
So let's tell our segment_3 to go to (-40, 0).

17456
00:06:02,150 --> 00:06:03,800
And this is what we see.

17457
00:06:04,190 --> 00:06:08,810
Did you manage to achieve this or did you do it in a different way? Now,

17458
00:06:08,900 --> 00:06:13,700
a much easier way of creating this would have been to use a for loop.

17459
00:06:14,090 --> 00:06:14,990
For example, we

17460
00:06:15,250 --> 00:06:17,340
could have created a list of

17461
00:06:17,480 --> 00:06:18,940
starting positions

17462
00:06:20,860 --> 00:06:24,370
and this could contain some tuples.

17463
00:06:24,850 --> 00:06:29,850
So we know that in order to specify where the segment should go to,

17464
00:06:30,280 --> 00:06:34,240
we have to provide a tuple, which is a X and a Y value.

17465
00:06:34,840 --> 00:06:39,220
And we know that we can create a tuple just by using a set of parentheses and

17466
00:06:39,220 --> 00:06:42,130
then adding values in there, separated by commas.

17467
00:06:42,610 --> 00:06:46,990
So if the first segment has to be at the center, then that's going to be 

17468
00:06:46,990 --> 00:06:51,910
(0, 0), and then the second piece is going to be at (-20, 0),

17469
00:06:52,510 --> 00:06:55,720
and the third piece is going to be at (-40, 0).

17470
00:06:56,410 --> 00:06:57,780
Now we can create

17471
00:06:57,940 --> 00:07:00,100
a for loop. So for

17472
00:07:00,370 --> 00:07:03,040
position in starting_positions,

17473
00:07:03,490 --> 00:07:08,490
let's loop through this list and create a new segment for each of those

17474
00:07:09,490 --> 00:07:13,870
positions. So now we're going to create a new segment

17475
00:07:13,870 --> 00:07:16,360
that's a square turtle, that's going to be white,

17476
00:07:16,750 --> 00:07:21,750
and we're going to get the segment to go to the position that we're currently

17477
00:07:21,940 --> 00:07:25,570
looping on. Now we can delete all of that code

17478
00:07:25,900 --> 00:07:30,370
and when we run our code again, you can see we have the same effect.

17479
00:07:30,400 --> 00:07:35,380
We have all three pieces. So if you can't remember how tuples work,

17480
00:07:35,620 --> 00:07:38,890
be sure to go back to the lessons on tuples in Day 18,

17481
00:07:39,220 --> 00:07:42,040
where we talked about how to write them and how they work.

17482
00:07:42,760 --> 00:07:45,070
But that completes our first step.

17483
00:07:45,280 --> 00:07:50,280
We've managed to create three segments that will comprise our snake

17484
00:07:50,650 --> 00:07:51,910
and in the next lesson,

17485
00:07:51,940 --> 00:07:55,690
we're going to figure out how to get our snake to start moving by itself on the

17486
00:07:55,690 --> 00:07:59,380
screen. So for all of that and more, I'll see you on the next lesson.


17487
00:00:00,630 --> 00:00:05,630
In the last lesson, we managed to create our snake's body by creating three

17488
00:00:05,640 --> 00:00:10,260
squares that were each turtle objects. Now in this lesson,

17489
00:00:10,290 --> 00:00:14,280
we're going to move on to the next step where we actually move our snake

17490
00:00:14,520 --> 00:00:18,570
automatically across the screen without having to do anything.

17491
00:00:19,050 --> 00:00:24,050
So this way the snake is continuously moving forwards and all we have to do as

17492
00:00:24,120 --> 00:00:27,570
the user is just to change its direction. Now,

17493
00:00:27,600 --> 00:00:30,990
how would we go about moving the snake? Well,

17494
00:00:31,020 --> 00:00:36,000
we've already got these different segments that are created, but at the moment,

17495
00:00:36,030 --> 00:00:39,360
there's no way of organizing all the segments.

17496
00:00:39,720 --> 00:00:42,480
They're kind of just created and placed on screen.

17497
00:00:43,140 --> 00:00:47,310
So let's put them into a list called segments,

17498
00:00:47,820 --> 00:00:52,020
and let's start out that list as an empty list. And then later on,

17499
00:00:52,020 --> 00:00:54,180
once we've created each new segment,

17500
00:00:54,420 --> 00:00:57,300
we go ahead and append it to this list.

17501
00:00:58,770 --> 00:01:02,250
If we want something to continuously happen in our program,

17502
00:01:02,700 --> 00:01:05,910
the way that we've usually done that is through a while loop.

17503
00:01:06,510 --> 00:01:11,510
So let's create a new variable called game_is_on and let's set it to true.

17504
00:01:14,520 --> 00:01:16,680
And while game is on,

17505
00:01:17,100 --> 00:01:20,280
then we're going to move each of the segments.

17506
00:01:20,670 --> 00:01:25,440
The simplest way that I could think of to move this segment is to loop through

17507
00:01:25,560 --> 00:01:29,190
each of the segments in our list of segments,

17508
00:01:29,730 --> 00:01:34,730
and then to get each of these to go ahead and move forward.

17509
00:01:35,640 --> 00:01:38,160
So let's say we move forwards by 20 pixels.

17510
00:01:38,580 --> 00:01:41,340
Let's go ahead and run this program and see what we get.

17511
00:01:42,450 --> 00:01:46,290
The first thing we notice is that the behavior is very weird.

17512
00:01:46,710 --> 00:01:49,080
We've got a line that's being drawn

17513
00:01:49,470 --> 00:01:52,260
and that comes from each of the segments

17514
00:01:52,620 --> 00:01:55,320
which are individual turtles.

17515
00:01:55,410 --> 00:01:57,810
And they're all drawing this line as they're moving.

17516
00:01:58,590 --> 00:02:00,690
The first thing we want to fix is that line.

17517
00:02:00,960 --> 00:02:03,630
So when we create each new segment,

17518
00:02:03,750 --> 00:02:07,020
before we tell it to go to its position,

17519
00:02:07,410 --> 00:02:11,760
let's go ahead and tell it to pull the pen up. This way

17520
00:02:11,760 --> 00:02:13,260
it won't actually draw

17521
00:02:13,470 --> 00:02:16,950
and all that we'll see is the actual turtle pieces.

17522
00:02:19,110 --> 00:02:24,110
So now we see our three turtle pieces scurrying along like some sort of weird

17523
00:02:24,960 --> 00:02:28,500
Caterpillar, but definitely not in a snake like way.

17524
00:02:29,420 --> 00:02:30,620
How can we fix this?

17525
00:02:31,490 --> 00:02:36,490
One of the things that you notice about turtle is it will first create the

17526
00:02:37,400 --> 00:02:39,500
turtle when it runs this line,

17527
00:02:39,800 --> 00:02:44,780
the turtle will get created at the center positions, so coordinate (0, 0).

17528
00:02:45,530 --> 00:02:49,730
And then it will be moved to whatever position we tell it to go to.

17529
00:02:49,940 --> 00:02:54,890
For example, for the third segment, it starts out life at (0, 0)

17530
00:02:55,070 --> 00:03:00,040
and then as soon as it gets told to go to this position, it goes to (-40, 0).

17531
00:03:00,580 --> 00:03:03,310
Now we can see that happening on screen.

17532
00:03:03,940 --> 00:03:05,920
When we created our snake body,

17533
00:03:06,190 --> 00:03:10,960
you could see each individual piece being created and then moved to their

17534
00:03:10,960 --> 00:03:14,560
location. Now, if we wanted to turn off that animation,

17535
00:03:14,800 --> 00:03:18,670
then we would have to use one of the screen class'

17536
00:03:18,670 --> 00:03:23,670
methods called tracer. And tracer takes a number as a input,

17537
00:03:26,050 --> 00:03:28,870
and it turns the animation on or off.

17538
00:03:29,140 --> 00:03:31,570
And when the tracer is turned off,

17539
00:03:32,020 --> 00:03:37,020
then we can use the update method to tell our program when to refresh and redraw

17540
00:03:38,380 --> 00:03:43,150
the screen. When we think back to the old TV monitors,

17541
00:03:43,180 --> 00:03:46,360
the cathode ray tube monitors or CRT monitors,

17542
00:03:46,720 --> 00:03:51,720
the way that they worked is by painting on a strip of color line by line

17543
00:03:53,920 --> 00:03:57,550
by line, slowly covering the entire screen.

17544
00:03:58,060 --> 00:04:02,020
And then once it's done one screen, it's going to go back to the top

17545
00:04:02,110 --> 00:04:07,090
and then it's going to paint the pixels for the next scene. And effectively,

17546
00:04:07,090 --> 00:04:10,240
it's kind of like how a GIF animation works.

17547
00:04:10,420 --> 00:04:14,380
A gif animation is composed of many images. So for example,

17548
00:04:14,380 --> 00:04:15,730
if we wanted to animate,

17549
00:04:15,730 --> 00:04:20,730
we would increase this line and then we would start drawing out a leaf until

17550
00:04:21,339 --> 00:04:25,900
eventually we end up with an animation like this. Now,

17551
00:04:26,020 --> 00:04:29,170
when that's all combined and played back very quickly,

17552
00:04:29,200 --> 00:04:33,460
then this is the animation you see. In our game

17553
00:04:33,490 --> 00:04:38,490
what we could do is we could describe each of these scenes and tell our program

17554
00:04:40,900 --> 00:04:43,270
when it should redraw each picture.

17555
00:04:44,140 --> 00:04:49,140
So that way we could start out with one picture and then hit update and then do

17556
00:04:50,260 --> 00:04:51,610
something else on screen,

17557
00:04:51,640 --> 00:04:56,260
maybe move each of our segments and then tell the screen to update again

17558
00:04:56,260 --> 00:04:58,180
to show the user the new result.

17559
00:04:58,660 --> 00:05:01,900
And then each time we make the changes we want to happen

17560
00:05:02,230 --> 00:05:05,500
and then call that update method to tell the screen

17561
00:05:05,590 --> 00:05:10,590
to show a new image each time. Let's first turn off the tracer.

17562
00:05:11,770 --> 00:05:14,770
So the tracer is a method in the screen class

17563
00:05:15,220 --> 00:05:18,670
and in order to turn it off, we're going to set it to zero.

17564
00:05:19,210 --> 00:05:23,470
So now once the tracer is off, if we actually try to run our program,

17565
00:05:23,710 --> 00:05:26,890
you can see it's just a black screen and nothing will happen.

17566
00:05:27,400 --> 00:05:32,260
Even though we've got our while loop and we've got our for loop and lots of

17567
00:05:32,260 --> 00:05:35,980
things are meant to be happening, but until we call update,

17568
00:05:36,160 --> 00:05:39,700
the screen is not going to refresh and it's not going to show us what's been

17569
00:05:39,700 --> 00:05:41,110
happening in our code.

17570
00:05:41,680 --> 00:05:46,680
So let's say that we decide to call update after all of the segments have been

17571
00:05:48,820 --> 00:05:53,200
created, so right about here. Let's call screen.

17572
00:05:53,350 --> 00:05:56,620
update. And now if I hit run,

17573
00:05:56,890 --> 00:06:01,280
you'll notice that pretty much immediately. As soon as you run the program,

17574
00:06:01,610 --> 00:06:04,970
our snake body will show up, not piece by piece,

17575
00:06:05,060 --> 00:06:08,930
but in its entirety. Now, if on the other hand

17576
00:06:09,020 --> 00:06:14,020
I move our screen.update line of code into the while loop so that once each

17577
00:06:16,940 --> 00:06:20,600
segment moves, I get the screen to update,

17578
00:06:20,930 --> 00:06:22,850
then this is what you're going to see.

17579
00:06:23,210 --> 00:06:26,840
You see each of the pieces moving along one by one.

17580
00:06:27,290 --> 00:06:29,810
Now it's not really clear what's happening.

17581
00:06:29,840 --> 00:06:31,730
So I'm going to slow it down a little bit.

17582
00:06:32,210 --> 00:06:35,240
And I'm going to do this by importing the time module.

17583
00:06:35,690 --> 00:06:40,690
Now I'm going to add the time.sleep and I'm going to get it to sleep by one

17584
00:06:41,900 --> 00:06:42,733
second.

17585
00:06:42,830 --> 00:06:47,830
So this basically just add a one-second delay after each segment moves.

17586
00:06:49,280 --> 00:06:52,040
So each segment moves, the screen updates,

17587
00:06:52,190 --> 00:06:55,670
and then we sleep for a second before the next time this happens.

17588
00:06:56,240 --> 00:06:58,190
Notice how in this case,

17589
00:06:58,280 --> 00:07:01,280
our snake is moving piece by piece.

17590
00:07:01,520 --> 00:07:04,730
So first this first piece, and then the second piece,

17591
00:07:04,760 --> 00:07:08,810
the third piece with a one-second delay between each movement.

17592
00:07:09,440 --> 00:07:09,800
Now,

17593
00:07:09,800 --> 00:07:14,800
what happens if we move this screen.update to outside this for-loop?

17594
00:07:16,490 --> 00:07:18,920
So basically we only update the screen

17595
00:07:19,190 --> 00:07:21,770
once all of the segments have moved forwards.

17596
00:07:21,950 --> 00:07:26,950
Now notice how our snake is moving forwards as an entire piece.

17597
00:07:27,590 --> 00:07:32,180
It's going to move all three segments forward before the update gets triggered

17598
00:07:32,450 --> 00:07:34,160
and we refresh the graphics.

17599
00:07:34,370 --> 00:07:38,870
So it looks like as if the whole snake is moving as one piece. Now,

17600
00:07:38,900 --> 00:07:43,580
instead of getting it to delay by one second after each segment has moved,

17601
00:07:43,880 --> 00:07:45,950
if I move this up here

17602
00:07:46,190 --> 00:07:48,950
then it's only going to be delayed by one second

17603
00:07:49,220 --> 00:07:52,550
after all three segments have moved. This way

17604
00:07:52,580 --> 00:07:56,990
our snake is moving a little bit faster. And we can make it move faster still

17605
00:07:57,050 --> 00:07:59,690
if we cut the amount of time that we're sleeping.

17606
00:08:00,080 --> 00:08:02,840
So let's change it to 0.1 second sleep

17607
00:08:03,290 --> 00:08:06,470
and you can see our snake is now moving at a reasonable speed.

17608
00:08:06,890 --> 00:08:11,270
Now you might think that we've solved the challenge and we've now got our snake

17609
00:08:11,270 --> 00:08:15,800
to move automatically forwards, but there's a problem.

17610
00:08:16,040 --> 00:08:17,780
How do we turn our snake?

17611
00:08:18,170 --> 00:08:22,280
Let's see what would happen if we control the snake head and change direction.

17612
00:08:22,910 --> 00:08:27,680
Let's say that at some point, we want to turn the snake so that it turns left.

17613
00:08:28,280 --> 00:08:29,750
Well, what happens then?

17614
00:08:30,380 --> 00:08:33,409
So this first piece is now facing up,

17615
00:08:33,770 --> 00:08:38,299
the second piece is going to continue moving forwards as does the third piece.

17616
00:08:39,020 --> 00:08:42,590
Now on the next iteration of that for loop,

17617
00:08:43,010 --> 00:08:47,780
that first piece is going to keep moving towards North while the second and

17618
00:08:47,780 --> 00:08:51,950
third pieces are going to keep moving forward because they're not going to

17619
00:08:51,950 --> 00:08:53,210
change their own heading.

17620
00:08:53,750 --> 00:08:58,590
We'll get this strange behavior because our snake segments are not linked. To

17621
00:08:58,590 --> 00:09:03,270
illustrate this, let me go ahead and change the first segment,

17622
00:09:03,270 --> 00:09:08,270
so the segment at index zero, and get it to turn left by 90 degrees.

17623
00:09:10,350 --> 00:09:12,180
And notice when I run the code,

17624
00:09:12,570 --> 00:09:16,380
you see how that head is moving in a circle all by itself,

17625
00:09:16,710 --> 00:09:21,300
and the body has completely left the head and has continued to go forward.

17626
00:09:21,950 --> 00:09:24,290
So how can we solve this? Well,

17627
00:09:24,380 --> 00:09:29,240
we have to rethink the way that we move our segments. Again,

17628
00:09:29,270 --> 00:09:34,040
we have our three segments, but if instead of moving everything forwards,

17629
00:09:34,460 --> 00:09:38,840
what if we get our last segment, so segment_3

17630
00:09:38,840 --> 00:09:43,340
in this case, to move to the position of the second to last segment,

17631
00:09:43,760 --> 00:09:48,650
and then the second segment to move to the position of the first segment,

17632
00:09:49,040 --> 00:09:53,570
and then the first segment itself to go forward by 20 paces?

17633
00:09:53,900 --> 00:09:58,400
And if we go back to that situation where we're trying to turn our snake,

17634
00:09:58,880 --> 00:10:02,060
then in this method, it will still continue to work.

17635
00:10:02,390 --> 00:10:04,970
So we've got our three segments, one, two, and three.

17636
00:10:05,480 --> 00:10:08,840
Our third segment goes to where the second segment used to be,

17637
00:10:09,050 --> 00:10:11,300
second goes to where the one used to be,

17638
00:10:11,570 --> 00:10:15,620
and then the one is going to turn and then move to the left.

17639
00:10:15,980 --> 00:10:18,710
Now the next turn is the interesting part

17640
00:10:19,070 --> 00:10:21,680
because at this point we saw how

17641
00:10:21,770 --> 00:10:24,680
if these two pieces just continue moving forward,

17642
00:10:24,980 --> 00:10:28,610
they're going to move away from the head of the snake and it's going to move in

17643
00:10:28,610 --> 00:10:31,610
opposite directions. But using this method,

17644
00:10:31,880 --> 00:10:36,110
our third segment is going to move to where the second segment used to be,

17645
00:10:36,380 --> 00:10:38,750
the second goes to where the first used to be,

17646
00:10:38,990 --> 00:10:42,560
and the first continues moving forward. This way,

17647
00:10:42,560 --> 00:10:47,270
our snake has pretty much straightened out as you would expect this snake to

17648
00:10:47,270 --> 00:10:51,980
behave. Now, it's just the matter of actually implementing this,

17649
00:10:52,010 --> 00:10:53,090
which is the hard part.

17650
00:10:53,600 --> 00:10:57,500
So I'm going to go ahead and delete the part where I told the snake to turn left

17651
00:10:58,040 --> 00:11:00,620
and I'm going to delete this for loop

17652
00:11:00,650 --> 00:11:05,330
which just moved each of the segments in our list of segments forward by 20

17653
00:11:05,330 --> 00:11:09,980
paces. Now, instead, what I'm going to do is I'm going to create a for loop,

17654
00:11:10,340 --> 00:11:15,340
but this time I'm going to loop through each of the segments going from the last

17655
00:11:15,980 --> 00:11:18,170
segment to the first segment,

17656
00:11:18,380 --> 00:11:22,040
so basically in reverse order. Now to do this,

17657
00:11:22,040 --> 00:11:24,710
I'm going to use the range type of for-loop.

17658
00:11:24,950 --> 00:11:29,950
So I'm going to say for segment number or seg_num in the range,

17659
00:11:31,490 --> 00:11:34,020
and this range is going to have

17660
00:11:34,160 --> 00:11:37,580
a start, a stop,

17661
00:11:38,150 --> 00:11:40,340
and also a step.

17662
00:11:40,820 --> 00:11:44,420
So the start is the number that we're going to start

17663
00:11:44,420 --> 00:11:47,450
the range from, the stop is where the range is going to end,

17664
00:11:47,810 --> 00:11:52,370
and the step is how we're going to get from the start to the stop. For example,

17665
00:11:52,400 --> 00:11:56,710
if we wanted a range of 1, 2, 3, then of course start is going to be 1,

17666
00:11:56,920 --> 00:12:01,480
stop is going to be 3 and step is going to be +1. Now,

17667
00:12:01,480 --> 00:12:05,770
if we wanted a range of 3, 2, 1, however,

17668
00:12:05,830 --> 00:12:07,870
then the start is going to be 3,

17669
00:12:08,140 --> 00:12:12,730
the stop is going to be 1 and the step is going to be -1.

17670
00:12:13,420 --> 00:12:14,230
In our case,

17671
00:12:14,230 --> 00:12:18,640
what we actually want is actually to go from 2,

17672
00:12:19,120 --> 00:12:21,040
1, 0.

17673
00:12:21,550 --> 00:12:26,550
So the start will be 2, the stop will be 0, and the step will be -1.

17674
00:12:28,960 --> 00:12:33,400
Now, unfortunately, even though we have these named parameters,

17675
00:12:33,760 --> 00:12:38,560
because the range function in Python is actually something that's not quite pure

17676
00:12:38,560 --> 00:12:41,860
Python, it's something that comes from the C language,

17677
00:12:42,220 --> 00:12:45,520
it doesn't actually let us use these names.

17678
00:12:45,820 --> 00:12:49,180
I'll show you when we run our code, this is actually going to give us an error.

17679
00:12:49,480 --> 00:12:50,710
But for the time being,

17680
00:12:50,740 --> 00:12:55,240
it's actually much easier to visualize this as we write the code inside this

17681
00:12:55,240 --> 00:12:57,610
for-loop. So in this case,

17682
00:12:57,640 --> 00:13:02,640
the segment number is going to be equal to 2, and then 1,

17683
00:13:03,430 --> 00:13:04,870
and then finally 0.

17684
00:13:05,440 --> 00:13:10,440
Now we're going to use that to get hold of the last segment from our list of

17685
00:13:11,620 --> 00:13:12,453
segments.

17686
00:13:12,580 --> 00:13:16,720
So we can tap into that list and then get hold of the last one

17687
00:13:16,990 --> 00:13:18,580
using that seg_num.

17688
00:13:19,060 --> 00:13:23,860
And then we're going to set it to go to a particular X and Y position.

17689
00:13:24,380 --> 00:13:29,380
Now the X and Y position that we want it to go to is going to be the second to

17690
00:13:30,370 --> 00:13:32,200
last segment's position.

17691
00:13:32,680 --> 00:13:35,800
So how can we get hold of the second to last segment? Well,

17692
00:13:36,040 --> 00:13:40,720
we're going to get hold of the segments and then pass in seg_num but then 

17693
00:13:40,720 --> 00:13:44,230
-1. So when we first start out, we start out with 2.

17694
00:13:44,530 --> 00:13:49,120
So the segment at position two is going to be the last segment.

17695
00:13:49,480 --> 00:13:54,400
And then the segment at 2 - 1 is going to be the second to last segment.

17696
00:13:54,850 --> 00:13:58,450
Now this one we're going to get hold of it's X coordinate

17697
00:13:59,050 --> 00:14:03,250
and we're going to set this to a variable called new_x,

17698
00:14:03,760 --> 00:14:08,760
and then we're going to do the same and get hold of the new_y.

17699
00:14:09,820 --> 00:14:13,660
So we're going to get hold of the second to last segment's Y coordinate,

17700
00:14:14,020 --> 00:14:19,020
and then we're going to use these coordinates, new_x and new_y to tell this last

17701
00:14:19,600 --> 00:14:24,040
segment to go to the position of the second to last segment.

17702
00:14:24,790 --> 00:14:26,260
Now, as I mentioned before,

17703
00:14:26,650 --> 00:14:30,790
this range function comes from the C language.

17704
00:14:31,060 --> 00:14:34,330
So if we run it with these keyword arguments

17705
00:14:34,630 --> 00:14:36,430
it's actually going to give us an error

17706
00:14:36,550 --> 00:14:40,840
and it tells us that this range function takes no keyword arguments.

17707
00:14:41,260 --> 00:14:44,410
So while it's really nice to use it to visualize it,

17708
00:14:44,440 --> 00:14:48,040
if we actually want it to work, we have to delete these.

17709
00:14:48,220 --> 00:14:50,200
But just before I delete it,

17710
00:14:50,470 --> 00:14:55,190
I want to this so that we're no longer using these hard-coded numbers.

17711
00:14:55,310 --> 00:14:57,560
So instead of going from 2 to 0,

17712
00:14:57,980 --> 00:15:02,570
we want to go to the length of the segments.

17713
00:15:02,600 --> 00:15:06,410
So in the future, if we had 10 segments or 20 segments,

17714
00:15:06,620 --> 00:15:08,660
that our code would still work. Now,

17715
00:15:08,660 --> 00:15:11,750
the length of the segment is actually three to begin with.

17716
00:15:12,170 --> 00:15:15,800
And we know that lists start counting from zero,

17717
00:15:15,800 --> 00:15:20,800
so 0, 1, 2, ... the last position is going to be the length - 1,

17718
00:15:21,440 --> 00:15:25,190
and then we're going to stop at the zeroth segment.

17719
00:15:25,760 --> 00:15:30,560
So now we can go ahead and delete these named arguments.

17720
00:15:33,260 --> 00:15:37,640
And we end up with this. Now we can run our code and we won't get any errors.

17721
00:15:38,600 --> 00:15:43,040
Notice how all three of the segments went to the same position,

17722
00:15:43,580 --> 00:15:48,560
the position of the first segment. So in addition to moving these segments,

17723
00:15:48,590 --> 00:15:53,590
remember that we also have to move the very first segment actually forwards by

17724
00:15:55,940 --> 00:16:00,380
say, 20 paces. So at the very end of all of this code

17725
00:16:00,560 --> 00:16:01,910
outside of the four loop,

17726
00:16:02,180 --> 00:16:06,890
we're going to get hold of the first segment, so segment at position zero,

17727
00:16:07,280 --> 00:16:10,700
and then we're going to get it to move forward by 20 paces.

17728
00:16:11,420 --> 00:16:12,980
So now when I run this again,

17729
00:16:13,010 --> 00:16:17,810
you can see our snake is now moving freely forwards and even if at some point,

17730
00:16:17,840 --> 00:16:20,120
the snake needed to turn,

17731
00:16:20,450 --> 00:16:23,150
let's say it turned left by 90 degrees,

17732
00:16:23,540 --> 00:16:25,880
then our code is still going to work.

17733
00:16:25,970 --> 00:16:30,320
Notice how our snake is now turning in a circle and all of the subsequent

17734
00:16:30,320 --> 00:16:34,400
pieces are following the head along its path. That's it.

17735
00:16:34,670 --> 00:16:39,670
This is the code that will get our snake to automatically move forwards.

17736
00:16:40,850 --> 00:16:43,970
Now, there was quite a few concepts mentioned in here,

17737
00:16:44,480 --> 00:16:49,480
and you have to think about the segments in terms of how they move in the graph

17738
00:16:50,720 --> 00:16:55,610
and also this idea of getting hold of the last segment and then telling it to go

17739
00:16:55,610 --> 00:17:00,380
to the position of the second to last segment and then doing this for all of the

17740
00:17:00,380 --> 00:17:01,213
segments.

17741
00:17:01,370 --> 00:17:05,720
So it's a little bit mind-bending and it might be worth just taking a second

17742
00:17:05,720 --> 00:17:10,550
look at this code and going back in the video where I explain how this worked in

17743
00:17:10,550 --> 00:17:14,329
the slides, just so that you're really clear with how this works.

17744
00:17:14,720 --> 00:17:18,890
Once you are, then you can move forward and head over to the next lesson.


17745
00:00:00,150 --> 00:00:00,750
So far,

17746
00:00:00,750 --> 00:00:05,750
we've managed to get our starting segments for our snake to appear on screen.

17747
00:00:06,630 --> 00:00:11,630
And then we managed to get our snake to automatically move forwards and to

17748
00:00:12,930 --> 00:00:17,930
figure out a way for the tail of the snake to follow where the head is going.

17749
00:00:18,750 --> 00:00:23,750
Now it's time to tidy up our code a little bit so that all the parts that are

17750
00:00:24,390 --> 00:00:29,390
related to the snake's behavior and the snake's appearance go into a separate

17751
00:00:30,090 --> 00:00:33,300
class. So that by the end of the whole project,

17752
00:00:33,330 --> 00:00:37,410
we should end up with three classes; a snake class, a food class,

17753
00:00:37,500 --> 00:00:41,130
and a scoreboard. And all of these classes will be in separate files,

17754
00:00:41,370 --> 00:00:43,170
managing only one thing.

17755
00:00:43,650 --> 00:00:48,150
And the goal of the refactoring is so that you could create a separate file,

17756
00:00:48,150 --> 00:00:52,860
snake.py, import the snake class that you've created in that file.

17757
00:00:53,430 --> 00:00:55,500
And then once you initialize this snake,

17758
00:00:55,560 --> 00:01:00,330
it will do everything that we have so far and create our three segments snake

17759
00:01:00,600 --> 00:01:04,890
onto the screen. And then finally, while the game loop is running,

17760
00:01:05,129 --> 00:01:10,110
we're going to get the snake to continuously move forward just by calling snake

17761
00:01:10,140 --> 00:01:13,140
.move. This is what you're aiming for.

17762
00:01:14,310 --> 00:01:17,910
Have a think about how you can take the existing code that you've got in the

17763
00:01:17,910 --> 00:01:22,910
main.py and extract all of the snake related functionality into a separate

17764
00:01:23,610 --> 00:01:28,230
snake class and make your main.py end up looking like this.

17765
00:01:28,740 --> 00:01:31,860
The program should do the exact same things as before.

17766
00:01:32,160 --> 00:01:36,450
The only difference is how the code is organized. Have a think about this.

17767
00:01:36,660 --> 00:01:39,810
You might need to revise some of the things you learned about how to create

17768
00:01:39,810 --> 00:01:43,860
classes, how to create objects from the previous lessons.

17769
00:01:44,010 --> 00:01:45,060
But pause the video,

17770
00:01:45,330 --> 00:01:49,230
I want you to give this a good try before you come back when we'll go through

17771
00:01:49,230 --> 00:01:50,250
the solution together.

17772
00:01:53,960 --> 00:01:54,380
Alright.

17773
00:01:54,380 --> 00:01:57,020
So the first thing we need to do is of course,

17774
00:01:57,050 --> 00:02:02,050
to create our snake class. And remember that in Python, class names are in Pascal

17775
00:02:03,350 --> 00:02:06,470
case, so the first letter needs to be capitalized.

17776
00:02:07,070 --> 00:02:10,280
And then inside this class, I'm going to create my init.

17777
00:02:11,000 --> 00:02:15,590
Now the code in here is going to determine what should happen when we initialize

17778
00:02:15,620 --> 00:02:19,250
a new snake object. So firstly,

17779
00:02:19,310 --> 00:02:24,310
I'm going to take the starting positions and take it over to our snake.py.

17780
00:02:25,460 --> 00:02:29,960
Now, I'm actually going to put this in as a constant. So right at the top,

17781
00:02:30,350 --> 00:02:32,150
and remember that in Python,

17782
00:02:32,480 --> 00:02:36,380
the constants are named with all caps like this,

17783
00:02:36,530 --> 00:02:40,550
and also with snake case with underscores separating each of the words.

17784
00:02:41,000 --> 00:02:46,000
Now we can use these starting positions inside our snake class to create our new

17785
00:02:47,430 --> 00:02:51,410
snake. So we're going to need to move our segments over as well.

17786
00:02:51,830 --> 00:02:55,850
So let's create a new attribute that's associated with our snake class called

17787
00:02:55,850 --> 00:02:57,650
segments. And remember,

17788
00:02:57,650 --> 00:03:01,120
we're going to need to use self when we're working within a class.

17789
00:03:02,020 --> 00:03:05,290
After that, we're going to create our snake.

17790
00:03:05,620 --> 00:03:10,210
So I'm going to create a method called create_snake down here.

17791
00:03:13,350 --> 00:03:18,350
And this method is going to do everything that we previously had over here,

17792
00:03:19,680 --> 00:03:22,320
but we're going to move that into this method.

17793
00:03:22,740 --> 00:03:25,230
Now there's a couple of things we need to change. Firstly,

17794
00:03:25,230 --> 00:03:28,260
we change these starting positions into a constant,

17795
00:03:28,560 --> 00:03:30,270
so let's make that consistent.

17796
00:03:30,750 --> 00:03:35,700
Second thing is that we need to import turtle into this file from the turtle

17797
00:03:35,700 --> 00:03:39,720
module in order to use it to create a new segment.

17798
00:03:40,350 --> 00:03:44,640
And then finally, in order to refer to our attribute segments,

17799
00:03:44,730 --> 00:03:49,730
we have to say self.segments and then append this new segment to our snake

17800
00:03:51,030 --> 00:03:53,610
segments. That's this part done.

17801
00:03:53,910 --> 00:03:58,910
The next thing we need to do is to get rid of this code and move it inside the

17802
00:04:00,480 --> 00:04:02,010
snake. So again,

17803
00:04:02,040 --> 00:04:06,780
I'm going to create another method that's associated with the snake class called

17804
00:04:06,810 --> 00:04:09,600
move. So when the snake moves,

17805
00:04:09,660 --> 00:04:14,660
it's going to look to this code to figure out how it should do that. Again,

17806
00:04:15,090 --> 00:04:18,510
because we're inside our class, it's no longer just segments.

17807
00:04:18,779 --> 00:04:21,029
It's now self.segments.

17808
00:04:21,510 --> 00:04:25,500
So let's go ahead and replace it in all the places where we have our red

17809
00:04:25,530 --> 00:04:29,220
underlines and now that's pretty much it for our snake class.

17810
00:04:29,520 --> 00:04:33,780
We can create a new snake object and each time we do that,

17811
00:04:33,930 --> 00:04:38,930
it creates a three-segment snake using the starting positions

17812
00:04:39,600 --> 00:04:44,490
which are declared at the top. So if we want the snake to show up on screen,

17813
00:04:44,760 --> 00:04:49,260
then we're going to have to first import the snake class from the snake file,

17814
00:04:49,800 --> 00:04:54,800
and then we're going to create a new snake object from that class.

17815
00:04:55,830 --> 00:05:00,060
And once this line gets triggered, then we're going to be calling

17816
00:05:00,060 --> 00:05:04,800
create_snake and our three-segment snake will show up on screen like this.

17817
00:05:05,610 --> 00:05:08,490
Now the next step is while the game is on,

17818
00:05:08,670 --> 00:05:12,780
the screen is going to update every 0.1 second.

17819
00:05:13,080 --> 00:05:15,000
So that's essentially what this is doing.

17820
00:05:15,030 --> 00:05:19,620
It's saying that delay for 0.1 second and then refresh the screen.

17821
00:05:20,250 --> 00:05:22,530
And every time the screen refreshes,

17822
00:05:22,770 --> 00:05:26,640
we're going to get the snake to move forwards by one step.

17823
00:05:27,120 --> 00:05:31,410
Now at the moment, each step is defined here as 20.

17824
00:05:31,830 --> 00:05:36,270
So again, I want to extract that into a constant up here,

17825
00:05:36,630 --> 00:05:39,450
so we're going to call it the MOVE_DISTANCE

17826
00:05:40,950 --> 00:05:45,950
and we can set that to 20 and then change this to use the constant here.

17827
00:05:47,430 --> 00:05:51,600
And the reason why we have all these constants is so that if we wanted to tweak

17828
00:05:51,600 --> 00:05:52,240
our game,

17829
00:05:52,240 --> 00:05:56,940
say if we wanted the snake to start at a different position or for it to move

17830
00:05:56,990 --> 00:06:01,250
further each time, then we don't have to dig through the body of our code.

17831
00:06:01,430 --> 00:06:03,290
All we have to do is look at the top,

17832
00:06:03,320 --> 00:06:06,680
look at all the things that we can change and then change it accordingly.

17833
00:06:07,160 --> 00:06:10,100
So now coming back to our code here,

17834
00:06:10,490 --> 00:06:15,490
all we now really have here is just these few lines of code and everything that

17835
00:06:15,830 --> 00:06:17,360
is snake related,

17836
00:06:17,390 --> 00:06:22,390
creating the snake or moving the snake is now abstracted into it's own class.

17837
00:06:24,350 --> 00:06:26,690
This way when something goes wrong with our snake,

17838
00:06:26,780 --> 00:06:30,470
we know who's responsible and which file to dig through

17839
00:06:30,470 --> 00:06:33,380
to figure out the reason. Now, at this point,

17840
00:06:33,380 --> 00:06:35,900
if we go ahead and rerun our code,

17841
00:06:36,260 --> 00:06:39,710
you can see that our program works exactly the same as before.

17842
00:06:39,740 --> 00:06:43,820
Nothing should have changed and nothing should have broken ow because our game

17843
00:06:43,820 --> 00:06:46,550
isn't yet able to go into the game over sequence,

17844
00:06:46,760 --> 00:06:50,150
there's no way of stopping the snake other than hitting the stop button.

17845
00:06:50,450 --> 00:06:53,420
So don't worry if at this stage inside your console

17846
00:06:53,450 --> 00:06:57,020
you see a lot of red and it says things like keyboard interrupt,

17847
00:06:57,020 --> 00:07:00,050
or trace back errors. All of these are normal.

17848
00:07:00,380 --> 00:07:04,520
The thing that you're more concerned about is whether if, when you run the game,

17849
00:07:04,700 --> 00:07:07,430
whether if it actually works like it used to,

17850
00:07:07,460 --> 00:07:10,220
so namely your snake moving across the screen.

17851
00:07:10,760 --> 00:07:15,760
If it does exactly what it used to and your main.py is now much simpler and

17852
00:07:17,180 --> 00:07:22,040
all of your snake functionality and behavior and appearance is now inside its

17853
00:07:22,040 --> 00:07:26,060
own class, then you have successfully achieved the goal of this lesson.


17854
00:00:00,240 --> 00:00:03,750
So we've now managed to create a snake body, move the snake,

17855
00:00:03,810 --> 00:00:08,810
and we've even managed to put our snake related code into a separate class.

17856
00:00:10,410 --> 00:00:14,940
Now the next step is to figure out how to control the snake.

17857
00:00:15,600 --> 00:00:20,600
Now we're going to control the snake by using the up, down, left, and right arrow

17858
00:00:21,810 --> 00:00:22,643
keys.

17859
00:00:22,920 --> 00:00:27,150
And we're going to be using our key bindings that we learned in yesterday's

17860
00:00:27,150 --> 00:00:32,150
lessons to be able to translate this into a change in direction of the snake. In

17861
00:00:33,600 --> 00:00:36,780
our code right after we create our snake,

17862
00:00:37,140 --> 00:00:42,140
we're going to call the screen.listen method to start listening for

17863
00:00:42,450 --> 00:00:43,283
keystrokes.

17864
00:00:43,740 --> 00:00:48,740
And the keystrokes that we're going to listen for are the up, down, left, and right

17865
00:00:50,010 --> 00:00:54,510
arrow keys. Now those keys are described by a string.

17866
00:00:54,810 --> 00:00:59,370
So it's a uppercase 'U' and then a 'p' so this would be up.

17867
00:00:59,760 --> 00:01:03,750
And then it's again, uppercase 'Down', 'Left',

17868
00:01:04,319 --> 00:01:06,810
and 'Right'.

17869
00:01:07,320 --> 00:01:11,340
These are the keys that it will detect, obviously the up,

17870
00:01:11,340 --> 00:01:13,710
down, left, and right arrow keys on the keyboard.

17871
00:01:14,400 --> 00:01:19,110
The function that you're going to bind it to is going to be a function in the

17872
00:01:19,110 --> 00:01:23,490
snake object and it's going to have the same name. So for example,

17873
00:01:23,490 --> 00:01:25,230
it'd be snake.up,

17874
00:01:25,320 --> 00:01:29,100
and that will be triggered when the up key is pressed.

17875
00:01:29,550 --> 00:01:34,470
And then the same thing happens with snake.down when the down key gets

17876
00:01:34,470 --> 00:01:37,530
pressed and then again with left and right.

17877
00:01:38,130 --> 00:01:43,130
Your job is to have a think about how you can create these methods up,

17878
00:01:44,160 --> 00:01:46,920
down, left, and right, in the snake class

17879
00:01:47,370 --> 00:01:51,930
so that when the up key or the down key is detected,

17880
00:01:52,260 --> 00:01:56,820
you can move the snake and change its heading accordingly.

17881
00:01:57,240 --> 00:02:02,240
So remember that up is going to be towards North, down is going to be South, left

17882
00:02:03,510 --> 00:02:07,560
is going to be towards the left of the screen and right is going to be towards

17883
00:02:07,560 --> 00:02:08,430
the right of the screen.

17884
00:02:08,820 --> 00:02:13,590
So have a think about the headings that we spoke about in previous lessons.

17885
00:02:14,070 --> 00:02:18,090
And if you need to, it might be worth just setting up a brand new project,

17886
00:02:18,390 --> 00:02:23,070
getting a turtle up and running and then setting it's heading from zero all the

17887
00:02:23,070 --> 00:02:27,120
way to 360, just to see which direction it's actually facing.

17888
00:02:27,510 --> 00:02:29,250
If you managed to complete the challenge,

17889
00:02:29,280 --> 00:02:31,410
you should be able to control the snake

17890
00:02:31,680 --> 00:02:34,410
and even though it's going to continue moving forward,

17891
00:02:34,650 --> 00:02:39,450
you now determine which direction it moves in by using the arrow keys.

17892
00:02:40,080 --> 00:02:43,320
Pause the video now and see if you can complete this challenge.

17893
00:02:46,140 --> 00:02:49,860
All right. So I've already created all of these lines of code

17894
00:02:49,890 --> 00:02:53,130
which is going to get the screen to listen for these key strokes.

17895
00:02:53,580 --> 00:02:55,020
And then when it detects it,

17896
00:02:55,050 --> 00:02:58,350
it's going to call these methods in the snake class.

17897
00:02:58,710 --> 00:03:02,350
So inside our snake class, let's go ahead and create those methods.

17898
00:03:02,470 --> 00:03:03,570
So we've got up,

17899
00:03:05,820 --> 00:03:06,690
down,

17900
00:03:08,910 --> 00:03:10,410
left, and right.

17901
00:03:10,890 --> 00:03:15,890
Let's think about how we can turn the snake up. In order to turn the snake,

17902
00:03:17,160 --> 00:03:20,820
the segment that we're most interested in is the first segment.

17903
00:03:20,850 --> 00:03:22,740
That's basically the head of the snake.

17904
00:03:23,040 --> 00:03:28,040
So we could tap into self.segments and then get hold of the zeroth segment,

17905
00:03:29,070 --> 00:03:33,150
which is the first one, and then change its heading by calling setheading.

17906
00:03:33,810 --> 00:03:36,900
And then we can tell it to, for example, if it's up,

17907
00:03:36,930 --> 00:03:40,950
then it should actually be turning to the 90-degree direction,

17908
00:03:40,980 --> 00:03:42,540
which is actually towards North.

17909
00:03:43,230 --> 00:03:48,230
Now I'm going to go ahead and put a pass on all of these other methods,

17910
00:03:49,110 --> 00:03:53,190
just so that we can actually test our code and it doesn't give us any errors

17911
00:03:53,490 --> 00:03:58,020
because these functions are currently empty. Now, if you don't have the pass,

17912
00:03:58,140 --> 00:04:02,280
it won't like it because Python doesn't like the idea of empty functions.

17913
00:04:02,760 --> 00:04:05,970
But now we can at least just test this one thing.

17914
00:04:06,600 --> 00:04:08,040
So when we run our code,

17915
00:04:08,070 --> 00:04:12,570
we should be able to hit the up key and you can see the snake changed direction.

17916
00:04:12,960 --> 00:04:13,950
Let me just do that again.

17917
00:04:14,520 --> 00:04:18,209
And this is because we managed to get the first segment,

17918
00:04:18,240 --> 00:04:20,190
the head of the snake, to change

17919
00:04:20,190 --> 00:04:25,020
it's heading to 90 degrees and then the rest of the body will follow because

17920
00:04:25,020 --> 00:04:28,110
it's continuously moving on every tick of the clock.

17921
00:04:28,710 --> 00:04:32,550
So using this, we can now set the rest of the methods.

17922
00:04:32,910 --> 00:04:36,660
But because we're going to need the head of the snake quite a few times in our

17923
00:04:36,660 --> 00:04:41,610
code, it might make sense to actually create a separate attribute.

17924
00:04:42,060 --> 00:04:46,980
So after we've created the snake, after we've got some segments inside this list,

17925
00:04:47,310 --> 00:04:49,500
we can create an attribute called head,

17926
00:04:49,590 --> 00:04:51,180
which is going to be the head of the snake.

17927
00:04:51,540 --> 00:04:56,160
And this can be equal to self.segments at index zero. Now,

17928
00:04:56,160 --> 00:04:59,430
remember if you have this line of code above the create_snake,

17929
00:04:59,460 --> 00:05:03,990
it's probably going to error out because at this point the segments is empty

17930
00:05:04,350 --> 00:05:08,160
and if you try to get the first item from it, it's not going to allow you to.

17931
00:05:08,610 --> 00:05:13,440
So look at the positioning of the code here. Now, once we've got this set,

17932
00:05:13,500 --> 00:05:16,500
we can go down here and change everywhere

17933
00:05:16,500 --> 00:05:19,590
where we need to use the head of the snake. So for example,

17934
00:05:19,830 --> 00:05:24,030
when we're moving the head forwards and when we're moving it up,

17935
00:05:24,060 --> 00:05:28,080
left, down, and right. Now we can set

17936
00:05:28,110 --> 00:05:33,110
each of these headings. Up is going to be a heading of 90, down is going to be 

17937
00:05:34,560 --> 00:05:35,393
270,

17938
00:05:36,000 --> 00:05:41,000
left is 180 and right is 0.

17939
00:05:41,760 --> 00:05:45,420
These directions are just simply counter-clockwise.

17940
00:05:45,450 --> 00:05:49,740
So the turtle starts out pointing towards East and that's a heading of zero,

17941
00:05:50,070 --> 00:05:55,070
and then going anticlockwise, up is 90, left is 180, down as 270.

17942
00:05:55,920 --> 00:06:00,020
This can be easily verified just by testing out some numbers, right?

17943
00:06:00,020 --> 00:06:04,190
You could just put some numbers in there and then just try it out and see which

17944
00:06:04,190 --> 00:06:07,130
direction it goes and then you'll be able to figure it out.

17945
00:06:07,580 --> 00:06:10,040
But we've also mentioned this in previous lessons

17946
00:06:10,040 --> 00:06:13,730
so you could also go back and take a look at when we looked at the heading of

17947
00:06:13,760 --> 00:06:18,020
the turtle. So now if I go ahead and run this,

17948
00:06:18,320 --> 00:06:23,240
then you should see that I can now freely control the snake by going left or

17949
00:06:23,240 --> 00:06:28,100
right or down or up. And if you managed to do this,

17950
00:06:28,160 --> 00:06:32,000
then you should consider yourself successful. Now,

17951
00:06:32,030 --> 00:06:34,160
while I was testing this code,

17952
00:06:34,400 --> 00:06:39,020
I realized that there's something about the snake game that we haven't really

17953
00:06:39,380 --> 00:06:40,213
accounted for.

17954
00:06:40,730 --> 00:06:44,390
And it's the fact that the snake can't move back on itself.

17955
00:06:44,780 --> 00:06:49,310
It can't go forwards and then go the opposite direction because that requires

17956
00:06:49,310 --> 00:06:52,040
the head to change directions.

17957
00:06:52,280 --> 00:06:54,590
And this is not allowed in the official snake game.

17958
00:06:55,070 --> 00:06:59,420
So how can we code this into our game? Well,

17959
00:06:59,750 --> 00:07:04,750
we have to figure out when the head is pointing towards down direction,

17960
00:07:06,980 --> 00:07:11,360
then we shouldn't allow it to go up. And similarly, when it's pointing up,

17961
00:07:11,390 --> 00:07:14,000
we shouldn't let it go down, when it's pointing right

17962
00:07:14,030 --> 00:07:17,150
we shouldn't let it go left. So at the top here,

17963
00:07:17,180 --> 00:07:18,740
I'm going to create some constants.

17964
00:07:18,770 --> 00:07:23,770
I'm going to create a UP direction and it's going to be 90, DOWN direction is going to

17965
00:07:24,920 --> 00:07:29,920
be 270, LEFT is going to be equal to 180 and RIGHT is going to be equal to

17966
00:07:33,230 --> 00:07:37,730
0. So now that I've got all of these as constants,

17967
00:07:37,880 --> 00:07:42,880
I can go in here and set the heading to instead say UP when it needs to go up,

17968
00:07:47,620 --> 00:07:51,640
DOWN, LEFT and RIGHT. In addition,

17969
00:07:51,670 --> 00:07:53,530
we're going to do an if check.

17970
00:07:53,560 --> 00:07:58,560
So we're going to say if the current self.head.heading

17971
00:08:01,810 --> 00:08:06,190
is not equal to down, well, in that case,

17972
00:08:06,250 --> 00:08:09,190
it's allowed to move up. So this way,

17973
00:08:09,190 --> 00:08:12,700
it just means that if the current heading is pointed down,

17974
00:08:13,150 --> 00:08:16,510
it can't move up. But for all other directions,

17975
00:08:16,540 --> 00:08:18,970
if it's already moving up or left or right,

17976
00:08:19,240 --> 00:08:21,280
then it can change the heading to up.

17977
00:08:23,350 --> 00:08:27,430
Now be really careful here because it's not just self.head.heading,

17978
00:08:27,700 --> 00:08:32,700
it's actually heading as a method because remember that the head of the snake is

17979
00:08:34,150 --> 00:08:37,150
the first segment of our list of segments

17980
00:08:37,630 --> 00:08:40,809
and each segment is a individual turtle.

17981
00:08:41,409 --> 00:08:44,230
The turtle has a heading method

17982
00:08:44,410 --> 00:08:48,820
which will give you a direction in terms of these 360-degree numbers,

17983
00:08:49,270 --> 00:08:53,950
and then we can use that to check to see if it's equal to down.

17984
00:08:54,370 --> 00:08:57,780
And if it is, then it's not allowed to go up.

17985
00:08:58,590 --> 00:09:00,780
So using this logic,

17986
00:09:00,810 --> 00:09:05,810
see if you can complete the rest of the three methods so that when you run your

17987
00:09:06,990 --> 00:09:10,020
code, you can turn in all directions.

17988
00:09:10,440 --> 00:09:12,660
But when you're facing one direction,

17989
00:09:12,690 --> 00:09:15,750
you can't go backwards, like this.

17990
00:09:16,520 --> 00:09:17,353
Okay?

17991
00:09:20,480 --> 00:09:22,880
Alright. So it's going to be pretty straightforward.

17992
00:09:23,240 --> 00:09:27,950
If it's already going up, then it's not allowed to go down.

17993
00:09:28,640 --> 00:09:31,520
If it's already going right,

17994
00:09:31,820 --> 00:09:35,990
then it's not allowed to go left. And finally,

17995
00:09:36,050 --> 00:09:40,310
if it's already going left, then it's not allowed to go right.

17996
00:09:41,810 --> 00:09:45,950
So this way, even though our snake can move freely through the space,

17997
00:09:46,280 --> 00:09:49,880
it can't go back on itself. And there we have it.

17998
00:09:49,910 --> 00:09:53,990
We've now managed to create our snake, get it to move and control it

17999
00:09:54,080 --> 00:09:56,150
using our key presses.

18000
00:09:56,690 --> 00:10:00,590
Even though it seems like our game is still not quite there,

18001
00:10:00,860 --> 00:10:02,660
we've already come so far.

18002
00:10:02,990 --> 00:10:05,930
So this comes up to our hour mark

18003
00:10:06,290 --> 00:10:10,010
and it's now time to take a break, refresh your minds,

18004
00:10:10,370 --> 00:10:13,850
look at some of the concepts that you might be confused about that we covered

18005
00:10:13,850 --> 00:10:14,683
today,

18006
00:10:14,720 --> 00:10:19,040
especially this concept of using the update to refresh the screen,

18007
00:10:19,460 --> 00:10:21,680
as well as using the timer

18008
00:10:21,710 --> 00:10:26,570
to delay the refresh so that we can control how often it happens.

18009
00:10:26,960 --> 00:10:31,610
And then using our key bindings as well as separating all classes.

18010
00:10:31,880 --> 00:10:34,910
We looked at a lot of things today. Now, tomorrow,

18011
00:10:34,970 --> 00:10:37,370
once you're rested and fresh and ready,

18012
00:10:37,640 --> 00:10:39,860
we're going to be finishing up the snake game.

18013
00:10:40,310 --> 00:10:44,330
And we're going to be learning about inheritance as well as slicing

18014
00:10:44,750 --> 00:10:48,350
and we're going to be building out the full functionality of this game.

18015
00:10:48,680 --> 00:10:53,600
So I hope you're looking forward to it. I certainly am. I'll see you tomorrow.



18016
00:00:00,540 --> 00:00:01,110
Hey guys,

18017
00:00:01,110 --> 00:00:05,610
welcome to Day 21 of 100 Days of Code. Today

18018
00:00:05,610 --> 00:00:09,180
we're going to learn about class inheritance, slicing,

18019
00:00:09,390 --> 00:00:12,840
and we're going to be finishing up our snake game. Today

18020
00:00:12,870 --> 00:00:17,870
I wanted to introduce you to another really important concept in Object Oriented

18021
00:00:18,420 --> 00:00:19,253
Programming,

18022
00:00:19,350 --> 00:00:24,350
which is the idea that classes can inherit from other classes,

18023
00:00:24,960 --> 00:00:27,480
inheriting attributes, inheriting methods,

18024
00:00:27,720 --> 00:00:30,030
basically a way to make it simpler

18025
00:00:30,180 --> 00:00:33,690
to modify classes and give them more capabilities.

18026
00:00:34,290 --> 00:00:39,290
Now we're also going to be looking at how Python allows us to slice things like

18027
00:00:39,600 --> 00:00:44,310
lists and dictionaries. And we're going to be looking at how we can do that.

18028
00:00:44,880 --> 00:00:47,160
And once we've acquired all of these skills,

18029
00:00:47,430 --> 00:00:52,260
then we'll be able to finish up our snake game and complete the last four

18030
00:00:52,260 --> 00:00:56,490
stages. So detecting collision with food, creating a scoreboard,

18031
00:00:56,550 --> 00:00:59,220
detecting collision with the wall and with the tail.

18032
00:01:00,090 --> 00:01:04,050
Once you are ready, head over to the next lesson and let's get started learning

18033
00:01:04,050 --> 00:01:05,489
about class inheritance.


18034
00:00:00,060 --> 00:00:03,780
Let's talk about another feature of Object Oriented

18035
00:00:03,780 --> 00:00:06,090
Programming that's really, really handy.

18036
00:00:06,510 --> 00:00:11,040
And it's something that we call class inheritance. How does this work?

18037
00:00:11,250 --> 00:00:11,660
Well,

18038
00:00:11,660 --> 00:00:16,280
let's say that you codet up a robot chef and you give it a bunch of

18039
00:00:16,280 --> 00:00:21,170
functionality. You tell it how to bake, how to stir, how to measure.

18040
00:00:21,650 --> 00:00:25,190
And then at some point you decide actually, you know, in my restaurant,

18041
00:00:25,190 --> 00:00:27,080
I also need a pastry chef.

18042
00:00:27,380 --> 00:00:31,940
Now this pastry chef will need to know some of the things that a chef knows how

18043
00:00:31,940 --> 00:00:34,760
to do, but it also needs something extra.

18044
00:00:35,000 --> 00:00:39,830
So you don't want to create this pastry chef entirely from scratch. Instead,

18045
00:00:39,860 --> 00:00:43,580
what you want to do is you want to be able to take the methods you've already

18046
00:00:43,580 --> 00:00:47,360
defined for the chef class and then just add to it,

18047
00:00:47,570 --> 00:00:50,030
add a few other relevant methods

18048
00:00:50,060 --> 00:00:53,270
like how to knead dough or how to whisk some eggs.

18049
00:00:53,720 --> 00:00:58,720
So it's process of inheriting behavior and appearance from an existing class is

18050
00:01:00,350 --> 00:01:04,760
known as class inheritance. When we're talking about class inheritance,

18051
00:01:05,030 --> 00:01:08,600
you can inherit both appearance, so attributes,

18052
00:01:08,960 --> 00:01:13,310
like for example, if you inherited the same eyes as your mother,

18053
00:01:13,610 --> 00:01:16,310
or if you inherited the same nose as your grandfather,

18054
00:01:16,820 --> 00:01:19,100
but you can also inherit behavior.

18055
00:01:19,550 --> 00:01:24,550
So maybe you chop tomatoes in the same way that your dad chops tomatoes.

18056
00:01:25,220 --> 00:01:30,220
And if you believe my mother, I'm lazy in the same way that my dad is lazy.

18057
00:01:30,800 --> 00:01:35,360
So not only can inherit appearance, but we can also inherit behavior.

18058
00:01:36,080 --> 00:01:40,340
Now, how does inheritance actually work in terms of the code? Well,

18059
00:01:40,340 --> 00:01:43,310
we can define a class, let's call it Fish,

18060
00:01:43,760 --> 00:01:46,130
and it has an initializer.

18061
00:01:46,610 --> 00:01:51,260
Now in order to get this Fish class to inherit from another class,

18062
00:01:51,710 --> 00:01:53,600
all we have to do is to

18063
00:01:53,630 --> 00:01:58,630
add a set of parentheses after the name of the class and then provide the

18064
00:01:58,730 --> 00:02:00,680
class that we want to inherit from.

18065
00:02:01,130 --> 00:02:04,820
So in this case our fish is inheriting from the animal class.

18066
00:02:05,360 --> 00:02:10,360
And then in order to get a hold of everything that an animal has and is, so its

18067
00:02:11,510 --> 00:02:15,350
attributes and methods, all we have to do is inside the init,

18068
00:02:15,500 --> 00:02:17,930
add this super().__init__().

18069
00:02:18,410 --> 00:02:21,680
And the super refers to the superclass.

18070
00:02:21,890 --> 00:02:26,890
So basically, initialize everything that the superclass can do in our fish

18071
00:02:27,530 --> 00:02:31,580
class. Let's take a look at this in terms of real code.

18072
00:02:32,180 --> 00:02:32,630
First,

18073
00:02:32,630 --> 00:02:37,630
I'm going to create a animal class and this animal class is going to have an

18074
00:02:37,940 --> 00:02:42,650
initializer where we're able to define some attributes, right?

18075
00:02:42,650 --> 00:02:47,090
So let's say that all animals have, um, two eyes.

18076
00:02:47,180 --> 00:02:51,680
So num_eyes = 2. Now at the same time,

18077
00:02:51,710 --> 00:02:55,820
I'm also gonna define a method associated with this animal class.

18078
00:02:56,150 --> 00:02:58,940
Let's say that all animals know how to breathe.

18079
00:02:59,470 --> 00:03:03,430
So inside this breathe method, I'm going to keep it quite simple.

18080
00:03:03,430 --> 00:03:05,890
I'm just going to say inhale, exhale.

18081
00:03:06,850 --> 00:03:10,210
So that's breathing done. Now later on,

18082
00:03:10,210 --> 00:03:15,210
I decide to define a fish class and this fish class probably also knows how to

18083
00:03:15,820 --> 00:03:20,500
do certain things. So for example, maybe it knows how to swim, right?

18084
00:03:22,900 --> 00:03:26,620
Right now, if I create a object from this Fish class,

18085
00:03:26,650 --> 00:03:30,910
let's say I create an object called nemo that's created from the Fish class,

18086
00:03:31,240 --> 00:03:33,790
then I can say nemo.swim.

18087
00:03:34,840 --> 00:03:39,370
And you can see when I run this code, it says that Nemo is moving in water.

18088
00:03:40,030 --> 00:03:40,240
Now,

18089
00:03:40,240 --> 00:03:45,240
what if I wanted this Fish class to inherit everything that the animal class can

18090
00:03:45,970 --> 00:03:46,600
do,

18091
00:03:46,600 --> 00:03:51,600
including the attribute number of eyes and also the method breathe.

18092
00:03:52,330 --> 00:03:57,330
All I have to do is to add this animal class after the name of the fish class

18093
00:03:58,750 --> 00:03:59,950
inside parentheses,

18094
00:04:00,580 --> 00:04:05,580
and then I have to add the initializer and inside the initializer,

18095
00:04:06,550 --> 00:04:10,540
I have to trigger a call to the superclass, which is in this case,

18096
00:04:10,540 --> 00:04:11,650
the animal class.

18097
00:04:12,040 --> 00:04:16,540
And then I'm going to call the initializer, like this.

18098
00:04:17,019 --> 00:04:22,019
So now what these two parts of the code does is it allows anything that's

18099
00:04:22,390 --> 00:04:27,390
created from my fish class to inherit all of the attributes and methods from the

18100
00:04:28,060 --> 00:04:30,160
superclass, which is the animal class.

18101
00:04:30,610 --> 00:04:35,610
Now I can get my Nemo to start breathing. And you can see 

18102
00:04:35,770 --> 00:04:40,180
if I hit run, then it will also inhale and exhale.

18103
00:04:40,780 --> 00:04:41,800
And in addition,

18104
00:04:42,010 --> 00:04:45,850
if I wanted to print nemo.num_eyes,

18105
00:04:45,940 --> 00:04:48,520
then you can see this is also going to print 2.

18106
00:04:49,030 --> 00:04:54,030
So now my object that's created from the Fish class now has access to all the

18107
00:04:54,490 --> 00:04:59,490
attributes and methods from the superclass that inherited from the animal class.

18108
00:05:00,940 --> 00:05:04,360
Now, what if I wanted to inherit a method?

18109
00:05:04,660 --> 00:05:09,130
So get all the things that it does, for example, the breathe method.

18110
00:05:09,430 --> 00:05:13,690
But what if I wanted to modify it a little bit? So for example,

18111
00:05:13,750 --> 00:05:17,560
a fish does, in fact, breathe, but it kind of breathes underwater.

18112
00:05:18,040 --> 00:05:21,520
So let's say I want to define the breathe function

18113
00:05:21,790 --> 00:05:26,200
and I wanted to have the same functionality as the superclass

18114
00:05:26,200 --> 00:05:30,070
which I'm inheriting from. So I want to print inhale, exhale,

18115
00:05:30,340 --> 00:05:33,640
but I also want to do something extra. Well, in this case,

18116
00:05:33,670 --> 00:05:38,230
we would get hold of the superclass and then call breathe on it.

18117
00:05:39,700 --> 00:05:44,050
This means we're going to do everything that the breathe method from the

18118
00:05:44,050 --> 00:05:47,650
superclass does, so all of this, but afterwards

18119
00:05:47,680 --> 00:05:51,370
we're going to do something a little bit more special. So we're going to say

18120
00:05:51,640 --> 00:05:55,870
we're doing this underwater. Now,

18121
00:05:55,900 --> 00:05:59,330
when this line nemo.breathe gets run,

18122
00:05:59,630 --> 00:06:03,950
you can see what happens is it will print out inhale, exhale

18123
00:06:04,310 --> 00:06:08,540
and this comes from the super class' breathe method here.

18124
00:06:09,080 --> 00:06:13,520
And then afterwards, it will print its own unique twist on breathing,

18125
00:06:13,550 --> 00:06:18,290
which is doing this underwater. By learning about inheritance,

18126
00:06:18,320 --> 00:06:23,030
what it allows us to do is to take an existing class that we've created or

18127
00:06:23,030 --> 00:06:24,380
somebody else has created,

18128
00:06:24,800 --> 00:06:29,690
and then build on top of it without having to reinvent the wheel and redefine

18129
00:06:29,690 --> 00:06:33,200
everything that's in that class. So in the next lesson,

18130
00:06:33,230 --> 00:06:37,700
I'm going to show you how we can inherit from the turtle class to upgrade the

18131
00:06:37,700 --> 00:06:38,420
turtle

18132
00:06:38,420 --> 00:06:43,100
to be able to do extra things such as creating a piece of food or creating a

18133
00:06:43,100 --> 00:06:47,120
scoreboard. For all of that and more, I'll see you on the next lesson.


18134
00:00:00,060 --> 00:00:02,910
All right. So now that we've learned all about inheritance,

18135
00:00:03,000 --> 00:00:06,300
it's time to apply the theory to our snake game,

18136
00:00:06,570 --> 00:00:09,900
and we're going to use it to detect collision with food.

18137
00:00:10,470 --> 00:00:13,590
Our snake should be able to head a piece of food,

18138
00:00:13,860 --> 00:00:17,580
which is just going to be a blue circle. And every time it touches the food,

18139
00:00:17,790 --> 00:00:21,480
the circle moves to a new, random location on the screen.

18140
00:00:22,480 --> 00:00:23,940
If we take a look at our code,

18141
00:00:24,270 --> 00:00:27,780
you can see that the main.py controls the entire game.

18142
00:00:27,930 --> 00:00:32,640
It dictates how the screen should behave and how the snake behaves.

18143
00:00:33,150 --> 00:00:35,160
Now, everything that's to do with a snake,

18144
00:00:35,190 --> 00:00:40,190
it's a parent's and behavior, is all captured inside a class.

18145
00:00:40,650 --> 00:00:43,950
So everything snake related is inside the snake class.

18146
00:00:44,460 --> 00:00:49,460
So what we want to be able to do is to create a new food.py file

18147
00:00:51,510 --> 00:00:55,320
and this food.py is going to be its own class.

18148
00:00:55,890 --> 00:01:00,890
And the food class is going to know how to render itself as a small circle on

18149
00:01:01,170 --> 00:01:04,530
the screen. And then every time the snake touches the food,

18150
00:01:04,950 --> 00:01:09,030
then that food is going to move to a new random location.

18151
00:01:09,690 --> 00:01:13,410
So let's create the initializer for this food class.

18152
00:01:14,010 --> 00:01:18,450
And one of the things that we're going to need to do is we're going to need to

18153
00:01:18,480 --> 00:01:21,990
import turtle. So from the turtle module,

18154
00:01:21,990 --> 00:01:23,880
let's import the turtle class.

18155
00:01:24,570 --> 00:01:29,570
And this piece of food that we're going to see onscreen is going to be a turtle

18156
00:01:30,240 --> 00:01:34,320
object. Instead of creating it as an attribute in this class,

18157
00:01:34,320 --> 00:01:37,710
so self.food = turtle like this,

18158
00:01:38,010 --> 00:01:43,010
what we want to be able to do is we actually want this class, food, to inherit

18159
00:01:43,500 --> 00:01:44,790
from the turtle class.

18160
00:01:45,300 --> 00:01:50,280
So that way this food class is going to have all of the capabilities of the

18161
00:01:50,280 --> 00:01:51,120
turtle class,

18162
00:01:51,450 --> 00:01:55,170
but it's also going to have some specific things that we're going to tell it

18163
00:01:55,200 --> 00:01:59,070
how to do so that it behaves like an actual piece of food.

18164
00:01:59,370 --> 00:02:02,700
Here's a quick challenge. From what you learned in the last lesson,

18165
00:02:02,730 --> 00:02:07,650
can you figure out how to make this food class inherit from the turtle class?

18166
00:02:07,980 --> 00:02:09,300
Pause the video and give that a

18167
00:02:09,410 --> 00:02:10,243
go.

18168
00:02:12,920 --> 00:02:13,310
All right.

18169
00:02:13,310 --> 00:02:17,780
So we mentioned that there's only two steps we need to do. First is after the

18170
00:02:17,780 --> 00:02:18,710
name of the class

18171
00:02:18,740 --> 00:02:22,940
we add some parentheses and then put in the name of the class that we want to

18172
00:02:22,940 --> 00:02:26,030
inherit from. So in this case, it's the turtle class.

18173
00:02:26,630 --> 00:02:31,520
And then the next thing we need to do is we need to call the turtle's init

18174
00:02:31,520 --> 00:02:34,550
method inside the food's init method.

18175
00:02:35,150 --> 00:02:39,470
And you can see that as soon as you've added this inheritance here, this init

18176
00:02:39,470 --> 00:02:44,090
starts giving us a warning. And when you click on it, you can see

18177
00:02:44,090 --> 00:02:47,360
it says call to __init__ of superclass is missed.

18178
00:02:47,690 --> 00:02:49,970
So it actually knows what we need to do next.

18179
00:02:50,120 --> 00:02:51,950
That means if we click on the light bulb,

18180
00:02:52,190 --> 00:02:56,930
we can actually automatically just add in the superclass' call. This,

18181
00:02:56,990 --> 00:03:00,010
of course, you could just type it out and it's good for practice,

18182
00:03:00,340 --> 00:03:03,280
but in case you're ever wondering if you get these warnings,

18183
00:03:03,490 --> 00:03:06,850
you can always take a look at what PyCharm is recommending.

18184
00:03:07,660 --> 00:03:12,660
Now we've actually created our food class and we've inherited from the turtle

18185
00:03:12,700 --> 00:03:13,533
class.

18186
00:03:13,690 --> 00:03:18,580
What that means is we can now start using things that are from the turtle class.

18187
00:03:19,360 --> 00:03:22,750
For example, I can straight up say self.shape,

18188
00:03:22,960 --> 00:03:24,460
and it knows what shape is.

18189
00:03:24,760 --> 00:03:29,470
This is a method that the turtle class has that I'm now going to modify in my

18190
00:03:29,470 --> 00:03:33,070
food class. So when I initialize a new piece of food,

18191
00:03:33,370 --> 00:03:36,160
I'm going to make sure that it has a circular shape,

18192
00:03:36,820 --> 00:03:40,780
and I'm also going to get it to pen up so that it doesn't draw.

18193
00:03:41,410 --> 00:03:44,020
And then I'm going to define it's size.

18194
00:03:44,470 --> 00:03:47,290
And there's something called a shape size which I can use.

18195
00:03:47,860 --> 00:03:52,860
And what this allows me to do is to stretch the turtle along its length and

18196
00:03:52,990 --> 00:03:56,890
along its width. Now I'm not actually going to stretch it bigger than it is.

18197
00:03:57,130 --> 00:03:59,350
It's normally 20 by 20 pixels,

18198
00:03:59,680 --> 00:04:02,860
but I wanna turn it into 10 by 10 pixels.

18199
00:04:03,340 --> 00:04:06,160
So I'm going to stretch the length by 0.5,

18200
00:04:06,160 --> 00:04:07,780
so I'm basically going to half it.

18201
00:04:08,200 --> 00:04:11,260
And then I'm going to stretch the width also by 0.5.

18202
00:04:11,740 --> 00:04:15,400
So now it should be a 10 by 10 circle

18203
00:04:15,700 --> 00:04:19,240
which I've created by defining the shape size. Now,

18204
00:04:19,269 --> 00:04:21,490
remember all of these methods, shape, size,

18205
00:04:21,490 --> 00:04:26,380
pen up, shape, comes from this turtle superclass and we're only able to use it

18206
00:04:26,650 --> 00:04:31,650
because we're inheriting from the superclass so that our food class is now also

18207
00:04:32,980 --> 00:04:37,780
sort of a turtle, but it's more like a souped-up turtle. Finally,

18208
00:04:37,780 --> 00:04:41,740
it let's go ahead and define the color which I'm going to set as blue,

18209
00:04:42,070 --> 00:04:44,620
but of course, feel free to set it as anything you like.

18210
00:04:45,190 --> 00:04:50,190
And I'm also going to set the speed of my turtle to fastest. This way

18211
00:04:51,310 --> 00:04:55,720
I don't have to look at the animation of the food being created at the center of

18212
00:04:55,720 --> 00:04:58,840
the screen, and then moving to the location that I want it to.

18213
00:04:59,560 --> 00:05:03,580
Speaking of moving, we're going to need to use the goto to get it

18214
00:05:03,580 --> 00:05:06,790
to go to a random X, Y location.

18215
00:05:07,150 --> 00:05:11,950
So let's import the random module and let's create a random X,

18216
00:05:13,420 --> 00:05:18,420
which is going to be random.randint. Remember that our screen is 600 by 600

18217
00:05:20,500 --> 00:05:24,820
so that means our X-axis goes from -300 to +300

18218
00:05:25,090 --> 00:05:29,560
and our Y-axis goes from +300 to -300.

18219
00:05:30,010 --> 00:05:33,430
Now we don't want our food to be right at the edge of the screen,

18220
00:05:33,430 --> 00:05:37,450
cause it will be really hard to get the snake to go to right at the edge.

18221
00:05:37,480 --> 00:05:39,430
It'll probably just die on the wall.

18222
00:05:39,850 --> 00:05:42,100
So we want to maybe subtract this a little bit.

18223
00:05:42,100 --> 00:05:47,100
So we can go from -280 to +280 and the same on the Y-axis.

18224
00:05:47,950 --> 00:05:52,950
So let's generate a random integer from -280 to +280

18225
00:05:54,340 --> 00:05:59,330
and let's generate a random Y-integer in the same range.

18226
00:05:59,780 --> 00:06:04,780
So now we can tell our food to go to a random X and a random Y. All of this

18227
00:06:07,100 --> 00:06:08,180
is going to happen

18228
00:06:08,240 --> 00:06:12,590
as soon as we create a new food object from the food class.

18229
00:06:12,860 --> 00:06:16,760
Remember, whenever you initialize a new object from the class, the

18230
00:06:16,760 --> 00:06:20,420
init gets called. Back in our main.py

18231
00:06:20,600 --> 00:06:25,280
right below where we initialized our snake, we're going to initialize our food.

18232
00:06:25,490 --> 00:06:29,750
So food equals the food class and then parentheses.

18233
00:06:30,290 --> 00:06:35,290
And of course we need to get hold of our Food class from the food file,

18234
00:06:36,800 --> 00:06:37,633
like this.

18235
00:06:38,270 --> 00:06:42,530
Another thing you'll notice is that this turtle is now grayed out because we're

18236
00:06:42,530 --> 00:06:47,360
not using that class anywhere inside the main.py. So we can delete that

18237
00:06:47,390 --> 00:06:49,880
which gets rid of all our warnings on this page

18238
00:06:50,030 --> 00:06:54,170
and we get the green checkmark. Our food.py looks good,

18239
00:06:54,320 --> 00:06:56,330
our snake.py looks good,

18240
00:06:56,720 --> 00:07:00,020
and we're now ready to go ahead and run this code.

18241
00:07:00,800 --> 00:07:04,760
Notice how we've got our snake moving around on screen.

18242
00:07:05,000 --> 00:07:08,030
And at this point it doesn't really matter about the walls.

18243
00:07:08,030 --> 00:07:11,630
It's just moving around anywhere it likes. But more importantly,

18244
00:07:11,690 --> 00:07:16,580
we've got our food being randomly generated on the screen right here.

18245
00:07:17,270 --> 00:07:22,270
Now the next step is how can we detect when the snake and the food have come

18246
00:07:22,910 --> 00:07:27,500
into contact and then to tell the food to move itself to a new

18247
00:07:27,530 --> 00:07:32,150
random location? Well, we're going to do that inside our main.py.

18248
00:07:32,360 --> 00:07:36,920
Right after we've got our screen updating, our snake moving,

18249
00:07:36,980 --> 00:07:38,630
then we're going to detect

18250
00:07:40,310 --> 00:07:42,410
collision with food.

18251
00:07:43,070 --> 00:07:47,600
And we're going to do that by using a method from the turtle class called 

18252
00:07:47,630 --> 00:07:48,463
distance.

18253
00:07:48,860 --> 00:07:53,860
The distance method works by comparing the distance from this turtle to whatever

18254
00:07:55,160 --> 00:07:57,890
it is that you put inside the parentheses.

18255
00:07:58,310 --> 00:08:02,720
So the X could be a pair of numbers, X and Y,

18256
00:08:03,140 --> 00:08:06,200
or it could simply just be a turtle instance.

18257
00:08:06,500 --> 00:08:10,190
So you're comparing this turtle against another turtle,

18258
00:08:10,340 --> 00:08:13,670
and you're trying to get hold of the distance between the two turtles.

18259
00:08:14,150 --> 00:08:19,150
So what that means is we can check to see if the distance from the first segment

18260
00:08:20,990 --> 00:08:21,823
of the snake,

18261
00:08:21,980 --> 00:08:26,960
so it remember that would be snake.head.distance,

18262
00:08:27,920 --> 00:08:31,850
and then the distance that we want to know is what is the distance from the

18263
00:08:31,850 --> 00:08:35,809
snake's head to the food. At this point,

18264
00:08:35,809 --> 00:08:39,289
you can check to see if it is less than a certain amount,

18265
00:08:39,590 --> 00:08:44,590
then it's pretty likely that the snake head is now colliding with the food.

18266
00:08:45,200 --> 00:08:48,260
So we know that the food is 10 by 10.

18267
00:08:48,530 --> 00:08:51,260
So if we add a bit of a buffer, let's just say,

18268
00:08:51,440 --> 00:08:56,440
if this snake head is within 15 pixels of the food or even closer,

18269
00:08:57,060 --> 00:08:59,790
so if the distance is less than 15,

18270
00:09:00,030 --> 00:09:02,760
then we can be pretty much certain that they've collided.

18271
00:09:03,090 --> 00:09:06,990
So let's go ahead and print something. I'll just write nom nom nom.

18272
00:09:07,440 --> 00:09:12,440
So if we go ahead and run our code and let's just get our snake back into view,

18273
00:09:14,160 --> 00:09:18,900
and if I now go and touch this piece of food, if I can,

18274
00:09:19,650 --> 00:09:22,890
then you can see nom nom nom being printed in the console.

18275
00:09:23,280 --> 00:09:25,830
Now let's go ahead and touch it again. You can see,

18276
00:09:25,830 --> 00:09:28,410
as soon as I collide with that food,

18277
00:09:28,680 --> 00:09:31,860
I get that print statement executing.

18278
00:09:33,630 --> 00:09:36,990
So now, instead of just writing nom nom nom,

18279
00:09:37,380 --> 00:09:39,210
let's figure out what we need to do next.

18280
00:09:39,240 --> 00:09:44,240
What we want to happen is the food should go to a new random location.

18281
00:09:45,390 --> 00:09:48,690
And, of course, that comes from this part of the code.

18282
00:09:49,200 --> 00:09:54,200
So why don't we go ahead and create a new method which we'll call refresh.

18283
00:09:54,960 --> 00:09:59,960
And this refresh method is going to create a new random X,

18284
00:10:00,030 --> 00:10:04,950
a new random Y, and then get the food to go to that new, random location.

18285
00:10:05,730 --> 00:10:10,680
Then inside our init, we can simply just call self.refresh.

18286
00:10:11,400 --> 00:10:15,420
So be careful that you didn't right reset because that's one of the methods from

18287
00:10:15,480 --> 00:10:17,850
the turtle class that we're inheriting from.

18288
00:10:18,150 --> 00:10:22,830
But what we actually want is to call this refresh method so that the food goes

18289
00:10:22,830 --> 00:10:27,300
to a new random location. And then back inside our main.py,

18290
00:10:27,720 --> 00:10:30,360
when the snake head collides with the food,

18291
00:10:30,660 --> 00:10:35,130
then we're going to get the food to refresh its own location.

18292
00:10:35,610 --> 00:10:39,780
So check this out. Now, when I hit the food,

18293
00:10:41,400 --> 00:10:44,820
then you can see the food now appears at a new,

18294
00:10:44,880 --> 00:10:48,870
random location. Like that. Now,

18295
00:10:48,900 --> 00:10:53,340
depending on how accurate you want the snake to hit the food,

18296
00:10:53,730 --> 00:10:55,860
so it might need to hit it dead on,

18297
00:10:56,100 --> 00:11:01,100
or if you're happy with it just gliding past and counting that as a collision,

18298
00:11:01,440 --> 00:11:06,180
then you could decrease the number here from 15 to 10.

18299
00:11:06,540 --> 00:11:11,520
Now I've done a bit of testing and this number seems to be the best distance in

18300
00:11:11,520 --> 00:11:13,230
order to get a valid collision,

18301
00:11:13,560 --> 00:11:18,060
but feel free to tweak around with the number and see how it goes. There we go.

18302
00:11:18,060 --> 00:11:22,110
We've managed to figure out how to create a piece of food by inheriting from the

18303
00:11:22,110 --> 00:11:25,620
turtle class, get the food to be generated,

18304
00:11:25,830 --> 00:11:28,650
and then to move to a new random location

18305
00:11:29,070 --> 00:11:31,650
every time the snake head collides with the food.

18306
00:11:32,250 --> 00:11:33,870
Now I know that in the snake game,

18307
00:11:33,930 --> 00:11:38,460
the snake segments increase once it hits a piece of food,

18308
00:11:38,790 --> 00:11:43,230
but we're only going to add that functionality at the very end of this project

18309
00:11:43,530 --> 00:11:46,080
when we're detecting collision with the snake tail.

18310
00:11:46,230 --> 00:11:47,910
So don't worry about that for now.


18311
00:00:00,420 --> 00:00:02,580
Guys, we've already come really, really far.

18312
00:00:03,090 --> 00:00:08,090
We've done all of this and now we're on this stage, creating a scoreboard.

18313
00:00:08,760 --> 00:00:13,760
So what we want is to be able to write some text in our program that keeps track

18314
00:00:13,950 --> 00:00:18,390
of the score, of how many pieces of food we've actually managed to eat. Now,

18315
00:00:18,390 --> 00:00:22,620
the score should update every single time we hit a new piece of food and it's

18316
00:00:22,620 --> 00:00:25,560
going to stay there and keep updating itself

18317
00:00:25,620 --> 00:00:27,480
every time we hit a new piece of food.

18318
00:00:28,710 --> 00:00:32,729
Now this scoreboard is also going to be a turtle.

18319
00:00:33,330 --> 00:00:38,160
So one of the things that you can do with your turtle is you can get it to write

18320
00:00:38,250 --> 00:00:39,330
a piece of text.

18321
00:00:40,140 --> 00:00:43,620
And this is what the method looks like in the documentation.

18322
00:00:44,040 --> 00:00:48,570
You can tell it what it should write, what kind of alignment you want,

18323
00:00:48,570 --> 00:00:50,250
do you want it to be in the center of the screen,

18324
00:00:50,250 --> 00:00:54,570
on the left or right side of the screen? And then what kind of font you want?

18325
00:00:55,110 --> 00:00:58,860
So the font name, font size and font type,

18326
00:00:58,870 --> 00:01:02,820
so normal or heavy or bold or underlined,

18327
00:01:03,510 --> 00:01:05,940
and we would call it more or less like this.

18328
00:01:06,900 --> 00:01:08,520
So here's a challenge for you.

18329
00:01:08,820 --> 00:01:13,820
I want you to go ahead and create a new file called a scoreboard.py.

18330
00:01:15,420 --> 00:01:20,370
And inside this file, I want you to create a new scoreboard class.

18331
00:01:20,850 --> 00:01:21,060
Now,

18332
00:01:21,060 --> 00:01:26,060
this scoreboard class is going to inherit from the turtle class,

18333
00:01:26,430 --> 00:01:28,560
just as we did with the food class.

18334
00:01:29,190 --> 00:01:31,950
And then the scoreboard is going to be a turtle

18335
00:01:32,130 --> 00:01:37,130
which knows how to keep track of the score and how to display it in our program.

18336
00:01:38,670 --> 00:01:42,090
Feel free to choose whatever font you want, whatever size you want,

18337
00:01:42,360 --> 00:01:46,740
but the end outcome we're looking for is something that looks a bit like this

18338
00:01:47,160 --> 00:01:51,210
and the score is going to need to be tracked inside that scoreboard class.

18339
00:01:51,540 --> 00:01:55,530
And it needs to be increased by one every single time the snake eats a piece of

18340
00:01:55,530 --> 00:01:59,550
food. You're going to need the help of the documentation,

18341
00:01:59,550 --> 00:02:04,470
you're going to need to read up on how this turtle.write method works,

18342
00:02:04,860 --> 00:02:09,509
and you're also probably going to need this turtle.clear so that you clear

18343
00:02:09,509 --> 00:02:11,910
the writing every time you update the score.

18344
00:02:12,510 --> 00:02:16,110
Have a think about how you would solve this and then go ahead,

18345
00:02:16,170 --> 00:02:17,820
pause the video and give it a go.

18346
00:02:18,740 --> 00:02:22,070
[inaudible]

18347
00:02:22,760 --> 00:02:23,090
All right.

18348
00:02:23,090 --> 00:02:27,230
So the first thing I'm going to do is I'm going to create my scoreboard class.

18349
00:02:27,860 --> 00:02:29,030
And as I mentioned,

18350
00:02:29,030 --> 00:02:32,990
this class needs to inherit from the turtle class.

18351
00:02:33,230 --> 00:02:34,760
So from the turtle module,

18352
00:02:34,790 --> 00:02:39,790
let's get hold of the actual turtle class so we can use it inside this file.

18353
00:02:40,640 --> 00:02:45,440
And then I'm going to add it to my scoreboard as the superclass.

18354
00:02:46,040 --> 00:02:48,140
Now, if I create my inits,

18355
00:02:48,230 --> 00:02:53,230
I can go ahead and use this light bulb to insert the superclass call.

18356
00:02:54,290 --> 00:02:59,290
So now my scoreboard is a class that can do everything a turtle class do.

18357
00:03:00,460 --> 00:03:05,460
And one of the things I want it to do is I want it to keep track of the score.

18358
00:03:06,760 --> 00:03:08,830
So let's say it starts out at zero,

18359
00:03:09,130 --> 00:03:14,080
and we want to be able to write this onto the screen. So we can say self.

18360
00:03:14,080 --> 00:03:18,310
write, and let's use an f-string to say score,

18361
00:03:18,790 --> 00:03:23,290
and then we can insert the self.score value in here.

18362
00:03:24,010 --> 00:03:29,010
And then we can add whether if we want it to be aligned to the center,

18363
00:03:29,410 --> 00:03:34,210
for example, and then we can also add a font if we need to.

18364
00:03:34,600 --> 00:03:37,330
Let's use the same font as here, Arial,

18365
00:03:37,660 --> 00:03:39,760
and then we're going to make the font size a bit bigger,

18366
00:03:39,790 --> 00:03:41,350
and then we're going to keep it as normal.

18367
00:03:42,100 --> 00:03:46,240
So I'm going to choose an Arial font, size 24,

18368
00:03:46,540 --> 00:03:48,700
and then the style is going to be normal.

18369
00:03:50,500 --> 00:03:51,820
And as you can see here,

18370
00:03:51,820 --> 00:03:56,380
I'm getting a warning here and it's telling me that it expected a tuple,

18371
00:03:56,590 --> 00:03:58,840
but instead it just got a single string.

18372
00:03:59,110 --> 00:04:02,920
So let's just compare this against the documentation code

18373
00:04:03,310 --> 00:04:07,690
and you can see that this is meant to be a tuple instead of just a single piece

18374
00:04:07,690 --> 00:04:10,120
of string. So let me go ahead and fix that.

18375
00:04:10,600 --> 00:04:13,300
Let's add some parentheses around this,

18376
00:04:13,840 --> 00:04:16,839
and then this Arial is going to be a string,

18377
00:04:17,140 --> 00:04:21,100
this 24 is going to be a number and the normal is going to be a string.

18378
00:04:21,339 --> 00:04:23,170
And now our errors have gone away.

18379
00:04:23,890 --> 00:04:26,770
So now going back to our main.py

18380
00:04:27,130 --> 00:04:29,500
let's go ahead and create our scoreboard

18381
00:04:31,330 --> 00:04:34,630
as an object from the scoreboard class,

18382
00:04:34,900 --> 00:04:38,290
which of course means that we need to import it into this file.

18383
00:04:38,530 --> 00:04:43,530
So from the scoreboard file import the Scoreboard class.

18384
00:04:45,220 --> 00:04:48,760
And now if I run this code, somewhere in the middle

18385
00:04:48,760 --> 00:04:50,560
there I've got a scoreboard,

18386
00:04:51,130 --> 00:04:55,540
but because it's actually black, you can't really see it.

18387
00:04:56,200 --> 00:05:01,200
It's really important that we change the color of the scoreboard turtle before

18388
00:05:02,770 --> 00:05:04,270
we write the text,

18389
00:05:04,510 --> 00:05:08,590
because if it was written as black and then we change it to white,

18390
00:05:08,620 --> 00:05:10,330
you still won't notice a difference.

18391
00:05:10,780 --> 00:05:15,780
So if I change the self.color right here to white and I hit run,

18392
00:05:16,690 --> 00:05:19,000
then you can see that scoreboard showing up.

18393
00:05:19,270 --> 00:05:23,530
But if I move this line of code to after we've written it,

18394
00:05:23,830 --> 00:05:26,590
then it won't actually make a difference. It's still written in black

18395
00:05:26,590 --> 00:05:29,770
somewhere on there. Now, in addition,

18396
00:05:29,800 --> 00:05:34,800
we want to get rid of the turtle that shows up when we create our scoreboard

18397
00:05:35,290 --> 00:05:37,990
because all we want it to do is we want it to write,

18398
00:05:38,050 --> 00:05:42,850
we don't want it to actually show up a turtle. Self.hideturtle, and

18399
00:05:43,210 --> 00:05:45,280
now that little arrow disappears.

18400
00:05:45,790 --> 00:05:49,450
And we probably don't want this scoreboard to be bang in the middle.

18401
00:05:49,540 --> 00:05:51,010
So let's move it.

18402
00:05:51,340 --> 00:05:55,510
Let's tell it to go to a particular X and Y position.

18403
00:05:56,560 --> 00:06:00,290
Now, in example, here, I've got it in the center, right at the top.

18404
00:06:01,130 --> 00:06:05,960
So we can keep the X as zero, but let's move the Y further up to the top.

18405
00:06:05,960 --> 00:06:10,700
So let's say something around 270. And now if we test it again,

18406
00:06:10,970 --> 00:06:14,540
you can see that the turtle went to the top,

18407
00:06:14,840 --> 00:06:19,490
but this happened after this line was already written. So again,

18408
00:06:19,520 --> 00:06:22,520
this needs to happen before we write.

18409
00:06:23,270 --> 00:06:26,390
And now if we refresh, you can see it's moved to the top,

18410
00:06:26,840 --> 00:06:30,470
but it's also drawn on a path to do that. So instead of doing that,

18411
00:06:30,500 --> 00:06:35,500
we can tell it to self.penup before it moves to this location.

18412
00:06:38,480 --> 00:06:43,250
There we have it. We've got our score showing up at the top. Now,

18413
00:06:43,250 --> 00:06:48,250
all that's left to do is to keep track of the score and to increase it whenever

18414
00:06:48,620 --> 00:06:50,390
the snake hits a new piece of food.

18415
00:06:51,020 --> 00:06:54,500
So we know that that happens inside this if statement,

18416
00:06:54,860 --> 00:06:59,000
when the snake head collides with the food, then we refresh the food,

18417
00:06:59,240 --> 00:07:01,730
but we also want to increase the score.

18418
00:07:02,330 --> 00:07:07,250
So let's go ahead and create a function inside our scoreboard class called

18419
00:07:07,280 --> 00:07:08,990
increase_score.

18420
00:07:09,830 --> 00:07:14,830
And this function is going to take the self.score and add one to it.

18421
00:07:17,360 --> 00:07:20,750
And then it's going to call self.write.

18422
00:07:22,220 --> 00:07:24,590
So now back inside our main.py,

18423
00:07:24,920 --> 00:07:29,920
we can get whole of our scoreboard object and tell it to increase score

18424
00:07:30,860 --> 00:07:35,000
whenever the snake collides with the food. So let's test this again.

18425
00:07:35,660 --> 00:07:39,110
And if I manage to hit the food, 

18426
00:07:42,730 --> 00:07:46,090
then you can see that the score is being updated,

18427
00:07:46,330 --> 00:07:51,330
but what's happening is that the score is being written on top of the previous

18428
00:07:52,210 --> 00:07:55,600
scores. So it's just all overlapping with each other.

18429
00:07:56,980 --> 00:07:57,940
So instead,

18430
00:07:57,970 --> 00:08:02,290
what we need to do is between each time we update the scoreboard,

18431
00:08:02,620 --> 00:08:05,860
we actually have to delete what was previously on there.

18432
00:08:06,910 --> 00:08:09,940
And because we've now got these two lines

18433
00:08:09,970 --> 00:08:12,730
which are pretty much identical in two places,

18434
00:08:13,240 --> 00:08:17,860
let's go ahead and create a function instead. We'll call update_scoreboard,

18435
00:08:19,450 --> 00:08:23,560
and inside this function, we'll have our self.write.

18436
00:08:28,720 --> 00:08:33,720
And we can call self.update_scoreboard here and also here.

18437
00:08:39,880 --> 00:08:44,110
So now before we increase the score and call update scoreboard,

18438
00:08:44,440 --> 00:08:49,440
we can call self.clear to clear the previous text that was written by this

18439
00:08:50,620 --> 00:08:55,090
turtle, which is the scoreboard. Now, if we run this again

18440
00:08:55,860 --> 00:08:57,840
you can see that when I do score,

18441
00:08:58,140 --> 00:09:03,000
my scoreboard is wiped and then the new text code is written.

18442
00:09:04,380 --> 00:09:07,560
So it doesn't overlap with the previous scoreboard.

18443
00:09:08,730 --> 00:09:13,730
The final thing I want to do just as a finishing touch is I don't like having

18444
00:09:13,830 --> 00:09:18,420
these hard-coded pieces of text inside the body of my programs.

18445
00:09:18,810 --> 00:09:23,810
So instead it would be much better if we could take these pieces of texts out

18446
00:09:24,240 --> 00:09:25,890
and create constants with them.

18447
00:09:25,920 --> 00:09:30,920
So we could have one that's called ALIGNMENT set to center,

18448
00:09:31,230 --> 00:09:33,120
and then another one called a FONT,

18449
00:09:33,480 --> 00:09:36,240
which is going to be set to this tuple.

18450
00:09:37,170 --> 00:09:40,350
And then I can use these constants down here,

18451
00:09:40,350 --> 00:09:45,210
so align = ALIGNMENT, font = FONT. That way,

18452
00:09:45,210 --> 00:09:49,380
when I decide that I want to change something about the alignment or the font,

18453
00:09:49,620 --> 00:09:51,750
so for example instead of Arial,

18454
00:09:51,780 --> 00:09:55,350
I might go for something that is a little bit more video-gamey

18455
00:09:55,530 --> 00:09:57,420
sort of font like courier,

18456
00:09:57,840 --> 00:10:01,560
then I don't have to dig through the body of my program to find out where it was

18457
00:10:01,560 --> 00:10:04,170
defined. I can just look at the top

18458
00:10:04,350 --> 00:10:09,350
which contains all the constants and then fix it right here. That shouldn't have

18459
00:10:09,570 --> 00:10:14,570
changed any of the functionality. It's just made our scoreboard look a bit more

18460
00:10:14,880 --> 00:10:18,480
video-gamey, and you can see how it works perfectly.


18461
00:00:00,150 --> 00:00:03,450
We've coded up the majority of this game now already.

18462
00:00:03,960 --> 00:00:08,960
All that's left to do is to define the two situations where we might get game

18463
00:00:09,060 --> 00:00:09,893
over.

18464
00:00:10,110 --> 00:00:14,280
And that is detecting collision with wall and detecting collision with tail.

18465
00:00:14,730 --> 00:00:18,360
So let's tackle the easier one first. We want the snake

18466
00:00:18,450 --> 00:00:20,640
once it gets past a certain point

18467
00:00:20,880 --> 00:00:25,800
that's very close to the four walls to trigger the game over sequence.

18468
00:00:26,400 --> 00:00:31,400
So we know that we have a 600 by 600 screen and the X and Y axis go to 300 and

18469
00:00:35,340 --> 00:00:37,980
-300 at all four sides.

18470
00:00:38,520 --> 00:00:42,960
So if we create a boundary box that say 280 here,

18471
00:00:42,960 --> 00:00:45,840
280 here, -280 and -280,

18472
00:00:46,290 --> 00:00:49,800
then as soon as the snake head touches that position,

18473
00:00:50,160 --> 00:00:52,290
then once it zoomed past it,

18474
00:00:52,410 --> 00:00:56,040
then we can say that the snake has pretty much hit the wall.

18475
00:00:56,970 --> 00:00:59,010
Now this number is not perfect,

18476
00:00:59,040 --> 00:01:02,370
it's just what I found to work after doing a lot of testing.

18477
00:01:02,760 --> 00:01:06,060
And this is the case with a lot of games, you have to test it, run it,

18478
00:01:06,270 --> 00:01:10,950
see if it works the way you want it to. But let's go ahead and add a comment,

18479
00:01:11,010 --> 00:01:13,830
detect collision with a wall,

18480
00:01:14,430 --> 00:01:16,140
and let's create our if statement.

18481
00:01:16,440 --> 00:01:21,440
So what we want to say is if the snake.head has a X coordinate that is

18482
00:01:26,250 --> 00:01:30,210
greater than 280, so it's gone too far to the right,

18483
00:01:30,690 --> 00:01:35,690
or if it has a X coordinate that is less than -280,

18484
00:01:37,290 --> 00:01:39,150
so it's gone too far to the left,

18485
00:01:39,840 --> 00:01:43,080
or if it has a Y coordinate

18486
00:01:43,290 --> 00:01:47,040
that's greater than 280, so too far to the top,

18487
00:01:47,460 --> 00:01:52,460
or if it has a Y coordinate that is less than -280

18488
00:01:53,580 --> 00:01:58,500
so it's gone too far to the bottom, if any of these four situations occur

18489
00:01:58,560 --> 00:02:01,560
then it basically means that the snake has hit the wall.

18490
00:02:01,980 --> 00:02:05,160
So what do we want to happen when the snake hits the wall? Well,

18491
00:02:05,160 --> 00:02:10,160
we want to change this game_is_on to false because what that's going to allow us

18492
00:02:11,070 --> 00:02:14,280
to do is to exit the while loop and basically

18493
00:02:14,610 --> 00:02:17,580
end the snake movement and end the game.

18494
00:02:18,270 --> 00:02:19,920
Let's go ahead and test this out.

18495
00:02:20,040 --> 00:02:24,090
So let's let the snake hit the wall and you can see it no longer continues

18496
00:02:24,090 --> 00:02:28,110
moving forward. But for the user, this might be a little bit confusing.

18497
00:02:28,110 --> 00:02:32,790
It doesn't seem like it's actually game over. It seems like it's just crushed.

18498
00:02:33,360 --> 00:02:35,820
So let's go ahead into our scoreboard

18499
00:02:35,850 --> 00:02:40,380
which does a lot of the writing and let's create a new function

18500
00:02:40,440 --> 00:02:42,510
which is going to be called game_over.

18501
00:02:43,770 --> 00:02:48,770
And this game_over function is going to simply just write some texts,

18502
00:02:49,260 --> 00:02:51,030
not the score, but instead

18503
00:02:51,030 --> 00:02:56,030
it's just going to write 'GAME OVER' onto the screen using the same alignment and

18504
00:02:56,760 --> 00:03:01,210
the same font. But instead of it at the position

18505
00:03:01,210 --> 00:03:03,790
which we initially defined which is right at the top,

18506
00:03:04,210 --> 00:03:09,130
let's go ahead and get it to go to the center, which is at (0, 0).

18507
00:03:09,700 --> 00:03:12,040
So now when the snake hits the wall,

18508
00:03:12,370 --> 00:03:14,770
not only does the snake stop moving,

18509
00:03:15,040 --> 00:03:19,720
but we're also going to get the scoreboard to trigger the game over a sequence.

18510
00:03:20,560 --> 00:03:24,730
So that means when it hits the wall, game over shows up in the middle of the

18511
00:03:24,730 --> 00:03:28,360
screen, and you can still see the score that was written previously

18512
00:03:28,660 --> 00:03:33,100
because we don't actually hit clear before we write this game over.

18513
00:03:33,700 --> 00:03:37,720
And this means that the user can see that the game is over, the snake has stopped

18514
00:03:37,750 --> 00:03:40,570
moving, and they can see their final score.

18515
00:03:42,160 --> 00:03:46,780
So let's try to score some points. And once I've done that,

18516
00:03:46,810 --> 00:03:51,550
I'm gonna hit a wall and it's game over and I can see that my score was 2.


18517
00:00:00,660 --> 00:00:03,000
All right guys, we're at the final stretch.

18518
00:00:03,210 --> 00:00:08,189
All we have left to do now is to figure out how we can detect when the snake

18519
00:00:08,400 --> 00:00:12,810
collides with its own tail. As a snake gets longer and longer,

18520
00:00:12,900 --> 00:00:17,900
it's more likely that at some point the head might hit some part of the tail. And

18521
00:00:18,690 --> 00:00:21,150
in the snake game, this means it's game over.

18522
00:00:21,480 --> 00:00:25,800
So we have to figure out how we can detect this and then trigger the game over

18523
00:00:25,800 --> 00:00:26,633
sequence.

18524
00:00:28,050 --> 00:00:33,050
One of the things that we've left until now is a way of extending the snake

18525
00:00:34,560 --> 00:00:37,110
every time it gets some food,

18526
00:00:37,530 --> 00:00:42,120
because at the moment what's happening is our snake is staying the same size

18527
00:00:42,150 --> 00:00:46,710
with only three segments. But now we need to change that.

18528
00:00:47,100 --> 00:00:52,080
We need to add a segment to the snake every single time it hits the food so that

18529
00:00:52,080 --> 00:00:56,070
it grows in length and we can start detecting collision with the tail.

18530
00:00:57,420 --> 00:01:00,750
The place we're going to do that is inside our snake class.

18531
00:01:01,290 --> 00:01:05,610
So we're going to create a function that's going to be called extend.

18532
00:01:06,540 --> 00:01:11,520
And this extend function is going to add a new segment to the snake.

18533
00:01:12,660 --> 00:01:14,910
So we're probably going to need another function,

18534
00:01:14,910 --> 00:01:17,700
which is going to be called add_segment,

18535
00:01:18,300 --> 00:01:23,300
and this is going to require the position to add the segment to essentially.

18536
00:01:25,350 --> 00:01:29,340
Notice how this is the part of the code where we actually add the segment.

18537
00:01:29,610 --> 00:01:33,780
So lets take it out of the for loop and put it into the add_segment.

18538
00:01:34,650 --> 00:01:39,450
And so we can now call this function, self.add_segment

18539
00:01:39,570 --> 00:01:42,420
and then pass in this position that we're looping through.

18540
00:01:42,990 --> 00:01:46,740
These two functions together are going to create our snake.

18541
00:01:47,190 --> 00:01:48,210
But in addition,

18542
00:01:48,240 --> 00:01:52,920
we're going to use this add_segment when we want to extend the snake.

18543
00:01:53,430 --> 00:01:57,690
But what position do we want that last piece to go to? Well,

18544
00:01:57,720 --> 00:02:02,720
we're going to get hold of the list of segments and we're going to get hold of

18545
00:02:02,880 --> 00:02:07,080
the last one. Remember that with lists in Python,

18546
00:02:07,200 --> 00:02:07,950
you can write

18547
00:02:07,950 --> 00:02:12,660
a negative number so that you start counting from the end of the list.

18548
00:02:13,020 --> 00:02:16,680
For example, if our list was 1, 2, and 3,

18549
00:02:17,040 --> 00:02:20,610
then this list at minus one position would be

18550
00:02:20,840 --> 00:02:21,673
3.

18551
00:02:22,880 --> 00:02:23,420
Effectively

18552
00:02:23,420 --> 00:02:27,770
we're getting hold of the last segment in our list and then we're going to get

18553
00:02:27,770 --> 00:02:30,620
hold of it's position. And remember,

18554
00:02:30,620 --> 00:02:35,620
this is a method that comes from the turtle class and we can call it by writing

18555
00:02:36,350 --> 00:02:40,250
position and then parentheses and we'll get the position of that segment.

18556
00:02:40,760 --> 00:02:42,470
And then we're going to add this new segment

18557
00:02:42,680 --> 00:02:45,410
to the same position as the last segment.

18558
00:02:46,640 --> 00:02:49,670
So now if inside our main.py

18559
00:02:50,210 --> 00:02:53,660
every time our snake collides with the food,

18560
00:02:53,960 --> 00:02:56,270
then not only are we going to refresh the food,

18561
00:02:56,540 --> 00:02:59,830
but we're also going to get the snake to extend itself.

18562
00:03:00,370 --> 00:03:05,370
So lets go ahead and run this game again. And notice how this time,

18563
00:03:05,860 --> 00:03:07,870
once I hit the food,

18564
00:03:08,200 --> 00:03:12,190
the snake actually extends itself and it gets longer each time.

18565
00:03:13,030 --> 00:03:18,030
So now we're able to think about how to detect tail collision because as the

18566
00:03:18,820 --> 00:03:23,380
snake gets longer, this tail collision becomes more of a problem.

18567
00:03:23,740 --> 00:03:26,980
We're more likely to get tangled with our own tail.

18568
00:03:28,870 --> 00:03:32,320
Let's go ahead and add a comment here which will say 'Detect

18569
00:03:32,380 --> 00:03:37,380
collision with tail.' And the way that we want to check this is we wanna say if

18570
00:03:39,760 --> 00:03:44,620
the head collides with any segment

18571
00:03:46,330 --> 00:03:48,040
in the tail,

18572
00:03:48,490 --> 00:03:53,490
then this means that we're going to trigger the game over sequence.

18573
00:03:56,530 --> 00:04:01,420
So how can we detect if the head collides with any segment in the tail?

18574
00:04:02,290 --> 00:04:02,650
Well,

18575
00:04:02,650 --> 00:04:07,650
we could loop through our list of segments in the snake.

18576
00:04:08,020 --> 00:04:13,020
So we could say for segment in snake.segments,

18577
00:04:14,350 --> 00:04:18,339
so out of all the snakes segments, let's go through each one of them.

18578
00:04:18,850 --> 00:04:20,800
And then we can say that well,

18579
00:04:21,160 --> 00:04:26,160
if the snake.head has a distance of,

18580
00:04:26,860 --> 00:04:28,090
let's say, I don't know,

18581
00:04:28,120 --> 00:04:33,120
less than 10 from any of those segments that we're currently looping through, well

18582
00:04:35,710 --> 00:04:38,890
that probably is a collision, right? So in that case,

18583
00:04:38,920 --> 00:04:43,300
we're going to set the game_is_on to false and we're going to get the

18584
00:04:43,300 --> 00:04:46,720
scoreboard to trigger the game over sequence.

18585
00:04:48,160 --> 00:04:51,970
Now there's just one problem with this. If we go ahead and run the code

18586
00:04:52,030 --> 00:04:55,570
as it is, you can see that immediately we get game over.

18587
00:04:56,140 --> 00:04:59,410
And the reason is because out of all of the snake segments,

18588
00:04:59,530 --> 00:05:02,230
the head is the first segment.

18589
00:05:02,620 --> 00:05:05,050
So when we loop through each of the segments,

18590
00:05:05,230 --> 00:05:07,750
the first segment is going to be the snake head.

18591
00:05:08,080 --> 00:05:11,710
And so we're detecting if the snake head has a distance to

18592
00:05:11,710 --> 00:05:15,280
the snake head of less than 10, which of course it is going to.

18593
00:05:15,760 --> 00:05:19,180
So we need some sort of way of bypassing the snakehead.

18594
00:05:19,630 --> 00:05:24,630
So we could say if the current segment that we're looping through is equal to, so

18595
00:05:25,390 --> 00:05:30,370
double equal, to the snake.head, well, in this case,

18596
00:05:30,400 --> 00:05:35,170
we're going to pass. But if this is not the case, so in the elif

18597
00:05:35,200 --> 00:05:36,460
after the if statement,

18598
00:05:36,820 --> 00:05:41,820
then we can check to see if the snake head has a distance to the segment of less

18599
00:05:41,980 --> 00:05:45,100
than 10. Now, if we rerun this code,

18600
00:05:46,330 --> 00:05:49,960
you'll see that it works exactly as we expect it to.

18601
00:05:52,000 --> 00:05:55,810
We can move our snake around and as soon as the head hits the body,

18602
00:05:56,080 --> 00:05:57,830
then it's game over for us.

18603
00:05:59,180 --> 00:06:03,590
We've pretty much now completed the snake game. But in the next lesson,

18604
00:06:03,680 --> 00:06:07,310
I want to talk about a special functionality in Python

18605
00:06:07,340 --> 00:06:08,690
which is called slicing.

18606
00:06:09,200 --> 00:06:12,770
And this is something that you will often see in code in the wild,

18607
00:06:13,100 --> 00:06:16,640
and we'll use that to improve our code just a little bit more. So

18608
00:06:17,330 --> 00:06:19,310
for all of that and more, I'll see you there.


18609
00:00:00,450 --> 00:00:04,920
Now while our snake game works now with all of the functionality that we set out

18610
00:00:04,920 --> 00:00:05,753
to create,

18611
00:00:06,000 --> 00:00:11,000
there's just one thing that bothers me a little bit about this code, and it's how

18612
00:00:11,370 --> 00:00:12,900
wordy this section is.

18613
00:00:13,350 --> 00:00:18,350
All that we're trying to do is make sure that we're detecting the distance from

18614
00:00:19,200 --> 00:00:23,130
all of the segments that we're looping through in snake.segments

18615
00:00:23,340 --> 00:00:24,810
other than the first one.

18616
00:00:25,350 --> 00:00:29,400
Surely there's an easier way of doing this rather than writing all of these

18617
00:00:29,400 --> 00:00:34,080
lines of code. And indeed there is. But in order to use it,

18618
00:00:34,290 --> 00:00:38,520
we have to learn about a Python concept known as slicing.

18619
00:00:39,540 --> 00:00:44,540
Let's say that we had a list of piano keys all the way from a to g, and we wanted

18620
00:00:46,050 --> 00:00:49,680
to get hold of a small section of this list.

18621
00:00:50,130 --> 00:00:54,270
Let's say we wanted to slice the list so that we only get the c,

18622
00:00:54,270 --> 00:00:58,620
d, and e keys from this list. How would we do that

18623
00:00:58,620 --> 00:01:00,390
using Python? Well,

18624
00:01:00,390 --> 00:01:04,830
one way of doing that is you could write a for loop and you could check, well,

18625
00:01:04,830 --> 00:01:09,300
is it c, is a d, is it d. If so, then add it to a new list.

18626
00:01:09,510 --> 00:01:12,690
But that's really convoluted. We have a much,

18627
00:01:12,690 --> 00:01:16,890
much better way of doing that in Python. And it's known as slicing.

18628
00:01:17,400 --> 00:01:20,940
This is what the syntax would look like. We would get hold of our lists,

18629
00:01:21,000 --> 00:01:24,750
piano_keys, and then we would use a set of square brackets,

18630
00:01:25,110 --> 00:01:28,980
but instead of accessing just one item with a position,

18631
00:01:29,400 --> 00:01:34,400
we get a set of items by slicing it from position 2 to position 5.

18632
00:01:36,360 --> 00:01:40,770
This might be a little bit confusing because we know that a is that position

18633
00:01:40,770 --> 00:01:44,220
0, b is at 1, c is at 2,

18634
00:01:44,640 --> 00:01:49,640
but the one at position 5 is actually f, so how does this get us c, d, and e?

18635
00:01:52,590 --> 00:01:54,690
Well, you have to visualize it like this.

18636
00:01:55,170 --> 00:02:00,170
Imagine that zero position is actually at the beginning of the list before where

18637
00:02:00,870 --> 00:02:04,440
a starts. And at the end of the list,

18638
00:02:04,470 --> 00:02:07,350
we're actually at the slicing position of 7.

18639
00:02:08,160 --> 00:02:09,810
If we think about it this way,

18640
00:02:09,870 --> 00:02:14,870
then the way that we're slicing this list is going all the way from position 2

18641
00:02:15,990 --> 00:02:20,790
to position 5 then of course, we would end up with c, d, and e.

18642
00:02:22,020 --> 00:02:24,240
If you take a look at this code in my Repl.it,

18643
00:02:24,420 --> 00:02:27,000
I've essentially got the same code that we saw in the slides

18644
00:02:27,360 --> 00:02:31,890
and we're slicing this list of piano keys from position 2 to 5.

18645
00:02:32,370 --> 00:02:35,790
When I hit run, you will see that what gets printed is c,

18646
00:02:35,790 --> 00:02:40,320
d, and e, exactly the slice that we wanted. Now,

18647
00:02:40,350 --> 00:02:43,890
there's other things that you can do with slicing that's pretty cool. So,

18648
00:02:43,890 --> 00:02:47,130
for example, if you wanted to slice from position 2,

18649
00:02:47,160 --> 00:02:48,660
which remember is right here

18650
00:02:48,750 --> 00:02:52,560
because we're starting at 0, 1, and 2,

18651
00:02:52,890 --> 00:02:56,430
and you want to slice it all the way to the end of the list, well,

18652
00:02:56,430 --> 00:03:00,820
you can just emit the second number. You can have two and then a colon.

18653
00:03:01,330 --> 00:03:04,840
Now, when you slice this you get all of the rest of the list

18654
00:03:05,050 --> 00:03:07,840
starting from the position that you specified.

18655
00:03:08,500 --> 00:03:10,900
And this works in the opposite direction as well.

18656
00:03:11,320 --> 00:03:15,790
Let's say that we want to get hold of everything up to position 5. Well,

18657
00:03:15,790 --> 00:03:18,850
we could omit the first number, add a colon,

18658
00:03:19,030 --> 00:03:22,510
and then after the colon specify the end slice position.

18659
00:03:22,900 --> 00:03:27,700
And now we get all of the items in the list up to that position 5.

18660
00:03:28,900 --> 00:03:32,830
In addition to just slicing between two numbers,

18661
00:03:33,100 --> 00:03:37,630
we can actually specify a third number after another colon.

18662
00:03:38,290 --> 00:03:42,790
And what this number does is it sets the increment. For example,

18663
00:03:42,790 --> 00:03:46,780
we wanted the slice from a position 2 to position 5,

18664
00:03:47,080 --> 00:03:50,800
but we want to only get every other item.

18665
00:03:51,190 --> 00:03:54,580
So then it would give c, it would skip over the second one,

18666
00:03:54,670 --> 00:03:59,050
and then it would give us e. And if I hit run, this is exactly what you see.

18667
00:04:00,460 --> 00:04:04,000
So let's say I wanted to get hold of everything in this list

18668
00:04:04,450 --> 00:04:09,400
but I wanted every second item. Well, then this is what my code would look like,

18669
00:04:09,430 --> 00:04:13,900
go from the beginning to the end and then skip every second one.

18670
00:04:14,590 --> 00:04:17,140
And I end up with a, c, e, and g. 

18671
00:04:18,430 --> 00:04:21,250
Now to extend this a little bit further,

18672
00:04:21,640 --> 00:04:26,640
we can actually use this neat trick to specify a -1 as the increment

18673
00:04:27,430 --> 00:04:32,430
and what this does is it will actually reverse this list for us going from right

18674
00:04:33,040 --> 00:04:37,300
to the end to the beginning. So essentially the increments are by one,

18675
00:04:37,540 --> 00:04:41,710
but it's by -1, so that way we get the list starting from the end

18676
00:04:41,950 --> 00:04:43,210
all the way back to the beginning.

18677
00:04:43,630 --> 00:04:47,020
And this is a really neat trick that you'll see a lot of people use when it

18678
00:04:47,020 --> 00:04:51,310
comes to manipulating lists and tuples. So speaking of tuples,

18679
00:04:51,490 --> 00:04:55,810
this method of slicing also works for tuples.

18680
00:04:56,320 --> 00:04:58,540
So let's say we had a piano tuple,

18681
00:04:58,570 --> 00:05:03,570
which remember is defined by a set of parentheses with items inside separated by

18682
00:05:04,120 --> 00:05:06,220
commas. Well,

18683
00:05:06,220 --> 00:05:10,780
we can use the same method of slicing to work with our tuple.

18684
00:05:11,140 --> 00:05:12,880
So we use our square brackets,

18685
00:05:13,180 --> 00:05:17,230
let's get hold of the items from section 2 to 5.

18686
00:05:17,530 --> 00:05:20,920
Then when we hit run, you'll see it gives us mi, fa, so.

18687
00:05:20,920 --> 00:05:25,330
So coming back to our code, I have a challenge for you.

18688
00:05:25,330 --> 00:05:30,330
Can you figure out how to use what we've just learned about slicing to

18689
00:05:30,610 --> 00:05:33,850
change this code so that we get rid of this

18690
00:05:33,850 --> 00:05:38,850
if statement where we're passing over the snake head so that we are in fact only

18691
00:05:39,430 --> 00:05:44,430
checking that the snake head has a distance to every segment other than the first

18692
00:05:45,040 --> 00:05:49,870
segment, less than 10? If you managed successfully to do this,

18693
00:05:49,900 --> 00:05:51,340
you should be able to get rid of this

18694
00:05:51,340 --> 00:05:56,340
if statement, change this to a single if statement and somehow figure out a way of

18695
00:05:57,590 --> 00:06:02,590
making this code work using slicing. Pause the video and give this a go.

18696
00:06:05,680 --> 00:06:06,130
Alright,

18697
00:06:06,130 --> 00:06:11,130
so we know that we want to loop through every segment in snake.segments

18698
00:06:11,530 --> 00:06:14,560
other than the first one. Well,

18699
00:06:15,010 --> 00:06:20,010
all we need to do is simply slice this list of segments. So we can get hold of

18700
00:06:21,640 --> 00:06:26,290
everything that starts off from position 1 to the end,

18701
00:06:26,620 --> 00:06:29,350
by writing 1: nothing.

18702
00:06:29,860 --> 00:06:34,860
This will give us everything inside the list other than the first item, like

18703
00:06:35,740 --> 00:06:36,573
so.

18704
00:06:37,150 --> 00:06:42,150
And then we can use that segment to loop through it and then check every segment

18705
00:06:42,490 --> 00:06:46,840
in the tail against the distance to the head. And now when you run the code,

18706
00:06:47,080 --> 00:06:50,440
you can see that it works just as perfectly as before,

18707
00:06:51,400 --> 00:06:56,400
but we've now vastly simplified our code using the power of Python

18708
00:06:56,860 --> 00:06:57,693
slicing.

18709
00:06:58,600 --> 00:07:03,160
Have fun playing with your snake game and be sure to let me know your highest

18710
00:07:03,160 --> 00:07:05,500
score because I can't seem to get past 10.

18711
00:07:05,890 --> 00:07:09,280
And you've pretty much seen in this tutorial how bad I am at this game,

18712
00:07:09,580 --> 00:07:13,450
but I'm sure you can do much better. And on top of that,

18713
00:07:13,480 --> 00:07:17,200
think about ways that you might want to customize your snake game.

18714
00:07:17,530 --> 00:07:21,370
Maybe you want to change the food to have a different color or a different

18715
00:07:21,370 --> 00:07:25,210
shape, maybe your snake is actually going to eat turtles, I don't know.

18716
00:07:25,420 --> 00:07:27,220
The world is your oyster.

18717
00:07:27,430 --> 00:07:30,760
Now that you've learned about so many more concepts in Programming

18718
00:07:31,000 --> 00:07:35,620
including inheritance in OOP as well as slicing lists and tuples.

18719
00:07:36,490 --> 00:07:40,180
So I hope you've had fun building this game and I'll see you tomorrow.



18720
00:00:00,180 --> 00:00:05,160
Hey guys, welcome to Day 22 of 100 Days of Code. Today

18721
00:00:05,160 --> 00:00:07,170
we're going to be building the famous pong game,

18722
00:00:07,770 --> 00:00:11,610
and you're going to be doing this by using all of the skills that you've learned

18723
00:00:11,700 --> 00:00:12,533
up till now.

18724
00:00:13,440 --> 00:00:16,800
Pong is a classic arcade game,

18725
00:00:17,310 --> 00:00:20,040
probably one of the first arcade games that ever was.

18726
00:00:20,670 --> 00:00:25,050
And it has a really simple premise. It's basically just a ball

18727
00:00:25,050 --> 00:00:29,760
that's going across a table and two players each control a paddle

18728
00:00:29,970 --> 00:00:33,240
bouncing the ball back and forth. If you miss the ball,

18729
00:00:33,300 --> 00:00:35,010
then the other player scores a point.

18730
00:00:36,000 --> 00:00:39,180
Now the history of pong is itself kind of fascinating.

18731
00:00:39,570 --> 00:00:43,350
It was created and written by this guy, Allan Alcorn.

18732
00:00:43,860 --> 00:00:47,760
And he was a fresh recruit to the Atari company.

18733
00:00:48,450 --> 00:00:50,520
And in order to test his skills,

18734
00:00:50,550 --> 00:00:53,580
they decided to get him to create a game, from scratch.

18735
00:00:54,180 --> 00:00:56,700
And this game happened to be pong,

18736
00:00:57,090 --> 00:01:02,090
which became a huge success selling loads and loads of machines across bars and

18737
00:01:02,160 --> 00:01:03,060
pubs in the world.

18738
00:01:03,600 --> 00:01:08,600
It eventually became so successful that a lot of these bar owners were calling

18739
00:01:08,700 --> 00:01:13,110
up Atari saying, Hey, your machines are braking after only a few days.

18740
00:01:13,560 --> 00:01:17,790
And the reason when they investigated was because the machines were chock-a-

18741
00:01:17,790 --> 00:01:19,740
block full of money.

18742
00:01:20,010 --> 00:01:24,690
People were putting their quarters in to play pong and the machine was getting

18743
00:01:24,720 --> 00:01:26,100
full too quickly.

18744
00:01:26,430 --> 00:01:30,870
So this is the legendary game that we're going to be building today. As a ways,

18745
00:01:30,930 --> 00:01:33,390
the first step is to break down the problem.

18746
00:01:33,840 --> 00:01:35,640
And I want you to have a go at this,

18747
00:01:35,670 --> 00:01:40,140
think about how you would take this pong game that you've seen here,

18748
00:01:40,590 --> 00:01:45,480
and which components would we need to write code for, which components might fit

18749
00:01:45,480 --> 00:01:47,430
well in its own separate class,

18750
00:01:47,760 --> 00:01:52,740
and how might we break down the logic of this game so that we can solve it piece

18751
00:01:52,740 --> 00:01:56,910
by piece. Now, I want you to take a piece of paper,

18752
00:01:57,000 --> 00:02:02,000
take a look at the game screen right here and make a note of which components

18753
00:02:02,310 --> 00:02:06,990
you think could be separated into their own classes. Briefly,

18754
00:02:06,990 --> 00:02:11,280
pause the video and jot down some notes on how you might structure the code for

18755
00:02:11,280 --> 00:02:12,113
this game.

18756
00:02:15,080 --> 00:02:18,860
Now I've broken this tutorial down into eight pieces.

18757
00:02:19,340 --> 00:02:22,910
Keep a piece of paper to hand throughout today so that you can compare your

18758
00:02:22,910 --> 00:02:24,770
structure to the sample solution.

18759
00:02:25,520 --> 00:02:28,430
Pong is a much more complex game than snake.

18760
00:02:28,580 --> 00:02:33,050
So pausing to think about the structure of the code now will help you a lot more

18761
00:02:33,260 --> 00:02:37,310
in the upcoming lessons and it'll make it easier for you to see how everything

18762
00:02:37,310 --> 00:02:41,900
fits together. First, we're going to figure out how to create the screen,

18763
00:02:42,230 --> 00:02:46,400
how to create and move a puddle, and then create another puddle

18764
00:02:46,400 --> 00:02:50,840
so we can have a two-player game and then create the ball and make it move

18765
00:02:50,900 --> 00:02:55,520
constantly across the screen and figure out when it collides with a wall and

18766
00:02:55,520 --> 00:03:00,160
make it bounce back and then detect when there's a collision with the paddle to

18767
00:03:00,160 --> 00:03:04,510
know when to bounce it back. Finally, we'll figure out when a user scores,

18768
00:03:04,780 --> 00:03:09,370
when the paddle misses the ball, and we'll keep the score using a scoreboard

18769
00:03:09,400 --> 00:03:13,150
like before. Now, if you're feeling really confident,

18770
00:03:13,510 --> 00:03:16,240
you can, in fact, just create a blank project,

18771
00:03:16,510 --> 00:03:21,040
go through these steps one by one and see if you can code up this game by

18772
00:03:21,040 --> 00:03:23,860
yourself. But what I recommend though

18773
00:03:23,890 --> 00:03:28,810
is to go along with the videos and I'm going to explain each of the problems one

18774
00:03:28,810 --> 00:03:32,560
by one, and you can have a go at building it alongside with me.

18775
00:03:33,070 --> 00:03:35,050
So if you decide to follow along with me,

18776
00:03:35,200 --> 00:03:37,630
head over to the next lesson and we'll get started.

18777
00:03:38,050 --> 00:03:40,120
If you decide to create everything from scratch,

18778
00:03:40,360 --> 00:03:43,510
then pause the video and start creating the game now.


18779
00:00:00,450 --> 00:00:02,430
The first challenge is pretty simple.

18780
00:00:02,460 --> 00:00:04,740
We're just going to create the starting screen.

18781
00:00:05,160 --> 00:00:10,160
It's going to be a screen that has a height of 600 pixels and a width of 800

18782
00:00:10,950 --> 00:00:14,880
pixels. It should be black in terms of the background color,

18783
00:00:15,300 --> 00:00:18,510
and it should stay on the screen until we click on it.

18784
00:00:18,930 --> 00:00:20,790
So using what you've learned so far,

18785
00:00:20,910 --> 00:00:24,000
go ahead and set up the starting code for our project.

18786
00:00:27,140 --> 00:00:31,520
All right. So I've created a brand new project which I've called pong-game,

18787
00:00:31,940 --> 00:00:34,580
and I've created a main.py. Now,

18788
00:00:34,610 --> 00:00:39,610
the first thing I'm going to do is I'm going to import a screen from the turtle

18789
00:00:39,830 --> 00:00:40,663
module.

18790
00:00:42,860 --> 00:00:46,790
And then I'm going to create a screen object from the Screen class,

18791
00:00:47,180 --> 00:00:50,780
and then I'm going to set the background color to black.

18792
00:00:51,560 --> 00:00:56,560
And then, of course, we'll need to set up the screen so that it has a width of

18793
00:00:57,650 --> 00:01:02,180
800 and a height of 600.

18794
00:01:04,099 --> 00:01:07,090
So now if I run this code as it is,

18795
00:01:11,270 --> 00:01:13,940
you'll see that it flashes up and it disappears.

18796
00:01:13,970 --> 00:01:17,030
So of course we need that exitonclick method.

18797
00:01:17,030 --> 00:01:21,140
As well as a final finishing touch, this is completely optional

18798
00:01:21,380 --> 00:01:23,630
but it helps to identify the program,

18799
00:01:23,750 --> 00:01:27,800
we can change the screens title to say Pong.

18800
00:01:28,730 --> 00:01:33,320
And now when I run the code, you can see that this window now says pong.

18801
00:01:34,880 --> 00:01:38,150
So we now have our 800 by 600 screen,

18802
00:01:38,510 --> 00:01:43,040
and we're now ready to head to the next step where we create our paddles.


18803
00:00:00,270 --> 00:00:04,830
So now that we've created the screen we're ready to go ahead and create and move a

18804
00:00:04,830 --> 00:00:06,180
puddle. So 

18805
00:00:06,180 --> 00:00:09,180
the paddle that we're going to create is going to be on the right side.

18806
00:00:09,480 --> 00:00:11,250
It's going to have a width of 20,

18807
00:00:11,310 --> 00:00:16,309
a height of 100 and be positioned at 350 pixels on the X-axis and then 0 on

18808
00:00:19,380 --> 00:00:23,280
the Y-axis. So this is the sort of positioning we're looking for.

18809
00:00:24,000 --> 00:00:25,080
And additionally,

18810
00:00:25,110 --> 00:00:29,520
we should be able to hit the up and down keys on a keyboard to move the paddle.

18811
00:00:30,030 --> 00:00:34,080
Each key press should move the paddle up or down by 20 pixels.

18812
00:00:34,740 --> 00:00:38,850
Have a think about how you might create the code for this and pause the video

18813
00:00:38,940 --> 00:00:40,290
and complete the challenge.

18814
00:00:44,190 --> 00:00:48,540
All right. So to create this paddle, it's going to be created as a turtle.

18815
00:00:48,780 --> 00:00:53,780
So let's go ahead and create our paddle from the turtle class and I'm going to

18816
00:00:54,600 --> 00:00:57,690
set the paddles shape to a square.

18817
00:00:59,580 --> 00:01:04,530
In order to stretch it so that it's 20 by 100 pixels,

18818
00:01:04,920 --> 00:01:09,920
remember that all turtles start off as 20 by 20

18819
00:01:10,320 --> 00:01:12,540
so that means in the width

18820
00:01:12,570 --> 00:01:17,570
we have to stretch it by five, and in the length, we leave it as it is in order to

18821
00:01:18,450 --> 00:01:21,120
make it 100 by 20.

18822
00:01:21,870 --> 00:01:24,840
So let's go ahead and hid up paddle.shapesize

18823
00:01:25,290 --> 00:01:30,030
which is what we've been using so far. And then in terms of the stretch width,

18824
00:01:30,090 --> 00:01:35,040
we're going to make that five. And then the stretch length is going to be one.

18825
00:01:35,730 --> 00:01:40,320
Now we have to make sure that our paddle has a color of white

18826
00:01:40,380 --> 00:01:45,380
so that it's actually visible when we run our code. And you can see there it is,

18827
00:01:46,950 --> 00:01:49,650
there's our paddle. And as always,

18828
00:01:49,740 --> 00:01:53,370
it gets initialized in the center at the coordinate (0, 0).

18829
00:01:53,910 --> 00:01:57,030
So in order to move it to the position we want to,

18830
00:01:57,300 --> 00:02:00,330
we have to get it to go ahead and pen up,

18831
00:02:00,750 --> 00:02:05,750
and then we can tell it to go to the position that is 350 by 0,

18832
00:02:07,530 --> 00:02:12,450
so 350 on the X-axis and 0 on the Y-axis, like that.

18833
00:02:13,350 --> 00:02:16,320
Now, the next thing we need to do is figure out how to get it

18834
00:02:16,320 --> 00:02:17,640
to move up and down.

18835
00:02:18,150 --> 00:02:23,150
So, of course, we need some sort of way of getting our screen to listen for

18836
00:02:23,970 --> 00:02:27,150
keystrokes. We're gonna call screen.listen

18837
00:02:27,270 --> 00:02:31,290
and then we're going to call onkey in order to listen for the "Up" key.

18838
00:02:31,830 --> 00:02:36,480
And then when that happens, we're going to get the paddle to go up. Now,

18839
00:02:36,510 --> 00:02:40,770
remember as always, when you were using a function as a parameter,

18840
00:02:41,100 --> 00:02:45,960
you don't want to add the parentheses. If you do, it won't work.

18841
00:02:46,500 --> 00:02:49,380
Now let's create our go_up function.

18842
00:02:50,010 --> 00:02:55,010
And this function is going to take our paddle and move it so that it goes to a

18843
00:02:59,470 --> 00:03:04,150
new position. The new exposition is X not going to change.

18844
00:03:04,210 --> 00:03:07,120
The only one that's going to change is the Y position.

18845
00:03:07,750 --> 00:03:11,710
So the Y position is going to be the paddles current ycor,

18846
00:03:12,280 --> 00:03:15,250
but it's going to go up, so it's going to need to

18847
00:03:15,280 --> 00:03:18,190
plus let's say by 20.

18848
00:03:18,940 --> 00:03:23,940
Now we can tell the paddle to go to its current paddle.xcor.

18849
00:03:24,970 --> 00:03:29,290
So we're not changing that. And then to go to the new Y position.

18850
00:03:29,980 --> 00:03:34,980
Now, this go_up function is going to be called whenever the Up key is detected.

18851
00:03:35,740 --> 00:03:40,450
And if we copy this and we make a similar version of this function,

18852
00:03:40,660 --> 00:03:45,550
which is called go_down and we can subtract 20 instead.

18853
00:03:46,120 --> 00:03:50,320
So now we can copy this line and make it call

18854
00:03:50,350 --> 00:03:54,160
go_down when the down arrow key is detected.

18855
00:03:54,820 --> 00:03:59,020
So now we've created our paddle and when I hit up, it goes up, when I hit down

18856
00:03:59,050 --> 00:04:03,070
it goes down. And this completes the first part of the challenge.

18857
00:04:03,430 --> 00:04:06,430
But here's a question. When I hit run,

18858
00:04:06,520 --> 00:04:09,850
you can see that the paddle first gets created in the center,

18859
00:04:10,240 --> 00:04:13,720
and then it moves to the location where it needs to go to,

18860
00:04:14,200 --> 00:04:18,399
which is 350 on the X-axis, 0 on the Y-axis.

18861
00:04:18,940 --> 00:04:22,330
How can we get rid of this animation so that we don't have to look at the

18862
00:04:22,330 --> 00:04:24,430
paddle move to the position?

18863
00:04:24,850 --> 00:04:28,510
Have a think about what you've learned in previous lessons and see if you can

18864
00:04:28,510 --> 00:04:32,950
solve this problem. All right.

18865
00:04:32,980 --> 00:04:37,980
So you might remember from previous lessons that there is a tracer method on the

18866
00:04:38,560 --> 00:04:41,380
screen which controls the animation.

18867
00:04:41,920 --> 00:04:46,540
And in order to turn off the animation, we can put a zero in that method.

18868
00:04:47,080 --> 00:04:49,450
But when we run our code, as it is right now,

18869
00:04:49,480 --> 00:04:52,060
you'll see that there's no animation.

18870
00:04:52,090 --> 00:04:54,880
There's not even a paddle of showing up anymore.

18871
00:04:55,630 --> 00:04:58,180
Remember that when you turn off the animation,

18872
00:04:58,390 --> 00:05:03,390
you have to manually update the screen and refresh it every single time. To do

18873
00:05:04,120 --> 00:05:06,490
that, we'll need some sort of a while loop.

18874
00:05:07,000 --> 00:05:10,750
And the while loop is going to check for some sort of variable.

18875
00:05:11,140 --> 00:05:15,250
So let's create a variable called game_is_on and set it to true

18876
00:05:15,820 --> 00:05:17,890
and while the game is on,

18877
00:05:18,160 --> 00:05:22,660
then we're going to call screen.update. Now,

18878
00:05:22,690 --> 00:05:25,690
if I run the code again, you'll see that my paddle

18879
00:05:25,720 --> 00:05:30,700
now goes directly from the center to the position because the first thing

18880
00:05:30,700 --> 00:05:33,100
that happens is the animation gets turned off,

18881
00:05:33,460 --> 00:05:36,130
the paddle then gets created in the background

18882
00:05:36,400 --> 00:05:41,080
and then finally it gets to this point where we actually update the screen and

18883
00:05:41,080 --> 00:05:44,200
show everything that's happened in the background so far.

18884
00:05:44,890 --> 00:05:49,120
Did you manage to complete this challenge and create the paddle and get it to

18885
00:05:49,120 --> 00:05:51,760
move up and down using the keystrokes?

18886
00:05:52,270 --> 00:05:57,070
If not be sure to review some of these methods in the turtle documentation and

18887
00:05:57,080 --> 00:06:01,160
have a play around with the code until you're fully happy with what's going on

18888
00:06:01,160 --> 00:06:03,130
so far. Now,

18889
00:06:03,160 --> 00:06:07,840
if you had created the paddle in a separate file as a separate class,

18890
00:06:08,170 --> 00:06:10,210
don't worry. We're going to do that next.

18891
00:06:10,390 --> 00:06:14,590
We're going to refactor this code so that it's fully compliant with Object

18892
00:06:14,590 --> 00:06:16,990
Oriented Programming. But if you've already done it,

18893
00:06:16,990 --> 00:06:18,340
then you're just one step ahead.

18894
00:06:18,700 --> 00:06:20,980
And that is where we're heading to in the next lesson.


18895
00:00:00,660 --> 00:00:05,070
In the last lesson we created and managed to move a paddle up and down.

18896
00:00:05,670 --> 00:00:08,970
Now in this lesson, we're going to figure out how we can create

18897
00:00:08,970 --> 00:00:09,930
another paddle,

18898
00:00:10,260 --> 00:00:14,100
but we don't want to repeat all the code that we've written so far.

18899
00:00:14,340 --> 00:00:18,900
So we're probably going to need the help of a separate paddle class.

18900
00:00:19,320 --> 00:00:21,270
So if you haven't already created

18901
00:00:21,270 --> 00:00:24,690
your paddle inside a separate file and a separate class,

18902
00:00:25,050 --> 00:00:29,100
then this is the time to refactor your code so that you can create 

18903
00:00:29,100 --> 00:00:34,100
another paddle object from the puddle class easily and effortlessly.

18904
00:00:34,830 --> 00:00:36,240
Here's what we're aiming for.

18905
00:00:36,390 --> 00:00:41,390
We're aiming to get rid of all of this paddle related code and move it into a

18906
00:00:41,640 --> 00:00:43,140
separate paddle class.

18907
00:00:43,650 --> 00:00:48,650
And then subsequently we want to be able to create a right paddle simply by

18908
00:00:50,250 --> 00:00:52,560
creating it from the paddle class.

18909
00:00:52,950 --> 00:00:57,360
And then we can create a left paddle from the panel of class. Now because the

18910
00:00:57,360 --> 00:01:01,380
right paddle has a different coordinate from the left paddle,

18911
00:01:01,620 --> 00:01:06,620
we'll need to pass in the position of the right and left paddle as a tuple.

18912
00:01:06,870 --> 00:01:11,870
So we might say something like the X will be 350 and the Y will be 0.

18913
00:01:12,630 --> 00:01:13,980
And on the left paddle,

18914
00:01:13,980 --> 00:01:18,980
the X will be -350 and the Y will be 0.

18915
00:01:20,160 --> 00:01:25,160
So have a think about how you can make this code work and refactor this

18916
00:01:26,250 --> 00:01:28,980
code into a separate paddle class

18917
00:01:29,370 --> 00:01:33,330
and this paddle class should inherit from the turtle class.

18918
00:01:33,780 --> 00:01:37,260
Overall, our program should work pretty much the same as before.

18919
00:01:37,680 --> 00:01:41,010
The only difference being that we now have a left pedal

18920
00:01:41,250 --> 00:01:45,510
which can move up and down with the w and s keys on the keyboard.

18921
00:01:46,290 --> 00:01:48,810
Pause the video and try to complete this challenge.

18922
00:01:51,450 --> 00:01:54,990
All right. So the first thing we're going to need is a new file,

18923
00:01:55,260 --> 00:02:00,260
which is going to be called paddle.py and paddle.py is going to need the

18924
00:02:01,410 --> 00:02:05,640
turtle class from the turtle module. So let's go ahead and import it.

18925
00:02:06,180 --> 00:02:10,770
And then I'm going to create this Paddle class, and of course,

18926
00:02:10,979 --> 00:02:13,590
all classes start off with a capital letter.

18927
00:02:14,070 --> 00:02:19,070
Now, this class is going to take all of this paddle creation code

18928
00:02:19,680 --> 00:02:23,550
and it's going to carry it out when we initialize a new paddle

18929
00:02:23,550 --> 00:02:28,290
object. This paddle object, in order for it to be a turtle

18930
00:02:28,290 --> 00:02:32,940
object, we're going to get it to inherit from the turtle class like this.

18931
00:02:33,420 --> 00:02:35,880
And in order to get all of the abilities,

18932
00:02:35,880 --> 00:02:38,610
the methods, and the attributes of the turtle class,

18933
00:02:39,000 --> 00:02:41,940
we need to get this superclass to initialize itself.

18934
00:02:42,660 --> 00:02:47,660
The next thing we're going to do is figure out how we can get our paddle to

18935
00:02:47,910 --> 00:02:52,320
change its shape, change its color and all of these other things.

18936
00:02:52,920 --> 00:02:57,920
So we can get rid of this line entirely because our paddle class is now the same

18937
00:02:58,350 --> 00:03:01,870
as a turtle class. And then for the rest of these,

18938
00:03:01,870 --> 00:03:04,960
instead of writing paddle.shape or paddle.color,

18939
00:03:05,290 --> 00:03:09,460
we're going to hit command R or simply go to edit,

18940
00:03:09,730 --> 00:03:12,280
find, and then replace,

18941
00:03:12,460 --> 00:03:16,900
and you can take a look at the shortcut on your computer of how to get hold of

18942
00:03:16,900 --> 00:03:20,380
this replace screen. So what I want to replace is

18943
00:03:20,500 --> 00:03:23,890
everything that is paddled. here in my code,

18944
00:03:24,280 --> 00:03:26,680
and I'm going to replace it with self.,

18945
00:03:27,190 --> 00:03:29,620
because now we're inside the paddle class

18946
00:03:30,010 --> 00:03:34,360
which is effectively the same as a turtle class with some added extras.

18947
00:03:34,750 --> 00:03:39,750
We can tap into our methods and our attributes by simply using the self keyword.

18948
00:03:41,950 --> 00:03:42,760
Now,

18949
00:03:42,760 --> 00:03:47,760
the very last thing we need to do in order to make this work is to go ahead and

18950
00:03:48,700 --> 00:03:51,910
import our paddle from the paddle.py.

18951
00:03:54,700 --> 00:03:58,540
And once we've imported it, we need to address this warning.

18952
00:03:58,810 --> 00:04:00,670
Notice how it's highlighting this area

18953
00:04:00,700 --> 00:04:05,700
and it's telling us that this is an unexpected argument because the paddle

18954
00:04:05,830 --> 00:04:09,700
class doesn't actually take any inputs when it's initialized.

18955
00:04:09,910 --> 00:04:12,760
It's just got the self here. But in fact,

18956
00:04:12,790 --> 00:04:16,510
we do need a position being passed over.

18957
00:04:17,019 --> 00:04:21,910
So this position is going to determine where the paddle is going to go to,

18958
00:04:22,420 --> 00:04:26,950
because remember the left paddle is going to have a different coordinate from

18959
00:04:26,950 --> 00:04:27,880
the right paddle.

18960
00:04:28,540 --> 00:04:33,190
So now that we fixed that, this is now completely valid code.

18961
00:04:35,590 --> 00:04:38,200
And if we run our code as it is,

18962
00:04:38,260 --> 00:04:43,180
you'll see our paddles being created and looking exactly the same way as before

18963
00:04:43,450 --> 00:04:48,450
but now we've got one extra paddle. Going down here with our go up and go down

18964
00:04:50,140 --> 00:04:50,973
methods,

18965
00:04:51,040 --> 00:04:55,360
ideally, we would want them to live within our paddle class.

18966
00:04:55,690 --> 00:04:58,390
So we want them to be methods inside this class.

18967
00:04:58,930 --> 00:05:03,930
And remember that methods always have a first attribute as the self.

18968
00:05:05,050 --> 00:05:07,030
Now, in addition, we have to, again,

18969
00:05:07,060 --> 00:05:12,060
replace this paddle. with self. so that it's actually referring to the object

18970
00:05:14,410 --> 00:05:19,360
that's created from this class to get its Y coordinate or get its X coordinate.

18971
00:05:20,080 --> 00:05:22,480
Now, coming back to our main.py,

18972
00:05:22,510 --> 00:05:26,800
we'll have to modify this code a little bit because this go_up and go_down

18973
00:05:26,800 --> 00:05:28,090
function is now gone,

18974
00:05:28,450 --> 00:05:33,450
and instead, we now have the r_paddle.go_up and r_paddle.go_down.

18975
00:05:36,970 --> 00:05:40,840
So the right paddle is going to be controlled by the up and down keys,

18976
00:05:41,260 --> 00:05:46,210
but the left paddle, we can get it to be controlled by some other keys. Now,

18977
00:05:46,210 --> 00:05:46,810
in our case,

18978
00:05:46,810 --> 00:05:51,810
I'm going to choose the 'w' to go up and the 's' key to go down.

18979
00:05:52,780 --> 00:05:57,780
So we're going to need another set of these screen.onkey method calls.

18980
00:05:58,340 --> 00:05:59,180
But in this case,

18981
00:05:59,180 --> 00:06:04,180
this is going to get the left paddle to go up and the left paddle to go down. And

18982
00:06:05,000 --> 00:06:07,460
to go up is controlled by the 'w' key

18983
00:06:07,730 --> 00:06:12,560
and to go down is controlled by the 's' key. So now,

18984
00:06:12,590 --> 00:06:17,210
if we run our code, you can see that when I moved w it goes up, when I move

18985
00:06:17,210 --> 00:06:21,950
s it goes down, and up and down moves the right side of the paddle.

18986
00:06:22,640 --> 00:06:23,690
So notice how

18987
00:06:23,720 --> 00:06:28,720
now that we've refactored our paddle related code into a completely separate

18988
00:06:29,090 --> 00:06:30,560
class, firstly,

18989
00:06:30,650 --> 00:06:34,160
our main.py is now a lot simpler.

18990
00:06:34,190 --> 00:06:37,730
It's clear of all of this paddle related code.

18991
00:06:38,270 --> 00:06:41,720
And on top of that, if I wanted to create a third paddle

18992
00:06:41,720 --> 00:06:45,260
let's say I wanted you to create a top paddle for some reason,

18993
00:06:45,530 --> 00:06:50,530
then all I have to do is just call the paddle class and then pass in a tuple

18994
00:06:51,200 --> 00:06:53,900
for the location of this paddle.

18995
00:06:54,950 --> 00:06:59,810
So let's put it at, I dunno, 100 by 100.

18996
00:07:00,380 --> 00:07:01,213
If I hit run,

18997
00:07:01,220 --> 00:07:05,180
you can see there's a third random paddle and I didn't have to write

18998
00:07:05,300 --> 00:07:10,300
any of this extra code or any of the related methods. We can create as many of

18999
00:07:10,790 --> 00:07:15,410
these paddles as we want because we've now got this paddle class.

19000
00:07:16,460 --> 00:07:17,960
So with these examples,

19001
00:07:18,050 --> 00:07:22,370
I hope you're getting the sense of how important classes are and just how

19002
00:07:22,370 --> 00:07:26,990
important they are when it comes to the development of a more complex project

19003
00:07:27,230 --> 00:07:30,230
like this pong game. Now in the next lesson,

19004
00:07:30,230 --> 00:07:34,190
we're going to continue building out our program and we're going to create our

19005
00:07:34,200 --> 00:07:36,770
ball class and get the ball moving.


19006
00:00:00,300 --> 00:00:02,250
Now that we've created both paddles

19007
00:00:02,310 --> 00:00:07,020
the next obvious step is to create the ball and get it to move.

19008
00:00:07,500 --> 00:00:12,500
So this ball is going to be created as a separate ball class and the ball object

19009
00:00:14,550 --> 00:00:19,350
that we're going to create from it will have a width of 20, height of 20, and it's

19010
00:00:19,380 --> 00:00:23,310
X and Y position will start out at the center of the screen,

19011
00:00:23,490 --> 00:00:27,300
so (0, 0). Now when the screen refreshes,

19012
00:00:27,300 --> 00:00:32,299
the ball is automatically going to move on the screen and it's going to move up

19013
00:00:33,390 --> 00:00:34,920
and also to the right.

19014
00:00:34,920 --> 00:00:39,920
So it's X and Y positions will change on every refresh of the screen.

19015
00:00:40,800 --> 00:00:45,000
So this is going to be a little bit more challenging and will require a little

19016
00:00:45,000 --> 00:00:46,320
bit of thinking from your part.

19017
00:00:46,680 --> 00:00:51,390
But I want you to pause the video and give this problem a bit of thought and see

19018
00:00:51,390 --> 00:00:55,590
how far you can get in trying to get the ball to move to the top-

19019
00:00:55,620 --> 00:00:59,580
right edge of the screen. Pause the video and give that a go.

19020
00:01:03,260 --> 00:01:05,330
All right. So to start off, this time

19021
00:01:05,330 --> 00:01:10,250
I'm going to create a ball.py file and inside 

19022
00:01:10,280 --> 00:01:14,330
this ball.py is where we're going to create our ball object.

19023
00:01:14,750 --> 00:01:15,830
So firstly,

19024
00:01:15,830 --> 00:01:20,830
I'm going to import my turtle class and then I'm going to create my ball class

19025
00:01:22,040 --> 00:01:24,320
which is going to inherit from the turtle class.

19026
00:01:24,800 --> 00:01:28,130
And then I'm going to do all of the usual initialization.

19027
00:01:30,440 --> 00:01:33,950
And now we're ready to create our ball class.

19028
00:01:34,430 --> 00:01:39,080
This ball is going to, firstly, have a white color.

19029
00:01:39,710 --> 00:01:44,300
And in addition, it's going to have a shape that is going to be a circle.

19030
00:01:44,600 --> 00:01:47,510
Now I know that in the original pong game,

19031
00:01:47,600 --> 00:01:52,250
the table tennis ball is actually a square. So you can keep it a square

19032
00:01:52,250 --> 00:01:56,300
if you want to be historically accurate, or you can change it to

19033
00:01:56,300 --> 00:02:00,650
a circle like I have here to make it look more like a ping pong ball.

19034
00:02:01,370 --> 00:02:02,360
Now, in addition,

19035
00:02:02,390 --> 00:02:06,980
we're going to need to get it to pen up so that it doesn't end up drawing across

19036
00:02:06,980 --> 00:02:07,813
the screen.

19037
00:02:08,210 --> 00:02:13,210
And now all we need is to initialize our ball from the ball.py

19038
00:02:17,870 --> 00:02:20,600
and we're going to do that just below our paddles.

19039
00:02:20,660 --> 00:02:24,500
So I'm going to create a new ball object from the ball class.

19040
00:02:25,010 --> 00:02:26,390
And now if I hit run,

19041
00:02:26,420 --> 00:02:30,380
you'll see our circular ball show up in the center of the screen.

19042
00:02:31,430 --> 00:02:36,430
The next problem is how do we get the ball to move towards the top right corner

19043
00:02:37,310 --> 00:02:38,143
of the screen?

19044
00:02:38,360 --> 00:02:42,500
So that's going to involve a change in the X coordinate as well as the Y

19045
00:02:42,500 --> 00:02:45,590
coordinate. In our while loop here

19046
00:02:45,740 --> 00:02:47,720
where our screen is updating,

19047
00:02:48,050 --> 00:02:51,410
we're going to call a method in the ball class

19048
00:02:51,710 --> 00:02:56,000
which is going to be called move. And this move method

19049
00:02:56,030 --> 00:03:01,030
which we'll define now is going to be responsible for moving our ball.

19050
00:03:02,290 --> 00:03:07,290
And the way that it's going to move is it's going to increase on the X and also

19051
00:03:08,350 --> 00:03:12,790
increase on the Y. Let's create a new X coordinate

19052
00:03:12,820 --> 00:03:17,820
which is going to be the current self.xcor plus a arbitrary amount.

19053
00:03:18,850 --> 00:03:20,770
So let's say increase by 10.

19054
00:03:21,220 --> 00:03:26,220
And then the new Y is going to be the self.ycor increased by the same

19055
00:03:27,730 --> 00:03:30,160
arbitrary amount. And then finally,

19056
00:03:30,190 --> 00:03:35,190
we can get our ball to go to this new X and new Y.

19057
00:03:37,690 --> 00:03:39,640
So now when we run our code,

19058
00:03:39,880 --> 00:03:44,500
you can see that our ball immediately goes off the screen to the top right

19059
00:03:44,500 --> 00:03:48,130
corner. If we want the ball to slow down a little bit,

19060
00:03:48,190 --> 00:03:50,950
we can do one of two things. Either

19061
00:03:50,980 --> 00:03:55,980
we can go into the move method and change this 10 here to say a 1.

19062
00:03:57,010 --> 00:04:01,360
That way, every time our loop runs, our ball will only move one pixel.

19063
00:04:02,080 --> 00:04:06,490
Alternatively, we can pause the loop for a short time during each iteration.

19064
00:04:07,480 --> 00:04:10,180
Moving the ball at a tiny amount does work,

19065
00:04:10,330 --> 00:04:14,350
but I'm going to go with the second option and import our time module.

19066
00:04:14,770 --> 00:04:18,790
Then I'm going to get our while loop to sleep for a little bit in between each

19067
00:04:18,790 --> 00:04:19,690
of the updates.

19068
00:04:20,320 --> 00:04:24,460
So, I normally start off with just a 0.1 second sleep,

19069
00:04:24,790 --> 00:04:28,450
and you can see now a ball moves at a more reasonable pace

19070
00:04:28,720 --> 00:04:31,690
and we actually have a chance of catching it with one of the paddles.

19071
00:04:32,530 --> 00:04:37,210
That's all there is to it. We've now created on the ball class, initialized

19072
00:04:37,270 --> 00:04:42,270
a ball object and we've got the ball to move on every refresh of the screen.


19073
00:00:00,030 --> 00:00:02,580
Now we've done most of the easy parts,

19074
00:00:02,610 --> 00:00:05,790
getting a paddle and a ball up and running on our screen.

19075
00:00:06,120 --> 00:00:08,700
The next few parts are going to be a little bit more tricky.

19076
00:00:09,270 --> 00:00:13,530
And the first thing we're going to tackle is how to detect collision when the

19077
00:00:13,530 --> 00:00:18,530
ball hits the wall at the top and the bottom and getting the ball to bounce.

19078
00:00:19,470 --> 00:00:21,210
Now, we only need to detect

19079
00:00:21,240 --> 00:00:24,660
collision on the top and the bottom walls

19080
00:00:24,930 --> 00:00:29,190
because when the ball hits the right or of the left edges of the program,

19081
00:00:29,490 --> 00:00:33,300
it should actually be caught by one of the paddles. And if it isn't,

19082
00:00:33,360 --> 00:00:35,730
then that means that player has missed the ball

19083
00:00:35,940 --> 00:00:37,440
and it's a point to the other side.

19084
00:00:37,920 --> 00:00:42,920
So we need to focus on how can we detect when the ball has collided with the top

19085
00:00:43,830 --> 00:00:45,060
or bottom walls,

19086
00:00:45,420 --> 00:00:50,420
when has its position gone past a certain point that it probably is going to

19087
00:00:51,210 --> 00:00:54,810
collide with the wall. We've done something similar in snake, but it's again

19088
00:00:54,870 --> 00:00:58,260
time to revisit this topic. Now on top of that,

19089
00:00:58,260 --> 00:01:01,650
we have to figure out how do we get the ball to actually bounce?

19090
00:01:01,980 --> 00:01:06,090
And what does bouncing actually mean in terms of changing the position of the

19091
00:01:06,090 --> 00:01:06,923
ball?

19092
00:01:06,960 --> 00:01:11,960
When the ball is constantly going up in the Y value and going up in the X value

19093
00:01:12,390 --> 00:01:14,340
in order to travel in this direction,

19094
00:01:14,670 --> 00:01:19,170
what actually happens to the X and Y values when it bounces?

19095
00:01:19,530 --> 00:01:22,440
Which one gets reduced and which one stays constant?

19096
00:01:23,430 --> 00:01:28,430
Have a think about those questions and play around with some of those numbers

19097
00:01:29,220 --> 00:01:33,630
and see if you can complete this challenge by yourself. If you get stuck

19098
00:01:33,690 --> 00:01:35,250
or if you just want to check the answer,

19099
00:01:35,490 --> 00:01:37,950
then come back and I'll go through the solution with you.

19100
00:01:40,680 --> 00:01:43,590
All right. So it's going to be inside our while loop

19101
00:01:43,800 --> 00:01:48,180
where I'm going to be detecting the collision with the wall.

19102
00:01:48,720 --> 00:01:52,440
And in order to detect the collision with the wall, essentially,

19103
00:01:52,470 --> 00:01:57,450
what I'm going to say is that if the screen is 600 by 800,

19104
00:01:57,870 --> 00:02:00,870
when the ball is at a Y position

19105
00:02:00,900 --> 00:02:03,390
that is above 300,

19106
00:02:03,420 --> 00:02:05,940
remember 300 is half of 600,

19107
00:02:06,270 --> 00:02:11,270
and the Y-axis goes from 0 to 300 and 0 to -300.

19108
00:02:12,780 --> 00:02:15,630
So once the ball is past 300,

19109
00:02:15,930 --> 00:02:19,770
then it's going to be way past the wall, right? So at that point,

19110
00:02:19,800 --> 00:02:22,230
I can be pretty sure that it's going to hit the wall

19111
00:02:22,260 --> 00:02:23,970
or it has it already hit the wall.

19112
00:02:24,540 --> 00:02:27,810
So that will be my criteria for detecting collision.

19113
00:02:28,170 --> 00:02:33,170
So it can say if the ball.ycor is greater than 300,

19114
00:02:36,960 --> 00:02:41,610
well in that case it's basically gone too far up and it's hit the top wall. Now,

19115
00:02:41,670 --> 00:02:44,820
in addition, I can add a or statement to say

19116
00:02:44,850 --> 00:02:49,620
if the ball.ycor is less than -300,

19117
00:02:49,980 --> 00:02:53,670
then that means it's gone too far down and it's hit the bottom wall.

19118
00:02:54,120 --> 00:02:57,690
So in this case, it needs to bounce.

19119
00:02:58,930 --> 00:03:02,350
So we need to figure out how to get our ball to bounce.

19120
00:03:02,770 --> 00:03:07,770
And we're going to create a bounce method in our ball class in order to tell it

19121
00:03:08,260 --> 00:03:10,270
how to do this. Firstly,

19122
00:03:10,300 --> 00:03:15,300
we're going to need to figure out a new Y because the Y coordinate needs to

19123
00:03:15,580 --> 00:03:17,530
essentially reverse. So,

19124
00:03:17,530 --> 00:03:22,510
whereas previously our Y coordinate was going up and up and up increasing each

19125
00:03:22,510 --> 00:03:26,860
time, when it hits the wall it needs to reverse direction.

19126
00:03:27,130 --> 00:03:28,750
So if it was increasing,

19127
00:03:28,810 --> 00:03:32,740
it needs to decrease. If it was decreasing, it needs to increase.

19128
00:03:33,250 --> 00:03:38,250
So basically we need the opposite of what it currently is. To do that,

19129
00:03:38,680 --> 00:03:41,770
the easiest way is to create a attribute

19130
00:03:41,800 --> 00:03:45,010
which I'm going to call x_move and another

19131
00:03:45,010 --> 00:03:47,290
which I'm going to call y_move.

19132
00:03:48,640 --> 00:03:51,160
These are going to start out at 10,

19133
00:03:51,610 --> 00:03:55,300
and every time we move our ball we're going to say,

19134
00:03:55,800 --> 00:04:00,210
self.xcor + self.x_move,

19135
00:04:00,660 --> 00:04:03,510
and plus self.y_move.

19136
00:04:03,960 --> 00:04:06,210
This basically hasn't changed anything.

19137
00:04:06,210 --> 00:04:09,390
It's just that every single time the ball moves,

19138
00:04:09,660 --> 00:04:13,950
it's going to increase in the X coordinate by 10 pixels

19139
00:04:14,370 --> 00:04:19,290
and also increased by 10 pixels in the Y coordinate. Now,

19140
00:04:19,320 --> 00:04:21,060
when we bounce however,

19141
00:04:21,510 --> 00:04:24,390
we need to change our y_move

19142
00:04:24,630 --> 00:04:29,630
so that it's the opposite in terms of direction of what it used to be.

19143
00:04:31,020 --> 00:04:35,310
So if it used to be +10 we want it to be now -10,

19144
00:04:35,790 --> 00:04:40,170
and if it used to be -10, we want it to be now +10. To do that,

19145
00:04:40,230 --> 00:04:43,110
all we need to do is multiply it by - 1.

19146
00:04:43,680 --> 00:04:48,680
So that means if y_move is currently equal to 10 and 10 is being added to the Y

19147
00:04:48,990 --> 00:04:51,750
coordinate, then this ball is moving upwards.

19148
00:04:52,170 --> 00:04:56,760
But when we reverse the direction by multiplying it by -1,

19149
00:04:57,120 --> 00:04:59,490
now that is now -10.

19150
00:04:59,940 --> 00:05:03,570
So we're now adding -10 to the Y coordinate

19151
00:05:03,600 --> 00:05:08,520
which is the same as subtracting 10. So this is some basic high school math

19152
00:05:08,550 --> 00:05:13,080
that's going to get our pong program to start moving in the right direction.

19153
00:05:14,040 --> 00:05:17,370
Now, back in the main.py under these conditions

19154
00:05:17,400 --> 00:05:19,770
when the ball has hit the top or the bottom,

19155
00:05:20,130 --> 00:05:22,650
we're going to get the ball to bounce.

19156
00:05:23,550 --> 00:05:28,380
And now if I hit run, you should see that when the ball hits the top screen,

19157
00:05:28,650 --> 00:05:32,580
it comes right back, exactly in the way that we want it to.

19158
00:05:33,120 --> 00:05:35,130
But the only thing that we might need to tweak 

19159
00:05:35,280 --> 00:05:39,450
is look at how far it's gone before it actually bounces. It completely disappeared

19160
00:05:40,140 --> 00:05:42,870
of the screen before it actually makes a bounce.

19161
00:05:43,260 --> 00:05:46,320
So we can adjust these values accordingly.

19162
00:05:46,350 --> 00:05:50,490
So I think it works best that when we actually have it as 280.

19163
00:05:51,000 --> 00:05:55,680
So remember that the width of the ball is 20 pixels

19164
00:05:55,980 --> 00:05:58,580
so if we're 20 pixels away from the wall,

19165
00:05:58,730 --> 00:06:02,240
then that's pretty much where we need to bounce. So if I run this again,

19166
00:06:02,270 --> 00:06:06,980
you can see that the ball hits close to the wall and then it comes right back.

19167
00:06:08,300 --> 00:06:12,320
So this will take a little bit of thinking to get your head around it.

19168
00:06:12,650 --> 00:06:17,650
The best way to really understand this is to print out the values of the new_y

19169
00:06:19,070 --> 00:06:20,840
and also of the y_move

19170
00:06:21,080 --> 00:06:26,060
and also after you've modified the move in the bounce. Look at those numbers

19171
00:06:26,150 --> 00:06:30,320
and you'll eventually be able to understand what's actually happening to the

19172
00:06:30,320 --> 00:06:33,140
position of the ball. But effectively,

19173
00:06:33,170 --> 00:06:38,030
all that we're doing is we're defining an amount that the ball is going to move

19174
00:06:38,090 --> 00:06:40,400
by in the X and the Y axis.

19175
00:06:40,850 --> 00:06:45,850
We're adding that amount to the X and Y coordinates in order to move the ball.

19176
00:06:47,000 --> 00:06:50,180
And when the ball needs to bounce off the top and bottom walls,

19177
00:06:50,450 --> 00:06:55,450
we reverse the y_move number so that we get it to subtract instead of add.

19178
00:06:57,890 --> 00:07:00,230
And that moves it in the opposite direction.


19179
00:00:00,180 --> 00:00:02,009
So we figured out how to detect 

19180
00:00:02,040 --> 00:00:07,040
collision with the top and bottom walls and make our ball bounce off the walls.

19181
00:00:07,470 --> 00:00:11,550
The next thing we need to do is to detect when there's a collision with the

19182
00:00:11,550 --> 00:00:14,970
paddle and make the ball bounce off the paddle.

19183
00:00:15,630 --> 00:00:18,840
This is probably going to be the hardest part of this program yet

19184
00:00:19,080 --> 00:00:21,600
so I wanna talk you through the logic. Now,

19185
00:00:21,630 --> 00:00:25,650
how can we know when the ball has hit the paddle? Now,

19186
00:00:25,680 --> 00:00:30,680
normally we use the distance method to check what is the distance between the

19187
00:00:30,690 --> 00:00:34,680
ball and the paddle. And if it's less than a certain amount,

19188
00:00:34,710 --> 00:00:38,670
then we can be relatively sure that they've made contact with each other.

19189
00:00:39,360 --> 00:00:42,540
So the code that we normally use would be something like this.

19190
00:00:42,960 --> 00:00:47,190
We get our ball and we check its distance from the paddle.

19191
00:00:47,820 --> 00:00:52,820
Now remember that our ball has a width of 20 pixels and our paddle has a

19192
00:00:54,150 --> 00:00:57,930
width of 20 pixels. Normally we would say, well,

19193
00:00:57,960 --> 00:01:02,430
if that distance between the two of them is less than 20, well,

19194
00:01:02,430 --> 00:01:04,500
then they've probably made contact, right?

19195
00:01:05,040 --> 00:01:09,300
But the problem occurs when the ball hits the paddle, not right in the center,

19196
00:01:09,390 --> 00:01:11,370
but at the edge of the paddle,

19197
00:01:11,760 --> 00:01:16,500
because this distance measures the center of the ball from the centre of the

19198
00:01:16,500 --> 00:01:18,570
paddle as the distance.

19199
00:01:18,600 --> 00:01:22,140
So you can see that this distance is way bigger than 20,

19200
00:01:22,410 --> 00:01:25,200
so it's not going to register as a collision.

19201
00:01:26,280 --> 00:01:28,920
How can we solve this problem? Well,

19202
00:01:28,950 --> 00:01:33,150
we could add on an additional condition. We could check well

19203
00:01:33,150 --> 00:01:38,150
if the ball has gone past a certain point on the X-axis,

19204
00:01:38,700 --> 00:01:43,700
if it's gone far enough over to the right and it's within a 50 pixel distance of

19205
00:01:44,880 --> 00:01:45,713
the paddle,

19206
00:01:45,750 --> 00:01:50,750
then that also means it's made contact with the paddle. Inside our main.py

19207
00:01:52,260 --> 00:01:57,260
I'm going to add a comment to detect collision with right paddle.

19208
00:02:00,120 --> 00:02:04,200
So let's experiment with some numbers here and see if we can get the ball to

19209
00:02:04,200 --> 00:02:06,720
bounce off the paddle. In this case,

19210
00:02:06,750 --> 00:02:11,750
we're going to check if the ball.distance to the r_paddle is less than

19211
00:02:15,570 --> 00:02:20,570
50 and the ball.xcor is greater than 340.

19212
00:02:24,060 --> 00:02:25,830
If the ball has hit the right paddle,

19213
00:02:26,040 --> 00:02:30,840
let's print something to the console to test our code. Let's print made contact.

19214
00:02:32,940 --> 00:02:37,260
So if we run this code and I manage to make contact with the ball,

19215
00:02:37,530 --> 00:02:41,910
you can see that it says 'Made contact' in our console.

19216
00:02:42,390 --> 00:02:44,850
So instead of just printing made contact,

19217
00:02:44,970 --> 00:02:49,650
what we want the ball to do is to again, to bounce. Now,

19218
00:02:49,680 --> 00:02:52,680
this bounce is a little bit different from the last bounce,

19219
00:02:53,040 --> 00:02:58,040
because the previous one was changing its Y coordinate so that it moved in the

19220
00:02:58,470 --> 00:03:02,830
opposite along the vertical. But in this case,

19221
00:03:02,860 --> 00:03:07,420
we actually want it to move along the opposite direction in the horizontal

19222
00:03:07,420 --> 00:03:09,940
because the paddle is here and the ball is coming this way,

19223
00:03:10,120 --> 00:03:14,590
we want it to go back this way. So instead of just calling this bounce,

19224
00:03:14,620 --> 00:03:19,360
I'm going to right-click on it and then refactor and rename to bounce_

19225
00:03:19,420 --> 00:03:23,860
y because this is bouncing in the Y-axis. Now,

19226
00:03:24,220 --> 00:03:28,120
once we hit refactor, it'll change it here and it will change it here.

19227
00:03:29,770 --> 00:03:33,460
Now on top of that, I'm going to define my bounce_x,

19228
00:03:33,730 --> 00:03:37,600
so it bouncing in the X-axis, and this is very similar.

19229
00:03:37,630 --> 00:03:39,910
We're going to change the x_move,

19230
00:03:39,940 --> 00:03:44,940
so the amount that the ball moves each time when the move method is called and

19231
00:03:45,340 --> 00:03:48,100
I'm going to multiply it by -1,

19232
00:03:48,430 --> 00:03:51,160
so reversing the X direction.

19233
00:03:51,850 --> 00:03:54,760
And then when our collision is detected,

19234
00:03:54,790 --> 00:03:58,660
we're going to get the ball to bounce in the X direction.

19235
00:03:59,440 --> 00:04:01,360
So now if we run our code,

19236
00:04:01,390 --> 00:04:04,930
you can see that even though this only works on the right paddle,

19237
00:04:05,200 --> 00:04:07,030
when the ball hits the right paddle

19238
00:04:07,270 --> 00:04:11,500
it moves back and it bounces back towards the left.

19239
00:04:11,860 --> 00:04:16,570
It changes the direction that it was moving in the X-axis.

19240
00:04:17,740 --> 00:04:22,740
So now lets add the collision for both paddles because they both need to bounce

19241
00:04:25,690 --> 00:04:26,920
in the X-axis

19242
00:04:27,280 --> 00:04:32,280
and so we're going to tag onto this a 'or' statement and we're going to say

19243
00:04:32,410 --> 00:04:37,410
or if the ball.distance to the left paddle is also less than 50

19244
00:04:41,860 --> 00:04:43,300
and on top of that

19245
00:04:43,450 --> 00:04:48,450
the ball.xcor is less than -340.

19246
00:04:53,080 --> 00:04:58,080
So this basically checks to see if the ball has gone far enough to the left as

19247
00:04:58,360 --> 00:05:03,360
to be past the paddle and its within a distance of 50 pixels from the left

19248
00:05:05,230 --> 00:05:08,080
paddle. So if we run the code right now,

19249
00:05:08,110 --> 00:05:12,370
you can see that not only does our ball bounce when it hits the right.

19250
00:05:14,230 --> 00:05:16,630
So now when we run the program again,

19251
00:05:16,660 --> 00:05:20,500
you can see that not only does the ball bounce on the right paddle,

19252
00:05:20,740 --> 00:05:24,940
it also bounces when it hits the left paddle.

19253
00:05:26,170 --> 00:05:30,370
Now there's a little bit more tweaking that we can do with the coordinates because

19254
00:05:30,370 --> 00:05:33,160
you can see that when the ball hits the paddle,

19255
00:05:33,220 --> 00:05:38,220
it goes a little bit too far before it actually reverses direction.

19256
00:05:39,160 --> 00:05:44,160
So we can change this to a slightly smaller number if we want it to bounce

19257
00:05:45,580 --> 00:05:48,370
before it's within the actual paddle.

19258
00:05:48,700 --> 00:05:53,700
So we can change this to 320 and this one also to 320 and notice what

19259
00:05:55,000 --> 00:05:59,000
happens now. Before it hits the actual paddle,

19260
00:05:59,180 --> 00:06:04,180
it now actually bounces and it doesn't look like as if the ball's fallen into the

19261
00:06:05,120 --> 00:06:08,960
paddle before it turns back. And there you have it.

19262
00:06:09,080 --> 00:06:12,530
Now we just have to figure out what should happen when the paddle misses the

19263
00:06:12,530 --> 00:06:16,220
ball. For all of that and more, I'll see you in the next lesson.


19264
00:00:00,270 --> 00:00:03,120
Now we're pretty close to the end of the program.

19265
00:00:03,240 --> 00:00:08,130
We've managed to do pretty much everything other than detect when the paddle

19266
00:00:08,130 --> 00:00:12,630
actually misses a ball. And if the right paddle misses the ball,

19267
00:00:12,780 --> 00:00:15,150
then the left player gets a point.

19268
00:00:15,930 --> 00:00:20,340
And this should trigger a restart of the game where the ball goes back to the

19269
00:00:20,340 --> 00:00:23,760
center and starts off in the opposite direction.

19270
00:00:24,600 --> 00:00:26,010
In order to do this,

19271
00:00:26,040 --> 00:00:30,240
to detect when a paddle has actually missed the ball, effectively,

19272
00:00:30,240 --> 00:00:35,130
what we're checking is that the ball has gone past a certain point on the

19273
00:00:35,130 --> 00:00:37,590
screen. So we know that we're already

19274
00:00:37,590 --> 00:00:42,240
checking when the ball goes past this line and it's within 50 pixels of the

19275
00:00:42,240 --> 00:00:42,960
paddle,

19276
00:00:42,960 --> 00:00:46,740
then it should bounce back because that means the ball was caught by the paddle.

19277
00:00:47,130 --> 00:00:51,150
But if it goes further than that, if it goes beyond that on the screen

19278
00:00:51,450 --> 00:00:53,820
like over here or over here,

19279
00:00:54,090 --> 00:00:57,450
then that means it's a miss and we should reset the ball.

19280
00:00:58,200 --> 00:01:01,140
Have a think about how you might create this behavior,

19281
00:01:01,650 --> 00:01:05,310
and as a challenge to yourself, see if you can complete the code.

19282
00:01:09,920 --> 00:01:12,200
So I'm going to add another comment here

19283
00:01:12,230 --> 00:01:17,230
which is going to be detect when right paddle misses.

19284
00:01:19,490 --> 00:01:21,920
The right paddle has basically missed the ball

19285
00:01:22,040 --> 00:01:27,040
if the ball.xcor is beyond 380.

19286
00:01:28,430 --> 00:01:31,550
We know that the width of the screen is 800

19287
00:01:31,640 --> 00:01:34,850
and we know that the paddle is at 350.

19288
00:01:35,120 --> 00:01:40,040
So the paddle basically goes from 340 to 360,

19289
00:01:40,370 --> 00:01:42,470
and if it's already gone past 380,

19290
00:01:42,470 --> 00:01:47,120
then the paddle has definitely missed the ball. So in this situation,

19291
00:01:47,150 --> 00:01:50,570
we're going to get the ball to reset its position.

19292
00:01:51,170 --> 00:01:55,160
And this is going to be a method in the ball class.

19293
00:01:55,730 --> 00:01:58,580
So let's create it and I'm just going to paste it in

19294
00:01:58,580 --> 00:02:03,580
so I don't make any errors in terms of the naming. Resetting the position of the

19295
00:02:04,640 --> 00:02:09,639
ball is going to involve getting the ball to go to the original position.

19296
00:02:10,310 --> 00:02:15,230
So we can tell self to go to (0, 0).

19297
00:02:16,010 --> 00:02:17,780
Now, if we run our code,

19298
00:02:18,020 --> 00:02:22,490
you can see when the ball has gone past a certain point and it's not caught by

19299
00:02:22,490 --> 00:02:25,490
the paddle, it goes back into the center.

19300
00:02:26,810 --> 00:02:30,380
But we want the ball to go in the opposite direction

19301
00:02:30,500 --> 00:02:35,300
once it's been missed by the right-sided player. It's time for the left-sided

19302
00:02:35,300 --> 00:02:36,650
player to get a turn.

19303
00:02:37,430 --> 00:02:41,420
So in addition to getting the ball to reset its position,

19304
00:02:41,750 --> 00:02:45,830
we're going to get the ball to reverse its X-axis.

19305
00:02:46,280 --> 00:02:49,610
So we're going to call self.bounce_x.

19306
00:02:50,480 --> 00:02:53,630
Now notice how when the ball gets missed,

19307
00:02:54,050 --> 00:02:56,420
then its direction gets reversed,

19308
00:02:56,510 --> 00:03:00,610
it starts off in the center and it goes off in the opposite direction.

19309
00:03:01,360 --> 00:03:05,100
Let's go ahead and define the left-sided paddle miss.

19310
00:03:07,530 --> 00:03:12,530
And we can do that by simply saying ball.xcor is less than -380.

19311
00:03:15,600 --> 00:03:19,920
And in this case, we're again going to get the ball to reset the position.

19312
00:03:20,490 --> 00:03:20,670
Now,

19313
00:03:20,670 --> 00:03:24,900
the reason why I've got these in separate if statements is because later on,

19314
00:03:24,930 --> 00:03:29,610
we're going to need to detect when the right-sided player or the left-sided

19315
00:03:29,610 --> 00:03:33,420
player actually gains a point. So when the right paddle misses,

19316
00:03:33,720 --> 00:03:37,650
the left player gets a point, when the left paddle misses the right player

19317
00:03:37,650 --> 00:03:38,490
gets a point.

19318
00:03:39,660 --> 00:03:44,070
Now when the ball goes past the right edge and it's not caught by the paddle,

19319
00:03:44,430 --> 00:03:47,430
then it starts off in the center and it moves to the left.

19320
00:03:47,850 --> 00:03:51,480
When it's not caught by the left side of the paddle,

19321
00:03:51,660 --> 00:03:54,210
it starts off in the center and it goes to the right.

19322
00:03:55,080 --> 00:03:59,190
All that's left to do is to figure out how to do the scoring.

19323
00:03:59,550 --> 00:04:02,130
And that is what we're going to do on the next lesson.


19324
00:00:00,330 --> 00:00:04,260
To start, we're going to need to create a new scoreboard file.

19325
00:00:05,640 --> 00:00:07,170
And then inside this file

19326
00:00:07,170 --> 00:00:12,170
we're going to add our usual imports and we're going to create the scoreboard

19327
00:00:12,390 --> 00:00:13,223
class.

19328
00:00:13,650 --> 00:00:17,400
Now the scoreboard class is going to inherit from the turtle class,

19329
00:00:17,670 --> 00:00:22,670
so we can go ahead and add all of our inits and our super.init.

19330
00:00:24,330 --> 00:00:26,700
Now let's define our scoreboard.

19331
00:00:27,000 --> 00:00:31,590
It's going to have a white color so it shows up on the black background,

19332
00:00:32,040 --> 00:00:35,670
it's going to have pen up because we don't want it to draw,

19333
00:00:36,180 --> 00:00:41,180
and it's also going to have its turtle hidden because we're only interested in

19334
00:00:41,310 --> 00:00:43,860
it being able to write something.

19335
00:00:44,430 --> 00:00:47,910
And the thing that we want it to write is the current score.

19336
00:00:48,270 --> 00:00:52,140
Let's go ahead and create some attributes for the scoreboard class.

19337
00:00:52,500 --> 00:00:56,850
One is going to be the l_score which starts off at zero,

19338
00:00:57,330 --> 00:01:01,200
and the other is going to be the r_score which starts off at zero.

19339
00:01:01,650 --> 00:01:06,240
So our scoreboard is going to keep track of how the left player and the right

19340
00:01:06,240 --> 00:01:07,470
player are doing.

19341
00:01:08,640 --> 00:01:12,330
And then it's going to write this onto the screen.

19342
00:01:12,810 --> 00:01:16,350
So we're going to write the self.l_score first,

19343
00:01:16,920 --> 00:01:21,920
and we're going to change the alignment to center and also change the font to

19344
00:01:23,070 --> 00:01:24,600
something quite large,

19345
00:01:24,840 --> 00:01:29,840
like a courier font with 80 points and have a normal weight.

19346
00:01:32,520 --> 00:01:35,970
Where do we want this to be written though? Because by default,

19347
00:01:35,970 --> 00:01:39,990
this is going to be written at the center of the screen, (0, 0).

19348
00:01:40,590 --> 00:01:41,430
But instead,

19349
00:01:41,490 --> 00:01:46,490
what we want it to do is we probably want it to go to somewhere on the top-left

19350
00:01:46,920 --> 00:01:49,350
of the screen. This is the left player score.

19351
00:01:49,890 --> 00:01:52,320
So you can have a play around with the coordinates,

19352
00:01:52,440 --> 00:01:56,610
but I found that -100 in the X-axis,

19353
00:01:56,640 --> 00:02:01,080
so a little bit to the left of the center and then 200 on the Y-axis,

19354
00:02:01,080 --> 00:02:06,080
so near the top of the screen seems to do well for this left-sided score.

19355
00:02:06,720 --> 00:02:11,720
Now let's make this show up by going back to our main.py and importing our

19356
00:02:12,210 --> 00:02:16,200
scoreboard class and creating a new scoreboard object.

19357
00:02:17,850 --> 00:02:21,570
So when we hit run, you can see that big zero show up bright here.

19358
00:02:22,590 --> 00:02:23,010
Now,

19359
00:02:23,010 --> 00:02:27,870
the next thing we need to do is to show the right-sided player's score.

19360
00:02:28,410 --> 00:02:33,410
We're going to make our scoreboard go to the opposite side of the screen,

19361
00:02:34,800 --> 00:02:37,980
so that's going to be +100 and again

19362
00:02:37,980 --> 00:02:40,230
with a Y value of 200.

19363
00:02:40,980 --> 00:02:45,360
And then we're going to get it to write the right-sided score,

19364
00:02:45,990 --> 00:02:50,730
so our score, and we're going to have the same alignment and the same font.

19365
00:02:51,720 --> 00:02:56,250
Now you can see 0 0 when the game starts out. Now,

19366
00:02:56,250 --> 00:03:00,100
what we actually want our scoreboard to do is the keep track of the score.

19367
00:03:00,490 --> 00:03:05,110
So when the right paddle misses, it's a score to the left-sided player.

19368
00:03:05,860 --> 00:03:08,530
We can define that in our main.py.

19369
00:03:09,070 --> 00:03:11,350
When the right paddle misses,

19370
00:03:11,530 --> 00:03:14,500
then we're going to get these scoreboard to

19371
00:03:14,530 --> 00:03:17,500
give the left side a point.

19372
00:03:17,920 --> 00:03:22,920
So maybe we could have a method called l_point in our scoreboard that increases

19373
00:03:24,820 --> 00:03:27,460
the point in the left-sided player.

19374
00:03:27,700 --> 00:03:32,530
So we can say self.l_score +=1.

19375
00:03:33,400 --> 00:03:36,490
In addition, we're going to need to update our scoreboard,

19376
00:03:36,880 --> 00:03:39,790
but all of that code is stuck in the init.

19377
00:03:40,090 --> 00:03:44,740
So let's go ahead and move it out into a separate function

19378
00:03:44,770 --> 00:03:47,110
which we'll call update_scoreboard. 

19379
00:03:49,470 --> 00:03:52,290
And we can call self.update_scoreboard

19380
00:03:52,530 --> 00:03:57,180
when we first initialized the scoreboard but also when we score a point.

19381
00:03:59,280 --> 00:04:00,960
Now, when we run our code,

19382
00:04:01,020 --> 00:04:05,400
you can see that when the right-sided misses, our left

19383
00:04:05,400 --> 00:04:10,230
side gets a point. But at the moment, it's overwriting the previous score.

19384
00:04:10,800 --> 00:04:12,030
So to prevent that,

19385
00:04:12,060 --> 00:04:16,890
we have to add a self.clear before we update the scoreboard.

19386
00:04:18,269 --> 00:04:23,010
And you can see now it erases everything that used to be there and it updates

19387
00:04:23,010 --> 00:04:27,840
the score. So we've addressed when you are right paddle misses,

19388
00:04:27,900 --> 00:04:31,290
but what about when our left paddle misses? Well,

19389
00:04:31,290 --> 00:04:34,200
we should have a method called r_point as well

19390
00:04:34,440 --> 00:04:36,720
that gives the right side a point.

19391
00:04:38,070 --> 00:04:39,780
So let's add that over here.

19392
00:04:42,690 --> 00:04:47,550
Increase the r_score by one and we'll again call

19393
00:04:47,550 --> 00:04:48,600
update_scoreboard.

19394
00:04:52,020 --> 00:04:52,380
Right.

19395
00:04:52,380 --> 00:04:57,300
Now when our left side misses, we get a point to the left,

19396
00:04:57,720 --> 00:05:00,900
and when our left side misses, we get a point to the right.

19397
00:05:01,800 --> 00:05:05,220
That's pretty much all of pong. Now,

19398
00:05:05,250 --> 00:05:08,910
if you want an extra challenge both in terms of playing pong

19399
00:05:09,300 --> 00:05:10,530
as well as the code,

19400
00:05:10,950 --> 00:05:15,950
see if you can figure out a way of getting the ball to increase its speed

19401
00:05:16,320 --> 00:05:18,330
every time it hits a paddle,

19402
00:05:18,780 --> 00:05:23,780
because that will make the game a lot more exciting instead of having it always

19403
00:05:24,150 --> 00:05:27,660
move so slowly. If you can't figure it out,

19404
00:05:27,900 --> 00:05:30,630
then continue watching and I'll show you the solution.

19405
00:05:33,990 --> 00:05:36,720
So in order to speed up the ball,

19406
00:05:37,170 --> 00:05:42,170
the key is in how much time we make our game loop sleep.

19407
00:05:43,140 --> 00:05:46,440
Because the shorter that this sleep is,

19408
00:05:46,470 --> 00:05:48,690
let's say instead of 0.1 second

19409
00:05:48,720 --> 00:05:52,050
let's do 0.01 second.

19410
00:05:53,010 --> 00:05:57,000
And if we run now, you can see our ball moves a lot faster.

19411
00:05:57,560 --> 00:06:00,590
Let's make it even more extreme and add another zero.

19412
00:06:02,750 --> 00:06:07,130
So how can we reduce this number by a little bit each time,

19413
00:06:07,400 --> 00:06:09,650
but never make it go into the negative

19414
00:06:09,710 --> 00:06:12,140
because if this becomes a negative number,

19415
00:06:12,410 --> 00:06:17,300
then we actually get an error over here telling us that the sleep length must be

19416
00:06:17,300 --> 00:06:20,240
non-negative. In order to do this,

19417
00:06:20,300 --> 00:06:24,740
we have to figure out a way of making this number a little bit smaller each

19418
00:06:24,740 --> 00:06:25,573
time.

19419
00:06:25,910 --> 00:06:30,860
So let's make this number a attribute in our ball class.

19420
00:06:31,460 --> 00:06:36,260
Now I don't want to call it speed because that might be a bit confusing because

19421
00:06:36,350 --> 00:06:40,010
the turtle class already has a method called speed

19422
00:06:40,340 --> 00:06:45,290
as you can see here. So instead I'm going to call it move_speed,

19423
00:06:45,860 --> 00:06:47,810
and I'm going to set it to 0.1.

19424
00:06:49,100 --> 00:06:53,510
So now inside our main.py, instead of having a hard-coded

19425
00:06:53,510 --> 00:06:57,470
number I'm going to get hold of my ball.move_speed.

19426
00:06:58,370 --> 00:07:03,170
Now, every single time our ball bounces in the X-axis,

19427
00:07:03,500 --> 00:07:06,350
it means that has been touched by a paddle.

19428
00:07:06,980 --> 00:07:11,690
So inside this method, in addition to getting it to reverse its direction,

19429
00:07:12,110 --> 00:07:17,110
we can get the move_speed to reduce by multiplying it by a decimal number.

19430
00:07:18,200 --> 00:07:22,940
So I've stuck with 0.9 because that seems to work for me.

19431
00:07:23,240 --> 00:07:24,320
So for example,

19432
00:07:24,350 --> 00:07:29,350
if we start out with a value of 5 and we multiply that by 0.9,

19433
00:07:29,870 --> 00:07:31,190
it becomes 4.5.

19434
00:07:31,550 --> 00:07:35,300
And if we multiply that by 0.9 becomes 4.05.

19435
00:07:35,720 --> 00:07:39,140
So basically each time the ball bounces on a paddle,

19436
00:07:39,410 --> 00:07:43,790
it's going to increase in speed. But this can't go on indefinitely.

19437
00:07:44,060 --> 00:07:47,630
When we reset the game once one player has lost,

19438
00:07:47,900 --> 00:07:52,580
we have to set this move_speed back to the original 0.1,

19439
00:07:53,030 --> 00:07:57,020
just so that it doesn't keep on increasing in speed indefinitely.

19440
00:07:57,740 --> 00:08:01,190
So now you can see whenever the ball hits a paddle,

19441
00:08:02,510 --> 00:08:07,340
it will increase its speed ever so slightly making it just a little bit more

19442
00:08:07,340 --> 00:08:09,080
challenging for the players.

19443
00:08:10,130 --> 00:08:14,120
Now you can of course tweak around with that number so instead of 0.9,

19444
00:08:14,120 --> 00:08:18,110
you could have 0.5, which basically haves the speed each time,

19445
00:08:18,560 --> 00:08:22,790
but have a play around with that and see what you prefer. Now

19446
00:08:22,790 --> 00:08:27,530
one last thing to mention before we finish off today is that when I'm testing

19447
00:08:27,530 --> 00:08:29,690
this program on my computer,

19448
00:08:30,080 --> 00:08:33,650
it seems like when I hold down the up hey or the down key,

19449
00:08:33,679 --> 00:08:36,289
my paddle will continuously move.

19450
00:08:36,740 --> 00:08:41,659
But there seems to be a bug with turtle where if I hold down the 'w' key,

19451
00:08:41,990 --> 00:08:45,230
it can only move one bit at a time,

19452
00:08:45,710 --> 00:08:48,380
but it doesn't seem to affect the 's' key.

19453
00:08:49,070 --> 00:08:51,740
So I've been doing a bit of digging around online

19454
00:08:51,800 --> 00:08:56,610
and I can't figure out exactly why this is. If you manage to figure it out,

19455
00:08:56,640 --> 00:08:58,980
then feel free to add it to the Q/A so that

19456
00:08:58,980 --> 00:09:03,870
other students can learn from it. But so far I've been coming up empty.

19457
00:09:04,320 --> 00:09:05,580
But this is just a warning

19458
00:09:05,580 --> 00:09:10,580
in case you find this behavior as well on your computer and you get confused and

19459
00:09:10,620 --> 00:09:12,990
thinking it's something wrong with your code. It's not.

19460
00:09:13,290 --> 00:09:17,520
It's something about the turtle module that causes it to behave like this.

19461
00:09:17,850 --> 00:09:19,650
So don't worry if that's happening to you.

19462
00:09:20,130 --> 00:09:22,080
And if you're playing pong with a friend,

19463
00:09:22,290 --> 00:09:24,690
you can always trick them to use the left sided player.



19464
00:00:00,330 --> 00:00:05,100
Hey guys, welcome to Day 23 of 100 Days of Code. Now,

19465
00:00:05,100 --> 00:00:09,450
today we're going to be building towards our second capstone project,

19466
00:00:10,050 --> 00:00:13,170
and this is going to be a turtle crossing game.

19467
00:00:13,680 --> 00:00:17,190
You might've played Crossy Road. So this is a similar concept.

19468
00:00:17,280 --> 00:00:22,050
We have a whole bunch of cars going across a super busy multi-lane highway

19469
00:00:22,350 --> 00:00:25,890
and our turtle is the player who has to cross the road.

19470
00:00:26,580 --> 00:00:30,990
This is what the gameplay looks like. The player controls the turtle

19471
00:00:31,290 --> 00:00:33,240
which can only go forwards, and

19472
00:00:33,900 --> 00:00:36,960
there's a whole bunch of randomly generated cars

19473
00:00:37,200 --> 00:00:41,370
which are going horizontally across the screen. Now, once a player

19474
00:00:41,370 --> 00:00:44,340
reaches the other side of the screen, the cars speed up,

19475
00:00:44,550 --> 00:00:46,920
but the player goes back to the starting position,

19476
00:00:47,190 --> 00:00:49,980
ready to cross the screen again. Now,

19477
00:00:50,040 --> 00:00:53,610
at some point when the player turtle hits a car,

19478
00:00:54,000 --> 00:00:57,720
then that is game over. It's a pretty simple game,

19479
00:00:57,870 --> 00:01:01,710
but it's going to test you on a lot of things that you've learned so far,

19480
00:01:02,040 --> 00:01:05,730
including how to great classes, how to inherit classes,

19481
00:01:06,000 --> 00:01:11,000
how do you use the objects created from those classes and also your knowledge of

19482
00:01:11,070 --> 00:01:14,430
the turtle coordinate system and the turtle game engine.

19483
00:01:15,360 --> 00:01:19,050
Once you are ready, head over to the next lesson where you'll find the starting

19484
00:01:19,050 --> 00:01:24,030
code for this project, and also you'll be able to choose your difficulty level.

19485
00:01:24,720 --> 00:01:26,670
So head over there and get started now.


19486
00:00:00,270 --> 00:00:03,480
Now, hopefully you've already downloaded the starting project,

19487
00:00:03,840 --> 00:00:07,020
so you can go ahead and click open in PyCharm,

19488
00:00:07,410 --> 00:00:12,410
find the location where you've downloaded your turtle-crossing-start and make

19489
00:00:12,510 --> 00:00:14,850
sure that you've unzipped that zip file

19490
00:00:15,420 --> 00:00:20,100
and you've got the actual folder, which contains all of the starting files.

19491
00:00:20,640 --> 00:00:25,640
So select the folder and then click open and we have to configure a Python

19492
00:00:26,340 --> 00:00:31,340
interpreter and make sure that your Python interpreter is at a minimum of Python

19493
00:00:31,380 --> 00:00:34,680
3.8. So you can use 3.9 or above,

19494
00:00:35,010 --> 00:00:36,930
but if it's lower than 3.8,

19495
00:00:36,930 --> 00:00:41,930
you might get some errors and some problems. Refer back to when we first started

19496
00:00:42,270 --> 00:00:46,590
out using PyCharm and we installed Python if you get stuck on this.

19497
00:00:47,370 --> 00:00:50,670
Now, if you take a look at inside our project folder,

19498
00:00:50,970 --> 00:00:54,390
you can see I've already created four files for you.

19499
00:00:54,960 --> 00:00:56,940
These files are pretty bare bones,

19500
00:00:56,970 --> 00:01:00,420
but if you take a look at the main.py file

19501
00:01:00,630 --> 00:01:03,420
which is your starting point for your program,

19502
00:01:03,720 --> 00:01:07,710
you can see that I've written a little bit of code that we learned about in

19503
00:01:07,710 --> 00:01:08,790
previous lessons.

19504
00:01:09,090 --> 00:01:14,090
So we've created a screen object and we've set up the screen to be 600 by 600

19505
00:01:15,270 --> 00:01:16,103
pixels.

19506
00:01:16,410 --> 00:01:21,030
And then we've turned off the tracer by doing the tracer(0),

19507
00:01:21,480 --> 00:01:26,400
and instead, we're getting the screen to update every 0.1 seconds.

19508
00:01:26,850 --> 00:01:31,620
So within the while loop, the code is going to run every 0.1 seconds.

19509
00:01:31,980 --> 00:01:35,100
So whatever it is that you put inside this while loop,

19510
00:01:35,460 --> 00:01:38,490
it's going to be refreshed every 0.1 seconds.

19511
00:01:39,180 --> 00:01:44,180
Now, you'll also see that I've imported some classes from these files; player,

19512
00:01:45,870 --> 00:01:49,170
car_manager, and scoreboard. Now,

19513
00:01:49,230 --> 00:01:50,970
inside these files,

19514
00:01:51,210 --> 00:01:54,360
I've created the starting point for each of the classes.

19515
00:01:54,690 --> 00:01:58,350
The player class is going to be the turtle which we're controlling to cross

19516
00:01:58,350 --> 00:01:59,160
the road,

19517
00:01:59,160 --> 00:02:04,160
the car manager is going to generate all of the random cars and move them

19518
00:02:04,200 --> 00:02:05,160
across the screen,

19519
00:02:05,580 --> 00:02:08,729
and then the scoreboard is just going to write the level that we're currently

19520
00:02:08,729 --> 00:02:11,970
on and also the game over a sequence. Now,

19521
00:02:12,000 --> 00:02:15,690
inside each of these classes, I've got pass written here

19522
00:02:15,720 --> 00:02:19,290
just so that the linter will stop screaming at me. So,

19523
00:02:19,950 --> 00:02:23,430
as we mentioned before, Python doesn't like things are empty,

19524
00:02:23,430 --> 00:02:27,630
so empty functions, empty classes, and you'll get these errors.

19525
00:02:28,410 --> 00:02:32,610
Instead of getting these errors, all I've done is simply written pass

19526
00:02:32,640 --> 00:02:35,490
which essentially just makes this an empty class.

19527
00:02:35,910 --> 00:02:37,560
So when you're creating these classes,

19528
00:02:37,620 --> 00:02:41,880
just delete the pass and you can create it as you would normally. Now,

19529
00:02:41,910 --> 00:02:45,420
in addition, we've got all of these constants in here. For example,

19530
00:02:45,420 --> 00:02:47,640
the starting position of the player turtle,

19531
00:02:47,970 --> 00:02:52,320
how much the turtle should move each time and where the finish line

19532
00:02:52,320 --> 00:02:55,380
is on the Y-axis. In the car_manager

19533
00:02:55,380 --> 00:02:57,660
we've got the colors of the cars,

19534
00:02:57,960 --> 00:03:02,820
we've got the move distance of each of the cars on each refresh,

19535
00:03:03,150 --> 00:03:08,150
and we've also got how much the move distance should increase every time the

19536
00:03:08,280 --> 00:03:11,880
user levels up. Finally, we've got the scoreboard

19537
00:03:11,910 --> 00:03:16,050
which just contains the font that you are going to use to write out the score

19538
00:03:16,050 --> 00:03:20,850
board. That's pretty much an introduction to the starting file.

19539
00:03:21,180 --> 00:03:22,350
So once you're ready,

19540
00:03:22,410 --> 00:03:27,410
feel free to head over to the next lesson and get started with each step of the

19541
00:03:28,080 --> 00:03:28,500
game.


19542
00:00:00,180 --> 00:00:02,160
All right. So just as previously,

19543
00:00:02,220 --> 00:00:07,220
we've split up this large problem of building the game into five smaller

19544
00:00:07,320 --> 00:00:09,090
sub-parts. Firstly,

19545
00:00:09,120 --> 00:00:13,140
moving the turtle, controlling it with the keypress, creating and moving the

19546
00:00:13,140 --> 00:00:15,540
cars automatically across the screen,

19547
00:00:15,810 --> 00:00:19,740
detecting a collision with the car and detecting when the turtle reaches the

19548
00:00:19,740 --> 00:00:21,300
other side. Finally,

19549
00:00:21,300 --> 00:00:24,510
we create a scoreboard that keeps track of which level we're on

19550
00:00:24,750 --> 00:00:27,090
and also that shows game over at the end.

19551
00:00:27,810 --> 00:00:31,710
So the first step is to move the turtle using a keypress.

19552
00:00:32,070 --> 00:00:36,480
The turtle can only go forwards, and every time we hit the Up key

19553
00:00:36,690 --> 00:00:41,580
the turtle moves forward by a set amount until it reaches the other side of the

19554
00:00:41,580 --> 00:00:45,000
screen. This is the first thing that we're going to tackle. Now,

19555
00:00:45,030 --> 00:00:48,180
because this is related to the functionality of the player,

19556
00:00:48,510 --> 00:00:51,870
let's go ahead and create this inside the player class.

19557
00:00:52,800 --> 00:00:54,420
I'm going to delete that pass

19558
00:00:54,540 --> 00:00:59,340
and I'm also going to import the turtle class from the turtle module.

19559
00:01:00,090 --> 00:01:04,170
Now, our player is going to inherit from this turtle class.

19560
00:01:04,709 --> 00:01:06,720
So inside our init,

19561
00:01:06,930 --> 00:01:10,830
we're going to need to add the super.init 

19562
00:01:10,860 --> 00:01:13,860
or you can add it automatically using the light bulb.

19563
00:01:14,460 --> 00:01:19,460
So now this player class can do everything that a turtle class can do and we can

19564
00:01:20,490 --> 00:01:21,870
make it do even more.

19565
00:01:22,830 --> 00:01:27,630
The first thing we're going to do is we're going to set the shape of our player

19566
00:01:27,960 --> 00:01:30,210
and we're gonna set it to a turtle.

19567
00:01:30,810 --> 00:01:34,770
The next thing we're going to do is we're going to call penup so that this

19568
00:01:34,770 --> 00:01:39,330
turtle just remains a shape and it doesn't draw. Finally,

19569
00:01:39,360 --> 00:01:43,470
we need to get it to the starting position and get it to face North.

19570
00:01:43,950 --> 00:01:48,950
We can do that by setting self.goto and then we can set it to go to the

19571
00:01:50,370 --> 00:01:51,660
starting position,

19572
00:01:52,350 --> 00:01:57,350
which you can see is a tuple because it's enclosed inside parentheses and you've

19573
00:01:59,040 --> 00:02:03,300
got values separated by a comma. Finally,

19574
00:02:03,330 --> 00:02:08,330
we're going to set the heading of our turtle so that it faces North,

19575
00:02:09,300 --> 00:02:11,220
which is 90 degrees.

19576
00:02:11,880 --> 00:02:16,800
So now all we have to do is go back into our main.py,

19577
00:02:17,400 --> 00:02:19,410
after we've set up our screen,

19578
00:02:19,650 --> 00:02:23,880
let's go ahead and create a new player from the player class.

19579
00:02:25,290 --> 00:02:27,360
Let's go ahead and run this code.

19580
00:02:28,160 --> 00:02:28,993
...

19581
00:02:30,650 --> 00:02:35,650
And you can see that we've got our little turtle showing up here at the center

19582
00:02:37,400 --> 00:02:40,850
of the bottom of the screen and it's facing North.

19583
00:02:42,380 --> 00:02:47,270
So now the next thing we need to do is to get that turtle to move upwards

19584
00:02:47,540 --> 00:02:49,460
every time we hit the Up key.

19585
00:02:50,060 --> 00:02:53,450
That means we're going to need to get our screen to

19586
00:02:53,480 --> 00:02:57,620
listen for events. After calling screen.listen,

19587
00:02:57,680 --> 00:03:02,680
we're going to get the screen to listen to a keystroke. So we can use onkey to

19588
00:03:04,720 --> 00:03:08,080
set the Up key as the key to listen to.

19589
00:03:08,650 --> 00:03:13,390
And then when that happens, then we're going to call player.

19590
00:03:14,110 --> 00:03:19,110
go_up. And remember that when we're calling methods inside the listener,

19591
00:03:20,320 --> 00:03:24,970
we don't want to add the parentheses because this will trigger it at the point

19592
00:03:25,030 --> 00:03:28,900
where it evaluates this line of code. Instead,

19593
00:03:28,930 --> 00:03:33,550
we want to trigger this function only when this Up key is detected.

19594
00:03:34,240 --> 00:03:39,240
So now all that's left to do is to go into our player.py and define that

19595
00:03:40,000 --> 00:03:41,680
function go_up.

19596
00:03:42,850 --> 00:03:46,630
So how can we move our turtle up? Well,

19597
00:03:46,630 --> 00:03:50,080
we can get our turtle so self,

19598
00:03:50,410 --> 00:03:53,710
and then we can get it to move forwards by a distance.

19599
00:03:54,280 --> 00:03:58,930
And the distance is going to be the move distance that's set in this constant

19600
00:03:58,930 --> 00:04:03,070
here. This means that later on when we want to change the move distance

19601
00:04:03,070 --> 00:04:06,970
if we want it to go further each time, we can just edit it at the top of the

19602
00:04:06,970 --> 00:04:09,130
file instead of digging through the code.

19603
00:04:10,540 --> 00:04:14,350
Now let's run our code again and let's just make sure that it works.

19604
00:04:14,830 --> 00:04:16,660
So now every time I hit the Up key

19605
00:04:16,690 --> 00:04:21,690
my turtle moves up and it keeps on going until it reaches the other side of the

19606
00:04:21,730 --> 00:04:26,500
screen. So that's the first step completed. Now,

19607
00:04:26,530 --> 00:04:28,990
if you think you can complete the next step by yourself,

19608
00:04:29,290 --> 00:04:34,290
then head back to that list of problems broken down and see if you can tackle

19609
00:04:34,390 --> 00:04:39,010
the next one by yourself. If you can't or if you need some extra help,

19610
00:04:39,130 --> 00:04:42,460
then you can always come back to the videos and I'll walk you through the steps

19611
00:04:42,490 --> 00:04:43,120
one by one.


19612
00:00:00,330 --> 00:00:03,570
In the last lesson, we managed to figure out how to get the turtle

19613
00:00:03,780 --> 00:00:08,340
to move with a keypress and that's with every press of the Up key

19614
00:00:08,610 --> 00:00:11,040
the turtle moves further towards North.

19615
00:00:11,730 --> 00:00:15,300
Now the next task is to create and move the cars.

19616
00:00:15,930 --> 00:00:20,930
The cars need to move from right to left and they need to be randomly generated

19617
00:00:21,060 --> 00:00:23,460
along the Y-axis here.

19618
00:00:23,970 --> 00:00:28,970
So they need to be generated right to the right edge of the screen and they can

19619
00:00:29,460 --> 00:00:31,920
appear anywhere along this line,

19620
00:00:32,220 --> 00:00:36,840
and then they're going to move automatically towards the left at a fixed pace.

19621
00:00:37,530 --> 00:00:38,160
Each of these cars,

19622
00:00:38,160 --> 00:00:43,160
you can see, are going to be turtles and they're going to be 20 by 40

19623
00:00:43,740 --> 00:00:46,770
pixels. So we mentioned that by default

19624
00:00:46,860 --> 00:00:50,490
every turtle that we create is 20 by 20 pixels.

19625
00:00:50,940 --> 00:00:54,480
So we'll need to stretch the turtle to make it into this shape.

19626
00:00:55,500 --> 00:01:00,150
Now that we are concerned with the cars let's create our code inside the car

19627
00:01:00,150 --> 00:01:00,983
manager.

19628
00:01:01,680 --> 00:01:06,680
The first thing we'll need to do is to import the turtle class from the turtle

19629
00:01:06,900 --> 00:01:11,900
module and our car manager is going to have a init where we create all of our

19630
00:01:14,790 --> 00:01:18,780
cars. So I'm going to create a list called all_cars,

19631
00:01:19,320 --> 00:01:23,280
and it's going to start out being an empty list. Now,

19632
00:01:23,310 --> 00:01:24,420
at some point,

19633
00:01:24,810 --> 00:01:29,810
our main.py is going to call a function from the car_manager called create_

19634
00:01:30,570 --> 00:01:31,403
cars.

19635
00:01:31,740 --> 00:01:36,740
And this method is going to create a random car somewhere along the Y-axis with

19636
00:01:38,670 --> 00:01:42,780
a given dimension. Each of these cars,

19637
00:01:42,900 --> 00:01:47,900
so let's call it a new_car, is going to be a turtle object and it's going to be

19638
00:01:48,630 --> 00:01:52,680
created in a square shape. Now, in addition,

19639
00:01:52,710 --> 00:01:56,370
we're going to have to change the dimensions of this turtle

19640
00:01:56,730 --> 00:01:59,730
and we're going to use that method that we used before

19641
00:02:00,000 --> 00:02:02,100
which is this one, shapesize.

19642
00:02:02,670 --> 00:02:05,940
Now, what shapesize allows us to do, if you remember,

19643
00:02:06,030 --> 00:02:11,030
is it allows us to stretch our turtle along the width and along the length.

19644
00:02:11,700 --> 00:02:15,150
So we want the width to be double the original size,

19645
00:02:15,180 --> 00:02:20,180
so two times 20 pixels is 40 pixels and the length we don't want to be stretched

19646
00:02:21,090 --> 00:02:21,510
at all.

19647
00:02:21,510 --> 00:02:26,510
So we're going to say it's one times the original length. In addition our new

19648
00:02:27,210 --> 00:02:31,050
car is not going to draw, so we're going to get it to penup.

19649
00:02:31,710 --> 00:02:36,710
And also our new car is going to have a random color. So we can set the color and

19650
00:02:38,400 --> 00:02:43,400
then we can import the random module so that we can use one of these colors in

19651
00:02:44,520 --> 00:02:45,353
this list.

19652
00:02:45,960 --> 00:02:50,960
And we can say random.choice and then pass in our list of colors from this

19653
00:02:52,620 --> 00:02:55,680
COLORS constant. Finally,

19654
00:02:55,710 --> 00:02:59,980
we're going to define where it's going to go on the screen. To do that

19655
00:03:00,040 --> 00:03:03,820
we need to define a random_y position.

19656
00:03:04,360 --> 00:03:08,110
So this again is going to be created from the random module and we're going to

19657
00:03:08,110 --> 00:03:13,110
use the randint and then we're going to define somewhere along this Y-axis,

19658
00:03:14,050 --> 00:03:18,220
which is the vertical, somewhere for this call to be generated at.

19659
00:03:18,880 --> 00:03:22,630
So we know that our screen is 600 by 600, so

19660
00:03:23,110 --> 00:03:27,730
that means the Y-axis goes from +300 to -300.

19661
00:03:28,090 --> 00:03:31,900
But we don't want the car to be generated all the way to the edge because

19662
00:03:31,900 --> 00:03:35,800
remember the turtle needs a bit of starting space and also a bit of ending

19663
00:03:35,800 --> 00:03:38,830
space. So you can play around with this number,

19664
00:03:38,860 --> 00:03:43,360
but I've ended up going with -250 to +250.

19665
00:03:44,140 --> 00:03:49,140
This means that we get a good range in the middle of the screen and that the

19666
00:03:49,300 --> 00:03:53,830
turtle has a bit of empty space at the beginning and also at the end when it

19667
00:03:53,830 --> 00:03:58,090
needs to move across. So now that we've defined our random_

19668
00:03:58,090 --> 00:04:03,090
y, we can tell our new_car to go to the x position

19669
00:04:03,670 --> 00:04:07,030
which is going to be the very edge of the right screen,

19670
00:04:07,300 --> 00:04:10,540
so that's going to be +300, right to the edge.

19671
00:04:10,960 --> 00:04:15,960
And then the y position is going to be the random_y that we just created.

19672
00:04:17,589 --> 00:04:20,170
And finally, once we've created our new_car,

19673
00:04:20,380 --> 00:04:25,380
we're going to append it to our list of all_cars which of course,

19674
00:04:26,650 --> 00:04:31,090
because it's defined in a class, it has to have the self in front of it.

19675
00:04:32,110 --> 00:04:35,830
So self.all_cars.append,

19676
00:04:36,160 --> 00:04:39,730
and then we're going to append this new car that we've just created.

19677
00:04:40,780 --> 00:04:43,120
Now, coming back to our main.py,

19678
00:04:43,450 --> 00:04:48,010
let's create our car_manager from the CarManager class,

19679
00:04:48,490 --> 00:04:51,910
and then we're going to use it inside our game loop here

19680
00:04:52,030 --> 00:04:55,150
so that on every refresh of the screen,

19681
00:04:55,450 --> 00:04:57,070
every 0.1 seconds,

19682
00:04:57,370 --> 00:05:01,330
we're going to get the car_manager to create a new car.

19683
00:05:03,010 --> 00:05:08,010
And strictly this probably shouldn't be plural because each time we call this

19684
00:05:08,470 --> 00:05:11,500
method, it only creates one new car.

19685
00:05:11,980 --> 00:05:15,670
So let's change that method so that it only creates one car,

19686
00:05:15,880 --> 00:05:18,910
but it creates one car every 0.1 seconds.

19687
00:05:19,930 --> 00:05:23,260
Now at this point in time if we run our code,

19688
00:05:23,560 --> 00:05:28,560
you'll actually see nothing happen because the cars are being created at this

19689
00:05:29,500 --> 00:05:30,640
right edge here

19690
00:05:30,820 --> 00:05:34,630
and it's not yet visible on the screen. To make it visible

19691
00:05:34,630 --> 00:05:37,660
we have to move our cars across the screen.

19692
00:05:38,440 --> 00:05:43,440
Let's create another method which we'll call move_cars because this method is

19693
00:05:43,960 --> 00:05:46,420
going to go through our list of cars,

19694
00:05:46,690 --> 00:05:50,230
so for car in self.all_cars,

19695
00:05:50,770 --> 00:05:55,150
and for each of those cars, it's going to move it towards the left

19696
00:05:55,330 --> 00:05:58,370
by the move distance that we've defined up here.

19697
00:05:59,270 --> 00:06:02,240
So to do that, all we need is to get the car

19698
00:06:02,480 --> 00:06:07,460
to move backwards by the starting move distance.

19699
00:06:08,210 --> 00:06:12,740
Now it's going to loop through our list of all_cars that were created

19700
00:06:13,190 --> 00:06:14,750
and then for each of the cars,

19701
00:06:14,780 --> 00:06:18,260
it's going to move it backwards by five paces.

19702
00:06:18,890 --> 00:06:23,890
So now in addition to getting the car manager to create a new car on every

19703
00:06:24,470 --> 00:06:26,030
refresh of the game loop,

19704
00:06:26,360 --> 00:06:31,160
we're also going to get it to move all of the cars by five paces.

19705
00:06:31,700 --> 00:06:32,540
Let's hit run

19706
00:06:32,540 --> 00:06:37,160
now and you should see that we've got our cars being generated,

19707
00:06:37,580 --> 00:06:42,580
but notice how I've made a slight error in the stretch. Instead of stretching it

19708
00:06:43,160 --> 00:06:46,670
along the length, I've stretched it along the width

19709
00:06:47,060 --> 00:06:50,810
and this is why we've got this random array of shapes moving.

19710
00:06:51,320 --> 00:06:56,320
So let's go back to our car manager and change the width to stretch by one and

19711
00:06:56,870 --> 00:07:01,160
stretch to the length by two. So now if we rerun our code,

19712
00:07:01,490 --> 00:07:04,070
you can see the cars are now the right shape,

19713
00:07:04,700 --> 00:07:08,600
a rectangle that looks like it's moving to the left.

19714
00:07:09,680 --> 00:07:11,690
Now notice how, in my case,

19715
00:07:11,750 --> 00:07:15,260
the cars are being generated far too frequently.

19716
00:07:15,260 --> 00:07:20,210
We've got way too many calls and it's impossible for our turtle to cross the

19717
00:07:20,210 --> 00:07:21,043
road.

19718
00:07:21,260 --> 00:07:26,260
So we need to figure out a way of how we can reduce the number of cars that are being

19719
00:07:26,720 --> 00:07:29,780
made. Instead of creating a car

19720
00:07:29,960 --> 00:07:34,700
every 0.1 seconds at every refresh of the game,

19721
00:07:35,090 --> 00:07:37,280
we need to slow this down a little bit.

19722
00:07:37,970 --> 00:07:42,650
And one way we can do this is by using a random number.

19723
00:07:43,310 --> 00:07:47,210
Let's say that we create a random_chance

19724
00:07:47,780 --> 00:07:51,080
which is going to be a one in six chance,

19725
00:07:51,110 --> 00:07:55,250
so it's almost like throwing a dice. If you get a one on the dice,

19726
00:07:55,580 --> 00:07:56,780
then we create a car.

19727
00:07:57,290 --> 00:08:00,740
We can do this by getting hold of our random module,

19728
00:08:00,950 --> 00:08:04,490
creating a random int between one and six

19729
00:08:05,120 --> 00:08:10,120
and then we can say that if the random_chance is equal to one,

19730
00:08:12,020 --> 00:08:15,920
then, and only then do we actually create a new car.

19731
00:08:16,430 --> 00:08:21,430
So this basically ensures that every six times the while loop runs a new car will

19732
00:08:23,930 --> 00:08:24,980
be generated.

19733
00:08:25,430 --> 00:08:29,900
Now it's not going to be precisely every six times because there's some degree

19734
00:08:29,900 --> 00:08:33,500
of chance involved. But notice when we run our program

19735
00:08:33,500 --> 00:08:38,500
now, see how the cars are now being created much less frequently.

19736
00:08:39,620 --> 00:08:43,130
And we've actually got some space for our turtle to cross.

19737
00:08:43,880 --> 00:08:48,880
So that is how we create and move our cars across the screen and make sure that

19738
00:08:49,580 --> 00:08:53,450
they don't occur so frequently that our turtle has no chance of crossing the

19739
00:08:53,450 --> 00:08:57,150
road. I hope this walkthrough was helpful.

19740
00:08:57,360 --> 00:09:01,320
Don't worry if your code doesn't look the same as mine, it doesn't have to.

19741
00:09:01,770 --> 00:09:06,270
What matters is if you're able to achieve the desired functionality of the game.

19742
00:09:06,660 --> 00:09:09,240
There are a million different ways that you can solve this problem.

19743
00:09:09,450 --> 00:09:13,110
And as long as it works, whatever way you choose will be the best way.


19744
00:00:00,330 --> 00:00:05,330
Now in the last lesson we created these rectangular cars randomly along the Y-

19745
00:00:07,350 --> 00:00:08,183
axis.

19746
00:00:08,400 --> 00:00:12,210
And then we managed to get them to move across to the left side of the screen.

19747
00:00:12,930 --> 00:00:17,930
The next step is to detect when the turtle collides with the car.

19748
00:00:18,990 --> 00:00:22,440
So that way, when the turtle hits one of the cars,

19749
00:00:22,830 --> 00:00:27,830
we can stop the game and prevent further cars from moving. Inside our while

19750
00:00:30,450 --> 00:00:33,690
loop I'm going to detect the collision with the car here.

19751
00:00:34,200 --> 00:00:39,200
So I'm going to get hold of all the cars in the car_manager object and I'm

19752
00:00:41,100 --> 00:00:46,100
going to use a for loop to loop through each of the cars in that list of cars.

19753
00:00:47,400 --> 00:00:52,400
And then we're going to detect whether if the car has a distance to the player

19754
00:00:55,620 --> 00:00:59,700
object that is less than 20.

19755
00:01:00,870 --> 00:01:05,870
Remember that our cars are 20 pixels in height by 40 pixels in width.

19756
00:01:09,030 --> 00:01:13,290
If the player is less than 20 pixels from the center of the car,

19757
00:01:13,620 --> 00:01:16,650
then it probably means that it's collided with the car.

19758
00:01:17,520 --> 00:01:21,000
So if this distance is less than 20,

19759
00:01:21,570 --> 00:01:23,250
then we're going to stop the game.

19760
00:01:23,580 --> 00:01:25,740
And the way that we stopped the game is of course,

19761
00:01:25,740 --> 00:01:30,360
by turning this game_is_on from true to false.

19762
00:01:31,320 --> 00:01:36,320
Let's run our code again and let's see this in action. So we can move our turtle,

19763
00:01:36,990 --> 00:01:41,790
we've got randomly generated cars moving across and let's just park our turtle right

19764
00:01:41,790 --> 00:01:44,850
here. When that car hit our turtle

19765
00:01:45,180 --> 00:01:48,000
it immediately stopped the game. Now,

19766
00:01:48,030 --> 00:01:50,460
if we want to take a look at what's happening

19767
00:01:50,460 --> 00:01:54,840
so for the screen to stay open instead of closing

19768
00:01:54,870 --> 00:01:59,250
once the process is finished, we can tell it to exitonclick.

19769
00:01:59,790 --> 00:02:03,000
So now let's run our code again and notice this time

19770
00:02:03,330 --> 00:02:05,460
if we collide with one of the cars

19771
00:02:07,170 --> 00:02:11,400
you can see that it stops and it waits for further instruction,

19772
00:02:11,970 --> 00:02:16,970
which eventually is going to be just the game over text showing up on screen

19773
00:02:18,720 --> 00:02:23,670
and we also the final level showing up on screen. That's it.

19774
00:02:24,240 --> 00:02:28,530
That's how we detect collision between the car and our player.


19775
00:00:00,150 --> 00:00:01,080
In the last step,

19776
00:00:01,110 --> 00:00:06,110
we figured out how to detect when the player turtle hits a car and to stop the

19777
00:00:06,150 --> 00:00:08,850
while loop which stops the game at that point.

19778
00:00:09,870 --> 00:00:14,220
Now we're going to figure out how we can detect when the turtle reaches the

19779
00:00:14,220 --> 00:00:19,220
other side of the screen so that once our turtle makes a successful crossing,

19780
00:00:20,790 --> 00:00:25,470
then we can return the turtle to the starting position and speed up all the

19781
00:00:25,470 --> 00:00:29,490
cars. So I'm going to do that right here,

19782
00:00:29,850 --> 00:00:34,080
and I'm going to detect a successful crossing.

19783
00:00:35,040 --> 00:00:39,630
So what is a successful crossing? Well, the player turtle has the reach

19784
00:00:39,810 --> 00:00:41,130
the finish line, right?

19785
00:00:41,430 --> 00:00:46,430
Which we've defined the Y value for as 280 here in the constant.

19786
00:00:47,850 --> 00:00:49,710
Now you could do this in a number of ways.

19787
00:00:50,100 --> 00:00:55,100
You could define a method here or simply just get hold of the player's position

19788
00:00:55,830 --> 00:01:00,480
and then figure out if it's over 280 inside our main.py.

19789
00:01:01,200 --> 00:01:03,870
Now I'm going to create a method here instead

19790
00:01:04,500 --> 00:01:09,060
and I'm going to call the method is_at_finish_line.

19791
00:01:10,680 --> 00:01:13,050
This method is going to return true

19792
00:01:13,380 --> 00:01:17,160
if the turtle is at the finish line and false while it's not.

19793
00:01:17,760 --> 00:01:19,980
So how do we detect this? Well,

19794
00:01:19,980 --> 00:01:23,400
we can get our self.ycor

19795
00:01:23,940 --> 00:01:28,650
and we can see if that is greater than 280,

19796
00:01:28,920 --> 00:01:32,010
which is our finished line Y value.

19797
00:01:32,370 --> 00:01:36,090
What that means we've pretty much gone over the finish line, right?

19798
00:01:36,510 --> 00:01:39,570
So if this is the case, then we're going to return true.

19799
00:01:39,930 --> 00:01:43,650
But while that's not the case, any other time when we check this,

19800
00:01:43,890 --> 00:01:45,540
we're going to return false.

19801
00:01:46,170 --> 00:01:49,200
So now coming back to our main.py,

19802
00:01:49,530 --> 00:01:54,240
we can call our player.is_at_finish_line and we can say,

19803
00:01:54,270 --> 00:01:57,660
if this is true, well in that case

19804
00:01:58,050 --> 00:02:01,260
we're going to get the player to go back to the starting position.

19805
00:02:01,920 --> 00:02:06,660
So inside our player class let's create yet another method which I'm going to

19806
00:02:06,660 --> 00:02:09,060
call go_to_start.

19807
00:02:09,900 --> 00:02:14,900
And this just involves getting our player to go to the starting position

19808
00:02:17,430 --> 00:02:20,190
which we've defined here in a constant.

19809
00:02:20,820 --> 00:02:23,640
So notice how we've got a little bit of repetition here,

19810
00:02:23,640 --> 00:02:28,640
so we can actually delete this line and simply call self.

19811
00:02:29,010 --> 00:02:32,460
go_to_start. Back in our main.py

19812
00:02:32,520 --> 00:02:37,230
once the player is at the finish line, we're going to get the player to go

19813
00:02:37,230 --> 00:02:41,640
to the stat.r And if we go ahead and run our code

19814
00:02:41,700 --> 00:02:42,930
as it is right now,

19815
00:02:43,200 --> 00:02:47,550
you can see that once the turtle makes it across the road,

19816
00:02:47,630 --> 00:02:52,630
[inaudible]

19817
00:02:56,930 --> 00:02:59,240
it goes back to the starting position.

19818
00:03:00,220 --> 00:03:05,220
Now the very last thing we need to do is to increase the speed of the cars when

19819
00:03:06,310 --> 00:03:08,050
the player reaches the other side,

19820
00:03:08,260 --> 00:03:11,380
because effectively they've just gone to the next level.

19821
00:03:12,130 --> 00:03:17,130
What we can do is when the player reaches the finish line,

19822
00:03:17,710 --> 00:03:21,970
we can get the car_manager to increase the speed of the cars.

19823
00:03:22,420 --> 00:03:25,660
Let's create a method inside our CarManager class

19824
00:03:25,690 --> 00:03:30,160
which we'll call level_up. And in this method,

19825
00:03:30,280 --> 00:03:35,280
we're going to get the cars' speed to increase by 10 every time.

19826
00:03:35,950 --> 00:03:40,950
So if we have an attribute called car_speed and we initially set it as the

19827
00:03:43,510 --> 00:03:45,130
starting move distance,

19828
00:03:45,730 --> 00:03:50,730
and then we use this car_speed to determine how far it should move backward

19829
00:03:51,250 --> 00:03:53,950
each time. Well then when we level up,

19830
00:03:53,980 --> 00:03:58,980
we can say self.car_speed now increases by the increment that we've defined

19831
00:03:59,890 --> 00:04:02,560
here, which is the move increment.

19832
00:04:03,760 --> 00:04:08,410
So now when our player reaches the other side at the finish line,

19833
00:04:08,680 --> 00:04:11,320
then in addition to getting the player to go to the start,

19834
00:04:11,590 --> 00:04:16,329
we're going to get the car_manager to level up our cars as well.

19835
00:04:16,959 --> 00:04:21,010
So now when my turtle reaches the other side of the screen,

19836
00:04:21,339 --> 00:04:24,550
not only does the turtle go back to the original position,

19837
00:04:24,790 --> 00:04:27,280
but the cars also increase in speed.


19838
00:00:00,330 --> 00:00:01,200
In the last lesson,

19839
00:00:01,260 --> 00:00:05,640
we figured out how to detect when our turtle reaches the other side of the

19840
00:00:05,640 --> 00:00:08,340
screen. And when this happens,

19841
00:00:08,370 --> 00:00:12,480
we return the turtle player to its original position

19842
00:00:12,990 --> 00:00:17,990
and we also increase the speed of the cars by the move increment that we

19843
00:00:18,690 --> 00:00:22,500
defined as a constant. So in this lesson,

19844
00:00:22,560 --> 00:00:24,720
what we're going to do is the final step,

19845
00:00:24,750 --> 00:00:29,750
which is to create a scoreboard that keeps track of which level the turtle

19846
00:00:30,690 --> 00:00:35,190
player is on, and also when the turtle hits one of the

19847
00:00:35,190 --> 00:00:36,720
cars to display

19848
00:00:36,750 --> 00:00:40,680
the words game over in the center of the screen. To do that,

19849
00:00:40,710 --> 00:00:45,210
we're of course going to go inside our scoreboard class and again

19850
00:00:45,240 --> 00:00:48,240
we're going to need the help of the turtle class.

19851
00:00:48,660 --> 00:00:53,660
So let's import that from the turtle module and I'm going to make my scoreboard

19852
00:00:54,210 --> 00:00:57,300
a subclass of the turtle class.

19853
00:00:57,600 --> 00:01:00,270
So it's now inheriting from the turtle class.

19854
00:01:00,720 --> 00:01:04,950
And once we've defined our init and managed to get it

19855
00:01:04,950 --> 00:01:07,470
to inherit everything from the superclass,

19856
00:01:07,860 --> 00:01:12,720
then our scoreboard is now able to do everything a turtle class can do.

19857
00:01:13,710 --> 00:01:15,510
What do we want it to do? Well,

19858
00:01:15,570 --> 00:01:19,950
we have to initialize it with a couple of things first. For example,

19859
00:01:19,950 --> 00:01:22,650
we probably want to start out by hiding the turtle,

19860
00:01:22,680 --> 00:01:27,000
we just want to use it as a pen to draw. And in addition,

19861
00:01:27,030 --> 00:01:31,590
we don't want it to move and draw. So we're going to pull the pen up.

19862
00:01:32,040 --> 00:01:35,250
We're going to be using the write method instead.

19863
00:01:35,880 --> 00:01:38,940
And what we want to write is the level, right?

19864
00:01:39,300 --> 00:01:43,620
So the current level that the player is on. In order to do that,

19865
00:01:43,620 --> 00:01:46,230
we also have to keep track of the level.

19866
00:01:46,650 --> 00:01:49,440
So let's go ahead and create a new attribute

19867
00:01:49,710 --> 00:01:52,980
which I'll call level and let's start at level 1.

19868
00:01:53,700 --> 00:01:58,320
So then we can insert this right here with self.level

19869
00:01:59,010 --> 00:02:01,710
and in addition to writing this text,

19870
00:02:01,950 --> 00:02:04,950
we can define what we want the alignment to be.

19871
00:02:05,370 --> 00:02:10,370
So I want this to be on the left and also what the font to be.

19872
00:02:10,919 --> 00:02:15,920
So I'm going to use this font that was declared up here as a constant. Now,

19873
00:02:17,070 --> 00:02:22,070
inside our main.py next to where we've defined our player and our car_

19874
00:02:22,070 --> 00:02:22,903
manager

19875
00:02:22,920 --> 00:02:27,920
I'm going to create this new scoreboard object and that's going to be created

19876
00:02:29,040 --> 00:02:33,870
from the scoreboard class. Now notice when I run the code as it is,

19877
00:02:34,230 --> 00:02:37,890
you can see that our level is left-aligned,

19878
00:02:38,280 --> 00:02:42,300
it's got the font that we defined and it's writing the text that we want,

19879
00:02:42,630 --> 00:02:46,800
but it's not in the right position. To define the position

19880
00:02:46,830 --> 00:02:51,750
we have to do that right before we tell the scoreboard to write,

19881
00:02:52,110 --> 00:02:55,950
so right here, but after where we've got our penup.

19882
00:02:56,580 --> 00:02:59,830
So this way we don't draw a path to where we're going to.

19883
00:03:00,400 --> 00:03:03,220
So now we're going to define self.goto,

19884
00:03:03,730 --> 00:03:07,870
and I'm just going to get it to go to probably the top left corner.

19885
00:03:08,200 --> 00:03:13,200
So that's going to be probably -280 and then it's going to be 

19886
00:03:14,560 --> 00:03:18,640
+280 on the Y. Now, if we just check the positioning,

19887
00:03:18,910 --> 00:03:22,630
you can see that it's a little bit too far up on the Y-axis.

19888
00:03:22,990 --> 00:03:27,940
So it lets move it down a little bit and you can tweak these things until you

19889
00:03:27,940 --> 00:03:30,670
get to the point where you're happy with its positioning.

19890
00:03:31,300 --> 00:03:34,900
So I think this looks pretty good. Now,

19891
00:03:34,930 --> 00:03:37,540
in addition to writing the level,

19892
00:03:37,570 --> 00:03:41,710
we actually have to update it every time the player levels up, right?

19893
00:03:42,220 --> 00:03:45,340
And they do that when there's a successful crossing.

19894
00:03:45,850 --> 00:03:47,500
So at some point here,

19895
00:03:47,500 --> 00:03:51,550
we should be able to call scoreboard and we should be able to get the scoreboard

19896
00:03:51,610 --> 00:03:53,830
to increase the level.

19897
00:03:54,550 --> 00:03:59,440
So let's go into scoreboard and let's define that function, increase_

19898
00:04:01,000 --> 00:04:01,833
level.

19899
00:04:02,410 --> 00:04:07,410
And the first thing to do when we're increasing the level is of course getting

19900
00:04:07,420 --> 00:04:12,420
hold of this self.level and then adding one to it each time.

19901
00:04:13,420 --> 00:04:17,529
In addition, we're going to need the level to be rewritten again.

19902
00:04:17,980 --> 00:04:22,980
So let's cut this out of the init and let's instead define a custom method

19903
00:04:23,260 --> 00:04:25,750
which we'll call update_scoreboard.

19904
00:04:28,140 --> 00:04:28,410
Yeah.

19905
00:04:28,410 --> 00:04:33,300
Inside this update_scoreboard, we can write the current level.

19906
00:04:33,930 --> 00:04:35,460
So now inside the init

19907
00:04:35,490 --> 00:04:39,180
we can call self.update_scoreboard

19908
00:04:39,570 --> 00:04:41,820
and also when we increase the level,

19909
00:04:41,850 --> 00:04:45,030
we can call self.update_scoreboard.

19910
00:04:45,780 --> 00:04:47,790
Now at the moment, as it is,

19911
00:04:47,940 --> 00:04:52,140
it's going to overwrite what used to be on the scoreboard.

19912
00:04:52,620 --> 00:04:55,110
So at the moment it's on level 1,

19913
00:04:56,130 --> 00:04:58,800
but once I make a successful crossing,

19914
00:04:59,070 --> 00:05:03,240
you can see that level 2 is going to be overwritten over level 1.

19915
00:05:03,870 --> 00:05:06,510
To prevent that when we update the scoreboard,

19916
00:05:06,780 --> 00:05:09,600
we have to get the scoreboard to clear itself

19917
00:05:09,840 --> 00:05:13,740
so that it deletes all the previous stuff that it wrote. This way

19918
00:05:13,830 --> 00:05:15,690
when we actually run our code

19919
00:05:15,720 --> 00:05:20,720
you can see that our scoreboard will refresh and clear the previous text and

19920
00:05:22,890 --> 00:05:24,690
write the new text each time.

19921
00:05:25,500 --> 00:05:30,500
So now the final thing to do is to write the words game over in the middle of

19922
00:05:30,510 --> 00:05:35,430
the screen when the game ends. To do that, I'm going to create 

19923
00:05:35,440 --> 00:05:36,900
another method here

19924
00:05:36,930 --> 00:05:41,460
which I'll call game_over. And inside this method,

19925
00:05:41,790 --> 00:05:45,300
we're going to get our turtle to go to the center.

19926
00:05:45,360 --> 00:05:50,360
So we're going to say self.goto and the center is, of course, at

19927
00:05:51,120 --> 00:05:54,900
(0, 0), and then we're going to get it to write,

19928
00:05:55,320 --> 00:06:00,140
but this time we're not going to write the level anymore. Instead,

19929
00:06:00,170 --> 00:06:04,370
we're going to just write the words GAME OVER in all caps.

19930
00:06:04,820 --> 00:06:09,820
And I want the alignment to be centered and I want the font to be the default

19931
00:06:09,890 --> 00:06:14,690
font. Now, when we actually detect a collision,

19932
00:06:14,780 --> 00:06:17,300
not only is game_is_on going to be false,

19933
00:06:17,570 --> 00:06:21,950
but also we're going to get the scoreboard to show the game over sequence.

19934
00:06:22,670 --> 00:06:27,670
So now we can run our code and you can see that when my turtle collides with a

19935
00:06:28,730 --> 00:06:29,563
car,

19936
00:06:31,010 --> 00:06:33,740
then it says game over in the center.

19937
00:06:34,220 --> 00:06:39,050
And because when we wrote game over, we didn't clear any of the previous texts,

19938
00:06:39,350 --> 00:06:42,650
the user can see at the highest level that they managed to reach.

19939
00:06:43,730 --> 00:06:45,830
That's it. That's the entire game.

19940
00:06:46,370 --> 00:06:50,870
Hopefully you've managed to build this entire game by yourself and you're just here

19941
00:06:50,870 --> 00:06:55,610
to check a few niggling issues. But if you struggled with this code,

19942
00:06:55,850 --> 00:07:00,290
then I really recommend to review the previous lessons where we created the

19943
00:07:00,290 --> 00:07:03,110
snake game or when we created this turtle crossing game

19944
00:07:03,440 --> 00:07:07,310
and try to see if you can create these two games from scratch by yourself

19945
00:07:07,670 --> 00:07:11,870
by looking at how the game works. Because if you continue forward,

19946
00:07:11,930 --> 00:07:14,120
things are only gonna get more complex.

19947
00:07:14,420 --> 00:07:18,860
And I'm assuming that you're going to take the time to review and revise before

19948
00:07:18,860 --> 00:07:19,693
you continue.

19949
00:07:20,900 --> 00:07:24,590
So have fun playing with the turtle crossing game and be sure to let me know in

19950
00:07:24,590 --> 00:07:29,590
the Q/A what your highest level is that you managed to reach and also

19951
00:07:29,810 --> 00:07:32,780
remember to attach a picture or it didn't happen.

19952
00:07:33,740 --> 00:07:36,590
And this is a great project for you to customize.

19953
00:07:36,620 --> 00:07:39,110
So think about what you might want to change

19954
00:07:39,140 --> 00:07:44,140
like the colors or the shapes and make the game really your own and then take a

19955
00:07:44,780 --> 00:07:48,830
screenshot of it and share it with us in the Q/A so that we can all

19956
00:07:48,830 --> 00:07:51,500
appreciate and congratulate you on your work.



19957
00:00:00,300 --> 00:00:05,070
Hey guys, welcome to Day 24 of 100 Days of Code. Today

19958
00:00:05,070 --> 00:00:09,000
we're going to learn about working with the local file system and also

19959
00:00:09,060 --> 00:00:13,320
understanding how directories work. And by the end of the day,

19960
00:00:13,380 --> 00:00:18,380
we will have improved our previous snake game where previously or currently the

19961
00:00:19,350 --> 00:00:24,350
way that it works is it just games over once we hit a wall or once we hit a

19962
00:00:24,600 --> 00:00:27,510
tail, which is fun, but it could be better.

19963
00:00:28,080 --> 00:00:31,980
Imagine if we could also keep track of the high score.

19964
00:00:32,130 --> 00:00:36,930
So if a user gets a score that's higher than the previous high score,

19965
00:00:37,530 --> 00:00:42,530
then if they game over, then the high score is going to be updated so that we can

19966
00:00:42,960 --> 00:00:45,570
keep trying to better ourselves at snake.

19967
00:00:46,440 --> 00:00:50,400
And once we've learned all of those skills of manipulating file systems,

19968
00:00:50,400 --> 00:00:54,150
reading and writing to file, then we're going to create a project

19969
00:00:54,510 --> 00:00:59,220
that's going to save us a lot of hassle and automate our lives a little bit

19970
00:00:59,220 --> 00:01:02,430
using Python. So the situation is

19971
00:01:02,430 --> 00:01:06,510
let's say you need to write lots of letters. Maybe you having a birthday party,

19972
00:01:06,510 --> 00:01:09,420
maybe you need to write wedding invites,

19973
00:01:09,420 --> 00:01:12,720
or maybe you just need to email all your clients. Well,

19974
00:01:12,720 --> 00:01:17,280
let's say that you wanted to personalize a part of that file

19975
00:01:17,670 --> 00:01:21,840
say, for example, the part where you say dear name. Well,

19976
00:01:21,900 --> 00:01:26,900
if you had a list of names and you wanted to create separate letters using each

19977
00:01:27,570 --> 00:01:32,220
of those names, so maybe one that says 'Dear James', one that says

19978
00:01:32,220 --> 00:01:33,150
'Dear Emily'

19979
00:01:33,420 --> 00:01:37,500
and then we just worked down the list and keep replacing parts of our letter

19980
00:01:37,770 --> 00:01:39,450
with the names in our list.

19981
00:01:40,260 --> 00:01:44,010
So we end up with a whole bunch of letters ready to send out.

19982
00:01:45,360 --> 00:01:47,490
Depending on what kind of jobs you might have,

19983
00:01:47,520 --> 00:01:52,410
this is something that could come in really handy as a part of your work

19984
00:01:52,470 --> 00:01:54,660
or maybe just in your day to day lives.

19985
00:01:55,110 --> 00:02:00,000
And we're going to get started using Python to automate parts of our lives,

19986
00:02:00,060 --> 00:02:04,110
and get Python to do a lot of the repetitive tasks that we don't want to do.

19987
00:02:04,650 --> 00:02:08,190
And so we can spend more time watching Netflix and playing video games.


19988
00:00:00,420 --> 00:00:04,110
First, let's start by improving our snake game,

19989
00:00:04,650 --> 00:00:09,150
getting it to be able to keep track of the high score that we attain each time

19990
00:00:09,150 --> 00:00:14,150
we play the game so that we can see what our high score is and keep striving to

19991
00:00:14,310 --> 00:00:15,150
better ourselves.

19992
00:00:16,200 --> 00:00:21,180
Open up the snake game in PyCharm that you created a few days back. Now,

19993
00:00:21,180 --> 00:00:23,430
if you can't find your snake game project,

19994
00:00:23,820 --> 00:00:28,170
or if you've made some significant changes to it where it might be confusing to

19995
00:00:28,170 --> 00:00:32,490
follow along with the tutorial, then simply just head over to this URL

19996
00:00:32,670 --> 00:00:34,770
which is in the course resources

19997
00:00:35,220 --> 00:00:39,980
and then you can go ahead and hit download as a zip, unzip

19998
00:00:39,980 --> 00:00:43,470
the downloaded file, and then open it inside PyCharm

19999
00:00:43,860 --> 00:00:47,190
and you should end up with the same project as I have here.

20000
00:00:47,940 --> 00:00:49,260
And once you've done that,

20001
00:00:49,410 --> 00:00:53,880
then we can begin to start adding the functionality to keep track of the high

20002
00:00:53,880 --> 00:00:57,060
score. Firstly, I'm going to add

20003
00:00:57,060 --> 00:01:01,410
another attribute to my scoreboard, which is going to be called high_score.

20004
00:01:01,920 --> 00:01:06,060
And again, it's going to start out as zero. Now,

20005
00:01:06,090 --> 00:01:11,090
the next thing I'm going to do is I'm going to replace this game over method

20006
00:01:11,910 --> 00:01:16,680
with a new method. We're not going to stop the game and write game over anymore.

20007
00:01:17,130 --> 00:01:19,770
Instead, we're going to reset the scoreboard.

20008
00:01:20,430 --> 00:01:23,730
So what happens when we reset the scoreboard? Well,

20009
00:01:23,730 --> 00:01:28,730
we need to figure out if the current score that the user has attained is greater

20010
00:01:29,640 --> 00:01:34,170
than the high score of all time. And if that is the case,

20011
00:01:34,260 --> 00:01:38,850
then we're going to update the high score with the value of the current score.

20012
00:01:39,420 --> 00:01:42,150
So the code for that would look something like this.

20013
00:01:42,540 --> 00:01:47,250
If self.score is greater than self.high_score,

20014
00:01:47,670 --> 00:01:52,670
well in that case then self.high_score is going to be equal to self.score.

20015
00:01:53,910 --> 00:01:56,400
Now, this looks a little bit confusing at first,

20016
00:01:56,730 --> 00:02:00,780
but if you just go through the logic and think about how you would create a high

20017
00:02:00,780 --> 00:02:02,250
score saving mechanism,

20018
00:02:02,700 --> 00:02:07,290
then you'll pretty quickly understand what's going on here. Now,

20019
00:02:07,290 --> 00:02:12,270
once we've updated the high score, the next thing to do is to reset the score.

20020
00:02:12,690 --> 00:02:17,340
So I'm going to reset it down to zero. Now, remember the order of your code

20021
00:02:17,340 --> 00:02:21,780
matters a huge deal because if you first set the score to zero,

20022
00:02:22,050 --> 00:02:25,350
then it's never going to be greater than the current high score.

20023
00:02:25,560 --> 00:02:27,450
So this will never get triggered.

20024
00:02:27,870 --> 00:02:32,550
So as always, be careful where you're writing your code. Now,

20025
00:02:32,640 --> 00:02:36,990
after we've set the score, then we need to update the scoreboard.

20026
00:02:37,740 --> 00:02:38,010
Now,

20027
00:02:38,010 --> 00:02:42,870
one thing that I've changed about the scoreboard is previously when we increased

20028
00:02:42,930 --> 00:02:43,950
the score,

20029
00:02:44,340 --> 00:02:48,780
I've used the self.clear and then self.update_scoreboard.

20030
00:02:49,230 --> 00:02:52,350
But it actually makes more sense for this clear to happen

20031
00:02:52,380 --> 00:02:54,780
every single time we update the scoreboard.

20032
00:02:55,230 --> 00:02:59,010
So I've added this method call here before we actually write the score.

20033
00:03:00,160 --> 00:03:04,330
The reason why I couldn't do this previously is because when we wanted to show

20034
00:03:04,330 --> 00:03:05,200
game over,

20035
00:03:05,620 --> 00:03:10,000
we wanted to keep the score on the screen and then for

20036
00:03:10,000 --> 00:03:15,000
the score board turtle to go to the center and write game over so that both of

20037
00:03:15,280 --> 00:03:17,080
these things show up on screen.

20038
00:03:17,740 --> 00:03:20,680
But now that we're getting rid of our game over method,

20039
00:03:21,130 --> 00:03:26,130
then we can go ahead and move that clear to update scoreboard

20040
00:03:26,590 --> 00:03:30,400
and then we don't have to call it twice, both in reset and increase_score.

20041
00:03:31,390 --> 00:03:34,600
Now, in addition to writing the score,

20042
00:03:34,900 --> 00:03:37,330
I'm now also going to write the high score,

20043
00:03:37,960 --> 00:03:42,490
and this is going to be using an f-string to insert self.high_score.

20044
00:03:43,420 --> 00:03:45,910
Now, if we run this game as it is,

20045
00:03:45,970 --> 00:03:48,580
you can see it says score 0, high score

20046
00:03:48,580 --> 00:03:51,430
0 using these initial values.

20047
00:03:52,180 --> 00:03:54,550
But as soon as it hits the wall,

20048
00:03:54,580 --> 00:03:57,430
it ends because in our main.py

20049
00:03:57,760 --> 00:04:02,760
we change this game_is_on to false and that ends our while loop.

20050
00:04:04,060 --> 00:04:04,840
Instead,

20051
00:04:04,840 --> 00:04:09,840
what I'm going to do is I'm going to delete this game_is_on equals false and

20052
00:04:10,660 --> 00:04:13,390
also delete it when we collide with the tail.

20053
00:04:14,020 --> 00:04:18,250
And I'm also going to delete the part where we call game over from the score

20054
00:04:18,250 --> 00:04:23,020
board. Instead, I'm going to get the scoreboard to reset itself.

20055
00:04:24,490 --> 00:04:29,490
So that way the score gets reset to zero and we're ready with the next round.

20056
00:04:30,730 --> 00:04:35,080
So now if I run this game again, you can see it says, score is 0,

20057
00:04:35,380 --> 00:04:40,000
and then as soon as we get a higher score and we end up dying, like

20058
00:04:40,000 --> 00:04:43,930
so, then our high score goes to 2.

20059
00:04:44,560 --> 00:04:49,560
But our snake kind of just disappears because it continues moving in the same

20060
00:04:50,560 --> 00:04:54,850
direction and it's now probably somewhere, all the way down to the left.

20061
00:04:55,420 --> 00:05:00,100
What we do instead? Well, our snake also needs to be reset.

20062
00:05:00,610 --> 00:05:04,990
So let's create a reset method inside the snake class as well.

20063
00:05:05,680 --> 00:05:10,680
And all we're going to do is we're going to get all of the segments to clear.

20064
00:05:11,770 --> 00:05:13,510
And when I hover over this clear,

20065
00:05:13,510 --> 00:05:18,510
you can see what it does is it's going to remove all of the items from that

20066
00:05:18,760 --> 00:05:19,360
list.

20067
00:05:19,360 --> 00:05:24,360
So all of the segments that we've added already to the list of segments is

20068
00:05:24,490 --> 00:05:28,780
going to be deleted. And then once we've gotten rid of all the segments,

20069
00:05:28,810 --> 00:05:31,540
we're going to call self.create_snake again,

20070
00:05:31,810 --> 00:05:36,490
so that we create another three-segment snake in the starting position.

20071
00:05:37,660 --> 00:05:38,650
Now, in addition,

20072
00:05:38,680 --> 00:05:43,680
I'm also going to set the self.head as the zeroth element from that list

20073
00:05:44,920 --> 00:05:45,753
of segments.

20074
00:05:46,150 --> 00:05:50,620
So basically we're doing everything that is in the init because we're going to

20075
00:05:50,620 --> 00:05:53,620
initialize the snake again, back at the center.

20076
00:05:54,220 --> 00:05:59,120
So now if I go back to main.py, and in addition to resetting the scoreboard,

20077
00:05:59,450 --> 00:06:02,000
I also get my snake to reset,

20078
00:06:02,770 --> 00:06:03,603
Right?

20079
00:06:06,160 --> 00:06:07,930
At this point, when I run the code,

20080
00:06:07,990 --> 00:06:12,990
you'll notice that it's not behaving quite the way you expect it to. So I can go

20081
00:06:13,990 --> 00:06:17,830
ahead and score, and when I die, I get the high score,

20082
00:06:18,250 --> 00:06:22,060
but my old snake is still lingering on screen.

20083
00:06:22,480 --> 00:06:25,480
So even though we've cleared the segments,

20084
00:06:25,690 --> 00:06:30,400
we don't actually get rid of the turtles that are still onscreen.

20085
00:06:31,030 --> 00:06:32,710
And in order to get rid of them,

20086
00:06:32,740 --> 00:06:37,740
we actually have to send them to a different location. In our snake reset method,

20087
00:06:40,000 --> 00:06:42,610
just before we clear our segments,

20088
00:06:42,940 --> 00:06:45,340
so while we still have access to all of them,

20089
00:06:45,850 --> 00:06:50,850
we're going to use a for loop to loop through all of the segments in the list of

20090
00:06:51,100 --> 00:06:56,100
segments and tell each of them to go to a place that is off the screen.

20091
00:06:57,940 --> 00:07:01,420
So our screen is only 600 by 600

20092
00:07:01,840 --> 00:07:05,590
and I'm going to tell it to go to 1000 X, 1000 Y.

20093
00:07:05,950 --> 00:07:10,420
So it's gonna disappear off the screen. So this way,

20094
00:07:10,450 --> 00:07:11,283
notice how

20095
00:07:11,470 --> 00:07:16,470
when the snake hits one of the walls or when it hits its tail,

20096
00:07:16,930 --> 00:07:18,940
instead of sort of just staying there,

20097
00:07:18,970 --> 00:07:23,230
it actually disappears into a location that's off the screen.

20098
00:07:23,890 --> 00:07:26,890
So that way we can keep track of our high scores,

20099
00:07:27,190 --> 00:07:29,680
we can continue to get higher scores,

20100
00:07:30,100 --> 00:07:34,000
and if we get a score that's not quite as high as the high score

20101
00:07:34,480 --> 00:07:39,220
and we end up dying, then the high score stays as the previous value.

20102
00:07:40,180 --> 00:07:44,560
Now, the only thing about this game is that in order to end it,

20103
00:07:44,710 --> 00:07:49,570
we have to hit the stop button here. But once we've done that,

20104
00:07:49,750 --> 00:07:53,140
it also reveals the crucial flaw in our code.

20105
00:07:53,500 --> 00:07:57,580
Because if I run our program again, you can see that, wait,

20106
00:07:57,610 --> 00:07:59,410
what happened to the high score, right?

20107
00:07:59,620 --> 00:08:03,910
We had a high score of 3 previously. So, huh?

20108
00:08:04,300 --> 00:08:08,470
What exactly is happening? Well, the reason is actually quite simple.

20109
00:08:09,010 --> 00:08:13,450
We know that if we create a variable, let's say we create a variable called a

20110
00:08:13,480 --> 00:08:15,070
set it to equal three,

20111
00:08:15,550 --> 00:08:20,320
and then at some point we set a to be from the input.

20112
00:08:20,710 --> 00:08:22,540
So now when I run this code,

20113
00:08:22,570 --> 00:08:25,780
you can see that initially a is equal to three,

20114
00:08:26,200 --> 00:08:31,030
but then the next line I asked the user, 'what do you want a to equals?'

20115
00:08:31,030 --> 00:08:34,419
I'm going to make it equal to 12. Now at this point,

20116
00:08:34,419 --> 00:08:38,500
if I go ahead and access this variable a inside the console

20117
00:08:38,530 --> 00:08:42,880
just by typing a and then hitting enter, you can see it's equal to 12.

20118
00:08:43,480 --> 00:08:46,630
Now, similarly, I can add some print statements here.

20119
00:08:46,660 --> 00:08:48,370
I can print the value of a

20120
00:08:48,700 --> 00:08:53,350
and then also print the value of a after we modify it. So again,

20121
00:08:53,530 --> 00:08:57,810
you can see initially it's equal to 3, but then I decided to change it to 12.

20122
00:08:58,020 --> 00:08:59,460
So now it's equal to 12.

20123
00:09:00,300 --> 00:09:05,300
Now what happens if I rerun the code. A is equal to three

20124
00:09:05,880 --> 00:09:06,300
aain.

20125
00:09:06,300 --> 00:09:11,300
Its reset itself because the code is being rerun and the previous state is not

20126
00:09:13,680 --> 00:09:18,450
being remembered. In our case, we've got this high score variable

20127
00:09:18,840 --> 00:09:21,570
which initially starts out as zero.

20128
00:09:22,170 --> 00:09:26,580
And at some point during the game as we progress,

20129
00:09:26,820 --> 00:09:31,820
we modify this high score variable to equal a new value,

20130
00:09:31,920 --> 00:09:32,850
let's say three.

20131
00:09:33,480 --> 00:09:37,140
So now if I go ahead and print my high score,

20132
00:09:37,620 --> 00:09:39,720
you can see that it's equal to 3.

20133
00:09:40,290 --> 00:09:44,130
But as soon as I rerun the code and this goes through,

20134
00:09:44,430 --> 00:09:46,980
then all of that progress gets reset.

20135
00:09:47,280 --> 00:09:51,900
And now if I print the value of high score, you can see it's again,

20136
00:09:51,990 --> 00:09:56,340
equal to zero. So this is what's happening in our program as well.

20137
00:09:57,180 --> 00:10:02,180
So how might you keep track of the score if you weren't using Python?

20138
00:10:03,150 --> 00:10:03,450
Well,

20139
00:10:03,450 --> 00:10:08,400
you might open up a word document and then write down your high score in that

20140
00:10:08,400 --> 00:10:11,970
document, close it down, and then the next time you play the game,

20141
00:10:12,330 --> 00:10:16,170
open up that file again and see what your previous high score is.

20142
00:10:16,710 --> 00:10:18,570
We're going to try and do the same thing,

20143
00:10:18,870 --> 00:10:23,870
but using Python to read and write to a file so that we can save our progress

20144
00:10:25,800 --> 00:10:29,280
and be able to retrieve our previous high scores

20145
00:10:29,370 --> 00:10:34,370
each time we play the snake game. To find out how to do that and to solve this

20146
00:10:35,100 --> 00:10:37,470
problem, head over to the next lesson

20147
00:10:37,800 --> 00:10:42,270
and we'll talk about how to use Python to open, read, write,

20148
00:10:42,360 --> 00:10:44,250
and close files on your system.


20149
00:00:00,270 --> 00:00:01,110
In this lesson,

20150
00:00:01,140 --> 00:00:06,140
I want to talk about the file system and how you could use Python to open up

20151
00:00:06,750 --> 00:00:11,730
files, read files, write to the files, and also close them down again,

20152
00:00:12,150 --> 00:00:14,370
all without touching the mouse.

20153
00:00:14,580 --> 00:00:18,870
So that way we can start saving our high scores into a file and retrieve 

20154
00:00:18,870 --> 00:00:20,880
it the next time we open up our program.

20155
00:00:21,630 --> 00:00:26,070
Let's start out by trying to do some of the simplest things with a file, reading

20156
00:00:26,100 --> 00:00:26,933
and writing.

20157
00:00:28,050 --> 00:00:32,490
Now I've created a new project using PyCharm called day-24,

20158
00:00:33,000 --> 00:00:36,450
and I've created my main.py where we're going to write our Python code.

20159
00:00:36,990 --> 00:00:40,890
But in addition, I'm also going to create a new file

20160
00:00:41,130 --> 00:00:46,130
which is going to be called my_file.txt.

20161
00:00:46,950 --> 00:00:51,090
So this is going to be a text file. Now, inside this text file,

20162
00:00:51,090 --> 00:00:56,040
I'm going to write some text. Hello, my name is Angela. And if you want,

20163
00:00:56,070 --> 00:01:01,070
you can actually find this text file inside your project folder,

20164
00:01:02,280 --> 00:01:06,540
and you can actually open it up with your native text editing software.

20165
00:01:06,540 --> 00:01:10,140
So TextEdit on Mac or Notepad on Windows.

20166
00:01:10,560 --> 00:01:14,970
And you can see it's just a bunch of text. There's nothing really special here.

20167
00:01:16,200 --> 00:01:20,940
But what we can do using Python is that we can actually open up that file.

20168
00:01:21,510 --> 00:01:26,010
So, notice how this method, open, is a inbuilt method.

20169
00:01:26,010 --> 00:01:29,340
So you don't have to import anything, you can use it directly.

20170
00:01:29,970 --> 00:01:31,830
And it takes a number of inputs;

20171
00:01:31,980 --> 00:01:36,120
the file that you want to open, the mode that you want to open that file in,

20172
00:01:36,360 --> 00:01:41,360
and a whole bunch of other optional things that you can specify. In our case,

20173
00:01:41,520 --> 00:01:44,850
I'm going to specify the name of my file as a string,

20174
00:01:45,150 --> 00:01:48,480
so my_file.txt.

20175
00:01:48,900 --> 00:01:50,550
So remember that extension.

20176
00:01:51,120 --> 00:01:56,040
And then I'm going to open this file and I'm going to save it inside a variable

20177
00:01:56,040 --> 00:02:00,600
called file. So when we hit run right now, nothing's really going to happen.

20178
00:02:00,750 --> 00:02:04,020
You're not going to see anything happening, but behind the scenes,

20179
00:02:04,290 --> 00:02:08,789
Python has already opened up this file and its ready for the next operation that

20180
00:02:08,789 --> 00:02:10,770
you might want to do on that file.

20181
00:02:11,340 --> 00:02:16,340
So the next thing I wanna do is I wanna read the file and this read method

20182
00:02:16,710 --> 00:02:20,400
returns the contents of that file as a string.

20183
00:02:20,790 --> 00:02:25,050
So we can now save it inside a variable called contents

20184
00:02:25,500 --> 00:02:28,470
and I can go ahead and print out this contents.

20185
00:02:28,950 --> 00:02:32,280
So when I hit run right now, you can see what gets printed out

20186
00:02:32,580 --> 00:02:35,490
is the content from my_file.txt.

20187
00:02:36,870 --> 00:02:41,870
And if I go ahead and modify my file to add some more lines and I hit run again,

20188
00:02:42,180 --> 00:02:45,360
you can see that all of the lines are being printed

20189
00:02:45,480 --> 00:02:49,080
once we've opened the file, we've read the file,

20190
00:02:49,440 --> 00:02:54,440
and we print the contents that we have read. At the end of all of our work,

20191
00:02:56,130 --> 00:03:00,130
what we have to do once we're done with that file that we've opened

20192
00:03:00,310 --> 00:03:03,760
we also have to close it. If there's an open,

20193
00:03:03,760 --> 00:03:07,900
there's probably going to be a close. Now, why do we need to close the file?

20194
00:03:08,110 --> 00:03:10,930
Well, once Python opens up that file,

20195
00:03:11,410 --> 00:03:15,010
it basically takes up some of the resources of your computer.

20196
00:03:15,640 --> 00:03:16,990
And at some point later on,

20197
00:03:16,990 --> 00:03:20,860
it might decide to close it and free up those resources,

20198
00:03:21,070 --> 00:03:24,160
but we don't know when that's going to happen and if it will happen.

20199
00:03:24,580 --> 00:03:29,170
So instead, we're going to tell it to close down the file manually using this

20200
00:03:29,170 --> 00:03:30,003
line of code.

20201
00:03:30,880 --> 00:03:35,710
It's a similar concept to having lots and lots of tabs open in your browser.

20202
00:03:36,130 --> 00:03:39,460
While it's kind of convenient to have all of these tabs open,

20203
00:03:40,030 --> 00:03:43,510
if you actually want your computer to perform at its best

20204
00:03:43,810 --> 00:03:47,800
you actually want to only use as many tabs as you need.

20205
00:03:48,400 --> 00:03:52,750
Every extra tab is going to add a little bit of burden to your computer

20206
00:03:53,170 --> 00:03:57,280
and especially if you're using a very heavy application like Chrome

20207
00:03:57,520 --> 00:04:01,540
which likes to take up a lot of resources of your CPU and your computer.

20208
00:04:01,930 --> 00:04:04,210
If you have more than 20 or 30 tabs,

20209
00:04:04,450 --> 00:04:09,220
you'll notice a significant decrease in the speed of your computer.

20210
00:04:09,730 --> 00:04:12,490
So here's a computer tip as well as Programming tip,

20211
00:04:12,850 --> 00:04:17,850
always close down tabs that you've opened and always close out on files that

20212
00:04:18,399 --> 00:04:23,400
you've opened. Now because it's kind of hard to remember to close a file because

20213
00:04:24,220 --> 00:04:28,060
we might be doing lots of other things in between the open and close, right?

20214
00:04:28,060 --> 00:04:29,890
We might be writing to the file,

20215
00:04:29,890 --> 00:04:34,890
we might be modifying it or reading it line by line or doing lots of different

20216
00:04:35,380 --> 00:04:37,210
things. So instead,

20217
00:04:37,480 --> 00:04:42,480
what many Python developers opt for is a different way of opening the file.

20218
00:04:43,390 --> 00:04:48,390
We can use a 'with' keyword. And 'with' we can open this file and then we can open

20219
00:04:50,620 --> 00:04:55,330
it as whatever it is we decide to name. So this you can name to anything.

20220
00:04:55,330 --> 00:04:57,820
You can name it as f, you can name it as file.

20221
00:04:58,030 --> 00:05:02,170
It's basically the equivalent to that variable that we created earlier on which

20222
00:05:02,170 --> 00:05:04,300
stored the opened file.

20223
00:05:04,990 --> 00:05:09,990
Now we can indent the rest of this and I can delete this file.close.

20224
00:05:11,170 --> 00:05:14,080
And you can see that it works exactly the same as before,

20225
00:05:14,440 --> 00:05:19,440
but now we no longer have to remember to close our file just by adding some

20226
00:05:20,170 --> 00:05:21,040
keywords here.

20227
00:05:21,760 --> 00:05:25,810
This 'with' keyword is going to manage that file directly.

20228
00:05:26,050 --> 00:05:30,520
So as soon as it notices that we're done with it, it'll close down the file.

20229
00:05:31,120 --> 00:05:34,870
It kinda makes me wish that something similar for tabs existed,

20230
00:05:35,230 --> 00:05:37,540
but let's get back to our Python code.

20231
00:05:38,110 --> 00:05:41,350
So now that we've opened up my_file.txt,

20232
00:05:41,530 --> 00:05:43,780
we've saved into a variable called file,

20233
00:05:44,080 --> 00:05:49,080
we've read that file and saved the contents that we read into a variable called

20234
00:05:49,330 --> 00:05:54,190
contents, and then we've printed it. Now, what if instead of reading the file,

20235
00:05:54,220 --> 00:05:57,160
I wanted to write to it? Well,

20236
00:05:57,200 --> 00:06:02,200
it's just as simple. So we can get hold of our file and then call

20237
00:06:02,900 --> 00:06:03,733
write.

20238
00:06:04,160 --> 00:06:09,160
And we can put any sort of string inside this write method to put into our file.

20239
00:06:11,810 --> 00:06:14,840
So let's put some text, let's call it new text.

20240
00:06:15,290 --> 00:06:19,640
And I want this new text to be written into my_file.txt.

20241
00:06:20,420 --> 00:06:24,320
And if we run the code as it is, you'll notice that it doesn't work

20242
00:06:24,650 --> 00:06:27,860
cause it says that unsupported operation,

20243
00:06:28,100 --> 00:06:30,410
this file is not writable.

20244
00:06:30,830 --> 00:06:34,760
And this is because we opened up the file in read-only mode.

20245
00:06:35,210 --> 00:06:39,590
So remember when we took a look at some of the parameters for this method open,

20246
00:06:39,980 --> 00:06:44,980
one of them was called mode and by default, it's set to read-only,

20247
00:06:45,230 --> 00:06:50,030
so 'r.' Now if we want to write to it, so make it editable,

20248
00:06:50,060 --> 00:06:53,030
we have the change, the mode to 'w' for write.

20249
00:06:53,540 --> 00:06:55,640
So now if I run the code again,

20250
00:06:55,850 --> 00:06:58,460
you can see that process finished with exit code zero

20251
00:06:58,460 --> 00:07:01,040
which we know to mean that everything was successful.

20252
00:07:01,430 --> 00:07:05,330
And if I take a look inside my_file.txt, all of the previous text

20253
00:07:05,330 --> 00:07:10,330
got magically deleted and replaced with the new text that I wanted to write.

20254
00:07:11,240 --> 00:07:14,690
Now, if you don't want to delete everything that is in the file

20255
00:07:14,930 --> 00:07:17,060
but you just want to add to it,

20256
00:07:17,390 --> 00:07:22,390
then you can change this mode from 'w' to 'a' and 'a' stands for append.

20257
00:07:22,910 --> 00:07:26,390
So just as we like to use list.append

20258
00:07:26,420 --> 00:07:29,870
and then we can add something to the end of the list, well,

20259
00:07:29,870 --> 00:07:34,870
the same thing happens with appending and writing. So I can write my new text and

20260
00:07:36,380 --> 00:07:41,360
I can add a new line, remember we can use \n to

20261
00:07:41,360 --> 00:07:44,090
add a new line, and then add the new text.

20262
00:07:44,660 --> 00:07:49,660
And now take a look at the after version when I hit run and we write this new

20263
00:07:50,090 --> 00:07:54,050
line and new text by appending it to my file.

20264
00:07:54,350 --> 00:07:58,910
It's gone at the very end of the file here. Now,

20265
00:07:58,910 --> 00:08:03,200
one of the important things you need to know when you're writing files is when

20266
00:08:03,200 --> 00:08:08,200
you try to open a file in write mode and that file doesn't exist,

20267
00:08:08,750 --> 00:08:12,260
then it's going to actually create it for you from scratch.

20268
00:08:12,620 --> 00:08:14,990
So let's go ahead and create a file

20269
00:08:15,080 --> 00:08:19,160
which I'll call new_file.txt,

20270
00:08:19,520 --> 00:08:21,260
make sure you've got the extension in there.

20271
00:08:21,620 --> 00:08:26,620
And we have the mode as write set. Because this new_file.txt doesn't exist

20272
00:08:27,680 --> 00:08:31,640
in this folder, then it's actually going to create it for us.

20273
00:08:32,030 --> 00:08:36,590
So now when I hit run, you can see that once this goes through,

20274
00:08:36,830 --> 00:08:41,690
that new file gets created and the new text has been written inside.

20275
00:08:42,020 --> 00:08:46,550
Now, remember this only works when you're in the write mode and when that file

20276
00:08:46,580 --> 00:08:47,930
doesn't currently exist.

20277
00:08:48,580 --> 00:08:50,380
So those are some basic 

20278
00:08:50,380 --> 00:08:55,380
ways of working with the file system. We can open and read, we can open and

20279
00:08:56,640 --> 00:09:00,990
write. And by using these different modes, append, read,

20280
00:09:01,110 --> 00:09:01,943
or write,

20281
00:09:02,130 --> 00:09:06,150
we can define what it is that we want to do with that file that we've opened.

20282
00:09:07,110 --> 00:09:11,430
Now that we've learned how to work with the file system, in the next lesson

20283
00:09:11,490 --> 00:09:16,490
I want to show you how we can fix our snake game so that we can write to

20284
00:09:16,650 --> 00:09:21,600
a text file our high score. And every time we open up and run our game,

20285
00:09:21,870 --> 00:09:26,850
we fetch that file and see what the previous high score was so that we can load

20286
00:09:26,850 --> 00:09:31,470
it into our game. So for all of that and more, I'll see you in the next lesson.


20287
00:00:00,300 --> 00:00:02,520
It's time for your challenge.

20288
00:00:02,969 --> 00:00:05,760
You've already seen how we've managed to get the snake game

20289
00:00:05,939 --> 00:00:08,160
to keep track of the high score.

20290
00:00:08,760 --> 00:00:13,320
And when the user scores a number that's greater than the high score,

20291
00:00:13,620 --> 00:00:18,090
then we replace that high score with the new value. But unfortunately

20292
00:00:18,180 --> 00:00:23,180
as you saw previously, at the moment when we run this game and we achieve a new

20293
00:00:23,580 --> 00:00:27,780
high score, the next time that we run the game again

20294
00:00:27,840 --> 00:00:29,490
that is completely lost.

20295
00:00:30,090 --> 00:00:34,290
So the first thing I want you to do is to right click on your project,

20296
00:00:34,380 --> 00:00:38,280
create a new file and call it data.txt.

20297
00:00:38,340 --> 00:00:41,280
So we're going to create a data text file.

20298
00:00:41,880 --> 00:00:46,680
Now this data text file is just going to contain a single number,

20299
00:00:47,100 --> 00:00:47,933
zero.

20300
00:00:48,240 --> 00:00:53,240
And we're going to use the data that's in this data.txt file to keep track of

20301
00:00:54,030 --> 00:00:54,863
the high score.

20302
00:00:55,440 --> 00:01:00,240
And it's your job to figure out how you can convert this simple attribute here,

20303
00:01:00,240 --> 00:01:05,239
high score, to instead of using a number that we've just created in the code,

20304
00:01:06,630 --> 00:01:10,530
I want you to use the number that's inside data.txt.

20305
00:01:10,770 --> 00:01:14,040
So you'll need to read from it here and then later on,

20306
00:01:14,070 --> 00:01:18,450
you'll need to write to it when we reset the game and check

20307
00:01:18,480 --> 00:01:22,800
if there is a new high score. Everything going well,

20308
00:01:22,800 --> 00:01:24,330
you should be able to run the game,

20309
00:01:24,360 --> 00:01:29,360
achieve a new high score and then stop and rerun the game and still see that

20310
00:01:29,520 --> 00:01:33,870
high score showing up. Think about what you learned in the last lesson,

20311
00:01:34,110 --> 00:01:39,110
have a think about how you can convert the text in here into a number using

20312
00:01:40,080 --> 00:01:43,890
what you've learned in previous lessons and pause the video and give this

20313
00:01:43,890 --> 00:01:44,723
challenge a go.

20314
00:01:48,680 --> 00:01:49,100
All right.

20315
00:01:49,100 --> 00:01:53,990
So we know that we've already got this file, data.txt, and it already

20316
00:01:53,990 --> 00:01:58,850
contains the number zero. So instead of using this line of code,

20317
00:01:59,180 --> 00:02:02,600
we're going to be reading from that file to get that zero.

20318
00:02:03,110 --> 00:02:06,050
Let's delete this line of code. And instead,

20319
00:02:06,380 --> 00:02:09,889
I'm going to open my file with the file name

20320
00:02:09,889 --> 00:02:14,600
that is data.txt. And the file name is, of course, a string

20321
00:02:14,630 --> 00:02:17,510
like you see here wrapped in quotation marks,

20322
00:02:18,080 --> 00:02:21,650
and we're going to use the with keywords so that we don't have to bother about

20323
00:02:21,860 --> 00:02:23,240
closing the file again.

20324
00:02:23,450 --> 00:02:28,040
We can get Python to manage it for us. with opening this file,

20325
00:02:28,100 --> 00:02:32,000
and I'm going to save that file to a variable called data.

20326
00:02:32,750 --> 00:02:37,700
Now I'm going to use that data and read from it. Now,

20327
00:02:37,730 --> 00:02:39,110
once I've read from it,

20328
00:02:39,200 --> 00:02:44,200
I should end up with some sort of string that's going to represent the contents

20329
00:02:44,810 --> 00:02:45,740
of this file.

20330
00:02:46,370 --> 00:02:50,270
So that string will need to be converted to an integer

20331
00:02:50,360 --> 00:02:52,460
if we want to use it as a number

20332
00:02:52,730 --> 00:02:55,850
which we can increase and change in our game.

20333
00:02:56,240 --> 00:03:01,060
So I'm going to type convert it into an integer. And then finally,

20334
00:03:01,090 --> 00:03:05,320
I'm going to save that as the value for our new attribute,

20335
00:03:05,380 --> 00:03:09,940
self.high_score. That's the reading part done

20336
00:03:10,000 --> 00:03:12,190
and if we run our code as it is,

20337
00:03:12,250 --> 00:03:15,130
it should already work as it did before,

20338
00:03:15,460 --> 00:03:17,560
but it won't have the feature that we want

20339
00:03:17,560 --> 00:03:21,340
which is to be able to quit out of the game,

20340
00:03:21,700 --> 00:03:23,620
stop and rerun.

20341
00:03:23,920 --> 00:03:28,780
So it still not saving the latest high score to that data.txt.

20342
00:03:28,780 --> 00:03:33,220
You can see it's still zero. So where do we want to save it? Well,

20343
00:03:33,220 --> 00:03:36,610
it's got to happen every time we adjust the high score.

20344
00:03:37,060 --> 00:03:40,450
When the score is greater than the current high score,

20345
00:03:40,690 --> 00:03:44,950
we set the high score to the new score. But in addition,

20346
00:03:44,980 --> 00:03:47,830
we're going to read from a file data.txt.

20347
00:03:48,130 --> 00:03:50,020
So let's use our syntax with,

20348
00:03:50,260 --> 00:03:55,260
and then open, again, and let's pass in the name of our file, data.txt.

20349
00:03:56,320 --> 00:04:01,000
And remember that we also need to change the mode to 'w' for

20350
00:04:01,000 --> 00:04:05,830
write because otherwise, it's not going to let us write to that file. Now,

20351
00:04:05,860 --> 00:04:10,390
once we've opened it and we've saved it as a variable called data,

20352
00:04:10,720 --> 00:04:15,340
then we can write to that data using data.write.

20353
00:04:15,850 --> 00:04:19,600
And what are we going to write to it? Well, we have to write a string.

20354
00:04:19,630 --> 00:04:24,630
So let's use an f-string to convert our current self.high_score into a

20355
00:04:26,260 --> 00:04:31,240
string, and then write that into our file, data.txt.

20356
00:04:32,770 --> 00:04:36,490
Now notice what happens when I run my code.

20357
00:04:36,490 --> 00:04:41,350
So I'm going to achieve a new high score of, um,

20358
00:04:41,560 --> 00:04:45,670
2, which I'm very proud of. And now if I hit stop,

20359
00:04:45,700 --> 00:04:48,490
take a look at data.txt. It's been updated,

20360
00:04:48,490 --> 00:04:51,880
it's been rewritten by these two lines of code.

20361
00:04:52,240 --> 00:04:54,760
So now if I rerun my program,

20362
00:04:55,000 --> 00:05:00,000
you can see it already is showing my previous high score of 2,

20363
00:05:00,460 --> 00:05:03,880
and I can keep playing this game and accumulate my high score

20364
00:05:04,150 --> 00:05:07,570
and all of that data will be saved to my file

20365
00:05:07,630 --> 00:05:10,450
data.txt, like that.

20366
00:05:11,230 --> 00:05:14,080
So did you manage to get this right? And by the way,

20367
00:05:14,080 --> 00:05:16,420
if you see this keyboard interrupt, don't worry.

20368
00:05:16,420 --> 00:05:21,070
That's just because we clicked on the stop button to stop our program because it

20369
00:05:21,070 --> 00:05:25,330
wants to keep on going forever until we achieve the highest score of them

20370
00:05:25,330 --> 00:05:30,330
all. The point of this exercise is to try and get you to review what we learned

20371
00:05:30,790 --> 00:05:34,810
in the last lesson, which is opening a file, reading the file,

20372
00:05:35,020 --> 00:05:39,760
and also writing to the file and remembering the mode that we have to change.

20373
00:05:40,360 --> 00:05:45,360
And hopefully, you'll start to see how this could be really useful in terms of

20374
00:05:45,700 --> 00:05:50,650
improving the usability of our programs in our games.

20375
00:05:51,850 --> 00:05:55,330
Now in the next lesson, we're going to talk more than just about files.

20376
00:05:55,360 --> 00:05:58,810
We're going to talk about file paths and directories.

20377
00:05:59,260 --> 00:06:01,810
So for all of that and more, I'll see you there.


20378
00:00:00,690 --> 00:00:01,020
All right.

20379
00:00:01,020 --> 00:00:06,020
So we've seen how we can open and close files as well as read them and write to

20380
00:00:07,680 --> 00:00:11,670
them. But files don't just have a name.

20381
00:00:11,700 --> 00:00:16,140
They also have a path or a way of getting to them.

20382
00:00:16,680 --> 00:00:18,870
For example, here in this map,

20383
00:00:19,110 --> 00:00:21,990
if we wanted this dinosaur to get to the golden egg,

20384
00:00:22,320 --> 00:00:24,690
there's many paths that it could take.

20385
00:00:24,900 --> 00:00:29,900
But if we wanted to give it some directions as to how it might arrive on this

20386
00:00:30,180 --> 00:00:35,100
path, well we might say, you know, continue forwards at the volcano turn, right.

20387
00:00:35,490 --> 00:00:38,340
And then when you see a snake turn right again,

20388
00:00:38,700 --> 00:00:42,900
and when you see the coconut tree turn left and you will get to the cave with

20389
00:00:42,900 --> 00:00:47,100
the egg. Now on computers, it works quite similarly,

20390
00:00:47,400 --> 00:00:52,380
but we have to remember that on the computer there's files and there's folders.

20391
00:00:52,890 --> 00:00:57,890
So files can live within folders and you can navigate through several folders

20392
00:00:58,050 --> 00:01:00,420
deep in order to get to a particular file.

20393
00:01:01,260 --> 00:01:06,260
So let's think about what the file paths might be for a computer that has a

20394
00:01:08,160 --> 00:01:09,570
structure that looks like this.

20395
00:01:10,020 --> 00:01:15,020
So the first thing to note is that at the very root of all of the files and the

20396
00:01:16,170 --> 00:01:20,940
folders is basically the origin, right? This is the root folder.

20397
00:01:21,420 --> 00:01:22,800
And on a Mac,

20398
00:01:22,830 --> 00:01:27,830
you can see that our PyCharm projects live within my users folder, inside a

20399
00:01:30,120 --> 00:01:33,990
folder called users inside a folder called Macintosh HD.

20400
00:01:34,410 --> 00:01:38,250
So if I have this folder selected right here, I can say

20401
00:01:38,280 --> 00:01:41,880
go to enclosing folder, which is this one.

20402
00:01:42,270 --> 00:01:43,860
And then if I keep doing this,

20403
00:01:43,860 --> 00:01:48,270
you can see it keeps jumping up until it can go no further.

20404
00:01:48,810 --> 00:01:53,790
So the root on a Mac is the Macintosh HD, the hard drive.

20405
00:01:54,330 --> 00:01:59,330
And that in terms of a path is represented by a single forward slash.

20406
00:02:01,500 --> 00:02:04,260
Now when you're on a Windows computer however,

20407
00:02:04,860 --> 00:02:08,759
the root folder is usually your C drive.

20408
00:02:09,449 --> 00:02:14,160
So that becomes your root folder. Inside our root folder, our

20409
00:02:14,440 --> 00:02:16,950
Macintosh HD or a C drive,

20410
00:02:17,190 --> 00:02:20,670
we have a folder called work. Inside that folder

20411
00:02:20,790 --> 00:02:25,650
I've got a report Word document as well as a project folder.

20412
00:02:25,710 --> 00:02:30,120
And then inside that project folder, there's a PowerPoint called talk.

20413
00:02:30,660 --> 00:02:34,380
Now, if we think about the file paths for each of these things,

20414
00:02:34,650 --> 00:02:36,450
this is what they might look like.

20415
00:02:36,510 --> 00:02:41,510
The route is obviously just a /, the work folder will be 

20416
00:02:41,700 --> 00:02:46,700
/work, report will be /work/ report.doc, project will

20417
00:02:48,240 --> 00:02:51,840
be /work/project, and finally,

20418
00:02:51,840 --> 00:02:56,840
the talk will be /work/project/talk.

20419
00:02:57,000 --> 00:02:57,833
ppt.

20420
00:02:58,140 --> 00:03:02,230
So this path is kind of like the direction that we were talking about

20421
00:03:02,230 --> 00:03:03,063
previously.

20422
00:03:03,370 --> 00:03:07,690
It's a way for the computer to navigate to the file of interest

20423
00:03:07,990 --> 00:03:10,930
which in this case might be the talk.ppt.

20424
00:03:11,590 --> 00:03:15,790
And we have to give it directions for which folder to go into and then which

20425
00:03:15,790 --> 00:03:20,440
folder, and then you'll find the file with this name. Now,

20426
00:03:20,470 --> 00:03:23,740
this is known as an absolute file path.

20427
00:03:23,830 --> 00:03:28,830
Absolute file paths always start off relative to the root.

20428
00:03:29,290 --> 00:03:32,590
So you always see a forward slash to begin with, and sometimes you'll see

20429
00:03:32,590 --> 00:03:34,720
C: or on a Mac

20430
00:03:34,720 --> 00:03:38,680
you'll just see the /. This absolute file

20431
00:03:38,680 --> 00:03:42,010
path is basically a path that starts from the origin,

20432
00:03:42,040 --> 00:03:44,680
the route of the computer storage system.

20433
00:03:45,370 --> 00:03:49,630
Now there's also something called a relative file path.

20434
00:03:49,960 --> 00:03:52,180
Taking this talk.ppt,

20435
00:03:52,270 --> 00:03:57,270
we know that the absolute file path is /work/project/

20436
00:03:57,640 --> 00:03:59,860
talk.ppt. But

20437
00:04:00,000 --> 00:04:04,980
what if we were actually inside this project folder?

20438
00:04:05,460 --> 00:04:10,140
So let's say that at the time when we're trying to get to this talk.ppt

20439
00:04:10,440 --> 00:04:12,450
we're actually right here.

20440
00:04:13,350 --> 00:04:18,089
Now this, in computer-speak, is called the working directory.

20441
00:04:18,450 --> 00:04:23,100
It's basically the directory or folder that we're currently working from.

20442
00:04:23,700 --> 00:04:27,210
And once we've established a working directory,

20443
00:04:27,390 --> 00:04:29,310
say that we are right here,

20444
00:04:29,670 --> 00:04:34,380
then we can use what's called a relative file path to get to a file that we're

20445
00:04:34,380 --> 00:04:38,430
interested in. So given that we're here and we're trying to get here,

20446
00:04:38,790 --> 00:04:43,790
the relative file path is simply just ./talk.ppt.

20447
00:04:45,780 --> 00:04:47,730
The ./ signifies

20448
00:04:47,970 --> 00:04:51,780
look in the current folder for this file.

20449
00:04:52,350 --> 00:04:57,350
If we switch up our working directory and let's say we are now working from the

20450
00:04:58,350 --> 00:05:02,820
work folder, how do we get to this talk.ppt? Well,

20451
00:05:02,850 --> 00:05:05,820
the absolute file path would not change for this file,

20452
00:05:06,150 --> 00:05:11,150
but the relative file path would now be ./project/talk.ppt.

20453
00:05:13,530 --> 00:05:17,310
So we're walking from here to here to here.

20454
00:05:18,030 --> 00:05:22,260
Now, what if we wanted to go upwards in the directory tree?

20455
00:05:22,620 --> 00:05:26,220
Let's say we wanted to get a hold of this report.doc,

20456
00:05:26,520 --> 00:05:31,200
but we all currently working inside this project folder.

20457
00:05:31,500 --> 00:05:36,360
How do we go one step up? Well, we would right ..,

20458
00:05:36,420 --> 00:05:40,620
so two dots now, /report.doc.

20459
00:05:40,860 --> 00:05:45,600
So we're inside this project folder, we're coming out of it to the parent folder

20460
00:05:45,600 --> 00:05:49,800
which is the work folder, and then we're getting hold of this file.

20461
00:05:50,130 --> 00:05:55,130
So that two dots represents going one step up in the hierarchy to the parent

20462
00:05:56,160 --> 00:05:58,700
folder, which this case is the work folder.

20463
00:05:59,480 --> 00:06:04,480
Now what we've been doing is we've been writing code inside our main.py.

20464
00:06:05,360 --> 00:06:10,250
And that main.py has usually been inside some sort of project folder. When

20465
00:06:10,250 --> 00:06:14,780
we're trying to get hold of a file this is basically where we are at.

20466
00:06:14,810 --> 00:06:18,260
So our working directory is the work folder.

20467
00:06:18,980 --> 00:06:23,980
So that means if we wanted to get access to this report.doc file from our

20468
00:06:24,590 --> 00:06:25,580
main.py,

20469
00:06:25,910 --> 00:06:30,910
all we need to do is write ./report.doc because we're working within

20470
00:06:32,240 --> 00:06:36,230
the same directory and we're just getting hold of this file.

20471
00:06:36,860 --> 00:06:41,510
Now, when you're using relative file path, you can use this ./

20472
00:06:41,750 --> 00:06:44,870
but you can also shorten it and get rid of it as well.

20473
00:06:45,560 --> 00:06:50,560
This is why we've been able to open this my_file.txt

20474
00:06:50,930 --> 00:06:55,930
which is in the same folder as my main.py and notice how these two files are at

20475
00:06:57,710 --> 00:07:02,060
the same hierarchical level. So let's do a quick challenge.

20476
00:07:02,090 --> 00:07:06,050
I'm going to delete the part where we write to the file and I'm going to change

20477
00:07:06,050 --> 00:07:06,560
my file

20478
00:07:06,560 --> 00:07:11,560
so it just has one sentence and I'm going to locate this file by using 'Reveal in

20479
00:07:14,120 --> 00:07:17,990
Finder' and on Windows that would be right-

20480
00:07:17,990 --> 00:07:20,390
click and Show in Explorer.

20481
00:07:21,350 --> 00:07:26,350
And it would show you the location of that file in your computer system.

20482
00:07:27,740 --> 00:07:32,090
Now, what we're going to do is we're going to move this file to the desktop.

20483
00:07:32,380 --> 00:07:33,213
Right?

20484
00:07:37,330 --> 00:07:41,320
And what I want you to do is I want you to go to the desktop, right-

20485
00:07:41,320 --> 00:07:45,820
click on that file. And if you want a Mac, I want you to click on get info.

20486
00:07:46,360 --> 00:07:47,710
And if you are on a Windows,

20487
00:07:47,740 --> 00:07:51,400
I want you to right-click and go to properties.

20488
00:07:52,000 --> 00:07:55,510
Now what you're looking for is this location here.

20489
00:07:56,350 --> 00:07:58,930
Now you can see that this current file,

20490
00:07:58,960 --> 00:08:03,340
new_file, is located under the root folder,

20491
00:08:03,370 --> 00:08:08,370
which in this case is the C:\Users\London

20492
00:08:09,220 --> 00:08:14,220
AppBrewery\Desktop\new_file.txt. On a Mac

20493
00:08:15,640 --> 00:08:18,880
you can see that it's located under the root folder,

20494
00:08:18,910 --> 00:08:23,910
which is Macintosh HD slash users slash Angela slash desktop slash my_file.

20495
00:08:26,290 --> 00:08:29,470
txt. Here comes your challenge.

20496
00:08:29,590 --> 00:08:33,010
Now that we've moved our file away from our project,

20497
00:08:33,490 --> 00:08:37,120
I want you to fix this code so that when you run it,

20498
00:08:37,299 --> 00:08:42,299
it won't give you this file not found error because at the moment there is no my_

20499
00:08:43,419 --> 00:08:48,220
file.txt in the same working directory as our main.py.

20500
00:08:48,280 --> 00:08:50,350
It doesn't exist inside this folder.

20501
00:08:51,010 --> 00:08:55,620
Have a think about what you've learned so far and see if you can change this

20502
00:08:55,620 --> 00:08:58,740
path so that our code works again.

20503
00:08:59,310 --> 00:09:00,990
And it's the same on Windows.

20504
00:09:01,380 --> 00:09:05,760
Use the location of the file on your computer and use the absolute path in the

20505
00:09:05,760 --> 00:09:08,430
code to get it to work. Pause the video now.

20506
00:09:08,630 --> 00:09:09,463
Okay

20507
00:09:12,020 --> 00:09:16,250
All right. Here's how you would use the absolute path. So we know that our,

20508
00:09:16,280 --> 00:09:21,280
my_file.txt is located in the root folder and then it's

20509
00:09:21,470 --> 00:09:25,670
users, angela, desktop. So let's go ahead and change this string.

20510
00:09:25,700 --> 00:09:29,750
Let's start at the root and then let's add the next folder,

20511
00:09:29,780 --> 00:09:31,640
which is users.

20512
00:09:32,180 --> 00:09:36,200
And then let's add another slash and then we go to the next folder,

20513
00:09:36,230 --> 00:09:41,090
which is Angela. Now of course, this will be different for you,

20514
00:09:41,630 --> 00:09:46,630
but finally we go to our desktop and then we can get to our,

20515
00:09:48,320 --> 00:09:49,670
my_file.txt.

20516
00:09:49,940 --> 00:09:53,420
So this is the full path to get to this file.

20517
00:09:53,930 --> 00:09:58,370
So now if I run this code again, you can see it's able to read the file,

20518
00:09:58,370 --> 00:10:02,090
there is no errors, and it's getting hold of the contents of the file.

20519
00:10:02,810 --> 00:10:05,480
Now on Windows, it's a similar story.

20520
00:10:05,720 --> 00:10:08,930
So we know that the location of the file is root,

20521
00:10:09,320 --> 00:10:12,650
then users, then LondonAppBrewery, then desktop. Again,

20522
00:10:12,710 --> 00:10:15,980
this of course will be different for you depending on your username,

20523
00:10:16,280 --> 00:10:18,260
but you should see it in your location

20524
00:10:18,290 --> 00:10:22,100
when you take a look at the file properties. So let's change this.

20525
00:10:22,280 --> 00:10:25,040
Let's start out at the root, which is the C drive,

20526
00:10:25,550 --> 00:10:27,770
and then let's go to users.

20527
00:10:30,590 --> 00:10:34,670
And then we go to our username which is LondonAppBrewery

20528
00:10:34,880 --> 00:10:35,713
,

20529
00:10:38,690 --> 00:10:43,690
and then we go to our desktop and that is where it should find this new_file.

20530
00:10:45,410 --> 00:10:48,140
txt. So now when I hit run,

20531
00:10:48,200 --> 00:10:53,200
you can see that it's able to fetch that file and print the content without any

20532
00:10:54,170 --> 00:10:55,760
errors. Now,

20533
00:10:55,760 --> 00:11:00,760
one of the peculiarities about file paths in Windows and Mac is that in a Mac,

20534
00:11:02,780 --> 00:11:03,740
the path,

20535
00:11:03,890 --> 00:11:08,390
each of the folders are separated by a / whereas on Windows,

20536
00:11:08,420 --> 00:11:12,710
they're separated by a \. But as you've noticed,

20537
00:11:12,770 --> 00:11:16,070
when we're writing Python code, we don't care about that.

20538
00:11:16,100 --> 00:11:21,100
We can just write it as / and making sure that we have the root,

20539
00:11:21,350 --> 00:11:25,010
which represents the C drive, so this entire part,

20540
00:11:25,430 --> 00:11:29,150
and then we have our folder, the next folder, the next folder,

20541
00:11:29,150 --> 00:11:33,650
the next folder, et cetera. So now comes the next challenge.

20542
00:11:34,110 --> 00:11:38,570
You can see that this path follows from the root folder,

20543
00:11:38,570 --> 00:11:41,810
which is the C drive and on the Mac,

20544
00:11:42,050 --> 00:11:44,420
it's also from the Macintosh HD.

20545
00:11:44,840 --> 00:11:49,840
So what if we wanted to change this so that it's relative to our current main

20546
00:11:50,570 --> 00:11:52,790
.py? Our main.py

20547
00:11:53,350 --> 00:11:55,960
if we go to 'Show in Explorer',

20548
00:11:56,290 --> 00:12:01,030
you can see that the path for this file is the following.

20549
00:12:01,120 --> 00:12:01,720
It's under

20550
00:12:01,720 --> 00:12:06,720
Users/LondonAppBrewery/PyCharmProjects/WindowsDemo.

20551
00:12:07,780 --> 00:12:12,280
So that's the name of my project. And then afterwards,

20552
00:12:12,340 --> 00:12:17,050
it's my main.py. So this is a bit of a tricky question.

20553
00:12:17,470 --> 00:12:22,470
Given that this file is inside this current folder or whatever it is that you

20554
00:12:23,170 --> 00:12:26,290
have as your folder which contains this file,

20555
00:12:26,890 --> 00:12:31,890
how can you get it to use a relative file path so that it jumps back two folders

20556
00:12:33,790 --> 00:12:38,790
to the LondonAppBrewery folder and then goes to Desktop and then to new file?

20557
00:12:40,150 --> 00:12:44,590
On our Mac, it's a similar story. So we go to 'Reveal in Finder'.

20558
00:12:44,620 --> 00:12:47,260
We can see this is where we are currently.

20559
00:12:47,530 --> 00:12:52,530
So our current working directory is this day-24 project folder.

20560
00:12:53,080 --> 00:12:57,040
So if we go one level up and the shortcut is command + up,

20561
00:12:57,370 --> 00:13:02,260
we go to our day-24 folder. So this is our working directory.

20562
00:13:02,740 --> 00:13:04,810
Now, if we want to go up one level,

20563
00:13:04,810 --> 00:13:08,620
we can go to go, and then go to including folder,

20564
00:13:08,860 --> 00:13:11,800
so one level up that gets us to PyCharm projects.

20565
00:13:12,160 --> 00:13:16,690
And then if we go one level up further, we get to our Angela folder

20566
00:13:17,080 --> 00:13:21,760
at which point we can then navigate downwards to Desktop/my_file.txt.

20567
00:13:22,450 --> 00:13:23,770
This is your challenge.

20568
00:13:23,980 --> 00:13:28,120
Figure out what the relative path to the text file on your desktop should be

20569
00:13:28,390 --> 00:13:31,600
then modify the code and get it to work. Pause the video now.

20570
00:13:34,600 --> 00:13:39,460
The way that we would modify this is in order to get to this Angela folder where

20571
00:13:39,460 --> 00:13:42,940
we can continue to our Desktop and then to my file,

20572
00:13:43,240 --> 00:13:45,130
we have to go up two levels.

20573
00:13:45,190 --> 00:13:48,850
So that translates to ../../

20574
00:13:48,940 --> 00:13:50,770
and now we're inside the Angela folder.

20575
00:13:50,950 --> 00:13:55,750
So we can start going down. And PyCharm is smart enough to know what your

20576
00:13:55,780 --> 00:13:57,220
folder structure looks like.

20577
00:13:57,520 --> 00:14:01,960
So it will start giving you hints as to what folders are accessible at this

20578
00:14:01,960 --> 00:14:02,793
level.

20579
00:14:02,890 --> 00:14:07,420
So I can get to Desktop and then I can get to my_file.txt.

20580
00:14:07,840 --> 00:14:10,060
And if I go ahead and run my code,

20581
00:14:10,150 --> 00:14:15,070
you can see it's able to read and print the content of that file.

20582
00:14:15,940 --> 00:14:20,650
The main difference between an absolute file path and a relative file path is

20583
00:14:20,650 --> 00:14:25,650
the absolute file path is always relative to the root of your computer. On

20584
00:14:26,710 --> 00:14:29,740
Windows that's the C drive, usually anyways

20585
00:14:29,740 --> 00:14:32,290
unless you've changed it. And on a Mac,

20586
00:14:32,380 --> 00:14:34,780
it is the Macintosh HD.

20587
00:14:35,620 --> 00:14:40,210
Now the relative file path is relative to your current working directory.

20588
00:14:40,210 --> 00:14:44,380
So it depends on where you are and where you're trying to get to. Now,

20589
00:14:44,410 --> 00:14:49,360
depending on the situation and where that file you are interested in is located,

20590
00:14:49,630 --> 00:14:53,870
you might decide to use the absolute file path or the relative file path.

20591
00:14:54,550 --> 00:14:56,200
And you can see that in this case

20592
00:14:56,200 --> 00:15:01,200
it's not necessarily that much shorter or that much more easier to understand.

20593
00:15:01,840 --> 00:15:04,090
So if you know how to do both,

20594
00:15:04,480 --> 00:15:08,050
then you can adapt to the situation and figure out which one is most

20595
00:15:08,050 --> 00:15:12,130
appropriate. Now I know that paths can be confusing.

20596
00:15:12,430 --> 00:15:16,330
So that's why I've come up with a whole bunch of quiz exercises for you in the

20597
00:15:16,330 --> 00:15:20,530
next lesson for you to get more the practice with file paths so that you can

20598
00:15:20,530 --> 00:15:22,540
feel confident leaving this lesson.

20599
00:15:23,110 --> 00:15:26,140
So for all of that and more, I'll see you on the next lesson.


20600
00:00:00,180 --> 00:00:05,550
All right, guys, it's time to put what you've learned to the test. Now in this project, we're going

20601
00:00:05,550 --> 00:00:08,220
to be doing a little bit of mail merging.

20602
00:00:08,550 --> 00:00:12,630
So mail merging is where you take something like what

20603
00:00:12,630 --> 00:00:20,210
we have a list of names, for example, and we want to insert each of these names into a letter.

20604
00:00:20,490 --> 00:00:26,040
So instead of saying dear [name], you are invited to my birthday the Saturday, it should say dear

20605
00:00:26,040 --> 00:00:29,240
and then it would replace that with whatever is here.

20606
00:00:29,580 --> 00:00:31,710
Take a look at this example file.

20607
00:00:32,040 --> 00:00:38,070
You can see that it replaced the name placeholder with the first name in the invited_names.txt

20608
00:00:38,070 --> 00:00:38,550
file.

20609
00:00:39,060 --> 00:00:42,930
Your objective is to write some python code to automate the process.

20610
00:00:43,950 --> 00:00:50,940
So what you're going to end up with is a bunch of letters, one for each of the names inside the invited_

20611
00:00:50,940 --> 00:00:58,590
names.txt and the letters are going to be named like this: letter_for_ and

20612
00:00:58,590 --> 00:01:00,120
then the name of the person.

20613
00:01:00,360 --> 00:01:07,770
And they're going to be saved in a txt format, which you can open either in Google Docs or in Microsoft

20614
00:01:07,770 --> 00:01:08,190
Word.

20615
00:01:08,670 --> 00:01:10,950
And it's basically ready for printing.

20616
00:01:11,530 --> 00:01:16,770
So I've made it a little bit harder for you by adding in a whole bunch of folders.

20617
00:01:16,980 --> 00:01:21,330
And each of these files are nested inside a bunch of folders.

20618
00:01:21,330 --> 00:01:25,230
So, for example, starting letter is inside letters, which is inside input.

20619
00:01:25,770 --> 00:01:31,500
And then the letters that you're going to generate are going to need to go into this folder called Ready

20620
00:01:31,500 --> 00:01:35,430
ToSend, which is inside output. And no cheating.

20621
00:01:35,430 --> 00:01:38,010
I don't want you moving around any of these files.

20622
00:01:38,160 --> 00:01:44,730
You're going to be using what you've learned about directories and file paths to do everything without

20623
00:01:44,730 --> 00:01:47,850
needing to drag and drop or move anything around manually.

20624
00:01:48,750 --> 00:01:50,340
I've got some starting files for you.

20625
00:01:50,430 --> 00:01:56,520
So the first thing I want you to do is to go to the course resources and download the zip file, which

20626
00:01:56,520 --> 00:01:58,140
will be your starting project code.

20627
00:01:58,740 --> 00:02:05,130
Once you open it within PyCharm, it's going to ask you to configure the interpreter. So you can either

20628
00:02:05,130 --> 00:02:10,229
go ahead and click on that pop-up, or if it disappears, then just click on the event log and then click

20629
00:02:10,229 --> 00:02:15,330
on Configure Python Interpreter and then select the latest interpreter that you have installed.

20630
00:02:15,660 --> 00:02:19,200
So in my case, it's 3.8, but by the time you're watching this, it'll probably be 

20631
00:02:19,200 --> 00:02:21,120
3.9 or even later.

20632
00:02:21,660 --> 00:02:27,290
And once that's done, then you can go ahead and have a look inside main.py.

20633
00:02:27,840 --> 00:02:30,030
So here I've got some instructions for you.

20634
00:02:30,540 --> 00:02:36,750
First, you're going to create a letter using the starting_letter.txt, which is right here

20635
00:02:36,750 --> 00:02:43,130
nested two folders deep, and then you're going to use each of the names inside invited_names.

20636
00:02:43,140 --> 00:02:52,320
txt to replace the part where it says name with the actual names that you see in invited_names.txt.

20637
00:02:53,190 --> 00:02:58,200
And then you're going to save each of those letters that you've generated inside the folder ReadyTo

20638
00:02:58,200 --> 00:02:58,620
Send.

20639
00:02:59,310 --> 00:03:05,250
And you can take a look at the example if you want to see what the final outcome looks like.

20640
00:03:05,260 --> 00:03:10,030
So it's going to be the name without any spaces afterwards, just a comma.

20641
00:03:10,770 --> 00:03:14,850
Now there's going to be a few things that will trip you up along the way.

20642
00:03:15,000 --> 00:03:21,240
And I'm hoping that you're going to use your knowledge about how to get help from Google and Stack overflow,

20643
00:03:21,600 --> 00:03:24,690
as well as some of these hints that I've left in here for you.

20644
00:03:25,260 --> 00:03:32,520
So the hints take you to three pages of Python documentation, and they're chosen because the methods

20645
00:03:32,550 --> 00:03:36,200
that are featured in them will definitely help you in this project.

20646
00:03:36,450 --> 00:03:41,670
In fact, some of the things that you're going to try to do won't be possible unless you take a look

20647
00:03:41,670 --> 00:03:46,920
at each of these pages of documentation, read through it, and understand what the methods do.

20648
00:03:47,520 --> 00:03:53,490
Now, as always, with a lot of tutorials, it's impossible to teach you every single method.

20649
00:03:53,490 --> 00:03:58,800
And it would be really, really tedious if I just went through all of the methods that are available in Python

20650
00:03:59,070 --> 00:04:01,050
and showed them to you individually.

20651
00:04:01,530 --> 00:04:08,190
So instead, you have to work just as a pro developer does which is to find out information when you

20652
00:04:08,190 --> 00:04:14,940
need it and to quickly understand what's happening and how to use the information you found on the fly.

20653
00:04:15,480 --> 00:04:21,750
Don't worry if you haven't seen me use these methods before. You will get more practice by using

20654
00:04:21,750 --> 00:04:27,200
the documentation, figuring things out yourself, and implementing things that you haven't seen before.

20655
00:04:28,080 --> 00:04:35,490
Once you're ready, go ahead and take a look at each of these links, see what each of the methods I've

20656
00:04:35,490 --> 00:04:40,830
linked to does, and then go ahead and try to tackle this challenge.

20657
00:04:41,250 --> 00:04:44,100
So pause the video and I'll see you on the other side.


20658
00:00:00,210 --> 00:00:05,890
I hope you've given that a good go and now I'm going to run through the solution with you. Here,

20659
00:00:05,910 --> 00:00:12,660
I've got those three links open and they're all documentation on W3schools for different methods

20660
00:00:12,660 --> 00:00:13,470
in Python.

20661
00:00:13,980 --> 00:00:17,010
The first one is a method called readlines.

20662
00:00:17,340 --> 00:00:19,050
It's really important that you have that

20663
00:00:19,050 --> 00:00:23,250
's' because there's also another method called readline, the singular form.

20664
00:00:23,760 --> 00:00:31,770
What readlines does is it returns all the lines in the file as a list where each line is an item in

20665
00:00:31,770 --> 00:00:32,700
the list object.

20666
00:00:33,150 --> 00:00:40,680
For example, we can run this example and you can see that inside this demo file, readlines, there's

20667
00:00:40,680 --> 00:00:49,800
several lines in that file, and each line after running this method, gets added as a item inside a list

20668
00:00:50,190 --> 00:00:51,210
like this.

20669
00:00:52,170 --> 00:00:57,450
Now, the next method I showed you is the python string replace method.

20670
00:00:58,050 --> 00:01:04,080
And what this method does is it will replace a specified phrase with another specified phrase.

20671
00:01:04,500 --> 00:01:10,410
If the starting text was 'I like bananas' and you do txt.replace, you can replace the part where

20672
00:01:10,410 --> 00:01:12,180
it says bananas with apples.

20673
00:01:12,480 --> 00:01:18,150
And when you print, you can see the end outcome changes that text to I like apples.

20674
00:01:18,930 --> 00:01:23,430
Now, the final method that I showed you is the string strip method.

20675
00:01:23,760 --> 00:01:29,720
And what this does is it will remove the spaces at the beginning and at the end of the string.

20676
00:01:30,030 --> 00:01:35,340
So if our starting text has a lot of whitespace at the beginning and the end, and then we do txt.

20677
00:01:35,490 --> 00:01:41,440
strip, it'll get rid of all of that extra space and it ends up with just the word.

20678
00:01:41,940 --> 00:01:45,360
Now, if you have a space in between, another word

20679
00:01:47,850 --> 00:01:54,420
like this, if we hit run, then you can see that it keeps the space in between the words, but it gets

20680
00:01:54,420 --> 00:01:59,280
rid of any spaces on either side, which is really, really handy.

20681
00:01:59,730 --> 00:02:03,370
And you're going to see hopefully why it's really, really useful.

20682
00:02:03,960 --> 00:02:10,710
So now that we've reviewed these three methods that we haven't seen before, and normally you would probably

20683
00:02:10,710 --> 00:02:14,670
find these when you actually get stuck and when you're searching Stack Overflow.

20684
00:02:15,480 --> 00:02:22,150
But now that you're aware of those methods, let's go ahead and create a letter using our starting letter.

20685
00:02:22,440 --> 00:02:25,170
So I'm going to go ahead and delete everything in here.

20686
00:02:25,560 --> 00:02:28,880
And now let's go ahead and tackle this challenge.

20687
00:02:29,220 --> 00:02:33,720
So the first thing I want to do is to get hold of all of the invited names

20688
00:02:33,930 --> 00:02:36,780
and I want to turn them into a list. Now

20689
00:02:36,780 --> 00:02:43,590
I can, of course, rather tediously go and add some square brackets, add some quotation marks around

20690
00:02:43,590 --> 00:02:46,400
it, and then add it into my main.py.

20691
00:02:46,830 --> 00:02:48,120
But I don't want to do that.

20692
00:02:48,460 --> 00:02:51,320
Instead, I'm going to get Python to read the file.

20693
00:02:51,690 --> 00:02:57,210
So using our classic syntax with open, I'm going to open up that file.

20694
00:02:57,690 --> 00:03:03,870
But in order to open it up, I need to specify a string which is going to be the path that leads me

20695
00:03:04,020 --> 00:03:06,160
from here to here.

20696
00:03:06,660 --> 00:03:08,880
So let's think about how we might get there.

20697
00:03:09,210 --> 00:03:16,350
Now, this input output folder is on the same hierarchical level as our current file where we're writing

20698
00:03:16,350 --> 00:03:16,980
our code.

20699
00:03:17,550 --> 00:03:24,240
If we want to use a relative file path, we can simply say go into the current folder which is mail-

20700
00:03:24,240 --> 00:03:28,410
merge-project-start and then find a folder called Input.

20701
00:03:29,730 --> 00:03:31,700
Inside this folder called Input,

20702
00:03:31,740 --> 00:03:35,430
we're going to go to another folder called Names.

20703
00:03:36,120 --> 00:03:41,640
And then inside that folder of names, we're going to get a hold of that file called invited_names

20704
00:03:41,640 --> 00:03:42,360
.txt.

20705
00:03:42,780 --> 00:03:46,980
And PyCharm is super clever and it helps you out with a lot of typing.

20706
00:03:47,250 --> 00:03:48,810
So it saves you some time as well.

20707
00:03:49,380 --> 00:03:52,260
And then I'm going to save it as names_file.

20708
00:03:53,390 --> 00:03:55,350
Now that I've got this file open

20709
00:03:55,350 --> 00:03:57,800
I'm going to go ahead and read it.

20710
00:03:57,810 --> 00:04:05,520
So names_file.read. And once I've read it, I'm going to save it to a variable called names and

20711
00:04:05,520 --> 00:04:07,410
then I'm going to print out my names.

20712
00:04:08,010 --> 00:04:15,960
So now if I go ahead and hit run my main.py, you can see that it prints out all of these names individually

20713
00:04:16,200 --> 00:04:19,690
because it's getting hold of everything that's in here and just printing it out.

20714
00:04:20,370 --> 00:04:25,650
Now, at this point, I would really like these names to be in the format of a list.

20715
00:04:25,980 --> 00:04:32,400
So if you remember, that's where this readlines method is going to be really helpful because it returns

20716
00:04:32,400 --> 00:04:36,290
a list containing each line inside the file as a list item.

20717
00:04:37,380 --> 00:04:42,330
Now, instead of saying names_file.read, let's replace that with readlines.

20718
00:04:43,080 --> 00:04:50,760
Now, when I hit run, you can see it prints out names, and names is now magically turned into a list.

20719
00:04:51,180 --> 00:04:59,340
So now that we have our list of names which we've extracted from our invited_names.txt, then

20720
00:04:59,340 --> 00:05:06,480
we can go ahead and proceed to the next step where we're going to replace this placeholder in our starting

20721
00:05:06,480 --> 00:05:09,160
letter with each of these names.

20722
00:05:09,690 --> 00:05:15,840
Let's go ahead and create a constant at the top which I'll call PLACEHOLDER, and I'm going to set

20723
00:05:15,840 --> 00:05:23,790
it as the string which is the square brackets and then the word name because this is the string

20724
00:05:23,790 --> 00:05:27,200
that we want to replace from our starting letter.

20725
00:05:27,900 --> 00:05:31,300
The next step is to open up our starting letter.

20726
00:05:31,320 --> 00:05:35,400
So again, I'm going to use open and then I'm going to specify the path.

20727
00:05:35,680 --> 00:05:40,820
So from here, I'm going to go into the folder that's at the same level as this file,

20728
00:05:41,160 --> 00:05:48,510
so using the ./ and then I'm going to go into input again and then I'm going to go into instead

20729
00:05:48,510 --> 00:05:50,340
of names, I'm going to go to letters.

20730
00:05:52,320 --> 00:06:00,210
And I'm going to get hold of my starting letter and I'm going to open this as the letter_file. With the

20731
00:06:00,210 --> 00:06:00,970
letter_file

20732
00:06:00,990 --> 00:06:08,430
I'm simply just going to get a hold of the letter_contents by saying letter_file.read.

20733
00:06:08,580 --> 00:06:14,640
And this is going to be a normal read because I want all of the content inside that letter and it's

20734
00:06:14,640 --> 00:06:18,390
now going to be saved as a string inside my letter_contents.

20735
00:06:19,290 --> 00:06:27,120
The next step is to go through the letter contents and replace that placeholder with the actual name

20736
00:06:27,120 --> 00:06:28,590
that we've got in our list.

20737
00:06:29,130 --> 00:06:35,940
To do that we'll need the second method that I showed you which is the replace method. So we can get

20738
00:06:35,940 --> 00:06:38,640
hold of the text call, replace,

20739
00:06:38,880 --> 00:06:44,310
and then the output of this method will be a new string which has modified

20740
00:06:44,310 --> 00:06:52,620
this tex. I in our case we'll need a loop. So we can say for name in our list of names, let's go through

20741
00:06:52,620 --> 00:07:00,390
each of the names in that list and then let's get the letter_contents and replace the placeholder,

20742
00:07:00,390 --> 00:07:05,400
so the old string, with a new string which is going to be the name.

20743
00:07:06,120 --> 00:07:11,130
And once we've replaced it, then we're going to save it into a new_letter.

20744
00:07:12,610 --> 00:07:18,220
Now that we have our new letter, let's go ahead and print it out and see what it looks like.

20745
00:07:21,520 --> 00:07:27,460
So you can see all the contents of each of the letters being printed, but other than the very last

20746
00:07:27,460 --> 00:07:33,550
letter that looks pretty normal, every other letter has a new line after the name.

20747
00:07:34,120 --> 00:07:40,630
So remember when we printed out each of these names, you can see that after each of the names that

20748
00:07:40,630 --> 00:07:46,930
they've extracted from this list of invited names, there's a new line that's being added,

20749
00:07:47,140 --> 00:07:49,440
and you can see that with this \n.

20750
00:07:49,450 --> 00:07:53,950
The only one that doesn't have a new line is the very last one.

20751
00:07:54,670 --> 00:08:00,200
What we need to do is to strip the new line. Does that remind you of something?

20752
00:08:00,220 --> 00:08:06,550
Well, we have a method that we saw called strip which can take away any of the spaces at the beginning

20753
00:08:06,550 --> 00:08:07,870
and at the end of the string.

20754
00:08:08,350 --> 00:08:14,980
And then we can end up with an output which is the string without any of those leading and trailing

20755
00:08:14,980 --> 00:08:15,580
spaces.

20756
00:08:16,300 --> 00:08:21,370
We're going to loop through each of the names and then we're going to take the name and we're going

20757
00:08:21,370 --> 00:08:23,830
to call strip on each of those names.

20758
00:08:24,250 --> 00:08:28,420
And then we can save it to a variable called stripped_name.

20759
00:08:29,800 --> 00:08:33,580
And now we can use that stripped_name instead of the name.

20760
00:08:34,780 --> 00:08:39,370
Now if I go ahead and print out our new_letter,

20761
00:08:41,820 --> 00:08:48,390
you can see that each of the letters look exactly like how we want them to be. All we need to do now

20762
00:08:48,420 --> 00:08:53,650
is to write them into a new file. In previous lessons

20763
00:08:53,670 --> 00:09:01,290
I mentioned that when you open a file that doesn't exist, Python will actually create that file for

20764
00:09:01,290 --> 00:09:01,580
you.

20765
00:09:02,190 --> 00:09:09,180
Again, using our with open, I'm going to navigate to this ReadyToSend folder. Going from where we

20766
00:09:09,180 --> 00:09:10,390
are in main.py,

20767
00:09:10,440 --> 00:09:15,950
we're going to go to the output folder and then we're going to go to the ReadyToSend folder.

20768
00:09:16,380 --> 00:09:21,430
And then inside the ReadyToSend folder is where we're going to create our new file.

20769
00:09:21,960 --> 00:09:27,150
So let's think about what we want our file name to look like. In the intro I showed you

20770
00:09:27,150 --> 00:09:33,400
this is the format for each of the files; letter_for_Aang.txt.

20771
00:09:33,540 --> 00:09:36,270
And then this part is replaced by each of the names.

20772
00:09:36,930 --> 00:09:45,620
So let's write that letter_for_ the name and then .txt.

20773
00:09:45,990 --> 00:09:50,600
We can use an fstring to replace this part with the stripped_name.

20774
00:09:51,030 --> 00:09:57,240
So now we should be creating a new letter for each of the names in our list of names.

20775
00:09:57,930 --> 00:10:03,090
So now let's refer to this file as the completed_letter.

20776
00:10:05,100 --> 00:10:10,500
What we want to do with this completed_letter, which at the moment is blank, is we want to write to

20777
00:10:10,500 --> 00:10:10,640
it.

20778
00:10:11,070 --> 00:10:18,150
So to do that, we have to change the open mode from default which is 'r' for read to 'w' for

20779
00:10:18,150 --> 00:10:18,610
write.

20780
00:10:19,110 --> 00:10:24,150
And this will allow us to get our completed letter and write to it.

20781
00:10:24,690 --> 00:10:25,980
What do we want to write in there?

20782
00:10:26,010 --> 00:10:30,120
Well, we want to write the new letter that we've created, of course.

20783
00:10:31,780 --> 00:10:40,300
That's pretty much the end of our code, and all we have to do is to go ahead and hit run. And once I

20784
00:10:40,300 --> 00:10:45,460
hit run, you can see there's a whole bunch of letters that have been generated over here,

20785
00:10:45,740 --> 00:10:51,610
and if I click on each of them, you can see that the name placeholder has now been replaced

20786
00:10:51,880 --> 00:10:56,050
and I'm now ready to go to the printers and print all of these out.

20787
00:10:57,160 --> 00:11:01,570
So did you manage to figure out how to complete this project?

20788
00:11:02,080 --> 00:11:08,050
If not, be sure to review the relevant parts of the lessons today so that you're really confident with

20789
00:11:08,050 --> 00:11:11,080
what's going on and you understand all of this code.

20790
00:11:11,920 --> 00:11:16,990
If you want to take a look at the completed solution, then head over to the course resources and you'll

20791
00:11:16,990 --> 00:11:22,810
find a link to the final project code which actually works even within repl.it.

20792
00:11:22,810 --> 00:11:26,940
So you can delete all of these files and you can see it generate them from scratch.



20793
00:00:00,480 --> 00:00:04,530
Hey guys, welcome to Day 25 of 100 Days of Code.

20794
00:00:04,980 --> 00:00:09,690
So today we're going to be learning about how to work with CSV files,

20795
00:00:09,960 --> 00:00:13,620
so not just text files as we saw in yesterday's lessons.

20796
00:00:13,950 --> 00:00:17,460
But we're going to be working with data files and we're going to be analyzing

20797
00:00:17,460 --> 00:00:20,400
that data with a library called Pandas.

20798
00:00:20,790 --> 00:00:24,000
This is one of the most popular Python data analysis libraries,

20799
00:00:24,390 --> 00:00:27,960
and we're going to get to grips with how we can use it to start getting some

20800
00:00:27,960 --> 00:00:31,680
insight into our data. By the end of the day,

20801
00:00:31,710 --> 00:00:35,790
you're going to be building a educational and interesting game,

20802
00:00:35,880 --> 00:00:40,880
which gets you to guess and learn all of the States in the US. And the

20803
00:00:40,950 --> 00:00:43,800
inspiration comes from a quiz on Sporcle

20804
00:00:44,130 --> 00:00:46,710
where it has a map of all the States,

20805
00:00:46,740 --> 00:00:49,590
it's all blank until you start guessing some States,

20806
00:00:49,890 --> 00:00:54,420
and then you keep going until you've managed to get all 50. Or like me,

20807
00:00:54,420 --> 00:00:56,400
you get stuck at 30 out of 50.

20808
00:00:56,730 --> 00:01:01,730
This game tests you on your knowledge of the names of the 50 States in the US.

20809
00:01:02,370 --> 00:01:06,930
So for example, if I go and add another state and I hit

20810
00:01:06,930 --> 00:01:07,763
OK,

20811
00:01:07,890 --> 00:01:12,120
then that name appears on the map at the location of the state.

20812
00:01:12,720 --> 00:01:17,720
The aim of the game is to remember all of the names of the states and to name as

20813
00:01:20,010 --> 00:01:21,600
many of them as you can.

20814
00:01:22,140 --> 00:01:25,980
So I managed to get to about only 30, um,

20815
00:01:26,070 --> 00:01:29,760
but I've never lived in the US so my knowledge just comes from watching TV

20816
00:01:29,760 --> 00:01:33,030
shows and general knowledge,

20817
00:01:33,390 --> 00:01:36,000
but if you're from the US then you're probably going to do a lot better than

20818
00:01:36,000 --> 00:01:36,660
me.

20819
00:01:36,660 --> 00:01:41,580
So this is an interactive and educational game that I think that you are going

20820
00:01:41,580 --> 00:01:45,600
to enjoy playing. So once you are ready, head over to the next lesson,

20821
00:01:45,720 --> 00:01:50,070
and let's get started learning about how to work with data files.


20822
00:00:00,180 --> 00:00:02,340
When I was really young, I remember 

20823
00:00:02,370 --> 00:00:06,420
a piece of homework that I had to do for Geography in school.

20824
00:00:06,510 --> 00:00:11,340
And the teacher asked us to basically watch the weather report every single day

20825
00:00:11,400 --> 00:00:14,550
on the news and note down what was the temperature,

20826
00:00:14,880 --> 00:00:17,280
what was the weather condition of that day.

20827
00:00:17,640 --> 00:00:20,910
And then we would end up with the weather condition and temperature for the

20828
00:00:20,910 --> 00:00:23,460
previous week. Now at the time,

20829
00:00:23,460 --> 00:00:27,930
it was the point in time where a lot of teachers didn't actually really know what

20830
00:00:27,930 --> 00:00:30,510
the internet did. So, um,

20831
00:00:30,810 --> 00:00:35,550
I realized that I could actually just wait until the day before I have to give

20832
00:00:35,550 --> 00:00:37,920
the homework in, go onto the internet,

20833
00:00:37,980 --> 00:00:40,380
find the weather conditions for the previous seven days

20834
00:00:40,500 --> 00:00:43,980
and then write it out instead of having to watch the weather forecast every

20835
00:00:43,980 --> 00:00:46,770
single day. So I don't know what that says about me,

20836
00:00:46,800 --> 00:00:51,800
but if you are somebody who enjoys taking shortcuts in life and refuse to do

20837
00:00:52,410 --> 00:00:56,760
work that can be done by computers, then you are in the right place.

20838
00:00:56,910 --> 00:00:59,310
Learning Python is definitely the way to go.

20839
00:01:00,510 --> 00:01:02,730
So inside Google sheets

20840
00:01:02,760 --> 00:01:06,420
which you can access by going to sheets.google.com,

20841
00:01:06,930 --> 00:01:11,930
I have created a new spreadsheet of the days of the week and the temperature of

20842
00:01:13,140 --> 00:01:18,120
each of those days in Celsius and also the weather condition on those days.

20843
00:01:18,630 --> 00:01:22,560
This is a replica of that homework from many, many moons ago,

20844
00:01:23,040 --> 00:01:28,040
but we're going to be working with this data to learn how we can read data files

20845
00:01:28,290 --> 00:01:31,350
and then analyze them and how we can do lots of things with it.

20846
00:01:31,860 --> 00:01:36,330
So the first thing I want you to do is the head over to the link in the course

20847
00:01:36,330 --> 00:01:39,090
resources which will take you to this spreadsheet.

20848
00:01:39,570 --> 00:01:43,320
And then once you've got it open, then go to file download

20849
00:01:43,410 --> 00:01:48,410
and I want you to download it in the comma separated values or CSV format.

20850
00:01:51,210 --> 00:01:53,970
And you should end up with a file like this.

20851
00:01:54,540 --> 00:01:59,540
Now I want you to rename this file so that it's just weather_data.csv

20852
00:01:59,700 --> 00:02:04,260
, and then I've want you to create a new PyCharm project

20853
00:02:04,410 --> 00:02:06,120
which you can call anything you want.

20854
00:02:06,180 --> 00:02:10,169
I've called it day 25. And also create your main.py.

20855
00:02:10,860 --> 00:02:15,860
Now I'm going to drag my weather_data.csv into my folder day-25 and click

20856
00:02:16,980 --> 00:02:21,570
refactor to move that file into my project folder. Now,

20857
00:02:21,600 --> 00:02:22,433
at this point,

20858
00:02:22,440 --> 00:02:27,440
PyCharm recognizes that this is a CSV file and it asks you whether if you want to

20859
00:02:27,750 --> 00:02:32,550
install some plugins to make it easier to view this file. Now,

20860
00:02:32,550 --> 00:02:33,060
at this point,

20861
00:02:33,060 --> 00:02:38,060
you can click cancel because we want to view the data as the raw data,

20862
00:02:38,700 --> 00:02:41,880
which is in this CSV format. Now,

20863
00:02:41,910 --> 00:02:46,710
CSVs are a very common way of representing tabula data,

20864
00:02:46,710 --> 00:02:51,710
so data that fits into tables like a spreadsheet. And CSV,

20865
00:02:51,900 --> 00:02:55,260
as you've already seen stands for comma separated values.

20866
00:02:56,250 --> 00:02:58,050
So that's why when you look at the data,

20867
00:02:58,080 --> 00:03:03,080
you can see each row here is a single set of data and each piece of data is

20868
00:03:06,100 --> 00:03:08,830
separated by a comma without space.

20869
00:03:09,610 --> 00:03:13,060
So we've seen how we can open files, read files, write

20870
00:03:13,060 --> 00:03:15,070
to files. As a challenge,

20871
00:03:15,100 --> 00:03:20,100
I want you to go ahead and open up this weather_data.csv file inside your

20872
00:03:20,560 --> 00:03:25,560
main.py and add each line of data into a list which we'll call data.

20873
00:03:28,870 --> 00:03:30,580
Pause the video and give that a go.

20874
00:03:30,630 --> 00:03:31,463
Okay.

20875
00:03:33,390 --> 00:03:36,360
All right. So we know that we're going to need to open the file.

20876
00:03:36,660 --> 00:03:40,710
So it's stored inside the same folder as our day-25.

20877
00:03:40,770 --> 00:03:45,770
So we can just use a relative file path to tap into this weather_data.csv.

20878
00:03:46,890 --> 00:03:50,070
And we're going to save this data as a data_file.

20879
00:03:51,600 --> 00:03:55,290
And then we're going to get the data by reading this data file.

20880
00:03:55,620 --> 00:03:58,830
So data = data_file.read.

20881
00:03:59,280 --> 00:04:02,850
And not only are we going to read it, we're going to use readlines

20882
00:04:02,880 --> 00:04:07,880
which we know will take each line in this file and turn it into an item in a

20883
00:04:09,150 --> 00:04:12,450
list. Now, if I go ahead and print my data,

20884
00:04:16,170 --> 00:04:21,170
then you can see I've got this list now where each item is a row in that list.

20885
00:04:23,130 --> 00:04:27,030
But as you can imagine, it would be pretty painful to work with the data,

20886
00:04:27,300 --> 00:04:29,400
which is all in a string format.

20887
00:04:29,460 --> 00:04:32,400
And they are still separated by commas.

20888
00:04:32,730 --> 00:04:36,930
It would take a lot of cleaning to actually be able to extract each column and

20889
00:04:36,930 --> 00:04:41,760
each row. So what can we do instead? Well,

20890
00:04:41,760 --> 00:04:46,760
there's actually a inbuilt library that helps us with CSVs because Python is a

20891
00:04:48,000 --> 00:04:52,290
language that's used really heavily for data processing, data analysis.

20892
00:04:52,590 --> 00:04:56,700
There's a lot of great tools for working with tabula data,

20893
00:04:56,910 --> 00:05:01,320
like our weather data. First, we're going to import the CSV library,

20894
00:05:01,740 --> 00:05:04,440
and then we're going to, again, open up a file,

20895
00:05:04,530 --> 00:05:07,740
weather_data.csv as our data file,

20896
00:05:08,550 --> 00:05:11,670
and then we're going to use this CSV library.

20897
00:05:12,210 --> 00:05:14,850
And it has a method called reader,

20898
00:05:15,450 --> 00:05:19,380
which takes the file in question, which has already been opened

20899
00:05:19,410 --> 00:05:24,410
so this is going to be all data_file, and it can read it an output

20900
00:05:24,480 --> 00:05:25,313
the data.

20901
00:05:25,710 --> 00:05:29,550
So now let's go ahead and print this data and let's see what we've got.

20902
00:05:30,420 --> 00:05:33,720
You can see that it's created a CSV reader

20903
00:05:33,750 --> 00:05:37,560
object. This object can be looped through.

20904
00:05:37,920 --> 00:05:42,120
So if we wanted to get each row inside this data,

20905
00:05:42,120 --> 00:05:44,790
we can say for row in data,

20906
00:05:45,090 --> 00:05:49,860
go ahead and print each row. And once you've done that,

20907
00:05:49,890 --> 00:05:54,540
you can see it's taken each of the rows inside our weather_data.csv,

20908
00:05:55,050 --> 00:06:00,050
and separated out each item into a single value.

20909
00:06:00,770 --> 00:06:03,980
So for example, on the Monday row,

20910
00:06:04,010 --> 00:06:06,740
we've got the Monday as a string,

20911
00:06:06,740 --> 00:06:10,850
we've got the temperature as a string and also the condition as a string.

20912
00:06:11,150 --> 00:06:14,660
So now it's much easier for us to work with this data.

20913
00:06:15,680 --> 00:06:18,320
Using what you know about Python lists

20914
00:06:18,590 --> 00:06:22,790
I want you to create a new list called temperatures,

20915
00:06:23,360 --> 00:06:28,360
and this list is going to contain all of the temperatures that is inside this

20916
00:06:29,060 --> 00:06:32,990
weather_data.csv, like this 12 degrees, 14, 15,

20917
00:06:33,350 --> 00:06:36,140
and it's going to be in the format of an integer.

20918
00:06:36,200 --> 00:06:40,040
I don't want to see it as a string with quotation marks around.

20919
00:06:40,370 --> 00:06:43,460
It should be a pure number so that we can work with it more easily.

20920
00:06:44,090 --> 00:06:45,890
So this is your challenge.

20921
00:06:46,190 --> 00:06:50,390
Pause the video and see if you can extract all of the temperatures from this

20922
00:06:50,390 --> 00:06:52,430
file into this new list.

20923
00:06:52,630 --> 00:06:53,463
Okay.

20924
00:06:55,600 --> 00:06:58,660
All right. So when we printed out each of the rows,

20925
00:06:58,720 --> 00:07:03,720
we can see that we've created several lists where each list contains an entire

20926
00:07:04,840 --> 00:07:07,600
row of data from our weather data CSV.

20927
00:07:08,260 --> 00:07:10,840
If we wanted to get the temperature,

20928
00:07:10,930 --> 00:07:15,730
then it's going to be the item at index one in that list. For example,

20929
00:07:15,730 --> 00:07:18,970
if we wanted to get the Monday temperature,

20930
00:07:19,300 --> 00:07:24,300
then all we have to do is to tap into each of these rows and get the item at

20931
00:07:24,520 --> 00:07:27,670
index 1. If I go ahead and print this,

20932
00:07:27,700 --> 00:07:30,730
then you can see we get all of the temperatures,

20933
00:07:31,090 --> 00:07:33,550
but also the label for that column.

20934
00:07:34,090 --> 00:07:36,730
So if we want to exclude that label,

20935
00:07:36,760 --> 00:07:41,760
then all we have to do is use an if statement and check if row at index one

20936
00:07:43,090 --> 00:07:47,320
does not equal temp, which is the name of that column label,

20937
00:07:47,740 --> 00:07:52,740
then we're going to tap into our list of temperatures and append this row at

20938
00:07:53,410 --> 00:07:56,410
index one, which is going to be a temperature number.

20939
00:07:57,040 --> 00:07:59,980
So now after we've done the entire for loop,

20940
00:08:00,010 --> 00:08:04,480
then we can print out our list of temperatures. And if you take a look,

20941
00:08:04,510 --> 00:08:07,030
you can see we've now got a list of all the temperatures

20942
00:08:07,300 --> 00:08:12,130
excluding that column title, but they are all in the format of strings.

20943
00:08:12,550 --> 00:08:15,130
So if we want to convert that into an integer,

20944
00:08:15,370 --> 00:08:18,580
then all we have to do is wrap that around an int.

20945
00:08:19,900 --> 00:08:23,530
So that's the goal of the challenge. Now you can of course,

20946
00:08:23,530 --> 00:08:26,320
separate out this line into many more lines,

20947
00:08:26,620 --> 00:08:31,620
but I think this should make enough sense for you at this stage. While CSV is the

20948
00:08:32,710 --> 00:08:36,580
inbuilt CSV reading and writing library,

20949
00:08:37,210 --> 00:08:42,210
notice how much faff was involved in just simply getting a single column of

20950
00:08:43,059 --> 00:08:47,500
data. What are we going to do if we have more data,

20951
00:08:47,500 --> 00:08:50,920
more complex data with way more columns, way more rows and

20952
00:08:51,140 --> 00:08:53,440
we want to do more interesting things with it?

20953
00:08:53,920 --> 00:08:56,460
This is going to be quite painful to work with.

20954
00:08:57,060 --> 00:09:00,840
This is the point where we want to get the help of some pandas.

20955
00:09:01,170 --> 00:09:03,750
Not these kinds of pandas. As cute as they are

20956
00:09:03,750 --> 00:09:06,300
they're not going to help us with our data analysis.

20957
00:09:06,630 --> 00:09:11,630
But instead, I'm talking about the Pandas library and this is a Python data

20958
00:09:12,780 --> 00:09:14,190
analysis library

20959
00:09:14,520 --> 00:09:19,520
which is super helpful and super powerful to perform data analysis on tabula

20960
00:09:21,090 --> 00:09:25,410
data like the one that we have. In order to work with it,

20961
00:09:25,440 --> 00:09:30,000
we have to import this library. But because it's not in built,

20962
00:09:30,060 --> 00:09:32,700
you'll need to install it into your project.

20963
00:09:33,090 --> 00:09:36,870
So the shortcut way of this is simply just a type import pandas

20964
00:09:36,960 --> 00:09:38,400
and then once you see the red line,

20965
00:09:38,700 --> 00:09:42,840
go ahead and hover over it and then click install package pandas,

20966
00:09:43,020 --> 00:09:47,250
and then you can watch the progress down here. Now, while that's installing,

20967
00:09:47,310 --> 00:09:50,940
I want to quickly introduce you to the documentation for this library.

20968
00:09:51,240 --> 00:09:54,690
It's really well documented and it's really powerful,

20969
00:09:54,690 --> 00:09:58,470
so it has a lot of things in the documentation. If you head over

20970
00:09:58,470 --> 00:10:02,970
to pandas.pydata.org and then click on documentation,

20971
00:10:03,300 --> 00:10:06,360
then you will be able to see all the things that you can do with it.

20972
00:10:06,780 --> 00:10:08,730
So there's a API reference,

20973
00:10:08,730 --> 00:10:13,730
there's a quick getting started guide as well as a user guide on the key

20974
00:10:13,770 --> 00:10:18,770
concepts of pandas. When you're using a new library of any sort, a good idea is

20975
00:10:20,490 --> 00:10:23,700
to take a look at their getting started guide if they have one,

20976
00:10:24,060 --> 00:10:28,530
because it tells you how you can install it and a number of questions that you

20977
00:10:28,530 --> 00:10:29,790
might have, for example,

20978
00:10:29,790 --> 00:10:34,790
what kind of data does pandas handle or how can I read and write tabula data.

20979
00:10:35,100 --> 00:10:38,100
And it's actually done really, really well. So if you have a moment,

20980
00:10:38,220 --> 00:10:43,080
take a quick look at this page. And once you head back to PyCharm,

20981
00:10:43,140 --> 00:10:46,800
your packages should have installed successfully. Now,

20982
00:10:46,800 --> 00:10:48,840
once we've installed our pandas,

20983
00:10:48,930 --> 00:10:51,960
you'll see that it's still grey because we're not using it yet.

20984
00:10:52,470 --> 00:10:57,150
If we want to use pandas, all we have to do is say pandas.

20985
00:10:57,900 --> 00:11:00,840
and in our case, we actually want to read our CSV.

20986
00:11:01,320 --> 00:11:03,480
So we can say read_csv

20987
00:11:04,050 --> 00:11:08,550
and inside this method, you can do lots and lots of things,

20988
00:11:08,610 --> 00:11:13,140
as you can see by all of the attribute names. But most of these are optional.

20989
00:11:13,560 --> 00:11:18,270
The only one that is not optional is the path that leads to the CSV file.

20990
00:11:18,750 --> 00:11:22,440
So if we get hold of our weather_data.csv,

20991
00:11:22,800 --> 00:11:25,860
then we can read that CSV using pandas.

20992
00:11:26,160 --> 00:11:29,940
So notice how we don't have to open the file as a data file,

20993
00:11:30,150 --> 00:11:34,350
or you use a CSV reader, it's one step and you're done.

20994
00:11:34,800 --> 00:11:39,060
So now we've got hold of our data and if I print out the data,

20995
00:11:39,090 --> 00:11:42,570
you can see how beautifully formatted it is.

20996
00:11:43,110 --> 00:11:45,930
It's being printed out as an actual table,

20997
00:11:45,960 --> 00:11:50,790
it's got the column headings on top of each of the columns and each of the rows

20998
00:11:50,790 --> 00:11:55,600
gets given an index so that we can more easily identify how many records we have

20999
00:11:55,900 --> 00:11:57,220
and where each one is.

21000
00:11:58,390 --> 00:12:01,840
If we wanted to think about that previous task that we tried to do

21001
00:12:01,840 --> 00:12:06,840
where we just try to get hold of a single column of data from this table,

21002
00:12:08,830 --> 00:12:10,240
then using pandas,

21003
00:12:10,330 --> 00:12:14,950
it is literally as easy as saying data and then square brackets,

21004
00:12:15,070 --> 00:12:19,750
and then the name of that column. So in our case, it's temp.

21005
00:12:20,860 --> 00:12:23,620
And now if I go ahead and print this out,

21006
00:12:24,640 --> 00:12:29,640
you can see it's basically already identified the column and it's printed out

21007
00:12:29,890 --> 00:12:31,720
all of the data in that column.

21008
00:12:32,140 --> 00:12:34,720
So the really smart thing that Panda's doing here is

21009
00:12:34,760 --> 00:12:39,700
it takes that first row to be the names of each column

21010
00:12:40,120 --> 00:12:43,480
and it automatically knows how to find the data

21011
00:12:43,750 --> 00:12:47,380
when you just specify the name of the column like this.

21012
00:12:48,280 --> 00:12:51,220
So three lines versus eight lines,

21013
00:12:51,730 --> 00:12:56,110
and we get better formatting. It's no wonder that most Python developers,

21014
00:12:56,170 --> 00:12:58,240
as soon as they encounter a CSV fault,

21015
00:12:58,270 --> 00:13:00,910
they will start using pandas to work with it

21016
00:13:01,210 --> 00:13:03,970
no matter how simple the task or project.

21017
00:13:04,300 --> 00:13:07,660
So that was a quick introduction to CSV data,

21018
00:13:08,020 --> 00:13:13,020
working with CSV data and how to get started using pandas. In the next lesson,

21019
00:13:14,080 --> 00:13:18,100
we're going to dive deeper into this library and see all of the common things that

21020
00:13:18,100 --> 00:13:19,300
we can do with pandas.


21021
00:00:00,480 --> 00:00:03,420
In the last lesson we got started using pandas.

21022
00:00:03,540 --> 00:00:07,890
We installed the library and we imported it to read a CSV file.

21023
00:00:08,370 --> 00:00:11,610
And then we use that file to get hold of a column

21024
00:00:11,910 --> 00:00:16,500
which has been automatically identified as soon as it read this data CSV.

21025
00:00:17,130 --> 00:00:20,460
So what exactly are we dealing with here? Well,

21026
00:00:20,460 --> 00:00:25,460
one of the most useful things I find is to do type checks on any of the objects

21027
00:00:25,920 --> 00:00:30,150
that I'm working with from a new novel library. For example,

21028
00:00:30,150 --> 00:00:32,369
we can use the type method to check

21029
00:00:32,430 --> 00:00:37,430
what exactly is the data type of this data that we're getting back from pandas.

21030
00:00:38,040 --> 00:00:43,040
So if I go ahead and print this one and comment out the second line,

21031
00:00:43,740 --> 00:00:48,240
then you can see what we're getting is what's called a pandas data frame

21032
00:00:48,270 --> 00:00:50,640
object. In the package overview

21033
00:00:50,670 --> 00:00:55,670
they talk about the two primary data structures of pandas: series and a data

21034
00:00:56,910 --> 00:00:57,743
frame.

21035
00:00:57,840 --> 00:01:02,010
A data frame is kind of the equivalent of your whole table here.

21036
00:01:02,460 --> 00:01:07,260
So every single sheet inside an Excel file or inside a Google sheet file would

21037
00:01:07,260 --> 00:01:10,020
be considered a data frame in pandas.

21038
00:01:11,010 --> 00:01:15,240
Now what about the second part here where we've gotten hold of one of the

21039
00:01:15,240 --> 00:01:17,160
columns in our data frame.

21040
00:01:17,520 --> 00:01:21,870
If I do a type check on this object and I hit run,

21041
00:01:22,140 --> 00:01:25,290
then you can see this is a pandas series

21042
00:01:25,320 --> 00:01:30,320
object. The series is the other super important concept in pandas.

21043
00:01:31,800 --> 00:01:36,800
And the series is basically equivalent to a list. It's kind of like a single

21044
00:01:37,500 --> 00:01:39,660
column in your table.

21045
00:01:39,990 --> 00:01:42,930
So the temperature column would be a series,

21046
00:01:43,140 --> 00:01:47,250
the condition column would be a series and the day column would also be a

21047
00:01:47,250 --> 00:01:48,810
series. So once you've

21048
00:01:48,810 --> 00:01:53,810
grasped this idea that the whole table is basically a data frame in pandas and

21049
00:01:54,720 --> 00:01:59,610
every single column is a series kind of like a list in pandas,

21050
00:01:59,820 --> 00:02:03,720
then you're pretty much half of the way there to understanding how this library

21051
00:02:03,720 --> 00:02:07,800
works. Now, if we go over to the API reference,

21052
00:02:07,890 --> 00:02:12,780
you can see that this is basically a list of all of the things that you can do

21053
00:02:12,810 --> 00:02:16,890
with pandas. And it is a long list of things,

21054
00:02:17,190 --> 00:02:20,460
but let's take a look at those two core classes,

21055
00:02:20,490 --> 00:02:24,210
the data frame and the series. So if you go to the data frame,

21056
00:02:24,390 --> 00:02:28,350
you can see that it has things on how to construct a new data frame,

21057
00:02:28,650 --> 00:02:30,120
how to get hold of the index,

21058
00:02:30,120 --> 00:02:35,120
how to get hold of the column labels and this whole bunch of attributes that you

21059
00:02:35,310 --> 00:02:39,660
can tap into as well as many methods. For example,

21060
00:02:39,660 --> 00:02:43,980
if we take a look at this section on serialization IO conversion,

21061
00:02:44,280 --> 00:02:49,050
you can see that you can actually convert a data frame to various different file

21062
00:02:49,050 --> 00:02:53,970
types. You can convert it to an Excel file, you can convert it to HTML,

21063
00:02:53,970 --> 00:02:57,960
you can also convert it to a dictionary. So if you click on this,

21064
00:02:57,960 --> 00:03:02,960
this takes us to actual documentation on how you would use this method.

21065
00:03:03,700 --> 00:03:08,590
And if you look at the basic Python documentation versus Panda's documentation,

21066
00:03:08,620 --> 00:03:10,630
you'll see why this is so much better.

21067
00:03:10,960 --> 00:03:14,260
It lists out all of the possible parameters,

21068
00:03:14,740 --> 00:03:17,950
it gives you examples on how you can use each of the methods,

21069
00:03:18,340 --> 00:03:22,360
and it's also got some related methods that it thinks that you might want to

21070
00:03:22,360 --> 00:03:26,650
take a look at. So let's use this method

21071
00:03:26,860 --> 00:03:31,860
and what we're going to do is I'm going to get my data and I'm going to call to_

21072
00:03:32,140 --> 00:03:35,320
dict, which is going to convert it into a dictionary.

21073
00:03:35,350 --> 00:03:39,070
So it let's call that data_dict equals data.to_dict.

21074
00:03:39,160 --> 00:03:42,400
And then if we print out our new data dictionary,

21075
00:03:42,790 --> 00:03:47,790
you can see that pandas has taken our table and taken each column of the table

21076
00:03:48,970 --> 00:03:53,350
to create a separate dictionary for each of the columns.

21077
00:03:53,590 --> 00:03:56,440
So we've got day, temperature and condition,

21078
00:03:56,860 --> 00:04:00,760
and we can now work with this as if it were a real dictionary.

21079
00:04:01,900 --> 00:04:02,170
Now,

21080
00:04:02,170 --> 00:04:07,170
if we take a look at the series data type and you take a look at the conversion

21081
00:04:08,680 --> 00:04:11,440
section for this type of data,

21082
00:04:11,740 --> 00:04:16,240
then you can see that you can actually convert each of the series to a list

21083
00:04:16,510 --> 00:04:20,170
if you want to be able to work with it just as you would with any other list.

21084
00:04:21,339 --> 00:04:26,340
So we saw that we can get our data and then get the temperature column.

21085
00:04:27,160 --> 00:04:30,070
And this, when we printed out the type, was a series.

21086
00:04:30,520 --> 00:04:34,360
So we can get this series and then a call to_list,

21087
00:04:34,990 --> 00:04:39,040
and this will turn this data series into a Python list.

21088
00:04:39,190 --> 00:04:43,840
So let's call that temp_list and let's go ahead and print it out.

21089
00:04:46,710 --> 00:04:47,280
Okay.

21090
00:04:47,280 --> 00:04:49,530
It would be a list of all the temperatures

21091
00:04:49,710 --> 00:04:54,060
and this is now converted into the raw Python data type.

21092
00:04:54,540 --> 00:04:57,810
So we can do all of the things that we can do to a Python list

21093
00:04:57,930 --> 00:05:00,270
like for example, we could check its length.

21094
00:05:01,200 --> 00:05:06,060
So here comes another challenge for you. Given what we've spoken about so far,

21095
00:05:06,420 --> 00:05:11,420
can you figure out if you can work out the average temperature in our column of

21096
00:05:11,430 --> 00:05:14,490
temperatures? So remember you can always Google

21097
00:05:14,520 --> 00:05:17,700
if you don't remember how to calculate the average of something.

21098
00:05:18,060 --> 00:05:19,980
So pause the video and give that a go.

21099
00:05:21,960 --> 00:05:22,430
Yeah,

21100
00:05:22,430 --> 00:05:22,740
All right.

21101
00:05:22,740 --> 00:05:27,740
So we know that we can get a list of all of the temperatures in that list,

21102
00:05:28,740 --> 00:05:32,220
and we know that Python has a built-in method called sum,

21103
00:05:32,610 --> 00:05:36,510
so then we can get the sum of all of the temperatures in our list of

21104
00:05:36,510 --> 00:05:37,343
temperatures

21105
00:05:37,530 --> 00:05:42,000
and then we can divide it by the length of the temp_list.

21106
00:05:43,080 --> 00:05:46,050
The sum of all the values divided by the number of values

21107
00:05:46,080 --> 00:05:49,710
gives us the average, which is also known as the mean,

21108
00:05:50,070 --> 00:05:51,960
and so if we print this out,

21109
00:05:52,890 --> 00:05:57,890
then you can see the average temperature over the week was 17.4. Now an

21110
00:05:59,390 --> 00:06:04,250
alternative way of solving this challenge is maybe you took a look through this

21111
00:06:04,280 --> 00:06:09,280
list of methods and you might have come across some of the computations and

21112
00:06:09,740 --> 00:06:14,510
statistics that you can do with your series in pandas. Now,

21113
00:06:14,510 --> 00:06:16,550
one of those methods is the mean.

21114
00:06:16,700 --> 00:06:21,700
So you can actually get rid of all of this excess work and take our data series,

21115
00:06:21,860 --> 00:06:26,860
which has basically the column of data under the heading temp, and simply call

21116
00:06:27,530 --> 00:06:31,400
.mean on it. And now if I print this out,

21117
00:06:32,570 --> 00:06:35,360
you'll see it's the same result as before

21118
00:06:35,600 --> 00:06:37,580
without a lot of the extra work.

21119
00:06:38,630 --> 00:06:43,430
In addition to the mean you can get other things like the median or the mode and

21120
00:06:43,430 --> 00:06:47,540
a whole bunch of other things just by calling the right method on the data

21121
00:06:47,540 --> 00:06:50,750
series. So here's a challenge for you.

21122
00:06:51,110 --> 00:06:55,850
I want you to get hold of the maximum value from this column of temperatures

21123
00:06:56,150 --> 00:06:59,930
by using one of the data series methods. Pause the video,

21124
00:07:00,020 --> 00:07:03,680
have a look of the documentation and see if you can complete this challenge.

21125
00:07:06,110 --> 00:07:08,060
All right, to get the maximum value

21126
00:07:08,180 --> 00:07:10,700
we're probably going to need this max method.

21127
00:07:11,120 --> 00:07:14,330
So we call this method in the same way as we did before

21128
00:07:14,630 --> 00:07:17,510
which is get hold of the data series,

21129
00:07:17,600 --> 00:07:20,060
so our entire table is stored in data.

21130
00:07:20,600 --> 00:07:25,600
And then we can get the column under the heading temperature, so this is now a

21131
00:07:25,640 --> 00:07:29,840
data series, and then we can call that method max on it.

21132
00:07:30,290 --> 00:07:31,610
And if we print it out,

21133
00:07:31,700 --> 00:07:35,360
then you can see what we're getting is 24.

21134
00:07:35,540 --> 00:07:38,060
So the highest temperature was 24.

21135
00:07:39,740 --> 00:07:41,960
So you've seen that when we're working with pandas,

21136
00:07:42,080 --> 00:07:46,220
it's really easy to get hold of data in a particular column.

21137
00:07:46,610 --> 00:07:48,860
All we have to do is just take the data frame,

21138
00:07:48,890 --> 00:07:53,480
use a set of square brackets and then specify the name of the column,

21139
00:07:53,870 --> 00:07:58,130
which it takes by default as the first row of the data.

21140
00:07:58,640 --> 00:08:02,180
So the day column, the temp, the condition.

21141
00:08:02,450 --> 00:08:05,720
So if I wanted to get hold of all of the conditions,

21142
00:08:05,750 --> 00:08:08,120
then I would say data condition.

21143
00:08:08,510 --> 00:08:10,880
And if I go ahead and print this out,

21144
00:08:12,050 --> 00:08:16,820
you can see it gets hold of all of the weather conditions and select that column

21145
00:08:16,880 --> 00:08:17,713
to print out.

21146
00:08:18,530 --> 00:08:23,150
Now an alternative way to using the square bracket notation

21147
00:08:23,360 --> 00:08:27,290
where you have to be careful about the string you use here. It has the match

21148
00:08:27,320 --> 00:08:29,630
the name of the column, exactly.

21149
00:08:30,470 --> 00:08:35,470
Another way that you can work with the columns is simply by calling data.

21150
00:08:36,440 --> 00:08:40,039
condition. And the fact that this code is valid at all

21151
00:08:40,280 --> 00:08:45,280
means that pandas, behind the scenes, has taken each of these columns and each

21152
00:08:46,370 --> 00:08:50,150
of the headings and converted those headings into attributes.

21153
00:08:50,330 --> 00:08:55,040
So we can say data.condition or data.day. And if I print that out,

21154
00:08:55,080 --> 00:09:00,080
you can see it's actually going to be exactly the same as doing it like this.

21155
00:09:02,190 --> 00:09:06,810
So it's up to you which method you want to use to select the columns,

21156
00:09:07,170 --> 00:09:11,550
but be aware that if your column name has a capital 'C'

21157
00:09:11,550 --> 00:09:16,290
for example here, then your key has to be a capital C

21158
00:09:16,650 --> 00:09:21,650
and also your attribute has to be a capital C. So effectively when your using a

21159
00:09:22,080 --> 00:09:23,310
data frame like this,

21160
00:09:23,580 --> 00:09:27,510
it's almost like you're treating it as a dictionary and you are pulling out each

21161
00:09:27,510 --> 00:09:31,860
column by the key. Now, when you're using the data frame like this,

21162
00:09:31,860 --> 00:09:33,960
then you're kind of treating it more like an object.

21163
00:09:33,990 --> 00:09:38,490
You were saying data.attribute and you get a hold of the data in that

21164
00:09:38,490 --> 00:09:39,323
column.

21165
00:09:39,630 --> 00:09:44,430
So I'm going to restore everything to lowercase because I find it easier to read

21166
00:09:44,430 --> 00:09:48,300
the code. But the next thing I want to show you is a little bit harder,

21167
00:09:48,330 --> 00:09:52,650
which is how do you get data, which are in the rows of our data frame.

21168
00:09:53,160 --> 00:09:58,160
If I wanted to get hold of the entire row of data for where the day is equal to

21169
00:09:59,670 --> 00:10:03,840
Monday, then the way that I would do that in pandas is firstly,

21170
00:10:03,900 --> 00:10:08,610
get a hold of my entire data table. And then inside of that data table,

21171
00:10:08,610 --> 00:10:11,550
get a hold of the column that I want to search through.

21172
00:10:12,060 --> 00:10:17,060
So I'm going to search through the day column, so I can use data.day or data

21173
00:10:17,640 --> 00:10:20,700
[day]. Both will work the same.

21174
00:10:21,480 --> 00:10:25,110
But once I've got the column, then I can say, well,

21175
00:10:25,140 --> 00:10:26,880
we're inside that column

21176
00:10:26,940 --> 00:10:31,940
I want to check for the row where the value is equal to Monday.

21177
00:10:33,570 --> 00:10:37,110
This is basically gonna return my row that I want.

21178
00:10:37,170 --> 00:10:41,700
So I'm going to print this out and I'm going to comment out all of the previous

21179
00:10:41,700 --> 00:10:45,510
code other than the place where we created our data frame,

21180
00:10:45,840 --> 00:10:50,820
and then I'm going to run my code. And you can see it's pulled out that correct

21181
00:10:50,880 --> 00:10:54,420
row were the day is equal to Monday,

21182
00:10:54,630 --> 00:10:57,660
and it's given me all of the rest of the data for that row.

21183
00:10:59,010 --> 00:11:00,330
So here's a challenge for you.

21184
00:11:00,330 --> 00:11:05,330
Can you figure out how to pull out the row of data from our weather data

21185
00:11:06,120 --> 00:11:08,850
where the temperature was at the maximum?

21186
00:11:09,210 --> 00:11:12,540
So which row of data had the highest temperature in the week.

21187
00:11:12,930 --> 00:11:14,580
Pause the video and give that a go.

21188
00:11:15,990 --> 00:11:20,160
So we know that we can get the maximum temperature in the temperature column

21189
00:11:20,430 --> 00:11:22,470
just by using this code.

21190
00:11:22,920 --> 00:11:27,090
Now you can either use this method where you say data["temp"]

21191
00:11:27,420 --> 00:11:31,140
or you can use the attribute .temp, which is the code that I prefer.

21192
00:11:31,260 --> 00:11:35,010
I don't like writing a lot of strings if I can avoid it. In this case,

21193
00:11:35,040 --> 00:11:40,040
we're checking to see which row inside our column of temperatures is equal to

21194
00:11:43,170 --> 00:11:44,640
the maximum temperature.

21195
00:11:45,420 --> 00:11:50,420
We would say data.temp == data.temp.max.

21196
00:11:51,930 --> 00:11:56,930
And then we're going to get our data and access the row that fits that criteria.

21197
00:11:58,330 --> 00:12:02,380
Now, if I print out this row then you can see

21198
00:12:02,380 --> 00:12:05,590
it was the row for Sunday where the temperature was 24

21199
00:12:05,650 --> 00:12:10,650
and the condition was sunny. Essentially when we get our data frame and then we

21200
00:12:11,530 --> 00:12:14,500
use some square brackets, and inside those square brackets

21201
00:12:14,530 --> 00:12:18,160
if we only put the name of our column, day, temp, or condition,

21202
00:12:18,370 --> 00:12:20,380
then we would get the entire column.

21203
00:12:20,950 --> 00:12:25,950
But if we fill to that column by a condition say when a particular column is

21204
00:12:27,190 --> 00:12:31,960
equal to a particular value, then we actually get hold of the row instead.

21205
00:12:32,590 --> 00:12:35,170
Now, once you've gotten hold of the data in the row,

21206
00:12:35,200 --> 00:12:40,200
you can actually go one step further because we know that the row contains lots

21207
00:12:40,450 --> 00:12:44,350
of data, right? What if we wanted that particular row's

21208
00:12:44,410 --> 00:12:48,190
temperature or that particular row;s condition? Well,

21209
00:12:48,190 --> 00:12:50,590
let's say that we create a variable called monday

21210
00:12:50,890 --> 00:12:54,880
which is equal to our data frame and then searching through that data frame

21211
00:12:55,120 --> 00:12:59,740
where the data.day is equal to Monday.

21212
00:13:00,460 --> 00:13:02,950
So now with this row, Monday,

21213
00:13:03,310 --> 00:13:08,310
we can then tap into the values under different columns by using the same kind

21214
00:13:09,070 --> 00:13:12,790
of way that we got data in the entire column over here.

21215
00:13:13,090 --> 00:13:16,000
So we can say monday.condition

21216
00:13:16,330 --> 00:13:21,280
and if I print this out and just comment these other bits,

21217
00:13:23,670 --> 00:13:23,910
Right,

21218
00:13:23,910 --> 00:13:28,470
then you can see that I get the actual condition for that particular day,

21219
00:13:28,500 --> 00:13:31,680
which happens to be sunny. Now here's a challenge.

21220
00:13:31,800 --> 00:13:34,800
I want you to get Monday's temperature,

21221
00:13:35,190 --> 00:13:37,620
but because my temperatures are in Celsius,

21222
00:13:37,980 --> 00:13:40,260
I want you to convert it into Fahrenheit.

21223
00:13:40,650 --> 00:13:43,800
So pause the video and see if you can complete that challenge.

21224
00:13:44,250 --> 00:13:45,083
Oh

21225
00:13:46,530 --> 00:13:46,830
All right.

21226
00:13:46,830 --> 00:13:51,830
We know we can get hold of Monday's temperature by saying monday.

21227
00:13:53,460 --> 00:13:56,040
and then the name of that column in the row

21228
00:13:56,400 --> 00:14:00,750
which happens to be temp temp. Now,

21229
00:14:00,750 --> 00:14:02,310
once we've got that temperature

21230
00:14:02,340 --> 00:14:07,340
we can convert it into a normal integer by wrapping the int around that value.

21231
00:14:10,200 --> 00:14:12,930
And then if we want to convert Celsius to Fahrenheit,

21232
00:14:13,260 --> 00:14:18,260
all we have to do is to multiply the Celsius by 9/5 and then add 32.

21233
00:14:21,030 --> 00:14:26,030
So it will be monday_temp multiplied by 9/5

21234
00:14:26,970 --> 00:14:29,100
and then add 32.

21235
00:14:29,130 --> 00:14:29,963
Right.

21236
00:14:36,240 --> 00:14:39,960
So monday_temp_F and then we can print this value out.

21237
00:14:42,420 --> 00:14:42,900
Right?

21238
00:14:42,900 --> 00:14:45,930
So now when I run it, we get 53.6.

21239
00:14:46,560 --> 00:14:50,610
And if I put Monday's temperature 12 into this Google converter,

21240
00:14:50,910 --> 00:14:53,420
I get the same value, 53.6.

21241
00:14:54,860 --> 00:14:59,860
Now the final thing I want to show you is how you create a data frame from scratch.

21242
00:15:02,380 --> 00:15:07,120
So in our case, we created our data frame by reading from our CSV file.

21243
00:15:07,420 --> 00:15:11,500
But what if you wanted to create a data frame just from some data that you're

21244
00:15:11,500 --> 00:15:16,450
generating in Python? Let's say that I have this dictionary of values

21245
00:15:16,450 --> 00:15:20,110
I've got some students and these are their names held on a list.

21246
00:15:20,440 --> 00:15:25,030
And then each of them has a score and the scores correspond to the student.

21247
00:15:25,030 --> 00:15:27,130
So 76 is Amy's score,

21248
00:15:27,130 --> 00:15:30,910
James scored 56 and Angela scored 65. Now,

21249
00:15:30,910 --> 00:15:34,540
how would we create a data frame from this dictionary?

21250
00:15:35,170 --> 00:15:36,250
It's really simple.

21251
00:15:36,490 --> 00:15:41,410
We call our pandas library and we get hold of the data frame class.

21252
00:15:41,740 --> 00:15:45,040
And then we initialize that class with some data.

21253
00:15:45,250 --> 00:15:49,390
And the data in our case is just going to be our data dictionary.

21254
00:15:49,990 --> 00:15:53,620
And now if I go ahead and save this as our data,

21255
00:15:54,070 --> 00:15:58,660
so I'm gonna comment out what we had previously and then print out this data.

21256
00:15:59,800 --> 00:16:04,450
Then you can see I've now created a table using the values from that dictionary.

21257
00:16:04,900 --> 00:16:09,340
Now we can go even further than this. When we've created a data frame,

21258
00:16:09,700 --> 00:16:14,700
we can actually get that data frame to be converted to a CSV file.

21259
00:16:15,460 --> 00:16:20,460
And this to_csv method takes only one required input

21260
00:16:20,770 --> 00:16:23,530
which is the path that you want to save this file.

21261
00:16:23,920 --> 00:16:26,800
So let's just create a new file, um,

21262
00:16:26,830 --> 00:16:30,400
which we'll call new_data.csv

21263
00:16:30,910 --> 00:16:34,210
and when I run this code, then watch over here

21264
00:16:34,300 --> 00:16:37,870
you see a new CSV file of being created from thin air

21265
00:16:38,230 --> 00:16:41,800
and all of our data has been added to that CSV file.

21266
00:16:43,300 --> 00:16:48,300
So we're just getting a glimpse into how powerful this Panda library can be

21267
00:16:49,180 --> 00:16:54,180
and we're only really using it to read CSV data and write CSV data

21268
00:16:55,330 --> 00:17:00,330
which is a common format that you'll see being manipulated using Python. In later

21269
00:17:01,120 --> 00:17:04,000
lessons we're going to dive deeper into data analysis

21270
00:17:04,030 --> 00:17:06,010
and we're going to be looking not only at pandas,

21271
00:17:06,040 --> 00:17:11,040
but we're also going to be looking at NumPy, Matplotlib, and other libraries that make

21272
00:17:11,290 --> 00:17:16,210
it easier for us to work with large chunks of data. In the next lesson,

21273
00:17:16,270 --> 00:17:20,349
we're going to be what we've learned to use by analyzing some squirrel

21274
00:17:20,619 --> 00:17:24,069
data from central park. So for all of that and more,

21275
00:17:24,220 --> 00:17:25,390
I'll see you on the next lesson.


21276
00:00:00,510 --> 00:00:04,950
Now that you've learned how to do the basics of data analysis with pandas,

21277
00:00:05,280 --> 00:00:08,250
it's time to put your knowledge to the test.

21278
00:00:08,700 --> 00:00:13,700
And we're going to be working with a really interesting data set. Back in 2018/

21279
00:00:13,950 --> 00:00:18,390
2019, a bunch of volunteers went into New York  central park

21280
00:00:18,450 --> 00:00:23,100
and they basically combed the entire park to find all of the squirrels.

21281
00:00:23,730 --> 00:00:28,680
So this resulted in a huge dataset of squirrels, squirrel numbers,

21282
00:00:28,680 --> 00:00:31,410
squirrel fur color and a whole bunch of other things.

21283
00:00:31,860 --> 00:00:36,860
And all of this data can be found on the New York city open data website

21284
00:00:37,020 --> 00:00:40,740
which we'll link to in the course resources. When you head over here,

21285
00:00:40,740 --> 00:00:44,130
you can take a look at all of the data that they collected.

21286
00:00:44,490 --> 00:00:48,540
If you take a look at all of the columns in this dataset and click show

21287
00:00:48,540 --> 00:00:52,770
all, you can see they've logged the location of each of the squirrels,

21288
00:00:53,010 --> 00:00:55,320
they gave each squirrel a unique ID,

21289
00:00:55,560 --> 00:00:59,730
they evaluated whether if the squirrel was an adult or a juvenile,

21290
00:01:00,030 --> 00:01:04,379
and they looked at what the primary fur color was. So it could be gray, cinnamon

21291
00:01:04,379 --> 00:01:07,860
which is red, or black. Now, if you scroll down

21292
00:01:07,860 --> 00:01:10,830
there's actually a really interesting visualization of this data,

21293
00:01:11,090 --> 00:01:13,130
where they've plotted all of this squirrels

21294
00:01:13,130 --> 00:01:15,800
onto a map of central park.

21295
00:01:16,220 --> 00:01:21,220
So you can take a look at the distribution of the squirrel population in central

21296
00:01:21,380 --> 00:01:21,680
park.

21297
00:01:21,680 --> 00:01:24,830
So you can see where the red squirrels are, where the gray ones are and where the

21298
00:01:24,830 --> 00:01:27,860
black ones are. So there's only three colors, really.

21299
00:01:28,040 --> 00:01:30,830
So what you're going to do is you're going to go to this website,

21300
00:01:30,860 --> 00:01:34,670
click on export and download the CSV data.

21301
00:01:35,780 --> 00:01:36,830
Now, once you do that,

21302
00:01:36,830 --> 00:01:41,830
you'll end up with a 2018 central park squirrel data like this.

21303
00:01:42,890 --> 00:01:47,890
Now you're going to pull that data into your day-25 project folder and click

21304
00:01:48,470 --> 00:01:49,770
re-factor to move it in.

21305
00:01:50,240 --> 00:01:55,130
And you can see that this is a lot bigger than what ever data we had before.

21306
00:01:55,430 --> 00:01:57,800
There's thousands of entries,

21307
00:01:57,860 --> 00:02:00,740
and it's actually real dedication that these volunteers went around

21308
00:02:00,740 --> 00:02:04,160
logging all of this data, observing all the squirrels.

21309
00:02:04,340 --> 00:02:07,040
It must've been a very tedious task.

21310
00:02:07,340 --> 00:02:09,740
But now that somebody else has carried out the hard part,

21311
00:02:10,039 --> 00:02:12,980
we can do some data analysis on that data.

21312
00:02:13,430 --> 00:02:18,020
So I want you to comment out everything that you've got so far in your day-25

21313
00:02:18,020 --> 00:02:18,853
project

21314
00:02:19,070 --> 00:02:24,070
and the goal is for you to use that data and use what you've learned about

21315
00:02:24,290 --> 00:02:25,123
pandas

21316
00:02:25,160 --> 00:02:30,160
to be able to create a CSV that's called squirrel_count that has a small table

21317
00:02:32,330 --> 00:02:36,050
which just contains the fur color, so there's only three fur colors,

21318
00:02:36,170 --> 00:02:40,580
and they are logged under the primary fur color column.

21319
00:02:41,090 --> 00:02:44,990
And it can either basically be gray, cinnamon

21320
00:02:45,020 --> 00:02:47,060
which is red, or black.

21321
00:02:47,090 --> 00:02:50,810
There's only three possible values in that column. Now,

21322
00:02:50,840 --> 00:02:55,460
what you're going to do is you are going to figure out how many gray squirrels

21323
00:02:55,460 --> 00:02:56,510
there are in total,

21324
00:02:56,540 --> 00:03:01,540
how many cinnamon ones and how many black ones based on that primary fur color

21325
00:03:02,020 --> 00:03:02,853
column.

21326
00:03:03,040 --> 00:03:07,330
And then you're gonna take that data and build a new data frame from it,

21327
00:03:07,660 --> 00:03:08,590
and using that,

21328
00:03:08,620 --> 00:03:13,620
create this final CSV using pandas. Now that you know what you need to do,

21329
00:03:14,260 --> 00:03:18,160
have a think about the problem and see if you can complete this challenge.

21330
00:03:18,400 --> 00:03:22,690
Pause the video now. All right.

21331
00:03:22,690 --> 00:03:25,870
If you've commented out the line where you've imported pandas,

21332
00:03:25,900 --> 00:03:27,760
then you'll obviously have to do that again.

21333
00:03:28,330 --> 00:03:32,320
So let's think about what we want to do. We want to isolate the column

21334
00:03:32,320 --> 00:03:36,190
which is the primary fur color. And if it helps you,

21335
00:03:36,190 --> 00:03:40,120
you can actually better visualize the data on this website where they've got a

21336
00:03:40,120 --> 00:03:44,740
table preview. So you can see that here is the primary fur color,

21337
00:03:44,800 --> 00:03:47,410
and you can see the colors that have been logged.

21338
00:03:48,130 --> 00:03:52,180
So our goal is to somehow get hold of this data series

21339
00:03:52,210 --> 00:03:56,170
which contains this entire column, figure out how many of them are gray,

21340
00:03:56,170 --> 00:04:01,060
how many of them are black and how many are cinnamon. How do we do this?

21341
00:04:01,150 --> 00:04:03,820
Well, firstly, let's get hold of our data.

21342
00:04:03,820 --> 00:04:08,820
So we're going to use our pandas.read_csv method.

21343
00:04:09,670 --> 00:04:14,650
And then we're going to direct it towards this 2018 central parks squirrel census

21344
00:04:14,650 --> 00:04:16,029
data. Now, if you want,

21345
00:04:16,029 --> 00:04:19,779
you can actually right-click refactor and rename it to something a little bit

21346
00:04:19,779 --> 00:04:23,890
shorter. But because I know that PyCharm will actually fill this in for me

21347
00:04:23,950 --> 00:04:25,720
as long as I start out with a string

21348
00:04:26,260 --> 00:04:28,840
and that that file is in the same folder,

21349
00:04:29,110 --> 00:04:33,460
it'll actually type it all out if I just hit enter, then it doesn't really matter.

21350
00:04:34,000 --> 00:04:34,780
But of course,

21351
00:04:34,780 --> 00:04:37,600
make sure that you don't have any typos in here if you're typing it out,

21352
00:04:37,870 --> 00:04:41,290
because otherwise when you hit run, you're going to get a whole bunch of error

21353
00:04:41,300 --> 00:04:43,000
text inside your console.

21354
00:04:43,870 --> 00:04:46,600
So once I've successfully read that CSV,

21355
00:04:46,630 --> 00:04:50,080
I've now got a dataframe. From that data frame,

21356
00:04:50,110 --> 00:04:53,980
I can get hold of the column that I'm interested in

21357
00:04:54,220 --> 00:04:56,530
which is called primary fur color. Now,

21358
00:04:56,530 --> 00:05:01,150
because it's got spaces, it's easier to access that data by using a square

21359
00:05:01,150 --> 00:05:04,900
bracket and then putting in the name of that column like this.

21360
00:05:04,990 --> 00:05:07,630
This is one of the methods that we showed you. Now,

21361
00:05:07,630 --> 00:05:09,790
once I've gotten hold of that column, well

21362
00:05:09,790 --> 00:05:14,080
the next thing I need to do is to find all of the rows in that column

21363
00:05:14,110 --> 00:05:17,470
where the data is equal to each of the colors.

21364
00:05:17,500 --> 00:05:20,980
So there was the color which is gray,

21365
00:05:20,980 --> 00:05:24,250
so gray not 'ey'.

21366
00:05:24,970 --> 00:05:28,600
And then once we've got hold of all the gray squirrels,

21367
00:05:28,870 --> 00:05:31,840
then we're going to pull that out from our data.

21368
00:05:32,440 --> 00:05:36,130
So now we should have a bunch of gray squirrels,

21369
00:05:36,580 --> 00:05:39,010
and it's probably a good idea to print them out

21370
00:05:39,040 --> 00:05:41,320
just to see if that actually worked.

21371
00:05:41,650 --> 00:05:45,280
And because I expect there'll be lots of rows with gray squirrels,

21372
00:05:45,490 --> 00:05:49,900
it makes sense to make it a plural, grey_squirrels. So now if I hit run,

21373
00:05:50,200 --> 00:05:55,200
you can see listed here are all of the rows where it contains a gray squirrel.

21374
00:05:57,260 --> 00:05:59,570
Now it redacted this table

21375
00:05:59,570 --> 00:06:03,710
so that it can actually display it in the console because we know that there's many,

21376
00:06:03,710 --> 00:06:05,900
many columns and there's many, many rows.

21377
00:06:06,140 --> 00:06:10,340
It's just showing you the first few rows and then the last few rows and also the

21378
00:06:10,340 --> 00:06:12,470
first few columns and the last few columns.

21379
00:06:12,890 --> 00:06:16,760
So we can be pretty sure that we've managed to get hold of all of the rows that

21380
00:06:16,760 --> 00:06:20,990
contain gray squirrels as their primary fur color. Now,

21381
00:06:20,990 --> 00:06:25,910
what if we wanted to know the gray squirrels count? Well,

21382
00:06:25,910 --> 00:06:30,910
we could use our length method because remember, once we get hold of the rows

21383
00:06:31,610 --> 00:06:35,000
it kind of gets treated a bit like a iterable,

21384
00:06:35,330 --> 00:06:40,330
like a list, and can use methods like length on this data.

21385
00:06:41,060 --> 00:06:44,330
So now if we print grey_squirrels_count,

21386
00:06:45,350 --> 00:06:50,350
you can see that we've got a total of 2,473 grey squirrels.

21387
00:06:51,620 --> 00:06:56,420
So now all I need to do is to repeat this process for the other colored

21388
00:06:56,420 --> 00:07:00,440
squirrels. So I'm going to call it a red squirrel, even though theoretically,

21389
00:07:00,470 --> 00:07:02,570
their fur color is cinnamon.

21390
00:07:02,990 --> 00:07:07,580
So I'm just going to copy and paste that in there in case I make any typos and

21391
00:07:07,580 --> 00:07:10,400
the final squirrel is the black squirrel.

21392
00:07:11,270 --> 00:07:13,910
So those are all three squirrel types,

21393
00:07:14,000 --> 00:07:17,240
and if I go ahead and print out all of these,

21394
00:07:17,510 --> 00:07:22,510
so the reds squirrel count, the black squirrel count and the gray squirrel count,

21395
00:07:23,390 --> 00:07:28,390
you can see that you got mostly grey squirrels, a few red ones and very

21396
00:07:28,610 --> 00:07:30,710
rarely do you actually see a black squirrel.

21397
00:07:30,920 --> 00:07:35,540
I certainly haven't seen one recently. Now that we've got our three values,

21398
00:07:35,570 --> 00:07:39,980
it's time to construct our data frame. So to construct our data frame,

21399
00:07:40,100 --> 00:07:43,640
the easiest way is to actually just create a dictionary.

21400
00:07:44,000 --> 00:07:48,470
So I'm going to create a data dictionary and this dictionary is going to have

21401
00:07:48,530 --> 00:07:50,450
two key-value pairs.

21402
00:07:50,630 --> 00:07:53,750
So the first key is going to be the fur color

21403
00:07:55,070 --> 00:07:59,690
and this is going to contain the three fur colors, which is, um,

21404
00:07:59,720 --> 00:08:04,400
gray, cinnamon or red, and black.

21405
00:08:05,210 --> 00:08:06,830
And then, um,

21406
00:08:06,890 --> 00:08:10,760
the next key value pair is going to be the count.

21407
00:08:11,420 --> 00:08:15,830
So now we can create a list where the first value is going to be the gray squirrel 

21408
00:08:15,830 --> 00:08:19,520
count, next is going to be the red squirrel count and finally,

21409
00:08:19,520 --> 00:08:24,050
it's going to be the black squirrel count. So now that we've got our dictionary

21410
00:08:24,320 --> 00:08:26,750
and this is what it looks like,

21411
00:08:27,500 --> 00:08:31,700
then we can go ahead and actually turn this into a data frame.

21412
00:08:32,090 --> 00:08:32,929
So to do that,

21413
00:08:32,929 --> 00:08:37,220
we need to get hold of the pandas and then get hold of the data frame class,

21414
00:08:37,580 --> 00:08:41,120
and then initialize it using this data dictionary.

21415
00:08:41,570 --> 00:08:44,300
So I'm going to save that as df, df for data frame.

21416
00:08:44,780 --> 00:08:48,860
And then the final thing I need to do is to get my df

21417
00:08:48,920 --> 00:08:51,620
to convert to a CSV.

21418
00:08:52,190 --> 00:08:54,530
So now I get to specify the name of the file,

21419
00:08:54,530 --> 00:08:59,250
which I will call squirrel_count.csv

21420
00:08:59,730 --> 00:09:03,540
and once I hit run, you'll see that new file show up right here

21421
00:09:03,990 --> 00:09:08,990
and you can see that it's constructed my new CSV file with all of the data that

21422
00:09:09,840 --> 00:09:13,260
I've extracted from my central park squirrel census

21423
00:09:13,620 --> 00:09:17,220
and I've now got a new table with the data that I'm interested in.

21424
00:09:17,790 --> 00:09:21,780
So did you manage to complete this challenge? If you found it tricky

21425
00:09:21,780 --> 00:09:25,950
working with the data frames and figuring out how to get hold of the columns or

21426
00:09:25,950 --> 00:09:29,490
how to get hold of the rows depending on the conditions we're interested

21427
00:09:29,490 --> 00:09:33,360
in, then I strongly recommend to just head back the last lesson,

21428
00:09:33,630 --> 00:09:37,830
just try to write out the code that we're doing in each step of the video

21429
00:09:37,830 --> 00:09:38,663
yourself,

21430
00:09:38,790 --> 00:09:41,910
just to make sure that you're a hundred percent sure with what's going on.

21431
00:09:42,630 --> 00:09:44,820
Once you are ready, head of the next lesson

21432
00:09:44,880 --> 00:09:49,350
we're going to finally build our US states game.

21433
00:09:50,030 --> 00:09:52,410
For all of that and more, I'll see you on the next lesson.


21434
00:00:00,240 --> 00:00:03,600
All right. It's time to put some of the stuff that we've learned into practice.

21435
00:00:04,140 --> 00:00:09,140
And the product that we're trying to build towards is a US states quiz.

21436
00:00:10,220 --> 00:00:14,030
One of my favorite websites for quizzes is a website called Sporcle.

21437
00:00:14,570 --> 00:00:19,100
And they specialize in quizzes that are basically just you making a list.

21438
00:00:19,730 --> 00:00:23,510
And one of the best quizzes they have is the list of US

21439
00:00:23,510 --> 00:00:27,290
states. You can head over to this link in the course resources,

21440
00:00:27,650 --> 00:00:32,240
and you can start playing this game. They're presuming that there's 50 States in the

21441
00:00:32,240 --> 00:00:36,890
US and every single time you type in the name of a state,

21442
00:00:37,160 --> 00:00:40,760
then that state gets labelled and you score one point.

21443
00:00:41,150 --> 00:00:45,680
The goal is to be able to name as many states as you can remember.

21444
00:00:46,190 --> 00:00:51,140
This is basically the game that we're trying to replicate using turtle and using

21445
00:00:51,140 --> 00:00:55,130
some CSV data. And this is what the end result looks like.

21446
00:00:55,730 --> 00:00:57,470
We've got a turtle screen

21447
00:00:57,860 --> 00:01:02,000
which has a background that is an image of the US with all of the states 

21448
00:01:02,090 --> 00:01:02,923
blanked out.

21449
00:01:03,410 --> 00:01:07,160
And what we're going to do is by looking at the shape of the map

21450
00:01:07,190 --> 00:01:09,410
and by remembering what the states look like,

21451
00:01:09,800 --> 00:01:12,530
try to name as many as we can.

21452
00:01:13,040 --> 00:01:17,300
And once we've entered the name and we hit OK, then if it actually exists,

21453
00:01:17,360 --> 00:01:20,780
it gets added to the map. It seems simple,

21454
00:01:21,080 --> 00:01:26,080
but the code is going to need some of the new things we learn about using data,

21455
00:01:26,360 --> 00:01:29,300
especially data from CSVs. Now,

21456
00:01:29,330 --> 00:01:32,690
the first thing I want you to do is the head over to the link in the course

21457
00:01:32,690 --> 00:01:37,370
resources that takes you to the starting file for the US states game.

21458
00:01:37,850 --> 00:01:42,650
Now, once you're here, you're going to fork your own copy of this project

21459
00:01:42,980 --> 00:01:45,560
and then you're going to click on these three dots at the top,

21460
00:01:45,620 --> 00:01:48,980
and then download this entire project as a zip file.

21461
00:01:49,280 --> 00:01:52,610
Remember that you won't see this until you forked the project,

21462
00:01:53,000 --> 00:01:56,690
and also if you're not logged in, then when you fork it,

21463
00:01:56,960 --> 00:01:59,450
it's going to give you a random name,

21464
00:01:59,780 --> 00:02:02,360
which means that when you download it as a zip,

21465
00:02:02,450 --> 00:02:07,450
you will have to rename that zip file to us-states-game so that your project can

21466
00:02:08,270 --> 00:02:09,530
have the correct name.

21467
00:02:10,610 --> 00:02:15,610
So the easiest way, as always, is to just log in, fork a copy of the project and

21468
00:02:16,220 --> 00:02:19,580
then download it as a zip file. Once you've done that,

21469
00:02:19,790 --> 00:02:22,580
then you can open it up inside PyCharm.

21470
00:02:23,150 --> 00:02:26,270
And you can see that there's three files here.

21471
00:02:26,390 --> 00:02:29,270
One is called 50_states.csv,

21472
00:02:29,630 --> 00:02:34,630
and this is a CSV file that contains all 50 States in the US by name and then

21473
00:02:35,870 --> 00:02:39,110
some X and Y value, which we'll talk about a little bit later on.

21474
00:02:39,800 --> 00:02:44,090
The next thing you'll see is a blank_states_image.gif. Now,

21475
00:02:44,090 --> 00:02:49,010
the reason why it's a .gif rather than a .png or .jpg is actually because

21476
00:02:49,040 --> 00:02:51,680
turtle only works with this one image format.

21477
00:02:51,980 --> 00:02:56,600
So in order to display an image, we actually need to convert the image to 

21478
00:02:56,690 --> 00:02:58,640
a gif file, which I have done already.

21479
00:02:59,200 --> 00:03:03,940
This file is just an image of all the States of the US blanked out,

21480
00:03:04,090 --> 00:03:08,320
so it doesn't have the names. So it's ready for our user to start guessing.

21481
00:03:08,950 --> 00:03:10,570
Finally, you'll have a empty

21482
00:03:10,570 --> 00:03:14,440
main.py file and this is where we're going to get started.

21483
00:03:14,920 --> 00:03:17,740
So the first thing I'm going to do is I'm going to import turtle,

21484
00:03:17,770 --> 00:03:22,770
so straight-up import the module. And then I'm going to create a screen object

21485
00:03:24,100 --> 00:03:27,940
from turtle.Screen class. Now,

21486
00:03:27,940 --> 00:03:29,350
once I've got my screen,

21487
00:03:29,380 --> 00:03:32,860
then I'm going to change the title of the project to the

21488
00:03:32,880 --> 00:03:37,200
U.S. States Game.

21489
00:03:38,340 --> 00:03:42,300
And finally, I'm going to get my screen to only exit on click.

21490
00:03:42,810 --> 00:03:45,600
This is pretty basic, we've done this lots of times.

21491
00:03:45,870 --> 00:03:49,710
But the next thing that we're going to do is a little bit new because we haven't

21492
00:03:49,710 --> 00:03:52,200
actually worked with images in turtle before.

21493
00:03:52,710 --> 00:03:57,330
One of the things that you can do with turtle is that you can set the turtle's

21494
00:03:57,630 --> 00:03:59,880
shape to a new shape. So, 

21495
00:03:59,880 --> 00:04:04,680
you can set it to a circle or you can set it to a square, et cetera.

21496
00:04:05,010 --> 00:04:08,940
But you can actually load in a new image as a new shape.

21497
00:04:09,420 --> 00:04:14,340
And the way you do that is you get hold of your screen object and you say add

21498
00:04:14,400 --> 00:04:19,079
shape and this shape can be any image file.

21499
00:04:19,470 --> 00:04:23,130
So in our case, it's going to be the name of this file.

21500
00:04:23,550 --> 00:04:27,870
So I'm going to create a new variable called the image and it's going to store

21501
00:04:27,900 --> 00:04:31,740
the file name or the file path of my blank

21502
00:04:31,920 --> 00:04:36,270
_states_img.gif.

21503
00:04:36,660 --> 00:04:41,660
So this is basically the path to reach my image and that is the shape that I'm

21504
00:04:42,570 --> 00:04:44,340
going to load into my screen.

21505
00:04:45,060 --> 00:04:47,760
So once I've added the shape to the screen,

21506
00:04:47,790 --> 00:04:50,970
then it's now available to be used by a turtle.

21507
00:04:51,060 --> 00:04:56,060
So I can say turtle.shape and change it instead of to circle or square or

21508
00:04:57,540 --> 00:05:01,230
turtle, I'm going to change it to this image file.

21509
00:05:01,710 --> 00:05:05,340
So now when I run my project,

21510
00:05:05,850 --> 00:05:10,170
you might like, I have here, get a error like this;

21511
00:05:10,410 --> 00:05:14,520
couldn't open this file because there is no such file or directory.

21512
00:05:14,850 --> 00:05:19,050
This is really, really common and it might happen to you. In this case,

21513
00:05:19,080 --> 00:05:23,670
just be sure that whatever it is that you've typed here actually matches the

21514
00:05:23,670 --> 00:05:26,430
name of your image. So as you can see,

21515
00:05:26,430 --> 00:05:29,040
it's actually blank_states_img.gif,

21516
00:05:29,430 --> 00:05:34,430
and I've only got state without the 's'. So now when we run this again

21517
00:05:34,590 --> 00:05:36,840
there should be no problems and I can see 

21518
00:05:36,850 --> 00:05:41,850
the image show up here. Now that we've managed to load up our image onto our

21519
00:05:42,480 --> 00:05:43,313
turtle game,

21520
00:05:43,560 --> 00:05:48,360
the next thing we want to do is to figure out the coordinates of each of these

21521
00:05:48,360 --> 00:05:50,070
states. For example,

21522
00:05:50,100 --> 00:05:53,820
if we wanted the word California to show up over here,

21523
00:05:54,090 --> 00:05:59,090
then we need to know what is the X and Y coordinate of this location relative to

21524
00:05:59,240 --> 00:06:00,860
the entire game screen.

21525
00:06:01,580 --> 00:06:06,050
That way when we actually guess a state like California and hit OK,

21526
00:06:06,050 --> 00:06:11,050
it can actually show up with the text to be written on that state itself so that

21527
00:06:11,960 --> 00:06:15,770
the user knows which states they've guessed and which ones that they still need

21528
00:06:15,770 --> 00:06:16,603
to guess.

21529
00:06:17,290 --> 00:06:18,750
But how would you

21530
00:06:18,910 --> 00:06:22,120
place the texts on a particular point of the map?

21531
00:06:22,420 --> 00:06:25,300
How would you get the coordinates for this point? Well,

21532
00:06:25,690 --> 00:06:27,520
after a quick search on Google,

21533
00:06:27,550 --> 00:06:31,930
I find a Stack Overflow question that basically is trying to do exactly what we

21534
00:06:31,930 --> 00:06:35,350
want. So this is the code that we would need.

21535
00:06:35,650 --> 00:06:40,480
So let's go ahead and copy all of it and paste it into our project.

21536
00:06:41,140 --> 00:06:44,530
Let's take a look through this code and understand what it's trying to do.

21537
00:06:45,220 --> 00:06:48,910
So firstly, we've got a function here called get_mouse_click_coor,

21538
00:06:49,240 --> 00:06:52,150
and it takes two values as inputs, X and Y,

21539
00:06:52,210 --> 00:06:54,580
and then it prints those out. Next,

21540
00:06:54,610 --> 00:06:57,940
we've got our turtle module calling onscreenclick,

21541
00:06:57,970 --> 00:06:59,770
which is a event listener.

21542
00:06:59,860 --> 00:07:04,690
So it's gonna listen for when the mouse clicks and then it's going to call our

21543
00:07:04,720 --> 00:07:06,670
get get_mouse_click_coor function,

21544
00:07:06,880 --> 00:07:11,770
and it's going to pass over the X and Y coordinates of that click location.

21545
00:07:12,310 --> 00:07:15,220
Finally, we've got this turtle.mainloop.

21546
00:07:15,520 --> 00:07:19,300
So this is an alternative way of keeping our screen open

21547
00:07:19,630 --> 00:07:21,700
even though our code has finished running.

21548
00:07:22,030 --> 00:07:26,800
So it's basically an alternative to our screen.exitonclick. And in fact

21549
00:07:26,800 --> 00:07:27,850
if you think about it,

21550
00:07:28,060 --> 00:07:32,800
if we wanted to get the click location and our screen exits

21551
00:07:32,860 --> 00:07:36,490
as soon as we click on it, then it's not really gonna work very easily.

21552
00:07:36,580 --> 00:07:40,720
So we're going to delete this line and we're going to replace it with this

21553
00:07:40,750 --> 00:07:43,990
turtle.mainloop, which is going to keep our screen open.

21554
00:07:44,260 --> 00:07:48,130
So if I comment out all of this previous code and when I run my project,

21555
00:07:48,160 --> 00:07:51,400
you can see it's still keeps the window open. But without it,

21556
00:07:51,580 --> 00:07:54,730
it's just going to flash up and disappear.

21557
00:07:56,560 --> 00:08:00,460
While this code is running if I click on one of the states,

21558
00:08:00,490 --> 00:08:02,380
let's say where California is,

21559
00:08:02,680 --> 00:08:07,150
you can see the X and Y values being printed in the console.

21560
00:08:07,510 --> 00:08:12,510
So we can repeat this for all of the States on this image and get hold of where

21561
00:08:12,580 --> 00:08:17,350
each state lies on this map relative to our turtle screen.

21562
00:08:18,010 --> 00:08:22,030
Now, if that sounds really tedious then I have to tell you, it really is.

21563
00:08:22,390 --> 00:08:23,620
But lucky for you,

21564
00:08:23,620 --> 00:08:28,620
I've actually gone through this entire process and I've logged all of the X and

21565
00:08:28,720 --> 00:08:32,799
Y values. Now some of them may be a little bit off the center of the state,

21566
00:08:33,130 --> 00:08:35,830
but you know, you can always tweak this if you want to.

21567
00:08:36,280 --> 00:08:40,510
But now you know where all of these X and Y values are coming from.

21568
00:08:41,650 --> 00:08:46,270
So you don't actually need any of this code because we already have all of the X

21569
00:08:46,270 --> 00:08:49,450
and Y values in our 50_states.csv.

21570
00:08:50,140 --> 00:08:55,140
All you have to do is to read from that CSV and get those X and Y values.

21571
00:08:57,150 --> 00:09:01,590
And then you're going to ask the user for a answer and we're going to do that

21572
00:09:01,590 --> 00:09:03,330
through the use of a input.

21573
00:09:03,720 --> 00:09:08,720
Remember we can call screen.textinput to create one of those popup boxes

21574
00:09:08,970 --> 00:09:13,970
and we can give it a title and we can also give it a prompt.

21575
00:09:15,930 --> 00:09:19,620
So when I run this, you can see that this popup box looks like this.

21576
00:09:20,160 --> 00:09:25,160
The title is at the top of the window and the prompt is inside the box.

21577
00:09:29,450 --> 00:09:29,960
Okay.

21578
00:09:29,960 --> 00:09:33,350
And once we type something in here like Ohio,

21579
00:09:33,830 --> 00:09:38,630
then I can actually get hold of what the user typed by tapping into this answer_

21580
00:09:38,630 --> 00:09:40,880
state. So if I go ahead and print it,

21581
00:09:41,390 --> 00:09:45,440
then you can see it will be whatever it is I type into this box.

21582
00:09:46,040 --> 00:09:47,630
So now, you know

21583
00:09:47,750 --> 00:09:52,750
what is the X and Y value of the location that we need to write our text for the

21584
00:09:54,350 --> 00:09:57,920
name of the state that the user has guessed correctly.

21585
00:09:58,700 --> 00:10:03,700
You also know how to get the user to enter a new answer through our text inputs.

21586
00:10:05,660 --> 00:10:06,950
So in the next lesson,

21587
00:10:07,190 --> 00:10:11,900
the challenge begins and you're going to use everything you've learned so far in

21588
00:10:11,900 --> 00:10:15,260
order to read from the CSV file and get the game to work.

21589
00:10:15,650 --> 00:10:18,020
So for all of that and more, I'll see you there.


21590
00:00:00,390 --> 00:00:00,720
All right.

21591
00:00:00,720 --> 00:00:05,720
So in the last lesson we did a lot of setup and we got our game to have the

21592
00:00:05,880 --> 00:00:06,810
basic features.

21593
00:00:06,870 --> 00:00:11,250
It's got a popup that asks us for a states' name,

21594
00:00:11,610 --> 00:00:15,870
and when I type a name in here, I can receive it inside my code

21595
00:00:15,900 --> 00:00:17,340
using this answer_state.

21596
00:00:18,030 --> 00:00:22,590
Now your job is to use that 50_states.csv

21597
00:00:23,070 --> 00:00:23,430
to

21598
00:00:23,430 --> 00:00:28,430
check the user's answer against all of the states inside this table and see if

21599
00:00:29,580 --> 00:00:31,650
it matches one of them. Now,

21600
00:00:31,650 --> 00:00:36,210
the user might spell it with a capital to begin with say, Ohio,

21601
00:00:36,270 --> 00:00:40,740
or they might just write ohio and it should work for both of these cases.

21602
00:00:41,760 --> 00:00:42,510
In addition,

21603
00:00:42,510 --> 00:00:47,510
when the user types in a state that is inside that 50_states.csv,

21604
00:00:48,660 --> 00:00:53,660
then that state should be written onto the screen at the location where it

21605
00:00:53,820 --> 00:00:54,653
exists.

21606
00:00:54,750 --> 00:00:59,190
So it remember the location corresponds to the X and Y values that we already

21607
00:00:59,190 --> 00:01:01,710
logged inside this data file.

21608
00:01:02,310 --> 00:01:05,430
But if the user guesses a state that's wrong,

21609
00:01:05,970 --> 00:01:10,020
then nothing happens and our input box appears again

21610
00:01:10,410 --> 00:01:12,480
asking for a new input.

21611
00:01:13,860 --> 00:01:16,860
Now notice how here in the title of the text input

21612
00:01:16,920 --> 00:01:21,920
I'm also keeping track of how many states they have guessed correctly out of 50.

21613
00:01:22,590 --> 00:01:25,560
And every time they add a new, um,

21614
00:01:25,620 --> 00:01:28,380
new state, then that number updates.

21615
00:01:29,700 --> 00:01:34,290
his is going to rely on the knowledge that you've learned about reading from

21616
00:01:34,290 --> 00:01:35,370
CSV data,

21617
00:01:35,730 --> 00:01:39,390
getting hold of the specific parts of the CSV data,

21618
00:01:39,720 --> 00:01:43,500
finding for example, a particular row or a particular column,

21619
00:01:43,950 --> 00:01:48,950
and working with that data in order to check to see if the user got the state

21620
00:01:49,530 --> 00:01:50,363
right,

21621
00:01:50,370 --> 00:01:55,370
and then using the data inside that row to figure out where to write some text

21622
00:01:55,980 --> 00:01:57,960
at which X and Y location

21623
00:01:58,200 --> 00:02:02,670
so that we can get the actual name of the state written at the location where

21624
00:02:02,670 --> 00:02:06,120
they appear on the map. So this is quite a challenge

21625
00:02:06,180 --> 00:02:09,660
and I expect that you'll have to think about it and play around with the code

21626
00:02:09,660 --> 00:02:13,050
for at least 10 to 20 minutes. So give it the time that it needs,

21627
00:02:13,350 --> 00:02:17,970
have a think about how you would break down this problem and try and complete

21628
00:02:17,970 --> 00:02:20,220
this challenge. So pause the video now.

21629
00:02:25,700 --> 00:02:26,210
Okay.

21630
00:02:26,210 --> 00:02:28,640
All right. So I'm going to walk through the solution with you,

21631
00:02:28,910 --> 00:02:31,070
but I want you to do a conscience check.

21632
00:02:31,670 --> 00:02:35,930
If you haven't spent at least 20 minutes working on this problem, fixing it,

21633
00:02:36,080 --> 00:02:40,400
getting it to do what you want it to do, then go back, try again.

21634
00:02:40,460 --> 00:02:42,860
You need to feel the struggle in order to learn.

21635
00:02:43,220 --> 00:02:47,150
I can tell you how to do anything, but if that answer didn't come from you,

21636
00:02:47,390 --> 00:02:50,840
then you're not actually going to make progress. So I really,

21637
00:02:50,840 --> 00:02:55,460
really urge you to give it a go before you watch the solution. All right.

21638
00:02:55,460 --> 00:02:58,910
So back to our code, the first thing I'm going to do is

21639
00:02:59,260 --> 00:03:02,320
I'm going to import the pandas module.

21640
00:03:02,710 --> 00:03:04,450
So I'm going to import pandas.

21641
00:03:04,960 --> 00:03:09,760
Now I've already installed pandas on the starting project that you downloaded,

21642
00:03:10,090 --> 00:03:14,170
but if you're doing this completely from scratch from your own starting file,

21643
00:03:14,380 --> 00:03:18,010
then you'll probably get a red squiggly line under the pandas

21644
00:03:18,040 --> 00:03:21,640
and it will ask you to install the package. But if you don't have it,

21645
00:03:21,640 --> 00:03:24,160
then it means it's already installed and ready to use.

21646
00:03:24,640 --> 00:03:29,640
Now we're going to get our pandas to go ahead and read our CSV file, and the

21647
00:03:30,190 --> 00:03:33,940
CSV file is called the 50_states.csv.

21648
00:03:34,420 --> 00:03:36,370
So once the prompt comes up,

21649
00:03:36,670 --> 00:03:40,570
then I'm going to hit enter to get PyCharm to just insert it automatically.

21650
00:03:41,410 --> 00:03:45,550
Now I'm going to save that data frame that comes from reading that CSV to a

21651
00:03:45,550 --> 00:03:47,110
variable called data.

21652
00:03:47,890 --> 00:03:52,890
Now our data has 50 rows of data and the first row is the column headings

21653
00:03:54,550 --> 00:03:59,230
for each of them. So we've got the state, the X and the Y values.

21654
00:04:00,310 --> 00:04:04,420
Let's have a think about how we might break down this problem that we have.

21655
00:04:04,840 --> 00:04:07,000
So when the user types an answer,

21656
00:04:07,450 --> 00:04:10,630
we have to check to see if that, um,

21657
00:04:10,930 --> 00:04:15,930
answer_state is one of the states in all the states of the 50_states.csv.

21658
00:04:23,230 --> 00:04:27,250
The first column is a list of all 50 States.

21659
00:04:27,790 --> 00:04:32,790
So if we could somehow check to see if this state that they've guessed is one of

21660
00:04:34,120 --> 00:04:39,010
the states in that column, then we know whether if they got it right or wrong.

21661
00:04:39,520 --> 00:04:41,470
If they got it right,

21662
00:04:41,950 --> 00:04:46,950
then we need to figure out how we can create a turtle to write

21663
00:04:50,050 --> 00:04:55,050
the name of the state at the state's X and Y coordinate.

21664
00:04:57,940 --> 00:04:59,980
For example, if the user guessed

21665
00:05:00,010 --> 00:05:04,210
South Carolina and indeed South Carolina is one of the 50 States,

21666
00:05:04,510 --> 00:05:08,410
then we should be able to pull out this entire row and then create a turtle,

21667
00:05:08,440 --> 00:05:11,110
make it go to this X and Y location,

21668
00:05:11,470 --> 00:05:16,470
and to write the name of the state onto this blank state image in our turtle

21669
00:05:18,640 --> 00:05:22,540
game. Let's see if we can tackle this. Now,

21670
00:05:22,540 --> 00:05:27,010
the first thing we need to figure out is how do we get hold of all the states of

21671
00:05:27,010 --> 00:05:30,070
the 50_states.csv? So we've got our data frame

21672
00:05:30,280 --> 00:05:34,900
and if I go ahead and say data, then I can pull out one of the columns.

21673
00:05:35,350 --> 00:05:37,390
So the column name is state,

21674
00:05:37,870 --> 00:05:41,950
and I can either use that as a key with a set of square brackets,

21675
00:05:42,220 --> 00:05:45,190
or I can use it as simply a attribute name.

21676
00:05:46,510 --> 00:05:51,280
This gets me the data series which is that first column.

21677
00:05:52,180 --> 00:05:54,850
And if I want to be able to turn that into a list,

21678
00:05:55,150 --> 00:05:58,070
remember that we saw that method to_list,

21679
00:05:58,700 --> 00:06:01,970
and that means we can work with it just like any other list.

21680
00:06:02,480 --> 00:06:04,730
So let's call this all_states.

21681
00:06:06,110 --> 00:06:08,900
And once we've got whole of this all_states, well,

21682
00:06:08,900 --> 00:06:13,900
we can check to see if the answer_state is in the all_states.

21683
00:06:17,210 --> 00:06:19,670
This is something that you won't be able to do,

21684
00:06:19,670 --> 00:06:23,120
so checking for membership using the in keyword

21685
00:06:23,450 --> 00:06:26,420
unless you have converted this into a list.

21686
00:06:27,350 --> 00:06:32,350
So once we've figured out that this answer of the user provided is in fact,

21687
00:06:32,450 --> 00:06:35,270
one of the states in our 50 States,

21688
00:06:35,600 --> 00:06:39,200
then the next thing we need to do is to create a turtle.

21689
00:06:39,830 --> 00:06:42,410
So let's create a new turtle, which we'll call t,

21690
00:06:42,920 --> 00:06:47,510
and we're going to use the turtle.Turtle class to construct it.

21691
00:06:47,990 --> 00:06:52,100
And then we're going to get the turtle to hide the actual turtle shape,

21692
00:06:52,460 --> 00:06:57,020
and we're also going to get it to pen up so that it doesn't actually do any

21693
00:06:57,020 --> 00:06:57,853
drawing.

21694
00:06:58,190 --> 00:07:03,190
But what we do need it to do is we needed to go to a particular X and Y

21695
00:07:03,560 --> 00:07:04,393
location.

21696
00:07:04,910 --> 00:07:09,910
The X and Y location is going to correspond to the state that the user has

21697
00:07:10,070 --> 00:07:15,070
correctly guessed and the row of data from our 50_states.csv.

21698
00:07:17,570 --> 00:07:22,570
So how can we get hold of the actual row of data that corresponds to this state?

21699
00:07:24,350 --> 00:07:28,790
Well, we can take our data and then inside some square brackets,

21700
00:07:29,000 --> 00:07:34,000
we can check that the data.state is double equal to the answer_state.

21701
00:07:37,220 --> 00:07:42,220
This is going to pull out the row where the state is equal to the answer_state.

21702
00:07:44,960 --> 00:07:49,160
So I'm going to save that under something called state_data.

21703
00:07:50,270 --> 00:07:55,270
And now I can tell my turtle to go to state_data.x and state_data.y.

21704
00:07:59,180 --> 00:08:01,730
So, because this is a row of data,

21705
00:08:02,330 --> 00:08:06,710
then I can tap into it's attributes using the name of the columns,

21706
00:08:07,100 --> 00:08:08,870
the X and the Y.

21707
00:08:10,400 --> 00:08:12,620
And once my turtle gets there,

21708
00:08:12,710 --> 00:08:16,910
then I want it to write the name of the state.

21709
00:08:17,360 --> 00:08:22,340
So it's going to be state_data.state. Now,

21710
00:08:22,340 --> 00:08:27,320
when we hit run on this code and guess the name of a state that definitely

21711
00:08:27,320 --> 00:08:30,740
exists, when we click OK, we're going to get an error.

21712
00:08:31,340 --> 00:08:34,159
And it's really important that you get used to seeing errors

21713
00:08:34,429 --> 00:08:37,460
because they're going to happen to you all the time. Just as in life

21714
00:08:37,700 --> 00:08:42,200
the only certainties are death and taxes, in Programming the only certainty

21715
00:08:42,230 --> 00:08:44,179
is you will get bugs and you will get errors.

21716
00:08:44,570 --> 00:08:48,110
The important thing is to figure out what's causing the error.

21717
00:08:48,620 --> 00:08:53,270
So if we go ahead and copy this error at the end, bad screen distance,

21718
00:08:53,300 --> 00:08:55,710
that seems to be telling us what is actually going on.

21719
00:08:56,460 --> 00:09:00,720
And then I go into Google and I search for this particular error,

21720
00:09:01,200 --> 00:09:05,040
then I can see other people who've encountered this issue.

21721
00:09:05,700 --> 00:09:09,660
So if we read through all of this, between all of the subtext,

21722
00:09:09,720 --> 00:09:14,720
it tells us that the issue is actually that our coordinates are stored as

21723
00:09:15,090 --> 00:09:19,710
strings. We need to get the coordinates into actual numbers.

21724
00:09:20,880 --> 00:09:24,450
So the one oversight that you might've made which is really common

21725
00:09:24,840 --> 00:09:28,200
is to simply tell it to go to date state_data.x,

21726
00:09:28,260 --> 00:09:33,260
state_data.y without first converting them into integers.

21727
00:09:35,610 --> 00:09:40,610
So now if we bring back our screen.exitonclick and then run our code,

21728
00:09:41,370 --> 00:09:45,030
we can type the name of the state click OK,

21729
00:09:45,300 --> 00:09:50,300
and you can see the state data show up on the location that corresponds to that

21730
00:09:50,400 --> 00:09:52,320
particular state. Now,

21731
00:09:52,350 --> 00:09:56,280
the only problem is we don't want all of this junk to be written here, right?

21732
00:09:56,610 --> 00:10:01,530
And this is showing up because we're getting this data from our data series.

21733
00:10:01,920 --> 00:10:04,440
So what's a much simpler way? Well,

21734
00:10:04,470 --> 00:10:07,950
we've already got hold of the answer that the user typed, right?

21735
00:10:08,280 --> 00:10:12,000
So why don't we just write the answer_state?

21736
00:10:13,110 --> 00:10:18,000
So now when I type in the state and it matches one of the states in the 50

21737
00:10:18,000 --> 00:10:18,833
states,

21738
00:10:18,840 --> 00:10:23,840
then it's going to go to the X and Y location of that state and print the name

21739
00:10:23,910 --> 00:10:26,550
of the state that the user has typed in.

21740
00:10:27,060 --> 00:10:31,710
And because we've made sure that it's a correct state with a correct spelling,

21741
00:10:31,980 --> 00:10:34,740
then it doesn't actually matter if we use the answer_state

21742
00:10:34,950 --> 00:10:38,220
or if we use the state_data. Now,

21743
00:10:38,250 --> 00:10:42,360
if you really want to use state_data instead of answer_state

21744
00:10:42,450 --> 00:10:46,380
because say you're writing a different program and you need this functionality,

21745
00:10:46,710 --> 00:10:51,390
then you can actually tap into state_data.state,

21746
00:10:51,990 --> 00:10:56,910
which will get us the state name from the row corresponding to the matching

21747
00:10:56,910 --> 00:11:01,830
state. And then we can use a method called item.

21748
00:11:02,670 --> 00:11:06,030
Now, item is a method on the pandas series.

21749
00:11:06,840 --> 00:11:09,990
So we know that this is a Panda data series

21750
00:11:10,050 --> 00:11:13,410
and you can do a type check on that if you want to confirm.

21751
00:11:13,830 --> 00:11:18,830
But what the item does is it looks into the underlying data and it basically

21752
00:11:18,990 --> 00:11:23,400
just grabs the first element. So now, if I run the game

21753
00:11:23,400 --> 00:11:26,520
as it is and I type in the name of a state,

21754
00:11:26,790 --> 00:11:31,790
you can see it fetches the actual value under state_data.state without any

21755
00:11:32,790 --> 00:11:36,750
of the index, the zero or any of the other parts of the data series.

21756
00:11:37,380 --> 00:11:42,380
So I just wanted to show you that you can actually get a row of data from a data

21757
00:11:42,390 --> 00:11:46,230
frame and then get a particular value from that row,

21758
00:11:46,560 --> 00:11:51,540
and get the actual raw value from that. But personally, in this line of code,

21759
00:11:51,570 --> 00:11:56,410
I prefer using the answer_state because we know it's already been title cased, its

21760
00:11:56,410 --> 00:11:57,910
already formatted correctly

21761
00:11:58,180 --> 00:12:02,050
and it just makes the code look a bit cleaner and it's easier to understand.

21762
00:12:02,170 --> 00:12:05,860
So I'm going to stick with this. So now that it's working,

21763
00:12:06,070 --> 00:12:07,870
all we need to do is to get this

21764
00:12:07,870 --> 00:12:12,280
to repeat itself every single time the user makes a new guess.

21765
00:12:12,700 --> 00:12:16,600
That means we're probably going to have to put it inside some sort of while loop,

21766
00:12:17,320 --> 00:12:20,080
what should be our while condition? Well,

21767
00:12:20,110 --> 00:12:24,310
we know that the user is going to guess all of the states. And once they've

21768
00:12:24,310 --> 00:12:26,920
guessed all of them, then they win, right?

21769
00:12:27,310 --> 00:12:32,310
So why don't we create a list of guessed states and set that to equal a empty

21770
00:12:33,940 --> 00:12:34,773
list.

21771
00:12:34,960 --> 00:12:39,960
And we can check while the length of the guessed_states is less than 50,

21772
00:12:41,980 --> 00:12:45,550
then we can continue rerunning all of this code,

21773
00:12:45,790 --> 00:12:50,320
getting them to put a new input, checking the input and writing the state name.

21774
00:12:51,160 --> 00:12:54,580
But every time the user guesses a state correctly,

21775
00:12:54,910 --> 00:12:59,910
then we're going to add this answer_states to the guessed_state.

21776
00:13:00,310 --> 00:13:02,740
So we can say guessed_states.append,

21777
00:13:03,100 --> 00:13:06,100
and then we're going to append this new answer_state.

21778
00:13:06,820 --> 00:13:11,800
So now when I run this code again, then you can see that every time

21779
00:13:11,800 --> 00:13:16,240
I guess a new state, this text input pops up again

21780
00:13:16,540 --> 00:13:21,070
and I can basically just keep going until I've named all the states.

21781
00:13:21,790 --> 00:13:26,440
Now, the next thing I want to change is the title of this text input window.

21782
00:13:26,980 --> 00:13:28,540
Instead of saying Guess the state,

21783
00:13:28,690 --> 00:13:33,070
I want it to keep track of the number of states I've guessed correctly.

21784
00:13:33,430 --> 00:13:38,430
So I basically want to say something like zero or 10 or whatever, out of 50

21785
00:13:38,590 --> 00:13:40,000
states correct.

21786
00:13:40,630 --> 00:13:44,260
This zero is going to be replaced by a f-string

21787
00:13:44,650 --> 00:13:49,060
and we're going to use the length of our guessed_states in order to get that

21788
00:13:49,060 --> 00:13:53,230
number. So now when I run this code, you can see that

21789
00:13:53,230 --> 00:13:57,400
I start out with zero states, 0/50, and every time I guess

21790
00:13:57,400 --> 00:14:01,780
a new state, then it adds to that count

21791
00:14:01,810 --> 00:14:05,020
so I can keep track of how many I have guessed and how many I've got left.

21792
00:14:06,610 --> 00:14:06,820
Now,

21793
00:14:06,820 --> 00:14:11,820
the next thing you'll realize if you test this a few times is even if you get a

21794
00:14:12,190 --> 00:14:13,180
state right

21795
00:14:13,480 --> 00:14:18,400
but if you actually didn't spell it with a capital C or capital letter to begin

21796
00:14:18,400 --> 00:14:22,990
with, then it's not going to accept it. So we don't see 'california' showing up.

21797
00:14:23,350 --> 00:14:25,780
And this is because in our state data,

21798
00:14:25,930 --> 00:14:30,490
they all have a title case were the first letter is capitalized.

21799
00:14:31,090 --> 00:14:34,150
So how can we make sure that our game works

21800
00:14:34,150 --> 00:14:38,830
if the user types all lower case or all upper case or title case?

21801
00:14:38,890 --> 00:14:42,610
As long as they got the spelling right we should ignore the casing.

21802
00:14:44,080 --> 00:14:48,310
So one way of doing this is to take this answer_state

21803
00:14:48,340 --> 00:14:52,430
which comes from that text input that the user has entered,

21804
00:14:52,820 --> 00:14:57,290
and then at the very end, we can change that to a title case.

21805
00:14:57,560 --> 00:15:00,200
So this is a method that's on all strings.

21806
00:15:00,590 --> 00:15:05,270
So that means if I start out with a string, which is,

21807
00:15:05,300 --> 00:15:09,770
um, angela, and then I say str.title,

21808
00:15:10,280 --> 00:15:13,490
then this will give me the same string back

21809
00:15:13,520 --> 00:15:15,710
but it will make the first letter capitalized.

21810
00:15:16,400 --> 00:15:18,650
This is what we're going to do to the user's answer.

21811
00:15:19,100 --> 00:15:22,070
And then we'll be able to check it against all the States.

21812
00:15:22,400 --> 00:15:27,020
And now it doesn't matter if the user has typed everything in all caps,

21813
00:15:27,350 --> 00:15:30,680
or if they have typed it with all lower case,

21814
00:15:31,100 --> 00:15:34,370
or if they've done something really crazy like this,

21815
00:15:34,430 --> 00:15:36,350
it will still be accepted.

21816
00:15:37,990 --> 00:15:39,130
So we've now got most of

21817
00:15:39,370 --> 00:15:42,940
the functionality of our game. In the next lesson,

21818
00:15:43,000 --> 00:15:46,690
we're going to figure out how we can get this game to become more of an

21819
00:15:46,690 --> 00:15:50,950
educational tool and for it to create a final CSV

21820
00:15:51,340 --> 00:15:52,960
when we're ready to exit the game

21821
00:15:53,230 --> 00:15:57,400
that's going to tell us all the states that we missed so that we can learn them,

21822
00:15:57,670 --> 00:16:02,320
so that we can come back to the game with more knowledge. For all of that and

21823
00:16:02,320 --> 00:16:04,270
more, I'll see you on the next lesson.


21824
00:00:00,270 --> 00:00:04,410
So we've now got pretty much all the functionality that we want in order for

21825
00:00:04,410 --> 00:00:06,930
this to function as a game.

21826
00:00:07,620 --> 00:00:10,680
But if we want to be able to use this as a learning tool,

21827
00:00:11,010 --> 00:00:15,510
then it would be great for us to be able to have some sort of way of typing an

21828
00:00:15,540 --> 00:00:18,000
exit code. Say, if I typed exit,

21829
00:00:18,030 --> 00:00:23,030
then I could exit out of the game and then I could get my code to generate a CSV

21830
00:00:24,600 --> 00:00:29,600
file that contains all of the states that I missed from all 50 states.

21831
00:00:30,600 --> 00:00:34,170
We know that in our while loop we can exit out of it

21832
00:00:34,290 --> 00:00:37,440
as long as we use the break statement.

21833
00:00:38,100 --> 00:00:40,920
What we can do is we can use an if statement to check

21834
00:00:40,920 --> 00:00:45,270
well, if the answer_state was actually equal to the secret code

21835
00:00:45,300 --> 00:00:49,860
which is exit, remember that the answer_state is going to be title cased

21836
00:00:49,890 --> 00:00:54,540
so we have to check for it with a capital E, and if that happens,

21837
00:00:54,780 --> 00:00:57,210
then we're gonna break out of our while loop

21838
00:00:57,270 --> 00:01:00,060
which means it's going to end the while loop prematurely,

21839
00:01:00,360 --> 00:01:04,560
and we can delete this line so that it actually ends the game

21840
00:01:04,620 --> 00:01:08,730
and exits out of the window. So if we test this out,

21841
00:01:09,480 --> 00:01:14,040
then you can see we can type our states or we can type exit

21842
00:01:14,640 --> 00:01:16,290
and that will exit the game

21843
00:01:16,410 --> 00:01:19,260
and we end up with process finished with exit code zero.

21844
00:01:20,010 --> 00:01:23,310
This is the moment where we want to generate a new file

21845
00:01:24,030 --> 00:01:28,410
and that file is going to be called states_to_learn.csv.

21846
00:01:29,070 --> 00:01:31,800
And I want you to generate the CSV

21847
00:01:31,830 --> 00:01:35,250
which is going to contain just the names of states

21848
00:01:35,610 --> 00:01:40,610
which have not been guessed by the user when they exit the game.

21849
00:01:41,820 --> 00:01:43,770
Have a think about how you would achieve this,

21850
00:01:44,040 --> 00:01:45,750
pause the video and give that a go.

21851
00:01:50,690 --> 00:01:53,300
All right. So let's think about this.

21852
00:01:53,600 --> 00:01:58,600
What we want to do is to take the guessed states and compare it against all

21853
00:01:59,840 --> 00:02:00,673
states,

21854
00:02:01,100 --> 00:02:05,240
and then we want to create a new list of all the missing states.

21855
00:02:05,720 --> 00:02:10,720
So let's create a new list called missing_states and then we can use a for loop

21856
00:02:12,770 --> 00:02:17,270
to loop through each of the states inside all of the states.

21857
00:02:17,780 --> 00:02:22,780
And if we find that a state is not in the guessed_states,

21858
00:02:23,930 --> 00:02:25,820
well, then that means it's missing, right?

21859
00:02:26,030 --> 00:02:30,590
So then we can tap into our missing states and append this state. And 

21860
00:02:32,360 --> 00:02:33,260
by the end of this,

21861
00:02:33,290 --> 00:02:37,430
we should end up with a list of all of the missing states.

21862
00:02:38,060 --> 00:02:42,530
So let's test this code. So I'm just going to type in a few states,

21863
00:02:42,680 --> 00:02:47,660
some of the ones beginning with A, so Alaska, um,

21864
00:02:47,720 --> 00:02:48,830
Arizona,

21865
00:02:49,280 --> 00:02:51,680
Um, uh,

21866
00:02:51,740 --> 00:02:55,550
Arkansas,

21867
00:02:56,780 --> 00:02:59,620
and what's the last one, Alabama.

21868
00:03:02,350 --> 00:03:05,890
Okay. So I think that's all of the states beginning with A,

21869
00:03:06,610 --> 00:03:11,610
so now I'm going to hit exit and it's going to give me a list of all the states

21870
00:03:12,910 --> 00:03:16,240
that I'm missing. So if we take a look at all the A states,

21871
00:03:16,330 --> 00:03:20,500
if we compare it against this list of 50 states, there's no Alabama,

21872
00:03:20,500 --> 00:03:24,910
there's no Alaska, and there is no Arkansas because I guessed it correctly.

21873
00:03:25,210 --> 00:03:28,660
So this is now just a list of all the ones I didn't manage to get.

21874
00:03:29,650 --> 00:03:33,820
So now how can we turn this list into a CSV?

21875
00:03:35,110 --> 00:03:35,440
Well,

21876
00:03:35,440 --> 00:03:40,440
we can create a new data and that new data is going to be a data frame

21877
00:03:42,250 --> 00:03:45,250
which is created from our missing_states.

21878
00:03:45,700 --> 00:03:48,910
So this is just going to be a one column data frame.

21879
00:03:50,410 --> 00:03:52,180
Once we've created that new data,

21880
00:03:52,240 --> 00:03:55,990
then we can go ahead and save it as a CSV.

21881
00:03:56,410 --> 00:04:01,270
And we're going to call that states_to_learn.csv,

21882
00:04:01,900 --> 00:04:04,540
just as we've typed here. Now,

21883
00:04:04,540 --> 00:04:07,990
when I run this code and I've typed

21884
00:04:10,180 --> 00:04:13,600
all of the A states, and now I hit exit.

21885
00:04:14,050 --> 00:04:16,839
Then you can see we've got a new file

21886
00:04:16,839 --> 00:04:20,079
that's just been generated fresh out of the press

21887
00:04:20,200 --> 00:04:25,200
and it is our states to learn with all 44 States that I'm missing from my game.

21888
00:04:29,320 --> 00:04:31,870
I hope you had fun building this game with me,

21889
00:04:32,080 --> 00:04:36,220
and I would love to know how many states you can name the first time you play

21890
00:04:36,220 --> 00:04:39,760
this game. Cause obviously the more you play it, the more you get better.

21891
00:04:39,910 --> 00:04:43,990
And I hope you'll use this as an educational tool. If you have students,

21892
00:04:43,990 --> 00:04:46,330
if you are a geography teacher, if you have kids,

21893
00:04:46,690 --> 00:04:50,500
you can get them to play with this awesome program that you've built.

21894
00:04:50,920 --> 00:04:54,220
Remember what we've done here can be endlessly customized.

21895
00:04:54,550 --> 00:04:56,740
You can make a version for your own country,

21896
00:04:56,800 --> 00:05:00,640
or you can make one for the whole world where you have to name each country on

21897
00:05:00,640 --> 00:05:03,880
the world map, or you can do some other sort of list,

21898
00:05:04,060 --> 00:05:08,890
like name all of the plants on an image or name all of the animals.

21899
00:05:09,100 --> 00:05:10,840
The world is really your oyster

21900
00:05:10,900 --> 00:05:15,900
and I can't wait to see what you've created using your imagination and how

21901
00:05:16,060 --> 00:05:19,060
you've customized the code. So once you've done that,

21902
00:05:19,090 --> 00:05:24,090
be sure to post it in the Q/A of this lesson and so that we can all play and

21903
00:05:24,430 --> 00:05:25,510
admire your code.



21904
00:00:00,120 --> 00:00:04,730
Hey guys, welcome to Day 26 of 100 Days of Code. Today

21905
00:00:04,820 --> 00:00:08,480
we're going to be learning all about lists and dictionary comprehensions.

21906
00:00:08,900 --> 00:00:12,500
This is something that's actually really unique to the Python language,

21907
00:00:12,890 --> 00:00:16,970
and it's something that's going to cut down on a lot of the code that we have to

21908
00:00:16,970 --> 00:00:20,030
write when we're working with lists and dictionaries.

21909
00:00:20,630 --> 00:00:22,100
And by the end of today,

21910
00:00:22,280 --> 00:00:27,260
we will build a project to use the NATO phonetic alphabets so that

21911
00:00:27,260 --> 00:00:31,490
we can spell out various things on the telephone. For example,

21912
00:00:31,490 --> 00:00:33,920
whenever you need to give your name and you have to spell it out,

21913
00:00:34,220 --> 00:00:36,260
they might not hear which letter you said.

21914
00:00:36,320 --> 00:00:38,840
So normally you'll say something like A

21915
00:00:38,840 --> 00:00:41,450
for alpha, n for november, g for golf.

21916
00:00:41,930 --> 00:00:46,550
This is what we're aiming to create; a program that works in the console

21917
00:00:46,910 --> 00:00:51,350
and it allows us to enter a word. So for example, I just put in my name

21918
00:00:51,410 --> 00:00:55,310
which I happen to have to spell on the phone many times and I hit enter,

21919
00:00:55,550 --> 00:01:00,550
then it'll return a list of all of the NATO phonetic alphabet that matches each

21920
00:01:00,980 --> 00:01:02,810
of the letters in my name

21921
00:01:03,020 --> 00:01:06,440
so I can just read it out to the other person over the phone, alpha,

21922
00:01:06,440 --> 00:01:08,570
november, golf, echo, Lima, alpha.

21923
00:01:09,290 --> 00:01:13,580
And that way I can use this little tool and be able to spell any word I want

21924
00:01:13,820 --> 00:01:16,160
easily using the NATO phonetic alphabet.

21925
00:01:16,400 --> 00:01:21,350
So I hope you're excited to learn about this big topic of comprehensions, and

21926
00:01:21,380 --> 00:01:24,620
once you're ready, head over to the next lesson, and let's get started.


21927
00:00:00,480 --> 00:00:05,480
The big topic that we're going to explore today is a concept known as a list

21928
00:00:05,970 --> 00:00:08,850
comprehension. And as I mentioned before,

21929
00:00:08,850 --> 00:00:11,880
this is something that's really unique to the Python language.

21930
00:00:12,210 --> 00:00:13,980
In many other programming languages,

21931
00:00:14,010 --> 00:00:17,490
you don't actually have access to something like this.

21932
00:00:17,520 --> 00:00:19,500
There's nothing that really compares to it.

21933
00:00:19,830 --> 00:00:22,350
And it's something that Python developers really,

21934
00:00:22,350 --> 00:00:26,820
really love because it cuts down on the amount of typing and it just makes the

21935
00:00:26,820 --> 00:00:30,840
code a lot shorter, and in most cases, a lot easier to read.

21936
00:00:31,520 --> 00:00:36,410
So what exactly is a list comprehension? Well, it's a case where you 

21937
00:00:36,410 --> 00:00:36,770
create

21938
00:00:36,770 --> 00:00:41,770
a new list from a previous list. So far we've been doing that using for loops.

21939
00:00:42,200 --> 00:00:45,830
So for example, if I have a list of numbers, 1, 2, 3,

21940
00:00:46,280 --> 00:00:51,280
and I want to create a new list where each number is increased by one,

21941
00:00:52,370 --> 00:00:52,520
well

21942
00:00:52,520 --> 00:00:57,260
then I would use a for loop creating a new empty list and then looping through

21943
00:00:57,350 --> 00:01:01,670
each of the numbers in that list in order to add one to

21944
00:01:01,700 --> 00:01:02,810
each of those numbers.

21945
00:01:03,170 --> 00:01:08,170
And then I would append each of those increased numbers to my new list.

21946
00:01:08,870 --> 00:01:13,100
And I would end up with a new list that consists of three items,

21947
00:01:13,370 --> 00:01:17,810
and it will be 2, 3, and 4. Now using list comprehension

21948
00:01:17,900 --> 00:01:22,520
we can take these four lines of code and turn it into one.

21949
00:01:23,060 --> 00:01:27,740
And the way that we create a list comprehension looks something like this.

21950
00:01:28,340 --> 00:01:32,450
I like to use the keyword method where you type out the list comprehension

21951
00:01:32,450 --> 00:01:33,283
keywords,

21952
00:01:33,530 --> 00:01:38,390
and then replace each of the words with the actual item in your code.

21953
00:01:39,170 --> 00:01:43,520
The way that we would create any list comprehension is we will create the name

21954
00:01:43,550 --> 00:01:48,550
of the new list and instead of creating a empty list and then having to append

21955
00:01:49,040 --> 00:01:53,420
to it or populate it, we actually going to create it straight in the same line.

21956
00:01:53,840 --> 00:01:58,220
So we open up a set of square brackets to denote that we're creating a new list,

21957
00:01:58,640 --> 00:02:03,170
and then we have this new _item for item in list

21958
00:02:03,320 --> 00:02:06,020
keyword pattern. Here's how it would work.

21959
00:02:06,050 --> 00:02:08,419
Let's take that same thing that we did before

21960
00:02:08,660 --> 00:02:10,520
where we took you a list of numbers

21961
00:02:10,580 --> 00:02:14,240
and we created a new list where each number is increased by one,

21962
00:02:14,480 --> 00:02:17,300
and let's see how we would do it using list comprehension.

21963
00:02:18,590 --> 00:02:22,040
So the first keyword I'm going to replace is the list.

21964
00:02:22,280 --> 00:02:26,210
So this is the list that we're going to iterate through. And in our case,

21965
00:02:26,240 --> 00:02:30,110
it's this list of numbers. So let's replace that list

21966
00:02:30,110 --> 00:02:33,440
keyword with the actual list, which is numbers.

21967
00:02:34,010 --> 00:02:38,210
The next thing that is easy to understand is each item in the list.

21968
00:02:38,210 --> 00:02:41,600
So we can call this anything we want. In the for loop here,

21969
00:02:41,600 --> 00:02:46,190
we called it n, so why don't we go ahead and call it n again?

21970
00:02:47,870 --> 00:02:52,700
This n is going to represent each of the numbers in that list of numbers

21971
00:02:52,760 --> 00:02:54,740
just as it does in this for-loop.

21972
00:02:55,460 --> 00:02:59,590
And the final keyword that we haven't yet replaced is the new_item.

21973
00:03:00,010 --> 00:03:04,270
So what do we want each of the new items to be in this new list?

21974
00:03:04,690 --> 00:03:05,200
Well,

21975
00:03:05,200 --> 00:03:10,200
each of the new items is basically calculated by taking n and then adding one

21976
00:03:10,750 --> 00:03:11,500
to it.

21977
00:03:11,500 --> 00:03:16,500
So this line is the expression or the code that we need to execute in order to

21978
00:03:17,560 --> 00:03:21,910
get a new_item. So this becomes our final list

21979
00:03:21,910 --> 00:03:25,060
comprehension. We have our lists of numbers

21980
00:03:25,150 --> 00:03:29,620
and then we create a new list where we loop through each of the numbers, n,

21981
00:03:29,950 --> 00:03:31,750
inside this list of numbers

21982
00:03:32,080 --> 00:03:37,080
and then for each of the n, we add one to it in order to create the final list.

21983
00:03:37,570 --> 00:03:42,310
So when you look at a list comprehension just like this as in the real code,

21984
00:03:42,610 --> 00:03:45,700
it can be a little bit confusing to see how would you read it,

21985
00:03:45,730 --> 00:03:47,260
which order does it happen.

21986
00:03:47,620 --> 00:03:50,920
But when you're using this keyword method that I often use

21987
00:03:50,920 --> 00:03:55,240
where you just type out what you need to have inside a list comprehension,

21988
00:03:55,240 --> 00:03:58,390
you need a name for the new list, you need a set of square brackets

21989
00:03:58,660 --> 00:04:02,680
and then inside the square brackets, you have new_item for item in list.

21990
00:04:03,010 --> 00:04:07,390
Then you go through it replacing each of the keywords, list item

21991
00:04:07,390 --> 00:04:12,340
and new_item. So I want you to have a go at actually writing out this code.

21992
00:04:12,640 --> 00:04:15,310
Go ahead and create a new PyCharm project,

21993
00:04:15,670 --> 00:04:18,220
and I want you to go into the Python console.

21994
00:04:18,700 --> 00:04:21,940
We're not actually going to be writing code inside our main.py.

21995
00:04:22,300 --> 00:04:26,770
And the reason is because the console allows us to write code line by line

21996
00:04:27,070 --> 00:04:31,150
and then we can view our variables really easily on the right-hand side pane

21997
00:04:31,150 --> 00:04:35,650
here. For example, if I have my list of numbers, 1, 2, 3,

21998
00:04:36,130 --> 00:04:39,310
and then I have to write out my list comprehension

21999
00:04:39,340 --> 00:04:42,610
where we create our new list which I'll call new_numbers,

22000
00:04:43,150 --> 00:04:46,510
and then we have to create our list comprehension.

22001
00:04:46,600 --> 00:04:51,600
So the way to remember it is new_item for item in list.

22002
00:04:52,660 --> 00:04:57,660
So now go ahead and write this out and see if you can remember how we actually

22003
00:04:58,150 --> 00:05:02,830
structure our list comprehension and see if you can get it to work within your

22004
00:05:02,830 --> 00:05:06,340
PyCharm console. So pause the video, give that a go.

22005
00:05:08,170 --> 00:05:11,500
All right. So our list is of course, this list of numbers.

22006
00:05:11,530 --> 00:05:13,180
So let's replace that first.

22007
00:05:13,660 --> 00:05:16,930
And then for each of the items in that list of numbers, well,

22008
00:05:16,930 --> 00:05:21,070
we can call it anything we want. So I'm just going to call it n or num,

22009
00:05:21,310 --> 00:05:25,300
it doesn't matter. But as long as you're consistent in using it

22010
00:05:25,540 --> 00:05:26,950
when you create the new item

22011
00:05:27,340 --> 00:05:30,670
because each new item is going to be the n,

22012
00:05:30,730 --> 00:05:34,210
which is each number in the list, +1.

22013
00:05:34,750 --> 00:05:36,400
So now when I hit enter,

22014
00:05:36,460 --> 00:05:41,410
you can see I've got this new list called new_numbers created from the previous

22015
00:05:41,410 --> 00:05:45,550
list, numbers, and this now has the same number of items

22016
00:05:45,580 --> 00:05:48,160
but each item is now increased by one.

22017
00:05:49,480 --> 00:05:52,960
Now it's important to remember that when we say list comprehension,

22018
00:05:53,200 --> 00:05:56,680
it doesn't strictly mean that you can only work with list.

22019
00:05:56,930 --> 00:06:00,710
You can work with other sequences like strings, for example.

22020
00:06:00,950 --> 00:06:05,630
So here I've got a variable called name, which is just a string. It's the word

22021
00:06:05,690 --> 00:06:06,523
Angela.

22022
00:06:06,770 --> 00:06:11,770
And I'm creating a new list by using a list comprehension that has this kind of

22023
00:06:13,520 --> 00:06:14,510
code. Now,

22024
00:06:14,510 --> 00:06:19,510
I want you to pause for a second and think about what would be in this new list,

22025
00:06:19,610 --> 00:06:24,050
what would it look like? And then I want you to try it out inside PyCharm.

22026
00:06:24,350 --> 00:06:28,460
So pause the video now. All right.

22027
00:06:28,460 --> 00:06:32,900
So name equals Angela, this is the variable that we're working with.

22028
00:06:33,500 --> 00:06:35,630
And then I'm going to create a new list

22029
00:06:35,720 --> 00:06:39,290
which I'll call letters_list.

22030
00:06:40,550 --> 00:06:44,600
This new list is going to be created using my list comprehension.

22031
00:06:44,990 --> 00:06:49,990
So it's going to be letter for letter in name. And what this does is it takes

22032
00:06:53,510 --> 00:06:56,330
this sequence, this string,

22033
00:06:56,780 --> 00:06:59,750
it goes through each of the letters in that string

22034
00:07:00,230 --> 00:07:04,640
and then it adds each of the letters into this new list.

22035
00:07:05,060 --> 00:07:08,210
So when I hit enter, you can see, this is what letters_list

22036
00:07:08,210 --> 00:07:13,010
looks like. It's just split off my string into individual letters

22037
00:07:13,280 --> 00:07:15,950
and it's added it into a brand new list.

22038
00:07:17,390 --> 00:07:20,390
As I mentioned, these things in Python

22039
00:07:20,390 --> 00:07:25,390
like a list or a string or a range or tuple, they're called sequences because

22040
00:07:27,800 --> 00:07:32,630
they have a specific order. And when you perform a list comprehension,

22041
00:07:32,660 --> 00:07:37,280
it's going to take that sequence and it's going to go through it in order either

22042
00:07:37,280 --> 00:07:41,870
be it the letters in the string or the items in a list.

22043
00:07:42,230 --> 00:07:46,280
And then it's going to take each of those items in that correct order

22044
00:07:46,490 --> 00:07:50,450
and then do something with it, either add one to it, or in this case,

22045
00:07:50,450 --> 00:07:54,650
do nothing and just add it to a new list. Here's a challenge for you.

22046
00:07:55,010 --> 00:07:56,720
Can you take the range,

22047
00:07:56,750 --> 00:08:01,670
which is also a sequence that we can iterate through, and then create a range

22048
00:08:01,670 --> 00:08:03,440
between 1 and 5?

22049
00:08:03,800 --> 00:08:07,940
And remember that the way that the range works is it's going to take 1 and

22050
00:08:07,940 --> 00:08:12,590
then 2, and then 3 and then 4, but it's not going to go up to 5.

22051
00:08:13,070 --> 00:08:17,630
I want you to loop through this range and then create a list where each of the

22052
00:08:17,630 --> 00:08:20,630
numbers in the range is doubled.

22053
00:08:21,170 --> 00:08:25,760
And the final list should look like this. It will be 2, 4, 6,

22054
00:08:25,820 --> 00:08:29,780
and 8. Pause the video and see if you can complete this challenge.

22055
00:08:32,450 --> 00:08:34,730
All right. So let's create our new lists

22056
00:08:34,760 --> 00:08:37,039
which I'm just going to call range_list.

22057
00:08:37,429 --> 00:08:40,340
And we're going to use that keyword pattern to remind ourselves.

22058
00:08:40,610 --> 00:08:44,570
So it was going to be new_item for item in list.

22059
00:08:45,110 --> 00:08:48,380
And this list, in this case, is actually not going to be a list,

22060
00:08:48,380 --> 00:08:50,810
it is going to be a range between 1 and 5.

22061
00:08:51,320 --> 00:08:55,220
And then each of the items, we get to give it a name, which I'll just call num.

22062
00:08:55,710 --> 00:09:00,510
And then in this new list, what is each new item going to be? Well,

22063
00:09:00,510 --> 00:09:05,040
it's going to be num multiplied by 2. So now when I hit enter,

22064
00:09:05,070 --> 00:09:08,640
I get my range_list, which is 2, 4, 6, 8.

22065
00:09:09,030 --> 00:09:11,760
So its loop through each of the numbers in the range

22066
00:09:11,940 --> 00:09:14,340
and its multiplied each of those numbers by 2,

22067
00:09:14,670 --> 00:09:18,750
and then its created a new list using each of those numbers.

22068
00:09:19,920 --> 00:09:24,420
Now the final thing I want to show you regarding list comprehensions is that

22069
00:09:24,420 --> 00:09:28,590
there's also such a thing as a conditional list comprehension.

22070
00:09:29,010 --> 00:09:31,860
This takes our keywords a little bit further.

22071
00:09:31,880 --> 00:09:35,030
Whereas previously we stopped right here,

22072
00:09:35,900 --> 00:09:40,730
new_item for item in list. We can also tag on two more keywords;

22073
00:09:40,850 --> 00:09:42,410
if and a test.

22074
00:09:43,070 --> 00:09:48,070
What this is going to allow us to do is to only add this new item and only to

22075
00:09:48,800 --> 00:09:53,660
perform this code if the test actually passes.

22076
00:09:54,920 --> 00:09:59,780
Here's an example. I've got a bunch of names here; Alex, Beth, Caroline,

22077
00:09:59,780 --> 00:10:02,120
Dave, Eleanor, and Freddy. Now,

22078
00:10:02,120 --> 00:10:06,980
one of the neat things that you can actually do with the Python console is not

22079
00:10:06,980 --> 00:10:10,160
only can you view what all of the variables are equal to,

22080
00:10:10,370 --> 00:10:12,530
but you can also edit them if you have an issue.

22081
00:10:13,010 --> 00:10:17,300
The sharp-eyed amongst you will know that I've actually made a typo in this

22082
00:10:17,300 --> 00:10:21,800
name, it's not Elanor, its actually spelled a little bit differently.

22083
00:10:22,280 --> 00:10:27,020
So what I can do on the right-hand pane here is I can right-click on that piece

22084
00:10:27,020 --> 00:10:30,860
of data that I want to change and then click set value,

22085
00:10:31,280 --> 00:10:33,740
and then actually change the data here.

22086
00:10:35,120 --> 00:10:39,530
Now that I've got that spelled out correctly, if I type names and hit enter,

22087
00:10:39,770 --> 00:10:44,360
you can see it's now been corrected and this is my new list of names.

22088
00:10:45,170 --> 00:10:46,820
So using this list of names,

22089
00:10:47,180 --> 00:10:50,030
I'm going to try and create a new list of names,

22090
00:10:50,360 --> 00:10:52,460
but I only want the short names.

22091
00:10:52,550 --> 00:10:57,550
I only want the names which is made up of four letters or less, like Alex or

22092
00:10:57,620 --> 00:10:58,453
Beth.

22093
00:10:58,700 --> 00:11:02,750
The way I would do this is I would create a new list,

22094
00:11:02,780 --> 00:11:06,530
which is called short_names. And then I would use my list comprehension.

22095
00:11:06,800 --> 00:11:11,720
And remember, in this case, the keywords are new_item

22096
00:11:11,810 --> 00:11:16,550
for item in list. And then if and a test.

22097
00:11:17,540 --> 00:11:19,670
So let's fill in the easy parts first.

22098
00:11:20,060 --> 00:11:24,290
The list is going to be our list of names, the item I can call it

22099
00:11:24,290 --> 00:11:29,210
anything I want. I'll just call it name in terms of the singular form of names.

22100
00:11:29,720 --> 00:11:33,770
And then once I loop through each of the names inside my list of names,

22101
00:11:34,100 --> 00:11:38,090
what is the new item going to be? Well, it's actually going to be unmodified.

22102
00:11:38,090 --> 00:11:42,350
It's just going to be that same name. But in this case,

22103
00:11:42,380 --> 00:11:46,940
I'm only going to add that name to the list if it passes this test.

22104
00:11:47,540 --> 00:11:51,140
And this test is going to look at the length of the name

22105
00:11:51,260 --> 00:11:53,030
which I created here,

22106
00:11:53,290 --> 00:11:57,940
so if I named this n then I would be testing it against n and it would be adding

22107
00:11:57,940 --> 00:12:01,060
n as well. But because I've called it name

22108
00:12:01,060 --> 00:12:04,300
so I'm going to use that name right here in the condition.

22109
00:12:04,810 --> 00:12:07,900
So if the length of the name is less than five,

22110
00:12:08,230 --> 00:12:11,620
so it has four or less characters,

22111
00:12:12,370 --> 00:12:17,350
then I'm going to add that name to my new list. Now, when I hit enter,

22112
00:12:17,710 --> 00:12:22,710
you can see that I've got this new list of short names and it only contains the

22113
00:12:22,870 --> 00:12:24,970
names, Alex, Beth and Dave.

22114
00:12:25,630 --> 00:12:30,580
So this list comprehension is now a little bit more complex because the first

22115
00:12:30,580 --> 00:12:35,580
thing it does is it goes through each of the names inside this list of names,

22116
00:12:36,100 --> 00:12:41,080
it checks each of those names for its length. And if the length is five,

22117
00:12:41,350 --> 00:12:44,530
then it adds the name to this new list.

22118
00:12:46,180 --> 00:12:47,620
Now here's a challenge for you.

22119
00:12:48,130 --> 00:12:52,120
I want you to take all of the names from this list of names

22120
00:12:52,570 --> 00:12:57,340
which are made up of five letters or more, so basically Caroline,

22121
00:12:57,370 --> 00:12:58,720
Eleanor and Freddie,

22122
00:12:59,050 --> 00:13:04,050
and I want you to turn each of these names to the uppercase version.

22123
00:13:04,720 --> 00:13:09,720
What you should end up with is a list where you have CAROLINE in all caps,

22124
00:13:10,960 --> 00:13:15,430
ELEANOR in all caps and FREDDIE in all caps.

22125
00:13:15,670 --> 00:13:17,470
But of course, you're not going to just type this out,

22126
00:13:17,470 --> 00:13:19,420
you're going to use list comprehension.

22127
00:13:19,930 --> 00:13:22,900
Pause the video and see if you can complete this challenge.

22128
00:13:25,060 --> 00:13:27,790
All right. I'm going to call this new list long_names,

22129
00:13:27,820 --> 00:13:32,170
cause I haven't eaten for a while and I lack imagination. Now,

22130
00:13:32,260 --> 00:13:34,450
in order to create this list of long names,

22131
00:13:34,510 --> 00:13:37,450
I'm going to use that new keyword pattern that we learned,

22132
00:13:37,780 --> 00:13:41,530
which is new item for item in list

22133
00:13:41,800 --> 00:13:46,300
if test. The list is, again, going to be our list of names.

22134
00:13:46,780 --> 00:13:49,540
Each of the items we can call it anything we want,

22135
00:13:49,690 --> 00:13:54,430
but I'm going to call it name. And if you find that this is too similar to this,

22136
00:13:54,700 --> 00:13:55,870
you can call anything you want.

22137
00:13:55,900 --> 00:14:00,900
Nom, you can use French or you can just write n or you can do anything you want.

22138
00:14:02,830 --> 00:14:07,830
This name that we're looping through is going to be tested in order to see if

22139
00:14:08,350 --> 00:14:10,120
we're actually going to create a new item.

22140
00:14:10,600 --> 00:14:15,600
So the test, in this case, is we're checking to see if the length of the name is

22141
00:14:15,760 --> 00:14:17,290
now greater than five.

22142
00:14:19,090 --> 00:14:23,890
And if this name that we're currently looping through passes this test,

22143
00:14:24,160 --> 00:14:27,340
then we get to specify what the new item should be.

22144
00:14:27,940 --> 00:14:31,870
So the new item is going to be that particular name that passed the test,

22145
00:14:32,260 --> 00:14:34,060
but then it's going to be uppercased,

22146
00:14:34,360 --> 00:14:38,950
so we're going to call name.upper in order to create the new item

22147
00:14:38,980 --> 00:14:42,850
that's going to be added to the list. So now once I hit enter,

22148
00:14:43,030 --> 00:14:47,770
you can see the new list that I've created, long_names, has Caroline,

22149
00:14:47,800 --> 00:14:50,920
Eleanor and Freddy, all in uppercase.

22150
00:14:51,560 --> 00:14:54,770
Essentially, we looped through each of the names in the list,

22151
00:14:55,010 --> 00:14:58,370
we took each of those names and checked that they'ree longer than five.

22152
00:14:58,760 --> 00:15:00,860
If they were, in fact, longer than five,

22153
00:15:00,920 --> 00:15:04,640
then we looked at this part of the code to see what we should do with each of

22154
00:15:04,640 --> 00:15:07,910
those names. And in our case, we've turned it into uppercase.

22155
00:15:08,600 --> 00:15:12,020
So there's quite a lot of theory covered in today's lesson.

22156
00:15:12,320 --> 00:15:15,260
And if you want to see the code that I've been writing so far,

22157
00:15:15,530 --> 00:15:20,420
then you can always head over to the day-26-end Repl.it in order to either

22158
00:15:20,420 --> 00:15:25,310
download it or just read through the code that I've been typing. Now,

22159
00:15:25,340 --> 00:15:27,800
in order to be able to fully understand what's going on,

22160
00:15:28,010 --> 00:15:31,580
you can't just watch me talk about it. You have to practice.

22161
00:15:31,850 --> 00:15:33,230
So in the coming lessons,

22162
00:15:33,260 --> 00:15:38,090
I've got a whole bunch of exercises for you to practice using and creating list

22163
00:15:38,090 --> 00:15:41,480
comprehensions for yourself. And that way, once you've done the drills,

22164
00:15:41,750 --> 00:15:45,050
you've done the code press-ups, then you'll be able to show off your list

22165
00:15:45,050 --> 00:15:49,490
comprehension muscles. For all of that and more, I'll see you on the next lesson.


22166
00:00:00,870 --> 00:00:05,250
Now it's time to put what you've learned into practice and to actually learn

22167
00:00:05,250 --> 00:00:10,250
through doing. So if you go to Repl.it where you are going to go to day 26.1 List

22168
00:00:11,520 --> 00:00:16,050
Comprehension, and you're going to complete this challenge. So pause the video,

22169
00:00:16,379 --> 00:00:17,100
head over there,

22170
00:00:17,100 --> 00:00:20,370
read the instructions and see if you can complete the challenge.

22171
00:00:20,760 --> 00:00:23,940
Once you're done, head back over here and I'll go through the solution with you.

22172
00:00:26,400 --> 00:00:27,720
All right. So in this case,

22173
00:00:27,780 --> 00:00:32,460
what we're trying to do is we're taking this list of numbers and we're basically

22174
00:00:32,460 --> 00:00:36,750
going to write a single line of code here to change it

22175
00:00:36,960 --> 00:00:41,670
so that we end up with a new list where each number is squared.

22176
00:00:42,090 --> 00:00:45,570
A square number is basically just the number multiplied by itself.

22177
00:00:45,990 --> 00:00:50,280
So for example, four squared is sixteen, two squared is four,

22178
00:00:50,310 --> 00:00:54,930
three squared is nine. So let's go ahead and create our new list

22179
00:00:55,290 --> 00:00:57,690
which it needs to be called squared numbers,

22180
00:00:57,720 --> 00:00:59,310
because that's what we're going to print out.

22181
00:00:59,370 --> 00:01:02,130
And that's what the automated testing is going to be looking for.

22182
00:01:02,700 --> 00:01:07,620
This new list is going to be created using a list comprehension,

22183
00:01:07,920 --> 00:01:09,990
so we're going to use our keyword method,

22184
00:01:10,440 --> 00:01:14,400
new_item for item in list.

22185
00:01:14,970 --> 00:01:19,020
And in this case, we actually don't need to do any conditional checking.

22186
00:01:19,050 --> 00:01:21,750
We're taking every single one of these items,

22187
00:01:22,050 --> 00:01:25,740
so this is the keyword that we need to fill in. The list,

22188
00:01:25,740 --> 00:01:29,520
in this case, is our list of numbers. Each of the items,

22189
00:01:29,520 --> 00:01:32,340
we can call it anything we want, but I'm going to call it num.

22190
00:01:32,790 --> 00:01:35,820
And this new item is going to be num,

22191
00:01:35,880 --> 00:01:39,750
so each of the items in that list, multiplied by itself.

22192
00:01:40,110 --> 00:01:44,490
You can either do it like this which will get you the output that you need.

22193
00:01:44,820 --> 00:01:48,930
Alternatively, you can use Python's built in exponents,

22194
00:01:49,170 --> 00:01:52,350
which is just num**2.

22195
00:01:52,680 --> 00:01:57,510
And this will square that number, which will give you exactly the same results.

22196
00:01:58,080 --> 00:02:01,110
Now, you're ready to head over to the next lesson where we've got 

22197
00:02:01,110 --> 00:02:03,120
another list comprehension exercise.


22198
00:00:00,150 --> 00:00:02,850
All right. Let's keep working while our brain muscles are hot.

22199
00:00:03,450 --> 00:00:06,720
Now we're going to go over to day 26.2,

22200
00:00:07,020 --> 00:00:09,690
our second list comprehension exercise.

22201
00:00:10,260 --> 00:00:12,120
So head over there, pause the video,

22202
00:00:12,120 --> 00:00:16,170
read through the instructions and try to complete the code exercise.

22203
00:00:16,860 --> 00:00:19,860
I'll see you on the other side where we'll go through the solution together.

22204
00:00:20,250 --> 00:00:24,750
Pause the video now. Okay.

22205
00:00:24,750 --> 00:00:26,280
So in this exercise,

22206
00:00:26,430 --> 00:00:29,970
what we're trying to do is we're going to take this list of numbers

22207
00:00:30,420 --> 00:00:31,950
and we're going to write a list

22208
00:00:31,950 --> 00:00:34,920
comprehension do create a new list called results.

22209
00:00:35,400 --> 00:00:37,950
Now we're only going to need one line of code again,

22210
00:00:38,130 --> 00:00:40,650
because we're going to be using a list comprehension.

22211
00:00:41,160 --> 00:00:46,140
And what we're going to do with our list comprehension is to take only the

22212
00:00:46,140 --> 00:00:50,520
numbers from this list of numbers which has an even number.

22213
00:00:51,270 --> 00:00:55,230
We should basically end up with only the two of the eight and thirty four,

22214
00:00:55,440 --> 00:00:58,170
because every other number in this list is odd.

22215
00:00:58,830 --> 00:01:02,100
We're going to create our results which is on your list,

22216
00:01:02,670 --> 00:01:04,470
and then we're going to put in our keywords.

22217
00:01:04,860 --> 00:01:09,030
So it's going to be new item for item in list,

22218
00:01:09,300 --> 00:01:10,380
and because this time

22219
00:01:10,380 --> 00:01:15,000
we're not taking every single item from the original list that we're looping

22220
00:01:15,000 --> 00:01:15,600
through,

22221
00:01:15,600 --> 00:01:20,460
we're going to need to add a if statement to make a conditional test.

22222
00:01:21,900 --> 00:01:23,610
So let's start with the easy thing.

22223
00:01:23,790 --> 00:01:26,910
The list that we're going to iterate through is our list of numbers.

22224
00:01:27,480 --> 00:01:32,310
Each of the items I'm going to call num, and for each of those numbers,

22225
00:01:32,640 --> 00:01:37,290
we're going to test to see if the number modulo by two,

22226
00:01:37,560 --> 00:01:41,880
which remember means number divided by two and then get the remainder.

22227
00:01:42,330 --> 00:01:45,360
If that remainder is equal to zero, well

22228
00:01:45,360 --> 00:01:50,360
then that means that that number is even. If you remember from previously,

22229
00:01:51,480 --> 00:01:56,220
we could use modulo to check if a number has any remainder.

22230
00:01:56,460 --> 00:01:59,910
So if I do three modulo two,

22231
00:02:00,030 --> 00:02:04,920
you can see that it has a remainder of one. But when I do six modular three,

22232
00:02:05,100 --> 00:02:08,610
that has no remainder because it can be cleanly divided.

22233
00:02:09,150 --> 00:02:11,190
So now that we've tested

22234
00:02:11,220 --> 00:02:14,820
if each number modulo two is equal to zero, well

22235
00:02:14,820 --> 00:02:17,550
then if that test passes,

22236
00:02:17,850 --> 00:02:20,970
then that particular number that passed the test

22237
00:02:21,060 --> 00:02:25,260
is going to be welcomed to this new list of results. So now when I hit run,

22238
00:02:25,290 --> 00:02:29,760
you can see the result that I get is the same as my expected results.

22239
00:02:30,540 --> 00:02:33,840
Now we've got one final list comprehension exercise for you.

22240
00:02:33,900 --> 00:02:37,470
So head over to the next lesson and complete the exercise.


22241
00:00:00,390 --> 00:00:04,980
All right. So we're now onto our final list comprehension exercise of the day.

22242
00:00:05,580 --> 00:00:10,260
And just a word of warning, this exercise is quite hard.

22243
00:00:10,710 --> 00:00:15,710
I decided that the previous two were a little bit easier and you've now kind of

22244
00:00:15,900 --> 00:00:20,430
warmed up and you've gotten going, it's time to test your knowledge on a number

22245
00:00:20,430 --> 00:00:21,330
of things that you've learned.

22246
00:00:22,200 --> 00:00:26,970
The first thing I want you to do is take a look at these two files and look at

22247
00:00:26,970 --> 00:00:29,340
the structure of the data in there,

22248
00:00:29,970 --> 00:00:34,650
and then have a read through the instruction and see if you can complete this

22249
00:00:34,680 --> 00:00:35,513
challenge.

22250
00:00:35,700 --> 00:00:40,700
This is the output that you are expecting when your new list called result is

22251
00:00:40,830 --> 00:00:44,100
printed. Pause the video and give this a go.

22252
00:00:47,670 --> 00:00:48,030
All right.

22253
00:00:48,030 --> 00:00:53,030
So we know that we've got two text files with a new piece of data on each line.

22254
00:00:54,900 --> 00:00:55,440
Essentially,

22255
00:00:55,440 --> 00:01:00,390
what we're trying to do here is we're trying to take the data in file1.

22256
00:01:00,390 --> 00:01:04,890
txt and compare it against the data in file2.txt,

22257
00:01:05,310 --> 00:01:09,750
and then we're trying to get a hold of the data which exists in both of these

22258
00:01:09,750 --> 00:01:14,670
files. So if file1 contained one, two, three, file2 contained two,

22259
00:01:14,670 --> 00:01:15,503
three, four,

22260
00:01:15,690 --> 00:01:20,250
then the result should be a list that contains the overlapping numbers.

22261
00:01:20,550 --> 00:01:24,750
Two and three exists in both files. Now,

22262
00:01:24,750 --> 00:01:29,370
in order to pass the test, the result must be a list that contains integers,

22263
00:01:29,430 --> 00:01:33,180
so whole numbers, not strings. So when you print it out,

22264
00:01:33,300 --> 00:01:37,470
if you see the numbers as they are, then that means they are integers.

22265
00:01:37,800 --> 00:01:40,560
But if you see quotation marks around each of the numbers,

22266
00:01:40,800 --> 00:01:42,450
then they are strings instead.

22267
00:01:42,900 --> 00:01:45,990
And our code checking is not going to allow that to pass.

22268
00:01:47,190 --> 00:01:52,190
The first thing we need to do is to use our read lines method that we've used

22269
00:01:52,320 --> 00:01:57,320
several times before to read the data from each of these files and create a list

22270
00:01:57,780 --> 00:02:00,780
from each line. Let's go ahead and do that.

22271
00:02:00,990 --> 00:02:05,430
So I'm going to use my with open and I'm going to tap into my file1.

22272
00:02:05,430 --> 00:02:09,000
txt, and I'm going to save this as file1.

22273
00:02:09,900 --> 00:02:13,710
And then this file is going to be read,

22274
00:02:13,950 --> 00:02:16,800
and I'm going to call file1.readlines,

22275
00:02:17,220 --> 00:02:22,220
and then I'm going to save this list to a new variable called file_1_data. And

22276
00:02:25,260 --> 00:02:27,510
notice how I've actually made a typo here

22277
00:02:27,510 --> 00:02:31,680
cause I want file1.txt instead of just file.text.

22278
00:02:32,010 --> 00:02:33,120
It's good that I spotted it.

22279
00:02:34,320 --> 00:02:39,320
And then we're going to do the same with file2 and change all of the places

22280
00:02:39,960 --> 00:02:40,890
where we have one.

22281
00:02:41,520 --> 00:02:45,180
So copying and pasting is always a little bit prone to error,

22282
00:02:45,360 --> 00:02:47,490
but hopefully we'll manage this time.

22283
00:02:48,270 --> 00:02:53,130
Now that I've got file_1_data and file_2_data which are both lists,

22284
00:02:53,490 --> 00:02:58,490
I can now think about how I can compare those two and create my new list

22285
00:02:59,440 --> 00:03:01,300
which is going to be called result.

22286
00:03:02,410 --> 00:03:07,410
Now result is a new list and I'm going to use my full list of keywords

22287
00:03:09,010 --> 00:03:12,670
inside this new list to create the list comprehension.

22288
00:03:13,000 --> 00:03:17,500
So new item for item in lists if test,

22289
00:03:18,340 --> 00:03:23,020
the list that I'm going to test is actually the first list.

22290
00:03:23,590 --> 00:03:27,460
I'm going to take the file_1_data which is a list of numbers,

22291
00:03:28,090 --> 00:03:33,090
and then I'm going to go through each of the numbers inside this list,

22292
00:03:35,350 --> 00:03:37,300
and then I'm going to do a check.

22293
00:03:37,900 --> 00:03:42,070
And the check is where this file2 is going to come into play.

22294
00:03:42,640 --> 00:03:44,200
So I'm going to check to see, well,

22295
00:03:44,290 --> 00:03:48,850
if this number that I'm looping through exists in,

22296
00:03:48,880 --> 00:03:50,350
remember the in keyword,

22297
00:03:50,620 --> 00:03:54,010
this file_2_data, this other list,

22298
00:03:54,340 --> 00:03:58,870
well then I'm going to include this number inside my new list.

22299
00:03:59,860 --> 00:04:04,360
So this number is going to go into the new list. At the moment when I hit run,

22300
00:04:04,420 --> 00:04:08,170
you can see them getting a whole bunch of strings. So in addition,

22301
00:04:08,200 --> 00:04:13,030
I have to modify this number so that I convert it into an integer.

22302
00:04:13,510 --> 00:04:17,649
So I end up with the same output as is expected here.

22303
00:04:19,390 --> 00:04:21,940
Did you remember all of the things that we've learned before

22304
00:04:21,940 --> 00:04:26,940
like the in and the with open and also the converting to int?

22305
00:04:27,790 --> 00:04:31,810
Did you manage to complete this challenge? If you had any trouble at all,

22306
00:04:31,960 --> 00:04:34,840
be sure to review the relevant parts, for example,

22307
00:04:35,080 --> 00:04:40,060
opening files or reading lines from the files which we covered in previous days.

22308
00:04:40,690 --> 00:04:43,540
Alternatively, if it's the list comprehension that's hard,

22309
00:04:43,930 --> 00:04:45,400
then be sure to review the list

22310
00:04:45,400 --> 00:04:50,020
comprehension lesson in today's course and make sure that you really understand

22311
00:04:50,020 --> 00:04:52,600
what's going on in the code before you continue.


22312
00:00:00,900 --> 00:00:05,580
Now the reason why we're learning about list comprehensions is because when we

22313
00:00:05,580 --> 00:00:07,980
created all US states game,

22314
00:00:08,490 --> 00:00:13,490
I realized that the code that we were writing could be a lot shorter if only we

22315
00:00:14,340 --> 00:00:15,840
knew about list comprehensions.

22316
00:00:16,260 --> 00:00:21,260
So I want you to head back over to your code for the US states game and open it

22317
00:00:21,930 --> 00:00:25,230
up. And I want you to look at this if statement.

22318
00:00:25,770 --> 00:00:28,560
So when the user types exit,

22319
00:00:29,070 --> 00:00:34,070
we create a new list of missing states in order to save it to a CSV file.

22320
00:00:36,570 --> 00:00:38,190
I want you to change this code

22321
00:00:38,220 --> 00:00:42,690
using your new knowledge of this comprehension and see if you can cut down this

22322
00:00:42,690 --> 00:00:44,820
code by three or four lines.

22323
00:00:45,660 --> 00:00:48,300
Pause the video and complete this challenge now.

22324
00:00:51,510 --> 00:00:55,860
All right. So instead of all of this, creating a new empty missing state

22325
00:00:55,860 --> 00:01:00,570
and then going through a for loop, we can simply do this in one line. So again,

22326
00:01:00,570 --> 00:01:05,570
it's going to be called missing_states and this is going to be a new list,

22327
00:01:06,330 --> 00:01:10,320
but this time it's going to be created using our list comprehension;

22328
00:01:10,830 --> 00:01:13,950
new item for item in list

22329
00:01:14,790 --> 00:01:15,900
if test.

22330
00:01:16,620 --> 00:01:20,850
The list in this case that we're looping through is all of our states.

22331
00:01:21,210 --> 00:01:23,910
So we're gonna replace that with all states. Now,

22332
00:01:23,970 --> 00:01:27,390
each of the items is basically a state in that list.

22333
00:01:28,020 --> 00:01:33,020
And the test that we're going to make is to see well if the state is not in the

22334
00:01:35,250 --> 00:01:39,270
guessed_states which has states added every time

22335
00:01:39,270 --> 00:01:41,010
the user makes a correct guess

22336
00:01:41,400 --> 00:01:45,330
so we can basically take this part of our previous code and put it here.

22337
00:01:45,870 --> 00:01:49,470
And in that case, then we're going to add this particular state

22338
00:01:49,530 --> 00:01:53,760
which pass this test into this new list.

22339
00:01:54,270 --> 00:01:55,380
This one line

22340
00:01:55,440 --> 00:02:00,440
basically will replace all four of these lines and it cuts down dramatically

22341
00:02:01,320 --> 00:02:02,340
on the amount of code.

22342
00:02:02,820 --> 00:02:07,620
And it reads relatively well as well. Add a state to this new list

22343
00:02:08,009 --> 00:02:11,130
if we loop through all the states in the list of states

22344
00:02:11,430 --> 00:02:14,520
and if that state is not in this list of guessed

22345
00:02:14,520 --> 00:02:16,860
states. List

22346
00:02:16,860 --> 00:02:21,860
comprehensions are super popular with Python developers and I hope through some

22347
00:02:22,500 --> 00:02:23,580
of these exercises

22348
00:02:23,580 --> 00:02:28,580
you can see why, just in terms of the sheer amount of code that it cuts down on

22349
00:02:28,980 --> 00:02:32,520
and how much it simplifies things. Now,

22350
00:02:32,580 --> 00:02:34,500
in addition to list comprehensions,

22351
00:02:34,800 --> 00:02:39,660
we can also do comprehensions with dictionaries. So in the next lesson,

22352
00:02:39,780 --> 00:02:40,980
that's what we're going to be looking at.


22353
00:00:00,450 --> 00:00:03,270
Now that you've seen how list comprehension works,

22354
00:00:03,570 --> 00:00:07,290
it's time to learn about another type of comprehension, dictionary

22355
00:00:07,290 --> 00:00:08,250
comprehensions.

22356
00:00:08,820 --> 00:00:13,820
This is also super useful because it allows us to create a new dictionary from

22357
00:00:14,940 --> 00:00:18,990
the values in a list or in a dictionary. For example,

22358
00:00:19,050 --> 00:00:21,120
we could write out our keywords like this.

22359
00:00:21,540 --> 00:00:24,180
We're going to create a new dictionary called new_dict,

22360
00:00:24,600 --> 00:00:29,250
and it's going to be created using this curly bracket now instead of square

22361
00:00:29,250 --> 00:00:33,420
brackets. And inside the comprehension, we get to set the new_key,

22362
00:00:33,750 --> 00:00:38,190
the new_value, and we get to loop through items in a list.

22363
00:00:38,430 --> 00:00:42,480
So any sort of iterable; a list, a range, a string, anything you want.

22364
00:00:42,810 --> 00:00:45,810
And this is the simplest form of dictionary comprehension.

22365
00:00:46,380 --> 00:00:51,380
Now remember that a dictionary comprehension is just a way of creating a

22366
00:00:51,690 --> 00:00:54,540
dictionary using this shortened syntax.

22367
00:00:55,020 --> 00:00:57,150
We could take this one step further.

22368
00:00:57,570 --> 00:01:02,570
We could also create a new dictionary based on the values in an existing

22369
00:01:03,600 --> 00:01:04,433
dictionary.

22370
00:01:04,709 --> 00:01:09,710
So we could take that dictionary and then get hold of all of the items inside

22371
00:01:10,080 --> 00:01:14,760
that dictionary, and then split it into a key and a value.

22372
00:01:15,210 --> 00:01:19,680
So now, we're looping through each of the keys and each of the values in all of

22373
00:01:19,680 --> 00:01:21,300
the items from the dictionary,

22374
00:01:21,840 --> 00:01:26,840
and we can use these key and value variables to create a new_key or a new_value.

22375
00:01:29,280 --> 00:01:33,300
And to go one step further for completion sake, we can, of course,

22376
00:01:33,480 --> 00:01:36,570
as always add our condition at the very end,

22377
00:01:36,690 --> 00:01:39,450
just like we did before with list comprehensions.

22378
00:01:40,050 --> 00:01:42,450
So let's see how this code works in practice.

22379
00:01:42,780 --> 00:01:44,790
I'm going to take my previous list of names

22380
00:01:44,940 --> 00:01:49,920
and then I'm going to click on this button to refresh my console so that all of

22381
00:01:49,920 --> 00:01:51,720
the previous variables get deleted.

22382
00:01:52,410 --> 00:01:56,400
So now I'm going to create a new list of names.

22383
00:01:57,120 --> 00:02:00,660
So I'm going to use the previous names I had before, and this is our list here.

22384
00:02:01,260 --> 00:02:05,400
Now, the next thing I'm going to do is I'm going to create a dictionary where I

22385
00:02:05,400 --> 00:02:09,509
generate a random score for each of these names.

22386
00:02:09,780 --> 00:02:14,780
So let's imagine we had a bunch of students and we wanted to create some random

22387
00:02:15,060 --> 00:02:19,170
scores for each of them so that they would get a random score between 1 and

22388
00:02:19,170 --> 00:02:22,740
100. Now for the teachers out there,

22389
00:02:22,740 --> 00:02:26,310
I really hope this is not what you do when you generate the students' scores.

22390
00:02:26,850 --> 00:02:30,450
But essentially we want to create a dictionary

22391
00:02:30,450 --> 00:02:35,430
which looks something like this. Each of the students in this list,

22392
00:02:35,550 --> 00:02:40,140
so let's start out with Alex. We want our dictionary to have a key,

22393
00:02:40,170 --> 00:02:43,080
which is the name of the student, and then a value,

22394
00:02:43,110 --> 00:02:45,240
which is their random score.

22395
00:02:45,750 --> 00:02:50,640
And we want to continue through that list of names until we've generated a

22396
00:02:50,640 --> 00:02:53,970
random score for each of them. That's the goal.

22397
00:02:54,090 --> 00:02:57,300
And now we have to use our dictionary comprehension.

22398
00:02:57,930 --> 00:03:01,540
Remember, when we're creating a new list using lists comprehension,

22399
00:03:01,570 --> 00:03:04,390
we're using square brackets. But now we're creating a dictionary

22400
00:03:04,390 --> 00:03:08,080
so we're going to use curly brackets. Now, inside these curly brackets,

22401
00:03:08,110 --> 00:03:10,750
I'm going to put down my usual list of keywords.

22402
00:03:10,840 --> 00:03:13,900
So it's going to be a new_key:

22403
00:03:13,960 --> 00:03:17,620
new_value that we're going to be adding to our new dictionary.

22404
00:03:18,160 --> 00:03:19,480
And then I'm going to do

22405
00:03:19,480 --> 00:03:23,770
a for item in list. In this case,

22406
00:03:23,800 --> 00:03:28,090
our list or our iterable is going to be all lists of names.

22407
00:03:28,810 --> 00:03:31,630
Now, even though in my keywords I always use lists,

22408
00:03:31,870 --> 00:03:34,450
it's just easier to imagine. But it's actually, in fact,

22409
00:03:34,450 --> 00:03:38,320
any sort of iterable like a range or a string or a tuple.

22410
00:03:38,890 --> 00:03:40,990
Once we've got our list of names,

22411
00:03:41,020 --> 00:03:43,450
we're going to name each of those names something,

22412
00:03:43,510 --> 00:03:45,220
and I'm just going to call it student.

22413
00:03:45,700 --> 00:03:49,900
So we're looping through all the students in our list of names here.

22414
00:03:50,470 --> 00:03:52,300
And for each of those students,

22415
00:03:52,330 --> 00:03:56,050
I'm going to create the student as the new key,

22416
00:03:56,650 --> 00:04:00,610
but the value is going to be a new, random number.

22417
00:04:01,030 --> 00:04:02,830
So in order to create a random number,

22418
00:04:02,830 --> 00:04:06,370
I'm going to have to first import the random module.

22419
00:04:06,760 --> 00:04:10,150
So I've cut out my previous code, imported random,

22420
00:04:10,270 --> 00:04:11,860
and let's paste that code back in.

22421
00:04:12,340 --> 00:04:17,339
So now we can replace the value for each of these dictionary entries with random

22422
00:04:18,070 --> 00:04:19,269
.randint,

22423
00:04:19,390 --> 00:04:23,530
and we can generate a random number between 1 and 100.

22424
00:04:24,040 --> 00:04:28,240
So now when I hit enter, you'll see our new students_scores

22425
00:04:28,240 --> 00:04:29,620
dictionary being created

22426
00:04:29,950 --> 00:04:34,360
and you can see we've got all of our students in our list of names, Alex, Beth,

22427
00:04:34,360 --> 00:04:35,710
Caroline, et cetera.

22428
00:04:35,980 --> 00:04:40,060
And each of them now have a new random score.

22429
00:04:40,810 --> 00:04:44,710
So it seems like everybody did pretty well other than Eleanor,

22430
00:04:44,860 --> 00:04:49,450
I guess. Random score generating seems to work. Now,

22431
00:04:49,480 --> 00:04:50,320
the next step,

22432
00:04:50,350 --> 00:04:53,260
we're going to take this a little bit further because this was quite simple.

22433
00:04:53,260 --> 00:04:57,190
We just did what we did before, which is looping through a list.

22434
00:04:57,550 --> 00:05:01,810
But now I want to loop through a dictionary. Luckily,

22435
00:05:01,810 --> 00:05:06,580
we've now created this brand, sparkling, new dictionary, our students_scores,

22436
00:05:07,030 --> 00:05:11,050
and I want to use that dictionary in my next dictionary comprehension.

22437
00:05:11,620 --> 00:05:15,640
So the next thing I want to do is to be able to create a dictionary called

22438
00:05:15,700 --> 00:05:19,750
passed_students. And this is going to be a dictionary

22439
00:05:19,780 --> 00:05:22,900
which looks through the dictionary of student_scores,

22440
00:05:22,900 --> 00:05:26,320
so imagine you have an entire high school where everybody's scores are logged

22441
00:05:26,710 --> 00:05:30,820
and you look at everybody who's got a score of 60 or over.

22442
00:05:31,210 --> 00:05:32,080
And then we're going to say, well,

22443
00:05:32,080 --> 00:05:35,920
those people have passed and everybody else has failed that year.

22444
00:05:36,640 --> 00:05:41,350
Essentially we should loop through this entire dictionary of items,

22445
00:05:41,620 --> 00:05:46,030
figure out which of these have a value that's equal to 60 or over 60,

22446
00:05:46,540 --> 00:05:51,070
and then we're gonna add those items back into this new dictionary

22447
00:05:51,130 --> 00:05:52,450
of passed_students.

22448
00:05:53,620 --> 00:05:58,550
So essentially, we'd probably end up with, um, Beth,

22449
00:05:58,580 --> 00:06:02,000
with Caroline, with Dave and with Freddy.

22450
00:06:02,510 --> 00:06:07,510
So it will still look pretty much the same as our students_scores dictionary.

22451
00:06:08,120 --> 00:06:11,870
So it would have something like Beth and then colon her score,

22452
00:06:11,900 --> 00:06:16,550
which is 72. But just the fact that she's included in this dictionary,

22453
00:06:16,580 --> 00:06:17,900
it means that she has passed.

22454
00:06:18,650 --> 00:06:23,650
And we will end up with this new dictionary where everybody is a passed student

22455
00:06:24,260 --> 00:06:25,580
and bear scores.

22456
00:06:27,140 --> 00:06:31,700
Have a think about how you might do this. And if you're up for the challenge,

22457
00:06:31,760 --> 00:06:35,120
try pausing the video and seeing if you can complete this.

22458
00:06:37,250 --> 00:06:41,900
As always, we know that we're going to create a new dictionary, so curly braces,

22459
00:06:42,260 --> 00:06:46,100
and then it's going to be our new_key: new_value.

22460
00:06:46,670 --> 00:06:50,180
And then it's going to be for, and now,

22461
00:06:50,210 --> 00:06:55,210
because we are looping through this dictionary and we want to get hold of each

22462
00:06:55,490 --> 00:06:56,323
of the values,

22463
00:06:56,660 --> 00:07:00,980
we're going to use the method that we saw in our previous slides.

22464
00:07:01,160 --> 00:07:06,160
So we're going to get hold of each of the keys and the value from our

22465
00:07:07,040 --> 00:07:09,890
dictionary. And then after the in keyword,

22466
00:07:09,920 --> 00:07:13,760
it's the thing that we actually want to loop through, which is our dictionary.

22467
00:07:15,260 --> 00:07:16,700
Once we've got our dictionary,

22468
00:07:16,700 --> 00:07:20,210
then we need to call the items method on that dictionary.

22469
00:07:20,210 --> 00:07:23,000
So it's items with a set of parentheses,

22470
00:07:23,060 --> 00:07:25,490
not just the items as an attribute.

22471
00:07:26,150 --> 00:07:28,340
So now that we've got our keywords down,

22472
00:07:28,340 --> 00:07:30,950
let's convert it to our particular case.

22473
00:07:31,370 --> 00:07:35,210
So our dictionary is called students_scores,

22474
00:07:35,420 --> 00:07:37,070
let's make sure I spell it correctly.

22475
00:07:37,400 --> 00:07:42,140
So students_scores.items gets all of the items in that dictionary.

22476
00:07:42,650 --> 00:07:44,360
And then for each of the keys

22477
00:07:44,420 --> 00:07:47,750
which is going to be students, and for each of the values

22478
00:07:47,750 --> 00:07:52,610
which is going to be their score, we're going to loop through this dictionary.

22479
00:07:53,180 --> 00:07:58,130
The new key is just going to be the student's name and the new value is just

22480
00:07:58,130 --> 00:07:59,510
going to be their score.

22481
00:08:00,050 --> 00:08:05,050
But what we need to do is we need to check using an if statement,

22482
00:08:05,750 --> 00:08:09,530
if the student that we're currently looping through has passed.

22483
00:08:09,980 --> 00:08:14,980
So the test is basically looking at the score and seeing if it is greater than

22484
00:08:15,920 --> 00:08:19,820
or equal to 60. And if that is the case,

22485
00:08:19,850 --> 00:08:22,910
then we're going to take this student as the new key,

22486
00:08:23,150 --> 00:08:27,860
their score as the new value, and place it inside this new dictionary.

22487
00:08:28,550 --> 00:08:31,280
So now if I go ahead and hit enter,

22488
00:08:31,640 --> 00:08:35,480
then you can see we've got our new dictionary being created,

22489
00:08:35,900 --> 00:08:40,130
which only contains all the students who have passed. So it's Beth, Caroline,

22490
00:08:40,159 --> 00:08:43,700
Dave, and Freddy, and we've lost Alex and Eleanor.

22491
00:08:45,500 --> 00:08:47,480
So in order to get more practice at this,

22492
00:08:47,570 --> 00:08:52,250
I've prepared some more coding exercises for you on dictionary comprehension.

22493
00:08:52,550 --> 00:08:55,250
So head over to the next lesson and we'll get started.


22494
00:00:00,300 --> 00:00:00,630
All right.

22495
00:00:00,630 --> 00:00:04,620
It's time to put what you've learned to practice and see if you can complete

22496
00:00:04,620 --> 00:00:07,110
these challenges on dictionary comprehension.

22497
00:00:07,710 --> 00:00:12,690
So I want you to find the exercise that is day 26.4.

22498
00:00:13,350 --> 00:00:17,190
Now, once you've found day 26.4 dictionary comprehension one,

22499
00:00:17,460 --> 00:00:21,030
you'll see that this is the starting code I have for you.

22500
00:00:21,030 --> 00:00:22,530
I've got a sentence here

22501
00:00:22,710 --> 00:00:26,640
which is a string and your job is to count

22502
00:00:26,730 --> 00:00:31,350
how many letters there are in each word and create a dictionary that looks like

22503
00:00:31,350 --> 00:00:32,183
this.

22504
00:00:32,220 --> 00:00:36,060
So your final dictionary is going to be saved as this variable called

22505
00:00:36,060 --> 00:00:38,700
result and it's going to be printed to the console.

22506
00:00:39,420 --> 00:00:41,130
Have a read of the instructions,

22507
00:00:41,490 --> 00:00:45,270
especially be aware that you might need to do some Googling to figure out how to

22508
00:00:45,270 --> 00:00:49,620
convert a sentence into a list of words and use the hints if you need them.

22509
00:00:50,070 --> 00:00:52,230
So pause the video and give that a go now.

22510
00:00:53,300 --> 00:00:54,133
Okay.

22511
00:00:57,170 --> 00:01:01,010
The biggest hurdle of this challenge is not actually the dictionary 

22512
00:01:01,010 --> 00:01:01,843
comprehension.

22513
00:01:02,210 --> 00:01:07,210
It's the figuring of out how to convert a sentence, a string, into a list of words.

22514
00:01:08,360 --> 00:01:13,190
So I've basically just typed out the entire query with Python at the end into

22515
00:01:13,190 --> 00:01:17,060
Google. And if I click on the first Stack Overflow answer,

22516
00:01:17,330 --> 00:01:22,250
you can see that they're telling you that you should probably investigate the split

22517
00:01:22,310 --> 00:01:23,143
method.

22518
00:01:23,450 --> 00:01:28,450
The split method basically splits a string by space and converts it into a list.

22519
00:01:28,910 --> 00:01:32,450
That's exactly what we need in order to solve this challenge.

22520
00:01:32,930 --> 00:01:37,930
And also in the hints, you can see that I've linked it to a page in the W3

22521
00:01:38,240 --> 00:01:40,400
Schools documentation for Python.

22522
00:01:40,850 --> 00:01:43,970
And I like looking to the W3Schools just because you have the

22523
00:01:43,970 --> 00:01:45,080
try-it-yourself section

22524
00:01:45,080 --> 00:01:50,080
where you can actually run the code and see what is the result of running this

22525
00:01:50,570 --> 00:01:53,600
method. So if you have a sentence, Welcome to the jungle,

22526
00:01:53,630 --> 00:01:55,250
once you call split on it,

22527
00:01:55,490 --> 00:01:59,780
it creates a list with each word as a separate item in the list.

22528
00:02:00,530 --> 00:02:03,680
Now we're basically ready to tackle our challenge.

22529
00:02:04,520 --> 00:02:09,139
We're going to create our result which is going to be a dictionary.

22530
00:02:09,620 --> 00:02:14,420
So let's start out with the keyword methods. So we'll say new_key:

22531
00:02:14,450 --> 00:02:19,450
new_value for item in list.

22532
00:02:20,570 --> 00:02:21,470
Now, in this case,

22533
00:02:21,500 --> 00:02:26,500
we're not actually iterating through a dictionary and we're only iterating

22534
00:02:27,140 --> 00:02:29,780
through a string, which is just a sequence.

22535
00:02:30,200 --> 00:02:35,150
So we can replace this list with our sentence, but we can't leave it at

22536
00:02:35,180 --> 00:02:40,010
just the sentence, because then it's going to loop through each of the letters.

22537
00:02:40,520 --> 00:02:44,120
So instead of having it as just the sentence string,

22538
00:02:44,210 --> 00:02:49,210
we're going to use the split method to convert it into a list of words.

22539
00:02:50,390 --> 00:02:53,540
And once we've done that, then every time we loop through it,

22540
00:02:53,600 --> 00:02:58,040
we're actually looping through each word in this list.

22541
00:02:58,930 --> 00:03:01,840
And it's usually a good idea to test out the code.

22542
00:03:01,870 --> 00:03:05,020
So let's comment out these last two lines of code,

22543
00:03:05,380 --> 00:03:10,380
and then let's take our sentence and let's say for word in sentence.split.

22544
00:03:13,060 --> 00:03:17,560
And now let's print out each of the words. And when I run this,

22545
00:03:17,590 --> 00:03:22,590
you can see it has split our entire sentence by the spaces to create a list of

22546
00:03:23,590 --> 00:03:27,760
words. And each time it iterates through it using for word in sentence.split

22547
00:03:27,790 --> 00:03:28,960
just like we have here,

22548
00:03:29,260 --> 00:03:34,000
it's going to go through each word in turn and then check each of them.

22549
00:03:34,720 --> 00:03:39,720
So now let's reactivate our code. And we wanna fix the very last part.

22550
00:03:40,960 --> 00:03:44,590
So the new key is going to be the actual word

22551
00:03:44,650 --> 00:03:49,650
because we want each of the words in our dictionary as the key, and the new value

22552
00:03:49,690 --> 00:03:54,040
is going to be the length of the word. So now when I hit run,

22553
00:03:54,100 --> 00:03:59,100
you can see we've got a dictionary where each word is the key and the number of

22554
00:03:59,320 --> 00:04:02,200
characters in each word is the value.

22555
00:04:02,920 --> 00:04:04,810
And now I've completed the challenge.


22556
00:00:00,600 --> 00:00:04,830
All right. So now we're on to the next dictionary comprehension exercise,

22557
00:00:04,860 --> 00:00:08,370
which is day 26.5 dictionary comprehension two.

22558
00:00:09,060 --> 00:00:09,960
And in this challenge,

22559
00:00:09,990 --> 00:00:14,990
you are going to be converting a dictionary of temperatures in Celsius to their

22560
00:00:16,020 --> 00:00:18,870
corresponding temperature in Fahrenheit.

22561
00:00:19,320 --> 00:00:23,430
So this is how you convert a Celsius temperature to Fahrenheit.

22562
00:00:23,730 --> 00:00:28,730
So the temperature multiplied by nine divided by five and then plus 32.

22563
00:00:29,400 --> 00:00:33,330
So you saw this in a previous lesson as well. So pause the video,

22564
00:00:33,390 --> 00:00:36,090
have a read of the instructions, take a look at the hints

22565
00:00:36,090 --> 00:00:38,940
if you get stuck and see if you can complete this challenge.

22566
00:00:42,200 --> 00:00:43,130
So in this case, 

22567
00:00:43,190 --> 00:00:48,190
we have a slightly different exercise from before because we're now going to be

22568
00:00:48,590 --> 00:00:51,710
working with a dictionary to create a new dictionary.

22569
00:00:52,280 --> 00:00:56,660
Let's write our code here and let's create our new variable

22570
00:00:56,660 --> 00:01:00,170
which needs to be called weather_f. And this

22571
00:01:00,170 --> 00:01:02,390
weather_f is going to be a new dictionary.

22572
00:01:03,110 --> 00:01:06,050
Let's put in our keyword method to

22573
00:01:06,080 --> 00:01:08,480
create a new dictionary from a dictionary.

22574
00:01:08,630 --> 00:01:13,630
So new_key:new_value for,

22575
00:01:14,360 --> 00:01:16,550
and then it's parentheses key,

22576
00:01:16,880 --> 00:01:20,150
value. So, be really careful here.

22577
00:01:20,210 --> 00:01:24,470
I've seen a lot of students just use the colon in this case,

22578
00:01:24,470 --> 00:01:28,160
but it's actually a tuple. So it should be key, value.

22579
00:01:28,580 --> 00:01:32,630
And then we specify the dictionary that we want to loop through.

22580
00:01:33,620 --> 00:01:38,090
And then we call .items on it. And remember, this is a method,

22581
00:01:38,090 --> 00:01:39,980
so it needs the parentheses at the end.

22582
00:01:40,640 --> 00:01:44,450
So now let's replace the relevant parts of this line.

22583
00:01:44,780 --> 00:01:46,970
So our dictionary is going to be this one,

22584
00:01:47,030 --> 00:01:51,920
our weather_c. That's the dictionary we're looping through.

22585
00:01:52,010 --> 00:01:55,160
And we're gonna get a hold of all of the items in that dictionary

22586
00:01:55,550 --> 00:02:00,170
and then get each of the keys which I'll call day, and value

22587
00:02:00,170 --> 00:02:04,820
which I'll call temp_c because it will be the temperature in Celsius.

22588
00:02:05,420 --> 00:02:10,419
So now that I'm looping through each of the days and the temperatures in our

22589
00:02:11,300 --> 00:02:15,320
weather dictionary, then we're going to create our new key and new value.

22590
00:02:15,770 --> 00:02:18,920
So the new key is actually still going to be the same day.

22591
00:02:18,950 --> 00:02:23,060
It's going to be unchanged because we want this as our output

22592
00:02:23,180 --> 00:02:25,100
and it looks pretty much the same as this one,

22593
00:02:25,460 --> 00:02:27,920
other than the fact that we've converted the value.

22594
00:02:28,490 --> 00:02:32,540
So the new value though is going to be calculated using this formula.

22595
00:02:32,720 --> 00:02:37,720
So we're going to take our temp_c and then we're going to multiply it by nine

22596
00:02:38,300 --> 00:02:43,270
divided by five. And then we're going to add 32. If you want,

22597
00:02:43,310 --> 00:02:46,970
you can add the parentheses around this line,

22598
00:02:47,300 --> 00:02:50,480
but because we're doing math and we're going from left to right,

22599
00:02:50,570 --> 00:02:55,280
and we're first doing multiply divide, then we do add and subtract,

22600
00:02:55,310 --> 00:02:57,860
then it's actually completely optional in this case.

22601
00:02:58,070 --> 00:03:02,320
But we'll just include it in there for completion sake. So now when I hit run,

22602
00:03:03,190 --> 00:03:03,870
you'll see that

22603
00:03:03,870 --> 00:03:08,430
I've got a dictionary that's being generated with each of the days in the week

22604
00:03:08,490 --> 00:03:09,870
from this dictionary

22605
00:03:10,230 --> 00:03:13,560
and each of the temperatures have been converted to Fahrenheit.

22606
00:03:13,890 --> 00:03:15,360
So this is super useful

22607
00:03:15,360 --> 00:03:19,290
and you often find yourself needing to work with values in a dictionary.


22608
00:00:00,960 --> 00:00:01,740
In this lesson,

22609
00:00:01,740 --> 00:00:06,120
I want to show you how you can use loops with pandas dataframes and how to

22610
00:00:06,120 --> 00:00:11,010
iterate over a pandas data frame. So here, I've got a simple dictionary,

22611
00:00:11,280 --> 00:00:15,720
I've got two keys, student and score, and under student

22612
00:00:15,750 --> 00:00:18,870
I've got a list of student names, and under score

22613
00:00:18,870 --> 00:00:21,480
I've got a list of their corresponding scores.

22614
00:00:21,990 --> 00:00:26,990
Now we know that we can loop through a dictionary very simply by creating a for

22615
00:00:28,500 --> 00:00:30,540
loop and then we say, well,

22616
00:00:30,600 --> 00:00:35,600
we're going to go through each of the key and values inside this student

22617
00:00:36,120 --> 00:00:36,953
dictionary.

22618
00:00:37,230 --> 00:00:41,190
And then we're going to get all of the items in order to be able to loop through

22619
00:00:41,190 --> 00:00:45,360
it. So now when I print each of the keys,

22620
00:00:45,690 --> 00:00:49,770
you can see that it goes through the dictionary and prints both of the keys.

22621
00:00:50,910 --> 00:00:54,240
And similarly, I can get it to loop through both of the values.

22622
00:00:54,660 --> 00:00:57,540
So this is how we've been looping through dictionaries

22623
00:00:57,870 --> 00:01:01,020
and we've been using it in our dictionary comprehension.

22624
00:01:01,890 --> 00:01:05,820
Now you can loop through a data frame in the same way that you loop through a

22625
00:01:05,820 --> 00:01:07,800
dictionary. In a lot of ways,

22626
00:01:07,830 --> 00:01:12,360
you can consider a data frame pretty much as if you're working with a Python

22627
00:01:12,360 --> 00:01:16,170
dictionary. So I'm going to go ahead and import pandas

22628
00:01:16,710 --> 00:01:20,730
and I'm going to use pandas to create a new data frame,

22629
00:01:21,390 --> 00:01:24,840
and it's going to be created from our student dictionary.

22630
00:01:25,230 --> 00:01:26,760
So you've seen all of this before,

22631
00:01:26,820 --> 00:01:31,820
and I'll just call this the student_data_frame and I can print it for you to see

22632
00:01:34,080 --> 00:01:34,910
what it looks like.

22633
00:01:34,910 --> 00:01:35,743
Okay.

22634
00:01:38,630 --> 00:01:40,280
This is our data frame.

22635
00:01:40,280 --> 00:01:45,280
It looks like a pretty standard table with the first column being all of the

22636
00:01:45,290 --> 00:01:49,280
indices. So at zero index is this first row,

22637
00:01:49,940 --> 00:01:53,480
and that basically denotes the index of each row.

22638
00:01:54,230 --> 00:01:56,660
Now working with this data frame,

22639
00:01:56,750 --> 00:02:01,750
we can actually loop through a data frame using the same method as before.

22640
00:02:02,990 --> 00:02:07,990
So we can say for key, value in our student_data_frame .items.

22641
00:02:14,390 --> 00:02:17,690
So if I print each of the keys,

22642
00:02:18,980 --> 00:02:23,180
you can see it's just going to give me the titles of each column.

22643
00:02:23,810 --> 00:02:26,720
But if I print each of the values,

22644
00:02:28,520 --> 00:02:32,030
then it's going to give me the data in each of the columns.

22645
00:02:32,660 --> 00:02:37,280
Now this is not particularly useful because it's basically just looping through

22646
00:02:37,610 --> 00:02:42,110
the names of our columns and then the data inside each column.

22647
00:02:42,710 --> 00:02:46,430
This is why pandas has a inbuilt  loop

22648
00:02:47,180 --> 00:02:50,690
and it's a method called iterrows.

22649
00:02:51,140 --> 00:02:56,140
And it allows us to loop through each of the rows of the data frame rather than

22650
00:02:56,540 --> 00:02:57,680
each of the columns.

22651
00:02:58,490 --> 00:03:03,490
And the way that we do that is we again use a for loop and then we can get hold

22652
00:03:03,910 --> 00:03:07,030
of each of the index inside each row,

22653
00:03:07,030 --> 00:03:10,570
so that corresponds to the number in that first column.

22654
00:03:11,050 --> 00:03:14,320
And then we can get hold of the data in the row.

22655
00:03:15,010 --> 00:03:19,660
And then we can say for index row in data frame,

22656
00:03:19,690 --> 00:03:23,530
which is student_data_frame, and then its that method.iter

22657
00:03:23,530 --> 00:03:24,850
rows.

22658
00:03:26,290 --> 00:03:31,290
And now I can loop through each of those rows and print out either the index for

22659
00:03:34,150 --> 00:03:35,260
each of those rows.

22660
00:03:36,250 --> 00:03:39,820
So you can see that this is going to print out our data frame here,

22661
00:03:40,150 --> 00:03:43,360
And then in order to print out each of the index at 0, 1, 2.

22662
00:03:43,750 --> 00:03:46,900
But I can also print out each of the rows.

22663
00:03:47,530 --> 00:03:52,530
So now I get the first row has a student and a score,

22664
00:03:53,380 --> 00:03:57,310
the second row has a student and a score, and the third row has a student and

22665
00:03:57,310 --> 00:03:58,143
score.

22666
00:03:58,540 --> 00:04:03,540
So each of these rows is a pandas series object. So that means we can tap into the

22667
00:04:04,480 --> 00:04:09,480
row and then get hold of the value under a particular column by using the dot

22668
00:04:10,690 --> 00:04:13,930
notation. So we can say row.student

22669
00:04:14,470 --> 00:04:16,360
and now when it goes through the loop,

22670
00:04:16,690 --> 00:04:19,540
you can see first, it's going to print out our entire data frame,

22671
00:04:19,870 --> 00:04:24,490
and then it's going to print out each of the students inside that data frame.

22672
00:04:25,090 --> 00:04:28,240
Now I can also say row.score,

22673
00:04:28,900 --> 00:04:32,320
and now it's going to give me each of the scores inside the data frame.

22674
00:04:32,740 --> 00:04:35,320
And I can even do something like this where I say

22675
00:04:35,410 --> 00:04:40,410
if the row.student is equal to Angela,

22676
00:04:41,440 --> 00:04:46,440
well then we can print that particular row that we're currently looping on, 

22677
00:04:47,020 --> 00:04:51,850
.score. And this way we would get the student, Angela's score

22678
00:04:51,880 --> 00:04:56,050
which happens to be 56, as you can verify here.


22679
00:00:00,270 --> 00:00:03,360
Now we're finally ready to tackle our project,

22680
00:00:03,510 --> 00:00:08,510
and this project is based on a real-life struggle that I have. Often when I'm

22681
00:00:09,480 --> 00:00:13,830
calling a company and over the phone I have to give some sort of details

22682
00:00:13,830 --> 00:00:16,680
right? They'll ask me, what is your name, and can you spell it?

22683
00:00:16,890 --> 00:00:21,360
So I'll have to be like A-N-G-E-L-A. And they're like, wait, was that an E?

22684
00:00:21,390 --> 00:00:24,390
Was that a B, what did you say? In these cases

22685
00:00:24,390 --> 00:00:29,070
often I have to sort of default to some sort of Naval alphabet. where

22686
00:00:29,070 --> 00:00:32,220
I say A is the alfa, N for November, G for golf.

22687
00:00:32,610 --> 00:00:36,870
And then at some point I forget what E stands for and I'm like E for.. elephant?

22688
00:00:37,530 --> 00:00:42,180
And there have been times where I've just completely taken the MIG and said

22689
00:00:42,180 --> 00:00:46,170
things like M for mnemonic, P for pneumonia, W for wrench,

22690
00:00:46,440 --> 00:00:47,880
which doesn't make any sense at all

22691
00:00:47,880 --> 00:00:52,880
because these are silent letters. And I've had some very angry people,

22692
00:00:52,950 --> 00:00:54,570
um, but it was quite fun.

22693
00:00:55,110 --> 00:00:59,610
So now what we want to create is we want to create a tool that takes the NATO

22694
00:00:59,610 --> 00:01:03,840
phonetic alphabet which was generated because it's often really,

22695
00:01:03,840 --> 00:01:08,840
really important for the other side to know exactly what it is that you said and

22696
00:01:08,970 --> 00:01:13,970
which letters you're spelling out so that they don't mistaken your E for a B or

22697
00:01:15,000 --> 00:01:16,500
your T for a C

22698
00:01:16,530 --> 00:01:20,700
cause it all sounds really similar. Head over to the course resources page

22699
00:01:20,760 --> 00:01:24,120
where you can find the starting files for the NATO alphabet project.

22700
00:01:24,990 --> 00:01:29,730
I want you to practice with list comprehension and with dictionary

22701
00:01:29,730 --> 00:01:31,980
comprehension. But in this case,

22702
00:01:32,010 --> 00:01:34,800
we're not going through a dictionary per se,

22703
00:01:34,830 --> 00:01:39,830
but we're actually going through a data frame because our data lives inside a

22704
00:01:39,930 --> 00:01:43,830
CSV. So we're going to be reading it using pandas.

22705
00:01:44,130 --> 00:01:49,130
and then we're going to end up with a data frame. Instead of having a bog

22706
00:01:49,410 --> 00:01:54,150
standard dictionary comprehension where our keywords were new_key:

22707
00:01:54,180 --> 00:01:59,180
new_value for key, value in dict.items.

22708
00:02:05,130 --> 00:02:08,430
Now we're going to change this for-loop

22709
00:02:08,490 --> 00:02:11,330
so instead of using the simple for loop where

22710
00:02:11,410 --> 00:02:12,990
we're just looping through a dictionary,

22711
00:02:13,380 --> 00:02:17,670
we're going to use this particular loop. So then in this case,

22712
00:02:17,700 --> 00:02:22,700
we're saying for index row in our data frame,

22713
00:02:24,300 --> 00:02:28,740
and then it's .iterrows as the method.

22714
00:02:29,220 --> 00:02:34,220
So basically I want you to use this different loop in order to loop through our

22715
00:02:34,440 --> 00:02:39,440
data frame and then create a new dictionary using a new key and new value.

22716
00:02:41,130 --> 00:02:45,390
So what exactly is it that I want you to do with this? Well,

22717
00:02:45,420 --> 00:02:49,380
I want you to be able to take the CSV of NATO phonetic alphabet,

22718
00:02:49,830 --> 00:02:51,690
and I want you to do two things to it.

22719
00:02:52,140 --> 00:02:57,140
The first thing is for you to create a dictionary in this format.

22720
00:03:01,000 --> 00:03:06,000
The format is basically the key is going to be the actual letter,

22721
00:03:06,130 --> 00:03:11,130
so maybe A. And then the value is going to be the corresponding code for the NATO

22722
00:03:12,460 --> 00:03:15,700
phonetic alphabet. So A actually is for alpha.

22723
00:03:16,150 --> 00:03:20,530
And then the next one is B, which stands for Bravo.

22724
00:03:21,490 --> 00:03:22,180
Essentially,

22725
00:03:22,180 --> 00:03:26,830
we're going to take the CSV and we're going to convert it into a dictionary in

22726
00:03:26,830 --> 00:03:30,190
this particular format where the keys

22727
00:03:30,190 --> 00:03:34,330
are the letters inside the CSV, so that first column,

22728
00:03:34,690 --> 00:03:39,690
and then the values are the corresponding code words for each of those letters.

22729
00:03:40,630 --> 00:03:45,250
And the reason why we're talking about iterrows and had to loop through rows of a

22730
00:03:45,250 --> 00:03:49,570
data frame instead of just getting you to get hold of the data frame

22731
00:03:49,900 --> 00:03:52,270
and then just say to_dict

22732
00:03:52,420 --> 00:03:56,590
like what we did before, is because it's not going to give it to you in this

22733
00:03:56,590 --> 00:03:57,640
particular format.

22734
00:03:58,000 --> 00:04:01,210
So you're going to have to use what you've learned about dictionary

22735
00:04:01,210 --> 00:04:05,770
comprehension in order to create a dictionary in this particular format.

22736
00:04:06,370 --> 00:04:08,830
And then once you've created a dictionary in this format,

22737
00:04:08,860 --> 00:04:11,200
then the next step is a lot easier.

22738
00:04:11,500 --> 00:04:16,500
You are going to create a list of the phonetic code words from a word that the

22739
00:04:19,450 --> 00:04:20,620
user inputs.

22740
00:04:21,940 --> 00:04:26,410
That way the user can use the input to type a word.

22741
00:04:26,830 --> 00:04:30,430
So for example, Thomas, and then when they hit enter,

22742
00:04:30,550 --> 00:04:32,740
they get a list printed out

22743
00:04:33,010 --> 00:04:38,010
that is the phonetic alphabet code word for each of the letters in their input.

22744
00:04:39,190 --> 00:04:41,800
So Tango, Hotel, Oscar Mike, Alpha Sierra,

22745
00:04:41,830 --> 00:04:45,160
which they can then read back using our little tool.

22746
00:04:46,210 --> 00:04:50,290
I would say that to do step 1 is a lot harder than to do step 2.

22747
00:04:50,620 --> 00:04:54,070
But essentially, to do step 1 is a dictionary comprehension,

22748
00:04:54,160 --> 00:04:58,630
creating a dictionary in this format from the CSV, and to do 

22749
00:04:58,630 --> 00:05:03,630
number 2 is basically completing the project and being able to create and

22750
00:05:03,910 --> 00:05:08,860
print out a list of the code words based on the word that the user inputs.

22751
00:05:09,400 --> 00:05:13,570
So I want you to pause the video, have a think about how you might solve this,

22752
00:05:13,900 --> 00:05:18,900
and then go ahead to the course resources and download this starting zip file so

22753
00:05:20,170 --> 00:05:24,370
that you can open it up inside PyCharm and create your project.

22754
00:05:24,880 --> 00:05:26,770
Pause the video and give that a go now.


22755
00:00:00,240 --> 00:00:05,220
Once you've unzipped and opened up the starting file inside PyCharm,

22756
00:00:05,610 --> 00:00:06,689
this is what you'd see.

22757
00:00:06,780 --> 00:00:11,610
There is a CSV file that contains each of the letters and the code word,

22758
00:00:11,970 --> 00:00:16,379
and there's also our main.py with some of the example code that I showed you

22759
00:00:16,379 --> 00:00:18,480
in the last lesson. Now,

22760
00:00:18,510 --> 00:00:23,400
if you don't know how to complete this challenge, especially step 1,

22761
00:00:23,760 --> 00:00:28,760
I really urge you to go through this example code and just go through each of

22762
00:00:29,730 --> 00:00:33,480
the different types of loops and see what it is that you get when you print the

22763
00:00:33,480 --> 00:00:37,170
key or the value. And in this case, when you print the index

22764
00:00:37,200 --> 00:00:41,550
or when you print the row. And then see what happens when you get hold of some of

22765
00:00:41,550 --> 00:00:46,500
the items in the row. And seeing how maybe the row.student or the row.

22766
00:00:46,500 --> 00:00:49,560
score works. Once you fully understood this,

22767
00:00:49,590 --> 00:00:53,250
then it should be relatively easy to complete step 1.

22768
00:00:53,880 --> 00:00:58,110
So essentially the goal is that we want to create a dictionary that looks like

22769
00:00:58,110 --> 00:00:59,760
this from the CSV.

22770
00:01:00,360 --> 00:01:04,379
The first thing we have to do is to go ahead and import pandas.

22771
00:01:06,270 --> 00:01:09,540
And if you need to install it, there should be a squiggly line

22772
00:01:09,570 --> 00:01:10,680
and then you can click on it

22773
00:01:10,800 --> 00:01:14,550
and the light bulb will help you install the pandas module.

22774
00:01:14,940 --> 00:01:17,400
But once we've gotten hold of the pandas,

22775
00:01:17,430 --> 00:01:22,350
we can go ahead and use it to read CSV from our file

22776
00:01:22,350 --> 00:01:27,270
which is this file. It's under the file path of just nato_phonetic_

22777
00:01:27,270 --> 00:01:31,470
alphabet.csv. So it will save this as our data

22778
00:01:31,500 --> 00:01:34,890
which is basically going to be our data frame. Now,

22779
00:01:34,890 --> 00:01:37,440
once we've got hold of our data,

22780
00:01:37,560 --> 00:01:41,010
then you can see that if we print this out,

22781
00:01:41,880 --> 00:01:43,800
it looks like this.

22782
00:01:44,250 --> 00:01:49,250
But if we use that method, to_dict, and then we try to print it out,

22783
00:01:49,950 --> 00:01:54,060
you can see that it's not organized the dictionary in the format that we want it

22784
00:01:54,060 --> 00:01:57,780
to, which is to have the letter as the key,

22785
00:01:57,990 --> 00:02:02,730
the corresponding code as the value. In order to complete step 1

22786
00:02:02,820 --> 00:02:06,300
as I mentioned, we're going to have to use dictionary comprehension.

22787
00:02:06,750 --> 00:02:11,750
And the method is going to be using the iterrows to iterate through each of the

22788
00:02:12,690 --> 00:02:17,340
rows inside that data frame. So I'm going to copy that line here,

22789
00:02:17,580 --> 00:02:20,490
and I'm going to paste it in here.

22790
00:02:21,150 --> 00:02:25,860
Now, this is the format, so let's go ahead and replace each of the keywords.

22791
00:02:26,250 --> 00:02:29,250
Our data frame, in our case, is just called data.

22792
00:02:30,000 --> 00:02:33,900
And then we're going to say data iterate through each of the rows,

22793
00:02:34,170 --> 00:02:37,020
and then for each of the index and the row,

22794
00:02:37,230 --> 00:02:39,270
we're going to do something with it.

22795
00:02:39,900 --> 00:02:44,900
Now the new key is going to be the row.letter and the new value is going to

22796
00:02:49,200 --> 00:02:54,180
come from that row as well and it's going to be row.code.

22797
00:02:55,020 --> 00:02:58,650
So this is the code that will create our new dictionary

22798
00:02:59,110 --> 00:03:03,670
and I'm going to call this our phonetic_dictionary.

22799
00:03:04,840 --> 00:03:06,580
Now, if I print that out,

22800
00:03:07,630 --> 00:03:12,370
you can see that this is the straight up data.to_dict

22801
00:03:12,790 --> 00:03:16,810
and then the second line is the one where we've actually formatted it

22802
00:03:17,140 --> 00:03:20,980
using what we've learned about dictionary comprehension.

22803
00:03:21,730 --> 00:03:25,570
Once we've gotten hold of this phonetic dictionary,

22804
00:03:25,630 --> 00:03:30,630
then to do step 2 is incredibly easy because all we have to do is to create

22805
00:03:31,120 --> 00:03:35,200
some sort of inputs, ask the user to enter a word,

22806
00:03:35,560 --> 00:03:39,220
and then we can save this input to a variable. Now,

22807
00:03:39,250 --> 00:03:41,320
once they've entered the word,

22808
00:03:41,530 --> 00:03:46,530
we have to check it against each of the keys inside this phonetic dictionary.

22809
00:03:47,410 --> 00:03:50,470
So notice how each of the keys all uppercased.

22810
00:03:50,800 --> 00:03:55,480
So we're going to have to change whatever it is that the user has inputted all

22811
00:03:55,510 --> 00:04:00,220
to upper. So that way, if they entered a lowercase or an uppercase,

22812
00:04:00,220 --> 00:04:03,750
it doesn't really matter because we're going to convert the whole string to

22813
00:04:03,760 --> 00:04:08,020
uppercase. And then we're going to use our list comprehension.

22814
00:04:08,890 --> 00:04:13,890
The way we create our list comprehension is going to be new item for item in

22815
00:04:14,890 --> 00:04:16,570
list. So in this case,

22816
00:04:16,570 --> 00:04:20,529
our list or the thing that we're going to iterate through is going to be our

22817
00:04:20,529 --> 00:04:21,363
word.

22818
00:04:21,640 --> 00:04:25,540
And then we're going to go through each of the letters in the word.

22819
00:04:26,770 --> 00:04:29,170
And once we have each of the letters,

22820
00:04:29,230 --> 00:04:33,640
we're going to go through our phonetic dictionary, this one right here,

22821
00:04:33,730 --> 00:04:38,440
and pick out the value that corresponds to the particular letter that we're

22822
00:04:38,440 --> 00:04:39,310
iterating on.

22823
00:04:39,550 --> 00:04:42,970
So we're going to use the square brackets and then pass in the letter like this.

22824
00:04:43,600 --> 00:04:48,600
Now we've created our output list and we can go ahead and print it out.

22825
00:04:51,310 --> 00:04:56,310
Now let's go ahead and comment out this line and run our code.

22826
00:04:58,120 --> 00:05:01,300
So it's going to ask me to enter a word, I'm going to enter my name.

22827
00:05:01,660 --> 00:05:06,660
And now it's managed to convert that into a list of phonetic alphabets that

22828
00:05:07,450 --> 00:05:10,300
corresponds to each of the letters in that word.

22829
00:05:11,200 --> 00:05:15,010
Did you manage to complete this challenge? And if not,

22830
00:05:15,220 --> 00:05:16,930
which part did you stumble on?

22831
00:05:17,320 --> 00:05:21,370
Was it the part where you were using the iterrows? If so,

22832
00:05:21,370 --> 00:05:25,720
then go back to the starting file for this project and go through each of the

22833
00:05:25,720 --> 00:05:29,560
different ways that we're looping through it and use print statements to really

22834
00:05:29,560 --> 00:05:34,360
understand how the loop is actually going through and looking through the data.

22835
00:05:35,080 --> 00:05:35,470
Now,

22836
00:05:35,470 --> 00:05:40,240
if on the other hand, it was the dictionary comprehension or the list

22837
00:05:40,240 --> 00:05:41,073
comprehension,

22838
00:05:41,320 --> 00:05:44,950
then be sure to go back to the relevant lesson and just make sure that you

22839
00:05:44,950 --> 00:05:48,130
review it and you write out the code in the lesson for yourself

22840
00:05:48,400 --> 00:05:52,690
just to be sure that you understand what's going on before you continue to the

22841
00:05:52,690 --> 00:05:53,230
next day.



22842
00:00:00,510 --> 00:00:05,490
Hey guys, welcome to Day 27 of 100 Days of Code. Today

22843
00:00:05,520 --> 00:00:10,520
we're going to be diving into a Graphical User Interfaces using TKinter,

22844
00:00:11,310 --> 00:00:15,090
and we're also going to be learning more about function arguments.

22845
00:00:15,840 --> 00:00:20,310
So we've already seen a little bit of graphical user interfaces when we use our

22846
00:00:20,310 --> 00:00:24,270
turtle module, but I wanna go a little bit more in depth,

22847
00:00:24,780 --> 00:00:29,010
and I want to show you one of the most popular ways of creating a graphical user

22848
00:00:29,010 --> 00:00:33,420
interface. For example, a program like this in a separate window,

22849
00:00:33,990 --> 00:00:37,620
and we're going to be using the inbuilt TKinter module to do this.

22850
00:00:37,980 --> 00:00:41,280
So we're going to learn how to create labels, how to create buttons,

22851
00:00:41,520 --> 00:00:46,520
how to respond to those button clicks as well as things like text inputs and how

22852
00:00:47,280 --> 00:00:50,580
to lay out and design your programs.

22853
00:00:51,120 --> 00:00:52,740
And while we're doing all of this,

22854
00:00:52,770 --> 00:00:56,760
we're going to be looking at more advanced features of Python functions,

22855
00:00:57,120 --> 00:01:02,040
including things such as how to set default arguments and what these Args and

22856
00:01:02,040 --> 00:01:03,000
Kwargs are.

22857
00:01:03,450 --> 00:01:08,450
So a way of being able to pass an undefined amount of inputs into a function,

22858
00:01:09,120 --> 00:01:14,120
and we'll apply these advanced concepts to build a unit converter program using

22859
00:01:15,120 --> 00:01:20,120
TKinter. This program is going to help us convert miles to kilometers or liters

22860
00:01:21,060 --> 00:01:25,860
to gallons, or whatever little conversion that you might often use. For example,

22861
00:01:25,860 --> 00:01:30,720
let's say that I ran 10 miles and I want to know how many kilometers that is.

22862
00:01:31,080 --> 00:01:32,700
If I go ahead and click calculate,

22863
00:01:32,880 --> 00:01:36,180
you can see it generates the equivalent value in kilometers,

22864
00:01:36,450 --> 00:01:39,960
and you can see that our whole program is nicely laid out.

22865
00:01:39,960 --> 00:01:42,840
So it says 10 miles is equal to 16 in kilometers,

22866
00:01:43,350 --> 00:01:46,560
and it's fully responsive to our inputs.

22867
00:01:47,190 --> 00:01:49,770
This is what we're going to be making as our project,

22868
00:01:49,860 --> 00:01:54,860
a fully-fledged Python graphical user interface program that uses our Python

22869
00:01:56,670 --> 00:02:01,380
code. So once you are ready, head over to the next lesson and let's get started by

22870
00:02:01,380 --> 00:02:03,390
learning a bit more about TKinter.


22871
00:00:00,510 --> 00:00:00,900
All right.

22872
00:00:00,900 --> 00:00:05,900
So our main goal in today's lessons is to learn about the Tkinter module and see

22873
00:00:08,280 --> 00:00:12,480
how we can use it to create graphical user interfaces,

22874
00:00:12,540 --> 00:00:17,450
also known as a, a gui or a GUI. Now,

22875
00:00:17,480 --> 00:00:22,480
GUIs were a huge deal back in the nineties because previously,

22876
00:00:23,060 --> 00:00:25,250
in order to interact with a computer,

22877
00:00:25,520 --> 00:00:30,170
you had to use a command line operating system such as MS-DOS.

22878
00:00:30,170 --> 00:00:34,250
So this is kind of similar to our Python console,

22879
00:00:34,550 --> 00:00:37,100
where everything we wanted the computer to do

22880
00:00:37,340 --> 00:00:40,760
we had to tell it by writing a piece of text.

22881
00:00:41,030 --> 00:00:44,570
So if we wanted Python to print hello, we have to write out the text. 

22882
00:00:45,350 --> 00:00:46,640
But GUIs were different.

22883
00:00:47,060 --> 00:00:50,990
GUIs are graphical, and accompanied with a mouse,

22884
00:00:51,260 --> 00:00:54,770
they allow a user with very little training in computers

22885
00:00:55,040 --> 00:00:58,400
to be able to just point and click on the thing that they want to do on the

22886
00:00:58,400 --> 00:00:59,233
screen.

22887
00:00:59,660 --> 00:01:03,770
And one of the earliest computers that incorporated this type of

22888
00:01:04,069 --> 00:01:07,340
GUI operating system was the Mac Lisa.

22889
00:01:08,060 --> 00:01:09,950
It had these little windows

22890
00:01:10,220 --> 00:01:13,790
which you can click on and it launches programs,

22891
00:01:13,820 --> 00:01:18,140
which you can interact with by pointing and clicking. Now,

22892
00:01:18,140 --> 00:01:21,890
I mentioned that the Mac had these windows and in fact,

22893
00:01:22,160 --> 00:01:26,870
the Mac had programmed windows before Windows actually existed.

22894
00:01:27,470 --> 00:01:32,470
So Windows was Microsoft's version of the graphical user interface operating

22895
00:01:33,470 --> 00:01:36,350
system. And when it first came out,

22896
00:01:36,530 --> 00:01:41,530
it created quite a bit of controversy because it seemed like it might've stolen

22897
00:01:42,500 --> 00:01:46,130
this idea from Apple because after all, the Mac

22898
00:01:46,130 --> 00:01:49,310
Lisa came out way before even Windows one

22899
00:01:49,340 --> 00:01:53,420
let alone windows 95 or the later version that you might be familiar with.

22900
00:01:54,170 --> 00:01:59,170
And this even led Apple to Sue Microsoft for infringing on their intellectual

22901
00:02:00,470 --> 00:02:05,470
rights for using this graphical user interface to interact with the computer.

22902
00:02:06,050 --> 00:02:09,050
This is how big a deal GUIs were a back in the nineties.

22903
00:02:09,620 --> 00:02:14,620
There was such a big breakthrough in interacting with computers and that made it

22904
00:02:14,630 --> 00:02:19,040
so important to both Apple and Microsoft that they ended up battling in court.

22905
00:02:20,030 --> 00:02:21,530
Now, even to this day,

22906
00:02:21,560 --> 00:02:26,560
Bill Gates gets asked whether if he actually copied the graphical user interface

22907
00:02:27,560 --> 00:02:31,880
idea of an operating system from Steve jobs and Apple.

22908
00:02:32,600 --> 00:02:37,370
And I read on a recent Reddit AMA where somebody asked him this question,

22909
00:02:37,370 --> 00:02:42,290
he actually responded by saying that the copying wasn't really copying.

22910
00:02:42,290 --> 00:02:46,880
It was just that they hired some people from another company, Xerox

22911
00:02:46,880 --> 00:02:50,690
PARC, and it just happened that they were continuing on the work that they were

22912
00:02:50,690 --> 00:02:51,980
working on before.

22913
00:02:52,970 --> 00:02:57,560
But the more colorful piece of history actually comes from the biography of

22914
00:02:57,560 --> 00:03:00,490
Steve jobs by Walter Isaacson and in there,

22915
00:03:00,490 --> 00:03:05,490
there is this brilliant depiction of the scene where Steve Jobs, surrounded

22916
00:03:07,090 --> 00:03:12,090
by his employees, is basically just going off on bill Gates,

22917
00:03:13,230 --> 00:03:16,170
telling him that you're of ripping us off. I trusted you

22918
00:03:16,170 --> 00:03:17,760
and now you're stealing from us.

22919
00:03:18,060 --> 00:03:21,000
You saw the earlier versions of our operating system,

22920
00:03:21,030 --> 00:03:24,090
and you're now using it in your Microsoft software.

22921
00:03:24,810 --> 00:03:29,810
And to his credit, Bill Gates actually managed to come up with a pretty good 

22922
00:03:30,690 --> 00:03:33,510
response on the spot where he said, "Well, Steve,

22923
00:03:33,600 --> 00:03:35,730
I think there's more than one way of looking at it.

22924
00:03:35,730 --> 00:03:40,680
I think it's more like we both have this rich neighbor named Xerox and I broke

22925
00:03:40,680 --> 00:03:44,520
into his house to steal the TV set and found out that you had already stolen it.

22926
00:03:44,520 --> 00:03:49,260
That was a pretty good comeback from Bill Gates. And the Xerox that they are

22927
00:03:49,260 --> 00:03:51,720
referring to is Xerox parc.

22928
00:03:52,020 --> 00:03:57,020
It's the Palo Alto right search center that was creating loads of breakthroughs,

22929
00:03:58,650 --> 00:04:02,460
um, in terms of the computing industry. And in fact,

22930
00:04:02,490 --> 00:04:07,490
they created the first graphical user interface that was actually put into use

22931
00:04:07,740 --> 00:04:12,000
in a computer before Apple or Microsoft even thought about it.

22932
00:04:12,360 --> 00:04:17,360
They also created other things like the Ethernet or the first Object-Oriented

22933
00:04:17,550 --> 00:04:20,100
Programming language. And most importantly,

22934
00:04:20,550 --> 00:04:24,630
they also created the first graphical user interface that

22935
00:04:24,660 --> 00:04:29,610
allowed a user to interact with the computer by pointing and clicking.

22936
00:04:29,970 --> 00:04:33,690
And they even developed the first mouse to allow people to do this.

22937
00:04:34,290 --> 00:04:37,710
So this is a little bit of Silicon Valley history

22938
00:04:37,710 --> 00:04:41,130
that is particularly fascinating. If you're interested,

22939
00:04:41,790 --> 00:04:46,790
there is a movie called Pirates of Silicon Valley that goes into this story

22940
00:04:46,890 --> 00:04:49,800
in more detail and this is where I first found out about it.

22941
00:04:50,340 --> 00:04:52,020
But coming back to what we're doing,

22942
00:04:52,110 --> 00:04:56,850
I just wanted to show you just how important the graphical user interface was

22943
00:04:56,880 --> 00:05:01,440
when it first came about. So we're going to learn how to use Tkinter

22944
00:05:01,500 --> 00:05:06,180
to create our very own graphical interface programs so that we're no longer

22945
00:05:06,180 --> 00:05:10,410
reliant on these console based or text based programs,

22946
00:05:10,740 --> 00:05:15,480
and we're also not working within the playpen of the turtle module.

22947
00:05:15,780 --> 00:05:19,950
We're going to be building some big boy and big girl programs now.

22948
00:05:20,280 --> 00:05:21,750
So let's get started.


22949
00:00:00,420 --> 00:00:05,420
Let's get started by, as usual, importing the relevant library. Tkinter, like the

22950
00:00:06,750 --> 00:00:11,250
turtle module, is already pre-installed with every installation of Python.

22951
00:00:11,760 --> 00:00:13,380
As long as you've got Python running,

22952
00:00:13,410 --> 00:00:17,760
then you should be able to simply import Tkinter as the module

22953
00:00:18,000 --> 00:00:22,410
and then you'll be able to use all of the classes and properties and methods

22954
00:00:22,440 --> 00:00:24,870
inside. So for example,

22955
00:00:24,870 --> 00:00:27,720
we could start off by creating a new window,

22956
00:00:28,380 --> 00:00:31,800
and this is sort of equivalent to the screens that we've been working with

22957
00:00:32,040 --> 00:00:34,710
in turtle . So in order to do this,

22958
00:00:34,740 --> 00:00:39,740
we have to dig into the Tkinter module and then find a class called Tk.

22959
00:00:40,260 --> 00:00:43,620
And then once we initialize a new object from that class,

22960
00:00:43,860 --> 00:00:48,300
then we have ourselves a window. But if I run this as it is,

22961
00:00:48,450 --> 00:00:51,330
you'll see absolutely nothing happen

22962
00:00:53,070 --> 00:00:56,550
and it will just go straight away to exit code zero.

22963
00:00:57,150 --> 00:01:02,070
And the reason for this is because we need a way of keeping the window on the

22964
00:01:02,070 --> 00:01:06,300
screen. What Tkinter has done here is it's gone ahead,

22965
00:01:06,390 --> 00:01:09,570
created the window, sees that there's no more instructions

22966
00:01:09,660 --> 00:01:12,360
and then it basically ended the program. Now,

22967
00:01:12,360 --> 00:01:16,890
what we want instead is to sort of have a while loop that basically just keeps

22968
00:01:16,890 --> 00:01:21,270
on running, so something like a while true. And inside this while loop,

22969
00:01:21,390 --> 00:01:26,390
it holds onto this window and keeps on listening to see if there's anything else

22970
00:01:26,790 --> 00:01:30,900
that the user is going to do to interact with that window so that it can

22971
00:01:30,900 --> 00:01:32,880
respond when that happens.

22972
00:01:33,300 --> 00:01:37,530
So this loop is included inside Tkinter

22973
00:01:37,740 --> 00:01:42,740
and all you have to do is get your window to simply call the main loop.

22974
00:01:44,190 --> 00:01:48,780
This main loop is the thing that will keep the window on screen like this.

22975
00:01:49,200 --> 00:01:54,090
So now here is our window and here's the line of code that keeps it on the screen and

22976
00:01:54,090 --> 00:01:57,990
listens for what the user will do to interact with it. For example,

22977
00:01:57,990 --> 00:02:00,090
click on a button or type something.

22978
00:02:00,810 --> 00:02:05,810
Now this line of code always has to be at the very end of your program and all

22979
00:02:06,360 --> 00:02:07,860
the rest of the things that you're going to write

22980
00:02:07,920 --> 00:02:11,850
go in between creating the window and getting the window to run.

22981
00:02:13,020 --> 00:02:17,730
The next thing we can do is we can change the title of that program.

22982
00:02:18,060 --> 00:02:20,160
And we've done this before using turtle.

22983
00:02:20,460 --> 00:02:24,540
We just call the title method and we give a string as the input.

22984
00:02:24,840 --> 00:02:27,360
So 'My first GUI program',

22985
00:02:27,810 --> 00:02:30,450
and now if I rerun my code,

22986
00:02:30,840 --> 00:02:35,610
then you can see that this is what's showing up at the very top bar of my

22987
00:02:35,610 --> 00:02:37,170
program. Now,

22988
00:02:37,200 --> 00:02:41,370
other things that we might want to change with the window is the sizing of it.

22989
00:02:41,460 --> 00:02:46,050
So there is a default size and there's also a way of changing the size.

22990
00:02:46,920 --> 00:02:50,930
And we can do that by tapping into a method called a minimum size.

22991
00:02:51,450 --> 00:02:55,560
The window is going to scale to include all of the components that you put

22992
00:02:55,560 --> 00:02:57,960
inside. If you put a hundred buttons inside,

22993
00:02:57,960 --> 00:02:59,590
it's going to make the window massive.

22994
00:02:59,950 --> 00:03:02,050
But if you don't have a lot of things in the window,

22995
00:03:02,380 --> 00:03:07,380
then you might want to define a minimum size so that you can specify that, by

22996
00:03:07,690 --> 00:03:11,290
default, I want my width to be, let's say, I don't know,

22997
00:03:11,320 --> 00:03:14,920
500 and the height to be 300,

22998
00:03:15,250 --> 00:03:17,740
unless the user wants to resize the window,

22999
00:03:18,160 --> 00:03:21,790
or there's a lot of components that makes the window a lot bigger.

23000
00:03:22,450 --> 00:03:23,530
So when we run our code

23001
00:03:23,530 --> 00:03:28,530
now you can see this is a 500-pixel by 300-pixel window that we've just created

23002
00:03:29,590 --> 00:03:31,240
with our own custom title.

23003
00:03:32,980 --> 00:03:35,260
In addition to creating windows,

23004
00:03:35,320 --> 00:03:39,760
we can, of course, create some components to put inside the window.

23005
00:03:40,150 --> 00:03:41,410
So I want to show you firstly

23006
00:03:41,410 --> 00:03:46,410
how you would create a label. Just as our window was created from the tkinker

23007
00:03:46,990 --> 00:03:50,740
module and it's the Tk class that was used,

23008
00:03:51,070 --> 00:03:54,340
there's also a class inside Tkinter called

23009
00:03:54,430 --> 00:03:58,210
a label. So that we initialize a label class,

23010
00:03:58,240 --> 00:04:00,370
and we can save that to a variable called

23011
00:04:00,430 --> 00:04:03,670
my_label or anything else for that matter.

23012
00:04:04,180 --> 00:04:08,050
Now this label has quite a few things that we can change about it.

23013
00:04:08,590 --> 00:04:13,590
It might not be obvious from the documentation or from the prompt that PyCharm

23014
00:04:15,220 --> 00:04:16,053
gives us,

23015
00:04:16,120 --> 00:04:21,120
but we can, in fact, change a property called text so we can change what is

23016
00:04:21,339 --> 00:04:26,290
displayed inside the label. Let's just write some text called 'I am a label'

23017
00:04:27,310 --> 00:04:31,150
Unfortunately, that's actually not enough to get the label to display.

23018
00:04:31,210 --> 00:04:35,830
So when I run my program as it is, you don't actually see a label anywhere

23019
00:04:35,830 --> 00:04:38,830
on the screen. When we're working with Tkinter

23020
00:04:38,830 --> 00:04:43,830
what we have to do is we first have to create a component like a

23021
00:04:44,020 --> 00:04:44,853
label.

23022
00:04:45,010 --> 00:04:49,750
And then we have to specify how that component is going to be laid out on the

23023
00:04:49,750 --> 00:04:51,940
screen before it will show up.

23024
00:04:52,330 --> 00:04:57,190
And one of the easiest ways of laying out any component is just to get hold of

23025
00:04:57,190 --> 00:05:00,640
that component and then call the method called pack.

23026
00:05:01,150 --> 00:05:05,800
And this is going to place it into the screen and it's going to automatically

23027
00:05:05,800 --> 00:05:08,530
center it on the screen. So now

23028
00:05:08,560 --> 00:05:11,170
if I run the code with this modification,

23029
00:05:11,410 --> 00:05:16,410
you can see our label is now finally showing up and it's packed so that it's in

23030
00:05:16,750 --> 00:05:18,520
the center of the program.

23031
00:05:20,020 --> 00:05:23,740
Now there's other properties that we can modify about our label.

23032
00:05:24,010 --> 00:05:27,430
So we could initialize our label with a piece of text,

23033
00:05:27,670 --> 00:05:31,810
but we can also specify a font. The font is again,

23034
00:05:31,810 --> 00:05:33,010
going to be a tuple,

23035
00:05:33,430 --> 00:05:36,670
and that tuple is first going to take the name of the font,

23036
00:05:36,700 --> 00:05:38,890
so let's say I want to use Arial,

23037
00:05:39,340 --> 00:05:42,310
and then it's going to take the size of the font.

23038
00:05:42,340 --> 00:05:47,290
So let's make it a little bit bigger, maybe a 24 size font. And finally,

23039
00:05:47,290 --> 00:05:51,820
it's going to take whether, if it's bold or italic or, um,

23040
00:05:51,850 --> 00:05:56,110
let's just set it to bold. And now if I run my code again,

23041
00:05:56,470 --> 00:06:00,350
you can see I've now got a Arial font, size 24

23042
00:06:00,620 --> 00:06:01,970
and it's bold.

23043
00:06:02,780 --> 00:06:07,780
You can also change this to italic or you can simply just ignore it and leave

23044
00:06:09,110 --> 00:06:12,590
out that last item and it will just give you a regular piece of text.

23045
00:06:13,130 --> 00:06:18,130
But none of this would show up unless you have this line of code where you

23046
00:06:18,260 --> 00:06:23,090
actually use the packer to pack our label onto the screen. Now

23047
00:06:23,090 --> 00:06:24,290
in the course resources,

23048
00:06:24,290 --> 00:06:29,290
I've linked to the Tkinter documentation on the Python docs and they talk

23049
00:06:29,990 --> 00:06:32,720
about the packer in a lot more detail.

23050
00:06:33,200 --> 00:06:36,020
It's basically a geometry management system.

23051
00:06:36,020 --> 00:06:40,130
It's just a simple way to lay out the components that you're building.

23052
00:06:40,820 --> 00:06:45,440
And this packer has a number of options. So if we scroll down,

23053
00:06:45,440 --> 00:06:50,440
you can see that we can change the expand to a boolean, so true or false.

23054
00:06:50,900 --> 00:06:55,340
And that tells it whether if it should expand to take up the entire space or

23055
00:06:55,340 --> 00:06:58,910
stay as small as it can be. Alternatively,

23056
00:06:58,910 --> 00:07:01,730
you have things like side which changes

23057
00:07:01,730 --> 00:07:05,750
which side should it be packed to, on the left, right, top, or bottom?

23058
00:07:06,710 --> 00:07:10,040
So we know that currently our label is bang in the middle,

23059
00:07:10,340 --> 00:07:15,340
but if I change the side to equal left,

23060
00:07:16,580 --> 00:07:18,080
now when I run the code,

23061
00:07:18,110 --> 00:07:21,590
you can see it's now been packed to the left of the screen.

23062
00:07:21,920 --> 00:07:24,800
And if I say bottom,

23063
00:07:26,000 --> 00:07:30,680
then it's going to go to the bottom and right and top. All of those will work.

23064
00:07:31,790 --> 00:07:34,370
And if I change expand to true,

23065
00:07:34,400 --> 00:07:38,330
you can see it's now trying to take up the entire height and width of the

23066
00:07:38,330 --> 00:07:41,240
available screen size. Now,

23067
00:07:41,240 --> 00:07:43,850
when you're writing this pack function here,

23068
00:07:44,510 --> 00:07:48,290
as soon as I type pack and I open up my parentheses,

23069
00:07:48,710 --> 00:07:53,570
normally we're used to a whole bunch of properties being listed in here for us,

23070
00:07:53,900 --> 00:07:57,800
and we can specify each one and pick and choose basically.

23071
00:07:58,400 --> 00:08:01,130
But in this case, this is all that we see.

23072
00:08:01,310 --> 00:08:06,310
So what's going on here? Compare this to when we used our turtle module and I'm

23073
00:08:07,460 --> 00:08:11,810
going to build a turtle Tim turtle.turtle.

23074
00:08:13,040 --> 00:08:16,340
And then I say, tim.write. Look at how,

23075
00:08:16,370 --> 00:08:19,910
when I opened up the parentheses here, you can see there's the argument

23076
00:08:19,910 --> 00:08:23,360
which is the Object that's going to be written, and then whether

23077
00:08:23,360 --> 00:08:26,960
if the writing should be moved to the bottom corner,

23078
00:08:27,350 --> 00:08:29,000
which direction it should be aligned,

23079
00:08:29,000 --> 00:08:34,000
what's the font and all of the available inputs that we can give to this write

23080
00:08:34,580 --> 00:08:39,140
function. Now compare that to our pack function here.

23081
00:08:39,830 --> 00:08:43,520
This, you'll notice, is really different. Now,

23082
00:08:43,549 --> 00:08:47,930
if you actually look in the documentation for pack,

23083
00:08:48,170 --> 00:08:51,980
you can see it actually has a number of things that we can change; before,

23084
00:08:51,980 --> 00:08:56,190
expand, fill, in, side, and all of these things

23085
00:08:56,460 --> 00:09:00,090
which are modifiable and do various things.

23086
00:09:00,480 --> 00:09:04,950
But how is it that it doesn't seem to exist as one of the arguments that we can

23087
00:09:04,950 --> 00:09:08,820
use? The secret lies in this last part here,

23088
00:09:08,880 --> 00:09:13,230
the **kw. And in the next lesson,

23089
00:09:13,530 --> 00:09:17,910
we're going to talk about some more advanced features of Python arguments.

23090
00:09:18,270 --> 00:09:22,020
And we're going to look at how we can provide default argument values,

23091
00:09:22,320 --> 00:09:27,320
how we can define unlimited positional arguments and unlimited keyword arguments.

23092
00:09:28,260 --> 00:09:30,990
To understand this better, head over to the next lesson

23093
00:09:31,260 --> 00:09:34,290
and we'll do a deep dive on Python arguments.


23094
00:00:00,210 --> 00:00:05,210
In the last lesson, we saw how different it was when we tried to use the turtle's

23095
00:00:05,400 --> 00:00:06,480
write function

23096
00:00:06,780 --> 00:00:11,780
and we saw all of the arguments available listed, versus when we tried to use the

23097
00:00:12,210 --> 00:00:14,940
Tkinter label's pack method,

23098
00:00:15,330 --> 00:00:20,100
and notice how there's actually very few arguments that are listed.

23099
00:00:20,520 --> 00:00:24,000
And yet, somehow there's all of these parameters that we can change

23100
00:00:24,240 --> 00:00:28,650
when we look at the documentation, like expand or side.

23101
00:00:29,010 --> 00:00:32,340
So let's set that side to equal left,

23102
00:00:32,700 --> 00:00:35,730
and I'm going to delete the rest of the turtle code.

23103
00:00:36,150 --> 00:00:41,150
And now you can see our label is placed on the left side of our screen.

23104
00:00:42,900 --> 00:00:45,030
How is it that these parameters,

23105
00:00:45,090 --> 00:00:48,090
even though they're not listed in the list of properties,

23106
00:00:48,330 --> 00:00:52,770
how is it that we're able to use them just by typing them in? Well,

23107
00:00:52,800 --> 00:00:57,510
to understand this, we have to learn a bit more about advanced arguments.

23108
00:00:57,900 --> 00:00:59,430
Not how to argue better,

23109
00:00:59,520 --> 00:01:04,519
but how to use advanced Python arguments in order to specify a wider

23110
00:01:06,330 --> 00:01:07,890
range of inputs.

23111
00:01:08,790 --> 00:01:12,870
We've already seen how keyword arguments work. For example,

23112
00:01:12,870 --> 00:01:17,430
here I have a function and I have three keyword arguments,

23113
00:01:17,490 --> 00:01:20,280
a, b, and c. And when I call the function,

23114
00:01:20,610 --> 00:01:25,320
I can provide those inputs, a, b, and c in any order I want

23115
00:01:25,650 --> 00:01:27,930
as long as I've got the keyword in front.

23116
00:01:27,990 --> 00:01:31,020
So c = 3, a = 1, and b = 2.

23117
00:01:31,980 --> 00:01:34,980
Now what if when I use this function,

23118
00:01:35,370 --> 00:01:40,370
it's nine out of ten times, a is going to be equal to 1, b is 2 and c as 3.

23119
00:01:41,460 --> 00:01:46,110
Why is it that when I call the function, I always have to put in these values?

23120
00:01:46,170 --> 00:01:48,510
That seems a bit of a wasted effort, right?

23121
00:01:49,020 --> 00:01:53,850
Python has a very neat way of solving this by creating arguments that have

23122
00:01:53,940 --> 00:01:55,320
default values.

23123
00:01:55,830 --> 00:01:59,160
We can do this by simply changing the function declaration.

23124
00:01:59,550 --> 00:02:01,470
So when we create our function,

23125
00:02:01,590 --> 00:02:05,970
we can already give it some values to start off with. So we can say that a

23126
00:02:05,970 --> 00:02:09,870
should be equal to 1, b = 2 and c = 3, and these

23127
00:02:09,940 --> 00:02:11,370
are the default values.

23128
00:02:11,790 --> 00:02:15,900
So that means when I call this function and I want to use the default values,

23129
00:02:16,290 --> 00:02:20,670
I don't actually have to provide any inputs and it will just go along as it

23130
00:02:20,670 --> 00:02:22,740
would before. Now,

23131
00:02:22,800 --> 00:02:26,400
if, however, I wanted to modify one of those inputs,

23132
00:02:26,430 --> 00:02:29,220
let's say I wanted to give a custom value for b

23133
00:02:29,520 --> 00:02:32,880
rather than let it be equal to the default value of 2, well,

23134
00:02:32,880 --> 00:02:37,880
then I can just change the value of b, b = 5. And the rest,

23135
00:02:38,640 --> 00:02:42,240
so a and c, will still take on their default values.

23136
00:02:42,990 --> 00:02:46,140
Notice when I called tim.write,

23137
00:02:46,590 --> 00:02:50,730
this write method takes five inputs; self,

23138
00:02:50,760 --> 00:02:54,240
because it's a method and associated with the turtle class,

23139
00:02:54,690 --> 00:02:57,750
it takes an argument which is what it is going to write,

23140
00:02:58,050 --> 00:03:00,910
move, align and font. Now,

23141
00:03:01,360 --> 00:03:04,690
if I wanted to use tim.turtle to just write

23142
00:03:04,690 --> 00:03:06,370
some sort of text,

23143
00:03:08,350 --> 00:03:12,820
I can actually just put in this. And when I run this code,

23144
00:03:13,720 --> 00:03:17,320
you'll see that I've got some piece of text being written.

23145
00:03:18,280 --> 00:03:22,300
But how is it that I've got all of these other inputs

23146
00:03:22,360 --> 00:03:26,620
which I've just basically completely ignored? What about move?

23147
00:03:26,650 --> 00:03:31,000
What about align? What about fonts? Well, as you can see,

23148
00:03:31,330 --> 00:03:34,330
they have the =...,

23149
00:03:34,660 --> 00:03:38,860
which is trying to tell you that they've already got a default value.

23150
00:03:39,370 --> 00:03:42,160
And in fact, if I hover over this write function,

23151
00:03:42,220 --> 00:03:45,940
you can see that in the quick docs that pops up,

23152
00:03:46,150 --> 00:03:47,860
it tells me that the argument,

23153
00:03:48,210 --> 00:03:50,100
or the arg,

23154
00:03:50,490 --> 00:03:54,450
which is what it is to be written to the screen, move

23155
00:03:54,510 --> 00:03:58,380
which is optional which can be set as true or false, align

23156
00:03:58,380 --> 00:04:01,140
which is optional, font which is optional.

23157
00:04:01,710 --> 00:04:06,420
The reason why they're optional is because all of these actually have a default

23158
00:04:06,420 --> 00:04:07,860
value. For example,

23159
00:04:07,860 --> 00:04:12,860
move, by default, is false; align by default is centered,

23160
00:04:14,070 --> 00:04:15,960
and there's also a default font.

23161
00:04:16,920 --> 00:04:21,920
So that means that all we have to do is just to provide the required arguments.

23162
00:04:23,340 --> 00:04:27,930
If I don't add anything at all when I call this write method, you can see

23163
00:04:27,930 --> 00:04:30,090
I do in fact get an error here.

23164
00:04:30,300 --> 00:04:34,650
And it says write is missing one required positional argument,

23165
00:04:34,890 --> 00:04:37,260
which is that first arg

23166
00:04:37,620 --> 00:04:41,130
which is the thing that it's expecting to write. I mean,

23167
00:04:41,130 --> 00:04:44,520
if you're calling turtle to do some writing and you not telling it what to write,

23168
00:04:44,790 --> 00:04:45,870
that's a bit of a problem.

23169
00:04:46,200 --> 00:04:51,200
So this ARG is a required argument because it doesn't have that =... at

23170
00:04:52,590 --> 00:04:56,910
the end. So this you have to provide. But once you've done that,

23171
00:04:56,940 --> 00:04:59,430
then the rest of them all have default values.

23172
00:04:59,430 --> 00:05:01,710
They already know how to behave and what to do

23173
00:05:02,010 --> 00:05:05,850
even if you don't tell them anything extra. Now, however,

23174
00:05:05,850 --> 00:05:08,640
if you wanted to modify one of those arguments,

23175
00:05:08,700 --> 00:05:12,990
let's say I decide to change the font to something completely different

23176
00:05:13,110 --> 00:05:18,110
like Times New Roman, and make the font super large

23177
00:05:18,870 --> 00:05:22,710
80 size font and change it to bold,

23178
00:05:23,220 --> 00:05:28,220
then you can see that that optional setting gets implemented and it's now

23179
00:05:28,650 --> 00:05:32,490
changed the font and its changed the size and also made it bold.

23180
00:05:33,120 --> 00:05:35,100
But this was completely

23181
00:05:35,160 --> 00:05:36,510
optional.

23182
00:05:37,470 --> 00:05:42,390
And this is all down to creating the function with default values.


23183
00:00:00,090 --> 00:00:01,080
In the last lesson,

23184
00:00:01,170 --> 00:00:05,010
we looked at how to provide default values for optional arguments.

23185
00:00:05,340 --> 00:00:08,100
In this lesson, we'll discuss how to create functions

23186
00:00:08,189 --> 00:00:10,290
that can take any number of arguments.

23187
00:00:10,800 --> 00:00:13,680
Let's say that we had a function called add,

23188
00:00:13,980 --> 00:00:18,660
which adds n1 and n2 and it just returns the sum of those numbers.

23189
00:00:19,020 --> 00:00:23,850
That's very well and good, but what if I wanted to add more than two numbers?

23190
00:00:23,940 --> 00:00:28,080
Well, I would have to add n1, n2, n3, n4,

23191
00:00:28,320 --> 00:00:31,020
but then I would have to add four numbers every single time.

23192
00:00:31,500 --> 00:00:36,500
So what if I wanted to make this function more flexible and to allow any number

23193
00:00:37,080 --> 00:00:40,740
of arguments to be used as the input? Well,

23194
00:00:40,830 --> 00:00:45,750
what I can do is to simply change the code to use this asterix

23195
00:00:45,900 --> 00:00:48,060
and then the name of my parameter.

23196
00:00:48,810 --> 00:00:52,110
That name args is by convention

23197
00:00:52,140 --> 00:00:57,120
what most Python developers will use. And it simply stands for arguments.

23198
00:00:57,420 --> 00:01:00,120
But you don't have to stick with that naming if you don't want to.

23199
00:01:01,230 --> 00:01:05,430
But what you do need is that asterix. That's the really important part.

23200
00:01:05,910 --> 00:01:10,910
What that tells Python is this function add can accept any number of arguments.

23201
00:01:13,110 --> 00:01:15,210
And once inside the function,

23202
00:01:15,240 --> 00:01:17,850
you can actually loop through all of the arguments

23203
00:01:18,090 --> 00:01:22,770
which is going to be in the form of a tuple and you can do whatever it is you

23204
00:01:22,770 --> 00:01:24,690
want with each of those arguments.

23205
00:01:25,140 --> 00:01:29,520
Instead of now passing in only two arguments because that was fixed

23206
00:01:29,520 --> 00:01:34,200
when we created the function, we can now pass in any number of values

23207
00:01:34,290 --> 00:01:36,660
like four values or seven values,

23208
00:01:36,960 --> 00:01:41,640
and we can do whatever it is we want with them. Let's try this code out.

23209
00:01:41,670 --> 00:01:44,940
I'm going to delete the code related to Python turtle,

23210
00:01:45,300 --> 00:01:49,980
and I'm going to create a new file called playground.py.

23211
00:01:50,640 --> 00:01:54,720
And we're going to use this playground.py to test out what we've just learned.

23212
00:01:55,560 --> 00:01:59,820
I want you to have a think about what you just saw in the slides and see if you

23213
00:01:59,820 --> 00:02:04,820
can create a function called add where you can pass in as many numbers as you

23214
00:02:05,610 --> 00:02:06,420
want

23215
00:02:06,420 --> 00:02:11,420
and it will always add together all of the numbers that are being passed into

23216
00:02:12,060 --> 00:02:16,080
the function as the input, and then return the total

23217
00:02:16,080 --> 00:02:19,470
sum. Pause the video and see if you can give that a go.

23218
00:02:21,210 --> 00:02:21,600
All right.

23219
00:02:21,600 --> 00:02:26,600
So what we want to do is to be able to call this method add, for example

23220
00:02:26,790 --> 00:02:30,270
down here and pass in any number of values, right?

23221
00:02:30,300 --> 00:02:32,550
Let's just go with three to begin with.

23222
00:02:33,090 --> 00:02:38,090
And then we want to receive all of those values inside this function and then

23223
00:02:38,400 --> 00:02:42,300
add them all together. So we're going to use that asterix trick.

23224
00:02:42,450 --> 00:02:47,130
So one * and then we can give a name to the arguments that we receive,

23225
00:02:47,490 --> 00:02:49,860
which normally is just called args.

23226
00:02:51,450 --> 00:02:53,280
Now that we've got these args,

23227
00:02:53,490 --> 00:02:58,490
if I actually go ahead and print it out and we go to run and then run and change

23228
00:03:01,750 --> 00:03:06,640
this to our playground, you can see it's basically just printing out a tuple.

23229
00:03:07,090 --> 00:03:11,410
And that tuple represents all the inputs that were passed in when this function

23230
00:03:11,410 --> 00:03:13,900
was called. And in fact,

23231
00:03:13,900 --> 00:03:18,840
if I do a time check on this args, you can see it

23232
00:03:18,840 --> 00:03:21,850
is indeed a tuple. Now,

23233
00:03:21,850 --> 00:03:26,140
once we've got hold of this args tuple, we can actually loop through it.

23234
00:03:26,320 --> 00:03:30,610
So we can say for n in args, for

23235
00:03:30,640 --> 00:03:35,260
each of the numbers in that tuple, let's go ahead and print each of them.

23236
00:03:36,280 --> 00:03:39,940
You can see it's now separated them all out; three, five, and six.

23237
00:03:40,270 --> 00:03:42,910
So that makes it easy enough for us to create the sum.

23238
00:03:43,240 --> 00:03:45,700
So let's create a sum which is equal to zero.

23239
00:03:46,060 --> 00:03:48,550
And then instead of printing out each of the n,

23240
00:03:48,580 --> 00:03:53,560
we can just add the n to sum, and finally outside the loop

23241
00:03:53,590 --> 00:03:55,600
we'll return our sum.

23242
00:03:56,350 --> 00:04:00,880
So now when we print this final results by calling add three, five,

23243
00:04:00,880 --> 00:04:04,750
six, you can see it's now added three, five, and six,

23244
00:04:05,020 --> 00:04:09,220
and we can call this method in different ways. We can add more values to it,

23245
00:04:09,460 --> 00:04:13,630
two and one, and you can see it's now equal to 17.

23246
00:04:13,990 --> 00:04:18,990
And you can basically keep going because it can take any number of values.

23247
00:04:19,779 --> 00:04:23,710
This is all done by this asterix keyword.

23248
00:04:24,280 --> 00:04:29,280
And it basically packs all of these numbers that you've put in as the input into

23249
00:04:30,070 --> 00:04:33,790
a tuple called whatever it is you want it to be called.

23250
00:04:34,120 --> 00:04:37,660
So you can call it numbers if you want, or you can stick to the default,

23251
00:04:37,690 --> 00:04:42,400
which is just args. And then once we've got that args inside the function,

23252
00:04:42,430 --> 00:04:47,080
we loop through it and we can do whatever we want to each of the values. Now,

23253
00:04:47,110 --> 00:04:48,640
in addition to looping through it,

23254
00:04:48,670 --> 00:04:53,200
you can also access them by index because it's a tuple after all.

23255
00:04:53,200 --> 00:04:57,250
So we can say args at position zero like this.

23256
00:04:57,280 --> 00:04:58,780
And if I print that out,

23257
00:04:59,260 --> 00:05:03,550
you'll see that the value is three because the first one is three.

23258
00:05:04,390 --> 00:05:08,260
So that's why these unlimited arguments using this *

23259
00:05:08,290 --> 00:05:12,340
args is also known as unlimited positional arguments,

23260
00:05:12,610 --> 00:05:17,320
because the position of your arguments which you pass into the function

23261
00:05:17,350 --> 00:05:22,350
matters' a huge deal because if I fetched the one at position one,

23262
00:05:22,630 --> 00:05:25,030
it will no longer be three, and it'll now be five.

23263
00:05:26,140 --> 00:05:31,140
So this is a way for us to be able to define a function and specify a unlimited

23264
00:05:34,300 --> 00:05:38,980
or unspecified number of inputs. In other words,

23265
00:05:39,070 --> 00:05:43,690
the number of arguments for the function can vary because the asterix operator

23266
00:05:43,930 --> 00:05:47,860
collects all of the arguments into a tuple. However,

23267
00:05:47,890 --> 00:05:52,720
what if we wanted to refer to our arguments by name rather than by position?

23268
00:05:53,230 --> 00:05:56,140
Well, that is exactly what we'll talk about in the next lesson.

23269
00:05:56,460 --> 00:05:57,010
So I'll see you there.


23270
00:00:00,480 --> 00:00:03,330
In the last lesson we saw how the asterix operator

23271
00:00:03,330 --> 00:00:07,320
could be used to provide any number of positional arguments to a function

23272
00:00:07,680 --> 00:00:11,370
because it collected them into a tuple. In this lesson,

23273
00:00:11,430 --> 00:00:14,130
we'll take a look at the double asterix operator,

23274
00:00:14,430 --> 00:00:18,750
and this is going to allow us to work with an arbitrary number of keyword

23275
00:00:18,750 --> 00:00:20,940
arguments. Let's see this in action.

23276
00:00:21,600 --> 00:00:24,360
So let's say I create another function called calculate,

23277
00:00:24,720 --> 00:00:29,160
and this time I'm going to add two asteriks. And in this case,

23278
00:00:29,220 --> 00:00:34,220
I'm going to call my argument **kwargs or keyword arguments.

23279
00:00:34,770 --> 00:00:39,770
What we've done now is we've added two asterisks signs in front of this parameter

23280
00:00:39,900 --> 00:00:40,733
name,

23281
00:00:41,160 --> 00:00:45,630
and we've now created unlimited keyword arguments.

23282
00:00:46,080 --> 00:00:51,080
What this allows me to do is I could basically now call this calculate function,

23283
00:00:52,380 --> 00:00:57,090
I could pass in a keyword argument, for example,

23284
00:00:57,210 --> 00:01:00,210
add, and let's give it a value, maybe three,

23285
00:01:00,510 --> 00:01:04,739
and then let's add another keyword argument which I'll call multiply,

23286
00:01:05,069 --> 00:01:08,910
set that to equal five. And effectively

23287
00:01:08,940 --> 00:01:13,140
what this has been turned into is these **kwargs,

23288
00:01:13,500 --> 00:01:18,210
which is basically a dictionary. So if I print these **kwargs,

23289
00:01:18,810 --> 00:01:23,040
you can see what gets printed is basically a bog-standard dictionary.

23290
00:01:23,490 --> 00:01:26,790
And in fact, if we do that type check thing again, so type,

23291
00:01:28,620 --> 00:01:30,900
you can see it is in fact, a dictionary.

23292
00:01:31,920 --> 00:01:36,810
This dictionary basically represents each of the keyword arguments and their

23293
00:01:36,810 --> 00:01:37,643
values.

23294
00:01:37,950 --> 00:01:42,570
So add is now a key and three is now it's value, multiply's

23295
00:01:42,570 --> 00:01:45,660
the second key and five is its value.

23296
00:01:46,140 --> 00:01:50,760
What I can do here is I could do the standard way of looping through dictionary.

23297
00:01:50,760 --> 00:01:55,760
So I could say for key, value in **kwargs .items,

23298
00:01:57,960 --> 00:02:02,160
and then I can get access to each of the keys and their values as I loop through

23299
00:02:02,160 --> 00:02:04,800
the dictionary like this.

23300
00:02:04,920 --> 00:02:08,910
So add three multiplied by five. Alternatively,

23301
00:02:08,970 --> 00:02:11,700
I can simply use the names of the keys.

23302
00:02:12,120 --> 00:02:17,120
So I could just simply print my **kwargs and then use the square brackets and then

23303
00:02:18,270 --> 00:02:22,200
provide the name of the key, so add for example.

23304
00:02:22,950 --> 00:02:27,060
And that will give me the value which is three as you can see here.

23305
00:02:27,930 --> 00:02:28,260
Now,

23306
00:02:28,260 --> 00:02:33,260
what this allows me to do is it basically lets me look through all of the inputs

23307
00:02:34,920 --> 00:02:39,060
and find the ones that I want and use them to do something.

23308
00:02:39,540 --> 00:02:44,100
So for example, in this case, it's a calculate function, right?

23309
00:02:44,490 --> 00:02:48,420
So we could let's say start off with a normal positional argument,

23310
00:02:48,450 --> 00:02:53,370
so let's call it n and let's pass in that n at the very beginning.

23311
00:02:53,670 --> 00:02:58,500
So let's say we start out with the number 2, n is now equal to 2,

23312
00:02:58,900 --> 00:03:03,700
and then the **kwargs is a dictionary of the remainder arguments.

23313
00:03:05,290 --> 00:03:08,020
Let's say that I wanted to do some calculations.

23314
00:03:08,050 --> 00:03:13,050
I wanted to say n+= kwargs,

23315
00:03:13,870 --> 00:03:18,340
and I'm going to get hold of the value under add.

23316
00:03:19,030 --> 00:03:22,960
And then I'm going to say, n*= the kwargs,

23317
00:03:23,380 --> 00:03:26,290
and I'm going to get hold of value of multiply.

23318
00:03:26,950 --> 00:03:30,250
So now when I go ahead and print

23319
00:03:30,310 --> 00:03:35,310
my n, you can see that what happens is it takes the first value 2 as equal to n,

23320
00:03:39,850 --> 00:03:44,380
and then n, this 2, is going to be added to the number I wanted to add

23321
00:03:44,410 --> 00:03:46,660
which is 3. So 2 + 3 is 5,

23322
00:03:47,140 --> 00:03:52,140
and then it multiplied that 5 by whatever it is I had stored in multiply.

23323
00:03:52,660 --> 00:03:55,120
So 5 plus 5, and we get 25.

23324
00:03:55,810 --> 00:04:00,460
This gives us a more flexible way of working with these arguments.

23325
00:04:00,910 --> 00:04:05,500
And it gives us a way to name the values that we're passing in to this function.

23326
00:04:06,880 --> 00:04:11,110
Now, coming back to what they've done in the Tkinter module,

23327
00:04:11,650 --> 00:04:16,649
basically this Tkinter module is actually ported from another technology called

23328
00:04:17,560 --> 00:04:18,392
TK.

23329
00:04:18,940 --> 00:04:23,320
And TK actually has a very different syntax from Python.

23330
00:04:23,950 --> 00:04:28,900
In order for it to work, they basically took all of the Tk commands,

23331
00:04:28,930 --> 00:04:32,470
like creating a label or packing some sort of item,

23332
00:04:32,920 --> 00:04:37,920
and took all of the options and turn them into these **kwargs or optional keyword

23333
00:04:40,180 --> 00:04:41,013
arguments.

23334
00:04:41,380 --> 00:04:46,000
And that is why when we create a new label from the Tkinter module

23335
00:04:46,030 --> 00:04:48,310
or when we call the pack method,

23336
00:04:48,520 --> 00:04:53,290
you can see that it doesn't actually come up with any properties that we can

23337
00:04:53,290 --> 00:04:57,850
modify other than this **kw,

23338
00:04:58,120 --> 00:05:00,580
which is the same as our **kwargs.

23339
00:05:01,390 --> 00:05:04,390
So we could actually create a class like that as well,

23340
00:05:04,660 --> 00:05:07,180
because this is done at initialization, right?

23341
00:05:07,180 --> 00:05:09,640
This is done when they're creating that label class.

23342
00:05:10,420 --> 00:05:13,810
Let's say that we create a class like this which I'll car,

23343
00:05:14,410 --> 00:05:16,270
and in the init,

23344
00:05:16,780 --> 00:05:21,430
what I'll include in addition to self is **

23345
00:05:21,670 --> 00:05:25,030
kw, or **kwargs, or however you want to spell it.

23346
00:05:25,840 --> 00:05:30,840
This kw are going to be all of the optional arguments that I'll pass in

23347
00:05:31,270 --> 00:05:35,950
when I'm initializing a new object from this class. I can say,

23348
00:05:35,950 --> 00:05:38,770
for example, self.

23349
00:05:38,830 --> 00:05:42,370
make of the car equals kw.

23350
00:05:43,270 --> 00:05:47,230
And then from kw, I'm going to get the make.

23351
00:05:48,010 --> 00:05:49,810
And then I'm going to have self.model

23352
00:05:49,810 --> 00:05:53,980
which is going to be equal to kw and then model. And of course,

23353
00:05:53,980 --> 00:05:57,830
all of the spelling matters so make sure you don't make any typos.

23354
00:05:58,280 --> 00:06:00,260
And then I decide to create my car

23355
00:06:00,290 --> 00:06:04,490
which is going to be the object created from this class. Now notice how

23356
00:06:04,490 --> 00:06:06,440
when I open up the parentheses here,

23357
00:06:06,740 --> 00:06:10,850
you don't actually see any of the properties like make and model show up

23358
00:06:10,880 --> 00:06:14,480
when I'm initializing. All you see is **

23359
00:06:14,510 --> 00:06:18,380
kw, just in the same way as you see it here,

23360
00:06:19,850 --> 00:06:21,680
**kw.

23361
00:06:22,640 --> 00:06:26,750
And that of course refers to our optional keyword arguments.

23362
00:06:27,320 --> 00:06:31,610
Let's add some values. Let's set the make to a Nissan,

23363
00:06:32,150 --> 00:06:37,150
and lets set the model to a-- let's set it to a GT-R. And now I can use my object

23364
00:06:40,820 --> 00:06:44,930
just as I would any other object. I can say my_car.model.

23365
00:06:45,290 --> 00:06:49,580
And when I hit run, you can see I've got GT-R being printed here.

23366
00:06:50,690 --> 00:06:54,740
And if I decided to print make, you can see

23367
00:06:54,740 --> 00:06:55,970
it gets hold off the make.

23368
00:06:56,480 --> 00:07:00,830
Now, what if I didn't actually specify one of these arguments.

23369
00:07:01,430 --> 00:07:05,390
Notice how it's now actually going to crash.

23370
00:07:06,020 --> 00:07:08,570
It tells me that keyError model.

23371
00:07:08,750 --> 00:07:13,750
So when it was initializing this car object, it fell on this line. And it

23372
00:07:15,800 --> 00:07:20,800
couldn't get hold of a value called model from this kw argument dictionary.

23373
00:07:23,060 --> 00:07:24,650
In fact, with dictionaries,

23374
00:07:25,040 --> 00:07:28,370
we can get hold of the values through the square bracket method,

23375
00:07:28,640 --> 00:07:33,640
but we can also use a function called get. And we use get in a very similar way

23376
00:07:35,030 --> 00:07:37,220
to the way that we use the square brackets.

23377
00:07:37,250 --> 00:07:41,540
We just pass in the name of the key and we want to get hold of the value.

23378
00:07:42,140 --> 00:07:47,140
But the benefit of get is that if this key doesn't exist in the dictionary,

23379
00:07:50,510 --> 00:07:54,650
then it will just return none and it won't give us an error.

23380
00:07:55,820 --> 00:08:00,080
So now if I run this code again, you can see that everything works,

23381
00:08:00,320 --> 00:08:03,890
but my car.model is now equal to none.

23382
00:08:04,580 --> 00:08:09,580
So this is how we can actually create a class with lots of optional keyword

23383
00:08:10,340 --> 00:08:11,173
arguments.

23384
00:08:12,110 --> 00:08:17,110
So we could have a self.color or self.seats.

23385
00:08:21,050 --> 00:08:25,580
And depending on what it is we want to initialize this car object to,

23386
00:08:25,910 --> 00:08:30,910
then we can simply go ahead and add whatever it is we want to set as the make

23387
00:08:31,820 --> 00:08:35,750
and the model or the color and the seats. And in the same way

23388
00:08:35,780 --> 00:08:38,059
that way using this label class,

23389
00:08:38,390 --> 00:08:41,150
we can set the text or we can set the font.

23390
00:08:41,270 --> 00:08:46,270
We can set all of the options or we can leave them as the default values. That

23391
00:08:48,230 --> 00:08:52,610
should help you understand how this code works a little bit better.

23392
00:08:53,180 --> 00:08:56,580
And the reason why it works like this is, as I say,

23393
00:08:56,580 --> 00:09:01,580
mostly because this module was converted from another language and this just

23394
00:09:01,950 --> 00:09:06,950
happened to be the most efficient way for them to do this. Now with other more

23395
00:09:07,380 --> 00:09:11,280
Pythonic modules or things that have been created in Python

23396
00:09:11,610 --> 00:09:16,260
like the turtle module, then you'll see more bog-standard kind of code

23397
00:09:16,320 --> 00:09:19,740
like what we've been working with. So when we initialize a new turtle,

23398
00:09:19,950 --> 00:09:22,530
you can see that it has a default shape,

23399
00:09:22,620 --> 00:09:25,230
it has a visible boolean,

23400
00:09:25,290 --> 00:09:29,190
and we can set all of those properties that we can see in this prompt.

23401
00:09:30,510 --> 00:09:31,860
Now in the next lesson,

23402
00:09:31,890 --> 00:09:36,210
I want to dive deeper into the TKinter documentation

23403
00:09:36,570 --> 00:09:40,230
and I want to show you how we can create other components, not just the label,

23404
00:09:40,470 --> 00:09:42,990
but things like buttons and text inputs

23405
00:09:43,280 --> 00:09:46,790
and a whole range of things that will bring our GUI program to life.

23406
00:09:47,210 --> 00:09:50,120
So for all of that and more, I'll see you in the next lesson.


23407
00:00:00,360 --> 00:00:05,360
In the last lesson, we saw how we could set a lot of the properties for the

23408
00:00:06,300 --> 00:00:09,000
methods associated with Tkinter,

23409
00:00:09,300 --> 00:00:13,440
or for initializing the components like our labels.

23410
00:00:14,160 --> 00:00:15,750
Now in the documentation,

23411
00:00:15,870 --> 00:00:19,770
they tell us that there's a number of ways that we can set these options.

23412
00:00:20,190 --> 00:00:25,190
We can either do it when we initialize a new object or we can access the

23413
00:00:25,860 --> 00:00:30,420
properties like as if they are keys in a dictionary and then setting the value.

23414
00:00:31,020 --> 00:00:31,650
And finally,

23415
00:00:31,650 --> 00:00:36,450
we can set multiple properties by using the config method and passing in the

23416
00:00:36,450 --> 00:00:38,970
value for each of the things that we want to change,

23417
00:00:39,690 --> 00:00:43,590
I recommend taking a look at the Tcl tk documentation

23418
00:00:43,950 --> 00:00:47,460
which lists all of the options. Like for example, here,

23419
00:00:47,460 --> 00:00:52,440
I've got my label chosen and there are standard options like background color,

23420
00:00:52,470 --> 00:00:56,400
or text. And there are widget-specific options,

23421
00:00:56,430 --> 00:01:01,050
so specific to the label, you can change its height, you can change its width.

23422
00:01:01,740 --> 00:01:04,680
Coming back to my label in my main.py,

23423
00:01:05,129 --> 00:01:08,760
if I wanted to change my label's property, so for example,

23424
00:01:08,760 --> 00:01:13,500
if I want to change the text that's inside and I want to make it different from

23425
00:01:13,500 --> 00:01:15,570
the initial text that it displays,

23426
00:01:15,840 --> 00:01:20,280
then I can do simply this by changing it as if it were a dictionary.

23427
00:01:20,880 --> 00:01:24,390
And I can set that to the new value, so new text.

23428
00:01:25,740 --> 00:01:30,740
Now I could also do it by doing my_label.config and then passing in the

23429
00:01:31,830 --> 00:01:36,830
text as a keyword argument. Either way

23430
00:01:37,230 --> 00:01:40,440
when I run this main.py, remember previously,

23431
00:01:40,440 --> 00:01:41,850
we were running our playground.

23432
00:01:41,850 --> 00:01:46,850
So go back to run and then click this and then change it to our main.py.

23433
00:01:48,720 --> 00:01:53,720
And now you should see the new text show up instead of the original text,

23434
00:01:53,760 --> 00:01:55,110
which is I am a label.

23435
00:01:55,800 --> 00:02:00,800
So this is how we configure and change or update the properties of a particular

23436
00:02:01,830 --> 00:02:03,360
component that we've created.

23437
00:02:04,860 --> 00:02:08,759
In addition to labels, we can also create buttons.

23438
00:02:09,180 --> 00:02:13,920
Let's create a button, which again, is going to come from the Tkinter module

23439
00:02:14,220 --> 00:02:17,610
and it's going to be the button class from that module

23440
00:02:17,670 --> 00:02:20,220
as you can see right here. Now,

23441
00:02:20,280 --> 00:02:22,380
all of the components that we're going to be using

23442
00:02:22,410 --> 00:02:25,290
come from this class. Very often

23443
00:02:25,320 --> 00:02:30,320
you'll see people instead of importing Tkinter, they'll say from tkinter

23444
00:02:30,780 --> 00:02:31,620
import,

23445
00:02:31,770 --> 00:02:36,270
and then the asterisk to denote import every single class.

23446
00:02:36,900 --> 00:02:40,590
This means that we can basically get rid of all the module mentions

23447
00:02:40,590 --> 00:02:43,170
and we can just initialize a window as tk,

23448
00:02:43,500 --> 00:02:48,500
our label as a label and our button as simply button, like this. Saves a little

23449
00:02:50,400 --> 00:02:54,330
bit of typing, depends on how many of the classes you're gonna use.

23450
00:02:54,330 --> 00:02:55,500
If you're just going to use one,

23451
00:02:55,800 --> 00:02:58,980
I recommend keeping the module so that you know, where it comes from.

23452
00:02:59,230 --> 00:03:00,940
But if you're going to use loads of them

23453
00:03:00,970 --> 00:03:04,750
like we are here, then it does make it a lot quicker to type.

23454
00:03:05,410 --> 00:03:07,660
So let's create our button. And again,

23455
00:03:07,660 --> 00:03:12,660
it has a whole bunch of optional keyword arguments. And some of those are

23456
00:03:12,910 --> 00:03:14,440
standard. So for example,

23457
00:03:14,440 --> 00:03:19,030
we can change the button text in the same way that we changed the label text.

23458
00:03:19,450 --> 00:03:24,450
So let's make it to say click me. And remember that in order to make anything appear

23459
00:03:25,240 --> 00:03:27,700
on screen, it needs to have some sort of layout.

23460
00:03:28,090 --> 00:03:31,540
So let's call pack again to get it to be packed onto the screen.

23461
00:03:32,260 --> 00:03:34,360
So now if I run this code as it is,

23462
00:03:34,690 --> 00:03:39,690
you can see that my button has been placed in the middle of the screen and my

23463
00:03:39,940 --> 00:03:41,650
label is packed to the left.

23464
00:03:43,120 --> 00:03:45,400
Let's go ahead and get rid of that left

23465
00:03:45,430 --> 00:03:49,780
so that it actually goes in order so that the first thing gets created,

23466
00:03:49,810 --> 00:03:53,830
it gets put on screen first and then the next thing is the button

23467
00:03:53,890 --> 00:03:56,740
and then this is all centered by default.

23468
00:03:58,150 --> 00:04:02,110
The next obvious question is how can we get this button to actually work?

23469
00:04:02,290 --> 00:04:07,240
Because at the moment clicking on it does absolutely nothing. As you remember

23470
00:04:07,270 --> 00:04:09,550
when we used our turtle module,

23471
00:04:09,760 --> 00:04:14,650
we could have an event listener. So we can create some sort of a function,

23472
00:04:14,830 --> 00:04:17,380
let's call it say button_clicked.

23473
00:04:18,730 --> 00:04:22,480
And then this function could do something say, for example,

23474
00:04:22,750 --> 00:04:24,430
I got clicked.

23475
00:04:25,300 --> 00:04:29,410
And when this button detects an event,

23476
00:04:29,470 --> 00:04:33,430
say a click event, then it could call this function.

23477
00:04:33,910 --> 00:04:38,470
So in the tkinter world, there is a property called command,

23478
00:04:38,890 --> 00:04:43,420
which you can set to equal the name of a function. So remember,

23479
00:04:43,720 --> 00:04:47,470
it's the name of the function, not calling the function.

23480
00:04:47,620 --> 00:04:50,920
So we don't actually need the parentheses at the end.

23481
00:04:51,670 --> 00:04:56,500
Now when we run our code, when this button detects a command

23482
00:04:56,500 --> 00:04:58,480
which is basically a click event,

23483
00:04:58,750 --> 00:05:03,010
then it's going to trigger this method and it's going to print this hopefully

23484
00:05:03,010 --> 00:05:07,450
into the console. So let's hit run. Now,

23485
00:05:07,450 --> 00:05:11,650
I'm going to click on this button and you can see it says I got clicked and it

23486
00:05:11,650 --> 00:05:13,210
does that every time I click on it.

23487
00:05:14,650 --> 00:05:16,840
So here's a challenge for you.

23488
00:05:17,530 --> 00:05:19,900
How can you make the label,

23489
00:05:19,930 --> 00:05:24,370
my_label, instead of reading new text, for it to say

23490
00:05:24,400 --> 00:05:27,910
button got clicked when I click this button?

23491
00:05:28,480 --> 00:05:32,620
So this button click should now change the text. Pause the video,

23492
00:05:32,950 --> 00:05:35,950
give that a go. All right.

23493
00:05:35,950 --> 00:05:40,950
So we know that we can change our label's text by using either of these methods.

23494
00:05:41,410 --> 00:05:45,100
So you can basically pick one of these and add it to this function.

23495
00:05:45,310 --> 00:05:46,540
So I'm going to use the

23496
00:05:46,570 --> 00:05:51,570
my_label.config just because it kind of makes a little bit more sense when I

23497
00:05:52,540 --> 00:05:53,650
read that line of code.

23498
00:05:53,830 --> 00:05:57,860
So I'm going to configure the text property to read button

23499
00:05:58,070 --> 00:05:59,180
got clicked.

23500
00:06:01,580 --> 00:06:03,410
And now when I hit run,

23501
00:06:04,040 --> 00:06:08,300
what you'll see is when I click this button, it's going to change the text.

23502
00:06:10,010 --> 00:06:13,010
So we're now getting a little bit more interactivity.

23503
00:06:13,670 --> 00:06:17,330
The next thing I want to show you is even more interactivity.

23504
00:06:17,750 --> 00:06:21,260
I want to show you a component called the entry component,

23505
00:06:21,440 --> 00:06:24,980
and this is basically just a input effectively.

23506
00:06:25,610 --> 00:06:28,460
So let's create a new object which I'll call input,

23507
00:06:28,820 --> 00:06:31,280
and it's created from the entry class

23508
00:06:31,310 --> 00:06:35,210
which comes from our tkinter module. Now again,

23509
00:06:35,270 --> 00:06:37,220
if we want something to appear on screen,

23510
00:06:37,490 --> 00:06:42,260
we have to give it a layout and we can use the automatic pack to do that.

23511
00:06:42,620 --> 00:06:47,510
So now when I run this code, you can see I've now got a input field. Now,

23512
00:06:47,510 --> 00:06:51,980
if I want to look at the options for my entry,

23513
00:06:52,220 --> 00:06:56,930
I can simply go to this tk documentation, find my entry,

23514
00:06:57,260 --> 00:06:58,010
click on it,

23515
00:06:58,010 --> 00:07:02,780
and you can see I've got standard options and widget-specific options. Now,

23516
00:07:02,810 --> 00:07:07,400
one of the things I want to change is the width. For example,

23517
00:07:07,430 --> 00:07:12,430
I could change the width of this input by simply using the width keyword

23518
00:07:13,940 --> 00:07:14,690
argument.

23519
00:07:14,690 --> 00:07:19,690
And I can specify an integer to indicate the desired width of the entry window.

23520
00:07:21,320 --> 00:07:25,640
So at the moment, if I think it's a little bit too wide,

23521
00:07:26,000 --> 00:07:30,980
then let's try modifying our input so that has a slightly lower width.

23522
00:07:31,310 --> 00:07:32,750
Let's change it to maybe 10

23523
00:07:33,830 --> 00:07:37,430
and you can see it's now a lot smaller than before. Now

23524
00:07:37,430 --> 00:07:41,900
what if I want to get hold of the value that came from that entry?

23525
00:07:42,890 --> 00:07:45,740
Well, in that case, I have to use the get

23526
00:07:46,130 --> 00:07:49,010
which basically just returns the entry's string.

23527
00:07:49,430 --> 00:07:52,430
So I could say input.get

23528
00:07:52,910 --> 00:07:57,910
and then this method is going to return the input as a string.

23529
00:07:58,940 --> 00:08:01,550
So I could, for example, print it out.

23530
00:08:02,210 --> 00:08:06,470
But unfortunately, the point when this line of code is run,

23531
00:08:06,800 --> 00:08:10,490
there's actually no input inside this entry.

23532
00:08:10,910 --> 00:08:13,700
So we would actually print absolutely nothing.

23533
00:08:15,500 --> 00:08:17,060
Here's a challenge for you.

23534
00:08:17,660 --> 00:08:21,350
Can you figure out how to get whatever is written in here

23535
00:08:22,880 --> 00:08:25,820
to be the text in the label

23536
00:08:26,210 --> 00:08:28,340
the moment when I click on this button?

23537
00:08:29,090 --> 00:08:32,690
Given that I've typed something in here, when I click this button,

23538
00:08:33,020 --> 00:08:37,250
I want that something to be displayed in the label instead of 'button got

23539
00:08:37,250 --> 00:08:40,880
clicked.' Pause the video and see if you can complete this challenge.

23540
00:08:43,280 --> 00:08:43,700
All right.

23541
00:08:43,700 --> 00:08:48,700
So we know that the trigger for the button is the button_clicked function.

23542
00:08:49,940 --> 00:08:54,770
So it's here where we're actually configuring our label. If instead,

23543
00:08:54,800 --> 00:08:58,560
we're going to get hold of our input here and call input.

23544
00:08:58,650 --> 00:09:01,830
get to get the new_text, well,

23545
00:09:01,830 --> 00:09:06,540
then we can actually use this new text and populate the label.

23546
00:09:06,990 --> 00:09:10,020
So we can say text = new_text.

23547
00:09:10,650 --> 00:09:12,300
And now when I hit run,

23548
00:09:12,480 --> 00:09:15,750
you can see that I can type whatever it is I want in here.

23549
00:09:15,870 --> 00:09:17,580
And then when I click 'click me',

23550
00:09:17,910 --> 00:09:21,780
it gets the text inside the entry and puts it in the label.

23551
00:09:23,250 --> 00:09:28,250
This is how we would work with some of the most basic components of tkinter like

23552
00:09:28,620 --> 00:09:30,750
label, button, entry,

23553
00:09:30,900 --> 00:09:34,620
and we've also seen the pack method. Now, as you can see,

23554
00:09:34,620 --> 00:09:37,890
they're all other things that you can do with tkinter.

23555
00:09:38,400 --> 00:09:39,630
So in the next lesson,

23556
00:09:39,660 --> 00:09:42,480
we're going to be working on top of what we've done so far

23557
00:09:42,780 --> 00:09:46,800
and I want to show you some of the other widgets that you can work with and add

23558
00:09:46,800 --> 00:09:48,120
to your tkinter program.


23559
00:00:00,480 --> 00:00:01,859
Now in the last lesson,

23560
00:00:01,920 --> 00:00:06,750
we saw a couple of different ways of working with tkinter widgets.

23561
00:00:07,290 --> 00:00:11,190
We've already seen how we can create labels,

23562
00:00:11,490 --> 00:00:16,490
so something like this, and also buttons that can be clicked and do some sort of

23563
00:00:20,340 --> 00:00:23,730
action. Then we've also seen entries,

23564
00:00:24,570 --> 00:00:26,940
which is basically some sort of textbox.

23565
00:00:27,420 --> 00:00:32,369
And now I want to show you some of the other widgets that you can work with.

23566
00:00:32,759 --> 00:00:35,220
For example, the text entry box

23567
00:00:35,250 --> 00:00:40,250
which allows you to use multiple lines of text, or something like the spin box

23568
00:00:41,340 --> 00:00:43,350
which is basically a sort of counter

23569
00:00:43,680 --> 00:00:47,430
which lets you go up and down, and then a scale

23570
00:00:47,430 --> 00:00:49,020
which is a slider

23571
00:00:49,020 --> 00:00:53,460
basically that you can move along its axis and change its value.

23572
00:00:54,090 --> 00:00:59,090
Then there's a check box which can be on or off basically just a tick box,

23573
00:00:59,520 --> 00:01:04,260
radio buttons, and finally a list box of choices

23574
00:01:04,260 --> 00:01:05,310
which you can pick from.

23575
00:01:06,840 --> 00:01:11,220
So these are pretty much all the widgets that you can work with. To save you from

23576
00:01:11,220 --> 00:01:13,050
typing a lot of this example

23577
00:01:13,050 --> 00:01:17,730
code, I've created a tkinter widget demo Repl.it for you

23578
00:01:18,030 --> 00:01:21,870
which you can go to and you can see some of the existing code that we've already

23579
00:01:21,870 --> 00:01:22,703
created

23580
00:01:22,770 --> 00:01:27,660
like how to create a window or how to create a label and how to create a button.

23581
00:01:28,140 --> 00:01:32,370
But I want to show you some of the other features by just looking at the code.

23582
00:01:32,850 --> 00:01:34,710
For example, with the entry

23583
00:01:34,740 --> 00:01:38,730
we can actually insert some text for the entries to start off with.

23584
00:01:39,060 --> 00:01:42,060
So notice how here we can click on it to edit it,

23585
00:01:42,360 --> 00:01:46,350
but it's really got some starting text in there. So for example,

23586
00:01:46,350 --> 00:01:48,690
if you wanted to create an email box,

23587
00:01:48,720 --> 00:01:52,740
maybe you would write the word email to give the user a bit of a hint.

23588
00:01:53,220 --> 00:01:56,280
Now you've also got a text box

23589
00:01:56,310 --> 00:02:00,420
which is a large area where the user can edit.

23590
00:02:01,650 --> 00:02:04,110
And this is simply created with the text widget.

23591
00:02:04,410 --> 00:02:09,410
You can set the number of lines as height and the width as the width of the box.

23592
00:02:11,250 --> 00:02:16,250
And you can set the text to be focused so that the cursor starts out in that

23593
00:02:16,740 --> 00:02:17,580
textbox.

23594
00:02:18,240 --> 00:02:23,240
And then we can insert some piece of text to begin with and we can also get hold

23595
00:02:24,570 --> 00:02:29,460
of the text inside the text box using the get method. Now notice

23596
00:02:29,460 --> 00:02:31,290
there's something a little bit weird

23597
00:02:31,320 --> 00:02:34,560
like the end here and the end here.

23598
00:02:34,890 --> 00:02:38,040
This is just an index to allow tkinter

23599
00:02:38,040 --> 00:02:42,660
to figure out which particular item you're referring to and you don't have to

23600
00:02:42,660 --> 00:02:45,420
change it ever. This is just the code that you use.

23601
00:02:45,840 --> 00:02:50,460
You can keep the code exactly as it is here and just modify the test that you

23602
00:02:50,460 --> 00:02:51,390
want to insert.

23603
00:02:52,020 --> 00:02:57,020
And this 1.0 basically refers to getting hold of the text

23604
00:02:57,090 --> 00:03:00,370
starting from the first line at the character zero.

23605
00:03:01,750 --> 00:03:06,750
And then we've got a new widget that we've never really seen before, a spin box,

23606
00:03:07,300 --> 00:03:10,480
which looks something like this.

23607
00:03:10,720 --> 00:03:15,720
So you can click on the up and down to change its value and we can print out the

23608
00:03:17,320 --> 00:03:22,320
value that's being changed in there by simply getting the spin box to be tied to

23609
00:03:24,340 --> 00:03:26,800
a function which is called spinbox_used.

23610
00:03:27,130 --> 00:03:29,170
And then we just get the value each time.

23611
00:03:30,940 --> 00:03:33,580
Now a scale is also pretty self explanatory.

23612
00:03:33,580 --> 00:03:37,750
You can move it up and down, and we're getting hold of the value that would

23613
00:03:37,750 --> 00:03:40,810
the user is landing on by simply packing, again,

23614
00:03:40,870 --> 00:03:44,890
another command into that scale when we're creating it.

23615
00:03:45,220 --> 00:03:47,110
And then when that function is called,

23616
00:03:47,110 --> 00:03:51,640
it actually passes over the value that the scale is currently on and that is

23617
00:03:51,640 --> 00:03:55,480
what's getting printed. Next

23618
00:03:55,510 --> 00:03:59,830
we've got a checkbox and we can click it on or off.

23619
00:03:59,920 --> 00:04:04,920
And we can print one or zero by simply tying that checkbox to a variable.

23620
00:04:07,240 --> 00:04:12,240
And this variable is something that's defined by the tkinter module as a IntVar.

23621
00:04:13,360 --> 00:04:15,070
So this is actually a class.

23622
00:04:15,550 --> 00:04:18,490
And once we create that object from the class,

23623
00:04:18,550 --> 00:04:22,029
then we can add it to our check button when we create it,

23624
00:04:22,480 --> 00:04:27,480
and that variable will keep track of the value of that checkbox. 1 for on and

23625
00:04:28,510 --> 00:04:31,930
0 for off. And then we can print it out

23626
00:04:31,990 --> 00:04:34,150
when that check button is used.

23627
00:04:36,490 --> 00:04:40,300
Now radio buttons are useful to pick between different options.

23628
00:04:40,540 --> 00:04:44,320
So normally you'd have a number of options and only one of them can be selected

23629
00:04:44,380 --> 00:04:48,460
at any one time. So in this case what we do is, again,

23630
00:04:48,460 --> 00:04:52,570
we create a IntVar and we tie that var to 

23631
00:04:52,600 --> 00:04:54,760
each of the radio buttons that we create,

23632
00:04:55,150 --> 00:04:58,990
and then we give each of the radio button a value. So this one has value 1,

23633
00:04:58,990 --> 00:05:03,910
this one has value 2, and they're both tied to that radio state IntVar.

23634
00:05:04,390 --> 00:05:07,570
And then when that button gets changed,

23635
00:05:07,840 --> 00:05:12,550
then we can actually get hold of the radio state by calling radio_state.

23636
00:05:12,580 --> 00:05:16,990
get and when you get whichever value it is that's currently selected,

23637
00:05:17,020 --> 00:05:20,740
so option1 or option2. Now finally,

23638
00:05:20,770 --> 00:05:22,720
we've got a list box

23639
00:05:22,750 --> 00:05:27,250
which is just a list of options created from a Python list.

23640
00:05:27,310 --> 00:05:29,020
We'd loop through each of the items,

23641
00:05:29,350 --> 00:05:34,350
insert it to our listbox and then once the list box is used,

23642
00:05:35,290 --> 00:05:40,290
we use this bind function to call this particular call back. This way

23643
00:05:41,620 --> 00:05:44,350
whenever we select any of the items in here,

23644
00:05:44,620 --> 00:05:49,510
it will print out and get the current selection. Now,

23645
00:05:49,570 --> 00:05:53,890
a lot of this code is pretty much going to be used the same each time.

23646
00:05:53,920 --> 00:05:58,220
So it doesn't really matter if you don't understand fully exactly what some of

23647
00:05:58,220 --> 00:05:59,930
these weird components are.

23648
00:06:00,230 --> 00:06:05,230
It's just a factor of how this tkinter library has taken this tk module and

23649
00:06:07,940 --> 00:06:12,590
turned it into a Python format for us to be able to interact with it using

23650
00:06:12,590 --> 00:06:13,100
Python.

23651
00:06:13,100 --> 00:06:17,750
So there's a few weird bits like this listbox select or this,

23652
00:06:17,840 --> 00:06:19,880
um, end being used here,

23653
00:06:20,390 --> 00:06:24,230
but you can see that each line is commented and it tells you what it does.

23654
00:06:24,560 --> 00:06:28,130
So you'll be able to figure out what line of code you need to write

23655
00:06:28,130 --> 00:06:33,130
in order to add some text or to get some texts or how to bind a function to the

23656
00:06:35,480 --> 00:06:40,480
list box and how to get hold of the value that's currently being selected.

23657
00:06:41,960 --> 00:06:46,960
I recommend heading over to this link here and either downloading the code and

23658
00:06:47,150 --> 00:06:49,490
opening it in PyCharm if you prefer,

23659
00:06:49,850 --> 00:06:54,560
because then you can actually get a much larger version of the running program

23660
00:06:54,860 --> 00:06:56,120
or alternatively,

23661
00:06:56,150 --> 00:07:00,080
just have a play around with the code in here so that you understand how these

23662
00:07:00,080 --> 00:07:04,010
widgets work and how you can use it basically as a pallet

23663
00:07:04,370 --> 00:07:06,860
if you wanted a couple of checkboxes,

23664
00:07:06,860 --> 00:07:09,800
or if you wanted a couple of a spin boxes,

23665
00:07:09,800 --> 00:07:13,670
then you can just pick and choose them from this cookbook essentially

23666
00:07:13,940 --> 00:07:17,990
and then you can put them into your programs when and as needed.


23667
00:00:00,570 --> 00:00:03,480
Now coming back to our main.py

23668
00:00:03,780 --> 00:00:07,170
our previous program had a label,

23669
00:00:07,200 --> 00:00:10,320
a button and an entry, and it was relatively simple.

23670
00:00:10,740 --> 00:00:13,560
So I'm going to head back to this main.py file

23671
00:00:13,830 --> 00:00:18,570
where we've got only three widgets so that I can show you how we can define the

23672
00:00:18,570 --> 00:00:22,350
layout and positioning of each of our widgets.

23673
00:00:23,460 --> 00:00:28,380
Firstly, I've reconfigured the file a little bit. So I've moved the button

23674
00:00:28,380 --> 00:00:30,060
_clicked function to the top,

23675
00:00:30,540 --> 00:00:35,540
and I've made sure that each of the pack methods are at the very end of each

23676
00:00:37,110 --> 00:00:41,760
widget. That way we'll be able to work with it quite easily. Now,

23677
00:00:41,760 --> 00:00:45,930
as I mentioned before, tkinter has a whole bunch of different layout

23678
00:00:45,930 --> 00:00:50,930
managers that define how to position each of the widgets in your GUI program.

23679
00:00:52,440 --> 00:00:56,340
Now there's three that you should know about, pack, place and grid.

23680
00:00:57,270 --> 00:00:58,080
Now, firstly,

23681
00:00:58,080 --> 00:01:03,080
we've already seen pack and all that pack does is it basically packs each of the

23682
00:01:04,319 --> 00:01:08,340
widgets next to each other in a vaguely logical format.

23683
00:01:08,970 --> 00:01:10,470
And by default, pack

23684
00:01:10,470 --> 00:01:15,470
will always start from the top and then pack every other widget just below the

23685
00:01:15,600 --> 00:01:18,360
previous one. As I mentioned,

23686
00:01:18,390 --> 00:01:23,390
you can change this by adding a side parameter and you can change it to for

23687
00:01:24,840 --> 00:01:27,360
example, side = left.

23688
00:01:27,900 --> 00:01:31,200
And if you change this for all of the packs,

23689
00:01:31,260 --> 00:01:36,090
then it's going to pack everything starting from the left edge of the program

23690
00:01:36,390 --> 00:01:40,890
like this. And you can change that to bottom or right as well.

23691
00:01:41,550 --> 00:01:46,550
But the problem with pack is that it's actually quite difficult to specify a

23692
00:01:46,800 --> 00:01:49,080
precise position. So for example,

23693
00:01:49,080 --> 00:01:53,370
if you wanted this label to be a little bit up and then this button a little bit

23694
00:01:53,370 --> 00:01:57,240
down and this entry all the way to the right. It's very,

23695
00:01:57,240 --> 00:01:59,910
very complicated to do that using pack.

23696
00:02:00,390 --> 00:02:03,360
And that's why there's not just a single layout manager,

23697
00:02:03,390 --> 00:02:06,870
but there's lots of others. So let's take a look at the next one,

23698
00:02:06,870 --> 00:02:11,760
which is called place. Place is all about precise positioning.

23699
00:02:12,300 --> 00:02:14,430
So when you place something,

23700
00:02:14,910 --> 00:02:18,870
you can provide a X and Y value. So for example,

23701
00:02:18,870 --> 00:02:22,890
I can say my label.place, and then I can say, well,

23702
00:02:22,890 --> 00:02:27,300
the X value should equal 0 and the Y value should equal 0.

23703
00:02:27,720 --> 00:02:31,500
And this just places that label at the top left corner.

23704
00:02:32,160 --> 00:02:36,270
Now it's important to remember that if a widget gets created

23705
00:02:36,570 --> 00:02:41,010
but it doesn't have any layout specified it using pack, place or grid,

23706
00:02:41,250 --> 00:02:43,920
then it won't be shown as you can see here,

23707
00:02:43,920 --> 00:02:48,920
we've only got the label showing up. Now that we've placed our label to the top

23708
00:02:49,200 --> 00:02:52,110
left corner, we can try placing it in somewhere else.

23709
00:02:52,380 --> 00:02:55,260
So let's move it a little bit along the X axis.

23710
00:02:55,290 --> 00:02:58,350
So let's say place it on a (100, 0)

23711
00:02:58,800 --> 00:03:02,320
That moves it to the right a bit more, and if we want to move it down

23712
00:03:02,320 --> 00:03:04,570
we can change the Y position.

23713
00:03:04,930 --> 00:03:09,310
So now it's down at the bottom and then the X is 100. Now,

23714
00:03:09,310 --> 00:03:13,750
remember we've defined the width and height. So the width is 500 pixels,

23715
00:03:13,750 --> 00:03:17,440
the height is 300 pixels and anywhere along that screen,

23716
00:03:17,710 --> 00:03:22,710
you can define a X and Y value for a particular widget to place it at that

23717
00:03:23,380 --> 00:03:24,760
precise position.

23718
00:03:25,630 --> 00:03:30,630
The downside of place on the other hand is the fact that it is so specific and

23719
00:03:31,540 --> 00:03:36,010
we have to work out in our head the coordinate and where to put each widget.

23720
00:03:36,400 --> 00:03:39,820
It simple enough if you've only got three widgets like we have here,

23721
00:03:40,120 --> 00:03:42,490
but if you have a hundred or fifty,

23722
00:03:42,490 --> 00:03:46,870
then that becomes quickly a bit of a nightmare to manage the precise coordinates

23723
00:03:46,930 --> 00:03:47,920
of each widget.

23724
00:03:48,910 --> 00:03:53,260
So in addition to pack and place, there's also a final layout manager

23725
00:03:53,350 --> 00:03:55,300
which also happens to be my favorite one,

23726
00:03:55,660 --> 00:04:00,160
which is the grid. And the grid is a really simple concept.

23727
00:04:00,490 --> 00:04:05,490
It imagines that your entire program is a grid and you can divide it into any

23728
00:04:06,640 --> 00:04:08,770
number of columns and rows that you want to.

23729
00:04:09,190 --> 00:04:13,660
So just as a reminder, the rows are the ones that go along the horizontal and

23730
00:04:13,660 --> 00:04:16,450
the columns are the ones that go along the vertical.

23731
00:04:17,529 --> 00:04:22,330
If I remove my place and instead I use my grid,

23732
00:04:22,630 --> 00:04:25,330
I could say my_label.grid,

23733
00:04:25,660 --> 00:04:29,680
and then I can provide a column and a row number.

23734
00:04:29,710 --> 00:04:34,120
So let's say I'm going to put it at the first column and the first row.

23735
00:04:34,150 --> 00:04:38,320
So then starts from zero so that we could say column = 0, row =

23736
00:04:38,320 --> 00:04:42,010
0. And you can see that it gets placed in the top left corner.

23737
00:04:42,760 --> 00:04:47,170
Now the grid system is relative to other components.

23738
00:04:47,410 --> 00:04:52,240
So even if I change this column to, I dunno, five and the row to five,

23739
00:04:52,600 --> 00:04:55,750
you can see that it doesn't actually change the layout because there is no

23740
00:04:55,750 --> 00:04:58,990
widget in column four, three, two or one.

23741
00:04:59,200 --> 00:05:01,900
So it's still the first one in the grid.

23742
00:05:03,340 --> 00:05:05,620
So the easiest way of working with the grid

23743
00:05:05,650 --> 00:05:08,830
is starting with the things that you want it to be at the top left,

23744
00:05:09,070 --> 00:05:12,010
defining a starting column and rows, zero, zero,

23745
00:05:12,370 --> 00:05:17,320
and then for the next and subsequent widgets to just keep going through it and

23746
00:05:17,350 --> 00:05:20,530
define its position on the grid. For example,

23747
00:05:20,530 --> 00:05:25,530
if I wanted the button to be on column one and row one

23748
00:05:27,970 --> 00:05:30,580
and then I want my entry

23749
00:05:30,610 --> 00:05:35,610
which is called input to be on the grid in column two and row two,

23750
00:05:39,580 --> 00:05:41,230
now if you run this,

23751
00:05:41,260 --> 00:05:45,100
you can see it's now been laid out along our grid.

23752
00:05:45,640 --> 00:05:48,040
And this is effectively what it looks like.

23753
00:05:48,400 --> 00:05:51,160
Our label is in column zero row

23754
00:05:51,160 --> 00:05:53,590
zero, button in column one row

23755
00:05:53,590 --> 00:05:56,860
one and entry in column two row two.

23756
00:05:58,130 --> 00:06:03,130
This is one of the easiest ways of visualizing and creating the layout for your

23757
00:06:03,920 --> 00:06:07,400
tkinter programs. And it's really flexible

23758
00:06:07,490 --> 00:06:10,850
and it's really easy to imagine and understand.

23759
00:06:11,120 --> 00:06:16,100
So this is always my preferred way of working with the layout for 

23760
00:06:16,130 --> 00:06:18,620
tkinter. Just a word of warning though.

23761
00:06:18,650 --> 00:06:23,650
You can't mix up grid and pack in the same program.

23762
00:06:23,990 --> 00:06:28,760
So for example, if I wanted my label and my button to be defined by the grid

23763
00:06:29,060 --> 00:06:34,060
but then I decide to use the pack method for my final entry,

23764
00:06:35,600 --> 00:06:40,580
then you can see I actually get a error when I run my code. It says,

23765
00:06:40,610 --> 00:06:43,070
cannot use geometry manager pack

23766
00:06:43,250 --> 00:06:45,980
which already has slaves managed by grid.

23767
00:06:46,370 --> 00:06:49,010
So these two are incompatible with each other. 

23768
00:06:49,010 --> 00:06:51,890
You basically have to choose one or the other.

23769
00:06:52,490 --> 00:06:57,050
And often I will choose grid because it's just more flexible and more easy to

23770
00:06:57,050 --> 00:07:00,980
understand. So now here comes a challenge for you.

23771
00:07:01,520 --> 00:07:06,380
I want you to change the code that we've already written so that we end up with

23772
00:07:06,380 --> 00:07:10,310
this layout. So we've already got a label, a button and an entry.

23773
00:07:10,670 --> 00:07:15,650
I want you to add a new button and it should be positioned like this.

23774
00:07:15,950 --> 00:07:19,940
Have a think about how you might solve this challenge using the grid system that

23775
00:07:19,940 --> 00:07:23,750
you learned about just now. Pause the video and complete the challenge.

23776
00:07:25,400 --> 00:07:29,510
All right. So the first thing you notice is that the label is still at column

23777
00:07:29,510 --> 00:07:33,590
zero row zero, button is still at row one column one,

23778
00:07:33,980 --> 00:07:38,690
but this new button is now at row zero column two.

23779
00:07:39,350 --> 00:07:41,060
So let's go ahead and create it.

23780
00:07:41,960 --> 00:07:46,370
Now I'm just going to create a new button and I'm not going to worry about its

23781
00:07:46,370 --> 00:07:47,720
command or any of that.

23782
00:07:48,050 --> 00:07:51,830
I'll give it a piece of text just so that we can identify it and I'll call it

23783
00:07:51,830 --> 00:07:52,700
new button.

23784
00:07:53,240 --> 00:07:57,530
But then the most important thing is how we lay out this new button.

23785
00:07:58,010 --> 00:08:02,990
So I'm going to use the grid system and I'm going to give it a column of two

23786
00:08:03,260 --> 00:08:05,990
because it is zero, one, two,

23787
00:08:06,170 --> 00:08:10,550
the third column from the left and then row is going to be zero.

23788
00:08:13,580 --> 00:08:17,090
Now, when I run this code though, you'll notice something a little bit odd.

23789
00:08:17,510 --> 00:08:21,980
Why is the entry below the button? Because in our example,

23790
00:08:22,040 --> 00:08:26,750
the entry is actually over on the right of this new button in a new column.

23791
00:08:27,500 --> 00:08:31,520
By putting this new button in between the old button and the entry, we've

23792
00:08:31,520 --> 00:08:34,940
actually changed the positioning of that entry on the grid.

23793
00:08:35,240 --> 00:08:39,350
So we've actually had to move it along into the next column.

23794
00:08:39,950 --> 00:08:41,000
So to do that,

23795
00:08:41,030 --> 00:08:46,030
we have to change the grid of our entry instead of having column two,

23796
00:08:46,520 --> 00:08:51,380
to make it column three, just so that its on the right of this new button.

23797
00:08:52,130 --> 00:08:55,890
And now when I run it, this has the exact layout that we wanted

23798
00:08:56,280 --> 00:09:01,080
and we've now learned a little bit about how we can precisely position our

23799
00:09:01,080 --> 00:09:06,080
widgets in our program using the pack, place, and grid layout managers.

23800
00:09:08,610 --> 00:09:13,610
The very last thing I want to show you with relation to layout and design of our

23801
00:09:14,730 --> 00:09:19,320
GUI programs is how to add a little bit of padding around components.

23802
00:09:19,920 --> 00:09:24,920
The easiest way to add padding is actually to directly modify the widgets.

23803
00:09:25,410 --> 00:09:26,310
So for example,

23804
00:09:26,310 --> 00:09:30,450
if I wanted a bit of padding around all of the elements in my window,

23805
00:09:30,450 --> 00:09:33,570
so basically added around the edge of the window,

23806
00:09:33,960 --> 00:09:38,960
then I could simply say window.config and I can change the padding in the X

23807
00:09:42,060 --> 00:09:45,900
axis and the padding in the Y axis,

23808
00:09:45,930 --> 00:09:48,360
so padx and pady.

23809
00:09:48,870 --> 00:09:51,990
So now if I run this program as it is,

23810
00:09:52,290 --> 00:09:57,290
you can see that there's now more space being added around all four edges of our

23811
00:09:58,320 --> 00:10:02,190
program. Now I can make this a lot more extreme.

23812
00:10:02,190 --> 00:10:07,190
So let's say I add the padx to be 100 and the pady to be 200,

23813
00:10:08,610 --> 00:10:11,340
you can see just how much padding we've now added.

23814
00:10:12,450 --> 00:10:16,170
And this just means that you add more space around your program and it makes

23815
00:10:16,170 --> 00:10:19,380
things easier to see and looks a little bit nicer.

23816
00:10:20,670 --> 00:10:25,080
If you want to add padding around a specific widget not just the entire window,

23817
00:10:25,350 --> 00:10:30,350
then you can do the same with that widget. So we could get hold of my label and

23818
00:10:30,480 --> 00:10:30,750
again

23819
00:10:30,750 --> 00:10:35,750
using config to change the padx and the pady. So let's add, maybe I dunno,

23820
00:10:36,720 --> 00:10:41,310
50 pixels of padding in the X and in the Y.

23821
00:10:43,320 --> 00:10:45,570
Now you can see that around that label

23822
00:10:45,600 --> 00:10:50,490
there's a whole lot of space so that it pushes everything else away and actually

23823
00:10:50,490 --> 00:10:53,010
makes the entire program window a lot bigger.

23824
00:10:53,640 --> 00:10:58,640
So this is just a way for you to be able to add space around your widgets so

23825
00:10:59,160 --> 00:11:00,840
that they're not all crushed together

23826
00:11:01,080 --> 00:11:03,480
and it helps you with your layout and your design.


23827
00:00:00,090 --> 00:00:00,780
All right guys,

23828
00:00:00,780 --> 00:00:04,980
it's finally time to put everything you've learned so far today into practice

23829
00:00:05,280 --> 00:00:08,370
and build our miles to kilometer converter.

23830
00:00:09,390 --> 00:00:12,120
This is what the end outcome will look like.

23831
00:00:12,150 --> 00:00:16,170
This is our GUI  program where we've got a text entry,

23832
00:00:16,200 --> 00:00:19,530
we've got some labels and we've got a button.

23833
00:00:19,950 --> 00:00:23,430
So I should be able to type in some certain number of miles

23834
00:00:23,760 --> 00:00:25,350
and then when I hit calculate,

23835
00:00:25,440 --> 00:00:30,030
it should give me the equivalent number of kilometers. Now,

23836
00:00:30,210 --> 00:00:32,549
here, I've rounded it to the nearest whole number,

23837
00:00:32,549 --> 00:00:36,660
but feel free to decide however many decimal places you want.

23838
00:00:37,020 --> 00:00:40,170
But the important thing is for it to work, firstly,

23839
00:00:40,500 --> 00:00:45,500
but also for you to be able to use and put in all of these components and to

23840
00:00:45,990 --> 00:00:49,770
follow this layout. Just to break the layout down,

23841
00:00:49,800 --> 00:00:52,950
you can see I've got a entry widget

23842
00:00:53,040 --> 00:00:56,190
and then these are all label widgets. And finally,

23843
00:00:56,190 --> 00:01:01,110
I've got a button widget and they're divided along a grid that looks more or

23844
00:01:01,110 --> 00:01:02,160
less like this.

23845
00:01:02,850 --> 00:01:07,470
Have a think about how you might create the layout and the design first

23846
00:01:07,860 --> 00:01:12,240
and then go ahead and add the implementation and see if you can complete this

23847
00:01:12,240 --> 00:01:15,090
project. So pause the video now and give it a go.

23848
00:01:18,810 --> 00:01:20,760
Feel free to either create it inside

23849
00:01:20,760 --> 00:01:25,230
your main.py by commenting everything else out or as in my case,

23850
00:01:25,260 --> 00:01:27,150
I'm actually just going to create a new file,

23851
00:01:27,540 --> 00:01:32,540
which I'll call the mile_to_kilo_converter.py. Inside this new file is where

23852
00:01:36,690 --> 00:01:39,690
I'm going to create my project. And first of all,

23853
00:01:39,990 --> 00:01:44,910
I'm going to go ahead and import everything from the tkinter module.

23854
00:01:46,410 --> 00:01:50,490
So import *, and now I've got all of my classes.

23855
00:01:51,240 --> 00:01:55,200
The next thing I'm going to do is to, of course, create our window.

23856
00:01:55,590 --> 00:02:00,590
So that's going to be created from the tk class and my window is going to have a

23857
00:02:02,280 --> 00:02:03,113
title,

23858
00:02:03,120 --> 00:02:08,120
which I will call it miles to kilometer converter.

23859
00:02:10,350 --> 00:02:11,400
And finally,

23860
00:02:11,430 --> 00:02:16,430
we're going to get our window to be displayed and started off in the main loop.

23861
00:02:17,550 --> 00:02:21,690
Right now if I run this file miles to kilo converter,

23862
00:02:21,990 --> 00:02:26,990
you can see I've just got a blank window with the title miles to kilometer

23863
00:02:27,300 --> 00:02:29,670
converter. Afterwards,

23864
00:02:29,670 --> 00:02:34,530
the next thing to do is to create all of our widgets and lay it out on screen.

23865
00:02:35,010 --> 00:02:36,300
If we look at this break down,

23866
00:02:36,300 --> 00:02:41,300
you can see we've got one entry widget here and then four different label

23867
00:02:41,520 --> 00:02:44,880
widgets at each of these positions and then finally

23868
00:02:44,880 --> 00:02:47,220
I've got a calculate button down here.

23869
00:02:48,090 --> 00:02:51,840
So I'm going to create each of these widgets and then I'm going to lay them out

23870
00:02:51,840 --> 00:02:54,420
on screen. Firstly,

23871
00:02:54,420 --> 00:02:57,000
I've got a miles_inputs widget

23872
00:02:57,060 --> 00:03:00,550
which is going to be created from the entry class.

23873
00:03:01,930 --> 00:03:06,930
And then I've got a label which is the miles label,

23874
00:03:08,530 --> 00:03:11,260
and that's going to be created from a label class.

23875
00:03:11,890 --> 00:03:15,370
And the label is going to contain some text.

23876
00:03:15,720 --> 00:03:20,720
The text is just going to say Miles with a capital M, like this.

23877
00:03:22,000 --> 00:03:25,930
Now the next one we're going to create is our is equal to label.

23878
00:03:25,960 --> 00:03:29,410
So I'll just call it is_equal_label.

23879
00:03:30,940 --> 00:03:34,270
And this one is going to have, again, just some texts.

23880
00:03:34,270 --> 00:03:36,520
It's not really going to have much functionality.

23881
00:03:39,010 --> 00:03:41,290
And then we've got our label

23882
00:03:41,290 --> 00:03:44,200
which is actually going to be the kilometer value.

23883
00:03:44,530 --> 00:03:49,530
So I'm going to create that as the kilometer_result_label.

23884
00:03:50,880 --> 00:03:51,713
All right.

23885
00:03:54,330 --> 00:03:59,160
And that's going to start off just with a big fat zero. And then finally,

23886
00:03:59,160 --> 00:04:01,320
I've got the kilometer label.

23887
00:04:01,380 --> 00:04:02,213
okay,

23888
00:04:05,580 --> 00:04:09,510
ad , this is just going to say, uh, KM,

23889
00:04:09,960 --> 00:04:10,793
right?

23890
00:04:12,120 --> 00:04:16,200
And the final thing that I need to create is that calculate button

23891
00:04:16,260 --> 00:04:19,350
and then we will be done with our widgets

23892
00:04:19,380 --> 00:04:20,213
right?

23893
00:04:23,880 --> 00:04:27,390
And this is just going to have the text of calculate.

23894
00:04:28,290 --> 00:04:30,570
So now I've got all my widgets created.

23895
00:04:30,750 --> 00:04:34,740
If I go and try to run this code, as it is, you'll see

23896
00:04:34,740 --> 00:04:39,060
none of them get displayed because none of them have been laid out on the screen.

23897
00:04:39,840 --> 00:04:40,500
At this point

23898
00:04:40,500 --> 00:04:45,500
it's also good to mention that if you accidentally left out one of these keyword

23899
00:04:45,540 --> 00:04:46,560
argument names,

23900
00:04:46,590 --> 00:04:51,590
then you will actually get a error and the error will read something like this.

23901
00:04:51,870 --> 00:04:56,520
String object has no attribute tk, which seems a little bit confusing.

23902
00:04:56,820 --> 00:05:00,780
But basically if you see that, then just have a look,

23903
00:05:00,780 --> 00:05:05,780
make sure that you've actually got that text = in there rather than just the

23904
00:05:05,850 --> 00:05:09,690
actual string. That's a really common mistake that students make.

23905
00:05:10,710 --> 00:05:13,860
So the next thing I want to do is to use my grid layout method

23906
00:05:13,890 --> 00:05:18,090
to lay out all of these components in the correct positions.

23907
00:05:18,360 --> 00:05:22,020
So I'm basically going to have a grid with three columns and three rows.

23908
00:05:22,080 --> 00:05:24,630
So this will be column zero, one, two,

23909
00:05:24,960 --> 00:05:27,360
and then this will be row zero, one two.

23910
00:05:28,470 --> 00:05:30,540
So that should be relatively simple.

23911
00:05:30,570 --> 00:05:34,350
And let's start with our miles_input.grid,

23912
00:05:35,100 --> 00:05:40,100
and we're going to write a column number and a row number.

23913
00:05:41,760 --> 00:05:45,090
Now I'm just going to copy this because I'm going to need to use it quite a few

23914
00:05:45,090 --> 00:05:45,923
times.

23915
00:05:46,080 --> 00:05:50,820
And then I'm going to refer to the end result and you can see our entry is here.

23916
00:05:50,820 --> 00:05:54,090
So it's going to be on column one, row zero,

23917
00:05:55,590 --> 00:05:56,423
right?

23918
00:05:58,250 --> 00:06:01,910
And then let's define the miles label on the grid.

23919
00:06:03,320 --> 00:06:07,880
And this one I think is going to be column two, row zero.

23920
00:06:10,580 --> 00:06:14,900
And then I'm just going to go through all of these widgets and define them on

23921
00:06:14,900 --> 00:06:15,733
the grid,

23922
00:06:20,770 --> 00:06:21,603
right?

23923
00:06:21,850 --> 00:06:22,990
So they're you have it.

23924
00:06:23,170 --> 00:06:27,940
We've got all of the columns and rows that correspond to the positions of each

23925
00:06:27,940 --> 00:06:32,680
of these widgets in our final layout. Now, if I run my code

23926
00:06:32,680 --> 00:06:36,010
as it is, you should see this version show up.

23927
00:06:37,210 --> 00:06:39,910
Now we've got to do some refinements.

23928
00:06:40,210 --> 00:06:45,210
And the first thing you notice is that this entry is way too large.

23929
00:06:45,820 --> 00:06:48,490
So let's go ahead and change it's width,

23930
00:06:48,910 --> 00:06:53,530
and I'm going to change it to just five or seven,

23931
00:06:54,010 --> 00:06:58,420
basically not a very wide. That way it will be a lot smaller like this.

23932
00:07:00,280 --> 00:07:03,790
And then we're going to use the method that we learned previously to give our

23933
00:07:03,790 --> 00:07:07,570
window a little bit of padding by changing its config

23934
00:07:07,750 --> 00:07:10,900
to add a padx and a pady,

23935
00:07:10,960 --> 00:07:14,560
and you can pad it however much you like. But in my case,

23936
00:07:14,590 --> 00:07:19,180
I think 20 pixels should make it a little bit larger and a little bit easier

23937
00:07:19,180 --> 00:07:22,720
to see. So now that we're pretty much done with the layout,

23938
00:07:23,080 --> 00:07:25,630
let's go ahead and actually add the functionality.

23939
00:07:27,070 --> 00:07:29,080
We're going to need some sort of function

23940
00:07:29,140 --> 00:07:33,940
which converts miles to kilometers.

23941
00:07:34,660 --> 00:07:39,040
The miles is going to be inputted in the miles input.

23942
00:07:39,520 --> 00:07:42,880
We can get the miles by calling miles

23943
00:07:42,910 --> 00:07:45,160
_input.get,

23944
00:07:46,120 --> 00:07:51,070
and then we can convert that into km by using some sort of formula.

23945
00:07:51,820 --> 00:07:54,010
If we search in Google for miles to km,

23946
00:07:54,040 --> 00:07:59,040
you can see that the formula is pretty much multiplying the mile value by 1.609.

23947
00:08:02,050 --> 00:08:03,250
That's simple enough,

23948
00:08:03,280 --> 00:08:07,930
we'll say miles multiply by 1.609,

23949
00:08:08,620 --> 00:08:13,390
and we get the value in kilometers. Then we have the set

23950
00:08:13,480 --> 00:08:17,920
our kilometer_result_label to show this updated result.

23951
00:08:18,580 --> 00:08:21,190
So we're going to get hold of the kilometer_result_label

23952
00:08:21,580 --> 00:08:26,580
and I'm going to call config on it to change its text property

23953
00:08:27,070 --> 00:08:28,720
to this new value

23954
00:08:28,870 --> 00:08:32,140
which is going to be our value in kilometers.

23955
00:08:32,770 --> 00:08:35,350
Now we have to be careful with the data types here,

23956
00:08:35,830 --> 00:08:39,340
because when we get hold of the input from that miles input,

23957
00:08:39,370 --> 00:08:43,750
this is still going to be a string. But we want to multiply it by a number

23958
00:08:44,020 --> 00:08:49,020
so we have to change it to an actual number. Because people could type decimal

23959
00:08:49,180 --> 00:08:53,560
place numbers, I'm going to change it to a floating-point number like this.

23960
00:08:54,160 --> 00:08:57,960
Now I've got a floating-point number multiplied by a floating-point number

23961
00:08:58,290 --> 00:09:01,410
so that's perfectly valid. Now next,

23962
00:09:01,440 --> 00:09:06,360
when I actually want to put that number into a label I need it as a string.

23963
00:09:06,900 --> 00:09:09,570
Instead of simply just adding this kilometer in,

23964
00:09:09,600 --> 00:09:14,600
I'm actually going to use an f-string so that I wrap this kilometer variable

23965
00:09:15,690 --> 00:09:17,700
inside my f-string

23966
00:09:17,760 --> 00:09:21,960
and then I convert it into a string to put into this label.

23967
00:09:23,280 --> 00:09:23,700
Now,

23968
00:09:23,700 --> 00:09:28,700
all we have to do is to trigger this function miles_to_km when the user

23969
00:09:29,700 --> 00:09:31,440
presses the calculate button.

23970
00:09:32,010 --> 00:09:36,780
And if you remember, the way we do that is by tying it as a command.

23971
00:09:37,200 --> 00:09:39,810
So command = miles_to_km 

23972
00:09:40,050 --> 00:09:42,930
but without the final parentheses

23973
00:09:43,290 --> 00:09:46,860
because we only want it to be called when it actually gets clicked.

23974
00:09:47,610 --> 00:09:50,070
Let's check our code and see if it actually works.

23975
00:09:50,130 --> 00:09:54,510
Let's check what 20 miles is in kilometers. So if I click calculate,

23976
00:09:54,570 --> 00:09:58,110
you can see it gets calculated and that label there,

23977
00:09:58,230 --> 00:10:02,400
that kilometer result label, gets changed. If you wanna leave it as this,

23978
00:10:02,400 --> 00:10:04,560
that's perfectly fine. If you want to,

23979
00:10:04,560 --> 00:10:08,400
you can also round this up so that it becomes a whole number

23980
00:10:09,600 --> 00:10:12,660
and you end up with something that looks a little bit more sleek

23981
00:10:12,690 --> 00:10:14,610
but maybe a little bit more imprecise.

23982
00:10:15,270 --> 00:10:19,470
That's how you complete this project. Now, of course,

23983
00:10:19,470 --> 00:10:21,570
the world really is your oyster.

23984
00:10:21,870 --> 00:10:24,960
You've learned about way more widgets than we've used here.

23985
00:10:24,990 --> 00:10:27,870
So you could incorporate anything else that you've seen,

23986
00:10:28,170 --> 00:10:30,870
like maybe add a radio button or checkbox,

23987
00:10:30,930 --> 00:10:35,220
and you can modify this to maybe not just do miles to kilos,

23988
00:10:35,520 --> 00:10:40,500
and you can try playing around with the code and creating your own version of

23989
00:10:40,500 --> 00:10:42,840
the program. If you create something fun,

23990
00:10:42,870 --> 00:10:47,400
be sure to share it with us in the Q/A below the lesson so that we can all

23991
00:10:47,400 --> 00:10:50,730
admire and congratulate you on your hard work.

23992
00:10:51,180 --> 00:10:56,180
So I hope you've had fun building your first GUI programs using tkinter. In

23993
00:10:57,120 --> 00:11:01,010
tomorrow's lesson, we're going to be diving deeper into tkinter and

23994
00:11:01,010 --> 00:11:03,930
we're going to be looking at how to create some more complex,

23995
00:11:04,140 --> 00:11:08,340
but more interesting programs as well. So for all of that and more,

23996
00:11:08,490 --> 00:11:09,090
I'll see you there.



23997
00:00:00,180 --> 00:00:04,950
Hey guys, welcome to day 28 of 100 Days of Code. Today

23998
00:00:04,950 --> 00:00:09,000
we're going to be building a Pomodora app completely from scratch

23999
00:00:09,240 --> 00:00:13,530
using tkinter and the knowledge that we gained from yesterday's lessons.

24000
00:00:14,190 --> 00:00:17,220
Now you've already heard me talk about the Pomodoro technique,

24001
00:00:17,280 --> 00:00:19,860
this famous book by Francesco Cirillo,

24002
00:00:20,570 --> 00:00:25,570
Cirillo. This

24003
00:00:29,060 --> 00:00:34,060
famous technique that helps people time-manage and to get more stuff done.

24004
00:00:35,480 --> 00:00:37,250
Now, if you didn't hear me talk about it,

24005
00:00:37,280 --> 00:00:40,700
this is basically a very simple breakdown. Essentially,

24006
00:00:40,700 --> 00:00:43,390
you figure out the task that you need to do something hard,

24007
00:00:43,400 --> 00:00:48,320
something that takes a while like writing your next book or coding up a project.

24008
00:00:48,890 --> 00:00:52,970
And then you want to set your timer to the 25 minutes and then work on the task

24009
00:00:53,000 --> 00:00:57,950
for 25 minutes. And then after that, you take a short five-minute break.

24010
00:00:58,280 --> 00:01:03,080
And after you've done four of these Pomodoros, basically four repetition,

24011
00:01:03,140 --> 00:01:06,500
then you get to take a 15 to 30 minute break.

24012
00:01:07,310 --> 00:01:12,110
So this basically really effectively utilizes the way that our brain works to

24013
00:01:12,320 --> 00:01:17,320
take short breaks often and to work for 25 minutes at a time,

24014
00:01:17,990 --> 00:01:22,970
which helps us with information retention and also keeping up the motivation.

24015
00:01:23,660 --> 00:01:28,660
This is the program that we're going to be building using tkinter. It's going to

24016
00:01:28,760 --> 00:01:32,930
be a timer with a tomato on it. And when you click start,

24017
00:01:33,020 --> 00:01:36,170
it's going to tell you to work for 25 minutes.

24018
00:01:36,830 --> 00:01:39,080
Then that window can go into the background

24019
00:01:39,410 --> 00:01:43,520
and while you're writing your code or doing whatever, when the timer's up,

24020
00:01:43,580 --> 00:01:48,230
it will pop to the very front of the screen above all of the other windows and

24021
00:01:48,230 --> 00:01:49,850
tell you to take a break.

24022
00:01:50,240 --> 00:01:53,780
So the first break is for five minutes and you'll notice here,

24023
00:01:53,810 --> 00:01:58,810
we've already achieved one check mark for our first Pomodoro completed.

24024
00:01:59,840 --> 00:02:01,820
And once you're done with the break,

24025
00:02:01,850 --> 00:02:06,850
then it's going to go back to work and it's going to continue until you reach

24026
00:02:07,340 --> 00:02:12,290
the longer break or until you click reset to stop and reset the timer.

24027
00:02:13,100 --> 00:02:13,850
Effectively,

24028
00:02:13,850 --> 00:02:17,780
it's going to help you do these Pomodoros where you have 25-minute work,

24029
00:02:17,780 --> 00:02:21,710
5-minute break. You do four of these 25-minute work sessions,

24030
00:02:21,770 --> 00:02:26,600
and then you get a 20-minute break. So hopefully by creating this program,

24031
00:02:26,630 --> 00:02:30,830
you're going to increase your productivity and you're going to have your own handy tool

24032
00:02:31,070 --> 00:02:33,380
to help you achieve more and do more.

24033
00:02:33,950 --> 00:02:37,610
So this is what we're going to be building. Once you're ready, head over to the

24034
00:02:37,610 --> 00:02:39,920
next lesson and let's get started.


24035
00:00:00,330 --> 00:00:03,620
The first thing I want you to do to get started is to head over 

24036
00:00:03,630 --> 00:00:08,340
to the course resources and download the starting files for the Pomodoro

24037
00:00:08,340 --> 00:00:10,410
project. Once you've got that,

24038
00:00:10,470 --> 00:00:15,470
then you should be able to unzip this file and get hold of the starting folder.

24039
00:00:17,070 --> 00:00:20,640
Next, I want you to open up that folder using PyCharm.

24040
00:00:21,240 --> 00:00:24,210
So in my case, my folder's inside my downloads,

24041
00:00:24,480 --> 00:00:29,480
and then I'll just click open. And PyCharm should automatically configure the

24042
00:00:29,880 --> 00:00:31,950
latest version of Python you've got installed.

24043
00:00:32,580 --> 00:00:35,700
So if you take a look inside this folder, there's two files.

24044
00:00:36,060 --> 00:00:40,680
There is a image of a tomato which we're going to use in our project,

24045
00:00:41,070 --> 00:00:45,750
and there's also a main.py with a couple of sections already hashed out for

24046
00:00:45,750 --> 00:00:49,320
you. And we've also included some constants,

24047
00:00:49,380 --> 00:00:54,380
like some color hex codes or a font name or the number of minutes for working

24048
00:00:55,170 --> 00:00:59,460
short breaks in a long breaks. So that's already in the starting file.

24049
00:01:00,330 --> 00:01:03,840
The first thing we're going to do is to set up our UI.

24050
00:01:03,870 --> 00:01:05,940
So under the section UI set up,

24051
00:01:06,210 --> 00:01:09,720
we're going to create a new window using tkinter

24052
00:01:10,110 --> 00:01:13,590
and we're going to get the window to run and give it a background color,

24053
00:01:13,830 --> 00:01:14,663
pretty simple.

24054
00:01:14,910 --> 00:01:19,290
So let's go to the top of our file and import our tkinter module.

24055
00:01:19,740 --> 00:01:23,070
And then if we scroll down to our UI setup section,

24056
00:01:23,310 --> 00:01:27,330
let's go ahead and create a new window from the tk class.

24057
00:01:27,810 --> 00:01:32,250
Remember that our tk class is one of the classes from tkinter

24058
00:01:32,610 --> 00:01:37,610
so you can either tap into the tkinter module and then get hold of the tk class

24059
00:01:37,800 --> 00:01:40,560
like I have done here, or as in our case,

24060
00:01:40,590 --> 00:01:43,920
if we're going to be using a lot of classes from tkinter

24061
00:01:44,340 --> 00:01:49,340
then we can simply say from tkinter let's go ahead and import all of the

24062
00:01:49,740 --> 00:01:54,450
classes. So that way we can straight away refer to this tk class.

24063
00:01:55,170 --> 00:01:56,670
Now that we've created our window,

24064
00:01:56,700 --> 00:02:01,050
the next thing we can do is to set the title of the window,

24065
00:02:01,410 --> 00:02:05,040
which you can of course call it anything you want. But in my case,

24066
00:02:05,040 --> 00:02:09,180
I'm going to set it to just Pomodoro,

24067
00:02:09,720 --> 00:02:13,080
which just means tomato in Italian.

24068
00:02:13,650 --> 00:02:15,990
So now that we've got our Pomodoro,

24069
00:02:16,230 --> 00:02:21,230
then we're going to get our window to show up by using window.main loop as

24070
00:02:22,290 --> 00:02:23,123
usual.

24071
00:02:23,310 --> 00:02:28,310
And now if we run this, code our main, and you can see we've got a blank window,

24072
00:02:28,980 --> 00:02:32,400
a title, and we're ready to go to the next step.

24073
00:02:33,180 --> 00:02:38,180
The next step is to put an image into our program so that we can have this 

24074
00:02:39,630 --> 00:02:42,660
tomato as the background of our program,

24075
00:02:43,020 --> 00:02:44,910
and then we can put some text on top

24076
00:02:44,940 --> 00:02:49,710
which is going to signify our countdown timer. This is what we're aiming for,

24077
00:02:49,920 --> 00:02:53,700
but to achieve this and to be able to put images onto the screen

24078
00:02:54,000 --> 00:02:55,380
which look like this,

24079
00:02:55,530 --> 00:03:00,040
we're going to have to learn about the tkinter canvas widget. A canvas

24080
00:03:00,040 --> 00:03:03,550
widget is a little bit like a real life canvas, really.

24081
00:03:03,820 --> 00:03:07,210
It allows you to layer things one on top of the others.

24082
00:03:07,240 --> 00:03:10,630
So you could draw something and then you can draw something on top of that.

24083
00:03:11,140 --> 00:03:16,140
And what it allows us to do in our case is to place an image onto our program

24084
00:03:17,080 --> 00:03:19,870
and then to place some text straight on top of that.

24085
00:03:21,400 --> 00:03:23,530
In between our window creation

24086
00:03:23,590 --> 00:03:27,370
and the window main loop is where we're going to create our canvas.

24087
00:03:27,790 --> 00:03:32,710
And our canvas is created using the canvas widget

24088
00:03:32,740 --> 00:03:33,573
of course.

24089
00:03:34,000 --> 00:03:39,000
One of the things that we can specify when we create our canvas is a width and

24090
00:03:39,100 --> 00:03:43,420
a height, and that will be a value in terms of pixels.

24091
00:03:44,020 --> 00:03:49,020
So we know that we want to display this tomato image inside that canvas.

24092
00:03:50,020 --> 00:03:52,540
And we can see that this has a,

24093
00:03:52,570 --> 00:03:56,470
roughly a width of 200 and a height of 223.

24094
00:03:57,010 --> 00:04:01,330
So let's create a canvas that's roughly about the same size as the image.

24095
00:04:01,810 --> 00:04:06,810
So we'll put a width of 200 and a height of 224 so that we work with some even

24096
00:04:08,980 --> 00:04:12,250
numbers. Once I've created my canvas

24097
00:04:12,310 --> 00:04:15,370
the next thing I want to do is to add my image to it.

24098
00:04:16,000 --> 00:04:20,709
And we can use a method that the canvas has it which is called create_image.

24099
00:04:21,130 --> 00:04:22,720
And as soon as I type create,

24100
00:04:22,750 --> 00:04:26,440
you can see there's actually a whole bunch of other methods like create the text

24101
00:04:26,440 --> 00:04:29,530
in the canvas, create a rectangle, create an oval.

24102
00:04:29,770 --> 00:04:34,180
And all of these things could be overlapped on each other inside the same

24103
00:04:34,240 --> 00:04:37,000
canvas. Now, when we create an image,

24104
00:04:37,030 --> 00:04:42,030
there's a couple of things which are required. The first thing is the X and Y

24105
00:04:42,880 --> 00:04:45,850
positions of this image in the canvas.

24106
00:04:46,420 --> 00:04:50,950
Given that we have a width of 200 and a height of 224,

24107
00:04:51,250 --> 00:04:56,250
I want my image to be bang in the center of the canvas. So I can provide the X

24108
00:04:56,800 --> 00:05:01,660
value as half of the width and the Y value as half of the height.

24109
00:05:02,560 --> 00:05:05,230
In addition to the X and Y values,

24110
00:05:05,290 --> 00:05:08,080
we also have to specify a image.

24111
00:05:08,530 --> 00:05:12,250
But I can't just simply just type the name of my image

24112
00:05:12,520 --> 00:05:15,340
which is tomato.png,

24113
00:05:15,760 --> 00:05:20,760
because that is not the type of data that this argument is expecting.

24114
00:05:21,670 --> 00:05:25,660
What it wants instead is something called a photo image

24115
00:05:26,050 --> 00:05:28,450
and this class comes from tkinter 

24116
00:05:28,750 --> 00:05:33,750
and it's basically a way to read through a file and to get hold of a particular

24117
00:05:37,210 --> 00:05:41,380
image at a particular file location. In my case,

24118
00:05:41,380 --> 00:05:44,980
the file location is in fact tomato.png.

24119
00:05:45,610 --> 00:05:50,610
And if your image was stored in say another sub folder or a different place,

24120
00:05:52,750 --> 00:05:57,750
then you should provide the relative or absolute file path to get there from

24121
00:05:57,800 --> 00:06:01,100
where your code is, which is the main.py. But in our case

24122
00:06:01,100 --> 00:06:03,170
it's very easy, they're both in the same folder,

24123
00:06:03,650 --> 00:06:06,560
so we can simply specify our filename like

24124
00:06:06,560 --> 00:06:11,560
so. The next thing we're going to do is we're going to save this photo image in a

24125
00:06:11,900 --> 00:06:14,120
variable so we can refer to it later on.

24126
00:06:14,600 --> 00:06:17,810
I'm going to call this our tomato_img.

24127
00:06:17,990 --> 00:06:19,790
Feel free to call it anything you want.

24128
00:06:20,450 --> 00:06:24,650
And that is the data that goes into this image argument.

24129
00:06:25,430 --> 00:06:29,990
Now we've created our canvas, we've created our photo image,

24130
00:06:30,320 --> 00:06:34,400
we've told our canvas to create an image at this position,

24131
00:06:34,580 --> 00:06:36,740
and then we've put the image inside.

24132
00:06:37,010 --> 00:06:42,010
The final thing we need to do is to pack our canvas or use some other sort of

24133
00:06:42,350 --> 00:06:47,030
method to specify the layout of how the canvas is going to go on the screen.

24134
00:06:47,480 --> 00:06:49,790
And now we can hit run,

24135
00:06:50,180 --> 00:06:54,140
and we can see our image on the screen.

24136
00:06:54,770 --> 00:06:59,270
So now notice how the image is basically taking up the entire space of the

24137
00:06:59,270 --> 00:07:03,620
window. And in fact, the window is resizing itself to fit this image.

24138
00:07:04,340 --> 00:07:08,150
Wouldn't it be better if this screen was actually a little bit bigger?

24139
00:07:08,180 --> 00:07:10,850
So we don't just look at the image of a tomato.

24140
00:07:11,690 --> 00:07:15,650
We can do that by getting our window to be configured.

24141
00:07:15,980 --> 00:07:19,520
And the configuration that we want to change is the padding,

24142
00:07:19,580 --> 00:07:24,580
so I'm going to change the padx and pady. On the X-axis on the horizontal

24143
00:07:25,010 --> 00:07:29,090
I'm actually going to add a whole hundred pixels of padding on both sides.

24144
00:07:29,390 --> 00:07:31,820
And then on the Yaxis, pady,

24145
00:07:31,820 --> 00:07:36,820
I'm going to change that to 50 so that it's got 50 pixels of padding on the

24146
00:07:36,860 --> 00:07:41,270
top. That's looking pretty good other than one small defect.

24147
00:07:41,660 --> 00:07:46,190
You can see that our tomato image is a little bit cut off on the left

24148
00:07:46,640 --> 00:07:51,640
and I suspect this is because the actual image is a little bit shifted over to

24149
00:07:52,670 --> 00:07:53,390
the left.

24150
00:07:53,390 --> 00:07:58,390
So we can actually adjust this X position to be a little bit more to the right,

24151
00:07:59,270 --> 00:08:00,770
and that way our tomato

24152
00:08:00,770 --> 00:08:04,310
can be centered on screen without being cut off on either side.

24153
00:08:05,660 --> 00:08:10,340
So now that we've tweaked our image and we've displayed it on the screen,

24154
00:08:10,820 --> 00:08:14,210
the next thing to do is to display some text.

24155
00:08:14,840 --> 00:08:18,770
As you noticed before, in addition to canvas.create_image,

24156
00:08:19,100 --> 00:08:23,330
they will a whole bunch of other things we could create, including some texts.

24157
00:08:24,410 --> 00:08:29,240
This create_text method works very similarly to the create_image method.

24158
00:08:29,720 --> 00:08:34,720
Notice how the first thing that's getting highlighted is the *args.

24159
00:08:35,900 --> 00:08:39,289
And then we've got our **kw.

24160
00:08:39,710 --> 00:08:42,620
So remember from the lessons yesterday,

24161
00:08:42,950 --> 00:08:47,950
these arguments are the unlimited positional arguments and these arguments are

24162
00:08:49,610 --> 00:08:54,140
the unlimited keyword arguments. So the keyword arguments here

24163
00:08:54,140 --> 00:08:55,010
are for example the

24164
00:08:55,260 --> 00:08:59,280
image or the background color or anything else,

24165
00:08:59,610 --> 00:09:02,550
but these are the X and Y values.

24166
00:09:03,090 --> 00:09:04,980
So creating the text,

24167
00:09:05,010 --> 00:09:08,220
we also have to provide a X and Y value.

24168
00:09:08,640 --> 00:09:13,410
So I'm just going to try the same values as the image to see how that looks.

24169
00:09:14,280 --> 00:09:18,330
And now we can add some keyword arguments, for example, the text.

24170
00:09:18,690 --> 00:09:22,020
So I just want it to say 00:00,

24171
00:09:22,410 --> 00:09:26,040
which looks pretty much like the clock. Now,

24172
00:09:26,070 --> 00:09:30,570
if we run our code, you can see we've got a little bit of text showing up.

24173
00:09:31,140 --> 00:09:33,990
Now, notice how it's a little bit high up on the tomato,

24174
00:09:34,020 --> 00:09:38,610
because remember the tomato starts at the top here and ends here.

24175
00:09:38,910 --> 00:09:41,550
So that is the center of the tomato image,

24176
00:09:41,820 --> 00:09:46,110
but we can move it down a little bit so that it's actually centered in this red

24177
00:09:46,110 --> 00:09:50,700
part, the circular part. With a little bit of experimentation,

24178
00:09:50,730 --> 00:09:55,110
I think this, 103, 130, actually works quite well

24179
00:09:55,110 --> 00:09:57,870
and it's pretty much bang in the center of the tomato.

24180
00:09:58,650 --> 00:10:03,650
Let's modify this text in some other ways. We can change the fill

24181
00:10:04,620 --> 00:10:09,420
which is basically the color of the text and I'm going to change that to white,

24182
00:10:09,510 --> 00:10:13,590
that you can see here. And then I'm going to change the font as well.

24183
00:10:14,100 --> 00:10:16,140
And this is going to expect a tuple.

24184
00:10:16,290 --> 00:10:20,760
So it's going to be the font name and then the size, and then whether,

24185
00:10:20,760 --> 00:10:25,380
if it's bold or italic or whatever else you want to do. Now in the constants

24186
00:10:25,380 --> 00:10:27,450
here, I've already got the font name defined,

24187
00:10:27,480 --> 00:10:31,530
which is gonna be Courier that we're gonna be using. So that we can straight up

24188
00:10:31,560 --> 00:10:36,360
add our font name and then we'll add a font size as 35,

24189
00:10:36,720 --> 00:10:41,070
and it will say, yeah, make it bold. So there you have it.

24190
00:10:41,100 --> 00:10:45,840
We've got our tomato, we've got our text showing up as the countdown timer.

24191
00:10:46,380 --> 00:10:46,890
Now,

24192
00:10:46,890 --> 00:10:51,780
the final thing I want to do is just to change the background color to a slightly

24193
00:10:51,780 --> 00:10:54,120
nicer looking color. Now,

24194
00:10:54,120 --> 00:10:57,600
one of my favorite websites is this one called colorhunt.io,

24195
00:10:57,660 --> 00:11:01,140
which shows you a whole bunch of different color palettes that professional

24196
00:11:01,140 --> 00:11:03,210
designers have a created

24197
00:11:03,300 --> 00:11:07,680
and it makes it really easy for us to just snap up some of these hex codes and

24198
00:11:07,680 --> 00:11:10,710
use them straight away in our program. Now,

24199
00:11:10,740 --> 00:11:13,290
the one that really caught my eye is this one,

24200
00:11:13,620 --> 00:11:16,320
cause it has a bit of the tomato color palette.

24201
00:11:16,710 --> 00:11:21,710
So I've transferred all of these hex codes to the constants in the starting

24202
00:11:22,230 --> 00:11:25,560
file. So you can see I've got the pink, the red, the green, the yellow,

24203
00:11:25,950 --> 00:11:30,450
and we're going to be using that across our program to give it that consistent

24204
00:11:30,450 --> 00:11:34,020
color theme and make it look like it's been professionally designed.

24205
00:11:34,800 --> 00:11:39,210
So what I want to do is I want to change the window's background color,

24206
00:11:39,540 --> 00:11:43,770
and I can do that through the keyword argument called at bg for background,

24207
00:11:44,280 --> 00:11:47,010
and I can set it to a hex code.

24208
00:11:47,160 --> 00:11:52,160
So a hex code starts out with the pound sign and then it's some numbers and some

24209
00:11:52,350 --> 00:11:55,930
letters. Now I've already got all of that for you

24210
00:11:56,440 --> 00:12:00,820
and all you have to do is just to put down the name of the constant.

24211
00:12:01,690 --> 00:12:06,610
So this should not be in quotation marks because it's not the word. It is

24212
00:12:06,610 --> 00:12:06,970
in fact,

24213
00:12:06,970 --> 00:12:11,110
referring to that particular variable and the string that's held inside.

24214
00:12:11,710 --> 00:12:13,510
So now if we check our screen,

24215
00:12:13,540 --> 00:12:18,130
you can see the background has been changed to that nice yellow color, sort of

24216
00:12:18,130 --> 00:12:21,700
rice or hay color, but the tomato,

24217
00:12:21,820 --> 00:12:25,300
namely the canvas, still has that white background.

24218
00:12:26,230 --> 00:12:30,100
So let's change the background color of the canvas as well. And again,

24219
00:12:30,100 --> 00:12:31,600
it's using the bg.

24220
00:12:31,630 --> 00:12:36,630
So some of these, you'll notice, are standard attributes that we can change like

24221
00:12:36,640 --> 00:12:38,890
the width and the height and the background color,

24222
00:12:38,920 --> 00:12:43,660
which is standard across all of the widgets. And some other things like file

24223
00:12:43,660 --> 00:12:47,020
here are some of the more specific keyword arguments.

24224
00:12:47,680 --> 00:12:51,760
So let's apply this yellow to the background of the canvas,

24225
00:12:52,180 --> 00:12:55,570
and you can see that the canvas is now yellow as well.

24226
00:12:55,990 --> 00:12:58,270
But it's still got this little white border

24227
00:12:58,300 --> 00:13:02,590
which denotes the edges of our canvas. To get rid of that

24228
00:13:02,620 --> 00:13:07,000
I found a specific keyword argument that would actually help

24229
00:13:07,390 --> 00:13:10,840
and it took quite a bit of digging around, quite a bit of Stack Overflow

24230
00:13:10,840 --> 00:13:13,540
searching and googling in order to find this.

24231
00:13:13,540 --> 00:13:17,800
It wasn't very straightforward because tkinter is not well-documented

24232
00:13:17,800 --> 00:13:20,680
unfortunately. But thankfully for you,

24233
00:13:20,740 --> 00:13:25,740
all you have to do is find your canvas and on the line where you've created it,

24234
00:13:26,320 --> 00:13:29,260
go ahead and add this keyword argument.

24235
00:13:29,410 --> 00:13:33,820
It's called a highlightthickness,

24236
00:13:34,300 --> 00:13:37,240
and be sure that you spell it right, because it's really long.

24237
00:13:37,300 --> 00:13:41,860
And remember that there's two Ts cause it's highlight and thickness and there's

24238
00:13:41,860 --> 00:13:44,770
nothing in between, no underscore, no nothing to separate it.

24239
00:13:45,190 --> 00:13:47,920
I think that the tkinter team could have really done a little bit better here,

24240
00:13:48,010 --> 00:13:48,843
but hey.

24241
00:13:49,030 --> 00:13:53,590
If we set the highlightthickness to zero and we rerun our code,

24242
00:13:53,650 --> 00:13:57,280
then you should see that it now looks pretty good.

24243
00:13:57,430 --> 00:14:02,430
And our canvas is now completely the same color as the background of the window.

24244
00:14:04,090 --> 00:14:08,110
And you can't tell it where the window begins and the canvas ends. Now,

24245
00:14:08,110 --> 00:14:13,110
the only problem is once we've removed that border around the canvas,

24246
00:14:13,750 --> 00:14:16,780
our tomato is once again, shifted a little bit.

24247
00:14:17,140 --> 00:14:22,140
So we can actually adjust this and we can change this back to 100 and I'm going

24248
00:14:23,800 --> 00:14:25,930
to change it both for the text and the image.

24249
00:14:26,590 --> 00:14:30,160
And we can make that tomato image perfectly round

24250
00:14:30,220 --> 00:14:34,900
once more. With tkinter I've found that you have to do quite a bit of tweaking

24251
00:14:34,900 --> 00:14:37,060
around especially with these positions.

24252
00:14:37,570 --> 00:14:39,490
And you'll spend some time judging it by eye

24253
00:14:39,790 --> 00:14:43,420
in terms of the size and the width and where to place it.

24254
00:14:43,900 --> 00:14:48,900
But we have now successfully managed to place an image onto the screen,

24255
00:14:49,720 --> 00:14:50,950
changed the background of the window,

24256
00:14:51,830 --> 00:14:56,560
keep it consistent and add a little bit of text onto our tomato.

24257
00:14:57,160 --> 00:15:01,720
So now we're ready for the next step. In the next lesson,

24258
00:15:02,020 --> 00:15:05,230
we're going to create the rest of the user interface.

24259
00:15:05,440 --> 00:15:08,920
And that is mostly going to be up to you. So for all of that and more,

24260
00:15:09,010 --> 00:15:10,090
I'll see you in the next lesson.


24261
00:00:00,390 --> 00:00:01,470
In the last lesson,

24262
00:00:01,500 --> 00:00:06,500
we started setting up our user interface and we created this canvas,

24263
00:00:06,870 --> 00:00:11,250
placed our image onto it, and also on top of that, put some text.

24264
00:00:11,700 --> 00:00:13,200
This is how far we've gotten,

24265
00:00:13,530 --> 00:00:17,070
and we want to now complete setting up the user interface,

24266
00:00:17,400 --> 00:00:19,410
so adding in some more components.

24267
00:00:19,860 --> 00:00:24,860
And we wanted to end up looking a bit like this with a label at the top, a big

24268
00:00:25,470 --> 00:00:28,380
bit of text, some buttons at the bottom,

24269
00:00:28,680 --> 00:00:32,430
and also a label that keeps track of how many Pomodoros we've done.

24270
00:00:32,759 --> 00:00:36,330
So each 25 minute work session gets us a

24271
00:00:36,410 --> 00:00:38,370
check mark. So you are

24272
00:00:38,660 --> 00:00:43,370
going to be using a lot of the stuff that you learned in yesterday's lessons in terms of

24273
00:00:43,400 --> 00:00:48,400
which tkinter widgets to use and how to set them up in order to create this.

24274
00:00:49,160 --> 00:00:52,910
So it's going to be a challenge for you, but before we get started,

24275
00:00:52,910 --> 00:00:55,850
there's just a couple of things I want to point out. So,

24276
00:00:55,850 --> 00:00:58,850
one thing to note is that we've got this bg

24277
00:00:58,880 --> 00:01:01,130
which stands for background color,

24278
00:01:01,610 --> 00:01:06,350
and we've used our constants up here to set those background colors.

24279
00:01:06,920 --> 00:01:08,390
Now you can see that here

24280
00:01:08,390 --> 00:01:13,280
I've got the label and also the check mark in a green color.

24281
00:01:13,520 --> 00:01:17,300
And that color comes from our constant right here.

24282
00:01:17,840 --> 00:01:21,140
So you'll be able to color a piece of text in a label,

24283
00:01:21,350 --> 00:01:24,800
not by using bg, but by using fg

24284
00:01:24,800 --> 00:01:29,800
which stands for a foreground. And that you can basically set to equal the green

24285
00:01:30,890 --> 00:01:35,600
color that we've got. And as long as that's added to the label,

24286
00:01:35,750 --> 00:01:38,420
then you should be able to see that show up. Now,

24287
00:01:38,450 --> 00:01:41,810
the other thing I want to show you is if you don't know how to get hold of a

24288
00:01:41,840 --> 00:01:42,673
check mark,

24289
00:01:42,950 --> 00:01:47,930
the easiest way is just to go onto Wikipedia and find the particular checkmark

24290
00:01:47,930 --> 00:01:48,763
that you like.

24291
00:01:48,980 --> 00:01:53,980
And then just copy it and paste it into here as the text.

24292
00:01:54,290 --> 00:01:58,370
So for example, if we had a label which had a text argument,

24293
00:01:58,550 --> 00:02:02,120
and I copy that a checkmark and I paste it here,

24294
00:02:02,450 --> 00:02:06,410
then that checkmark is what's going to show up on screen. Now,

24295
00:02:06,410 --> 00:02:10,100
the final thing I want to mention before I let you get on with the challenge is

24296
00:02:10,100 --> 00:02:12,860
that we've packed our canvas onto the screen.

24297
00:02:13,490 --> 00:02:17,240
But as we've got quite a few things that we need to lay out on the screen,

24298
00:02:17,540 --> 00:02:20,480
it's much easier to do this using the grid.

24299
00:02:21,230 --> 00:02:25,070
So I want you to change the canvas to using the grid system.

24300
00:02:25,490 --> 00:02:30,200
And here I've created a more or less sort of breakdown of how that grid might

24301
00:02:30,200 --> 00:02:34,640
look like. So you probably will end up with one, two, three,

24302
00:02:34,640 --> 00:02:37,640
four rows and three columns,

24303
00:02:37,700 --> 00:02:41,900
and have a think about how you might lay out the labels and the buttons and the

24304
00:02:41,900 --> 00:02:45,170
check marks relative to those rows and columns.

24305
00:02:45,770 --> 00:02:47,510
Keeping this page on screen,

24306
00:02:47,570 --> 00:02:51,230
I want you to pause the video and give this challenge it go.

24307
00:02:51,590 --> 00:02:55,130
And if you don't know the sizes for things or the fonts, don't worry,

24308
00:02:55,130 --> 00:02:56,990
just guess them. It doesn't really matter.

24309
00:02:57,020 --> 00:02:59,860
As long as you've got the rough layout and the correct widgets,

24310
00:03:00,100 --> 00:03:03,760
then that would be considered a win. Pause the video now and give it a go.

24311
00:03:06,760 --> 00:03:07,090
All right.

24312
00:03:07,090 --> 00:03:11,680
So I'm going to get started by creating this top label here and that I'm going

24313
00:03:11,680 --> 00:03:16,390
to call the title_label and that's going to be created from the label class.

24314
00:03:16,990 --> 00:03:20,980
Now, the text in this is just going to read timer for now,

24315
00:03:21,580 --> 00:03:26,580
and I want to change its color by using the foreground keyword argument.

24316
00:03:28,090 --> 00:03:31,900
And I'm going to change it to that green color that we've got up here.

24317
00:03:32,920 --> 00:03:36,400
Now, I want to be able to show that label on screen,

24318
00:03:36,400 --> 00:03:40,000
so I have to give it some form of layout. And as we mentioned,

24319
00:03:40,030 --> 00:03:44,290
we're going to use the grid system. So I'm going to change the grid.

24320
00:03:45,490 --> 00:03:49,540
And if we refer to this image, you can see there's going to be three columns.

24321
00:03:49,810 --> 00:03:52,360
This is going to be in the middle column,

24322
00:03:52,720 --> 00:03:54,880
and then it's going to be on the first row.

24323
00:03:55,120 --> 00:03:56,800
So that we're going to start from zero.

24324
00:03:56,800 --> 00:04:01,800
So I'm going to say column = 1 and row = 0.

24325
00:04:03,190 --> 00:04:08,190
Now I have to change this canvas pack because otherwise it's going to give me an

24326
00:04:08,560 --> 00:04:11,650
error. And in terms of where the canvas is,

24327
00:04:11,680 --> 00:04:15,310
it's going to be again in the same column as that label,

24328
00:04:15,520 --> 00:04:17,170
but it's going to be on the next row.

24329
00:04:20,740 --> 00:04:25,210
So column 1, row 1. And now when I run it,

24330
00:04:25,210 --> 00:04:30,160
you can see our label shows up and then our canvas shows up and it's all

24331
00:04:30,160 --> 00:04:31,390
correctly positioned.

24332
00:04:32,050 --> 00:04:37,030
Now I want to change this label so that it looks a little bit more like the demo

24333
00:04:37,030 --> 00:04:39,460
that I showed you, like this.

24334
00:04:39,490 --> 00:04:43,180
So I have to change the font and the text to make it a lot bigger.

24335
00:04:44,230 --> 00:04:48,520
As we've seen before, we can simply add the font when we create the label.

24336
00:04:49,240 --> 00:04:52,090
So we can set that to a tuple.

24337
00:04:52,210 --> 00:04:56,260
And first I'm going to use my font name that I've got as a constant

24338
00:04:56,590 --> 00:05:00,040
which I've used when I created the text, it's just going to be Courier.

24339
00:05:00,730 --> 00:05:03,040
And then in terms of the size,

24340
00:05:04,450 --> 00:05:07,870
you can simply just make a guess. It's going to be something pretty large.

24341
00:05:07,900 --> 00:05:12,250
So I'm going to go with 50 and I'm not going to have it bold or italic or

24342
00:05:12,250 --> 00:05:16,750
anything, so that's the end of that font. And now when I run it again,

24343
00:05:16,780 --> 00:05:21,370
you can see its a lot bigger and it looks a lot more like the example that we

24344
00:05:21,370 --> 00:05:22,203
had here.

24345
00:05:22,390 --> 00:05:27,280
But the only difference is that it actually still has a white background. Instead

24346
00:05:27,280 --> 00:05:28,750
of just changing the foreground,

24347
00:05:28,750 --> 00:05:32,650
I'm also going to change the background and I'm going to make it the same yellow

24348
00:05:32,650 --> 00:05:35,170
color that I have in the background of the window.

24349
00:05:35,860 --> 00:05:40,860
So now it looks like it's all blended in and it's all a part of the same

24350
00:05:41,170 --> 00:05:45,310
application. Let's move on to the next row,

24351
00:05:45,340 --> 00:05:46,930
which is going to be our buttons.

24352
00:05:47,290 --> 00:05:51,910
So I'm going to have a start button and I'm also going to have a reset button

24353
00:05:52,150 --> 00:05:54,730
and they're both going to be created from the button class.

24354
00:05:55,300 --> 00:06:00,300
The start button is just going to have the text start and the reset button is going

24355
00:06:02,420 --> 00:06:07,370
to have the word reset. The start

24356
00:06:07,370 --> 00:06:12,370
button is also going to be laid out on our grid and it's going to be column 0

24357
00:06:14,060 --> 00:06:16,280
row 2.

24358
00:06:18,230 --> 00:06:22,940
And the reset button is going to be column 2, row 2.

24359
00:06:24,350 --> 00:06:29,350
So now you can see the start and the reset buttons are now on the next row after

24360
00:06:29,930 --> 00:06:34,190
the canvas and it's either side of it. Now notice how there's a little

24361
00:06:34,190 --> 00:06:38,720
bit of a white background around each of the buttons. If that bothers you,

24362
00:06:38,780 --> 00:06:43,010
then you can actually fix that by doing the same thing that we did with the

24363
00:06:43,010 --> 00:06:43,843
canvas

24364
00:06:43,880 --> 00:06:48,880
which got rid of the border by changing that highlightthickness to zero.

24365
00:06:50,150 --> 00:06:52,250
And because that's really prone to typos,

24366
00:06:52,280 --> 00:06:54,020
I'm actually just going to paste it in.

24367
00:06:56,120 --> 00:06:59,870
So now you can see that whiteboard has pretty much all but disappeared.

24368
00:07:01,190 --> 00:07:04,550
Now we're onto our very final thing that we showed,

24369
00:07:05,480 --> 00:07:08,150
which is the checkmark right here.

24370
00:07:09,530 --> 00:07:13,670
So I'm going to call it check_marks because eventually there'll probably be

24371
00:07:13,670 --> 00:07:14,570
quite a few of them

24372
00:07:15,320 --> 00:07:20,320
hopefully if we do lots of good work, and our label is going to have to text

24373
00:07:20,810 --> 00:07:24,200
which is going to have the checkmark. Now, if you are on a Mac,

24374
00:07:24,230 --> 00:07:29,230
you can actually go into edit and go to emojis and symbols and pick a checkmark

24375
00:07:31,340 --> 00:07:32,330
from here.

24376
00:07:32,870 --> 00:07:37,100
But on Windows you can simply just use the trick that I showed you.

24377
00:07:37,340 --> 00:07:42,320
Go ahead and copy and paste it from a piece of text, say like Wikipedia.

24378
00:07:43,520 --> 00:07:47,570
Once we've got our texts, I'm going to change the foreground color of

24379
00:07:47,570 --> 00:07:50,120
that text again, and I'm going to change it to green.

24380
00:07:50,900 --> 00:07:55,520
And it's also going to require a background color of yellow

24381
00:07:55,910 --> 00:07:58,850
just so that we get rid of the white. And finally,

24382
00:07:58,850 --> 00:08:01,700
I'm going to add this on using the grid,

24383
00:08:03,170 --> 00:08:07,970
setting the column to 1 and the row to

24384
00:08:08,030 --> 00:08:11,870
3. So this is basically going to be in the last row.

24385
00:08:12,350 --> 00:08:14,600
So you can see after all of that work,

24386
00:08:14,630 --> 00:08:19,630
we finally managed to complete the user interface and we've now achieved the

24387
00:08:20,330 --> 00:08:21,290
final look.

24388
00:08:21,530 --> 00:08:26,530
And all we need to do now is to actually add the timer functionality,

24389
00:08:27,020 --> 00:08:29,780
which we'll do in the next lesson. Now,

24390
00:08:29,810 --> 00:08:33,799
if you found any of the tkinter widgets difficult to use

24391
00:08:33,799 --> 00:08:38,150
or you got stuck or you couldn't figure out certain things about it,

24392
00:08:38,270 --> 00:08:41,419
then be sure to have a review of yesterday's lessons

24393
00:08:41,750 --> 00:08:44,030
where we talked about the widgets in more detail.


24394
00:00:00,540 --> 00:00:01,560
In the last lesson,

24395
00:00:01,589 --> 00:00:05,880
we completed the user interface for our Pomodoro timer,

24396
00:00:06,450 --> 00:00:11,130
and we've managed to get all the components that we need onto our graphical user

24397
00:00:11,130 --> 00:00:16,050
interface. Now, the next step is to actually give it some functionality.

24398
00:00:16,770 --> 00:00:21,480
I want to be able to create some sort of countdown mechanism that just does

24399
00:00:21,480 --> 00:00:24,000
something really simple. For example,

24400
00:00:24,000 --> 00:00:28,830
if it was just able to count down from five, four, three, two,

24401
00:00:29,220 --> 00:00:33,600
one going down by one each time, that would be great.

24402
00:00:34,110 --> 00:00:36,420
That's what we're going to be working on in this lesson.

24403
00:00:36,480 --> 00:00:40,530
And we're going to go and see the countdown mechanism section to do that.

24404
00:00:41,490 --> 00:00:46,470
One of the ways that you might think about approaching this is to use our time

24405
00:00:46,470 --> 00:00:47,303
module

24406
00:00:47,340 --> 00:00:52,020
cause we've seen before that we can say time.sleep and we can tell it to

24407
00:00:52,020 --> 00:00:53,550
sleep for a second.

24408
00:00:54,000 --> 00:00:58,980
So then we could maybe set up a while loop and while something or other is true,

24409
00:00:59,280 --> 00:01:04,260
go ahead and sleep for one second. And then afterwards just,

24410
00:01:04,319 --> 00:01:04,590
you know,

24411
00:01:04,590 --> 00:01:09,240
subtract one from some sort of counter. So that we could start count at five

24412
00:01:09,240 --> 00:01:14,240
and then each time we subtract by one and then each time we just simply update

24413
00:01:15,360 --> 00:01:16,890
our label here,

24414
00:01:17,250 --> 00:01:21,750
which we created in the canvas to whatever value count might be.

24415
00:01:22,560 --> 00:01:24,990
Now, that sounds great in principle.

24416
00:01:25,200 --> 00:01:30,200
The only problem is that we're working within a graphical user interface

24417
00:01:30,690 --> 00:01:31,523
program.

24418
00:01:32,310 --> 00:01:36,750
The reason why that's relevant is because if we think about a command line

24419
00:01:36,750 --> 00:01:38,640
program, say for example,

24420
00:01:38,640 --> 00:01:43,020
if we were to get our console to do something, print

24421
00:01:43,080 --> 00:01:43,980
hello, well,

24422
00:01:43,980 --> 00:01:48,980
it's only going to do something when you actually give it an instruction and you

24423
00:01:49,380 --> 00:01:50,213
hit enter.

24424
00:01:50,760 --> 00:01:55,530
It doesn't really need to keep an eye out for what you might do in between.

24425
00:01:56,130 --> 00:01:59,190
But a graphical user interface is a little bit different.

24426
00:01:59,520 --> 00:02:03,690
It needs to keep watching the screen to see whether

24427
00:02:03,690 --> 00:02:06,870
if a user clicks on a button, for example.

24428
00:02:07,350 --> 00:02:12,350
So it's basically going to refresh and keep listening for events.

24429
00:02:13,110 --> 00:02:14,880
So every fraction of a second,

24430
00:02:14,880 --> 00:02:16,890
it's going to keep checking, did something happene, did

24431
00:02:16,920 --> 00:02:20,760
something happen, did something happen. And the moment when it does,

24432
00:02:20,850 --> 00:02:24,510
then it's got to react. It's got to react to that event.

24433
00:02:25,050 --> 00:02:30,030
In this case, we tend to call these types of GUI programs event-driven.

24434
00:02:30,690 --> 00:02:35,040
And the way that it's driven is through our main loop.

24435
00:02:35,490 --> 00:02:39,450
So when we set up our window and we start off the main loop,

24436
00:02:39,780 --> 00:02:44,780
it's basically looping through and every millisecond it's checking to see did

24437
00:02:44,940 --> 00:02:47,730
something happen, did something happen, did something happen?

24438
00:02:48,210 --> 00:02:51,090
So that means if we have another loop in our program,

24439
00:02:51,120 --> 00:02:55,200
it actually won't be able to reach the main loop. And in this case,

24440
00:02:55,230 --> 00:02:57,780
when you actually try to run it, nothing happens.

24441
00:02:57,840 --> 00:02:59,830
Our program doesn't even launch.

24442
00:03:00,340 --> 00:03:05,260
So we have to rethink this and we have to do it a little bit differently. In

24443
00:03:05,260 --> 00:03:08,950
order to create interactive and interesting programs,

24444
00:03:09,370 --> 00:03:12,640
you kind of need something to happen on screen, right?

24445
00:03:12,640 --> 00:03:16,750
Every so often. You need this timing mechanism. Luckily,

24446
00:03:16,780 --> 00:03:18,820
tkinter already thought of this.

24447
00:03:19,150 --> 00:03:23,800
And we can in fact use one of the builtin methods to every widget.

24448
00:03:24,220 --> 00:03:26,140
So if we tap into our window widget,

24449
00:03:26,290 --> 00:03:31,290
we can get hold of a method called after and after is quite simple.

24450
00:03:32,230 --> 00:03:36,760
It's a method that takes an amount of time that it should wait

24451
00:03:37,270 --> 00:03:39,190
and then after that amount of time,

24452
00:03:39,460 --> 00:03:44,460
it simply calls a particular function that you tell it to call passing in any

24453
00:03:44,650 --> 00:03:48,760
arguments that you want to give it. Here's how it works.

24454
00:03:48,820 --> 00:03:53,820
We call window.after, we first provide the amount of time to wait in

24455
00:03:54,460 --> 00:03:58,720
milliseconds. So if we want one second, then that's 1000 milliseconds.

24456
00:03:59,320 --> 00:04:02,200
Next we pass in a function to call.

24457
00:04:02,530 --> 00:04:07,390
So let's create a function up here. Let's just call it, say something,

24458
00:04:07,990 --> 00:04:10,330
and then we'll pass in the thing,

24459
00:04:12,610 --> 00:04:16,420
like this. And then all we do is we just print that thing.

24460
00:04:16,959 --> 00:04:18,760
So super simple function.

24461
00:04:18,790 --> 00:04:23,790
And then we give the name of this function as the function to call after 1000

24462
00:04:24,310 --> 00:04:25,143
milliseconds.

24463
00:04:25,600 --> 00:04:29,590
Now the final thing in this list of arguments,

24464
00:04:29,920 --> 00:04:34,090
if I just go ahead and cut that and show you again, when it gives me the prompt,

24465
00:04:34,510 --> 00:04:39,010
the last thing is actually a *args.

24466
00:04:39,490 --> 00:04:44,230
This, if you remember, allows us to put in an unlimited number 

24467
00:04:44,290 --> 00:04:46,090
of positional arguments.

24468
00:04:46,600 --> 00:04:50,890
What that means is we can give as many arguments as we want

24469
00:04:51,220 --> 00:04:56,220
and those arguments, in this case, is simply going to be passed to the function

24470
00:04:56,350 --> 00:04:59,920
that we want to call. So in this case, it's going to be that thing.

24471
00:05:00,190 --> 00:05:03,580
So if I put hello here then I run my code,

24472
00:05:03,940 --> 00:05:07,990
you can see that after 1000 milliseconds, basically one second,

24473
00:05:08,440 --> 00:05:10,750
it calls this function,

24474
00:05:10,810 --> 00:05:15,400
say_something, and it passes this hello as the input

24475
00:05:15,580 --> 00:05:18,370
to that function. As I said,

24476
00:05:18,400 --> 00:05:22,000
you can have an infinite amount of positional arguments.

24477
00:05:22,330 --> 00:05:26,530
So let's put in some other arguments which we'll call a,

24478
00:05:26,530 --> 00:05:27,363
b, and c,

24479
00:05:27,610 --> 00:05:32,320
and then we'll print a, print b, and print c.

24480
00:05:33,970 --> 00:05:36,640
And now instead of passing in hello,

24481
00:05:36,670 --> 00:05:41,650
we're going to pass in lots of positional parameters. So we'll say 3, 5,

24482
00:05:41,680 --> 00:05:44,500
and 8. Now, when I hit run,

24483
00:05:44,560 --> 00:05:46,840
you will see it waits for one second

24484
00:05:47,170 --> 00:05:51,850
and then it passes all three of these parameters to say something

24485
00:05:52,270 --> 00:05:55,480
and it goes ahead and prints all of those out at once.

24486
00:05:56,050 --> 00:06:01,010
So this is how the after method works. But what we wanted to do though,

24487
00:06:01,370 --> 00:06:03,920
is we want it to repeat itself,

24488
00:06:04,010 --> 00:06:09,010
to essentially loop. One way of getting that behavior is to simply put this

24489
00:06:10,760 --> 00:06:11,240
method,

24490
00:06:11,240 --> 00:06:16,240
call somewhere inside a function and then call itself.

24491
00:06:16,370 --> 00:06:20,930
So here's what I mean. Let's create a function called a count_down,

24492
00:06:21,740 --> 00:06:26,740
and this is going to take a input in the form of the number to count down by.

24493
00:06:28,550 --> 00:06:32,270
And then inside this function, we call window.after.

24494
00:06:32,720 --> 00:06:35,510
And we say that after 1000 milliseconds,

24495
00:06:35,750 --> 00:06:40,750
call this function count_down and then pass in a count number.

24496
00:06:44,570 --> 00:06:47,390
If that count number started out as 5,

24497
00:06:47,630 --> 00:06:50,840
then we want to say count - 1.

24498
00:06:51,320 --> 00:06:55,700
Now all we have to do is to call this countdown method.

24499
00:06:56,030 --> 00:07:00,530
So let's call count_down and passing the starting count,

24500
00:07:00,590 --> 00:07:04,430
let's say 5 seconds. So now when I run the code,

24501
00:07:04,430 --> 00:07:07,760
it's going to call this method passing in 5 over here,

24502
00:07:08,300 --> 00:07:11,720
and then it's going to wait for one second,

24503
00:07:12,110 --> 00:07:17,060
and then it's going to call this function count_down passing in five minus one

24504
00:07:17,240 --> 00:07:21,920
so it becomes four. And then afterward it repeats again, becomes three,

24505
00:07:21,950 --> 00:07:26,180
two, one. So now if we catch that number

24506
00:07:26,360 --> 00:07:30,500
which we can print, then we'll be able to see it count down

24507
00:07:30,530 --> 00:07:34,190
when we run the code; five, four, three,

24508
00:07:34,580 --> 00:07:38,390
two, one. One every second,

24509
00:07:38,450 --> 00:07:42,770
and it basically keeps on going and it even continues to the negatives.

24510
00:07:43,310 --> 00:07:46,310
So if we don't want it to go to negative time,

24511
00:07:46,340 --> 00:07:49,220
then all we have to do is add an if statement.

24512
00:07:49,640 --> 00:07:54,620
If count is greater than zero, then go ahead and execute this line of code.

24513
00:07:55,880 --> 00:07:59,780
So now it'll go from five, four, three, two,

24514
00:07:59,810 --> 00:08:02,570
one, zero, and then it will stop.

24515
00:08:03,470 --> 00:08:08,450
This is the kind of behavior that we would need if we want to update our

24516
00:08:08,450 --> 00:08:11,180
countdown in our Pomodoro timer.

24517
00:08:11,900 --> 00:08:14,180
So how can we instead of printing

24518
00:08:14,180 --> 00:08:19,180
the count actually change this text on our canvas? We'll,

24519
00:08:19,820 --> 00:08:24,820
the way that we do that is by assigning this text a variable.

24520
00:08:25,430 --> 00:08:28,460
So I'm going to call it timer_text

24521
00:08:29,870 --> 00:08:34,870
and now that we've got timer_text being a set as the text that was created in

24522
00:08:35,360 --> 00:08:38,870
the canvas, then we can access it right here.

24523
00:08:39,620 --> 00:08:44,120
And the way that we'd change a piece of text or anything for that matter in a

24524
00:08:44,120 --> 00:08:48,110
canvas is slightly different from how we would do for a label.

24525
00:08:48,530 --> 00:08:52,070
If it was just the title label that we wanted to change, we would say title_

24526
00:08:52,070 --> 00:08:56,310
label.config, and then let's change the text to something new.

24527
00:08:56,940 --> 00:08:58,920
But to change a canvas element,

24528
00:08:58,950 --> 00:09:02,640
you actually have to tap into the particular canvas you want to change and

24529
00:09:03,240 --> 00:09:08,220
Then you call a method called itemconfig. And then in this method,

24530
00:09:08,280 --> 00:09:12,240
you pass in the particular item that you actually want to configure,

24531
00:09:12,540 --> 00:09:14,910
so in our case it's the timer_text,

24532
00:09:15,570 --> 00:09:20,570
and then you pass in the thing about it that you actually want to change in

24533
00:09:20,970 --> 00:09:24,300
terms of a kwarg, so this is a keyword argument.

24534
00:09:24,870 --> 00:09:28,380
We're going to change the text to the current count.

24535
00:09:28,650 --> 00:09:31,620
Now notice how this is not the string count,

24536
00:09:31,830 --> 00:09:34,290
because then it would just show that word,

24537
00:09:34,620 --> 00:09:39,270
but its actually the live countdown time. At this point in time

24538
00:09:39,300 --> 00:09:40,500
if I run the code,

24539
00:09:40,500 --> 00:09:45,500
I actually get a error and it tells us that the name canvas is not defined

24540
00:09:46,320 --> 00:09:50,940
and that's because I'm calling this method countdown before I actually created

24541
00:09:50,940 --> 00:09:51,690
the canvas.

24542
00:09:51,690 --> 00:09:56,250
So if I move that to below this line and I run it again,

24543
00:09:56,280 --> 00:09:58,020
then you'll see it actually work.

24544
00:09:58,320 --> 00:10:02,370
And you see it starts out from five and it counts down to zero.

24545
00:10:03,180 --> 00:10:08,180
Now how can we tie that behavior to the start button so that I can press the

24546
00:10:08,250 --> 00:10:13,140
start button and then and only then does it start counting down from five,

24547
00:10:13,140 --> 00:10:17,700
four, three, two, one? Well, let's go ahead and add 

24548
00:10:17,760 --> 00:10:22,500
another function and I'm gonna add it in the timer mechanism section and I'm

24549
00:10:22,500 --> 00:10:24,120
going to call it start_timer.

24550
00:10:24,900 --> 00:10:27,750
Now this function is super simple.

24551
00:10:27,930 --> 00:10:32,930
All it's going to do is it's going to be responsible for calling that function

24552
00:10:33,030 --> 00:10:36,660
countdown and it's going to count down from five seconds.

24553
00:10:36,810 --> 00:10:39,840
So I'll move that inside the start_timer.

24554
00:10:40,500 --> 00:10:45,500
And now the start timer is going to be the function that needs to be triggered

24555
00:10:47,070 --> 00:10:49,560
when the start button gets pressed.

24556
00:10:49,920 --> 00:10:53,280
Do you remember how to tie a function to a button in

24557
00:10:53,280 --> 00:10:58,260
tkinter? Pause the video and see if you can solve this challenge so that you'll

24558
00:10:58,260 --> 00:11:03,260
be able to run the code, hit start and the timer to start counting down.

24559
00:11:06,630 --> 00:11:11,630
So the keyword argument is command and all we have to do is to tie it to the

24560
00:11:12,210 --> 00:11:15,990
start_timer function, but without the parentheses.

24561
00:11:16,500 --> 00:11:19,920
So now when I hit run and I click start,

24562
00:11:20,340 --> 00:11:24,840
it starts the timer setting that text from five, four, three,

24563
00:11:24,930 --> 00:11:25,763
two, one.

24564
00:11:26,220 --> 00:11:31,220
So the main loop is listening and when the user interacts with the start button

24565
00:11:31,890 --> 00:11:36,660
it actually calls the start_timer function which calls the count_down function

24566
00:11:36,960 --> 00:11:39,900
and get it to count down from five seconds.

24567
00:11:40,560 --> 00:11:43,980
Now we don't actually want to count down from five seconds.

24568
00:11:44,010 --> 00:11:48,750
We want to count down in minutes because we're probably not going to be working

24569
00:11:48,750 --> 00:11:50,130
for five seconds at a time.

24570
00:11:50,160 --> 00:11:54,040
We're going to be working for 25 minutes or having a minute break.

24571
00:11:54,580 --> 00:11:59,580
So how can I change this countdown to interpret this instead of as five seconds

24572
00:12:01,390 --> 00:12:04,990
to five minutes? Well, let's have a think about that.

24573
00:12:05,680 --> 00:12:09,850
If we wanted to count down, let's say one minute,

24574
00:12:10,240 --> 00:12:14,230
then that in terms of seconds would be 60 seconds.

24575
00:12:14,860 --> 00:12:18,670
All we have to do is to take the number of minutes that we want to count down

24576
00:12:18,670 --> 00:12:22,540
by and multiply it by 60. In this case,

24577
00:12:22,540 --> 00:12:27,040
if we wanted to count down it by five minutes instead of five seconds,

24578
00:12:27,400 --> 00:12:30,160
all we have to do is multiply by 60.

24579
00:12:30,670 --> 00:12:33,880
So then when we call this function count_down,

24580
00:12:34,150 --> 00:12:36,790
instead of getting five seconds to count down,

24581
00:12:36,820 --> 00:12:39,190
we get 300 seconds to count from.

24582
00:12:39,880 --> 00:12:44,470
But now if we run our code, you can see it's going to start from 300.

24583
00:12:44,740 --> 00:12:49,240
It's going to go down all the way down to zero. Now in terms of time,

24584
00:12:49,390 --> 00:12:54,040
that is five minutes, but this is not a very good way to visualize it.

24585
00:12:54,370 --> 00:12:58,570
Nobody thinks in terms of 288 seconds remaining, right?

24586
00:12:59,140 --> 00:13:04,140
So we have to format this count so that we can display it in the format of 

24587
00:13:04,720 --> 00:13:09,010
00:00 like the usual kind of time, where for example,

24588
00:13:09,010 --> 00:13:14,010
you have one minute and 35 seconds remaining or something like that.

24589
00:13:15,520 --> 00:13:20,520
So how can we create something like this? If we have the count in terms of

24590
00:13:20,680 --> 00:13:21,220
seconds,

24591
00:13:21,220 --> 00:13:26,220
so let's say we have 300, and we wanted to know how many minutes where in that

24592
00:13:26,800 --> 00:13:31,800
then all we have to do is take 300 and then divide it by 60 and we would get

24593
00:13:32,680 --> 00:13:37,150
5, so that's 5 minutes. But what if the countdown has already been going

24594
00:13:37,210 --> 00:13:42,210
and instead we had 245 seconds remaining?

24595
00:13:42,790 --> 00:13:43,000
Well,

24596
00:13:43,000 --> 00:13:48,000
we can actually get hold of how many minutes and seconds that is equivalent to.

24597
00:13:50,020 --> 00:13:54,430
And the way we would do that is by taking that number, say 245,

24598
00:13:54,760 --> 00:13:56,920
dividing it by 60 seconds

24599
00:13:57,280 --> 00:14:02,280
and we would get a number 245 / 60 is 4.08,

24600
00:14:05,440 --> 00:14:06,820
3 recurring.

24601
00:14:07,570 --> 00:14:12,570
If we rounded that number down to get rid of all of the decimal places,

24602
00:14:13,240 --> 00:14:16,060
then that would be equal to 4 minutes.

24603
00:14:16,810 --> 00:14:21,810
And then if we want to get hold of how many seconds there are after we've gotten

24604
00:14:22,420 --> 00:14:23,620
hold of the four minutes,

24605
00:14:24,010 --> 00:14:29,010
then the way we do that is to use the modular because remember the modular

24606
00:14:29,650 --> 00:14:34,450
divides a number by another number, so 245 divided by 60,

24607
00:14:34,870 --> 00:14:37,240
and then it will give us the remainder.

24608
00:14:37,420 --> 00:14:42,280
How much is left after it's cleanly divided. And in this case,

24609
00:14:42,340 --> 00:14:47,340
this would actually be the number of seconds remaining after the four minutes

24610
00:14:48,100 --> 00:14:51,650
has been taken away. So let's write this code out.

24611
00:14:52,550 --> 00:14:57,550
The count minutes would be the count divided by 60,

24612
00:14:59,780 --> 00:15:04,330
but then we have to round it down so that we get rid of all of the remainder.

24613
00:15:04,330 --> 00:15:09,110
Now we don't want to round it so that if it was something like 3.6

24614
00:15:09,170 --> 00:15:10,640
it becomes 4.

24615
00:15:10,910 --> 00:15:15,770
We actually just want to get rid of everything after the decimal place. To do

24616
00:15:15,770 --> 00:15:16,310
that,

24617
00:15:16,310 --> 00:15:21,310
the easiest way is to import the math module and then use a function called math

24618
00:15:23,870 --> 00:15:27,800
.floor and this math.floor,

24619
00:15:27,830 --> 00:15:32,830
if I hover over it, is going to return the largest whole number that is less than

24620
00:15:36,020 --> 00:15:37,310
or equal to x.

24621
00:15:37,790 --> 00:15:42,790
If this was a 4.8, then the largest hole number less than 4.8 is 4.

24622
00:15:46,250 --> 00:15:47,960
So that's basically what this is going to do.

24623
00:15:48,170 --> 00:15:51,020
And this is going to give us the number of minutes. Now,

24624
00:15:51,020 --> 00:15:53,000
the next thing we want to do is to know, well,

24625
00:15:53,000 --> 00:15:58,000
how many seconds is left after we've taken away the minutes. To do this,

24626
00:15:58,700 --> 00:15:59,660
we're going to do counts

24627
00:15:59,720 --> 00:16:03,200
and then we're going to use the modulo to divide it by 60.

24628
00:16:03,770 --> 00:16:08,770
So the modulo is going to give us the remainder number of seconds after we've

24629
00:16:09,440 --> 00:16:12,650
cleanly divided it by 600. For example,

24630
00:16:12,650 --> 00:16:16,250
if we had 100 seconds and we divide that by 60, well,

24631
00:16:16,250 --> 00:16:17,870
that's going to be equal to one.

24632
00:16:18,290 --> 00:16:23,290
So we can minus 60 from 100 and we get 40 as the remainder.

24633
00:16:25,010 --> 00:16:27,830
That is what we will get after doing the modulo.

24634
00:16:28,430 --> 00:16:31,220
So that's basically the number of seconds that remains.

24635
00:16:32,240 --> 00:16:36,260
So now that we've got the minute and the second, we can actually change this

24636
00:16:36,260 --> 00:16:41,260
count to use an f-string and we can format it so that we add the count minute

24637
00:16:42,170 --> 00:16:43,003
first,

24638
00:16:43,130 --> 00:16:48,130
and then we add a colon and then we add our count in seconds.

24639
00:16:49,430 --> 00:16:53,900
Now look at what happens. We're going to try and count down five minutes.

24640
00:16:54,260 --> 00:16:58,490
So we get hold of the number of seconds, we pass it over to this function,

24641
00:16:58,880 --> 00:17:03,080
we work out what the count is equivalent to in minutes and seconds

24642
00:17:03,470 --> 00:17:06,920
and then afterwards we subtract one second each time.

24643
00:17:07,520 --> 00:17:10,310
So now when I run the code and I hit start,

24644
00:17:10,640 --> 00:17:14,270
notice how it starts from 5 minutes, goes down to 4 minutes,

24645
00:17:14,270 --> 00:17:15,980
50, 59,

24646
00:17:16,069 --> 00:17:19,310
and then it keeps ongoing like a real timer.

24647
00:17:20,180 --> 00:17:21,440
That's pretty cool.

24648
00:17:21,650 --> 00:17:26,650
The only thing left to figure out is how can we get it to not display 5:0?

24649
00:17:27,349 --> 00:17:32,060
How can we get it to display 5:00

24650
00:17:32,840 --> 00:17:36,260
like you would see on a clock? To find out how to do that

24651
00:17:36,290 --> 00:17:39,170
we have to learn about Python dynamic typing.

24652
00:17:39,440 --> 00:17:43,370
We have to understand how that works and that is what we're going to be talking

24653
00:17:43,370 --> 00:17:46,340
about in the next lesson. So I'll see you there.


24654
00:00:00,780 --> 00:00:04,830
In the last lesson, we managed to get our countdown mechanism to work,

24655
00:00:05,160 --> 00:00:10,100
and we got it to count down from five minutes to zero. Now, everything works,

24656
00:00:10,580 --> 00:00:14,510
but there's just something a little bit niggling and you'll see it when I hit

24657
00:00:14,510 --> 00:00:18,200
start. Notice how it says 5:0.

24658
00:00:18,740 --> 00:00:21,880
Wouldn't it be so much better if it said 5:00?

24659
00:00:23,450 --> 00:00:25,280
So how would we do that? Well,

24660
00:00:25,550 --> 00:00:30,320
that is the zero comes from this count_sec because it's taking the count in

24661
00:00:30,320 --> 00:00:35,210
seconds, dividing it by 60 and finding the remainder using the modulo.

24662
00:00:35,720 --> 00:00:39,140
Now, when there is no remainder, it's just going to be equal to zero.

24663
00:00:39,620 --> 00:00:42,500
So we could use an if statement and check well

24664
00:00:42,740 --> 00:00:45,800
if the count_sec is equal to zero,

24665
00:00:46,190 --> 00:00:50,990
then instead of making it zero, let's set it to equal a string

24666
00:00:51,020 --> 00:00:52,160
which is "00".

24667
00:00:52,790 --> 00:00:56,150
Now this actually, believe it or not, works.

24668
00:00:56,900 --> 00:00:58,310
And you'll see it when I run it.

24669
00:00:58,340 --> 00:01:01,250
When I hit start, doesn't that look so much better?

24670
00:01:02,330 --> 00:01:07,330
But some of you might've realized that there's something a little bit crazy going on

24671
00:01:07,640 --> 00:01:09,380
here in these two lines of code.

24672
00:01:09,830 --> 00:01:14,830
We're checking to see if this variable holds data that is equal to the integer,

24673
00:01:16,610 --> 00:01:18,650
the whole number zero,

24674
00:01:19,250 --> 00:01:21,890
and then we're setting it to a string.

24675
00:01:22,310 --> 00:01:26,000
So these are completely two different data types.

24676
00:01:26,030 --> 00:01:29,120
That's an int and that is a string.

24677
00:01:29,540 --> 00:01:32,450
So how is it that we're able to do this?

24678
00:01:33,350 --> 00:01:36,350
So let me pull up the Python console.

24679
00:01:36,560 --> 00:01:39,260
We know that if we took a integer,

24680
00:01:39,290 --> 00:01:44,180
say 3, and we try to add it to a string, say a 4,

24681
00:01:44,480 --> 00:01:45,800
this is not going to work

24682
00:01:45,830 --> 00:01:50,330
and we get a type error because this is type int

24683
00:01:50,420 --> 00:01:52,250
and this is type string.

24684
00:01:52,520 --> 00:01:57,520
So you can't actually add these two together because there's a mismatch.

24685
00:01:58,250 --> 00:01:59,720
Now here's the crazy thing.

24686
00:01:59,840 --> 00:02:04,550
Let's create a variable a and let's make it hold the integer with 3.

24687
00:02:05,150 --> 00:02:10,150
And at this point, you can see that this a variable has a data type of int.

24688
00:02:11,390 --> 00:02:16,130
If I decide to change that variable and make it hold a different type of data,

24689
00:02:16,430 --> 00:02:19,400
let's say the number 4, or let's make it simpler,

24690
00:02:19,400 --> 00:02:23,870
let's make it hold the piece of text, Hello. As soon as that goes through,

24691
00:02:23,870 --> 00:02:27,410
you can see that a is now of data type string.

24692
00:02:28,010 --> 00:02:30,950
And the very fact that I'm able to do that,

24693
00:02:31,100 --> 00:02:36,100
change a variable's data type by changing the content in that variable,

24694
00:02:37,310 --> 00:02:42,310
this is what's known as dynamic typing. In this sense,

24695
00:02:42,770 --> 00:02:47,770
Python is a language that's quite unique because on one hand it is strongly

24696
00:02:48,380 --> 00:02:53,380
typed, in the sense that it holds on to the data type of the variable,

24697
00:02:54,230 --> 00:02:58,670
so this a is a string and it knows that it's a string

24698
00:02:59,110 --> 00:03:02,650
and if you do something that is not meant for a string,

24699
00:03:03,010 --> 00:03:06,640
say if you try to raise a to the power of 2,

24700
00:03:07,090 --> 00:03:11,440
then that is going to be a type error. Types matter

24701
00:03:11,800 --> 00:03:15,280
and when you call a function that's expecting a particular type,

24702
00:03:15,610 --> 00:03:18,070
say if you use the power function

24703
00:03:18,100 --> 00:03:22,600
which is expecting a integer and you pass in something

24704
00:03:22,630 --> 00:03:26,980
that's obviously not an integer say, our string here

24705
00:03:27,700 --> 00:03:32,020
and you try to get it to do some things, say raise it to the power of 3,

24706
00:03:32,380 --> 00:03:34,300
then again, we get type error.

24707
00:03:34,330 --> 00:03:37,510
It knows what type is supposed to go into that function

24708
00:03:37,840 --> 00:03:40,570
and it makes sure that you comply with that.

24709
00:03:40,600 --> 00:03:43,150
This is where the language is strongly typed.

24710
00:03:43,660 --> 00:03:48,660
But the part where the language is dynamically typed is that even though it

24711
00:03:48,700 --> 00:03:51,160
knows what type a variable is,

24712
00:03:51,220 --> 00:03:54,100
it knows what type a function expects,

24713
00:03:54,580 --> 00:03:59,580
you can also dynamically change the data type of any variable like this.

24714
00:04:02,500 --> 00:04:06,130
That is basically what we're using here. We're using dynamic

24715
00:04:06,130 --> 00:04:07,510
typing to change

24716
00:04:07,510 --> 00:04:12,510
the data type of count_sec from a integer to a string.

24717
00:04:13,210 --> 00:04:18,209
And then we use that string to display inside this canvas text.

24718
00:04:19,390 --> 00:04:20,529
Now there is however,

24719
00:04:20,529 --> 00:04:25,530
still a bit of a bug with this and you'll see it once it dips below 10 seconds.

24720
00:04:27,430 --> 00:04:30,430
Notice that as soon as it goes to 9 seconds,

24721
00:04:30,820 --> 00:04:34,660
instead of saying 09, which is what you would want or 08,

24722
00:04:34,690 --> 00:04:35,523
06,

24723
00:04:35,740 --> 00:04:40,740
it just lists the number of seconds until it reaches 00.

24724
00:04:41,380 --> 00:04:43,690
So how can we fix this?

24725
00:04:44,770 --> 00:04:47,050
The key lies in these two lines of code.

24726
00:04:47,740 --> 00:04:49,810
See if you can do this as a challenge,

24727
00:04:50,290 --> 00:04:55,290
pause the video and see if you can make it so that when it's nine seconds

24728
00:04:55,390 --> 00:04:56,200
remaining,

24729
00:04:56,200 --> 00:05:01,200
it says 09 or 08 or 07 and also 00 of course.

24730
00:05:03,370 --> 00:05:07,840
Pause the video and see if you can complete this challenge. All right.

24731
00:05:07,840 --> 00:05:12,700
So basically what we want to check for is when the count in seconds is less

24732
00:05:12,700 --> 00:05:17,050
than 10, because now it's going to be in the single digits

24733
00:05:17,230 --> 00:05:20,590
and instead of having just one digit,

24734
00:05:20,650 --> 00:05:22,870
we wanna add a zero in front of it.

24735
00:05:23,470 --> 00:05:26,890
So the way we can do this is through just an f-string.

24736
00:05:27,340 --> 00:05:32,340
We can use an f-string to add the zero in front and then add the count in

24737
00:05:32,620 --> 00:05:34,390
seconds afterwards,

24738
00:05:34,600 --> 00:05:39,220
formatting that into the standard kind of time format.

24739
00:05:40,270 --> 00:05:44,290
Now that we fixed that if we run our app again

24740
00:05:44,590 --> 00:05:46,450
it goes down to 10 seconds

24741
00:05:47,140 --> 00:05:51,190
you can see it now says 09, 08, 07

24742
00:05:51,460 --> 00:05:54,430
and it's nicely formatted using our f-string.

24743
00:05:55,660 --> 00:06:00,660
And we're able to do because of the flexibility of the data types in Python,

24744
00:06:01,130 --> 00:06:02,480
checking it as a number,

24745
00:06:02,510 --> 00:06:07,430
making sure it's less than 10 and then formatting it as a string and using the

24746
00:06:07,430 --> 00:06:08,263
f-string.

24747
00:06:08,900 --> 00:06:13,070
Now, this is not a feature that's available in all programming languages.

24748
00:06:13,370 --> 00:06:17,090
For example, languages like C or Java or Swift,

24749
00:06:17,420 --> 00:06:19,280
you won't be able to do this.

24750
00:06:19,880 --> 00:06:24,470
Once you create a variable and you give it a certain type of data,

24751
00:06:24,680 --> 00:06:27,830
then it must forever hold on to that type of data.

24752
00:06:28,520 --> 00:06:33,520
But Python allows you to change the data type of a variable just by assigning it

24753
00:06:34,820 --> 00:06:36,980
to a different type of value.

24754
00:06:37,970 --> 00:06:42,800
There's a really well-worded Stack Overflow answer that addresses this exact

24755
00:06:42,800 --> 00:06:43,040
thing

24756
00:06:43,040 --> 00:06:47,870
I'm talking about, talking about the fact that Python is a strongly dynamically

24757
00:06:47,870 --> 00:06:52,220
typed language. And I recommend that if you want to dig more into this,

24758
00:06:52,370 --> 00:06:56,870
to have a read of this answer and I'll link to this in the course resources.


24759
00:00:00,240 --> 00:00:02,820
Now we're almost there. When we hit start,

24760
00:00:02,880 --> 00:00:07,880
our countdown works and it starts counting down from however minutes we tell it

24761
00:00:08,550 --> 00:00:11,130
to. Here's a challenge for you.

24762
00:00:11,700 --> 00:00:16,700
We know that the Pomodoro technique requires us to work for 25 minutes and then

24763
00:00:18,180 --> 00:00:21,300
after 25 minutes to take a short break,

24764
00:00:21,780 --> 00:00:26,780
and then it goes back to 25 and this repeats until we've done four sets of 25

24765
00:00:27,690 --> 00:00:30,390
minutes, and then we get a long break.

24766
00:00:31,050 --> 00:00:36,050
So I want you to have a think about how you could create a variable called reps,

24767
00:00:36,570 --> 00:00:41,010
which is going to be a global variable, and you can access it inside

24768
00:00:41,040 --> 00:00:46,040
start_timer by tapping into this global reps. Now using the modulo or some other

24769
00:00:48,180 --> 00:00:52,890
sort of mechanism that you can think of see if you can figure out how to get our

24770
00:00:52,890 --> 00:00:57,840
countdown timer to count down a different number of minutes.

24771
00:00:58,440 --> 00:01:02,820
For example, we would start out with work_seconds

24772
00:01:03,120 --> 00:01:07,410
which is going to be the work in minutes times 60,

24773
00:01:08,310 --> 00:01:11,910
and then we have our short_break_sec

24774
00:01:14,040 --> 00:01:16,620
and our long break seconds.

24775
00:01:19,530 --> 00:01:22,530
Now, how can we call this countdown timer

24776
00:01:22,530 --> 00:01:27,530
so that if it's the first third,

24777
00:01:30,180 --> 00:01:31,013
fifth,

24778
00:01:31,830 --> 00:01:35,550
seventh, rep that we're actually doing our countdown,

24779
00:01:35,910 --> 00:01:40,710
then we want this countdown to do our 25 minutes in terms of work seconds.

24780
00:01:41,400 --> 00:01:44,550
But on the other hand, if it is, um,

24781
00:01:44,610 --> 00:01:47,460
the eighth rep,

24782
00:01:47,490 --> 00:01:52,260
then we want the countdown to work on our long break seconds.

24783
00:01:52,920 --> 00:01:57,920
But if it's the second or fourth or sixth rep then it should count down to our

24784
00:02:03,720 --> 00:02:05,460
short break seconds.

24785
00:02:06,900 --> 00:02:11,520
Essentially what we're trying to achieve is for our countdown timer to do 25

24786
00:02:11,520 --> 00:02:14,580
minutes, then 5 minutes, then 25, 5,

24787
00:02:15,030 --> 00:02:18,000
and until we've done four sets of 25,

24788
00:02:18,330 --> 00:02:21,120
then do we get a 20 minute break.

24789
00:02:21,570 --> 00:02:25,650
So have a think about what you've done before using the modulo and see if you

24790
00:02:25,650 --> 00:02:29,160
can figure out how to get this to work in your code.

24791
00:02:29,790 --> 00:02:32,700
Pause the video and see if you can complete this challenge.

24792
00:02:35,220 --> 00:02:35,610
All right.

24793
00:02:35,610 --> 00:02:40,610
So what we want to do is first when we start the timer to increase the reps.

24794
00:02:41,790 --> 00:02:44,130
So we're going to increase it by one.

24795
00:02:44,580 --> 00:02:49,580
So now it starts out at the first rep or the first repetition.

24796
00:02:50,610 --> 00:02:52,500
Now on this first repetition,

24797
00:02:52,590 --> 00:02:56,760
it's going to need to run this particular line of code.

24798
00:02:57,420 --> 00:02:59,650
And then when it gets to the second repetition, 

24799
00:02:59,650 --> 00:03:02,290
it needs to run this line of code. And finally,

24800
00:03:02,290 --> 00:03:06,520
when it gets to the eighth repetition then it needs to run this line of code.

24801
00:03:07,030 --> 00:03:11,410
So we can actually use a if statement to check for all of these things.

24802
00:03:11,890 --> 00:03:16,890
So here we can check to see if the reps modulo by 8 is equal to zero.

24803
00:03:19,990 --> 00:03:23,170
If the number of reps divided by 8 has no remainder,

24804
00:03:23,440 --> 00:03:27,130
then that means it's actually the time for a long break.

24805
00:03:28,270 --> 00:03:29,740
Now, Elif though,

24806
00:03:29,740 --> 00:03:33,850
or else if the reps is actually even,

24807
00:03:33,880 --> 00:03:37,810
so if modulo 2 is equal to zero, then in this case

24808
00:03:37,870 --> 00:03:40,720
it should be time for a short break.

24809
00:03:42,910 --> 00:03:44,140
And finally,

24810
00:03:44,200 --> 00:03:48,340
if it's none of those conditions and we have an else statement,

24811
00:03:48,760 --> 00:03:52,450
then it's just a normal work time.

24812
00:03:53,530 --> 00:03:55,840
Now we might think that's all that's required,

24813
00:03:55,960 --> 00:03:59,080
but as usual we have to test it to be sure.

24814
00:03:59,620 --> 00:04:04,620
So let's go ahead and change our work minute down to one minute so that we can

24815
00:04:04,960 --> 00:04:09,640
run it and have a reasonable chance of seeing when it actually finally reaches

24816
00:04:09,670 --> 00:04:10,503
zero.

24817
00:04:10,930 --> 00:04:14,740
Once our timer counter goes down to zero,

24818
00:04:15,130 --> 00:04:19,180
we would expect it to go to a five minute break,

24819
00:04:19,540 --> 00:04:22,600
but it doesn't. It actually just stops.

24820
00:04:23,260 --> 00:04:28,260
And this is why we need to test our code and test our programs as frequently as

24821
00:04:29,170 --> 00:04:33,400
we write code so that we can catch these bugs in terms of our logic.

24822
00:04:33,970 --> 00:04:35,890
So what's happening here? Well,

24823
00:04:35,920 --> 00:04:39,880
basically it's counting down to

24824
00:04:39,880 --> 00:04:42,820
the number of seconds that we told it to count down to.

24825
00:04:43,330 --> 00:04:47,080
And then once it's done that, well, that's kind of the end.

24826
00:04:47,200 --> 00:04:52,200
There's no other way of triggering start timer unless we press the button.

24827
00:04:53,140 --> 00:04:58,140
So what we actually need to do is to add a else statement here and catch when the

24828
00:05:01,270 --> 00:05:02,770
count goes to zero,

24829
00:05:03,190 --> 00:05:07,540
because it's in that moment that we want to actually call start timer

24830
00:05:07,780 --> 00:05:08,613
once again.

24831
00:05:09,130 --> 00:05:13,600
And this time it's going to increase the reps and figure out which countdown we

24832
00:05:13,600 --> 00:05:14,740
actually need to go to.

24833
00:05:15,430 --> 00:05:19,000
So if we run this code again and I fast forward through the timer,

24834
00:05:19,450 --> 00:05:22,360
you can see that now, once it hits zero,

24835
00:05:23,260 --> 00:05:27,760
it's going to go straight to our five minute break and it continues the timer.

24836
00:05:28,660 --> 00:05:31,870
Now, as the user though, it's quite hard to tell whether

24837
00:05:31,870 --> 00:05:36,870
if I'm in a work section or if I'm in a break section and what's actually

24838
00:05:37,180 --> 00:05:38,013
going on.

24839
00:05:38,260 --> 00:05:42,910
So we should improve the user experience by changing this title from saying

24840
00:05:42,940 --> 00:05:46,300
timer to whatever it is that the user should be doing.

24841
00:05:46,900 --> 00:05:51,880
So if they are in this long break countdown then it should say

24842
00:05:51,910 --> 00:05:55,360
break, if they're in a short break section it should say break,

24843
00:05:55,420 --> 00:05:58,250
and if they're in the work section then it should say work.

24844
00:05:58,760 --> 00:06:02,450
So the label that we need to change is this title label.

24845
00:06:02,960 --> 00:06:07,040
And I also want to change the color, the foreground color,

24846
00:06:07,400 --> 00:06:12,170
so that when it's work, it's green, when its a short break it's pink,

24847
00:06:12,500 --> 00:06:14,930
when it was a long break it's red. So of course,

24848
00:06:14,930 --> 00:06:17,330
I'm referring to these constants over here.

24849
00:06:18,050 --> 00:06:22,580
See if you can complete this as a challenge and get that label to change

24850
00:06:22,640 --> 00:06:25,730
to display to the user, what they should be doing each time.

24851
00:06:26,390 --> 00:06:31,280
Pause the video and complete this challenge. Okay.

24852
00:06:31,310 --> 00:06:33,110
So when they're on a long break,

24853
00:06:33,140 --> 00:06:38,140
we're going to get our title label to configure it and change the text to say

24854
00:06:41,120 --> 00:06:41,953
break.

24855
00:06:42,590 --> 00:06:46,940
And we're also going to configure the foreground color at the same time

24856
00:06:47,300 --> 00:06:48,650
and we're going to make this

24857
00:06:48,680 --> 00:06:52,670
the red color. Now for the next one,

24858
00:06:52,670 --> 00:06:57,320
which is the short break, it's also going to read break, but in this case,

24859
00:06:57,380 --> 00:07:02,000
the foreground color is going to be pink. And finally,

24860
00:07:02,330 --> 00:07:03,680
when they should be working,

24861
00:07:03,740 --> 00:07:08,720
the foreground color is going to be green and the label is going to read work.

24862
00:07:09,350 --> 00:07:14,210
So now when it's during a work session, it will say work.

24863
00:07:14,630 --> 00:07:17,030
And when it switches to the break time,

24864
00:07:18,170 --> 00:07:22,340
then it's going to say break. And because this is pink,

24865
00:07:22,370 --> 00:07:26,000
this is, of course, the short break where we can also see that we've got five

24866
00:07:26,000 --> 00:07:29,180
minutes and counting. And when it gets to the long break

24867
00:07:29,300 --> 00:07:31,010
after four sessions of work,

24868
00:07:31,040 --> 00:07:35,720
then the text would be red and the countdown would show 20 minutes.

24869
00:07:36,980 --> 00:07:40,880
We're pretty much almost there. There's just a couple of loose ends to tie off.

24870
00:07:41,240 --> 00:07:46,240
One is to change this part so that we actually get a checkmark for every

24871
00:07:47,150 --> 00:07:52,150
successful work session we complete, and also to make sure that our reset button

24872
00:07:52,460 --> 00:07:56,690
works so that when we click on it, the timer stops and goes back to zero.

24873
00:07:57,470 --> 00:08:00,470
So for all of that and more, I'll see you in the next lesson.


24874
00:00:00,240 --> 00:00:05,220
Now we're at the final stretch. Our Pomodoro program is almost complete.

24875
00:00:05,520 --> 00:00:07,740
We've got this beautiful user interface,

24876
00:00:07,770 --> 00:00:11,520
we've got beautiful colors from our colorhunt.io color palette,

24877
00:00:11,970 --> 00:00:15,600
and we've got pretty much everything functioning other than just some loose

24878
00:00:15,600 --> 00:00:16,433
ends.

24879
00:00:16,560 --> 00:00:21,000
So the first thing I want to fix is the section with the check marks. So

24880
00:00:21,000 --> 00:00:22,890
we've created the checkmarks

24881
00:00:22,920 --> 00:00:27,570
which is a label that currently just contains a single checkmark.

24882
00:00:28,080 --> 00:00:33,080
Now I'm actually going to cut this checkmark and delete the text here because I

24883
00:00:33,510 --> 00:00:37,140
want that label to start out as empty. Now,

24884
00:00:37,170 --> 00:00:40,860
the only time when I want that label to get an extra check

24885
00:00:40,860 --> 00:00:45,860
mark is when the user has completed a work countdown.

24886
00:00:47,070 --> 00:00:49,980
So once they've completed their 25 minute session,

24887
00:00:50,190 --> 00:00:53,850
then they should get that checkmark. To do that

24888
00:00:53,880 --> 00:00:58,880
I'm going to write the code inside this else statement because every single time a

24889
00:00:59,520 --> 00:01:00,990
countdown completes,

24890
00:01:01,230 --> 00:01:05,610
it's going to go into this else statement because the count goes down to zero.

24891
00:01:06,240 --> 00:01:10,710
Now, currently we're just getting the timer to restart itself and go to the next

24892
00:01:10,740 --> 00:01:11,573
session.

24893
00:01:11,910 --> 00:01:16,910
But what we want to do here is we want to check to see how many reps we have, and

24894
00:01:18,450 --> 00:01:20,280
for every two reps

24895
00:01:20,340 --> 00:01:25,340
then that means we've completed one work session because it's work then rest,

24896
00:01:26,400 --> 00:01:29,820
then work, then rest. So for every two reps,

24897
00:01:29,850 --> 00:01:32,790
we've completed one 25 minute work session.

24898
00:01:33,630 --> 00:01:35,130
So here's a challenge for you.

24899
00:01:35,610 --> 00:01:40,610
So have a think about how you can use our variable reps to check so that for

24900
00:01:41,520 --> 00:01:44,040
every two reps we've completed,

24901
00:01:44,340 --> 00:01:48,930
we add a checkmark to this checkmark label.

24902
00:01:49,830 --> 00:01:52,710
Pause the video and see if you can complete this challenge,

24903
00:01:52,830 --> 00:01:55,320
then test it out and see if you managed to get it right.

24904
00:01:55,880 --> 00:01:56,713
Okay.

24905
00:01:59,450 --> 00:01:59,810
All right.

24906
00:01:59,810 --> 00:02:04,610
So we know that the reps is equal to the number of sessions we've had.

24907
00:02:04,940 --> 00:02:07,130
So for example, if we've done for reps,

24908
00:02:07,160 --> 00:02:10,490
then that means we've had two work sessions and two breaks.

24909
00:02:11,030 --> 00:02:16,030
That means we can basically divide reps by two to get the total number of work

24910
00:02:16,280 --> 00:02:17,210
sessions we've done.

24911
00:02:17,930 --> 00:02:22,930
What I can do is I can create a temporary variable called mark,

24912
00:02:23,450 --> 00:02:26,840
which is just going to be in an empty string to start off.

24913
00:02:27,800 --> 00:02:31,490
And then I can create a for loop to loop through a range.

24914
00:02:32,000 --> 00:02:36,950
And the range is going to go from zero up to our reps divided by 2.

24915
00:02:37,880 --> 00:02:42,880
Now this is giving us a warning at the moment because reps divided by 2 or

24916
00:02:42,920 --> 00:02:47,570
anything divided by anything becomes a floating type number.

24917
00:02:48,140 --> 00:02:53,140
In our case we want to do is we want to use that math.floor again so that we

24918
00:02:53,420 --> 00:02:58,370
can floor this reps divided by 2 to a whole number

24919
00:02:58,930 --> 00:03:02,230
and that way we get the correct number of work sessions.

24920
00:03:02,950 --> 00:03:05,500
If you want to make this a little bit more clear

24921
00:03:05,680 --> 00:03:07,660
the next time you read your code,

24922
00:03:07,720 --> 00:03:12,720
you can actually create a work_sessions and we can move this part of our code

24923
00:03:14,470 --> 00:03:15,303
over to here.

24924
00:03:15,850 --> 00:03:20,740
So the total number of work sessions is equal to the reps divided by 2 and

24925
00:03:20,740 --> 00:03:23,050
then rounded down to the nearest integer.

24926
00:03:23,590 --> 00:03:27,010
And then we can use that number of work sessions to create our range.

24927
00:03:27,850 --> 00:03:29,260
When we've created our range,

24928
00:03:29,290 --> 00:03:33,010
we know that this loop is going to run for that many times.

24929
00:03:33,370 --> 00:03:38,370
So we can add to our mark. For every single time the loop runs,

24930
00:03:38,890 --> 00:03:41,680
I'm going to paste in a checkmark.

24931
00:03:42,220 --> 00:03:45,580
You should have that checkmark that you had from a previously,

24932
00:03:45,790 --> 00:03:49,150
and you can paste it into here. Now,

24933
00:03:49,150 --> 00:03:54,100
once we've completed that loop, then all we need to do is the update

24934
00:03:54,160 --> 00:03:59,160
our checkmarks label by calling config and then changing the text to equal our

24935
00:04:00,580 --> 00:04:02,710
mark. Now, in this case,

24936
00:04:02,710 --> 00:04:05,740
it probably makes sense for that to actually be plural.

24937
00:04:06,040 --> 00:04:08,350
So I'm gonna use my refactor -> rename

24938
00:04:08,440 --> 00:04:12,130
to just add an 's' to everywhere I'm using this.

24939
00:04:13,540 --> 00:04:17,709
Now let's test it out. When I hit start,

24940
00:04:17,769 --> 00:04:22,660
it should start counting down. And once that work session completes,

24941
00:04:22,990 --> 00:04:27,580
then you'll see the timer go to zero and our first checkmark show up.

24942
00:04:28,510 --> 00:04:32,800
And for every work session we complete, we get an extra checkmark

24943
00:04:33,010 --> 00:04:36,220
just to nudge us towards working a little bit harder.

24944
00:04:37,390 --> 00:04:42,370
The final thing that I want to address is our reset mechanism.

24945
00:04:42,910 --> 00:04:45,220
So we have this lovely reset button,

24946
00:04:45,250 --> 00:04:47,410
but it's not really doing anything at the moment.

24947
00:04:48,070 --> 00:04:51,640
What I'm going to do is create a new function here

24948
00:04:51,670 --> 00:04:53,860
which I'll call reset_timer.

24949
00:04:54,760 --> 00:04:59,760
And what this reset_timer is going to do is basically it's going to reset all

24950
00:04:59,770 --> 00:05:04,330
the checkmarks, reset the text inside the timer,

24951
00:05:04,600 --> 00:05:09,600
stop the timer and change this title back to the text that it originally had,

24952
00:05:10,630 --> 00:05:14,350
which is just the word timer. Now,

24953
00:05:14,470 --> 00:05:19,450
the hardest part about this is actually stopping the timer because what we have

24954
00:05:19,450 --> 00:05:23,740
to do is we actually need to tap into that window.after again.

24955
00:05:24,280 --> 00:05:26,080
But instead of calling after,

24956
00:05:26,140 --> 00:05:30,130
we actually want to call after_cancel. This way

24957
00:05:30,160 --> 00:05:34,510
we can actually cancel the timer that we had set up previously.

24958
00:05:35,920 --> 00:05:40,750
This is the thing that we want to cancel. And if we want to cancel it,

24959
00:05:40,870 --> 00:05:44,140
we have to give it a name and we have to put it inside a variable.

24960
00:05:44,920 --> 00:05:46,990
So I'm going to call this my timer.

24961
00:05:47,620 --> 00:05:52,620
But because this is going to be a local variable because it's created inside

24962
00:05:52,990 --> 00:05:56,500
this particular function, I actually have to bring it out.

24963
00:05:56,530 --> 00:06:01,370
I have to make it a global variable, so after create it up here,

24964
00:06:01,730 --> 00:06:04,910
but what value do I give it? Well, initially,

24965
00:06:04,970 --> 00:06:07,280
it's actually not going to have any value at all.

24966
00:06:07,550 --> 00:06:11,480
So it's going to start out as none. And then later on,

24967
00:06:11,540 --> 00:06:16,540
I'm going to tap into that global timer in order to get it to hold on to this.

24968
00:06:19,220 --> 00:06:23,840
Now, then once I want to reset my timer and cancel it, well

24969
00:06:23,840 --> 00:06:28,840
then I can actually tap into this global timer and stop the timer.

24970
00:06:29,900 --> 00:06:34,340
So now to actually activate this function, reset_timer,

24971
00:06:34,700 --> 00:06:38,360
we have to add it as a command to our reset button.

24972
00:06:38,900 --> 00:06:42,230
So where we create our button, I'm gonna add it as a command.

24973
00:06:42,680 --> 00:06:45,080
And remember, we have to get rid of the parentheses.

24974
00:06:45,680 --> 00:06:49,490
So now if I run my program and I start my timer,

24975
00:06:49,820 --> 00:06:53,240
you can see that as soon as I click this reset button,

24976
00:06:53,570 --> 00:06:57,230
it stops my timer and it doesn't continue.

24977
00:06:57,950 --> 00:07:00,590
So now all we have to do is the add

24978
00:07:00,590 --> 00:07:05,180
all of the things that we have to reset, for example, the text in here,

24979
00:07:05,420 --> 00:07:07,850
we want that to read 00.

24980
00:07:09,140 --> 00:07:11,390
So that was the timer_text from our canvas.

24981
00:07:11,780 --> 00:07:15,170
And then the other thing we want to do is the title label.

24982
00:07:15,350 --> 00:07:18,350
We want to set that to just read timer.

24983
00:07:20,270 --> 00:07:21,320
And finally,

24984
00:07:21,380 --> 00:07:26,380
we want to reset our check marks so that once you hit the reset button,

24985
00:07:26,810 --> 00:07:28,850
it resets this title label,

24986
00:07:29,120 --> 00:07:34,120
the timer text here stops the timer and gets rid of all the checkmarks, like

24987
00:07:35,360 --> 00:07:39,080
this. Pause the video and give that a go.

24988
00:07:42,290 --> 00:07:45,860
Alright. So the first thing we want to change is our timer text.

24989
00:07:46,250 --> 00:07:48,860
And because the timer text is created in the canvas,

24990
00:07:48,890 --> 00:07:50,990
we have a slightly different way of changing that.

24991
00:07:51,440 --> 00:07:53,900
So we call canvas.itemconfig,

24992
00:07:54,200 --> 00:07:57,830
and then pass in the thing that we want to change, which is the timer text.

24993
00:07:58,220 --> 00:08:02,000
And then the attribute that we want to change, which is it's text.

24994
00:08:02,390 --> 00:08:06,590
And then we change that to just say 00:00,

24995
00:08:07,100 --> 00:08:11,300
go back to the beginning. Now the title label is a lot easier to change.

24996
00:08:11,360 --> 00:08:13,700
We can say title_label.config,

24997
00:08:14,030 --> 00:08:18,140
and then we can configure its text to basically just read timer.

24998
00:08:18,860 --> 00:08:21,350
Finally, we're going to reset our checkmarks.

24999
00:08:21,410 --> 00:08:24,560
So we tap into our checkmarks' label again,

25000
00:08:24,560 --> 00:08:28,880
using config to change the text back to empty.

25001
00:08:30,500 --> 00:08:33,140
However, there's still a slight problem with our code.

25002
00:08:33,440 --> 00:08:36,010
What happens if while our timer is counting down

25003
00:08:36,020 --> 00:08:39,320
I hit the reset button and then hit the start button again?

25004
00:08:40,580 --> 00:08:46,790
Did you spot that? Our timer jumped from "Work" to "Break" because our reps are still increasing.

25005
00:08:47,690 --> 00:08:51,710
So far we haven't reset the number of reps to zero when we reset the timer.

25006
00:08:51,830 --> 00:08:56,120
So all we need to do to fix this bug is add: global reps

25007
00:08:56,390 --> 00:08:59,450
reps = 0  to the reset time function.

25008
00:09:00,500 --> 00:09:09,380
That's all there is to it! Now if we reset our WORK_MIN to 25, SHORT_BREAK 5, LONG_BREAK 20 or whatever

25009
00:09:09,380 --> 00:09:16,520
it is that you want it to be. Then once we hit run, we will end up with our final Pomodoro timer.

25010
00:09:16,970 --> 00:09:24,200
And it will be now ready for you to start practicing doing Pomodoros and improving your work and your

25011
00:09:24,200 --> 00:09:25,030
productivity.

25012
00:09:25,700 --> 00:09:32,780
So I hope you enjoyed making this fully functional tkinter application with me and that I hope you

25013
00:09:32,780 --> 00:09:39,710
will modify this, customize it, make it truly your own and be able to show off to us what it is that

25014
00:09:39,710 --> 00:09:46,130
you have done. Because this really is a useful application that you can use or you can get your friends

25015
00:09:46,130 --> 00:09:49,430
and your family to start using and show off your hard work.



25016
00:00:00,480 --> 00:00:05,460
Hey guys, welcome to 100 Days of Code. And today we are on day 29,

25017
00:00:05,760 --> 00:00:08,760
where we're going to be building a password manager.

25018
00:00:09,270 --> 00:00:11,610
So we're going to be doing this using tkinter.

25019
00:00:11,880 --> 00:00:16,620
And the real inspiration for this project came about because I was trying to

25020
00:00:16,650 --> 00:00:16,880
register

25021
00:00:16,880 --> 00:00:21,880
for a website where it asked for a password that was just insanely

25022
00:00:22,460 --> 00:00:27,020
complicated, something along these lines, or it has to be really long.

25023
00:00:27,020 --> 00:00:29,510
It has to include lots of different things,

25024
00:00:29,840 --> 00:00:34,130
it can't match your previous passwords. It just has a whole bunch of rules

25025
00:00:34,610 --> 00:00:39,610
and I really struggled coming up with a password that actually match all of their

25026
00:00:39,680 --> 00:00:42,110
requirements. And by the time that I came up with it,

25027
00:00:42,410 --> 00:00:44,420
I've already forgotten what the password was.

25028
00:00:45,080 --> 00:00:49,070
One of my favorite blogs is Coding Horror by a guy called Jeff Atwood.

25029
00:00:49,250 --> 00:00:52,100
And you might not know him by name,

25030
00:00:52,130 --> 00:00:55,520
but you will actually have used something that he's made.

25031
00:00:55,730 --> 00:00:58,130
He is one of the founders and original creators

25032
00:00:58,130 --> 00:01:00,350
Stack Overflow

25033
00:01:00,380 --> 00:01:03,230
which I'm sure by now you're well familiar with.

25034
00:01:03,650 --> 00:01:08,650
And even he was talking about how password rules are just really terrible.

25035
00:01:09,290 --> 00:01:13,730
They're so long and they're so complicated and they've even inspired

25036
00:01:13,760 --> 00:01:16,400
a really good XKCD comic,

25037
00:01:16,820 --> 00:01:20,270
which essentially tells the truth that through 20 years of effort,

25038
00:01:20,270 --> 00:01:23,570
we've successfully trained everyone to use passwords that are hard for humans to

25039
00:01:23,570 --> 00:01:27,380
remember but easy for computers to guess. This is the crazy state of things.

25040
00:01:28,340 --> 00:01:31,640
So we're going to be creating a program to combat that.

25041
00:01:31,880 --> 00:01:35,690
And it's going to be called MyPass, our password manager,

25042
00:01:36,230 --> 00:01:40,220
and we're going to use it to store and generate passwords.

25043
00:01:40,700 --> 00:01:43,820
For example, if I wanted to create an account on App Brewery,

25044
00:01:44,300 --> 00:01:48,770
then I enter the name of the website so that I know what this password is for,

25045
00:01:49,130 --> 00:01:53,990
I put in my email, and username is already prepopulated in my password

25046
00:01:53,990 --> 00:01:58,670
manager. And then all I have to do is to either come up with a password

25047
00:01:58,700 --> 00:02:03,500
that is hopefully not terrible, but I can obviously never remember,

25048
00:02:03,830 --> 00:02:08,830
or I can use the builtin generate password to just generate me a very complex,

25049
00:02:09,530 --> 00:02:14,530
very long password with all of the required numbers and symbols and all of that.

25050
00:02:15,200 --> 00:02:18,170
And once I'm done with that, then I can click add,

25051
00:02:18,620 --> 00:02:21,830
and I get a popup asking me if this is okay.

25052
00:02:22,490 --> 00:02:24,980
And if that all looks good, then I click Yes

25053
00:02:25,190 --> 00:02:28,610
and that data gets added to a text file,

25054
00:02:28,640 --> 00:02:30,530
which I have on my computer.

25055
00:02:30,980 --> 00:02:35,750
So this is not an internet-based service and you keep everything locally on your

25056
00:02:35,750 --> 00:02:36,583
computer,

25057
00:02:36,770 --> 00:02:41,180
which some people feel is a lot safer than using a third-party service

25058
00:02:41,180 --> 00:02:43,400
like LastPass or whatever else.

25059
00:02:44,420 --> 00:02:48,350
So this is what we're trying to build and it's got some really neat features.

25060
00:02:48,680 --> 00:02:52,280
For example, it's got some basic validations. So if you, for example,

25061
00:02:52,280 --> 00:02:56,690
leave one of the fields empty and you click add, you get a popup that tells you,

25062
00:02:56,720 --> 00:03:01,030
please don't leave any of the fields empty. Or if you generate a password,

25063
00:03:01,210 --> 00:03:06,210
then you can actually immediately use it by pasting it. What's happening behind

25064
00:03:06,250 --> 00:03:09,130
the scenes is as soon as I click on generate password,

25065
00:03:09,460 --> 00:03:14,440
then my password is saved onto my clipboard and I can paste it into the password

25066
00:03:14,440 --> 00:03:16,810
field on the website I'm trying to sign up for.

25067
00:03:18,340 --> 00:03:20,320
This is what we're going to be building today.

25068
00:03:20,410 --> 00:03:23,410
And it's going to use everything you've learned about tkinter

25069
00:03:23,830 --> 00:03:26,680
and we're going to be learning some new things that you can do with 

25070
00:03:26,680 --> 00:03:28,930
tkinter as well. Once you're ready,

25071
00:03:29,020 --> 00:03:31,600
head over to the next lesson and let's get started.


25072
00:00:00,570 --> 00:00:02,370
To begin, as always, head over

25073
00:00:02,370 --> 00:00:07,050
to the course resources and download the starting project as a zip file.

25074
00:00:07,770 --> 00:00:10,470
Now, once you've unzipped it, open it using PyCharm

25075
00:00:11,820 --> 00:00:15,360
and go ahead and take a look inside the starting files.

25076
00:00:16,079 --> 00:00:18,300
I've included a logo image

25077
00:00:18,360 --> 00:00:21,450
which is going to be used in our project.

25078
00:00:21,930 --> 00:00:25,890
And I've got also a very, very blank looking at main.py.

25079
00:00:26,580 --> 00:00:30,810
Now here comes a challenge already. To start out,

25080
00:00:30,810 --> 00:00:35,790
we're going to create a window using tkinter that has a title of Password

25081
00:00:35,790 --> 00:00:36,623
Manager.

25082
00:00:36,960 --> 00:00:41,960
And the only thing that it's going to have is just a canvas widget displaying

25083
00:00:43,110 --> 00:00:44,430
that logo image.

25084
00:00:44,790 --> 00:00:48,210
So the canvas is going to have a width and height of 200 pixels,

25085
00:00:48,690 --> 00:00:53,690
and the canvas is going to be padded from the edge of the window by 20 pixels on

25086
00:00:54,420 --> 00:00:55,440
all four sides

25087
00:00:55,620 --> 00:01:00,570
so that way it could look quite centered like this. And this image finally is

25088
00:01:00,570 --> 00:01:03,300
going to be bang in the center of the canvas.

25089
00:01:04,769 --> 00:01:08,580
So I want you to think back to what you learned yesterday about the canvas

25090
00:01:08,580 --> 00:01:10,890
widget and in the course resources,

25091
00:01:10,920 --> 00:01:14,730
I've linked to this page on the canvas documentation

25092
00:01:15,090 --> 00:01:18,300
including that all important create_image method.

25093
00:01:18,690 --> 00:01:21,840
Have a look through this for what the expected inputs are

25094
00:01:22,110 --> 00:01:26,340
and you can also scroll up to see more of the references on other things that

25095
00:01:26,340 --> 00:01:27,660
you can do with the canvas.

25096
00:01:28,110 --> 00:01:31,110
Or just have a quick look through yesterday's code if you need to.

25097
00:01:31,620 --> 00:01:36,620
But I want you to be able to create a tkinter program using all the things

25098
00:01:36,870 --> 00:01:38,730
that you've learned and when you run it,

25099
00:01:38,730 --> 00:01:42,180
it should look pretty much the same as this. Pause

25100
00:01:42,180 --> 00:01:44,100
the video and complete this challenge,

25101
00:01:44,960 --> 00:01:45,793
Okay.

25102
00:01:47,420 --> 00:01:50,360
So to begin, we're going to go to the very top of our file,

25103
00:01:50,480 --> 00:01:54,080
and I'm going to import all of the classes inside tkinter

25104
00:01:54,590 --> 00:01:58,100
and I'm going to use that to do my UI setup. As always,

25105
00:01:58,100 --> 00:02:00,020
I start out creating a window

25106
00:02:02,000 --> 00:02:03,350
and then give it a title.

25107
00:02:04,790 --> 00:02:08,780
And then I'm going to get my window to start out with my main loop.

25108
00:02:09,350 --> 00:02:11,990
Now in between, I'm going to create my canvas.

25109
00:02:14,030 --> 00:02:18,440
And this is from the canvas widget. Now this canvas widget, as I mentioned,

25110
00:02:18,440 --> 00:02:23,440
is going to have a height of 200 and a width of 200.

25111
00:02:25,160 --> 00:02:26,120
And in addition,

25112
00:02:26,120 --> 00:02:31,120
it's going to display this logo.png inside as the image.

25113
00:02:31,640 --> 00:02:35,060
So I'm going to create our logo image from the photo image class,

25114
00:02:35,330 --> 00:02:38,000
and then I have to provide the filename.

25115
00:02:38,330 --> 00:02:42,740
So the filename is just simply logo.png in this case

25116
00:02:42,770 --> 00:02:47,720
because they're both inside the same folder. So once I've created my image,

25117
00:02:47,750 --> 00:02:52,730
I can tell my canvas to create a image inside the canvas

25118
00:02:53,150 --> 00:02:56,030
and then I can specify the image name

25119
00:02:56,480 --> 00:03:00,550
and that is of course going to be my logo image. Now,

25120
00:03:00,580 --> 00:03:04,240
the other thing that I have to do before I can actually run my code,

25121
00:03:04,720 --> 00:03:08,770
because at the moment it's actually going to give me an error and the error

25122
00:03:08,770 --> 00:03:10,720
says tuple index out of range.

25123
00:03:10,780 --> 00:03:14,650
It's basically expecting some sort of a tuple to work on

25124
00:03:14,680 --> 00:03:19,680
and that tuple is the define what the X and Y position is of this image on

25125
00:03:20,110 --> 00:03:24,430
the canvas. So we do that by simply just adding the raw numbers.

25126
00:03:24,550 --> 00:03:28,570
So the X position of the center of the image is going to be 100,

25127
00:03:28,900 --> 00:03:32,980
because remember that the width is 200 so half of that is 100.

25128
00:03:33,340 --> 00:03:37,510
And similarly for the Y position, it's also going to be 100.

25129
00:03:38,020 --> 00:03:40,750
So this way we've got the X and Y position to find,

25130
00:03:40,960 --> 00:03:43,840
and we've created the canvas size. Now,

25131
00:03:43,840 --> 00:03:48,730
all we need to do is to get our canvas to have some sort of layout dimension.

25132
00:03:49,210 --> 00:03:53,740
I'm just going to start out by packing my canvas onto the screen because later

25133
00:03:53,740 --> 00:03:57,760
on, once we have more components, then we can think about using more fancy things

25134
00:03:57,760 --> 00:04:01,330
like the grid. Now, if I run this as it is,

25135
00:04:01,480 --> 00:04:06,480
then you can see that I've created my password manager window and I've created

25136
00:04:07,930 --> 00:04:09,940
my 200 by 200 canvas.

25137
00:04:10,330 --> 00:04:15,040
The only requirement I haven't yet satisfied is adding some padding between the

25138
00:04:15,040 --> 00:04:16,540
window and that canvas.

25139
00:04:16,750 --> 00:04:20,290
So let's do that using our window.config,

25140
00:04:20,769 --> 00:04:24,820
and I'm going to set the padding using the padx and pady.

25141
00:04:25,270 --> 00:04:26,380
And as we mentioned,

25142
00:04:26,440 --> 00:04:30,550
I'm going to set that to 20 on the X and 20 on the Y.

25143
00:04:31,420 --> 00:04:36,420
So now we get pretty much exactly the image that you saw in the demonstration,

25144
00:04:37,030 --> 00:04:39,610
and this is the end result we were looking for.

25145
00:04:40,390 --> 00:04:42,910
Did you manage to complete this challenge?

25146
00:04:43,360 --> 00:04:46,900
If not, be sure to review some of the lessons that we learned yesterday

25147
00:04:47,110 --> 00:04:49,990
where we went through the canvas widget in great detail.

25148
00:04:50,920 --> 00:04:54,580
But if you're happy with all of this code, then in the next lesson,

25149
00:04:54,760 --> 00:04:58,540
we're going to be learning more about the grid system and how to lay out a

25150
00:04:58,540 --> 00:05:02,830
complex user interface like this one. So for all of that and more,

25151
00:05:02,980 --> 00:05:03,520
I'll see you there.


25152
00:00:00,720 --> 00:00:05,720
To go from this to this will require not only some widgets to be added,

25153
00:00:06,570 --> 00:00:11,250
but a little bit more knowledge about how to lay out our widgets on the grid.

25154
00:00:11,760 --> 00:00:16,760
Because notice how here we've got a single entry that is spread across the right

25155
00:00:18,330 --> 00:00:20,580
side of the screen. But then down here,

25156
00:00:20,610 --> 00:00:25,470
we've got an entry that's only taking up a part of that space. Effectively

25157
00:00:25,470 --> 00:00:27,060
if we think about our grid,

25158
00:00:27,270 --> 00:00:30,930
this particular entry is actually taking up two columns.

25159
00:00:31,440 --> 00:00:36,440
So, how can we do this? To demonstrate this I've created a sandbox app.

25160
00:00:37,380 --> 00:00:38,700
So it's super simple,

25161
00:00:38,730 --> 00:00:42,720
all it has is a red label and a green label.

25162
00:00:43,200 --> 00:00:46,320
And you can see that the red label has a width of 20,

25163
00:00:46,320 --> 00:00:48,480
a height of 5 as does the green,

25164
00:00:48,750 --> 00:00:51,420
but the red is on row 0 column 0 

25165
00:00:51,870 --> 00:00:54,570
whereas the green is on row 1 column 1.

25166
00:00:54,720 --> 00:00:57,240
So we get this kind of checkered kind of look.

25167
00:00:57,870 --> 00:01:00,870
If I decide to go and add another label,

25168
00:01:00,960 --> 00:01:05,580
let's call it b for blue and I give it a background of blue.

25169
00:01:06,150 --> 00:01:10,020
And then I give it the same width and height. Now,

25170
00:01:10,020 --> 00:01:15,020
if I put this new label onto the grid and I put it onto the next row,

25171
00:01:16,260 --> 00:01:21,210
so row 2, but the column I'm going to put it on column 0. Now,

25172
00:01:21,390 --> 00:01:25,590
I think at this point you can probably all predict where that label is going to

25173
00:01:25,590 --> 00:01:26,370
go.

25174
00:01:26,370 --> 00:01:31,370
And indeed it goes onto the very first left-most column and its on the third

25175
00:01:31,800 --> 00:01:32,633
row.

25176
00:01:32,820 --> 00:01:37,820
Now what if I wanted that blue label to go across the entire width so that it's

25177
00:01:39,630 --> 00:01:43,080
below the red and also below the green? Well,

25178
00:01:43,080 --> 00:01:46,710
you might think that I could simply just double the width, right?

25179
00:01:46,830 --> 00:01:48,210
Instead of a width of 20,

25180
00:01:48,210 --> 00:01:52,830
let's change it to 40. Surely that's going to stretch this label so that it goes

25181
00:01:52,830 --> 00:01:55,590
across the entire red and green label.

25182
00:01:56,220 --> 00:02:00,480
But unfortunately when I run this, you'll see instead, this happens.

25183
00:02:01,140 --> 00:02:04,470
The blue label is still within the first column.

25184
00:02:04,890 --> 00:02:09,889
And in fact it stretched that column to a 40 width and that red column is now

25185
00:02:10,530 --> 00:02:13,950
centered again in the leftmost or the first column.

25186
00:02:14,550 --> 00:02:19,170
And that blue is nowhere near the green label because it's not allowed to go

25187
00:02:19,170 --> 00:02:23,670
into that second column. So how can we solve this situation?

25188
00:02:24,540 --> 00:02:26,670
Well, the actual answer is 

25189
00:02:26,670 --> 00:02:29,640
another attribute that the grid has,

25190
00:02:29,940 --> 00:02:33,000
which is something called a column span.

25191
00:02:33,660 --> 00:02:36,870
Now the column span is exactly what it sounds like

25192
00:02:36,870 --> 00:02:41,870
really. It's basically how many columns is this particular thing going to span?

25193
00:02:43,170 --> 00:02:46,710
So in our case, we want it to go across two columns,

25194
00:02:46,980 --> 00:02:49,230
column 0 and column 1.

25195
00:02:49,620 --> 00:02:52,230
So it should start out at column 0

25196
00:02:52,290 --> 00:02:57,270
but then span a whole two columns. And now when I run this code,

25197
00:02:57,540 --> 00:02:59,250
you can see we get our desired effect.

25198
00:03:00,040 --> 00:03:05,040
The blue label is now across the red and the green and it's spanning two

25199
00:03:05,680 --> 00:03:06,513
columns.

25200
00:03:07,270 --> 00:03:11,380
The link to this playground is in the course resources,

25201
00:03:11,410 --> 00:03:13,780
so feel free to head over there and give it a go

25202
00:03:13,780 --> 00:03:18,160
if you want to play around with this example. Now in our case,

25203
00:03:18,190 --> 00:03:20,920
if we break down the final layout we're looking for,

25204
00:03:21,280 --> 00:03:25,540
it's effectively a 3-column and 5-row layout.

25205
00:03:25,960 --> 00:03:27,790
So we've already got our canvas

25206
00:03:27,880 --> 00:03:32,590
which is actually going to go in the middle, so it probably the second column.

25207
00:03:33,010 --> 00:03:37,000
And then we've got the website, the email/username, the password,

25208
00:03:37,270 --> 00:03:38,950
and finally our two buttons.

25209
00:03:39,580 --> 00:03:44,580
Now I've laid out this entire user interface and I've specified the width of

25210
00:03:45,970 --> 00:03:50,140
some of these entries and buttons just because you'll need to do a bit of

25211
00:03:50,140 --> 00:03:54,010
tweaking around just to make sure that everything lines up with each other.

25212
00:03:54,490 --> 00:03:56,020
I've really done that ahead of time

25213
00:03:56,170 --> 00:03:59,440
and I've already worked out the sort of near-optimal width.

25214
00:04:00,070 --> 00:04:04,900
So what I want you to do is to use what we've learned about the grid column

25215
00:04:04,900 --> 00:04:09,430
span. So if we have our label, a button, new button and entry,

25216
00:04:09,700 --> 00:04:13,420
if I want this particular button to go across two columns,

25217
00:04:13,840 --> 00:04:16,300
then I have to change that columnspan

25218
00:04:16,329 --> 00:04:21,329
attribute to 2 and I have to specify which column it starts out in and how

25219
00:04:21,820 --> 00:04:26,820
many columns it's going to go across. Using everything you've learned so far

25220
00:04:27,550 --> 00:04:30,490
I want you to recreate this user interface.

25221
00:04:31,030 --> 00:04:36,010
Have a look at what's on-screen; these are labels, these are entries

25222
00:04:36,310 --> 00:04:41,310
and these two are buttons. Have a look at where they lie within the grid system and

25223
00:04:41,440 --> 00:04:45,790
how many columns they go across and also the width of some of these widgets

25224
00:04:46,120 --> 00:04:50,470
and see if you can recreate this user interface in your project.

25225
00:04:50,680 --> 00:04:52,690
So pause the video and give that a go.


25226
00:00:00,180 --> 00:00:03,270
Did you have a go at the challenge? Here's what we currently have,

25227
00:00:03,600 --> 00:00:06,720
and this is what you should have created upon completing the challenge.

25228
00:00:07,320 --> 00:00:11,220
If you haven't had a go at attempting to recreate this user interface,

25229
00:00:11,550 --> 00:00:16,530
pause the video now because I'm about to walk you through the solution. Again,

25230
00:00:16,530 --> 00:00:18,960
we're going to be within the UI setup section,

25231
00:00:19,350 --> 00:00:23,490
and I'm going to write my code below where I've got my canvas. Now,

25232
00:00:23,490 --> 00:00:24,870
the first thing I'm going to create

25233
00:00:25,020 --> 00:00:29,490
are actually all of these labels because they're relatively simple to layout

25234
00:00:29,970 --> 00:00:31,680
and they'll be a quick and easy job.

25235
00:00:37,700 --> 00:00:38,270
Okay.

25236
00:00:38,270 --> 00:00:38,570
Now

25237
00:00:38,570 --> 00:00:43,490
I've created three labels and it's time to actually put them onto the screen. Now,

25238
00:00:43,520 --> 00:00:47,510
because I'm going to be using grids I can't use pack in addition.

25239
00:00:47,780 --> 00:00:50,540
So I also have to put my canvas onto the grid.

25240
00:00:51,050 --> 00:00:54,620
The canvas is going to go onto the grid in row 0,

25241
00:00:54,710 --> 00:00:56,930
the first row at the very top.

25242
00:00:57,380 --> 00:01:00,560
And in terms of column it's actually going to be column 1,

25243
00:01:01,130 --> 00:01:04,970
the middle column. And then going down the list,

25244
00:01:05,000 --> 00:01:09,680
my website label and my email label and my password label,

25245
00:01:09,890 --> 00:01:12,380
they're all going to be on subsequent rows.

25246
00:01:12,410 --> 00:01:15,950
So row 1 and then row 2

25247
00:01:18,290 --> 00:01:19,490
and row 3.

25248
00:01:21,530 --> 00:01:24,350
And they're all going to be in the same column,

25249
00:01:24,350 --> 00:01:28,070
which is going to be column 0, the very first column.

25250
00:01:29,870 --> 00:01:33,830
Now, if I run this code and we take a look,

25251
00:01:34,100 --> 00:01:38,960
you can see that it looks a little bit weird just because this canvas is in

25252
00:01:38,960 --> 00:01:43,310
column 1 while these labels are in column 0. But that's fine.

25253
00:01:43,370 --> 00:01:46,070
It's gonna even out once we add the other components.

25254
00:01:46,880 --> 00:01:50,270
That's all the labels done. The next thing are the entries.

25255
00:01:52,250 --> 00:01:56,870
Now, as I showed you in the slide, these entries will have different widths.

25256
00:01:57,200 --> 00:01:59,000
So the website entry,

25257
00:01:59,000 --> 00:02:03,860
this one here, and the email entry are both going to have a width of 35.

25258
00:02:04,250 --> 00:02:07,610
While the password entry is only going to have a width of 21.

25259
00:02:08,990 --> 00:02:13,990
Now remember that the width is a property of the entry class.

25260
00:02:14,600 --> 00:02:17,030
It's not something that's related to the grid.

25261
00:02:17,360 --> 00:02:21,950
So if inside this grid method, you add something like width,

25262
00:02:22,550 --> 00:02:25,160
then this is not going to work and it's going to give you an error.

25263
00:02:25,280 --> 00:02:28,040
So that's a common source of error for students so be aware.

25264
00:02:28,850 --> 00:02:33,500
Once we've created our entries, it's time to lay them out using our grid.

25265
00:02:34,130 --> 00:02:39,130
Now, the first website entry is going to go into the same row as the website

25266
00:02:39,530 --> 00:02:44,390
label, so that row 1, but the column is going to be column 1

25267
00:02:44,390 --> 00:02:45,980
so it's the next one over.

25268
00:02:46,130 --> 00:02:46,963
Okay.

25269
00:02:51,800 --> 00:02:55,250
And the email entry is going to be in exactly the same column,

25270
00:02:55,310 --> 00:02:57,200
but just shifted one row down.

25271
00:02:59,710 --> 00:03:00,310
And finally

25272
00:03:00,310 --> 00:03:04,030
the password entry is going to be on the next row, so row 3,

25273
00:03:04,420 --> 00:03:08,380
and it's going to be in column 1  as well. Right now,

25274
00:03:08,410 --> 00:03:09,760
this is what it looks like.

25275
00:03:09,820 --> 00:03:12,580
And you can see that this doesn't look terribly bad

25276
00:03:12,670 --> 00:03:14,890
other than maybe I need to change this to

25277
00:03:14,890 --> 00:03:19,890
a capital P and I could probably add a colon to the end of each of these lines,

25278
00:03:24,640 --> 00:03:29,290
like this. Now the final step to do is to add the two buttons.

25279
00:03:29,500 --> 00:03:33,550
So one button has to go over here to the right of the password field

25280
00:03:33,880 --> 00:03:35,410
and one has to go at the bottom.

25281
00:03:42,450 --> 00:03:43,283
Okay.

25282
00:03:43,350 --> 00:03:47,580
Now, this generate password button is going to be on the grid

25283
00:03:47,850 --> 00:03:50,640
but it's going to be in the third column.

25284
00:03:51,870 --> 00:03:55,440
And in terms of row, it's going to be on the same row as the password,

25285
00:03:55,470 --> 00:03:56,610
which is row 3.

25286
00:03:57,330 --> 00:03:58,163
Okay.

25287
00:04:01,620 --> 00:04:04,890
While the add button is simply going to be in the last row,

25288
00:04:05,130 --> 00:04:05,963
right?

25289
00:04:07,950 --> 00:04:12,450
And this should be a button rather than a radio button.

25290
00:04:13,710 --> 00:04:15,690
So this is what we have so far.

25291
00:04:16,290 --> 00:04:20,970
This is clearly not what we wanted to have, which looks more like this.

25292
00:04:21,060 --> 00:04:22,500
And if I put it side by side,

25293
00:04:22,830 --> 00:04:27,810
you can see that the add button is far too small. Referring back to this,

25294
00:04:27,930 --> 00:04:32,090
we need to set the width to 36. So let's go ahead and add that.

25295
00:04:32,160 --> 00:04:32,993
Okay.

25296
00:04:35,490 --> 00:04:39,360
Now, that makes the button a lot wider, but it still doesn't solve

25297
00:04:39,360 --> 00:04:44,160
the fact that this generate password is actually in a completely different

25298
00:04:44,160 --> 00:04:49,160
column while we actually ideally want that button to cover the entire password

25299
00:04:51,720 --> 00:04:54,450
entry and also the generate password.

25300
00:04:54,750 --> 00:04:58,440
So we need this button basically to have a column span of 2

25301
00:04:58,680 --> 00:05:01,920
so that it spans both of these columns. And in fact,

25302
00:05:01,950 --> 00:05:05,580
so does the website entry and the email/username entry.

25303
00:05:06,270 --> 00:05:07,260
So let's fix that.

25304
00:05:08,340 --> 00:05:13,340
The website entry grid is going to have a additional keyword argument

25305
00:05:14,160 --> 00:05:17,640
which is the column span, and this is going to be set to 2.

25306
00:05:18,240 --> 00:05:22,470
And we're gonna add that to the email entry when it's on the grid as well,

25307
00:05:22,920 --> 00:05:24,720
and finally the add button.

25308
00:05:25,770 --> 00:05:29,070
So now you can see that we're getting pretty close, right?

25309
00:05:29,580 --> 00:05:31,410
Once we put in those columnspans,

25310
00:05:31,470 --> 00:05:35,280
you can see our layout has dramatically changed and everything

25311
00:05:35,280 --> 00:05:37,560
now looks a lot more aligned.

25312
00:05:38,190 --> 00:05:43,190
Now the alignment is not perfect because the generate password button is

25313
00:05:43,230 --> 00:05:46,080
actually just allowed to be the size that it needs to be.

25314
00:05:46,620 --> 00:05:50,700
And I've tinkered around with some of the widths and you can, of course,

25315
00:05:50,760 --> 00:05:55,620
try out your own widths and nudge it around a bit to see if you can change it.

25316
00:05:56,640 --> 00:05:59,750
But I think in terms of overall look, this is not bad.

25317
00:06:00,410 --> 00:06:05,360
The only thing I would add is maybe our padding of 20 around the side of the

25318
00:06:05,360 --> 00:06:09,290
window is actually not enough. Maybe we need to increase it a little bit.

25319
00:06:09,680 --> 00:06:10,520
If you want to,

25320
00:06:10,550 --> 00:06:15,010
you can actually change the padding to 50 so that you get a little bit more

25321
00:06:15,010 --> 00:06:18,490
white space and it looks a little bit less busy.

25322
00:06:19,270 --> 00:06:22,360
So this is the final design that we're trying to get to.

25323
00:06:22,810 --> 00:06:26,080
And now that we've set up all of our UI,

25324
00:06:26,410 --> 00:06:29,260
all that's left to do is to add the functionality.

25325
00:06:30,160 --> 00:06:32,590
And that is what we're going to do in coming lessons.

25326
00:06:32,920 --> 00:06:35,770
So for all of that and more, I'll see you in the next lesson.


25327
00:00:00,390 --> 00:00:04,320
Now that the UI is all set up, it's time to go onto the next step

25328
00:00:04,590 --> 00:00:09,030
where we actually can start saving some of this data that the user is entering.

25329
00:00:09,810 --> 00:00:12,870
So that there's a couple of things I want to show you before we get started.

25330
00:00:13,380 --> 00:00:16,920
Firstly, notice how when we run our code at the moment,

25331
00:00:17,280 --> 00:00:18,900
it just launches our app.

25332
00:00:19,050 --> 00:00:24,000
But wouldn't it be nice if the cursor was already within the first textbox? That

25333
00:00:24,000 --> 00:00:27,600
means the user can start typing straight away when they launched the password

25334
00:00:27,600 --> 00:00:32,189
manager. To do that, you can of course dig through the docs,

25335
00:00:32,250 --> 00:00:37,250
but the easiest way is to get hold of that website entry and then call a method

25336
00:00:38,190 --> 00:00:39,750
on it called a focus.

25337
00:00:40,170 --> 00:00:43,950
And this will focus the cursor into that particular entry.

25338
00:00:44,220 --> 00:00:45,540
And you can see that right there.

25339
00:00:46,500 --> 00:00:50,370
Now the next thing that would be nice is when you're signing up for lots of

25340
00:00:50,370 --> 00:00:52,530
websites, at least in my case,

25341
00:00:52,890 --> 00:00:55,860
I often use just one email to sign up.

25342
00:00:56,160 --> 00:01:01,160
So wouldn't it be nice if when we launch our password manager that this email

25343
00:01:01,800 --> 00:01:06,030
field is already pre-populated with our most commonly used email?

25344
00:01:06,660 --> 00:01:06,930
Well,

25345
00:01:06,930 --> 00:01:11,850
we can do that by simply adding a starting value to that email entry.

25346
00:01:12,570 --> 00:01:17,280
And the way that we do that is through a method called insert.

25347
00:01:17,760 --> 00:01:21,180
Now insert it takes two parameters. And in fact,

25348
00:01:21,180 --> 00:01:26,180
you can actually scroll down to the insert method and you can see it describes

25349
00:01:26,430 --> 00:01:29,130
in detail that it takes an index

25350
00:01:29,550 --> 00:01:34,550
and also the string that you want to insert. The way that the index works is it's

25351
00:01:36,030 --> 00:01:37,950
basically where the cursor is.

25352
00:01:38,490 --> 00:01:43,490
If you wanted to insert it at the very beginning of that email entry,

25353
00:01:44,430 --> 00:01:45,750
then you could just put in zero.

25354
00:01:45,780 --> 00:01:50,700
That basically inserts this piece of text at the first zeroth character.

25355
00:01:51,390 --> 00:01:55,860
Alternatively, there's another useful index which is called end.

25356
00:01:56,430 --> 00:02:01,200
And this end comes from tkinter constants and its just a constant

25357
00:02:01,200 --> 00:02:05,430
that's gonna represent the very last character that's inside that entry.

25358
00:02:05,940 --> 00:02:08,250
For example, if inside your entry

25359
00:02:08,250 --> 00:02:12,750
you already had some text and you want to insert it after your text here,

25360
00:02:12,870 --> 00:02:14,910
then you would use the index as end.

25361
00:02:15,300 --> 00:02:17,430
But if you want to insert it at the very beginning,

25362
00:02:17,490 --> 00:02:21,390
then you would use the index as zero. Now in our case,

25363
00:02:21,450 --> 00:02:25,020
it shouldn't actually matter because our email entry will start out being

25364
00:02:25,020 --> 00:02:26,190
completely empty.

25365
00:02:26,490 --> 00:02:29,910
So I'm going to choose to insert this piece of text at the very beginning

25366
00:02:30,390 --> 00:02:34,980
and the text that I'm going to insert is just a example dummy email.

25367
00:02:35,010 --> 00:02:38,250
This is not my real email, but in your case,

25368
00:02:38,310 --> 00:02:40,140
if you were creating your own password manager,

25369
00:02:40,200 --> 00:02:45,090
then you could put down your own email so that every time you run the app,

25370
00:02:45,180 --> 00:02:49,140
it already starts out being pre-populated when that email that you've got.

25371
00:02:50,460 --> 00:02:55,460
So now the rest of the challenge is pretty much going to be up to you. Inside

25372
00:02:56,460 --> 00:02:59,130
this save password section,

25373
00:02:59,470 --> 00:03:03,880
what I want you to do is to be able to take the inputs that are put into the

25374
00:03:03,880 --> 00:03:07,240
website entry, the email entry and the password entry,

25375
00:03:07,780 --> 00:03:10,690
and when the user clicks on this add button,

25376
00:03:11,230 --> 00:03:16,230
I want you to somehow figure out how to save that data into a file called data

25377
00:03:18,010 --> 00:03:18,843
.txt.

25378
00:03:19,270 --> 00:03:23,500
This data.txt is going to take the website that the user entered,

25379
00:03:23,740 --> 00:03:27,730
the email that they entered and the password that they entered

25380
00:03:28,120 --> 00:03:32,440
and it's going to put it in here with a space in between and a pipe symbol that

25381
00:03:32,440 --> 00:03:36,370
you can find on your keyboard. Or in fact, you can format this however you like

25382
00:03:36,400 --> 00:03:37,720
because at the end of the day,

25383
00:03:38,020 --> 00:03:41,080
you're going to be the one looking at this file to find your emails and

25384
00:03:41,080 --> 00:03:44,140
passwords. So format it in a way that's comfortable for you.

25385
00:03:45,250 --> 00:03:50,250
But essentially, what we want to do is to transport things that the user types

25386
00:03:50,710 --> 00:03:51,543
into here,

25387
00:03:51,610 --> 00:03:56,610
the website that this password is for, their email and their password and the

25388
00:03:57,970 --> 00:04:02,140
moment that they press this add button to trigger some sort of function that

25389
00:04:02,140 --> 00:04:06,550
saves this information into a data.txt file.

25390
00:04:06,910 --> 00:04:08,920
And that format is the information like this.

25391
00:04:09,310 --> 00:04:12,640
And every time the user adds another entry,

25392
00:04:12,850 --> 00:04:17,560
it's going to be added on a new line and it's going to be appended to the end of

25393
00:04:17,560 --> 00:04:18,670
the previous entry.

25394
00:04:19,360 --> 00:04:23,620
So I know that it's been a little while since we last dealt with writing to

25395
00:04:23,620 --> 00:04:28,300
file. So I'll link to the documentation that's relevant to this challenge.

25396
00:04:28,660 --> 00:04:32,830
One is how to write to file using Python and you can see the demo code

25397
00:04:32,830 --> 00:04:34,990
which you can run and you can try out,

25398
00:04:35,260 --> 00:04:39,010
and then you're going to format that to work for your particular case. Now,

25399
00:04:39,010 --> 00:04:41,830
the other thing is the tkinter entry widget.

25400
00:04:42,130 --> 00:04:45,550
So there is the insert method that's going to be pretty useful.

25401
00:04:45,970 --> 00:04:50,110
But the other thing that you want to happen is once you press the add button,

25402
00:04:50,440 --> 00:04:54,520
you want all of this information other than the email to be cleared out.

25403
00:04:54,970 --> 00:04:59,970
So you're probably also going to have to take a look at the delete function.

25404
00:05:00,760 --> 00:05:01,900
And at the very top,

25405
00:05:01,930 --> 00:05:06,930
you can see it even shows you how to delete something entirely from an entry.

25406
00:05:07,780 --> 00:05:11,290
Using these two pieces of documentation.

25407
00:05:11,950 --> 00:05:13,900
I want you to be able to take this information,

25408
00:05:14,020 --> 00:05:15,940
put it into a data.txt file

25409
00:05:16,300 --> 00:05:21,130
and afterward, wipe clear this website entry and the password entry.

25410
00:05:21,610 --> 00:05:25,630
So that's all there is to it. There's going to be quite a bit of code writing.

25411
00:05:25,870 --> 00:05:29,350
So you have a think about it and go ahead and complete this challenge.

25412
00:05:29,770 --> 00:05:32,860
I'll wait for you and we'll go through the solution afterward together.

25413
00:05:37,240 --> 00:05:42,100
So the first thing I need to happen is when the user presses on the add button,

25414
00:05:42,160 --> 00:05:45,670
I need to trigger a function. So in this add_button,

25415
00:05:45,730 --> 00:05:50,730
I'm also going to add a command and I'm going to call my function save.

25416
00:05:51,190 --> 00:05:55,090
So I'm going to put that function inside the section save password.

25417
00:05:55,990 --> 00:06:00,740
Now this save function is going to write to a file

25418
00:06:00,740 --> 00:06:02,480
which is called data.txt,

25419
00:06:02,630 --> 00:06:07,250
or in fact, you can call it anything you want. Inside the save function

25420
00:06:07,310 --> 00:06:10,130
we want to be able to write to a particular file.

25421
00:06:10,370 --> 00:06:13,640
So we need to open the file and then we need to write to it.

25422
00:06:14,000 --> 00:06:18,050
And we can use the option a, to append to the end of the file.

25423
00:06:18,350 --> 00:06:22,280
Or write, which overrides any existing content or read,

25424
00:06:22,310 --> 00:06:25,520
which just reads the actual file. Now in our case,

25425
00:06:25,550 --> 00:06:30,110
every time we add a new password, we wanna add it to the previous passwords.

25426
00:06:30,350 --> 00:06:32,000
So we're going to need this append.

25427
00:06:33,110 --> 00:06:35,630
So let's go ahead and open a file

25428
00:06:35,660 --> 00:06:40,660
which we're going to call data.txt and we're going to open it using the

25429
00:06:41,330 --> 00:06:43,010
append mode. Now,

25430
00:06:43,010 --> 00:06:48,010
remember that when you're opening a file using the append mode or the write mode,

25431
00:06:48,350 --> 00:06:51,500
and that file doesn't exist, it's simply going to create it.

25432
00:06:52,220 --> 00:06:56,270
We are gonna open this and you can either save it to a file name,

25433
00:06:56,270 --> 00:06:59,720
so you could do it like this data_file = open,

25434
00:07:00,230 --> 00:07:05,000
or you might have remembered that previously we spoke about the with keyword.

25435
00:07:05,480 --> 00:07:10,480
So we can say with open this particular data file as our data file.

25436
00:07:12,380 --> 00:07:17,380
And what this allows us to do is it will close this file automatically without

25437
00:07:18,050 --> 00:07:21,110
us having to later write file.close.

25438
00:07:22,100 --> 00:07:25,220
So it's a much better way of working with files.

25439
00:07:26,030 --> 00:07:27,830
But if you didn't remember the with keyword,

25440
00:07:27,860 --> 00:07:31,340
don't worry. Using the open will still work. Now,

25441
00:07:31,370 --> 00:07:34,760
once we've opened our data.txt in append mode,

25442
00:07:34,880 --> 00:07:39,260
the next step is to actually add the pieces of data. Now,

25443
00:07:39,290 --> 00:07:43,640
how do we get hold of data from our entries? Well,

25444
00:07:43,640 --> 00:07:47,000
that's where the entry documentation comes in handy.

25445
00:07:47,510 --> 00:07:49,460
And you can see even at the very top,

25446
00:07:49,460 --> 00:07:53,600
it tells you that to fetch the current entry text, use the get method,

25447
00:07:53,840 --> 00:07:55,370
so the entry.get.

25448
00:07:56,000 --> 00:08:00,500
We can get hold of our website by getting hold of the website entry and then

25449
00:08:00,500 --> 00:08:01,760
calling .get.

25450
00:08:02,270 --> 00:08:05,510
And then we can do the same for email and password.

25451
00:08:07,400 --> 00:08:10,550
Once we've gotten all of these pieces of text,

25452
00:08:10,940 --> 00:08:13,790
then we're going to be writing it into our file.

25453
00:08:14,030 --> 00:08:17,000
So our data_file.write

25454
00:08:17,540 --> 00:08:20,420
and what we're going to write is a string

25455
00:08:20,450 --> 00:08:22,520
which I'm going to format using an f-string.

25456
00:08:22,850 --> 00:08:27,850
And I'm first going to put in the website and then space and pipe symbol,

25457
00:08:28,340 --> 00:08:31,160
space and then it's going to be the email

25458
00:08:33,679 --> 00:08:38,030
and finally, it's going to be the password. Let's check this out,

25459
00:08:38,030 --> 00:08:39,830
let's run it and see if it works

25460
00:08:42,730 --> 00:08:42,909
right?

25461
00:08:42,909 --> 00:08:46,990
Say we're signing up for Amazon, I'm going to use my normal username

25462
00:08:47,080 --> 00:08:51,130
and I'm going to create a password which is super insecure,

25463
00:08:51,130 --> 00:08:52,420
which you should never use.

25464
00:08:52,720 --> 00:08:57,060
But now I'm going to click on add. And after I've clicked it,

25465
00:08:57,090 --> 00:08:59,160
even though nothing has happened so far,

25466
00:08:59,190 --> 00:09:01,800
if we take a look inside our project folder,

25467
00:09:02,100 --> 00:09:06,630
you can see we've now magically created this data.txt file. And you can see

25468
00:09:06,630 --> 00:09:10,860
it's formatted our website, email, and password, all into that file.

25469
00:09:11,730 --> 00:09:14,730
So that's pretty much a success. Now,

25470
00:09:14,760 --> 00:09:18,570
the other thing I mentioned is that it would be nice to get some sort of

25471
00:09:18,570 --> 00:09:23,250
indication that it worked right? And for our application to be prepped and ready

25472
00:09:23,250 --> 00:09:25,590
for the next piece of data to be entered.

25473
00:09:25,800 --> 00:09:30,330
So we wanted to delete whatever text there's inside the website entry and the

25474
00:09:30,330 --> 00:09:35,130
password entry. If you take a look again at the documentation,

25475
00:09:35,520 --> 00:09:40,290
you can see that you can delete whatever is inside the entry by calling delete

25476
00:09:40,350 --> 00:09:44,850
and telling it to delete from a particular index to another index.

25477
00:09:45,270 --> 00:09:50,160
Now, there's more detailed if you actually scroll down to the actual method and

25478
00:09:50,160 --> 00:09:55,160
it tells you that it takes two parameters; first and last. First is the start of

25479
00:09:55,950 --> 00:09:59,580
the range and last is the end of the range.

25480
00:09:59,850 --> 00:10:03,600
And it tells you that if you omit it, it's only going to remove one character.

25481
00:10:03,600 --> 00:10:05,010
So that's not what we want.

25482
00:10:05,400 --> 00:10:09,540
We want it to remove all of the characters in a particular entry.

25483
00:10:09,900 --> 00:10:14,100
So let's start out with our website entry, call delete on it,

25484
00:10:14,580 --> 00:10:19,580
and we're going to start from index zero and go all the way to the end. In the

25485
00:10:20,430 --> 00:10:23,160
same way that we used our index

25486
00:10:23,370 --> 00:10:27,120
when we inserted our email to the email entry,

25487
00:10:27,360 --> 00:10:32,310
we moved the cursor to the very start, the zeroth character in that entry.

25488
00:10:32,730 --> 00:10:36,390
In this case, we're deleting from the zeroth character to

25489
00:10:36,390 --> 00:10:38,310
the end of the entry.

25490
00:10:39,420 --> 00:10:42,060
And then we can do the same for our password entry,

25491
00:10:42,650 --> 00:10:43,483
right?

25492
00:10:45,050 --> 00:10:46,970
And now if we run this code,

25493
00:10:47,000 --> 00:10:52,000
you can see that once I type something in and let's just generate another bad

25494
00:10:52,310 --> 00:10:55,460
password Qwerty. And by the way,

25495
00:10:55,490 --> 00:11:00,110
if I've called out any of your passwords, just for my sake, um,

25496
00:11:00,410 --> 00:11:03,710
and definitely for your own security, go ahead and change it.

25497
00:11:03,770 --> 00:11:07,190
These are really bad passwords. But either way,

25498
00:11:07,280 --> 00:11:11,270
I'm going to click add and you can see the moment that I've clicked that my

25499
00:11:11,270 --> 00:11:16,250
website and my password entries have now cleared out and it's now ready to take

25500
00:11:16,340 --> 00:11:20,780
the next entry. And back in my data.txt, I've now got 

25501
00:11:20,780 --> 00:11:21,680
another entry.

25502
00:11:22,070 --> 00:11:26,030
But notice this, it's been added to the end of the previous entry,

25503
00:11:26,390 --> 00:11:30,440
but its on the same line. That's a little bit confusing.

25504
00:11:30,980 --> 00:11:35,870
Now you might remember this special character which is \n,

25505
00:11:36,470 --> 00:11:40,310
and that allows us to enter things onto a new line.

25506
00:11:40,850 --> 00:11:45,850
Let's delete everything that we've got in here so far and let's hit save so that

25507
00:11:46,490 --> 00:11:48,110
we can start from scratch.

25508
00:11:48,650 --> 00:11:52,400
Now let's run our program with that new line inserted.

25509
00:11:53,890 --> 00:11:58,890
And if I go ahead and add the website and let me think of another bad password,

25510
00:11:59,650 --> 00:12:04,060
um, password is a really terrible password. Now,

25511
00:12:04,060 --> 00:12:05,440
if I click add,

25512
00:12:05,500 --> 00:12:10,500
you'll notice that those fields disappear and that the password gets added into

25513
00:12:10,630 --> 00:12:14,260
here. Now, if I try and add another value in here,

25514
00:12:14,650 --> 00:12:19,650
so let's say-- then you can see that the next value got added in on the next line,

25515
00:12:21,640 --> 00:12:23,890
which is a lot better in terms of formatting.

25516
00:12:24,670 --> 00:12:27,910
These are just small things that make things look tidy and neat.

25517
00:12:28,450 --> 00:12:33,450
But the big part was remembering how to save things into a file and using the

25518
00:12:35,200 --> 00:12:40,200
documentation to get hold of the values inside our entries and putting it into

25519
00:12:40,750 --> 00:12:41,650
our data file.

25520
00:12:43,210 --> 00:12:47,410
One of the things you might have realized is that it's a terrible user

25521
00:12:47,410 --> 00:12:51,250
experience when the user enters a piece of data,

25522
00:12:51,250 --> 00:12:56,250
say a website and a password and they click add. Things sort of disappear,

25523
00:13:00,010 --> 00:13:05,010
but they don't really have a confirmation that this, in fact, did work.

25524
00:13:06,340 --> 00:13:07,840
So in the next lesson,

25525
00:13:07,900 --> 00:13:11,350
we're going to look at how we can create some popups so that we can show the

25526
00:13:11,350 --> 00:13:14,170
user what the result was of their action.

25527
00:13:14,440 --> 00:13:18,820
We can tell them if it was successful or if it was not, ask them to confirm

25528
00:13:18,850 --> 00:13:23,650
whether if they're happy with that data entry. So for all of that and more,

25529
00:13:23,860 --> 00:13:24,910
I'll see you in the next lesson.


25530
00:00:00,330 --> 00:00:01,589
Now in the last lesson,

25531
00:00:01,650 --> 00:00:05,670
we managed to get our password manager to start saving the data that we're

25532
00:00:05,670 --> 00:00:08,189
entering inside the password manager.

25533
00:00:08,790 --> 00:00:12,810
And we formatted it and put it inside our data.txt.

25534
00:00:13,590 --> 00:00:13,860
Now,

25535
00:00:13,860 --> 00:00:18,860
one of the things that was a bit of an issue in terms of user experience is

25536
00:00:19,380 --> 00:00:24,380
whenever the user actually enters their details into this password manager at the

25537
00:00:25,590 --> 00:00:26,423
moment,

25538
00:00:26,460 --> 00:00:30,900
it doesn't actually give you some sort of way of knowing that it was successful

25539
00:00:30,990 --> 00:00:31,890
or if it was not,

25540
00:00:32,340 --> 00:00:37,110
or actually getting them to check and verify that the data that they've entered

25541
00:00:37,410 --> 00:00:41,010
is definitely the one that they want to save into the file.

25542
00:00:41,820 --> 00:00:43,080
In order to do this,

25543
00:00:43,170 --> 00:00:46,260
we're going to learn about something else that you can do with tkinter

25544
00:00:46,740 --> 00:00:48,960
which is something called standard dialogs.

25545
00:00:49,260 --> 00:00:53,460
These are basically popups that your tkinter program can generate.

25546
00:00:53,970 --> 00:00:58,350
And one of the most popular standard dialogs are the message boxes.

25547
00:00:58,980 --> 00:01:02,520
And it's really, really easy to create these popups.

25548
00:01:02,970 --> 00:01:06,390
You can simply just import the message box module

25549
00:01:06,660 --> 00:01:11,370
and you can tap into methods like show info or show warning, show error,

25550
00:01:11,730 --> 00:01:15,810
or you can ask the user yes no, or OK

25551
00:01:15,810 --> 00:01:19,560
or cancel, ask a question yes or no,

25552
00:01:19,980 --> 00:01:22,380
ask to retry or cancel.

25553
00:01:23,160 --> 00:01:26,790
Now the screenshots where made in a Swedish version of Windows,

25554
00:01:26,910 --> 00:01:31,620
but we can actually try these out ourselves and start putting in some standard

25555
00:01:31,620 --> 00:01:34,410
dialogs so that we can give the user some feedback.

25556
00:01:35,070 --> 00:01:39,090
The thing that we really want to tell the user is the moment that the save

25557
00:01:39,090 --> 00:01:43,830
function is called it's because they pressed on the add button here.

25558
00:01:44,430 --> 00:01:49,430
But before we actually commit all of the current information to the file,

25559
00:01:50,130 --> 00:01:54,060
we want to check and make sure that they're actually happy with what they've

25560
00:01:54,060 --> 00:01:54,893
written.

25561
00:01:55,110 --> 00:01:59,220
So we can create a message box here and get them to check the details that

25562
00:01:59,220 --> 00:02:02,700
they've entered and then hit yes or no as to whether

25563
00:02:02,700 --> 00:02:06,300
if they want to save it. In order to use the message box,

25564
00:02:06,330 --> 00:02:10,050
we actually have to import the message box. Again,

25565
00:02:10,050 --> 00:02:15,050
it's from the tkinter module that we're going to import the message box module.

25566
00:02:16,200 --> 00:02:20,280
Now notice how this is not actually a class. So that's why,

25567
00:02:20,310 --> 00:02:24,510
even though we've said * which means import everything,

25568
00:02:24,870 --> 00:02:29,340
it actually only imports all of the classes, the constants,

25569
00:02:29,580 --> 00:02:32,340
but it doesn't import things like the message box,

25570
00:02:32,580 --> 00:02:36,300
which is simply just another module of code. And in fact,

25571
00:02:36,300 --> 00:02:41,010
if you right-click on it and go to implementation here,

25572
00:02:41,430 --> 00:02:46,430
then you can actually see this messagebox.py file and how it's implemented.

25573
00:02:49,110 --> 00:02:53,460
The thing that's important though is to actually put it into use. So we can use the

25574
00:02:53,460 --> 00:02:57,210
message box and call a method to show a popup.

25575
00:02:57,750 --> 00:03:00,160
The simplest type is just showinfo

25576
00:03:00,280 --> 00:03:02,110
which you only need to think about two things

25577
00:03:02,110 --> 00:03:06,430
really; a title and also a message.

25578
00:03:07,420 --> 00:03:10,720
So I'm just going to put title as title and message as message.

25579
00:03:11,230 --> 00:03:13,480
And you can see when I press add,

25580
00:03:13,630 --> 00:03:18,490
I get this up and it's just got the title and the message and you can't do

25581
00:03:18,490 --> 00:03:20,290
anything other than click OK.

25582
00:03:22,000 --> 00:03:23,770
In addition to showinfo,

25583
00:03:23,980 --> 00:03:27,850
there is actually a lot of other methods; you can ask yes or no,

25584
00:03:28,240 --> 00:03:33,160
ask retry or cancel. You can show an error or you can show a warning.

25585
00:03:33,910 --> 00:03:36,910
Now in addition, you can actually ask the user something.

25586
00:03:36,910 --> 00:03:41,770
So this generates two buttons, yes or no, retry or cancel,

25587
00:03:41,800 --> 00:03:46,480
OK or cancel, ask question is also yes and no, and we've also got yes,

25588
00:03:46,480 --> 00:03:51,190
no and cancel here. What I'm going to do is I'm going to ask OK

25589
00:03:51,190 --> 00:03:52,090
or cancel.

25590
00:03:53,110 --> 00:03:58,110
And what I want to ask the user is I'm going to set the title as the website

25591
00:03:58,960 --> 00:03:59,920
that they've entered

25592
00:04:00,490 --> 00:04:05,490
so that's going to come from here, and then I'm going to set the message as a

25593
00:04:06,900 --> 00:04:07,690
f-string.

25594
00:04:07,690 --> 00:04:12,690
So I'm going to say these are the details entered:\n.

25595
00:04:14,590 --> 00:04:17,560
And then I'll give them the email that they entered

25596
00:04:19,180 --> 00:04:24,180
and then a new line and the password that they entered.

25597
00:04:28,000 --> 00:04:32,800
And then after new line, I'm going to ask them, is it okay to 

25598
00:04:35,010 --> 00:04:35,130
save?

25599
00:04:35,130 --> 00:04:37,050
If I go ahead and run this code,

25600
00:04:38,130 --> 00:04:41,400
you can see that when I type a website

25601
00:04:41,460 --> 00:04:44,760
say Amaazon

25602
00:04:45,690 --> 00:04:49,620
and I type in my password and I click add,

25603
00:04:50,040 --> 00:04:53,700
I get my popup and it says these are the details entered. This is email,

25604
00:04:53,700 --> 00:04:56,130
this is the password, is it okay to save?

25605
00:04:56,640 --> 00:04:59,550
Now what I want to do is when they click OK

25606
00:04:59,790 --> 00:05:04,350
then for that action to go through and for us to write to our data file.

25607
00:05:04,650 --> 00:05:06,360
But if they click cancel,

25608
00:05:06,360 --> 00:05:10,260
I want them to be able to go back to the screen and edit it if necessary.

25609
00:05:10,920 --> 00:05:12,150
In order to do that,

25610
00:05:12,360 --> 00:05:16,020
we have to receive the output from this method call,

25611
00:05:16,350 --> 00:05:19,770
which is going to be a boolean. It's going to be either true or false.

25612
00:05:19,920 --> 00:05:22,140
So I'm going to set that to is_ok.

25613
00:05:23,070 --> 00:05:27,570
Now if this is_ok  is true, well, in that case,

25614
00:05:27,600 --> 00:05:30,510
we're going to go ahead and do all of this. So write

25615
00:05:30,510 --> 00:05:34,440
to file and delete everything that's inside the entry.

25616
00:05:34,890 --> 00:05:38,850
But if it's not okay, then we're simply just going to do nothing

25617
00:05:39,120 --> 00:05:42,600
and the popup box will dismiss itself. Now,

25618
00:05:42,630 --> 00:05:47,630
if I run this code again and I type in some ### and I click add,

25619
00:05:48,750 --> 00:05:53,610
you can see if I click cancel, nothing happens, and I go back. But if I click

25620
00:05:53,700 --> 00:05:54,540
OK,

25621
00:05:54,750 --> 00:05:59,750
then all of that information is going to be to my data.txt like here.

25622
00:06:01,910 --> 00:06:06,910
Now it's time for you to have a go with the message boxes and these standard

25623
00:06:07,070 --> 00:06:07,903
dialogs.

25624
00:06:08,270 --> 00:06:12,470
But your job is to figure out how can we get our app to have a little bit of

25625
00:06:12,470 --> 00:06:17,390
validation because when they have an empty website and an empty password and

25626
00:06:17,390 --> 00:06:18,230
they click add,

25627
00:06:18,950 --> 00:06:23,900
you shouldn't really let them save an empty password and an empty website,

25628
00:06:23,900 --> 00:06:24,890
right? That's not right.

25629
00:06:25,340 --> 00:06:29,930
So we want to check to see if the length of the entries in the website or the

25630
00:06:29,930 --> 00:06:33,290
password is zero. And in that case,

25631
00:06:33,320 --> 00:06:35,720
we're going to bring up a message box

25632
00:06:35,750 --> 00:06:38,120
that's just going to tell them basically that, Hey,

25633
00:06:38,450 --> 00:06:42,650
you've left some fields empty. So this is what you're aiming for.

25634
00:06:42,710 --> 00:06:46,970
Let's say that you've left the website or the password empty and you click add,

25635
00:06:47,360 --> 00:06:51,230
you should get a popup that tells you, Hey, don't leave any of the fields empty.

25636
00:06:51,620 --> 00:06:56,620
And this should trigger when either the website or the password is empty.

25637
00:06:57,680 --> 00:07:01,190
So have a think about how you might solve that challenge and give it a go.

25638
00:07:01,660 --> 00:07:02,493
Okay.

25639
00:07:06,640 --> 00:07:10,630
All right. So here's where we get all of the information from our entries.

25640
00:07:10,810 --> 00:07:13,360
And this is also a good time to do this validation.

25641
00:07:13,930 --> 00:07:16,120
We can use an if statement to check, well,

25642
00:07:16,210 --> 00:07:20,980
if this website string has a length of zero,

25643
00:07:21,400 --> 00:07:23,770
then that means the user didn't type anything in there.

25644
00:07:24,250 --> 00:07:26,770
And we can use an or statement to check well,

25645
00:07:26,800 --> 00:07:31,660
if the password also has a length of 0, well,

25646
00:07:31,660 --> 00:07:33,910
in that case, they didn't type anything in there either.

25647
00:07:34,450 --> 00:07:37,240
Now you can also add validation for the email,

25648
00:07:37,240 --> 00:07:40,660
but because we have the email already pre-populated,

25649
00:07:40,900 --> 00:07:42,190
there's actually not much point here.

25650
00:07:42,790 --> 00:07:46,810
So if either they've left the website blank or the password blank,

25651
00:07:47,110 --> 00:07:51,370
then we're going to generate a message box and we're going to use the showinfo

25652
00:07:51,370 --> 00:07:55,540
message box. The title is just going to say

25653
00:07:55,960 --> 00:07:59,950
Oops, and the message is going to say

25654
00:08:00,880 --> 00:08:03,220
Please make sure you haven't left any fields empty.

25655
00:08:03,820 --> 00:08:07,270
And now when you run this code, if you've left either of these two empty,

25656
00:08:07,480 --> 00:08:10,600
then you are going to get a popup that tells you this.

25657
00:08:11,170 --> 00:08:16,060
Now we don't actually want the rest of this code to happen if this is true.

25658
00:08:16,480 --> 00:08:21,480
So let's go ahead and add an else statement as well so that we can indent all of

25659
00:08:22,300 --> 00:08:26,590
this so that we only continue forward

25660
00:08:27,070 --> 00:08:32,070
if in fact, the length of the website or the password is not equal to zero.

25661
00:08:33,730 --> 00:08:37,030
So in this case, when they leave it empty, you can say OK

25662
00:08:37,090 --> 00:08:40,690
and it just goes back to let you continue entering more details.

25663
00:08:42,070 --> 00:08:43,210
Now in the next lesson,

25664
00:08:43,240 --> 00:08:47,380
we're going to add another piece of functionality to our application

25665
00:08:47,680 --> 00:08:49,480
which is the generate password.

25666
00:08:49,780 --> 00:08:53,830
We've already seen how terrible the passwords are that we come up with from our

25667
00:08:53,830 --> 00:08:54,610
own heads.

25668
00:08:54,610 --> 00:08:58,900
So we're going to be using the generate password code that we created many,

25669
00:08:58,900 --> 00:09:01,840
many moons ago as one of our projects

25670
00:09:01,930 --> 00:09:04,840
and we're going to be embedding that into this application.

25671
00:09:05,350 --> 00:09:08,380
So for all of that and more, I'll see you on the next lesson.


25672
00:00:00,240 --> 00:00:03,870
Now what may seem like a long time ago,

25673
00:00:04,350 --> 00:00:07,530
we created a password generator project.

25674
00:00:07,620 --> 00:00:12,620
So this was in fact on day 5 where we took three lists,

25675
00:00:13,110 --> 00:00:14,640
letters, numbers, and symbols,

25676
00:00:15,180 --> 00:00:20,010
and we used it to generate a random list of letters, symbols,

25677
00:00:20,010 --> 00:00:20,843
and numbers

25678
00:00:21,000 --> 00:00:25,860
and then we shuffled all of those together and we turned it into a string to

25679
00:00:25,860 --> 00:00:28,320
create a very secure password.

25680
00:00:29,760 --> 00:00:32,009
Now I've modified the code a little bit,

25681
00:00:32,189 --> 00:00:34,970
just so that we don't need to use any inputs.

25682
00:00:34,970 --> 00:00:38,190
So we don't have to type anything in the console. Instead,

25683
00:00:38,220 --> 00:00:43,220
I've created a random number between 8 and 10 to pick 8 or 10 letters

25684
00:00:44,580 --> 00:00:49,470
and then 2 to 4 numbers and 2 to 4 symbols.

25685
00:00:50,370 --> 00:00:52,980
So what I want you to do is the head over to this link

25686
00:00:53,220 --> 00:00:54,900
which is in the course resources,

25687
00:00:55,560 --> 00:01:00,560
and simply just copy everything that's in there into your password generator

25688
00:01:01,140 --> 00:01:01,973
section,

25689
00:01:02,220 --> 00:01:07,220
because we're going to be using this code in our password manager so that when

25690
00:01:08,070 --> 00:01:09,750
the user clicks on this button,

25691
00:01:09,780 --> 00:01:14,780
we can generate them a random password and already pre-populate that field.

25692
00:01:14,910 --> 00:01:16,380
So they don't have to type anything

25693
00:01:16,530 --> 00:01:20,700
and they don't have to come up with a really complex password like this.

25694
00:01:21,810 --> 00:01:26,810
Once we've put our password generator code into the password generator section,

25695
00:01:27,360 --> 00:01:31,680
let's go ahead and reformat it. So let's put our imports at the top.

25696
00:01:33,660 --> 00:01:37,770
And as a challenge, I want you to take a look at these three lines,

25697
00:01:38,190 --> 00:01:39,420
look at what they're doing.

25698
00:01:39,990 --> 00:01:44,990
We've created an empty list and we're adding a random letter from this list of

25699
00:01:47,310 --> 00:01:50,100
letters. And then we have this for-loop

25700
00:01:50,220 --> 00:01:54,420
which basically creates a range from this random number,

25701
00:01:54,690 --> 00:01:56,880
so anywhere between 8 to 10,

25702
00:01:57,420 --> 00:02:02,420
and then we add a random letter to that password list. So this is a really

25703
00:02:02,790 --> 00:02:06,480
good opportunity for using list comprehensions instead,

25704
00:02:06,900 --> 00:02:11,400
because we can get rid of a lot of these for loops and do each of these things

25705
00:02:11,430 --> 00:02:15,990
in just one single line of code. It's also a good point for

25706
00:02:15,990 --> 00:02:16,890
a bit of revision.

25707
00:02:17,520 --> 00:02:22,520
I want you to have a think about how these things work and see if you can do the

25708
00:02:22,530 --> 00:02:27,530
same thing by changing these three sections into three list comprehensions.

25709
00:02:30,180 --> 00:02:32,640
If you're successful, once you run the code,

25710
00:02:32,790 --> 00:02:35,280
it should still work exactly the same way

25711
00:02:35,580 --> 00:02:39,780
and you should see a random password being generated and printed down here.

25712
00:02:40,590 --> 00:02:42,360
Pause the video and give that a go.

25713
00:02:42,380 --> 00:02:43,213
All right.

25714
00:02:48,830 --> 00:02:52,490
All right. So what I'm going to do is instead of creating an empty list,

25715
00:02:52,640 --> 00:02:54,830
I'm going to create three new lists.

25716
00:02:55,340 --> 00:03:00,340
One is going to be the password_letters and this list is going to be created,

25717
00:03:03,340 --> 00:03:03,880
of course,

25718
00:03:03,880 --> 00:03:08,880
using less comprehension and replacing these two lines of code.

25719
00:03:09,580 --> 00:03:11,320
Remember our keyword formats.

25720
00:03:11,350 --> 00:03:16,350
We have our new item for item in list.

25721
00:03:17,230 --> 00:03:20,200
Now, in this case, our list is actually not a list.

25722
00:03:20,380 --> 00:03:25,330
It's actually going to be a range because we're going to create a range using

25723
00:03:25,360 --> 00:03:30,360
this random number. So we generate a range between zero and this number minus

25724
00:03:31,540 --> 00:03:36,010
one. So we can pass in our number letters into here.

25725
00:03:37,210 --> 00:03:40,810
Each of the items is actually not important.

25726
00:03:40,990 --> 00:03:44,800
We don't actually need to use it so we can just use an underscore to replace it.

25727
00:03:45,430 --> 00:03:48,490
But what is important is what the new item is going to be,

25728
00:03:48,910 --> 00:03:51,880
because this is going to be created from random.choice

25729
00:03:52,210 --> 00:03:57,210
and we're going to be passing in our list of letters up here so that we pick a

25730
00:03:58,180 --> 00:04:03,160
random letter and we put it into our new list, password_letters.

25731
00:04:03,640 --> 00:04:07,240
And then we're going to check to see how many times we need to do this by

25732
00:04:07,240 --> 00:04:12,240
looking at the range. That line will replace these two lines of code,

25733
00:04:13,660 --> 00:04:17,589
and we can go ahead and do the same thing for the other two sections.

25734
00:04:22,140 --> 00:04:22,973
Yeah.

25735
00:04:23,610 --> 00:04:28,610
These three lines of code uses list comprehension to replace these for loops. So

25736
00:04:29,490 --> 00:04:33,450
we can delete those for loops and now we end up with three lists.

25737
00:04:34,050 --> 00:04:38,310
Now we want to combine these three lists into one list so that we can actually

25738
00:04:38,310 --> 00:04:42,720
shuffle it. So I'm going to create, again, this password_list,

25739
00:04:43,380 --> 00:04:48,380
and it's going to be created by adding our password_letters to our password_

25740
00:04:49,980 --> 00:04:53,400
symbols and our password_numbers.

25741
00:04:54,000 --> 00:04:58,170
So we're basically adding all these three lists together and putting it into one

25742
00:04:58,170 --> 00:05:02,670
big list, and then we're shuffling it up in order to get the final random list.

25743
00:05:03,180 --> 00:05:07,050
Now we can actually cut down on this code even further if we wanted to.

25744
00:05:07,620 --> 00:05:10,680
For example, instead of creating a separate variable here,

25745
00:05:10,710 --> 00:05:13,410
we could actually put it straight in like this.

25746
00:05:13,920 --> 00:05:16,500
And instead of calling random.randint,

25747
00:05:17,100 --> 00:05:21,330
we can actually say from random import the methods that we need,

25748
00:05:21,660 --> 00:05:26,660
which is choice and randint and also down here we're using the shuffle function

25749
00:05:28,950 --> 00:05:29,783
as well.

25750
00:05:30,990 --> 00:05:35,990
So now we can delete all the places where we have random and we can replace

25751
00:05:36,840 --> 00:05:39,810
these with just simply the randint,

25752
00:05:42,060 --> 00:05:45,840
and we can delete these three lines of code. And finally,

25753
00:05:45,840 --> 00:05:50,520
it's simply just shuffle and we shuffle our password_list. Now,

25754
00:05:50,520 --> 00:05:54,810
one last thing that I think is a good thing to point out is here

25755
00:05:54,810 --> 00:05:57,270
we've created an empty string called password

25756
00:05:57,620 --> 00:05:59,870
and then for each of the characters in our list,

25757
00:05:59,900 --> 00:06:04,550
we've basically added it to this password. Now that's easy enough,

25758
00:06:04,580 --> 00:06:09,580
but these three lines could actually be done in a more Pythonic way. In

25759
00:06:10,160 --> 00:06:12,890
Python there is a method called join

25760
00:06:13,160 --> 00:06:15,680
which is available on every single string.

25761
00:06:16,070 --> 00:06:20,480
So you could take a string like the pound sign and you could call the join

25762
00:06:20,480 --> 00:06:21,313
method on it.

25763
00:06:21,710 --> 00:06:26,710
And what it does is it will create a new string that combines all of the

25764
00:06:27,920 --> 00:06:30,890
elements in this iterable, John, Peter, and Vicky,

25765
00:06:31,220 --> 00:06:35,360
and it will separate them by whatever character you put here. Now,

25766
00:06:35,390 --> 00:06:37,850
this doesn't actually have to be a tuple.

25767
00:06:37,880 --> 00:06:41,120
It could be a dictionary and it could also be a list.

25768
00:06:41,450 --> 00:06:43,760
Let me convert this into a list.

25769
00:06:45,230 --> 00:06:50,230
And now if I go ahead and use the pound sign to join my list and run this code,

25770
00:06:52,330 --> 00:06:54,100
ou can see, 

25771
00:06:54,460 --> 00:06:57,220
I end up with the same results. Now,

25772
00:06:57,220 --> 00:07:01,780
what if I actually delete this pound sign and I just have an empty string?

25773
00:07:02,200 --> 00:07:05,350
Well, this will work as well. And what it does,

25774
00:07:05,410 --> 00:07:10,410
it will join all of the elements in that list with no separation.

25775
00:07:11,770 --> 00:07:16,270
That's basically what we're trying to do here, right? So instead of all of this,

25776
00:07:17,080 --> 00:07:19,060
I can simply just write

25777
00:07:19,540 --> 00:07:22,360
" ".join,

25778
00:07:22,840 --> 00:07:26,410
and then pass in my list which is my password_list.

25779
00:07:26,920 --> 00:07:29,800
And this would be equal to my password.

25780
00:07:30,850 --> 00:07:35,560
And that replaces all of these lines of code. Right now

25781
00:07:35,590 --> 00:07:38,980
if I run my code as it is, you can see

25782
00:07:39,040 --> 00:07:44,040
I still generate my password and it still is super secure and super long

25783
00:07:44,740 --> 00:07:49,450
and in fact, you can modify that by changing how many password letters you want,

25784
00:07:49,450 --> 00:07:51,400
how many symbols, how many numbers,

25785
00:07:51,880 --> 00:07:55,390
and you can change these up to make it even more secure.

25786
00:07:55,780 --> 00:08:00,780
But we've greatly shortened this code from our day 5's work because we now

25787
00:08:00,970 --> 00:08:03,190
know things like list comprehensions,

25788
00:08:03,340 --> 00:08:05,830
and we've now learned the join method as well.

25789
00:08:06,550 --> 00:08:11,050
So this entire section is our password generator mechanism.

25790
00:08:11,530 --> 00:08:15,520
If we embed all of this inside a function

25791
00:08:15,550 --> 00:08:19,330
so we could call it generate_password

25792
00:08:19,390 --> 00:08:21,490
which is what it's pretty much going to do,

25793
00:08:22,000 --> 00:08:27,000
then we can call this function when the user presses on that generate password

25794
00:08:27,280 --> 00:08:28,113
button.

25795
00:08:28,300 --> 00:08:33,299
So let's add another command and add in our generate_password function here.

25796
00:08:35,799 --> 00:08:39,789
Now, what we don't want though is we don't want to print out the password,

25797
00:08:39,789 --> 00:08:44,049
that's not very useful for the user who's using a graphical user interface.

25798
00:08:44,500 --> 00:08:48,580
Instead, we want to populate this entry with the password.

25799
00:08:49,000 --> 00:08:50,260
Do you remember how to do that?

25800
00:08:50,620 --> 00:08:53,680
If you do, pause the video and complete this as a challenge.

25801
00:08:54,100 --> 00:08:56,100
If you don't, I'm to show you how to do it.

25802
00:08:58,020 --> 00:09:01,890
So it's the same way as what we did with our email.

25803
00:09:02,280 --> 00:09:06,750
Remember how we wanted our email entry to have a starting value,

25804
00:09:07,080 --> 00:09:10,110
the user's email. Well, we'll do the same thing here.

25805
00:09:10,470 --> 00:09:15,390
So we can tap into our password entry and we call the method insert.

25806
00:09:15,900 --> 00:09:19,650
Now the position that we want to insert our text is going to be at the very

25807
00:09:19,650 --> 00:09:20,220
start,

25808
00:09:20,220 --> 00:09:25,220
so the zeroth character, and the text that we want to insert into it is of course

25809
00:09:25,410 --> 00:09:29,160
our newly created password. So now

25810
00:09:29,160 --> 00:09:32,640
if I run my code, you can see as soon as I click on this button,

25811
00:09:32,940 --> 00:09:37,940
a random and beautifully complex password gets generated and populated in here.

25812
00:09:39,120 --> 00:09:42,180
Now, whenever I sign up for a new website,

25813
00:09:42,960 --> 00:09:45,390
then I can simply just type in the name of the website,

25814
00:09:45,660 --> 00:09:49,770
generate my password and hit add, and I'm already done.

25815
00:09:50,490 --> 00:09:54,390
Now we've incorporated our generate password functionality,

25816
00:09:54,660 --> 00:09:58,050
we're able to save all data to our data file.

25817
00:09:58,350 --> 00:10:00,270
The very last thing I want to show you

25818
00:10:00,270 --> 00:10:05,270
which is a really neat trick that you can do with Python is the ability to put

25819
00:10:05,430 --> 00:10:10,430
strings into the clipboard so that once we click generate_password,

25820
00:10:11,280 --> 00:10:12,570
this entire string,

25821
00:10:12,600 --> 00:10:17,250
I don't actually have to go ahead and highlight it and then copy it and then get

25822
00:10:17,250 --> 00:10:21,150
hold of it. Because in most cases, once I've generated my password,

25823
00:10:21,210 --> 00:10:25,620
I want to be able to immediately paste it into somewhere where I'm signing up

25824
00:10:25,620 --> 00:10:27,930
for, right? I want to be able to just simply hit

25825
00:10:28,550 --> 00:10:29,383
paste.

25826
00:10:30,410 --> 00:10:33,830
So how can we do that? Well, we can use a Python project

25827
00:10:34,130 --> 00:10:38,840
which is called pyperclip. And this is a cross-platform Python module

25828
00:10:39,170 --> 00:10:43,580
that just makes it so easy to work with copy and pasting for clipboard

25829
00:10:43,580 --> 00:10:47,870
functions. All we have to do is import it

25830
00:10:48,260 --> 00:10:52,490
and then we say, copy, and we pass in the text to be copied.

25831
00:10:52,880 --> 00:10:56,510
Or you can hit paste and it'll paste whatever is in the clipboard.

25832
00:10:56,990 --> 00:10:59,420
We're only really interested in these two parts.

25833
00:10:59,540 --> 00:11:04,310
So two lines of code gets us that functionality. Going back to our code,

25834
00:11:04,340 --> 00:11:05,630
scrolling to the very top,

25835
00:11:05,690 --> 00:11:09,680
let's go ahead and import our pyperclip.

25836
00:11:09,710 --> 00:11:13,640
Make sure that you spelled it right. You can check it against this link

25837
00:11:13,670 --> 00:11:15,500
which I've got in the course resources.

25838
00:11:16,370 --> 00:11:20,780
And once we type that you can see that PyCharm is already telling us you don't

25839
00:11:20,780 --> 00:11:23,330
have this package. So go ahead and install it.

25840
00:11:23,990 --> 00:11:27,320
Once it's been successfully installed (it's a very small module)

25841
00:11:27,620 --> 00:11:28,880
then we can use it.

25842
00:11:29,420 --> 00:11:33,440
And the part where we're going to use it is when we generate our password.

25843
00:11:33,950 --> 00:11:38,600
So once we've generated our password, we're going to call pyperclip

25844
00:11:41,360 --> 00:11:45,410
and we're going to call the copy method. Now, inside here,

25845
00:11:45,410 --> 00:11:48,440
we have to put the text that we want to copy into the clipboard,

25846
00:11:48,680 --> 00:11:50,660
which is going to be the password.

25847
00:11:51,860 --> 00:11:56,860
So now when we run and I generate a new password, right now

25848
00:11:57,160 --> 00:11:59,170
that password is already in my clipboard

25849
00:11:59,230 --> 00:12:04,230
and I can show you just by pasting it into here with command + v. That makes

25850
00:12:04,330 --> 00:12:07,450
it so much easier to work with our password manager

25851
00:12:07,750 --> 00:12:12,750
because all we have to do when we want to sign up to a new account is to simply

25852
00:12:12,820 --> 00:12:15,430
specify the website name

25853
00:12:15,730 --> 00:12:20,080
and then we've already got our email saved and we've got our password generated,

25854
00:12:20,320 --> 00:12:21,940
ready to paste into here.

25855
00:12:22,870 --> 00:12:27,870
So that should make it a lot easier to have very secure passwords and also a

25856
00:12:28,000 --> 00:12:31,930
place to check on what those passwords are when you forget.

25857
00:12:32,740 --> 00:12:35,230
I hope you enjoyed building this project with me today

25858
00:12:35,590 --> 00:12:39,010
and that you are going to put this into good use and make sure that all of your

25859
00:12:39,010 --> 00:12:44,010
websites and all of your data and all of your accounts are secured with a good

25860
00:12:44,650 --> 00:12:45,610
quality password.

25861
00:12:45,630 --> 00:12:45,930
All right.



25862
00:00:00,150 --> 00:00:01,560
Hey guys, welcome back to

25863
00:00:01,560 --> 00:00:05,610
100 Days of Code. Today is day 30

25864
00:00:05,700 --> 00:00:07,590
and to mark this milestone,

25865
00:00:07,620 --> 00:00:11,430
we're going to be learning about some more advanced Python topics,

25866
00:00:11,730 --> 00:00:14,280
such as errors, exceptions,

25867
00:00:14,610 --> 00:00:18,570
and also we're going to be learning how to save and load JSON data.

25868
00:00:19,050 --> 00:00:23,400
So that's all yet to come. First, we're going to be taking look at some of

25869
00:00:23,400 --> 00:00:28,400
the errors we've been getting and how to avoid crashing our app by handling those

25870
00:00:28,950 --> 00:00:29,783
errors.

25871
00:00:30,120 --> 00:00:34,500
Then we're going to take a look at this particular data format called

25872
00:00:34,530 --> 00:00:35,363
JSON 

25873
00:00:35,640 --> 00:00:40,020
and this is probably one of the most widely used data formats for transferring

25874
00:00:40,020 --> 00:00:43,110
data across the internet between applications.

25875
00:00:43,410 --> 00:00:46,050
And this is going to be something that's going to be helpful,

25876
00:00:46,080 --> 00:00:50,550
not just in Python, but in a lot of other programming languages as well.

25877
00:00:51,120 --> 00:00:54,630
And once we've understood all of that, then we're going to put it together,

25878
00:00:54,870 --> 00:00:58,560
we're going to use it to improve our existing password manager.

25879
00:00:59,040 --> 00:01:03,630
By the end of today, not only will we be able to save websites,

25880
00:01:04,080 --> 00:01:09,080
generate passwords and add it to our database of passwords,

25881
00:01:09,690 --> 00:01:13,080
but we're also going to be able to search through that database.

25882
00:01:13,080 --> 00:01:16,170
So we could type in the name of a website, hit search,

25883
00:01:16,260 --> 00:01:20,760
and it'll tell us what the email and password is that we need to use to log onto

25884
00:01:20,760 --> 00:01:22,560
that website. Plus,

25885
00:01:22,590 --> 00:01:26,010
we're going to make this a lot safer by handling some of the exceptions that

25886
00:01:26,010 --> 00:01:30,000
could happen and make sure that in all circumstances,

25887
00:01:30,360 --> 00:01:33,390
our app will work exactly as expected.

25888
00:01:34,050 --> 00:01:36,180
So all of that and more is coming up.

25889
00:01:36,570 --> 00:01:40,500
Head over to the next lesson and we'll get started by learning about errors and

25890
00:01:40,500 --> 00:01:41,190
exceptions.


25891
00:00:00,390 --> 00:00:03,780
In this lesson, we're going to talk about errors and exceptions.

25892
00:00:04,170 --> 00:00:06,810
I'll show you what happens when a program encounters

25893
00:00:06,840 --> 00:00:10,980
different types of errors and how you can write code to handle these situations.

25894
00:00:12,060 --> 00:00:15,810
To begin, I've created a brand new project called day-30

25895
00:00:16,020 --> 00:00:20,760
and I've created my main.py file. Now notice how inside my project,

25896
00:00:20,790 --> 00:00:24,990
there is only one code file at the moment. There is no data files,

25897
00:00:24,990 --> 00:00:28,140
no text files, nothing. In this situation

25898
00:00:28,170 --> 00:00:33,170
if I was to try and open up a particular file that doesn't exist and I tried to

25899
00:00:33,330 --> 00:00:35,100
read it, what do you think would happen?

25900
00:00:35,670 --> 00:00:38,610
So we're going to use our normal syntax with open,

25901
00:00:38,910 --> 00:00:42,480
and let's just make up a file name. So a_file.txt.

25902
00:00:42,990 --> 00:00:45,360
And I'm going to save that as file

25903
00:00:45,630 --> 00:00:50,630
and I'm going to take this file and try to read from it. Right now

25904
00:00:51,120 --> 00:00:55,710
if I run this code, then this is what happens.

25905
00:00:56,100 --> 00:00:59,520
I get a trace back and I get a error

25906
00:00:59,550 --> 00:01:03,570
which is the file not found error, which kind of makes sense

25907
00:01:03,570 --> 00:01:08,570
given that there really is no such file existing inside our folder where we're

25908
00:01:08,820 --> 00:01:11,520
telling it to search. That's not great.

25909
00:01:11,820 --> 00:01:15,900
And if this happens somewhere within our actual program, so here

25910
00:01:15,900 --> 00:01:20,100
I've got the password manager completed project from yesterday.

25911
00:01:20,640 --> 00:01:24,840
If in this case, I made a typo in this word

25912
00:01:24,870 --> 00:01:29,190
so instead of data.txt, I wrote daata.txt.

25913
00:01:29,850 --> 00:01:34,170
And instead of the append mode, I had the read mode. Well,

25914
00:01:34,170 --> 00:01:37,500
in this case, what would happen is exactly the same thing.

25915
00:01:37,500 --> 00:01:40,530
So I could have a website, have a password,

25916
00:01:40,680 --> 00:01:44,400
but as soon as I hit add, then we get our file

25917
00:01:44,400 --> 00:01:48,510
not found error. And notice how as soon as that error happens,

25918
00:01:48,840 --> 00:01:52,620
it actually doesn't continue because on the next few lines,

25919
00:01:52,650 --> 00:01:54,480
we've actually got these two lines of code

25920
00:01:54,780 --> 00:01:59,490
which deletes the entry inside the website entry and also the password entry.

25921
00:01:59,610 --> 00:02:04,200
But those lines of code are not being carried out because it's hit a stumbling

25922
00:02:04,200 --> 00:02:04,830
block.

25923
00:02:04,830 --> 00:02:09,389
It has not found the file that we're trying to open and we're trying to read.

25924
00:02:10,080 --> 00:02:12,630
So I'm going to restore the code to how it was previously,

25925
00:02:12,990 --> 00:02:16,950
but this is a good point to start thinking about errors because we've come

25926
00:02:16,950 --> 00:02:21,450
across a lot of errors, right? Including errors like key error.

25927
00:02:22,710 --> 00:02:23,730
So for example,

25928
00:02:23,730 --> 00:02:28,730
if we have a dictionary that has just one key-value pair and we somehow try to

25929
00:02:29,280 --> 00:02:31,620
get a value from that dictionary

25930
00:02:31,860 --> 00:02:34,830
by tapping into a key that doesn't exist,

25931
00:02:36,660 --> 00:02:40,890
then when we run this code, we will get a key error, right?

25932
00:02:41,070 --> 00:02:45,600
It can't actually pick out the value from this dictionary because this key that

25933
00:02:45,600 --> 00:02:49,740
we provided does not exist in that dictionary. Now,

25934
00:02:49,770 --> 00:02:53,550
some of the other popular ones that you've seen are the index error.

25935
00:02:54,690 --> 00:02:55,620
So in this case

25936
00:02:55,620 --> 00:03:00,620
we have a list and we basically are trying to get hold of an item from this list

25937
00:03:02,230 --> 00:03:06,880
at an index that doesn't exist. So remember the index starts at 0, 1,

25938
00:03:06,880 --> 00:03:11,110
2, and 3. There is nothing at 3. So again, when I run this,

25939
00:03:11,170 --> 00:03:14,110
we get an error and this is an index error.

25940
00:03:15,700 --> 00:03:20,200
And the final error that we've probably been used to seeing is the type error

25941
00:03:20,500 --> 00:03:23,800
where we're trying to do something with a particular piece of data,

25942
00:03:24,130 --> 00:03:27,550
but we cannot do that thing with a particular data type.

25943
00:03:28,150 --> 00:03:30,580
Let's say we have a piece of text abc

25944
00:03:30,760 --> 00:03:35,550
and we try to print it this text plus the number five,

25945
00:03:35,760 --> 00:03:39,870
so a string plus an integer. And again,

25946
00:03:39,870 --> 00:03:42,300
when I hit run it, again we get a type error.

25947
00:03:43,110 --> 00:03:47,250
All of these types of errors we've actually come across already and

25948
00:03:47,310 --> 00:03:48,600
all that we've done so far is

25949
00:03:48,960 --> 00:03:53,460
we've just used it as an indicator to tell us, wait a minute,

25950
00:03:53,460 --> 00:03:56,640
something's not quite right. We got to go and fix our code.

25951
00:03:57,270 --> 00:03:59,760
But life doesn't really work out

25952
00:03:59,760 --> 00:04:04,680
so neatly most of the time. In a lot of cases, it actually follows Morphy's law

25953
00:04:04,980 --> 00:04:09,300
which states that anything that can go wrong probably will, eventually at some

25954
00:04:09,300 --> 00:04:10,410
point, go wrong.

25955
00:04:10,800 --> 00:04:15,210
So we have to plan for these eventualities just as, you know,

25956
00:04:15,210 --> 00:04:17,279
your car is probably not going to break down,

25957
00:04:17,550 --> 00:04:22,550
but you need breakdown cover just in case that it does happen. In programming

25958
00:04:23,310 --> 00:04:28,310
what we can do is we can catch these exceptions. When something goes wrong

25959
00:04:28,410 --> 00:04:31,710
and in that moment we catch that exception,

25960
00:04:31,980 --> 00:04:34,380
then it doesn't have to fail catastrophically.

25961
00:04:34,890 --> 00:04:39,690
We can actually fail more gracefully or we can decide that something else should

25962
00:04:39,690 --> 00:04:40,523
happen.

25963
00:04:40,800 --> 00:04:45,060
Here's what the code looks like when we're dealing with these exceptions.

25964
00:04:45,360 --> 00:04:48,120
We have try, except, else and finally.

25965
00:04:48,120 --> 00:04:52,680
These are the four keywords that are really important when it comes to handling

25966
00:04:52,680 --> 00:04:53,513
exceptions.

25967
00:04:54,000 --> 00:04:59,000
Now the first keyword try comes for a block of code where you're executing

25968
00:05:00,510 --> 00:05:03,210
something that might cause an exception.

25969
00:05:03,570 --> 00:05:07,590
So basically you're trying to execute a piece of line. In most cases,

25970
00:05:07,590 --> 00:05:10,980
it probably will work, but sometimes it just might not.

25971
00:05:11,760 --> 00:05:15,060
Now the next step is to define the except block.

25972
00:05:15,510 --> 00:05:19,170
So this is the block of code that you want the computer to execute

25973
00:05:19,440 --> 00:05:21,060
if there were more was an exception.

25974
00:05:21,090 --> 00:05:25,860
If something went catastrophically wrong and it was not the way that you

25975
00:05:25,860 --> 00:05:29,730
expected it to go, then carry out this piece of code.

25976
00:05:30,780 --> 00:05:35,130
Now the else keyword allows you to find some code to execute

25977
00:05:35,400 --> 00:05:39,720
if there were no exceptions. If you tried this thing that might fail

25978
00:05:39,930 --> 00:05:43,560
but actually it didn't fail. You succeeded and there were no problems.

25979
00:05:43,800 --> 00:05:47,430
Well then, in this case, you're going to do whatever is inside the else block.

25980
00:05:47,970 --> 00:05:50,520
And then finally, we have the finally keyword

25981
00:05:50,850 --> 00:05:55,020
which basically is just the block of code to carry out

25982
00:05:55,230 --> 00:05:59,870
no matter what happens. If this thing that you tried failed

25983
00:05:59,900 --> 00:06:04,880
or if it succeeded, Honeybadger, I mean, finally doesn't actually care.

25984
00:06:05,630 --> 00:06:08,870
So no matter what happens with trying this line of code,

25985
00:06:09,140 --> 00:06:12,470
this finally block is always going to be executed

25986
00:06:12,770 --> 00:06:17,750
and it's usually used for cleaning things up or tidying things up at the end of

25987
00:06:17,960 --> 00:06:22,520
some sort of code execution. Let's take our file not found exception

25988
00:06:22,610 --> 00:06:27,260
and let's see how we can make this a lot safer by catching that exception.

25989
00:06:27,710 --> 00:06:32,710
The thing that we're going to try is to open up this file. Instead of using the

25990
00:06:33,290 --> 00:06:34,370
with format,

25991
00:06:34,400 --> 00:06:39,400
I'm actually just gonna straight up create a file and set it to open this

25992
00:06:39,500 --> 00:06:42,470
particular file path. So a_file.txt.

25993
00:06:43,010 --> 00:06:48,010
Now this is the line of code that can cause an error and it will cause an error

25994
00:06:48,530 --> 00:06:52,700
in our case because we don't have a file called a_file.txt.

25995
00:06:53,270 --> 00:06:57,620
So this line of code is going to go inside a try block.

25996
00:06:58,040 --> 00:07:02,840
So let's indent that. So this is the line of code that we're going to try. Now,

25997
00:07:02,840 --> 00:07:07,340
the next thing we'll define is the except block. Basically,

25998
00:07:07,340 --> 00:07:10,220
once we've tried running this line of code,

25999
00:07:10,610 --> 00:07:15,610
and if there was an exception that was thrown when we were running it like the

26000
00:07:15,710 --> 00:07:19,340
type error or in this case, it would be a file not found error,

26001
00:07:19,580 --> 00:07:22,310
well then, in that case, we're going to do something different.

26002
00:07:22,310 --> 00:07:26,210
We're going to let's say print, there was an error.

26003
00:07:27,530 --> 00:07:31,190
So now let's run this code and you can see straight away,

26004
00:07:31,220 --> 00:07:34,430
there was an error because this file doesn't exist.

26005
00:07:34,460 --> 00:07:38,810
So this failed and therefore this line of code was executed.

26006
00:07:39,200 --> 00:07:42,680
It's almost a little bit like we have an if statement and the

26007
00:07:42,680 --> 00:07:47,030
if statement is checking to see if something fails, well,

26008
00:07:47,030 --> 00:07:50,900
in that case, this is where it looks to see what it should do next.

26009
00:07:51,500 --> 00:07:55,310
Now just printing there was an error is kind of pointless.

26010
00:07:55,520 --> 00:08:00,520
What we actually want to do is to make sure that we don't actually fail so that

26011
00:08:01,220 --> 00:08:05,690
whatever happens, we succeed. So if there is a good alternative,

26012
00:08:05,750 --> 00:08:08,930
then that's what we're going to put inside the except block.

26013
00:08:09,530 --> 00:08:11,240
What we're going to do instead

26014
00:08:11,420 --> 00:08:15,830
if this file doesn't exist and we can't open it is we're just simply going to

26015
00:08:15,830 --> 00:08:18,440
create it. To create a new file,

26016
00:08:18,650 --> 00:08:21,140
remember that you can open up the file

26017
00:08:23,810 --> 00:08:28,810
and you can open it using the write mode because when you're inside write mode,

26018
00:08:29,900 --> 00:08:33,919
then what this open method is going to do is it's going to try and find this

26019
00:08:33,919 --> 00:08:36,380
file and open it. But if it doesn't exist,

26020
00:08:36,409 --> 00:08:41,090
it's just going to create it. Right now if I run this code again,

26021
00:08:41,120 --> 00:08:46,040
I want you to watch inside the day-30 folder because as soon as I hit run,

26022
00:08:46,250 --> 00:08:51,250
you'll notice that a_file.txt gets created because we tried opening it.

26023
00:08:51,650 --> 00:08:52,670
It didn't exist.

26024
00:08:52,940 --> 00:08:57,940
So it went into the except block and it actually just went ahead and created this

26025
00:08:58,050 --> 00:08:59,490
file from scratch.

26026
00:08:59,820 --> 00:09:03,900
Now this file is of course completely empty because we haven't told it to do

26027
00:09:03,900 --> 00:09:08,520
anything, but we could, in fact, get our file and write something to it.

26028
00:09:09,600 --> 00:09:14,460
We can put all of that inside the except block if we want to. Now,

26029
00:09:14,460 --> 00:09:19,460
one of the things that's giving us a warning here with the except keyword is if

26030
00:09:19,560 --> 00:09:23,910
you hover over it, it tells you that this is too broad an exception clause.

26031
00:09:24,360 --> 00:09:27,270
And according to the PEP 8 recommendations,

26032
00:09:27,540 --> 00:09:30,510
it tells us you should never use a bare except

26033
00:09:30,960 --> 00:09:34,320
and the reason for this is because when you have an except  clause,

26034
00:09:34,680 --> 00:09:38,580
then it's actually going to ignore all errors. For example,

26035
00:09:38,670 --> 00:09:39,870
if inside here

26036
00:09:40,020 --> 00:09:43,740
let's say I decided to do something that was also going to create an error,

26037
00:09:43,770 --> 00:09:45,480
but not the same kind of error.

26038
00:09:46,110 --> 00:09:50,490
So now I have a dictionary with a key and a value,

26039
00:09:50,850 --> 00:09:55,170
but let's say I tried to print some sort of value from that dictionary

26040
00:09:55,590 --> 00:09:58,440
and I use a non-existent key.

26041
00:09:58,890 --> 00:10:03,360
So you can see that this dictionary does not have a key that is named this

26042
00:10:03,660 --> 00:10:07,410
so this line is going to actually give us a key error.

26043
00:10:07,740 --> 00:10:10,830
But now, notice what happens when I hit run.

26044
00:10:11,700 --> 00:10:14,460
Absolutely nothing. I don't get any errors.

26045
00:10:14,670 --> 00:10:17,820
And the reason for this is because inside the try block

26046
00:10:18,150 --> 00:10:23,150
it's first trying to open up this file and indeed that file exists.

26047
00:10:23,550 --> 00:10:28,020
So it moves on to the next line. It creates a dictionary called a_dictionary

26048
00:10:28,080 --> 00:10:32,430
and that it tries to get hold of this value with this key

26049
00:10:32,430 --> 00:10:33,390
from that dictionary.

26050
00:10:33,810 --> 00:10:37,500
Now this line actually fails and creates an exception,

26051
00:10:37,830 --> 00:10:40,500
but that exception is caught right here

26052
00:10:40,920 --> 00:10:45,360
and it simply tells it to go ahead and create a file called a_file.txt

26053
00:10:45,630 --> 00:10:50,130
which it will go ahead and do. So this is not what we want at all.

26054
00:10:50,910 --> 00:10:51,660
Instead,

26055
00:10:51,660 --> 00:10:56,130
we want our exception to catch a specific situation.

26056
00:10:56,460 --> 00:11:01,460
We want to say that in the exception that we have a file not found error,

26057
00:11:01,950 --> 00:11:06,300
then this is what we want to do. And now if I run the code again,

26058
00:11:06,360 --> 00:11:08,850
you can see when now getting that key error

26059
00:11:08,910 --> 00:11:13,560
and it's telling us that this thing worked, so it didn't generate a file

26060
00:11:13,560 --> 00:11:14,430
not found error.

26061
00:11:14,730 --> 00:11:18,240
But the next thing that it tried when it tried to print this value,

26062
00:11:18,390 --> 00:11:19,770
it got a key error.

26063
00:11:21,150 --> 00:11:26,150
So we can actually have multiple exceptions. Instead of just except file

26064
00:11:26,670 --> 00:11:30,960
not found I can also say except key error and in this case,

26065
00:11:30,960 --> 00:11:35,850
I'm just going to print that key does not exist. Now, if I hit run,

26066
00:11:36,150 --> 00:11:39,810
I get no errors, but I do catch that exception

26067
00:11:40,170 --> 00:11:45,170
and I have this print statement executing. In addition to simply catching an

26068
00:11:46,770 --> 00:11:48,060
exception using

26069
00:11:48,060 --> 00:11:52,860
except, you can also get hold of the error message that would have normally

26070
00:11:52,870 --> 00:11:56,290
printed had we not had the exception called.

26071
00:11:56,650 --> 00:12:00,910
Normally, you would get key error and it would give you a message that tells you

26072
00:12:00,910 --> 00:12:02,500
which key was the problem.

26073
00:12:03,130 --> 00:12:07,810
If we catch our exception and we still want to get hold of that error message,

26074
00:12:08,110 --> 00:12:08,943
then we can say

26075
00:12:08,950 --> 00:12:13,150
except key error as error message.

26076
00:12:13,660 --> 00:12:18,490
And this means we can get hold of the error message that was generated from this

26077
00:12:18,490 --> 00:12:23,050
exception if it does occur. Instead of saying that key does not exist,

26078
00:12:23,110 --> 00:12:28,110
we can now take this as an f-string and we can say, the key, and we pass in the

26079
00:12:29,590 --> 00:12:30,820
error message right here.

26080
00:12:31,270 --> 00:12:36,270
So now I hit run again and it tells me the key 'sdfsdf' does not exist,

26081
00:12:37,300 --> 00:12:41,200
which is a lot more useful than simply saying the key does not exist.

26082
00:12:41,950 --> 00:12:46,930
So you can try, you can catch exceptions, you can catch other exceptions,

26083
00:12:47,230 --> 00:12:51,370
you can also get hold of the error message and use it when you catch the

26084
00:12:51,370 --> 00:12:56,050
exception. Now, the next keyword we mentioned was the else keyword

26085
00:12:56,620 --> 00:13:01,620
and this block of code is going to execute when the thing that you're trying all

26086
00:13:01,840 --> 00:13:05,830
succeeds. So if it managed to open up the file,

26087
00:13:05,830 --> 00:13:08,710
it managed to print this item from the dictionary

26088
00:13:08,980 --> 00:13:13,150
and there were no exceptions that were thrown from this block of code,

26089
00:13:13,210 --> 00:13:17,440
then it's going to jump to the else block. So what else do you want to do?

26090
00:13:18,100 --> 00:13:21,940
Well, maybe I actually want to read from this file,

26091
00:13:22,000 --> 00:13:23,860
so file.read,

26092
00:13:24,310 --> 00:13:27,130
and we save this as our content.

26093
00:13:27,850 --> 00:13:31,930
And then we go ahead and print our content. Now,

26094
00:13:31,960 --> 00:13:34,960
remember, if this file doesn't actually exist,

26095
00:13:35,080 --> 00:13:37,630
this else block is never going to be triggered.

26096
00:13:37,990 --> 00:13:40,780
So if I go ahead and simply delete this file

26097
00:13:43,630 --> 00:13:44,830
and I hit run,

26098
00:13:45,190 --> 00:13:50,190
you can see that this else block does not occur because it tried to do this,

26099
00:13:50,980 --> 00:13:51,940
it failed

26100
00:13:52,300 --> 00:13:57,300
and so it ended up jumping into the except block and it generated that file.

26101
00:13:58,570 --> 00:14:02,530
But now that that file has been created, the next time I hit run,

26102
00:14:02,800 --> 00:14:07,800
then this line of code is going to succeed and now it catches the next error in

26103
00:14:08,560 --> 00:14:12,700
that try block. So if I change this to a key

26104
00:14:12,700 --> 00:14:17,560
that it actually will recognize, then that next line also succeeds

26105
00:14:17,920 --> 00:14:22,920
and finally it gets to this block and it actually prints out the thing that's

26106
00:14:23,500 --> 00:14:27,250
inside a_file.txt which is just the word something.

26107
00:14:28,120 --> 00:14:31,510
So we've now got try, except, else,

26108
00:14:31,870 --> 00:14:35,950
and the last thing I want to show you is the keyword finally.

26109
00:14:36,460 --> 00:14:41,460
So this finally is basically some code that's gonna run no matter what happens.

26110
00:14:41,980 --> 00:14:42,813
And in our case,

26111
00:14:42,820 --> 00:14:47,800
the most appropriate thing to do here is actually to close down the file because

26112
00:14:47,800 --> 00:14:49,450
we're not using the with keyword

26113
00:14:49,750 --> 00:14:54,750
so our file would actually stay open if we actually had an exception. And I'm

26114
00:14:56,000 --> 00:14:57,650
going to go ahead and print

26115
00:14:57,970 --> 00:14:59,890
File was closed.

26116
00:15:00,790 --> 00:15:04,780
Now our code basically will open up this file

26117
00:15:05,170 --> 00:15:08,890
and no matter if it succeeded or if it failed,

26118
00:15:09,220 --> 00:15:14,220
it's going to close down that file so that we don't end up with an open file

26119
00:15:14,530 --> 00:15:18,400
that we're not doing anything with. So finally is not often used,

26120
00:15:18,730 --> 00:15:22,750
but sometimes it can be useful when you want some code to execute

26121
00:15:22,990 --> 00:15:27,990
no matter if the code you are trying is succeeded or failed. In the next lesson,

26122
00:15:29,440 --> 00:15:32,170
I'll show you how you can raise your own exceptions.


26123
00:00:00,630 --> 00:00:04,580
In this lesson, I'll show you how you can generate your own exceptions 

26124
00:00:04,580 --> 00:00:07,470
in case your code encounters unexpected situations.

26125
00:00:08,250 --> 00:00:13,140
So these are the four keywords are most important when it comes to error

26126
00:00:13,140 --> 00:00:15,360
handling and catching exceptions.

26127
00:00:15,870 --> 00:00:20,790
The final keyword that is related is one called raise.

26128
00:00:21,450 --> 00:00:25,890
And what this allows us to do is to raise our own exceptions.

26129
00:00:27,090 --> 00:00:27,930
For example,

26130
00:00:27,960 --> 00:00:32,729
let's say I decide that at the very end of all of our file,

26131
00:00:32,970 --> 00:00:37,140
no matter if this file went through or if it didn't, if there were an error

26132
00:00:37,140 --> 00:00:38,160
if there wasn't error,

26133
00:00:38,520 --> 00:00:43,110
I'm still going to raise an exception. And to raise an exception

26134
00:00:43,140 --> 00:00:47,460
all you have to do is tap into one of the known exception classes.

26135
00:00:47,670 --> 00:00:52,020
So let's say I just decided to raise a key error. Now, when I hit run

26136
00:00:52,050 --> 00:00:56,250
you can see no matter what happened, and in fact, there is no error.

26137
00:00:56,490 --> 00:01:00,270
I decided to raise this error and that's what I see right here.

26138
00:01:00,570 --> 00:01:02,760
I could change that to a type error,

26139
00:01:03,150 --> 00:01:05,640
and that is what will crash my code.

26140
00:01:06,150 --> 00:01:10,230
And I can even specify a message along with this error.

26141
00:01:10,230 --> 00:01:14,670
So I could say raise a type error and let's just say the message is,

26142
00:01:17,250 --> 00:01:21,510
and you can see now when it runs, it hits that type error. And it says,

26143
00:01:21,570 --> 00:01:26,490
this is an error that I made up. So when might you want to raise errors?

26144
00:01:27,210 --> 00:01:27,630
Well,

26145
00:01:27,630 --> 00:01:31,620
let's comment out all the code that we have because we have that type error at

26146
00:01:31,620 --> 00:01:34,320
the end so it's always going to crash the code no matter what.

26147
00:01:34,590 --> 00:01:37,200
So let's comment it out and let's start from scratch.

26148
00:01:37,560 --> 00:01:41,550
Let's say that I decided to calculate the body mass index or the BMI of

26149
00:01:41,550 --> 00:01:46,080
somebody's and I'm getting them to input their height as a float.

26150
00:01:46,140 --> 00:01:50,340
So this is going to be their height in meters and their weight as an integer.

26151
00:01:50,880 --> 00:01:55,880
Now I can calculate the BMI by taking the weight / height * height. 

26152
00:02:00,360 --> 00:02:05,360
And you can either do this and wrap it inside some parentheses,

26153
00:02:05,700 --> 00:02:09,240
or you can use the power function or even better

26154
00:02:09,240 --> 00:02:13,950
you can actually use the builtin exponent, so height to the power of 2.

26155
00:02:15,270 --> 00:02:18,870
No matter which way we use, we can print out the BMI.

26156
00:02:19,140 --> 00:02:24,140
But if I provide a height that is just an unrealistic non-human height,

26157
00:02:24,270 --> 00:02:27,180
lets say there were 45 meters tall,

26158
00:02:27,270 --> 00:02:29,880
like some sort of four storey building.

26159
00:02:30,390 --> 00:02:35,070
And then I gave them a weight, so let's say they are 67 kilos.

26160
00:02:35,400 --> 00:02:39,360
Then obviously a mistake has been made somewhere in the height, right?

26161
00:02:39,360 --> 00:02:42,210
Because this is just not within the normal human range.

26162
00:02:42,210 --> 00:02:45,990
This is like Godzilla's height. If I go ahead and hit enter,

26163
00:02:46,260 --> 00:02:50,190
you can see that we get at BMI and it is calculated correctly

26164
00:02:50,520 --> 00:02:54,870
and there are no errors because everything is perfectly valid other than the

26165
00:02:54,870 --> 00:02:59,040
fact that this height should not really ever go over 3 meters.

26166
00:02:59,740 --> 00:03:03,100
In this case, we might want to raise our own exception.

26167
00:03:03,520 --> 00:03:08,520
So we can go ahead and say that if the height is greater than 3 meters,

26168
00:03:11,050 --> 00:03:13,720
well, in that case, it's probably not a valid height.

26169
00:03:14,020 --> 00:03:17,560
So we can go ahead and raise a value error.

26170
00:03:17,950 --> 00:03:22,210
So this is an error that says that whatever value was entered

26171
00:03:22,570 --> 00:03:25,210
as the argument is probably wrong.

26172
00:03:25,720 --> 00:03:28,300
And we can accompany that with a message.

26173
00:03:29,410 --> 00:03:33,310
Human height should not be over 3 meters.

26174
00:03:34,780 --> 00:03:38,920
Now, when we run our code and the user mistakenly types

26175
00:03:38,980 --> 00:03:43,540
a wrong height, then it's going to actually give us this error

26176
00:03:43,570 --> 00:03:47,290
and it won't proceed to give them an inaccurate BMI.

26177
00:03:47,980 --> 00:03:51,310
So this is how you might raise your own exceptions

26178
00:03:51,640 --> 00:03:55,360
when there are certain things that are not caught by the code because it's

26179
00:03:55,360 --> 00:04:00,340
perfectly valid code, but it's in fact going to generate the wrong results.

26180
00:04:01,960 --> 00:04:05,950
Now that we've seen all of these aspects of exceptions,

26181
00:04:06,400 --> 00:04:10,300
I want you to have a go at catching some exceptions that can commonly occur.

26182
00:04:10,810 --> 00:04:13,840
So head over to the next lesson where I've got an exercise for you.


26183
00:00:00,210 --> 00:00:04,770
Now that you've learned some of the theory around error handling and catching

26184
00:00:04,770 --> 00:00:06,720
these exceptions and handling them,

26185
00:00:07,170 --> 00:00:11,310
then we're going to put all of that knowledge to practice by completing a couple

26186
00:00:11,310 --> 00:00:16,260
of code exercises. So you're going to hand over to the Repl.it coding exercises

26187
00:00:16,350 --> 00:00:18,990
which you'll find in the course resources,

26188
00:00:19,320 --> 00:00:23,910
and the one that I want you to complete is day 30.1 index error handling.

26189
00:00:24,540 --> 00:00:29,220
So this is the starting code. And if we hit run, you can see that immediately

26190
00:00:29,250 --> 00:00:34,250
we get a error, and it is the index error telling us that list index is out of

26191
00:00:35,400 --> 00:00:36,233
range.

26192
00:00:36,540 --> 00:00:41,540
Your job is to fix this code and catch the errors so that it no longer causes a

26193
00:00:43,230 --> 00:00:46,800
crash like this. Have a look through the instructions,

26194
00:00:47,160 --> 00:00:49,110
pause the video and complete the 

26195
00:00:49,130 --> 00:00:49,963
 challenge.

26196
00:00:53,630 --> 00:00:56,900
The problem here is that we're calling this function, make_pie,

26197
00:00:57,380 --> 00:00:59,270
which takes a index number

26198
00:00:59,660 --> 00:01:04,340
which is used to pick out a particular item from our list of fruits. Now,

26199
00:01:04,370 --> 00:01:07,640
if we try to get hold of the item at index four

26200
00:01:07,850 --> 00:01:11,630
which is way beyond the number of items that's in this list,

26201
00:01:11,900 --> 00:01:13,910
then we're going to get this index error.

26202
00:01:14,570 --> 00:01:19,550
What we're going to do instead is when this happens and we try to pick something

26203
00:01:19,580 --> 00:01:21,230
out of the list that doesn't exist,

26204
00:01:21,680 --> 00:01:25,340
we're just going to print out the default output, which is just

26205
00:01:25,370 --> 00:01:27,470
Fruit pie. The part of our

26206
00:01:27,470 --> 00:01:30,740
code that is prone to errors is this line right here.

26207
00:01:31,220 --> 00:01:34,100
So that is what we're going to trap inside a 

26208
00:01:34,160 --> 00:01:36,590
try block. So the idea is

26209
00:01:37,130 --> 00:01:41,720
try this, and if it fails, so in the case where there's an exception,

26210
00:01:41,990 --> 00:01:44,210
then do something else. Now,

26211
00:01:44,270 --> 00:01:47,360
except the fact that we're not just going to use a broad stroke

26212
00:01:47,390 --> 00:01:51,470
except because that means it's going to catch all errors and it's going to do

26213
00:01:51,470 --> 00:01:55,850
this no matter what type of error. Instead, we want to be more specific

26214
00:01:55,880 --> 00:01:59,660
and we want to say, except in the case of an index error,

26215
00:02:00,020 --> 00:02:04,250
same as what we see being thrown right here, well then in that case,

26216
00:02:04,250 --> 00:02:05,900
we're going to do something a little bit different.

26217
00:02:06,290 --> 00:02:08,600
We're just going to print the words fruit

26218
00:02:09,139 --> 00:02:11,570
pie. However,

26219
00:02:11,810 --> 00:02:14,810
if this thing that we tried succeeded,

26220
00:02:15,200 --> 00:02:18,230
then we go into the else block. And in that case,

26221
00:02:18,260 --> 00:02:22,010
we're going to get a hold of the fruit and we're going to add pie to the end of

26222
00:02:22,010 --> 00:02:24,290
it. So now if I hit run,

26223
00:02:24,350 --> 00:02:28,790
you can see that we get fruit pie being printed and there's no more errors.

26224
00:02:29,120 --> 00:02:31,610
And our program is no longer crashing.

26225
00:02:32,600 --> 00:02:35,090
So did you manage to complete this coding challenge?

26226
00:02:35,450 --> 00:02:40,250
If not, be sure to go back to the last lesson and review some of these key words

26227
00:02:40,310 --> 00:02:44,780
and what they're used for. Otherwise, head over to the next lesson where there's

26228
00:02:44,780 --> 00:02:46,460
another coding challenge waiting for you.


26229
00:00:00,420 --> 00:00:02,490
Now that you've handled index errors,

26230
00:00:02,550 --> 00:00:05,850
we're gonna handle a different type of error in this coding exercise.

26231
00:00:06,390 --> 00:00:10,890
We're going to look at key errors. So in this case, again, when I hit run,

26232
00:00:10,920 --> 00:00:14,610
my code is going to crash and I get a key error.

26233
00:00:15,180 --> 00:00:20,180
And the reason is because I am looping through this list of dictionary objects

26234
00:00:21,180 --> 00:00:26,010
and what I'm trying to do is I'm trying to get a hold of all of the likes from

26235
00:00:26,040 --> 00:00:27,780
each of these Facebook posts.

26236
00:00:28,170 --> 00:00:31,530
So imagine you have a whole bunch of Facebook posts and you want to know how

26237
00:00:31,530 --> 00:00:34,170
many likes did you get in total this month? Well,

26238
00:00:34,170 --> 00:00:36,930
you might get some piece of data that looks a bit like this,

26239
00:00:37,170 --> 00:00:38,520
a list of dictionaries.

26240
00:00:39,090 --> 00:00:43,140
And what you're essentially trying to do is you're trying to loop through every

26241
00:00:43,140 --> 00:00:44,640
post inside that list

26242
00:00:45,000 --> 00:00:50,000
and you're trying to get a hold of the total likes by adding the existing number

26243
00:00:50,610 --> 00:00:53,520
to the number of likes for each post.

26244
00:00:54,300 --> 00:00:58,200
The key error occurs because some of these posts actually have no likes.

26245
00:00:58,260 --> 00:01:02,070
So that key doesn't actually exist. And that's why we get this error.

26246
00:01:02,580 --> 00:01:06,630
So I want you to have a look through the instructions and see if you can fix

26247
00:01:06,630 --> 00:01:11,340
this code so that we no longer have these errors. Essentially, if a post

26248
00:01:11,340 --> 00:01:14,550
doesn't have many likes, you're gonna treat it as zero likes.

26249
00:01:15,120 --> 00:01:17,340
Pause the video and complete this challenge.

26250
00:01:19,830 --> 00:01:24,060
Okay, so the key part that we need to fix is inside here.

26251
00:01:24,750 --> 00:01:27,630
Now, what we're going to do is inside this for loop,

26252
00:01:27,660 --> 00:01:32,660
we're going to add a try statement so that this line of code is inside the try

26253
00:01:33,690 --> 00:01:36,240
block. This is the thing that we're going to try,

26254
00:01:36,270 --> 00:01:40,710
and this is the particular part that might fail. Now, if it does fail,

26255
00:01:40,710 --> 00:01:42,960
we can catch it using an except.

26256
00:01:43,260 --> 00:01:47,340
But we're going to be more specific than just except. We're going to say,

26257
00:01:47,430 --> 00:01:50,310
except in the case of a key error

26258
00:01:50,340 --> 00:01:54,510
which is the problem that we're coming up against right now. Basically,

26259
00:01:54,660 --> 00:01:59,190
if we try to fetch a particular value from this dictionary

26260
00:01:59,400 --> 00:02:01,260
using a key that doesn't exist,

26261
00:02:01,320 --> 00:02:05,550
then this is the block that we're going to enter. And so inside this block,

26262
00:02:05,760 --> 00:02:10,759
we're going to either add a zero to our total likes or alternatively,

26263
00:02:12,450 --> 00:02:15,120
an even easier way is we can just say pass.

26264
00:02:15,600 --> 00:02:18,270
So in the case where we generate a key error,

26265
00:02:18,300 --> 00:02:22,140
we're just going to skip and then the code is going to continue running,

26266
00:02:22,440 --> 00:02:26,430
which means it's going to get to the end and it's going to loop back to the next

26267
00:02:26,430 --> 00:02:30,720
post in our list of posts. So now if I hit run,

26268
00:02:30,960 --> 00:02:35,580
you can see that I actually get the total number of likes being printed because

26269
00:02:35,580 --> 00:02:40,200
it's looping through all the posts in our list, and for the ones which have

26270
00:02:40,200 --> 00:02:40,680
that key

26271
00:02:40,680 --> 00:02:45,680
likes, it adds the number from the value of that key to our total number of likes.

26272
00:02:46,650 --> 00:02:48,180
But if we get a key error,

26273
00:02:48,210 --> 00:02:51,900
then we simply pass and we don't add any numbers at all.

26274
00:02:52,770 --> 00:02:57,770
This is how we can solve this particular situation. In this solution

26275
00:02:58,080 --> 00:03:02,710
it doesn't matter if you pass or if you simply said total likes plus equals

26276
00:03:03,040 --> 00:03:06,010
zero. It doesn't actually matter what you do,

26277
00:03:06,010 --> 00:03:09,940
as long as you handle this particular exception

26278
00:03:10,000 --> 00:03:14,770
and you do something to address the fact that some of these posts don't have a

26279
00:03:14,770 --> 00:03:15,700
like key.

26280
00:03:16,480 --> 00:03:20,680
Have a look through the solution code if you want to on Repl.it.

26281
00:03:21,010 --> 00:03:23,260
But otherwise, head over to the next lesson

26282
00:03:23,590 --> 00:03:27,910
and we've got a final coding challenge for you to try out exception handling.

26283
00:03:28,360 --> 00:03:28,840
I'll see you there.


26284
00:00:00,180 --> 00:00:02,340
Now for the final coding exercise,

26285
00:00:02,370 --> 00:00:06,060
we're actually going to jump into a previous project that we created.

26286
00:00:06,480 --> 00:00:10,230
This is the NATO alphabet project that we created a few days ago.

26287
00:00:10,770 --> 00:00:12,150
And it's pretty simple.

26288
00:00:12,300 --> 00:00:16,590
All it does is it takes the data that's inside this nato_phonetic_alphabet.

26289
00:00:16,590 --> 00:00:17,423
csv,

26290
00:00:17,730 --> 00:00:22,730
and it uses that to create a dictionary so that we have each letter as the key

26291
00:00:25,230 --> 00:00:30,230
and the actual phonetic alphabet as the value for each of those keys.

26292
00:00:32,189 --> 00:00:34,140
Now, if I go ahead and hit run,

26293
00:00:35,250 --> 00:00:39,240
you can see that the entire phonetic alphabet dictionary is printed here

26294
00:00:39,510 --> 00:00:42,570
and this is the structure of that dictionary. Now,

26295
00:00:42,570 --> 00:00:47,570
the next thing it asks us is to enter a word and it takes that word and creates

26296
00:00:49,140 --> 00:00:54,140
a new list using list comprehension that matches each of the letters to the

26297
00:00:55,860 --> 00:01:00,420
correct phonetic alphabet. So Angela becomes Alpha November Golf Echo

26298
00:01:00,420 --> 00:01:01,320
Lima Alpha.

26299
00:01:01,680 --> 00:01:05,970
So you should remember all of this from creating this project a few days ago.

26300
00:01:06,600 --> 00:01:06,870
Now,

26301
00:01:06,870 --> 00:01:11,870
what we're going to do is we're going to update and refresh this project so that

26302
00:01:12,780 --> 00:01:15,840
it's even better than before. Now,

26303
00:01:15,870 --> 00:01:20,870
if you don't have access to the final project of this NATO alphabet project,

26304
00:01:21,330 --> 00:01:25,110
then don't worry. Just head over to the course resources for today's lessons

26305
00:01:25,440 --> 00:01:29,880
and you'll find a starting file that matches what you see here precisely.

26306
00:01:30,990 --> 00:01:35,990
Now your job is to address a particular situation because we're relying on the

26307
00:01:37,080 --> 00:01:39,630
user to enter a word.

26308
00:01:40,260 --> 00:01:44,670
Then if they enter something that is actually not in this dictionary,

26309
00:01:44,940 --> 00:01:48,010
let's say they entered just a number, 1234,

26310
00:01:48,510 --> 00:01:52,740
then we will get a crash and we get a key error in this case.

26311
00:01:53,220 --> 00:01:58,220
Now what we want to happen instead is for us to enter a word and we enter

26312
00:01:58,440 --> 00:02:01,260
something that's complete nonsense. We hit enter.

26313
00:02:01,410 --> 00:02:05,190
And it tells us that the sorry, only letters in the alphabet please.

26314
00:02:05,520 --> 00:02:08,940
And then it goes back to give us that same prompt again.

26315
00:02:09,449 --> 00:02:12,540
And if we keep refusing and we keep typing numbers,

26316
00:02:12,840 --> 00:02:17,340
then it's going to continuously give us this feedback until we actually end up

26317
00:02:17,370 --> 00:02:20,970
typing something that contains only letters in the alphabet

26318
00:02:21,390 --> 00:02:24,660
and it actually generates the phonetic alphabet for us.

26319
00:02:25,230 --> 00:02:29,160
This is the goal that we're trying to achieve. And in order to do this,

26320
00:02:29,280 --> 00:02:32,400
you're going to have to use your skills of exception handling.

26321
00:02:33,000 --> 00:02:35,160
Have a think about how you might achieve this,

26322
00:02:35,520 --> 00:02:38,190
pause the video and complete this challenge.

26323
00:02:41,520 --> 00:02:46,350
Now that we know what we're aiming for, the next step is to actually try to get

26324
00:02:46,350 --> 00:02:50,670
there. Now we know that the part of the code that is prone to error

26325
00:02:51,030 --> 00:02:54,780
or can occasionally be problematic is this line right here,

26326
00:02:55,350 --> 00:03:00,070
because we're going through this phonetic dictionary and we're passing it a key and

26327
00:03:00,070 --> 00:03:04,480
that key depends entirely on what the user puts into this input.

26328
00:03:04,960 --> 00:03:09,760
So that means if they put something that is a number and it doesn't exist inside

26329
00:03:09,760 --> 00:03:12,700
the phonetic dictionary, that's when we get our key error.

26330
00:03:13,270 --> 00:03:17,500
So this is the line that we want to put behind a try block.

26331
00:03:19,000 --> 00:03:19,930
Like this.

26332
00:03:20,560 --> 00:03:25,560
And when we try out this line and if it actually fails and we end up with an

26333
00:03:26,050 --> 00:03:28,840
exception, then we want to catch that exception.

26334
00:03:29,140 --> 00:03:34,030
But we want to catch the specific exception, which is the key error. Now,

26335
00:03:34,030 --> 00:03:38,470
what do we want to do when we actually have an exception when that key doesn't

26336
00:03:38,470 --> 00:03:43,180
exist? Well, it means that the user entered something into the input

26337
00:03:43,270 --> 00:03:46,390
that was not a letter from the alphabet.

26338
00:03:46,930 --> 00:03:48,700
So we're going to give them some feedback.

26339
00:03:48,730 --> 00:03:53,020
We're simply going to use a print statement to print 'Sorry,

26340
00:03:53,080 --> 00:03:57,850
only letters in the alphabet please.' Hopefully that way they will learn

26341
00:03:57,970 --> 00:04:02,590
and they will only write letters instead of trying to type other things like

26342
00:04:02,590 --> 00:04:05,950
symbols or numbers. Now,

26343
00:04:05,980 --> 00:04:09,430
if everything went well, so in the else case,

26344
00:04:09,460 --> 00:04:12,430
then we actually want to print out the output list.

26345
00:04:12,700 --> 00:04:14,500
Because if this line succeeded,

26346
00:04:14,800 --> 00:04:19,750
then we will have that to print out to the user. Now,

26347
00:04:19,779 --> 00:04:23,560
the only problem here is if we run the code as it is right now,

26348
00:04:23,980 --> 00:04:27,580
we can enter a word, so let's try something that's not a word,

26349
00:04:28,150 --> 00:04:31,660
and we get that feedback, but our code ends.

26350
00:04:32,110 --> 00:04:37,110
So if we want our code to repeat so that we ask the user for a word again,

26351
00:04:37,990 --> 00:04:42,160
then we're going to have to have some sort of mechanism like a loop or a

26352
00:04:42,160 --> 00:04:44,530
function. So I think in this case,

26353
00:04:44,530 --> 00:04:49,530
the best thing to do is actually to create a function which I'll call generate_

26354
00:04:51,310 --> 00:04:52,180
phonetic.

26355
00:04:53,230 --> 00:04:57,550
And this function is going to contain all of this code.

26356
00:04:58,090 --> 00:05:00,310
So in order to run this function,

26357
00:05:00,400 --> 00:05:03,640
we of course have to call it outside of the function.

26358
00:05:03,910 --> 00:05:06,580
So once the code runs down to here,

26359
00:05:06,910 --> 00:05:11,110
it sees this line and it will run all the code inside this function.

26360
00:05:11,860 --> 00:05:16,860
But what we also want to do is if there was the case of a key error where the user

26361
00:05:18,400 --> 00:05:19,750
typed in something wrong,

26362
00:05:20,020 --> 00:05:23,440
then we want to give them the opportunity to type in something again.

26363
00:05:23,560 --> 00:05:26,950
So we want to be able to run this line of code again.

26364
00:05:27,730 --> 00:05:32,730
The easiest way of doing that is to simply call this function right here.

26365
00:05:33,550 --> 00:05:37,660
So that way, if they typed in something wrong, we give them some feedback

26366
00:05:37,930 --> 00:05:40,870
and then we go to the very start of this function once again,

26367
00:05:41,200 --> 00:05:44,980
and we get them to type in a new word using this input.

26368
00:05:45,580 --> 00:05:50,580
And then we can see if that was valid or if it was not and deal with that

26369
00:05:50,830 --> 00:05:54,220
accordingly. So now when we run our code,

26370
00:05:54,310 --> 00:05:56,290
it won't generate any errors,

26371
00:05:56,560 --> 00:06:01,220
but instead it gives me some feedback and tells me to enter another word.

26372
00:06:02,300 --> 00:06:06,290
So this is more of a real-life implementation of error handling,

26373
00:06:06,620 --> 00:06:11,620
making sure that we are validating and checking the user's inputs and addressing

26374
00:06:12,410 --> 00:06:15,980
these situations ahead of time using exception handling.

26375
00:06:17,390 --> 00:06:21,530
Now that we've taken a good look at exception handling, in the next lesson

26376
00:06:21,650 --> 00:06:25,940
we're going to go back to our password manager project and use the skills that

26377
00:06:25,940 --> 00:06:28,190
we've learned to improve it even further.

26378
00:06:28,880 --> 00:06:31,280
So, for all of that and more, I'll see you on the next lesson.


26379
00:00:00,180 --> 00:00:04,560
The goal is to take our password manager to the next level.

26380
00:00:04,980 --> 00:00:09,150
And in order to do that, we need to add a search functionality.

26381
00:00:09,240 --> 00:00:12,930
It's not good enough just to look through the data file anymore.

26382
00:00:13,470 --> 00:00:18,180
What we want to be able to do is the type a website into the website entry,

26383
00:00:18,420 --> 00:00:19,560
and then hit search

26384
00:00:19,590 --> 00:00:24,540
and we get a pop up showing us our email and the password that was saved for

26385
00:00:24,540 --> 00:00:27,060
that website. So this is the goal.

26386
00:00:28,050 --> 00:00:32,070
But where we're currently at is we have a text file

26387
00:00:32,520 --> 00:00:36,870
which contains the name of the website, the email and the password.

26388
00:00:37,230 --> 00:00:39,480
This is very difficult to search

26389
00:00:39,510 --> 00:00:42,840
and this is a really terrible format to work with.

26390
00:00:43,350 --> 00:00:48,090
So we're going to be leveling up our data storage in our password manager

26391
00:00:48,420 --> 00:00:53,420
and we're going to switch from saving data straight to a text file to a fancier

26392
00:00:54,090 --> 00:00:57,720
data format, which is called JSON. Nope,

26393
00:00:57,780 --> 00:01:01,770
this is not the latest hottest DJ on the block.

26394
00:01:01,800 --> 00:01:04,019
It's actually JSON,

26395
00:01:04,080 --> 00:01:06,930
which stands for JavaScript Object Notation.

26396
00:01:07,620 --> 00:01:11,370
This was something that was designed originally for JavaScript

26397
00:01:11,700 --> 00:01:16,080
but because it has such a simple structure and it's so easy to understand and

26398
00:01:16,080 --> 00:01:19,620
work with that it's been adopted by many, many different fields,

26399
00:01:19,710 --> 00:01:20,880
including Python.

26400
00:01:21,480 --> 00:01:25,290
This is probably one of the most popular ways of transferring data,

26401
00:01:25,590 --> 00:01:28,500
especially when you're transferring data across the internet.

26402
00:01:29,010 --> 00:01:30,990
So this is what we're going to be learning about.

26403
00:01:31,260 --> 00:01:33,780
And for those of you looking at this slide,

26404
00:01:34,080 --> 00:01:37,800
you might've already realized that it's kind of similar to the dictionaries

26405
00:01:37,800 --> 00:01:40,080
that we've been working with in Python, right?

26406
00:01:40,890 --> 00:01:45,890
A JSON is essentially composed of a bunch of nested lists and dictionaries,

26407
00:01:46,920 --> 00:01:50,550
and it has that key value pair data structure.

26408
00:01:51,090 --> 00:01:56,090
This is essentially what we're aiming for so that we can store our data in this

26409
00:01:56,520 --> 00:01:57,353
format

26410
00:01:57,420 --> 00:02:02,420
and we'll be able to easily load up this data and search through it for the

26411
00:02:02,730 --> 00:02:07,730
particular website that we want the information for. To work with JSON data in

26412
00:02:08,610 --> 00:02:12,090
Python, we can use the inbuilt JSON library,

26413
00:02:12,660 --> 00:02:15,690
and we're going to use it to write, read,

26414
00:02:15,900 --> 00:02:19,830
and update data to a JSON file. To begin.

26415
00:02:19,890 --> 00:02:22,170
I'm going to simplify our code a little bit.

26416
00:02:22,260 --> 00:02:26,640
I'm going to get rid of this message box, which asked the user OK 

26417
00:02:26,640 --> 00:02:30,540
or cancel. We're just going to assume that once they click add,

26418
00:02:30,840 --> 00:02:33,180
then they're happy with email and password.

26419
00:02:33,900 --> 00:02:36,450
So now that we've cut down that little bit of code,

26420
00:02:36,480 --> 00:02:38,970
it makes this a little bit easier to understand.

26421
00:02:39,540 --> 00:02:43,740
All that we're doing here is we're checking to make sure that the length of the

26422
00:02:43,740 --> 00:02:48,390
website entry and the length of the password entry is equal to zero.

26423
00:02:48,900 --> 00:02:52,620
And you might still have the length checking for the email entry,

26424
00:02:52,920 --> 00:02:55,680
but remember that at the end of previous lessons,

26425
00:02:55,980 --> 00:02:58,770
we actually inserted a default value.

26426
00:02:59,110 --> 00:03:02,560
So we can actually skip that check as well if you wanted to.

26427
00:03:03,820 --> 00:03:07,510
The reason why we want our code as simple as possible is so that when we're

26428
00:03:07,510 --> 00:03:11,260
working with the JSON and we're learning about how to work with it,

26429
00:03:11,620 --> 00:03:13,270
as long as everything else is simple,

26430
00:03:13,450 --> 00:03:17,410
then we can focus on the new things that we're learning. In this case,

26431
00:03:17,440 --> 00:03:20,590
instead of opening a data.txt file,

26432
00:03:20,950 --> 00:03:24,820
I'm going to change the data format to a .json.

26433
00:03:25,750 --> 00:03:28,450
And instead of using the append mode,

26434
00:03:28,810 --> 00:03:33,810
I'm going to use the write mode because I'm going to be writing to this data.

26435
00:03:34,990 --> 00:03:38,950
json file. Now, in order to write to a JSON file,

26436
00:03:39,010 --> 00:03:42,100
we don't use this line of code. Instead,

26437
00:03:42,340 --> 00:03:45,400
we use a method called json.dump,

26438
00:03:46,420 --> 00:03:50,860
and that, of course, requires us to import the JSON module

26439
00:03:51,400 --> 00:03:55,030
which should be inbuilt to Python so you don't actually have to install it.

26440
00:03:55,840 --> 00:03:58,840
Now, once we've imported our JSON module,

26441
00:03:58,870 --> 00:04:01,570
we can say json.dump.

26442
00:04:02,200 --> 00:04:06,310
And this takes a number of inputs, but the most important

26443
00:04:06,670 --> 00:04:10,450
are the things you want to dump and the file that you want to dump it to.

26444
00:04:10,960 --> 00:04:14,590
The data that we want to put in here should go in as a dictionary.

26445
00:04:15,220 --> 00:04:18,790
Essentially, what we want to create is a new dictionary

26446
00:04:18,820 --> 00:04:23,050
which I'll call new_data and it's going to be a nested dictionary.

26447
00:04:23,560 --> 00:04:26,530
So the first level key is going to be the website,

26448
00:04:26,740 --> 00:04:29,470
because this is what we're going to be searching through eventually.

26449
00:04:30,100 --> 00:04:33,640
And the website is going to, itself, contain a dictionary.

26450
00:04:34,360 --> 00:04:38,140
Now this dictionary contains two keys, the email,

26451
00:04:38,650 --> 00:04:41,080
and also the password.

26452
00:04:42,490 --> 00:04:45,580
The values for each of these are pretty self-explanatory,

26453
00:04:45,580 --> 00:04:50,580
it's the email that we got from this line of code and the password is the

26454
00:04:50,680 --> 00:04:53,380
password that we got from this line of code.

26455
00:04:55,720 --> 00:04:59,110
Now that we've created this new dictionary called new_data,

26456
00:04:59,530 --> 00:05:03,610
well that is what we're going to use to dump into our JSON file.

26457
00:05:04,060 --> 00:05:08,830
Let's go ahead and dump our new data. So that's the first input. Now,

26458
00:05:08,830 --> 00:05:13,390
the next input is going to be the data file that we want to put it into.

26459
00:05:13,870 --> 00:05:17,230
So that is going to be the file that we opened up inside this line.

26460
00:05:18,190 --> 00:05:21,940
Let's provide our data file as the location to dump this data.

26461
00:05:22,570 --> 00:05:25,540
And now if I go ahead and hit run

26462
00:05:27,040 --> 00:05:32,040
and I create a new entry for my Amazon website password, generate the password,

26463
00:05:32,680 --> 00:05:33,520
hit add,

26464
00:05:34,600 --> 00:05:38,770
then you can see that we've got our brand new data.json file

26465
00:05:38,800 --> 00:05:42,070
that's just been created. So just as a quick reminder,

26466
00:05:42,100 --> 00:05:45,880
when you open a file in write mode, if that file doesn't exist,

26467
00:05:45,910 --> 00:05:50,590
it will actually create it. So we've created this new file, data.json,

26468
00:05:50,770 --> 00:05:54,910
and we've dumped the data that we entered into that file.

26469
00:05:55,030 --> 00:05:56,500
So now if I open this up,

26470
00:05:56,740 --> 00:06:01,740
you can see we've got a JSON format in here and we've got our Amazon website

26471
00:06:02,390 --> 00:06:04,370
and all of its associated data.

26472
00:06:05,540 --> 00:06:09,500
Notice how this data is not very easy to read for a human.

26473
00:06:10,100 --> 00:06:14,210
So we can actually improve that by adding one other argument.

26474
00:06:14,690 --> 00:06:17,240
And it's an argument called indent. This,

26475
00:06:17,240 --> 00:06:22,240
we can provide the number of spaces to indent all the JSON data so that it

26476
00:06:22,460 --> 00:06:24,350
becomes much easier to read.

26477
00:06:24,680 --> 00:06:29,030
So I'm going to go ahead and delete everything that's in here and I'm gonna run

26478
00:06:29,060 --> 00:06:32,300
the code again. And this time,

26479
00:06:32,660 --> 00:06:36,770
once I save this data into my data.json,

26480
00:06:37,040 --> 00:06:41,510
you can see everything is all indented and it's much easier for the human to

26481
00:06:41,510 --> 00:06:42,343
read.

26482
00:06:43,070 --> 00:06:47,210
Now that we've seen how we can write data to a JSON file,

26483
00:06:47,780 --> 00:06:52,780
the next step I want to show you is how you can load data from the JSON file or

26484
00:06:53,420 --> 00:06:57,200
how to read from it. To read JSON data

26485
00:06:57,230 --> 00:07:00,440
te use the JSON module and we call the load method.

26486
00:07:01,010 --> 00:07:03,650
So I'm going to go ahead and comment out this line of code.

26487
00:07:04,160 --> 00:07:08,840
And now that I've actually got some data in my data.json file,

26488
00:07:09,080 --> 00:07:11,030
I'm going to try and read from it.

26489
00:07:11,480 --> 00:07:16,430
We call the json.load method and we pass in the file path,

26490
00:07:16,520 --> 00:07:18,380
or you can see here the fp.

26491
00:07:18,950 --> 00:07:21,590
So that's the only required input.

26492
00:07:22,040 --> 00:07:25,820
The file that we're going to pass in is our data file

26493
00:07:25,850 --> 00:07:28,040
which we opened up over here

26494
00:07:28,700 --> 00:07:33,700
ad what we're going to do is we're going to change this from write mode to read

26495
00:07:35,150 --> 00:07:39,230
mode. Once we've loaded up the data,

26496
00:07:39,230 --> 00:07:41,930
we're gonna save it inside a variable called data

26497
00:07:42,230 --> 00:07:46,400
and then I'm just going to print it out. So when I hit run right now,

26498
00:07:47,510 --> 00:07:50,120
and I simply add any sort of gobbledy goop,

26499
00:07:50,390 --> 00:07:52,730
but as long as I can hit the add button,

26500
00:07:52,970 --> 00:07:55,130
it's going to trigger this part of the code.

26501
00:07:55,700 --> 00:07:58,370
And now if we take a look inside our console,

26502
00:07:58,580 --> 00:08:02,180
you can see that data is being printed down here,

26503
00:08:02,420 --> 00:08:07,250
but without any of these indentations or any of the formatting. Instead,

26504
00:08:07,370 --> 00:08:12,370
what that load method does is it essentially takes this JSON data and

26505
00:08:13,370 --> 00:08:16,310
converts it into a Python dictionary.

26506
00:08:17,060 --> 00:08:18,530
So this data,

26507
00:08:19,760 --> 00:08:22,100
if we actually do a type check on it,

26508
00:08:22,250 --> 00:08:24,890
you can see it has a type of dictionary.

26509
00:08:24,890 --> 00:08:27,680
This is just a normal Python dictionary.

26510
00:08:28,430 --> 00:08:33,429
So essentially we can use json.dump and json. load to serialize

26511
00:08:33,710 --> 00:08:38,150
and deserialize from JSON data to Python dictionaries.

26512
00:08:38,600 --> 00:08:41,720
And it allows us that free interchange of information.

26513
00:08:42,500 --> 00:08:44,540
We change it into a JSON to store it,

26514
00:08:44,720 --> 00:08:48,530
and then we take it out of storage and turn it into a Python dictionary to

26515
00:08:48,530 --> 00:08:50,570
easily work with it in our code.

26516
00:08:51,740 --> 00:08:53,750
Now that we've seen how to write,

26517
00:08:53,870 --> 00:08:58,440
how to read, the last thing I want to show you is how to update data.

26518
00:08:58,980 --> 00:09:02,040
Because if we have a new piece of data come in,

26519
00:09:02,370 --> 00:09:06,390
we want to add to this JSON but we don't want to overwrite it.

26520
00:09:06,960 --> 00:09:09,930
But we also don't want to just append to the end of it,

26521
00:09:10,140 --> 00:09:14,070
because as you can imagine if we had something that we just appended to the end,

26522
00:09:14,400 --> 00:09:16,950
that's not a valid data structure

26523
00:09:17,040 --> 00:09:21,510
and that's why we're getting all of these errors. Instead of doing it manually,

26524
00:09:21,540 --> 00:09:24,810
we're going to use the builtin method json.update.

26525
00:09:25,350 --> 00:09:30,210
And here's how it works. So we've already got some data inside our data.

26526
00:09:30,240 --> 00:09:34,830
json file and I'm going to change this from read again, back to write.

26527
00:09:35,430 --> 00:09:40,320
And what we want to do is we want to take that data and we want to update what's

26528
00:09:40,350 --> 00:09:45,350
existing in there with the new data that's being passed in. To do that

26529
00:09:46,560 --> 00:09:51,480
we first have to load up the data, so I'm going to uncomment this line,

26530
00:09:51,930 --> 00:09:54,210
and once we've gotten hold of the data,

26531
00:09:54,480 --> 00:09:58,500
we're going to say data.update.

26532
00:10:00,570 --> 00:10:05,570
And we update it with the new data. What's happened so far is we have our data

26533
00:10:07,530 --> 00:10:10,020
loaded up into a dictionary,

26534
00:10:10,530 --> 00:10:15,530
we use the update method to update that dictionary with some new piece of data.

26535
00:10:16,980 --> 00:10:17,550
Now,

26536
00:10:17,550 --> 00:10:22,550
the next thing we want to do is we want to actually write that data back into

26537
00:10:22,650 --> 00:10:23,490
this file.

26538
00:10:23,850 --> 00:10:28,620
So we have to use this line of code using json.dump.

26539
00:10:30,960 --> 00:10:33,270
But instead of dumping the new data,

26540
00:10:33,330 --> 00:10:36,750
we're going to dump that data that we updated right here.

26541
00:10:38,370 --> 00:10:42,150
Essentially what we're doing here is a three-step approach.

26542
00:10:42,480 --> 00:10:47,480
We're reading the old data, we're updating old data with new data,

26543
00:10:50,940 --> 00:10:55,230
and we're finally saving the updated data. Here

26544
00:10:55,230 --> 00:10:59,070
we've got two things happening. We've got reading and we've got writing.

26545
00:10:59,460 --> 00:11:04,080
So we can split this code into two sections. First,

26546
00:11:04,440 --> 00:11:08,700
we open the file in read mode, we get hold of the data,

26547
00:11:08,730 --> 00:11:13,730
we update the data and then we open up the file again.

26548
00:11:14,700 --> 00:11:17,370
But in this case, we open it in write mode.

26549
00:11:18,960 --> 00:11:23,960
This time we're going to dump the data that we've updated over here into that

26550
00:11:24,780 --> 00:11:28,200
data file using this particular indent format.

26551
00:11:29,640 --> 00:11:31,260
And once we written to file,

26552
00:11:31,320 --> 00:11:36,180
and we delete all the text from a website and password entries and these lines

26553
00:11:36,180 --> 00:11:41,180
of code now replace our previous functionality where we were saving just plain

26554
00:11:41,220 --> 00:11:45,660
text to our data.txt. Let's go ahead and run it and test it out.

26555
00:11:46,170 --> 00:11:50,040
Currently, we have a single entry inside our data.json.

26556
00:11:50,520 --> 00:11:53,250
So if we go ahead and add a new entry,

26557
00:11:53,290 --> 00:11:56,830
say for eBay, and we generate password, click add.

26558
00:11:57,670 --> 00:12:02,620
If we go back to our data.json, you can see how it's now been updated.

26559
00:12:03,190 --> 00:12:08,190
This entire JSON has now been updated to have two entries,

26560
00:12:08,560 --> 00:12:12,430
Amazon and eBay. It didn't just append it.

26561
00:12:12,460 --> 00:12:15,520
It actually added it into the dictionary

26562
00:12:15,820 --> 00:12:18,340
and that's all thanks to that update method.

26563
00:12:18,820 --> 00:12:20,920
And once it updated that data,

26564
00:12:21,160 --> 00:12:26,160
then we told it to save the updated data back into the data file and wipe all of

26565
00:12:26,740 --> 00:12:31,180
the previous data. So now that we're able to read,

26566
00:12:31,210 --> 00:12:33,670
write and update JSON data,

26567
00:12:34,090 --> 00:12:39,070
the next step is to think about what situations might this fail.

26568
00:12:39,820 --> 00:12:44,820
And one of the biggest problems we have at the moment is we're trying to open up

26569
00:12:45,550 --> 00:12:49,090
this file, load up the data and update it.

26570
00:12:49,600 --> 00:12:52,420
But if we actually had no data in here,

26571
00:12:52,510 --> 00:12:55,570
say the first time we ran our program, or indeed,

26572
00:12:55,570 --> 00:12:58,870
if we didn't actually have this data.json file,

26573
00:12:59,470 --> 00:13:04,420
then you can see that the first time I run it and I tried to save a password,

26574
00:13:06,580 --> 00:13:11,110
then it's going to crush and we get some exceptions being thrown.

26575
00:13:11,620 --> 00:13:15,340
But we know all about exceptions now. So in the next lesson,

26576
00:13:15,610 --> 00:13:18,460
that's what we're going to tackle. For all of that,

26577
00:13:18,790 --> 00:13:20,650
and more, head ever to the next lesson.


26578
00:00:00,810 --> 00:00:02,160
So in the last lesson,

26579
00:00:02,190 --> 00:00:07,190
we looked at how we can use this JSON format to save our data and to load

26580
00:00:09,120 --> 00:00:11,070
our data into our program.

26581
00:00:11,730 --> 00:00:16,730
But one of the problems that we have is if we run our program from scratch

26582
00:00:17,280 --> 00:00:21,600
where we don't have that data.json file created,

26583
00:00:21,930 --> 00:00:26,930
then the first thing that it's going to encounter once it lands inside here is

26584
00:00:27,120 --> 00:00:30,570
it's going to try and open a file that doesn't exist.

26585
00:00:31,110 --> 00:00:34,050
And what happens then? We get a file

26586
00:00:34,050 --> 00:00:38,490
not found error because there is no such file data.json.

26587
00:00:39,030 --> 00:00:41,400
So what can we do? Well,

26588
00:00:41,640 --> 00:00:46,640
we already learned about dealing with exceptions and handling them so that we

26589
00:00:47,160 --> 00:00:49,380
don't end up in these situations.

26590
00:00:49,980 --> 00:00:54,980
So now it's time to put your knowledge into practice inside a real project.

26591
00:00:55,650 --> 00:01:00,650
And I want you to think about how you can catch that particular exception,

26592
00:01:01,380 --> 00:01:06,060
how you can get it to work so that if this fails,

26593
00:01:06,330 --> 00:01:09,780
then we simply create a brand new data file.

26594
00:01:10,200 --> 00:01:13,530
But if it does work, then we can simply load up the data,

26595
00:01:13,860 --> 00:01:16,050
update the data and write the data.

26596
00:01:16,680 --> 00:01:19,830
So the actual implementation I'll leave up to you.

26597
00:01:20,220 --> 00:01:25,220
But what you want to be able to do is to not have a data.json file and run

26598
00:01:26,190 --> 00:01:28,380
your code, and it would not crash

26599
00:01:28,500 --> 00:01:33,500
and instead it would create a brand new data.json file with the new data.

26600
00:01:35,640 --> 00:01:40,640
But if you had already got some old data, then it should simply just update and

26601
00:01:40,770 --> 00:01:45,600
write it to file. Pause the video and see if you can complete this

26602
00:01:45,720 --> 00:01:46,590
as a challenge.

26603
00:01:50,970 --> 00:01:55,200
This always starts with analyzing which part of our code is the part that's

26604
00:01:55,200 --> 00:01:59,400
going to fail or likely to fail at some point. And in our case,

26605
00:01:59,460 --> 00:02:00,960
it's this line right here,

26606
00:02:01,140 --> 00:02:06,140
opening this line in read mode is dangerous because if this doesn't exist,

26607
00:02:07,260 --> 00:02:09,720
then we get that file not found error.

26608
00:02:10,259 --> 00:02:15,090
So what we can do is we can put this inside a try statement.

26609
00:02:15,660 --> 00:02:20,010
Try opening this file and try reading the data that's inside.

26610
00:02:20,790 --> 00:02:24,630
Now, if this fails, however, then we can catch it

26611
00:02:25,110 --> 00:02:28,230
and we're going to catch a very specific type of exception,

26612
00:02:28,260 --> 00:02:32,250
which is the file not found error exception. Now,

26613
00:02:32,250 --> 00:02:34,050
when this exception happens,

26614
00:02:34,230 --> 00:02:38,490
what we want to do is we want to create a new file

26615
00:02:38,820 --> 00:02:43,740
which is going to be our data.json. So at this point,

26616
00:02:43,740 --> 00:02:48,090
remember it doesn't yet exist. And we're going to open it in write mode.

26617
00:02:48,750 --> 00:02:53,490
And this data file is going to be used so that we can write to it

26618
00:02:53,520 --> 00:02:57,810
and we can dump our newly created data up here.

26619
00:02:58,350 --> 00:03:01,480
Remember, when the user hits the add button,

26620
00:03:01,780 --> 00:03:06,190
then everything they've typed in these entries gets aggregated into this

26621
00:03:06,190 --> 00:03:07,023
dictionary

26622
00:03:07,210 --> 00:03:11,710
and that dictionary is what we want to dump into this new data file.

26623
00:03:12,340 --> 00:03:16,900
So we'll get hold of that new data and we'll dump it into the data file.

26624
00:03:17,830 --> 00:03:18,550
And again,

26625
00:03:18,550 --> 00:03:23,550
we'll keep the indent to four spaces just so that we can read it more easily.

26626
00:03:25,030 --> 00:03:28,750
Now this is what should happen if the file's not found.

26627
00:03:29,380 --> 00:03:33,250
But if the file was found and it already exists,

26628
00:03:33,340 --> 00:03:37,240
then we're going to tap into the else statement. And in the else statement

26629
00:03:37,270 --> 00:03:42,070
what we're going to do is we're going to get hold of the data which we managed

26630
00:03:42,070 --> 00:03:46,270
to get because this block of code succeeded, and in the else block

26631
00:03:46,270 --> 00:03:50,950
what we're going to do is we're going to update the data with the new data. Now,

26632
00:03:51,100 --> 00:03:53,500
this else block is only going to be triggered

26633
00:03:53,530 --> 00:03:56,650
if everything inside the try block was successful.

26634
00:03:57,070 --> 00:03:59,260
So that means by the end of this block,

26635
00:03:59,290 --> 00:04:04,290
we have this data which holds onto all of the existing data from that data file

26636
00:04:05,020 --> 00:04:09,670
and we update that data with the new data which is this dictionary here.

26637
00:04:10,360 --> 00:04:13,210
Now, after we've updated that data,

26638
00:04:13,270 --> 00:04:17,560
we want to be able to open up data.jason in the write mode

26639
00:04:17,950 --> 00:04:22,950
and then dump this updated data from here into that data file.

26640
00:04:25,480 --> 00:04:27,940
And then once all of this is done,

26641
00:04:28,570 --> 00:04:32,980
no matter if there was an exception or if there was no issues,

26642
00:04:33,280 --> 00:04:37,840
we're going to still need to delete everything that's inside the website and

26643
00:04:37,840 --> 00:04:38,800
password entry.

26644
00:04:39,220 --> 00:04:43,240
So we can even add a finally keyword right here.

26645
00:04:44,560 --> 00:04:49,360
So this is the final code that deals with our exception.

26646
00:04:49,690 --> 00:04:54,460
We have our try block which can fail, we have our except block

26647
00:04:54,490 --> 00:04:58,720
which deals with any failures that occur, we have our else block

26648
00:04:58,780 --> 00:05:03,010
which has the code that needs to be run if there were no issues,

26649
00:05:03,370 --> 00:05:07,810
and finally, at the very end no matter if there was an issue or no issue,

26650
00:05:08,140 --> 00:05:12,640
we have a block of code which clears our website and password entries.

26651
00:05:13,240 --> 00:05:16,660
Now you might've noticed there's a little bit of repetition here with the

26652
00:05:16,690 --> 00:05:19,090
writing to file. So if you want to,

26653
00:05:19,120 --> 00:05:22,660
you could in fact create a separate method somewhere up here.

26654
00:05:23,110 --> 00:05:26,980
But I'm actually going to keep this as it is just because I think when you look

26655
00:05:26,980 --> 00:05:30,550
at this code, if you had any issues and you wanted to review it,

26656
00:05:31,060 --> 00:05:35,920
this is much easier to understand and reason about compared to a separate

26657
00:05:35,920 --> 00:05:36,753
function.

26658
00:05:37,330 --> 00:05:40,930
Feel free to refactor this code and make it as short as you want.

26659
00:05:41,380 --> 00:05:43,210
But this is the version I'm going to keep

26660
00:05:43,450 --> 00:05:46,690
just so that if you had any issues and you want to take a look at it,

26661
00:05:46,960 --> 00:05:47,860
it's there for you

26662
00:05:47,950 --> 00:05:52,950
and it's easy to see the try, except, else, and finally blocks with all of the

26663
00:05:54,070 --> 00:05:55,660
code together in one place.

26664
00:05:58,130 --> 00:05:59,330
Now in the next lesson,

26665
00:05:59,390 --> 00:06:02,750
we're going to be completing the functionality of our password manager.

26666
00:06:03,110 --> 00:06:06,380
We're gonna add that all important search functionality

26667
00:06:06,740 --> 00:06:11,510
which is going to look through our JSON, fetch the results for a particular

26668
00:06:11,510 --> 00:06:14,630
website, and then show it to us in a popup.

26669
00:06:15,050 --> 00:06:18,380
So for all of that and more, I'll see you on the next lesson.


26670
00:00:00,360 --> 00:00:02,100
In the previous lessons today,

26671
00:00:02,250 --> 00:00:07,250
we looked at how we can use the JSON format to store and load data into our

26672
00:00:08,880 --> 00:00:09,713
program.

26673
00:00:10,050 --> 00:00:15,050
We also looked at how we can use the try, except, else, and finally keywords to

26674
00:00:15,750 --> 00:00:20,750
handle exceptions in our program to make sure that it doesn't fail and end up

26675
00:00:21,540 --> 00:00:26,010
crashing our program so the user ends up with a bad user experience.

26676
00:00:26,430 --> 00:00:30,810
Instead, we can anticipate the things that might happen. For example,

26677
00:00:30,810 --> 00:00:32,640
the first time when we run our program,

26678
00:00:32,850 --> 00:00:37,740
we might not have a data.json file and we deal with it accordingly.

26679
00:00:38,520 --> 00:00:42,720
Now, all that's left to do is to put in the last bit of functionality,

26680
00:00:42,840 --> 00:00:45,960
which is the search functionality, because after all,

26681
00:00:45,960 --> 00:00:49,680
we don't want to be digging through a JSON file to find out all email and

26682
00:00:49,680 --> 00:00:52,800
password combinations for the websites that we've stored.

26683
00:00:53,460 --> 00:00:57,300
So what we want to be able to do is to add a search button

26684
00:00:57,540 --> 00:01:02,160
and it's going to look very similar in size to the generate password button

26685
00:01:02,520 --> 00:01:06,210
and it's going to be in the same grid column. Now,

26686
00:01:06,240 --> 00:01:09,660
when we type in a website and we hit search,

26687
00:01:09,870 --> 00:01:13,110
it's going to look through our JSON, find that data,

26688
00:01:13,650 --> 00:01:18,650
load that data up and look through it for a key that matches the one the user

26689
00:01:19,680 --> 00:01:21,750
typed in. If they find it,

26690
00:01:21,900 --> 00:01:26,900
then we get a pop up showing up and it tells us the email and the password

26691
00:01:27,030 --> 00:01:29,040
that's associated with that account.

26692
00:01:30,060 --> 00:01:35,040
So you've actually done all of this before. Creating tkinter widgets,

26693
00:01:35,310 --> 00:01:37,350
laying out tkinter widgets,

26694
00:01:37,650 --> 00:01:42,650
creating message boxes or these popups and giving it a title,

26695
00:01:42,840 --> 00:01:44,160
giving it a message.

26696
00:01:44,520 --> 00:01:49,520
You've also seen how you can load JSON data and get the data in the format of a

26697
00:01:52,260 --> 00:01:55,920
Python dictionary. Now, once you have the Python dictionary,

26698
00:01:55,980 --> 00:02:00,660
then you can use your usual dictionary methods to try and get hold of the data

26699
00:02:00,660 --> 00:02:02,880
that's inside. And finally,

26700
00:02:02,910 --> 00:02:06,030
you also know how to deal with exceptions.

26701
00:02:06,330 --> 00:02:10,020
So remember, there might also be an exception in this case,

26702
00:02:10,410 --> 00:02:15,120
because if this was the first time that we were running this password manager,

26703
00:02:15,480 --> 00:02:16,110
and in fact,

26704
00:02:16,110 --> 00:02:21,110
we hadn't stored any websites or any emails or passwords in our database,

26705
00:02:21,450 --> 00:02:25,230
then if you hit search, it might actually just give you a file

26706
00:02:25,230 --> 00:02:29,820
not found error as well. So there's quite a few components involved,

26707
00:02:29,910 --> 00:02:33,060
but I'm pretty sure that you can actually get this to work.

26708
00:02:33,690 --> 00:02:38,040
So the end outcome you're looking for looks something like this in terms of

26709
00:02:38,040 --> 00:02:38,873
layout,

26710
00:02:39,120 --> 00:02:44,120
and you should be able to test this so that when you start out without a data

26711
00:02:45,150 --> 00:02:49,290
.json file and you hit search, it should tell you error,

26712
00:02:49,530 --> 00:02:50,970
No data file found.

26713
00:02:51,450 --> 00:02:56,310
But, if you had saved a password under that name and you added it to the

26714
00:02:56,310 --> 00:02:58,770
database, then you try to find it,

26715
00:02:59,080 --> 00:03:02,200
then it should find you the email and the password that you saved.

26716
00:03:02,590 --> 00:03:04,180
So this is what you're aiming for

26717
00:03:04,330 --> 00:03:07,900
and I'm pretty sure that you can do it with just a little bit of thought and 

26718
00:03:07,900 --> 00:03:11,590
a little bit of time spent problem-solving. Once you're ready,

26719
00:03:11,710 --> 00:03:15,910
pause the video and give this final challenge a go to complete the password

26720
00:03:15,910 --> 00:03:16,380
manager

26721
00:03:16,380 --> 00:03:18,030
project. Good luck.

26722
00:03:22,440 --> 00:03:23,440
Alright, so I hope

26723
00:03:23,880 --> 00:03:27,750
you gave that a good go. And as I always say, if there's no struggle,

26724
00:03:27,750 --> 00:03:28,620
there's no learning.

26725
00:03:28,920 --> 00:03:33,900
So make sure that you've allocated at least 20 minutes to trying things out and

26726
00:03:33,900 --> 00:03:38,790
figuring things out and debugging and just messing with the code yourself before

26727
00:03:38,790 --> 00:03:41,280
you're coming to the solution. But all right,

26728
00:03:41,340 --> 00:03:43,530
I'm going to walk through the solution with you together.

26729
00:03:44,130 --> 00:03:49,050
And the first thing we're going to do is we're going to add a button next to our

26730
00:03:49,050 --> 00:03:50,280
website entry.

26731
00:03:51,360 --> 00:03:56,360
So right here. Now notice how we've got our three columns in our grid system.

26732
00:03:57,450 --> 00:04:02,450
So our search button is going to go in pretty much in the same column as our

26733
00:04:02,490 --> 00:04:07,350
generate password button. So let's go ahead and create our

26734
00:04:07,530 --> 00:04:09,120
search button.

26735
00:04:10,470 --> 00:04:14,850
This is going to be a button with the text that says

26736
00:04:15,300 --> 00:04:16,132
Search.

26737
00:04:17,519 --> 00:04:21,630
Now, once we've created that, let's go ahead and lay it out

26738
00:04:21,630 --> 00:04:23,250
uusing the grid system.

26739
00:04:23,970 --> 00:04:28,970
Now the search button is going to go onto the grid in the same row as the

26740
00:04:29,550 --> 00:04:34,290
website label and the website entry. So that is row 1.

26741
00:04:34,560 --> 00:04:38,940
So let's go ahead and add row equals 1 and column-wise,

26742
00:04:38,970 --> 00:04:42,600
it's going to go in the same column as the generate password.

26743
00:04:42,990 --> 00:04:47,730
So that is a column 2. Now, if we run our code, as it is

26744
00:04:47,730 --> 00:04:48,450
however,

26745
00:04:48,450 --> 00:04:53,280
you'll see that the search button seems to be sitting inside the entry.

26746
00:04:53,790 --> 00:04:57,210
And the reason is because initially when we created this entry,

26747
00:04:57,240 --> 00:04:59,520
we gave it a column span of 2

26748
00:04:59,880 --> 00:05:03,690
so that it spans this second and third column.

26749
00:05:04,260 --> 00:05:05,670
So we have to change that.

26750
00:05:06,150 --> 00:05:11,150
Let's go and find our website entry and delete this column span equals 2.

26751
00:05:12,150 --> 00:05:16,260
So now you can see that this has a column span of 1,

26752
00:05:16,260 --> 00:05:18,300
so it's only in this middle column,

26753
00:05:18,660 --> 00:05:23,010
but it's so large that it's pushing the rest of our layout out of the way.

26754
00:05:23,580 --> 00:05:26,520
So what we need to do is we need to make this entry

26755
00:05:26,700 --> 00:05:29,220
the same width as the password entry

26756
00:05:29,490 --> 00:05:31,860
so that it'll actually fit into our layout.

26757
00:05:32,490 --> 00:05:35,550
So our password entry has a width of 21.

26758
00:05:35,850 --> 00:05:40,850
So our website entry is also going to need to change down to a smaller size.

26759
00:05:42,750 --> 00:05:47,750
Now you can see the entry is now the same size and its looking a lot better. If

26760
00:05:47,970 --> 00:05:51,540
you want, and this is really not strictly necessary

26761
00:05:51,570 --> 00:05:56,520
but I think it's quite neat, is you can tweak and adjust the width of this search

26762
00:05:56,520 --> 00:06:00,440
button so that it's roughly the same as the generate password button.

26763
00:06:01,130 --> 00:06:05,540
Now this button is this width because it's what is needed to accommodate all of

26764
00:06:05,540 --> 00:06:09,710
the words in that button, but we can manually change the search button

26765
00:06:09,950 --> 00:06:11,990
so that it's about the same width.

26766
00:06:13,790 --> 00:06:18,770
And in this case, I'm literally just using trial and error to figure it out. Width as

26767
00:06:18,770 --> 00:06:23,210
10 looks maybe a little bit small, let's try width of 13

26768
00:06:23,750 --> 00:06:28,280
and it looks just about right. Now that I'm done with my layout,

26769
00:06:28,490 --> 00:06:32,420
it's onto the next part which is adding functionality.

26770
00:06:33,110 --> 00:06:36,890
Now the functionality is going to come when the search button is pressed.

26771
00:06:37,250 --> 00:06:39,620
So I'm going to add a command to this

26772
00:06:40,280 --> 00:06:45,280
and the command is going to call a method which I'll call find_password. We've

26773
00:06:46,370 --> 00:06:49,970
got generate_password and we'll now have find_password.

26774
00:06:50,690 --> 00:06:54,680
Now I'm going to go and create my find_password.

26775
00:06:56,090 --> 00:06:59,450
And just because we've got all these sections set up, I'm going to add 

26776
00:06:59,450 --> 00:07:04,450
another section which I'll call find_password. Inside

26777
00:07:05,270 --> 00:07:08,270
the section is where we're going to be creating our

26778
00:07:08,300 --> 00:07:12,980
find_ password function. And this find_password,

26779
00:07:13,040 --> 00:07:15,380
let's just check to make sure there were no errors here

26780
00:07:15,380 --> 00:07:16,910
and we've spelled at the same way.

26781
00:07:17,720 --> 00:07:22,720
And this find_password function is going to need to get hold of the entry

26782
00:07:23,360 --> 00:07:25,550
that's inside the website entry.

26783
00:07:26,480 --> 00:07:31,480
So the website that we're looking for comes from the website_entry.get,

26784
00:07:32,000 --> 00:07:36,440
and then we'll be able to get the value of whatever the user typed inside this

26785
00:07:36,440 --> 00:07:37,273
entry.

26786
00:07:37,640 --> 00:07:42,050
And then we're going to use that to search through our data.json.

26787
00:07:42,890 --> 00:07:47,890
Now the easiest way for this to work is actually to first add a website.

26788
00:07:48,020 --> 00:07:53,020
So I'm just going to generate a website with my email and password and add it so

26789
00:07:53,660 --> 00:07:56,510
that it gets saved inside my data.json.

26790
00:07:56,960 --> 00:08:00,320
This way I'll be able to print things and I'll be able to work with the data a

26791
00:08:00,320 --> 00:08:01,160
little bit easier.

26792
00:08:01,730 --> 00:08:04,490
And then we'll address the exception catching a little bit later on.

26793
00:08:05,120 --> 00:08:07,400
What exactly are we looking for? Well,

26794
00:08:07,430 --> 00:08:11,960
we're looking to load up the data inside this JSON file.

26795
00:08:12,470 --> 00:08:14,780
So we're going to be opening up that file.

26796
00:08:14,780 --> 00:08:19,250
So with open and then the filename is data.json,

26797
00:08:19,610 --> 00:08:22,520
and then we'll save this as the data_file.

26798
00:08:24,350 --> 00:08:26,660
Now, once we've got our data file,

26799
00:08:26,660 --> 00:08:30,830
then we can use our JSON module to load up that file

26800
00:08:31,340 --> 00:08:34,970
and we're going to be getting hold of the data that's inside.

26801
00:08:35,240 --> 00:08:38,720
So we can save this to a variable called data.

26802
00:08:39,350 --> 00:08:42,559
Now this data, if I go ahead and print it,

26803
00:08:43,370 --> 00:08:47,570
you should remember is basically just a dictionary.

26804
00:08:48,020 --> 00:08:51,770
So as soon as I hit search, that should trigger this find_password

26805
00:08:52,100 --> 00:08:54,800
and now I've got my dictionary printed in here.

26806
00:08:55,500 --> 00:08:58,740
So what do we want to do with this dictionary? Well,

26807
00:08:58,740 --> 00:09:03,740
we want to look through it and check to see if this website that we're searching

26808
00:09:04,020 --> 00:09:07,320
for actually exists inside that dictionary.

26809
00:09:07,950 --> 00:09:12,950
The way we do that is we say if website in data,

26810
00:09:15,030 --> 00:09:18,300
well, in that case, it's actually success, right?

26811
00:09:18,300 --> 00:09:21,030
We've managed to find it inside the data

26812
00:09:21,300 --> 00:09:25,170
and we now just need to get hold of the email and password values.

26813
00:09:26,580 --> 00:09:31,580
So let's create a variable called email and we want to pick out this particular

26814
00:09:31,860 --> 00:09:34,050
value from this dictionary.

26815
00:09:34,740 --> 00:09:36,930
If this is the entire dictionary,

26816
00:09:37,230 --> 00:09:42,230
then we want to get hold of the dictionary and pick out the item with the key

26817
00:09:42,900 --> 00:09:47,280
that matches the website that we're searching for, like this.

26818
00:09:47,880 --> 00:09:50,490
Now, once we've gotten hold of this,

26819
00:09:50,550 --> 00:09:53,220
this is going to be a nested dictionary.

26820
00:09:53,250 --> 00:09:57,690
So it's equivalent to basically this part of the dictionary.

26821
00:09:58,290 --> 00:10:00,210
So this in itself is the dictionary,

26822
00:10:00,240 --> 00:10:02,190
which you could save to a separate variable,

26823
00:10:02,490 --> 00:10:07,380
but I think it's actually easy enough to understand that we can tag on another

26824
00:10:07,380 --> 00:10:08,213
key here

26825
00:10:08,310 --> 00:10:13,310
which is the word email in order to get hold of the value that's associated with

26826
00:10:13,830 --> 00:10:15,480
that key. So that way,

26827
00:10:15,480 --> 00:10:18,840
this email variable now saves this value here.

26828
00:10:19,590 --> 00:10:23,880
And in the same way, we can get the password from data

26829
00:10:24,060 --> 00:10:29,060
getting hold of the data under the website key and then passing in the password

26830
00:10:29,850 --> 00:10:33,780
key. Now that we've got the email and password,

26831
00:10:33,840 --> 00:10:38,840
we can go ahead and create our message box using show info. And we'll set the

26832
00:10:39,210 --> 00:10:43,020
title to be the website that the user is searching for

26833
00:10:43,470 --> 00:10:46,320
and the message is going to be a f-string,

26834
00:10:46,710 --> 00:10:49,950
which has the email listed.

26835
00:10:50,640 --> 00:10:52,710
And then on a new line,

26836
00:10:52,740 --> 00:10:57,000
it's also got the password that's going to be listed as well.

26837
00:10:58,400 --> 00:10:59,233
Like that.

26838
00:11:01,160 --> 00:11:04,460
Let's go ahead and run this code and make sure that it works.

26839
00:11:05,690 --> 00:11:10,310
Let's say that we have a couple more passwords that we save in here.

26840
00:11:11,900 --> 00:11:15,590
Now I should have three entries, Amazon, eBay, and Twitter,

26841
00:11:15,980 --> 00:11:19,460
and I want to go and search for my password for eBay.

26842
00:11:19,940 --> 00:11:24,770
Once I hit the search button, it goes into that find_password function

26843
00:11:25,130 --> 00:11:28,880
and if it finds that one of these has the key eBay,

26844
00:11:29,210 --> 00:11:34,130
then it's going to fetch all of these relevant pieces of data that I wanted from

26845
00:11:34,160 --> 00:11:35,540
that JSON file.

26846
00:11:37,010 --> 00:11:42,010
So now what we have to do is to make sure that we catch any exceptions that

26847
00:11:42,740 --> 00:11:47,740
might occur and you might already have realized that this works really well

26848
00:11:48,110 --> 00:11:50,240
right now because we have data

26849
00:11:50,630 --> 00:11:53,260
and because we have this data.json file.

26850
00:11:53,860 --> 00:11:57,250
But the first time that I run my program,

26851
00:11:57,490 --> 00:11:59,140
this is not going to exist.

26852
00:11:59,650 --> 00:12:04,600
So this is a more realistic version of what the program will look like

26853
00:12:04,660 --> 00:12:09,340
the first time we run it. And the first time that we go ahead and run this

26854
00:12:09,430 --> 00:12:13,870
and I search for something that is going to look for a file that doesn't exist

26855
00:12:14,110 --> 00:12:18,340
immediately, our program crashes, and we get the file not found error.

26856
00:12:18,970 --> 00:12:23,740
So what we need to do is we need to be aware enough that these things like

26857
00:12:23,770 --> 00:12:26,020
opening files can fail.

26858
00:12:26,440 --> 00:12:31,420
So what we have to do is we have to catch the exceptions and handle them.

26859
00:12:32,080 --> 00:12:37,000
Let's go ahead and indent this entire block and put it inside the try.

26860
00:12:37,570 --> 00:12:40,300
Now, the part that's most likely to fail in fact,

26861
00:12:40,330 --> 00:12:44,050
the first time the program starts, this is definitely going to fail.

26862
00:12:44,710 --> 00:12:48,640
But what we want to do is we want to catch the exception

26863
00:12:48,670 --> 00:12:53,020
that is file not found error. And in the situation,

26864
00:12:53,050 --> 00:12:57,820
what we want to do is we want to create a message box that tells the user

26865
00:12:58,120 --> 00:13:00,430
this data file doesn't exist.

26866
00:13:01,060 --> 00:13:03,340
This is just a simple showinfo

26867
00:13:03,700 --> 00:13:08,700
and we'll give it a title of error and we'll give it a message of no data file

26868
00:13:12,730 --> 00:13:13,563
found,

26869
00:13:15,220 --> 00:13:19,420
or you can put any other message you can think of. However,

26870
00:13:19,420 --> 00:13:22,060
if we were successful in opening this file,

26871
00:13:22,420 --> 00:13:25,720
then this is the part of the code that we want to implement.

26872
00:13:26,140 --> 00:13:29,230
So let's go ahead and bring it up to the right indentation.

26873
00:13:29,680 --> 00:13:31,360
And we searched through our data,

26874
00:13:31,690 --> 00:13:36,690
look for this website and then give the user a popup if it exists.

26875
00:13:37,620 --> 00:13:41,910
Now, if we run our code again and we search for something

26876
00:13:42,060 --> 00:13:45,720
even though we don't have a data file, we haven't saved anything yet,

26877
00:13:46,050 --> 00:13:49,830
then we get this error popup and it tells us no data files found.

26878
00:13:50,160 --> 00:13:51,930
And hopefully the user would realize, well,

26879
00:13:51,930 --> 00:13:54,060
actually I haven't actually saved any passwords.

26880
00:13:54,900 --> 00:13:58,620
So there's one other situation that we haven't yet addressed however.

26881
00:13:59,280 --> 00:14:02,820
If I had, um, let's say Amazon, um,

26882
00:14:02,970 --> 00:14:07,970
eBay and Twitter saved in my JSON file,

26883
00:14:10,680 --> 00:14:13,680
but I decided to search for something that I never saved.

26884
00:14:13,830 --> 00:14:18,780
Let's say my details for Facebook. Well in this situation, actually

26885
00:14:18,810 --> 00:14:23,220
nothing really happens. And it's a little bit confusing because for the user,

26886
00:14:23,220 --> 00:14:27,300
it seems like our program just doesn't work. But in fact, we

26887
00:14:27,300 --> 00:14:31,350
as the programmers know what the problem is. It's basically this

26888
00:14:31,560 --> 00:14:36,510
if statement is coming out as false. The website doesn't exist in the data.

26889
00:14:36,960 --> 00:14:40,920
So none of this gets carried out and the function ends.

26890
00:14:41,460 --> 00:14:45,030
That's probably not the best user experience. Instead,

26891
00:14:45,060 --> 00:14:49,560
we probably want to catch it with an else statement and we want to use a message

26892
00:14:49,560 --> 00:14:52,430
box to tell the that again,

26893
00:14:52,670 --> 00:14:55,010
there is a error in this situation

26894
00:14:55,850 --> 00:14:59,090
but the reason for this error is because

26895
00:15:01,940 --> 00:15:06,380
there are no details that currently exist for the website that they're searching

26896
00:15:06,380 --> 00:15:08,030
for. That way

26897
00:15:08,060 --> 00:15:13,060
they're not sitting there confused as to why searching for some sort of website

26898
00:15:13,910 --> 00:15:15,410
doesn't actually come up with anything.

26899
00:15:15,680 --> 00:15:19,070
It tells them that there are no details and they would have to add it

26900
00:15:19,280 --> 00:15:21,410
if they wanna find it in the database.

26901
00:15:22,400 --> 00:15:24,770
A lot of students might be wondering at this point, well,

26902
00:15:24,950 --> 00:15:27,680
why don't we catch this with some sort of exception?

26903
00:15:29,240 --> 00:15:32,570
And in fact, we could create an exception.

26904
00:15:32,570 --> 00:15:36,890
We could raise an exception here and then we could catch it somewhere else and

26905
00:15:36,920 --> 00:15:38,390
show this message box.

26906
00:15:38,780 --> 00:15:43,780
But the thing you want to keep in mind is that if you can do something with if

26907
00:15:44,000 --> 00:15:47,690
and else very easily, then you should stick to if and else.

26908
00:15:48,170 --> 00:15:52,460
If you can't do it with if and else very easily, and it's actually an error

26909
00:15:52,460 --> 00:15:55,910
that's going to be thrown that you don't have any other way of dealing with,

26910
00:15:56,210 --> 00:16:00,950
then you should be using the try, except, else, finally, keywords.

26911
00:16:01,670 --> 00:16:03,500
And in fact, if you think about this,

26912
00:16:03,920 --> 00:16:08,920
I don't have an easy way of checking to see if this data file ends up being not

26913
00:16:10,490 --> 00:16:14,660
found. But I do have this file not found error

26914
00:16:14,660 --> 00:16:18,230
which is going to be thrown every time that I try to open a file and that

26915
00:16:18,230 --> 00:16:19,010
doesn't exist.

26916
00:16:19,010 --> 00:16:24,010
The other way to think about it is that an exception is something that is

26917
00:16:24,020 --> 00:16:27,560
meant to be exceptional. It's something that happens very rarely.

26918
00:16:28,100 --> 00:16:32,120
Whereas if and else catches things that happen frequently.

26919
00:16:32,420 --> 00:16:36,290
It's pretty often that your user might search through the website

26920
00:16:36,530 --> 00:16:40,550
thinking that they saved some sort of details for a website. But in fact,

26921
00:16:40,580 --> 00:16:43,970
they didn't. Think about this when you're writing your code

26922
00:16:44,090 --> 00:16:49,090
and remember that only use exception handling when you don't have an easy

26923
00:16:49,520 --> 00:16:52,100
alternative. There you have it.

26924
00:16:52,430 --> 00:16:56,990
That's the completed code for our upgraded password manager.

26925
00:16:57,500 --> 00:16:59,750
If you want to take a look at any of this code,

26926
00:16:59,810 --> 00:17:02,570
then, as always, head over to the course resources

26927
00:17:02,870 --> 00:17:06,319
and you'll see a link to the completed code that you can review.

26928
00:17:06,859 --> 00:17:08,150
But in today's lessons,

26929
00:17:08,390 --> 00:17:13,369
we added a lot more knowledge regarding things like error handling and saving

26930
00:17:13,369 --> 00:17:18,369
data in JSON formats and handling and loading and updating and dealing with

26931
00:17:18,530 --> 00:17:23,530
all of that data in order to create this fully-fledged password manager project.

26932
00:17:24,829 --> 00:17:27,920
Now, I'm sure there's a lot more improvements you can add to this,

26933
00:17:28,160 --> 00:17:31,880
but it's going to go beyond the allocated time for today's lessons.

26934
00:17:32,330 --> 00:17:33,163
So if you want,

26935
00:17:33,170 --> 00:17:37,550
please continue messing around with the code and improving it and make your own

26936
00:17:37,550 --> 00:17:39,590
customizations and modifications.

26937
00:17:39,920 --> 00:17:41,810
If you create something that you thought was cool,

26938
00:17:41,840 --> 00:17:46,340
then be sure to share it with us in the Q/A below the lesson so that we can

26939
00:17:46,340 --> 00:17:50,810
all admire your hard work and maybe improve our own code as a result.

26940
00:17:51,380 --> 00:17:55,880
So have fun playing around with this program and I'll see you tomorrow.



26941
00:00:00,150 --> 00:00:02,160
Hey guys, welcome to day 31

26942
00:00:02,160 --> 00:00:07,080
of 100 Days of Code. And you've been learning quite a lot of things

26943
00:00:07,080 --> 00:00:10,470
now. We've been looking at handling exceptions,

26944
00:00:10,770 --> 00:00:15,120
using the JSON data format, passing and reading CSVs

26945
00:00:15,120 --> 00:00:19,950
using pandas, opening and writing to files and a whole lot more.

26946
00:00:20,310 --> 00:00:24,270
So it's time for your capstone project.

26947
00:00:24,960 --> 00:00:26,490
And in this capstone project,

26948
00:00:26,550 --> 00:00:30,210
we're going to be building a flashcard program to help you study.

26949
00:00:30,810 --> 00:00:35,490
And it's especially great with studying for languages. Now,

26950
00:00:35,550 --> 00:00:36,540
when I was in school,

26951
00:00:36,570 --> 00:00:41,570
I studied French and it was a lot of vocab that we had to learn for tests.

26952
00:00:42,780 --> 00:00:46,070
Pomme is Apple, and I would memorize all these words,

26953
00:00:47,000 --> 00:00:50,900
all of the grammar tables, and yet after four or five years,

26954
00:00:51,290 --> 00:00:53,150
I couldn't really speak much French.

26955
00:00:53,810 --> 00:00:58,100
So I decided to go for immersive language learning.

26956
00:00:58,220 --> 00:00:59,390
I went to France,

26957
00:00:59,810 --> 00:01:04,810
I hung out with friends and I tried to immerse myself in the language and

26958
00:01:06,500 --> 00:01:10,520
culture. But that also failed. I had a lot of fun,

26959
00:01:10,520 --> 00:01:13,670
but my French didn't seem to improve all that much.

26960
00:01:14,420 --> 00:01:19,420
But then I discovered a new way of learning languages and it all started with

26961
00:01:20,030 --> 00:01:24,710
looking at Chinese characters. There's a lot of Chinese characters out there.

26962
00:01:24,710 --> 00:01:29,710
There's something like 50,000 Chinese characters in total from history to now.

26963
00:01:31,790 --> 00:01:34,940
There's a lot of characters that you could learn. They each have a different

26964
00:01:34,940 --> 00:01:37,670
meaning and they each have a different pronunciation.

26965
00:01:38,450 --> 00:01:43,250
Imagine that. Trying to learn 50,000 characters. That's no easy feat.

26966
00:01:43,490 --> 00:01:48,350
But then a friend told me that actually you don't really need 50,000

26967
00:01:48,380 --> 00:01:52,850
characters. Your average professor, who is very eloquent,

26968
00:01:53,180 --> 00:01:56,150
can write a lot of the characters and use them with ease,

26969
00:01:56,510 --> 00:02:01,510
only knows about 10,000 and your average person probably only uses about 8,000

26970
00:02:03,470 --> 00:02:08,240
in their day to day lives. And if you basically just want to get by in life,

26971
00:02:08,300 --> 00:02:12,950
you can pretty much rely on the 3000 words that an average teenager would know.

26972
00:02:13,880 --> 00:02:18,020
And finally, if you actually just want to be able to watch some simple movies,

26973
00:02:18,050 --> 00:02:19,520
read some simple books,

26974
00:02:19,760 --> 00:02:24,320
then you could use the average kid vocabulary of about that the 1000 characters.

26975
00:02:24,920 --> 00:02:28,700
And at this point, I think to myself, 1000. That's quite doable.

26976
00:02:28,970 --> 00:02:32,330
I could do 1000. If I learn just 10 characters a day,

26977
00:02:32,720 --> 00:02:35,720
that will take me less than a year to learn all of these characters.

26978
00:02:36,530 --> 00:02:39,980
But it's not just 1000 random characters either.

26979
00:02:40,550 --> 00:02:42,920
There's such a thing as a frequency dictionary.

26980
00:02:42,950 --> 00:02:46,310
So a dictionary that's not listed here by A, B, C, D,

26981
00:02:46,640 --> 00:02:51,640
but it actually listed by the frequency that a particular word occurs in common

26982
00:02:51,740 --> 00:02:54,170
usage. For example,

26983
00:02:54,410 --> 00:02:59,410
if you take the first 1000 characters that are most commonly used,

26984
00:03:00,280 --> 00:03:03,160
then you can pretty much read most of the Newspapers,

26985
00:03:03,160 --> 00:03:06,160
you can watch most of the TV shows because these

26986
00:03:06,160 --> 00:03:10,870
are the words that are the bread and butter of the language. It's like in English,

26987
00:03:11,110 --> 00:03:14,530
the a, the, of, from, why, yes, no,

26988
00:03:14,740 --> 00:03:17,920
these are words that we use every day, again and again.

26989
00:03:18,430 --> 00:03:23,430
The crazy words like anti-establishment or glioblastoma.

26990
00:03:24,640 --> 00:03:28,870
These are not words that you need to really know for day to day life.

26991
00:03:29,770 --> 00:03:32,080
So let me show you the program that you'll build

26992
00:03:32,110 --> 00:03:35,530
where you can learn the most frequently used words in any language.

26993
00:03:36,130 --> 00:03:38,080
It's a flashcard program,

26994
00:03:38,620 --> 00:03:43,360
and it shows you the front and the back of the card. So for example,

26995
00:03:43,390 --> 00:03:48,390
French, demande. In English means request. After three seconds,

26996
00:03:48,850 --> 00:03:52,990
the card flips and I can check whether if I knew the right answer.

26997
00:03:53,500 --> 00:03:57,070
If I got it right I'll press the tick and if I got it wrong

26998
00:03:57,100 --> 00:04:00,370
I'll press the cross. So let's try another word.

26999
00:04:00,700 --> 00:04:04,840
Parti means left or to leave. Attendez

27000
00:04:04,840 --> 00:04:07,360
means to wait

27001
00:04:07,960 --> 00:04:12,490
and I think I knew that word. So I'm going to click the check mark.

27002
00:04:12,880 --> 00:04:16,750
And what that's going to do is it's going to take the flashcard out of all of

27003
00:04:16,750 --> 00:04:20,589
the list of flashcards so it doesn't show me the things I already know.

27004
00:04:21,339 --> 00:04:24,070
And instead it only shows me the things I don't know

27005
00:04:24,280 --> 00:04:28,840
so I can review it and say, Oh, I'm not sure what loin means

27006
00:04:28,900 --> 00:04:30,490
so I'll say cross,

27007
00:04:30,790 --> 00:04:35,380
and that will go back into the deck and it might come up again at some point.

27008
00:04:36,100 --> 00:04:40,480
So this beautiful piece of software is what we're going to be creating.

27009
00:04:40,960 --> 00:04:42,190
But more specifically,

27010
00:04:42,220 --> 00:04:46,930
you're going to be creating because after all, this is your capstone project.

27011
00:04:47,380 --> 00:04:48,070
But don't worry,

27012
00:04:48,070 --> 00:04:53,070
I've divided up into four steps and I've got some step by step instructions for

27013
00:04:53,140 --> 00:04:57,400
you in the next lesson. Now, if you're wondering,

27014
00:04:57,520 --> 00:05:00,970
how did you get the most frequent words for the flashcard app in the first

27015
00:05:00,970 --> 00:05:02,890
place? Well, let me show you.

27016
00:05:03,520 --> 00:05:08,520
There's a Wiki for the frequency list of different languages,

27017
00:05:09,010 --> 00:05:12,790
and it lists most of the common languages. If we go to French,

27018
00:05:12,820 --> 00:05:17,320
you can see that there are loads of different lists that people have compiled

27019
00:05:17,530 --> 00:05:21,040
that list the top, most frequently occurring words.

27020
00:05:21,700 --> 00:05:26,700
And one of the ones that I thought was really relevant is the words are based on

27021
00:05:26,710 --> 00:05:27,610
subtitles.

27022
00:05:28,120 --> 00:05:33,120
These subtitles come from all sorts of shows and movies that are relevant to modern

27023
00:05:33,730 --> 00:05:37,360
culture. And when you look at one of the subtitles,

27024
00:05:37,660 --> 00:05:39,370
this is one of my favorite shows by the way,

27025
00:05:39,700 --> 00:05:43,720
you can see that the subtitles are listed by language.

27026
00:05:44,110 --> 00:05:48,490
And if we pick out one which is in English and we take a look at it,

27027
00:05:49,960 --> 00:05:51,130
then you can see

27028
00:05:51,190 --> 00:05:55,960
it's basically just all the words that are spoken in the movie or in the show

27029
00:05:56,410 --> 00:05:59,780
and it's been transcribed into subtitles. Now

27030
00:05:59,780 --> 00:06:04,010
then if we take all of these words that are from the most commonly watched

27031
00:06:04,010 --> 00:06:07,550
movies and shows, we end up with these frequency lists.

27032
00:06:08,000 --> 00:06:09,620
So if we take a look here,

27033
00:06:09,620 --> 00:06:14,620
it shows the most frequent words from 1 to 5,000.

27034
00:06:16,280 --> 00:06:17,330
And at the very beginning,

27035
00:06:17,330 --> 00:06:22,330
it's your I, of, is, all of these things that are really common.

27036
00:06:22,550 --> 00:06:25,610
And then as you scroll down, you get to some longer words.

27037
00:06:26,090 --> 00:06:28,100
And if you scroll to the bottom,

27038
00:06:28,340 --> 00:06:31,460
you can see you're getting some more and more niche words.

27039
00:06:32,600 --> 00:06:37,600
These frequency lists are compiled by a user called Hermitd

27040
00:06:38,750 --> 00:06:41,480
and Hermitdis a Hermit Dave

27041
00:06:41,900 --> 00:06:46,900
And he has a GitHub repository where he's compiled all of the frequency words,

27042
00:06:48,980 --> 00:06:52,190
and you can see the latest version from 2018.

27043
00:06:52,910 --> 00:06:56,840
Now he's got all of the frequency words for many languages

27044
00:06:56,930 --> 00:06:58,970
and it's listed by the language code,

27045
00:06:59,330 --> 00:07:01,940
so French would be FR for example.

27046
00:07:02,600 --> 00:07:07,600
And here you can see the top 50,000 most frequent lists or the full entire list.

27047
00:07:09,950 --> 00:07:13,460
We're probably not gonna learn more than 1000,

27048
00:07:13,700 --> 00:07:16,250
and I'm certainly not going to get to 50,000.

27049
00:07:16,730 --> 00:07:21,620
But this data here lists all the words that he found in these subtitles and the

27050
00:07:21,620 --> 00:07:23,390
frequency that they occurred.

27051
00:07:23,930 --> 00:07:27,260
And once they've been sorted in order of frequency,

27052
00:07:27,560 --> 00:07:29,000
this is what you end up with.

27053
00:07:30,860 --> 00:07:33,710
So I've already studied some of the first 200 words.

27054
00:07:34,220 --> 00:07:37,340
So if I take a hundred words from this frequency dictionary

27055
00:07:37,820 --> 00:07:42,200
and I put it into a Google sheet, then I end up with something like this.

27056
00:07:42,890 --> 00:07:43,130
Now,

27057
00:07:43,130 --> 00:07:47,180
what I want to be able to do is to create a flashcard where the front of the

27058
00:07:47,180 --> 00:07:49,670
flashcard is the word in French,

27059
00:07:50,000 --> 00:07:54,170
and then on the back of the flashcard is the answer in English for what

27060
00:07:54,170 --> 00:07:58,460
that word means. Instead of having to flip through a dictionary

27061
00:07:58,460 --> 00:08:00,620
finding out the meaning of each of these words,

27062
00:08:00,920 --> 00:08:03,920
there's actually a really neat trick in Google sheets that I want to show you.

27063
00:08:04,610 --> 00:08:06,500
If you hit equals to

27064
00:08:06,530 --> 00:08:10,820
start a new formula and you type in Google translate,

27065
00:08:11,630 --> 00:08:13,760
you can see it expects some inputs.

27066
00:08:14,180 --> 00:08:16,880
First is the piece of text that you want to translate,

27067
00:08:16,880 --> 00:08:20,810
so I'm going to click on this cell, and then it's the source language.

27068
00:08:20,810 --> 00:08:24,380
So this is the language as a code. So for example,

27069
00:08:24,530 --> 00:08:29,530
Spanish is ES and French is FR. And then the final input.

27070
00:08:30,590 --> 00:08:34,340
it expects is the language code that you want to translate it to.

27071
00:08:34,730 --> 00:08:38,900
So in this case, I want to translate it to English. So I'm going to use en.

27072
00:08:39,559 --> 00:08:41,570
And then we can close off the parentheses, hit

27073
00:08:41,570 --> 00:08:44,690
enter and after a little while with good internet,

27074
00:08:44,930 --> 00:08:48,500
you'll see the English translation for this word. And of course,

27075
00:08:48,500 --> 00:08:49,520
because we're an Excel,

27076
00:08:49,520 --> 00:08:54,520
we can simply just drag this cross all the way down to all of our words.

27077
00:08:54,900 --> 00:08:56,550
And after a little while, bam!

27078
00:08:57,240 --> 00:09:00,660
It's translated all of those words into English.

27079
00:09:01,680 --> 00:09:06,540
So this is a really neat trick and I'll link to the docs for this particular

27080
00:09:06,540 --> 00:09:07,373
formula.

27081
00:09:07,740 --> 00:09:12,740
And also you can take a look at the language support that Google's translation

27082
00:09:12,990 --> 00:09:17,400
service has and you can see the language code for each of these languages.

27083
00:09:17,550 --> 00:09:21,450
So if you want to try learning Macedonian or Malay,

27084
00:09:21,720 --> 00:09:23,700
and this is going to be your best bet.

27085
00:09:24,390 --> 00:09:27,450
So now that I've created my Excel sheet

27086
00:09:27,480 --> 00:09:29,940
essentially of a French and English words,

27087
00:09:30,330 --> 00:09:35,330
I've got potentially a hundred flashcards with the front and back data already

27088
00:09:35,790 --> 00:09:38,700
saved inside this Google sheet. Now,

27089
00:09:38,700 --> 00:09:42,570
all I have to do is simply download it as a CSV

27090
00:09:42,930 --> 00:09:46,110
and we'll be able to work with it very easily. Now,

27091
00:09:46,140 --> 00:09:50,430
you don't have to worry about downloading this or getting hold of this because

27092
00:09:50,430 --> 00:09:55,430
I've already included the final CSV data in the starting project for you to be

27093
00:09:55,800 --> 00:09:56,633
able to use.

27094
00:09:57,270 --> 00:10:02,270
So head over to the next lesson and get started building your very own study

27095
00:10:02,730 --> 00:10:05,460
aid, the flashy flashcard app.


27096
00:00:00,390 --> 00:00:00,780
All right.

27097
00:00:00,780 --> 00:00:04,770
So hopefully you've headed over to the course resources and downloaded the

27098
00:00:04,770 --> 00:00:09,480
starting zip file for today's project. So go ahead and unzip it.

27099
00:00:09,660 --> 00:00:12,780
And then let's open up this folder using PyCharm.

27100
00:00:16,700 --> 00:00:16,910
Okay.

27101
00:00:16,910 --> 00:00:20,900
Here you've already got two folders, data and images.

27102
00:00:21,260 --> 00:00:26,030
We're going to be using all of these images inside the images folder to create

27103
00:00:26,090 --> 00:00:29,630
our project. So this is the front of the flashcard,

27104
00:00:29,960 --> 00:00:33,860
the back of the flashcard, the right button and the wrong button.

27105
00:00:35,210 --> 00:00:40,100
And we're going to be writing our code inside main.py. So notice here

27106
00:00:40,100 --> 00:00:43,280
we've already got the background color hex code defined.

27107
00:00:43,310 --> 00:00:47,870
So we'll be able to use it in our coding as well. This is what we're aiming for.

27108
00:00:47,900 --> 00:00:50,570
This is the user interface for this program.

27109
00:00:51,110 --> 00:00:56,110
It's going to have a window with a title and inside this window,

27110
00:00:56,390 --> 00:01:00,980
we're going to have the card front image here showing up.

27111
00:01:01,220 --> 00:01:04,489
And on that card, we're going to have two pieces of text,

27112
00:01:04,970 --> 00:01:09,140
a word that says title and a piece of text that just says word.

27113
00:01:09,680 --> 00:01:13,340
And these are going to be formatted according to the instructions,

27114
00:01:13,370 --> 00:01:17,450
so in terms of font and size, et cetera. Finally, at the bottom,

27115
00:01:17,450 --> 00:01:21,140
we've got two buttons, a cross, and a checkmark.

27116
00:01:21,560 --> 00:01:26,560
And they're basically buttons that have the images right and wrong inside them.

27117
00:01:27,410 --> 00:01:30,260
Let's get started. Inside main.py,

27118
00:01:30,290 --> 00:01:34,640
the first thing I'm going to do is to go ahead and import tkinter.

27119
00:01:35,390 --> 00:01:38,360
So I'm going to import all the classes from tkinter

27120
00:01:38,810 --> 00:01:41,540
and then I'll be able to use it to create my window.

27121
00:01:45,200 --> 00:01:45,590
All right.

27122
00:01:45,590 --> 00:01:50,590
I'm going to set a title for my window and I'm going to give it the name of our

27123
00:01:50,870 --> 00:01:51,260
app

27124
00:01:51,260 --> 00:01:56,260
which is going to be called Flashy or whatever it is you want to call it. Next,

27125
00:01:56,630 --> 00:01:58,370
I'm going to give this window, um,

27126
00:01:58,400 --> 00:02:03,400
a configuration and I'm going to set the padding of the window to 50 pixels in

27127
00:02:04,310 --> 00:02:07,310
the X and 50 pixels in the Y.

27128
00:02:08,960 --> 00:02:12,290
Now this window is also going to have a background color

27129
00:02:12,320 --> 00:02:15,680
which is going to be set to this BACKGROUND_COLOR

27130
00:02:15,680 --> 00:02:17,450
constant that we have up here.

27131
00:02:18,650 --> 00:02:21,230
So now that I'm done configuring my window,

27132
00:02:21,260 --> 00:02:26,260
I can go ahead and get my window to start off in the main loop.

27133
00:02:26,720 --> 00:02:31,010
And now I should be able to run this code and just check that it works.

27134
00:02:31,580 --> 00:02:34,550
Here's our window with the background color

27135
00:02:34,820 --> 00:02:38,030
and there's already some padding in it and making this window a little bit

27136
00:02:38,030 --> 00:02:39,710
bigger. Now,

27137
00:02:39,740 --> 00:02:44,740
the next thing to do is to somehow put this card front image onto our window.

27138
00:02:46,490 --> 00:02:48,860
I'm going to be using a canvas object.

27139
00:02:49,400 --> 00:02:54,400
And if you remember, canvas object allows us to layer lots of things on top

27140
00:02:54,740 --> 00:02:57,890
of each other. So here is an image and then on top of that,

27141
00:02:57,890 --> 00:02:59,770
we've got some text being created.

27142
00:03:00,190 --> 00:03:03,730
And as long as we specify the position for each of these items,

27143
00:03:04,000 --> 00:03:06,610
it can all be overlapped on top of each other.

27144
00:03:07,420 --> 00:03:11,020
So we're creating our canvas from the canvas class

27145
00:03:11,440 --> 00:03:14,680
and then I'm going to give my canvas a width and height.

27146
00:03:15,190 --> 00:03:19,240
So I'm going to set the width and height to be the same as the width and height

27147
00:03:19,270 --> 00:03:20,380
of my card.

27148
00:03:20,740 --> 00:03:24,400
So the width is 800 and the height is 526.

27149
00:03:25,600 --> 00:03:30,070
You should've seen these numbers in the instructions as well. Next,

27150
00:03:30,100 --> 00:03:34,030
we're going to create our image from the photo image class.

27151
00:03:34,360 --> 00:03:38,080
So let's call it card_front_img

27152
00:03:38,560 --> 00:03:41,980
and this is going to be created from the photo image class

27153
00:03:42,220 --> 00:03:45,910
where we have to specify a file name. Now, previously,

27154
00:03:45,940 --> 00:03:49,600
all we've done is we've just said the actual name of the file,

27155
00:03:49,630 --> 00:03:54,610
which in this case is card_front.png. But in our case,

27156
00:03:54,880 --> 00:03:59,530
this particular file is actually inside our images folder.

27157
00:03:59,950 --> 00:04:04,950
So we have to specify the full file path for this to work; images/card_

27158
00:04:05,560 --> 00:04:06,550
front.png.

27159
00:04:07,210 --> 00:04:11,620
And then we can get ahold of our canvas and create our image inside.

27160
00:04:12,160 --> 00:04:16,420
So the image is going to be set to our card_front_img

27161
00:04:16,990 --> 00:04:21,990
and then we have to specify the X and Y values of that image. Because it needs

27162
00:04:22,120 --> 00:04:24,040
to go into the center of the canvas,

27163
00:04:24,250 --> 00:04:28,270
we're just going to half the width for the X and half the height for the Y.

27164
00:04:28,750 --> 00:04:30,760
So this goes in as a tuple

27165
00:04:31,030 --> 00:04:34,630
so half of 526 is 263

27166
00:04:35,470 --> 00:04:40,470
and then I'm just going to put our canvas onto the grid and I'm going to set the

27167
00:04:41,110 --> 00:04:45,550
row to zero and the column to zero as well.

27168
00:04:46,240 --> 00:04:50,080
Now, just be careful when you're writing strings like this,

27169
00:04:50,110 --> 00:04:55,110
because it's pretty easy to make a typo like I have here. Instead,

27170
00:04:56,980 --> 00:04:59,440
I prefer using PyCharm's autofill.

27171
00:04:59,470 --> 00:05:02,140
So when you have a file path,

27172
00:05:02,170 --> 00:05:07,030
you can type in the name of the folder forwardslash and then the name of the

27173
00:05:07,060 --> 00:05:11,770
file. And we can just hit enter for it to insert it for us automatically.

27174
00:05:12,880 --> 00:05:15,100
Now, if I go ahead and hit run,

27175
00:05:16,630 --> 00:05:21,430
then I'll see that I've got a background which has the background color,

27176
00:05:21,910 --> 00:05:26,910
and then 50 pixels of padding on all four sides, in the middle

27177
00:05:27,310 --> 00:05:29,650
I've got my canvas displaying

27178
00:05:29,650 --> 00:05:34,650
this card_front.png. The only thing about this card is that it's still got

27179
00:05:35,380 --> 00:05:39,220
that white background. How do we get rid of that? Well,

27180
00:05:39,250 --> 00:05:44,140
we can change the background into the same color as everything else,

27181
00:05:44,170 --> 00:05:48,070
so this background color. Let's go ahead and get our canvas

27182
00:05:48,100 --> 00:05:51,850
and then let's config it to have a background color

27183
00:05:52,150 --> 00:05:56,110
that's set equal to our constant like this.

27184
00:05:56,870 --> 00:05:59,270
Now the background color is the same,

27185
00:05:59,780 --> 00:06:04,780
but we now have a line that is all around our canvas.

27186
00:06:05,930 --> 00:06:08,510
If you remember from previous lessons,

27187
00:06:08,870 --> 00:06:13,870
I told you that you can simply get rid of the highlight thickness and set it to

27188
00:06:14,810 --> 00:06:18,920
zero. And that basically just gets rid of that border.

27189
00:06:19,430 --> 00:06:24,430
So now we have a window with our flashcard showing up and the image has the

27190
00:06:25,580 --> 00:06:29,000
shadows which I created in illustrator

27191
00:06:29,270 --> 00:06:33,530
so that you'll be able to see it as a 3D card. Now,

27192
00:06:33,560 --> 00:06:36,800
inside the card, not only do we have an image,

27193
00:06:37,100 --> 00:06:39,440
but we also want to have some text.

27194
00:06:39,770 --> 00:06:44,770
So let's go ahead and create some text. And we can set the text to say Title.

27195
00:06:46,820 --> 00:06:50,150
So this is the first piece of text. In addition,

27196
00:06:50,180 --> 00:06:54,020
I'm going to set the font to a tuple

27197
00:06:54,050 --> 00:06:58,850
which is going to use the Arial font, and then it's going to be 40 size

27198
00:06:59,060 --> 00:07:03,350
and finally I'm going to make it italic. Now,

27199
00:07:03,380 --> 00:07:04,520
before we can hit run,

27200
00:07:04,550 --> 00:07:09,140
we also have to specify a X and Y position for our text.

27201
00:07:09,440 --> 00:07:13,190
So our image was created at 400 X, 263

27202
00:07:13,190 --> 00:07:18,190
Y, our text is going to be created at 400 X and 150 Y.

27203
00:07:19,700 --> 00:07:23,720
Now remember that these positions are relative to the canvas.

27204
00:07:24,020 --> 00:07:27,920
So 400 makes it halfway along the width

27205
00:07:28,400 --> 00:07:32,510
and then this 150 is going to make it a little bit towards the top

27206
00:07:32,810 --> 00:07:36,470
so that's a good position for the title. Next,

27207
00:07:36,500 --> 00:07:38,900
we're going to create another piece of text

27208
00:07:39,020 --> 00:07:44,020
and this piece of text is going to be the actual word, so that the French word or

27209
00:07:44,210 --> 00:07:45,043
the English word.

27210
00:07:45,530 --> 00:07:49,580
So we're going to set it at the center of our canvass

27211
00:07:49,910 --> 00:07:52,100
so exactly centered on the image,

27212
00:07:52,520 --> 00:07:57,520
and then we're going to say that the text is going to be equal to the word for

27213
00:07:59,270 --> 00:08:01,820
now anyways. Later on we'll probably change it.

27214
00:08:02,240 --> 00:08:05,420
And then the font is again also Arial.

27215
00:08:06,680 --> 00:08:11,680
And this time it's going to be a bit bigger and it's also going to be bold. So

27216
00:08:12,110 --> 00:08:16,130
there we have it. We've got our flashcard pretty much all laid out.

27217
00:08:16,790 --> 00:08:21,080
Now we just have to add our two buttons. Below our canvas

27218
00:08:21,110 --> 00:08:25,520
I'm going to create two buttons. First, there's going to be the unknown button.

27219
00:08:26,780 --> 00:08:29,750
This is going to be the X which the user presses

27220
00:08:29,780 --> 00:08:32,360
because they don't know what's on the back of the flashcard.

27221
00:08:33,020 --> 00:08:37,250
And this button is going to have a special attribute though,

27222
00:08:37,610 --> 00:08:42,230
the image attribute and that image is going to be a photo image.

27223
00:08:42,559 --> 00:08:45,290
So let's put this as the cross_image,

27224
00:08:45,890 --> 00:08:47,870
and it's going to be a photo image

27225
00:08:48,080 --> 00:08:50,960
which is going to be created from the images folder

27226
00:08:51,440 --> 00:08:54,650
and it is the wrong.png.

27227
00:08:55,830 --> 00:09:00,090
And that image is what's going to go inside our unknown button.

27228
00:09:00,840 --> 00:09:05,010
Let's go ahead and layout our unknown button on the grid so that it'll actually

27229
00:09:05,010 --> 00:09:07,350
show up. Row is going to be 1,

27230
00:09:07,350 --> 00:09:11,190
so below the canvas, and then column is going to be 0.

27231
00:09:12,960 --> 00:09:16,500
So now you can see our X button show up here.

27232
00:09:17,340 --> 00:09:22,050
Next, I'm going to create the check_image. This is going to be the checkmark.

27233
00:09:22,650 --> 00:09:24,480
And in this case, its again,

27234
00:09:24,510 --> 00:09:29,010
a photo image created from a file

27235
00:09:29,010 --> 00:09:33,450
which is in our images/right.png.

27236
00:09:34,110 --> 00:09:38,100
And of course, you can always just double click on each of these images and view

27237
00:09:38,100 --> 00:09:41,190
them and just make sure that they are the ones that you want to use.

27238
00:09:42,480 --> 00:09:46,020
So once we've got our image, we can create our known_button.

27239
00:09:46,800 --> 00:09:51,800
And this is going to now have a image attribute set to this check image.

27240
00:09:56,550 --> 00:10:01,380
And then we can place our known_button onto the grid as well.

27241
00:10:01,620 --> 00:10:06,000
So row = 1 and column is going to be equal to 1 as well.

27242
00:10:06,300 --> 00:10:08,550
So its on the same row as the unknown button,

27243
00:10:08,850 --> 00:10:12,630
but it's just shifted a little bit to the right. Now at this point

27244
00:10:12,630 --> 00:10:13,710
if I run the code,

27245
00:10:13,740 --> 00:10:18,740
you can see that our check button is all the way on the right while our canvas

27246
00:10:19,350 --> 00:10:22,650
and our cross button are in the left most column.

27247
00:10:23,130 --> 00:10:25,980
So you know what you need to do. You have to change

27248
00:10:26,250 --> 00:10:31,200
this canvas grid to have a column span of 2.

27249
00:10:31,590 --> 00:10:35,160
So it starts at column 0 but ends at column 1.

27250
00:10:36,450 --> 00:10:37,620
Now when you run it,

27251
00:10:37,620 --> 00:10:42,390
you can see it's nicely placed onto the screen in the way that we want it to

27252
00:10:42,390 --> 00:10:46,680
look. Now, if you want to get rid of the border around the buttons,

27253
00:10:47,040 --> 00:10:49,560
then the easiest way is to again,

27254
00:10:49,590 --> 00:10:52,440
change the highlight thickness to 0.

27255
00:10:52,920 --> 00:10:56,520
So lets add that here and here.

27256
00:10:57,900 --> 00:10:59,640
But both on Mac and Windows,

27257
00:10:59,690 --> 00:11:04,690
you'll see this fine line around the button and it's not easy to get rid of it

27258
00:11:04,920 --> 00:11:09,720
because it's their so that you can click on the button and you can see this

27259
00:11:09,750 --> 00:11:11,190
visible depression.

27260
00:11:11,580 --> 00:11:16,080
That way it lets the user know that the button press was actually successful.

27261
00:11:17,280 --> 00:11:18,300
But that's fine.

27262
00:11:18,720 --> 00:11:23,720
And we're now pretty much done with our user interface. In the next step

27263
00:11:24,360 --> 00:11:28,830
we're going to get rid of these placeholders, title and word, and we're going to

27264
00:11:28,830 --> 00:11:33,600
start picking out the words from this french_words.csv,

27265
00:11:33,900 --> 00:11:38,900
picking out random records like this or this so that we can put the French word

27266
00:11:39,750 --> 00:11:43,620
into right here and change the title to say French.

27267
00:11:44,310 --> 00:11:48,600
For all of that and more, head over to the next lesson and see the instructions.


27268
00:00:00,630 --> 00:00:02,430
Now that we've created the UI,

27269
00:00:02,640 --> 00:00:07,640
the next step or step 2 was to try and get the buttons to start working so

27270
00:00:09,750 --> 00:00:12,300
that when we press the cross or the tick button,

27271
00:00:12,570 --> 00:00:16,650
we get a new French word being shown in the middle here,

27272
00:00:16,950 --> 00:00:21,750
and the title switches to the word of French. So how do we do this?

27273
00:00:22,050 --> 00:00:24,930
Well, firstly, for both of these buttons

27274
00:00:24,960 --> 00:00:27,090
the unknown and the known button,

27275
00:00:27,450 --> 00:00:32,450
we're going to add a command. And remember the command links to a particular

27276
00:00:32,850 --> 00:00:35,220
function that is going to be called.

27277
00:00:35,340 --> 00:00:40,340
So we'll call that next_card and we'll add that to both the known and the

27278
00:00:41,520 --> 00:00:42,510
unknown buttons.

27279
00:00:44,670 --> 00:00:47,430
Now that we've got next_card added here,

27280
00:00:47,520 --> 00:00:51,540
now let's go ahead and create this function next_card.

27281
00:00:52,530 --> 00:00:55,770
What exactly is this function going to do? Well,

27282
00:00:55,800 --> 00:01:00,630
it's going to take the words from the french_words.csv

27283
00:01:01,110 --> 00:01:06,110
and it's going to get hold of some of these words and their translations.

27284
00:01:06,840 --> 00:01:07,680
So it basically,

27285
00:01:07,890 --> 00:01:11,760
you can imagine these as single rows that we want to get hold of.

27286
00:01:12,690 --> 00:01:14,610
Now, what we need to do first though

27287
00:01:14,610 --> 00:01:19,610
is we need to use pandas in order to read from that CSV.

27288
00:01:20,430 --> 00:01:25,430
So we're going to first import pandas and it should already be installed in

27289
00:01:25,920 --> 00:01:28,950
your project. If not, you'll see a red light bulb

27290
00:01:29,010 --> 00:01:32,400
and then you can just click on it and then install that module.

27291
00:01:33,000 --> 00:01:34,890
Once we've got pandas enabled though,

27292
00:01:34,920 --> 00:01:39,920
we're going to use panders to read from a CSV and the CSV is our french_words.csv

27293
00:01:43,110 --> 00:01:45,810
from the data folder.

27294
00:01:46,590 --> 00:01:49,650
Now we're going to set this as equal to the data.

27295
00:01:50,070 --> 00:01:54,240
So this is now going to be a data frame. And in fact,

27296
00:01:54,240 --> 00:01:55,860
if I go ahead and print it

27297
00:01:55,880 --> 00:01:56,713
now

27298
00:02:00,410 --> 00:02:05,410
you can see that pandas will nicely format our table with the column headings

27299
00:02:07,010 --> 00:02:09,050
and also record numbers

27300
00:02:09,380 --> 00:02:14,120
and each of these rows are basically the pieces of data that we're interested

27301
00:02:14,120 --> 00:02:16,910
in. Now that we've got a data frame,

27302
00:02:17,030 --> 00:02:20,750
we can convert that data frame into a dictionary.

27303
00:02:21,290 --> 00:02:25,310
Let's go ahead and create a dictionary which we'll call out to_learn,

27304
00:02:25,580 --> 00:02:27,710
so that's the word that we need to learn,

27305
00:02:28,220 --> 00:02:32,630
and this is going to be a dictionary that's created from this data

27306
00:02:32,900 --> 00:02:37,430
from this french_words.csv. But notice how at the moment,

27307
00:02:37,430 --> 00:02:41,570
if we just use the default method of creating a dictionary,

27308
00:02:42,170 --> 00:02:46,430
what our to_learn is going to look like is like this.

27309
00:02:46,670 --> 00:02:49,580
We've got French and then inside

27310
00:02:49,610 --> 00:02:54,140
we've got all of the French words and then we've got a key later on called

27311
00:02:54,260 --> 00:02:58,010
English and all of the corresponding English words.

27312
00:02:58,490 --> 00:03:03,250
Now, that's what we want. Instead, we want to change one of the parameters

27313
00:03:03,310 --> 00:03:04,480
which is orient,

27314
00:03:04,810 --> 00:03:09,810
so how do we want to orient the table to create this dictionary? Now in the hints

27315
00:03:11,200 --> 00:03:14,620
for step 2, I already showed you that you could use this

27316
00:03:14,620 --> 00:03:19,620
orient set to records and this way it'll give you each column's values as a

27317
00:03:21,670 --> 00:03:24,490
list. Let me show you what that looks like.

27318
00:03:24,820 --> 00:03:27,640
So let's change this parameter orient,

27319
00:03:27,970 --> 00:03:30,820
and we'll set it to equal the string records.

27320
00:03:31,870 --> 00:03:33,700
Remember that there's an 's' at the end.

27321
00:03:34,720 --> 00:03:39,040
And now we can compare the previous version of the dictionary

27322
00:03:39,040 --> 00:03:43,330
that's generated from the data to the new version.

27323
00:03:43,360 --> 00:03:48,070
So let me run the code again and you can see now we've basically got a list of

27324
00:03:48,070 --> 00:03:52,390
dictionaries and each dictionary has a key, French,

27325
00:03:52,750 --> 00:03:54,880
the French word, a key English,

27326
00:03:54,940 --> 00:03:59,830
and then the English word and so on and so forth. This is really,

27327
00:03:59,830 --> 00:04:04,830
really useful for us because we can basically pick a random entry from this list

27328
00:04:05,800 --> 00:04:10,390
and we'll be able to tap into the French value and the English value later on

27329
00:04:10,390 --> 00:04:15,190
when we flip our cards. That is our to_learn dictionary done.

27330
00:04:15,760 --> 00:04:18,040
So when the next_card function gets called,

27331
00:04:18,519 --> 00:04:23,320
then we're going to need to pick out some data from this dictionary and the way

27332
00:04:23,320 --> 00:04:25,690
that we're gonna pick it out is randomly.

27333
00:04:25,720 --> 00:04:30,640
So we're going to import the random module and we're going to use random.

27334
00:04:30,640 --> 00:04:35,640
choice in order to pick out a random item from this list of words to learn.

27335
00:04:38,650 --> 00:04:43,120
And once we've got a random choice which we'll call current_card,

27336
00:04:44,200 --> 00:04:49,200
then we can get hold of the data from this current_card by saying current_card

27337
00:04:51,070 --> 00:04:55,510
[French]. Remember that in this french_words.csv

27338
00:04:55,510 --> 00:04:58,540
we've got a capital F and a capital E.

27339
00:04:58,570 --> 00:05:01,450
So our keys must match that exactly.

27340
00:05:02,140 --> 00:05:04,660
So let's go ahead and print this

27341
00:05:04,960 --> 00:05:09,960
and you can see now that when I press on one of these buttons,

27342
00:05:11,200 --> 00:05:13,060
either the cross or the tick,

27343
00:05:13,300 --> 00:05:18,300
it's going to pick out a random French word from my list of words in this

27344
00:05:18,550 --> 00:05:22,390
french_words.csv. So now instead of printing it,

27345
00:05:22,810 --> 00:05:26,950
let's go ahead and put it into these pieces of text on our canvas.

27346
00:05:27,670 --> 00:05:28,690
In order to do that,

27347
00:05:28,750 --> 00:05:33,750
I'm going to create a variable called card_title to hold on to the title and

27348
00:05:37,300 --> 00:05:41,680
the card_word to hold on to the word text.

27349
00:05:42,340 --> 00:05:47,020
And now I can go ahead and tap into my canvas and say

27350
00:05:47,620 --> 00:05:52,390
itemconfig and the item that we want to configure is firstly

27351
00:05:52,420 --> 00:05:53,830
our card_title

27352
00:05:54,460 --> 00:05:59,460
and the thing we want to configure about it is to change the text to say French.

27353
00:06:00,680 --> 00:06:04,670
So that's the title remember, which is the part that's up here.

27354
00:06:05,360 --> 00:06:09,650
And then we're going to do the same thing using canvas.itemconfig

27355
00:06:09,980 --> 00:06:12,830
but this time we're going to configure the card_word,

27356
00:06:13,820 --> 00:06:17,660
and this is going to be set to exactly what we printed before,

27357
00:06:17,900 --> 00:06:22,900
which is the random card that was picked out and the value under the key French.

27358
00:06:25,130 --> 00:06:27,620
So now when I hit run again,

27359
00:06:27,830 --> 00:06:30,440
you can see that when I press either of these buttons,

27360
00:06:30,770 --> 00:06:34,610
I'm going to get a random French word showing up right here.

27361
00:06:36,020 --> 00:06:39,050
But notice how when I first run the app

27362
00:06:39,110 --> 00:06:43,850
you can see that it still has the placeholder title and word showing up.

27363
00:06:44,330 --> 00:06:47,930
Instead, we want it to show the next card.

27364
00:06:48,290 --> 00:06:52,220
So we have to call this function once we've created all of our UI

27365
00:06:52,490 --> 00:06:54,410
but before we get to our main loop.

27366
00:06:54,890 --> 00:06:59,300
So we'll call our next card. And this way,

27367
00:06:59,300 --> 00:07:03,200
once we've created all of our images and everything else,

27368
00:07:03,440 --> 00:07:05,540
then we can generate the next card,

27369
00:07:05,570 --> 00:07:10,310
get the data and put it into the card title and card word. So in fact,

27370
00:07:10,310 --> 00:07:11,000
if you want to,

27371
00:07:11,000 --> 00:07:15,020
you can actually delete these two pieces of text because they won't actually do

27372
00:07:15,020 --> 00:07:19,670
anything at the moment. And now as soon as we hit run,

27373
00:07:19,700 --> 00:07:23,660
you can see the first thing we see is already a French word

27374
00:07:23,810 --> 00:07:27,860
and it will keep going through all of the words that we have in our CSV.

27375
00:07:28,850 --> 00:07:32,540
There you have it. We've now managed to read from the CSV,

27376
00:07:32,930 --> 00:07:37,930
get a dictionary of all the records in the CSV and to randomly get the French

27377
00:07:38,300 --> 00:07:43,010
word showing up in our flashcard. Our flashcard currently,

27378
00:07:43,010 --> 00:07:46,370
doesn't actually flash. It doesn't change, right?

27379
00:07:46,640 --> 00:07:49,910
We need a way for us to be able to set some sort of a timer,

27380
00:07:50,240 --> 00:07:51,740
say a 3-second timer,

27381
00:07:52,040 --> 00:07:57,040
and then for our card to show us the opposite side or the backside and to show

27382
00:07:57,650 --> 00:08:00,230
us the English translation of the words.

27383
00:08:00,890 --> 00:08:03,260
That is what we're going to tackle on the next lesson.

27384
00:08:03,500 --> 00:08:06,920
So head over to step 3 and have a read of the instructions.


27385
00:00:00,450 --> 00:00:03,750
Now that we've got our words showing up in French,

27386
00:00:04,110 --> 00:00:09,110
it's time to see the other side of the card and see the English equivalent so

27387
00:00:09,240 --> 00:00:12,420
that we can check our knowledge. To do this

27388
00:00:12,480 --> 00:00:17,480
we're going to have to implement some sort of way of changing this card after a

27389
00:00:18,660 --> 00:00:22,110
set amount of time. So we're going to flip the card

27390
00:00:22,290 --> 00:00:25,110
after three seconds are up. To do that

27391
00:00:25,170 --> 00:00:28,470
we're going to use the window.after method.

27392
00:00:29,040 --> 00:00:32,310
Right after here where we've created a window,

27393
00:00:32,610 --> 00:00:34,620
we're going to say window.after.

27394
00:00:35,130 --> 00:00:38,340
And then we can specify the amount of time in milliseconds.

27395
00:00:38,400 --> 00:00:41,790
So I'm going to say three seconds or 3000 milliseconds.

27396
00:00:42,450 --> 00:00:45,360
And then the function that we're going to call is a function

27397
00:00:45,360 --> 00:00:49,530
that's going to be called flip_card. And if we want that to work,

27398
00:00:49,560 --> 00:00:52,680
then we're going to have to create it. So I'm going to create right here,

27399
00:00:52,710 --> 00:00:53,543
just above.

27400
00:00:53,850 --> 00:00:58,850
So I'll call it flip_card and this function is going to take care of changing the

27401
00:00:59,520 --> 00:01:03,630
card to show the English word for the current card,

27402
00:01:04,050 --> 00:01:08,550
and also going to change the image from the card_front to

27403
00:01:08,550 --> 00:01:12,930
the card_back, and also we're going to change the color of the text as well.

27404
00:01:13,620 --> 00:01:14,790
In our flip card,

27405
00:01:14,820 --> 00:01:19,350
we're going to get hold of the canvas and we're going to first item.config

27406
00:01:19,380 --> 00:01:24,270
the card_ title. So we're going to change the card_title to,

27407
00:01:24,270 --> 00:01:26,790
instead of saying French, we're going to say, well,

27408
00:01:26,790 --> 00:01:29,340
this is now the English translation,

27409
00:01:30,030 --> 00:01:33,180
and then we're going to config the card word,

27410
00:01:33,750 --> 00:01:36,960
and this is going to be still from the current card,

27411
00:01:37,260 --> 00:01:40,770
but we want to get ahold of the value under the key English instead.

27412
00:01:41,400 --> 00:01:46,320
Now at the moment, this current card is locked up inside next_card.

27413
00:01:46,590 --> 00:01:51,590
So we can't actually get hold of it without creating a new random choice.

27414
00:01:52,650 --> 00:01:56,340
So what we can do is we can create our current card

27415
00:01:58,680 --> 00:02:01,680
and we can set it to a empty dictionary.

27416
00:02:02,280 --> 00:02:07,280
And then we can change this to a global and tap into that current card to modify

27417
00:02:08,880 --> 00:02:13,880
it and save this random choice from our list of French and English pairs.

27418
00:02:15,720 --> 00:02:17,760
So once we've got that inside there,

27419
00:02:17,760 --> 00:02:22,500
then we can tap into it inside flip_card and we can say current card

27420
00:02:22,710 --> 00:02:26,370
get hold of the value under the English key.

27421
00:02:27,270 --> 00:02:32,220
And that way we update both of our texts. So right now if I hit run,

27422
00:02:32,250 --> 00:02:35,310
you can see that immediately after three seconds

27423
00:02:35,640 --> 00:02:40,110
we switched to the opposite side and we have our English and the English

27424
00:02:40,140 --> 00:02:44,970
equivalent of the same word showing up. So for example,

27425
00:02:44,970 --> 00:02:47,940
in French matin, in English means morning.

27426
00:02:48,120 --> 00:02:51,900
So that's how we can verify that we actually know the meaning of the card.

27427
00:02:52,710 --> 00:02:57,450
In addition to changing the words, I'm also going to change the image.

27428
00:02:57,750 --> 00:03:01,000
So notice how we saved the words with a variable.

27429
00:03:01,240 --> 00:03:04,330
We can do the same thing for this create image method.

27430
00:03:04,810 --> 00:03:09,810
We can say the card_background is equal to canvas create image.

27431
00:03:10,390 --> 00:03:14,140
And in addition to creating the card front image,

27432
00:03:14,350 --> 00:03:17,170
we can also create the card back image.

27433
00:03:17,800 --> 00:03:20,350
Now, you have to be really careful here

27434
00:03:20,380 --> 00:03:23,440
because if you create this card back image

27435
00:03:23,740 --> 00:03:27,310
which is a photo image created from file,

27436
00:03:27,730 --> 00:03:31,960
if you create it inside one of these functions, by the end of the function

27437
00:03:31,960 --> 00:03:35,680
call, that reference to that particular image will be gone.

27438
00:03:35,980 --> 00:03:40,980
And it won't work if you create this photo image inside flipcard and try to set

27439
00:03:41,380 --> 00:03:45,940
it inside this method. So you have to create it outside of any of the functions.

27440
00:03:46,630 --> 00:03:51,630
So let's change the file to images/card_back.png

27441
00:03:53,830 --> 00:03:58,300
and now we're going to get our canvas to again,

27442
00:03:58,300 --> 00:03:59,890
call itemconfig.

27443
00:04:00,400 --> 00:04:03,310
And this time we're configuring the card_background.

27444
00:04:04,000 --> 00:04:08,350
And the attribute that we want to configure is the image property.

27445
00:04:08,860 --> 00:04:12,670
So we're going to change that to the card_back_img

27446
00:04:12,700 --> 00:04:14,770
which we created right here.

27447
00:04:15,910 --> 00:04:17,769
So now let's just check that again.

27448
00:04:18,250 --> 00:04:21,490
Let's wait three seconds and then it's changed to

27449
00:04:21,519 --> 00:04:24,370
the back of the card. On the back of the card

27450
00:04:24,400 --> 00:04:28,840
we want these two pieces of text to actually have a different color.

27451
00:04:28,870 --> 00:04:32,380
We want it to be white, just so that it stands out from the background.

27452
00:04:33,040 --> 00:04:37,000
And to do that, we can add it along with our item config.

27453
00:04:37,300 --> 00:04:39,100
Not only are we changing the text,

27454
00:04:39,370 --> 00:04:43,090
but also changing the fill of the text to white.

27455
00:04:44,310 --> 00:04:45,143
Okay.

27456
00:04:47,550 --> 00:04:50,670
And now when our card flips over,

27457
00:04:50,940 --> 00:04:54,390
you can see its a green card with a white text.

27458
00:04:55,770 --> 00:04:56,100
Now,

27459
00:04:56,100 --> 00:05:01,100
one of the things we have to do is every time we click on one of these buttons,

27460
00:05:01,980 --> 00:05:05,040
it has the flip back to the front of the card, right?

27461
00:05:05,040 --> 00:05:09,330
That means changing the text color and changing that background image.

27462
00:05:09,840 --> 00:05:13,200
So that happens when we go to next card.

27463
00:05:13,680 --> 00:05:17,730
So in addition to configuring the text and the words,

27464
00:05:18,000 --> 00:05:23,000
we also again have to itemconfig the card_background so that we can change the

27465
00:05:23,400 --> 00:05:28,170
image back to the card front image.

27466
00:05:28,890 --> 00:05:33,540
In addition, we have to change these text colors to have a different fill,

27467
00:05:33,780 --> 00:05:36,360
so we're going to change it back to black.

27468
00:05:39,450 --> 00:05:39,750
Right.

27469
00:05:39,750 --> 00:05:43,650
This way, when the card flips, it goes to green,

27470
00:05:43,980 --> 00:05:47,040
white on green. And then when we go to the front of the card,

27471
00:05:47,130 --> 00:05:49,200
it goes to black on white.

27472
00:05:50,670 --> 00:05:53,490
Now notice how once we go to the next card,

27473
00:05:53,790 --> 00:05:58,790
that card flipping mechanism has gone because we only ever call this window

27474
00:05:59,150 --> 00:06:01,700
after the first time we create the window.

27475
00:06:02,270 --> 00:06:05,900
So we actually need this to happen a few times. In fact,

27476
00:06:05,900 --> 00:06:09,590
we need it to happen every single time we go to the next card.

27477
00:06:10,070 --> 00:06:12,950
So after we've configured all the things on our card,

27478
00:06:13,010 --> 00:06:16,760
we're gonna call a window.after, three seconds, flipcard.

27479
00:06:17,240 --> 00:06:21,710
So this way, even if we go to the next card and we wait three seconds,

27480
00:06:21,830 --> 00:06:23,990
it again goes to the back.

27481
00:06:24,950 --> 00:06:29,570
Now one of the bugs you might have encountered is if you clicked this button

27482
00:06:29,600 --> 00:06:33,440
many times and you go through lots of different words,

27483
00:06:33,740 --> 00:06:37,130
you see immediately, that card actually flipped.

27484
00:06:37,700 --> 00:06:41,690
And it's because that window.after three seconds is counting down in the

27485
00:06:41,690 --> 00:06:45,350
background, waiting, waiting, waiting until three seconds

27486
00:06:45,590 --> 00:06:47,300
at which point it's going to flip the card.

27487
00:06:47,690 --> 00:06:52,310
It doesn't care that you've actually just gone onto a new card and you want to

27488
00:06:52,310 --> 00:06:56,900
wait again, three seconds. In order to get this to work,

27489
00:06:57,080 --> 00:07:02,080
we actually have to give this line of code a variable so that we'll call it the

27490
00:07:02,720 --> 00:07:06,710
flip_timer. And this is now a global

27491
00:07:06,890 --> 00:07:11,890
which we can tap into and we can add it after a comma over here,

27492
00:07:13,430 --> 00:07:15,890
flip_timer. Alternatively,

27493
00:07:15,890 --> 00:07:19,730
you can also go onto a new line and say global flip_timer.

27494
00:07:20,060 --> 00:07:23,450
It doesn't really make a difference other than the fact that this probably takes

27495
00:07:23,690 --> 00:07:27,920
less lines of code. Now, once we've got access to our flip_timer,

27496
00:07:28,190 --> 00:07:31,580
we can say that every time we go to a new card,

27497
00:07:32,180 --> 00:07:36,350
when we click on one of these buttons, we're going to invalidate this timer.

27498
00:07:36,890 --> 00:07:39,140
So we can say window.after_

27499
00:07:39,170 --> 00:07:43,550
cancel and then pass in the ID of our flip_timer.

27500
00:07:44,300 --> 00:07:46,670
And then after we've set up this card,

27501
00:07:46,760 --> 00:07:51,760
we can set up a new flip_timer so that it waits for again three seconds.

27502
00:07:53,270 --> 00:07:57,260
And now once I've added that bit of code, it should fix this bug.

27503
00:07:57,650 --> 00:08:02,650
So now whenever I keep going or I press the check or the crossmark,

27504
00:08:03,170 --> 00:08:04,040
it doesn't really matter.

27505
00:08:04,040 --> 00:08:09,040
It's not going to flip until I land on a card and wait for three seconds

27506
00:08:09,620 --> 00:08:13,760
before it flips. There you have it. We've got our card

27507
00:08:13,790 --> 00:08:16,940
flipping technology added to our code.

27508
00:08:17,660 --> 00:08:22,430
Now all that's left is to get rid of the cards that the user says

27509
00:08:22,430 --> 00:08:23,263
they know

27510
00:08:23,570 --> 00:08:28,570
and to create a new CSV that is going to hold all the cards from this to_learn

27511
00:08:30,440 --> 00:08:34,700
dictionary and to remove the cards that the user says they know.

27512
00:08:35,240 --> 00:08:38,480
And then that way, the next time we run our app

27513
00:08:38,720 --> 00:08:43,610
it will remember which words we've learned and which words we haven't so that we

27514
00:08:43,610 --> 00:08:47,120
can load up only the words we have yet to learn.

27515
00:08:47,870 --> 00:08:52,370
So for that, head over to the next lesson where we've got the final step of the

27516
00:08:52,370 --> 00:08:53,510
flashcard project.


27517
00:00:00,300 --> 00:00:04,680
We are now within sight of the finish line. We're onto the last step.

27518
00:00:04,710 --> 00:00:09,240
So this is the solution for step 4. And in step 4

27519
00:00:09,270 --> 00:00:14,270
we want to be able to improve our program so that the words where the user

27520
00:00:14,910 --> 00:00:18,780
clicks the checkmark to means they already know that word.

27521
00:00:18,810 --> 00:00:23,040
They know what it means and they don't wanna see it again in this list.

27522
00:00:23,580 --> 00:00:28,580
So what we want to be able to do is to remove the words that the user knows from

27523
00:00:29,010 --> 00:00:33,510
this dictionary of words to_learn. And to do that,

27524
00:00:33,630 --> 00:00:38,610
we have to change this command. When the user clicks on the unknown button,

27525
00:00:38,880 --> 00:00:41,340
we're going to simply just give them the next card,

27526
00:00:41,370 --> 00:00:44,700
which is a random word from the list of words.

27527
00:00:45,210 --> 00:00:47,850
But when they use it clicks on the known button,

27528
00:00:48,000 --> 00:00:52,440
instead of clicking on next card, we're going to call a different function

27529
00:00:52,710 --> 00:00:56,610
which I'm going to call is_known. Now is_known

27530
00:00:56,640 --> 00:00:58,050
is going to be a function

27531
00:00:58,110 --> 00:01:03,110
that's going to remove the current card from the cards that are in the list of

27532
00:01:06,300 --> 00:01:07,170
words to learn.

27533
00:01:07,830 --> 00:01:12,120
So what we're going to do is we're going to get hold of our list to learn,

27534
00:01:13,470 --> 00:01:17,070
and then we're going to call the remove method.

27535
00:01:17,610 --> 00:01:20,460
And then we're going to remove a particular element from it.

27536
00:01:20,880 --> 00:01:24,240
And that happens to be the current card.

27537
00:01:25,410 --> 00:01:28,770
So remember, the current card is a dictionary

27538
00:01:29,040 --> 00:01:33,480
which we got by randomly choosing from our list to learn.

27539
00:01:34,080 --> 00:01:36,990
So now, when the user says is_known,

27540
00:01:37,320 --> 00:01:41,670
then the current card is going to be removed from the list of words to learn.

27541
00:01:42,120 --> 00:01:43,560
And then after we've done that,

27542
00:01:43,920 --> 00:01:48,920
then we're going to call next card from this particular method. At the moment,

27543
00:01:49,440 --> 00:01:53,250
if we run this code and I just keep clicking the check mark,

27544
00:01:53,670 --> 00:01:58,670
eventually, we're going to have a very small list of words that we're going to

27545
00:01:59,370 --> 00:02:01,260
pick from. In fact,

27546
00:02:01,290 --> 00:02:06,290
if I go ahead and print the length of my list, to_learn,

27547
00:02:08,190 --> 00:02:13,190
you can see that the first time I run this code and I click on the is_known

27548
00:02:14,640 --> 00:02:19,020
button, we have a hundred words. But if I keep clicking on this,

27549
00:02:19,050 --> 00:02:21,090
then you'll see that every single time,

27550
00:02:21,090 --> 00:02:25,050
I'm just reducing that list because I'm saying,

27551
00:02:25,080 --> 00:02:27,660
I already know what this word compris means

27552
00:02:28,110 --> 00:02:31,950
and that word is now taken out of my list of words to learn.

27553
00:02:32,250 --> 00:02:36,630
So now that list is smaller by one entry.

27554
00:02:37,530 --> 00:02:41,670
Now this works right now, but if I rerun the app,

27555
00:02:41,700 --> 00:02:45,540
then you can see it goes back right to the beginning

27556
00:02:45,750 --> 00:02:47,550
and it has a hundred words again.

27557
00:02:48,150 --> 00:02:52,950
So in order to keep hold of the words that I still need to learn,

27558
00:02:53,280 --> 00:02:57,540
I have to save this list to a new permanent file

27559
00:02:57,840 --> 00:03:01,000
each time the user clicks on this is_known button.

27560
00:03:01,780 --> 00:03:06,220
So the way that I'm going to do that is by using pandas again.

27561
00:03:06,790 --> 00:03:10,900
I'm going to use pandas to create a new data frame.

27562
00:03:11,530 --> 00:03:15,970
And that data frame is going to be created from our list to_learn.

27563
00:03:17,230 --> 00:03:19,540
Now, I'm going to save this as our data,

27564
00:03:20,170 --> 00:03:25,170
and then I can say data.to_csv in order to save it as a CSV file.

27565
00:03:26,350 --> 00:03:31,350
So I'll call this words_to_learn.csv.

27566
00:03:32,860 --> 00:03:37,860
So now, if I press my check mark

27567
00:03:38,980 --> 00:03:41,740
and I take a look within my files,

27568
00:03:41,770 --> 00:03:44,980
you can see that words_to_learn.csv is created.

27569
00:03:45,490 --> 00:03:50,380
And at the moment it's got 89 entries. But if I keep clicking this a few times,

27570
00:03:50,620 --> 00:03:52,570
it's going to reduce each time.

27571
00:03:52,960 --> 00:03:57,250
So this is now a permanent storage of all the words that I have yet to learn.

27572
00:03:57,940 --> 00:04:01,510
But I don't really want it randomly in the middle of my project.

27573
00:04:01,750 --> 00:04:05,170
I want it to be saved alongside my french_words.csv.

27574
00:04:05,740 --> 00:04:08,200
So I have to change this to a file path

27575
00:04:08,230 --> 00:04:11,110
which is going to be data/words_to_learn.csv.

27576
00:04:11,620 --> 00:04:16,620
So let's go ahead and delete this file and do refactor.

27577
00:04:17,110 --> 00:04:18,760
And then we're going to run this again.

27578
00:04:18,880 --> 00:04:22,630
And next time you'll see that it appears in the right place.

27579
00:04:23,530 --> 00:04:26,590
Now, in addition to saving it to CSV,

27580
00:04:26,620 --> 00:04:31,620
we also have to read from that CSV because instead of using the words from our

27581
00:04:32,680 --> 00:04:35,860
original list which is our french_words.csv,

27582
00:04:36,400 --> 00:04:41,400
I actually want to be able to read from my words_to_learn.csv instead,

27583
00:04:42,100 --> 00:04:45,460
because that way, every single time I rerun the app,

27584
00:04:45,760 --> 00:04:49,570
it's always going to give me all the words that I've yet to learn.

27585
00:04:50,020 --> 00:04:53,320
So currently we're on 87. If I run this again,

27586
00:04:53,560 --> 00:04:55,840
you can see that the first time I click on this,

27587
00:04:55,930 --> 00:04:59,560
it's going to go to 86 instead of going back to 100.

27588
00:05:00,220 --> 00:05:01,750
But there is a problem here though

27589
00:05:02,080 --> 00:05:07,080
because if I delete this file, words_to_learn.csv, and I go ahead and run this, the first

27590
00:05:09,250 --> 00:05:13,540
time this runs it's going to crash and we have that familiar file

27591
00:05:13,540 --> 00:05:16,810
not found error. So we know how to deal with that.

27592
00:05:16,840 --> 00:05:21,280
We need to catch this exception. The exception occurs right here.

27593
00:05:21,940 --> 00:05:26,940
It happens when we try to get hold of this piece of data

27594
00:05:27,640 --> 00:05:32,290
which may or may not exist. So if it does not exist,

27595
00:05:32,470 --> 00:05:36,820
so we're going to catch this except file not found error. Well,

27596
00:05:36,820 --> 00:05:40,390
in that case, we're going to be using the original data

27597
00:05:41,050 --> 00:05:45,970
which comes from the french_words.csv. So we'll say pandas.

27598
00:05:46,000 --> 00:05:47,050
read_csv

27599
00:05:47,140 --> 00:05:52,090
and then we're going to read this file, data/french_words.csv.

27600
00:05:52,660 --> 00:05:56,890
So this is always going to be there because it's preloaded with our project.

27601
00:05:57,500 --> 00:06:01,070
But if we do manage to find our words_to_learn.csv,

27602
00:06:01,130 --> 00:06:05,810
then that means this program has been run before and we've removed some of the

27603
00:06:05,810 --> 00:06:10,610
words we already know. So we can catch that with an else statement and we can say,

27604
00:06:10,610 --> 00:06:11,900
well, in this case,

27605
00:06:12,260 --> 00:06:16,130
we're going to set a global variable called to_learn

27606
00:06:16,310 --> 00:06:18,770
which starts out as an empty dictionary.

27607
00:06:19,250 --> 00:06:23,780
And we set it to the data that comes from this CSV.

27608
00:06:24,620 --> 00:06:27,620
However, if that file was not found,

27609
00:06:27,950 --> 00:06:32,950
then this to_learn is going to be set to the original data.to_dict

27610
00:06:34,790 --> 00:06:39,410
and we're going to orient according to records as well.

27611
00:06:43,510 --> 00:06:43,660
Okay.

27612
00:06:43,660 --> 00:06:47,590
Now, when we run our code, you can see we have no errors.

27613
00:06:48,010 --> 00:06:49,870
And the first time that it runs,

27614
00:06:49,900 --> 00:06:54,310
it's going to pick from our french_words.csv. Now,

27615
00:06:54,310 --> 00:06:58,480
once I've started saying I've learned this, I've learned this,

27616
00:06:58,480 --> 00:07:03,130
I've learned this, then it's going to generate a words_to_learn.csv.

27617
00:07:03,580 --> 00:07:05,560
And the next time I run this code,

27618
00:07:05,860 --> 00:07:10,860
it's gonna start using that words_to_learn.csv and start where I left off.

27619
00:07:11,800 --> 00:07:15,430
Now, there is one slight weird bug to this.

27620
00:07:15,820 --> 00:07:19,060
When you take a look at the words_to_learn.csv,

27621
00:07:19,750 --> 00:07:23,590
it adds the record number to the first column

27622
00:07:23,950 --> 00:07:27,850
every single time I run the code. So if I run this code again,

27623
00:07:28,210 --> 00:07:31,960
you can see now I have three columns of all of the records.

27624
00:07:32,500 --> 00:07:37,330
So basically when we read from this particular CSV,

27625
00:07:37,780 --> 00:07:42,580
we generate a data frame. And when I read from that data frame,

27626
00:07:42,940 --> 00:07:47,800
so let's delete this and run our code again,

27627
00:07:49,090 --> 00:07:53,860
you can see that pandas is automatically added in these record numbers.

27628
00:07:54,280 --> 00:07:59,280
So that gets then added back into our words_to_learn.csv when it saves it into

27629
00:08:02,860 --> 00:08:06,790
the file. If we want to get rid of these record numbers,

27630
00:08:07,000 --> 00:08:10,330
all we have to do is when we save it to the CSV,

27631
00:08:10,870 --> 00:08:15,870
we can set a property called index to false. This way

27632
00:08:16,150 --> 00:08:20,800
it just doesn't add the index numbers to our newly created list

27633
00:08:21,160 --> 00:08:22,990
and now if I rerun this code,

27634
00:08:23,440 --> 00:08:26,260
you can see that our words_to_learn.csv

27635
00:08:26,560 --> 00:08:31,560
doesn't actually include an index. It only includes the actual records or

27636
00:08:31,660 --> 00:08:34,480
the actual words and their English translations.

27637
00:08:36,700 --> 00:08:37,059
That's

27638
00:08:37,059 --> 00:08:41,770
basically it. That's all the solutions to our capstone project.

27639
00:08:42,309 --> 00:08:47,140
And you've now built a fully fleshed flashcard that you can use to learn

27640
00:08:47,140 --> 00:08:48,160
languages.

27641
00:08:48,190 --> 00:08:52,370
So you could have the front with whatever language you want, and the back with

27642
00:08:52,440 --> 00:08:56,790
English translations, or you can use it to learn Programming facts.

27643
00:08:56,790 --> 00:09:01,500
You could have the front with a Programming word and the back as the meaning of

27644
00:09:01,500 --> 00:09:02,520
the Programming word.

27645
00:09:02,780 --> 00:09:05,540
You could use it to study History or Geography.

27646
00:09:06,050 --> 00:09:10,520
And this program is going to help you manage all the things that you don't

27647
00:09:10,520 --> 00:09:15,520
remember and keep showing it to you until you do. Have fun modifying this

27648
00:09:16,520 --> 00:09:20,300
flashcard app and I hope it will be helpful in your studies as well.

27649
00:09:21,170 --> 00:09:24,080
If you've built something particularly interesting, again,

27650
00:09:24,140 --> 00:09:28,370
be sure to share with us in the Q/A so that we can all admire and

27651
00:09:28,370 --> 00:09:30,350
congratulate you on your hard work.



27652
00:00:00,180 --> 00:00:05,040
Hey there, welcome to day 32 of 100 Days of Code. Now,

27653
00:00:05,040 --> 00:00:05,670
today

27654
00:00:05,670 --> 00:00:10,560
we're going to be learning about email SMTP and the date time module.

27655
00:00:11,130 --> 00:00:15,930
Basically, we're going to learn how to send email using Python code.

27656
00:00:16,350 --> 00:00:20,430
And we're going to determine when we send the email using this daytime time

27657
00:00:20,430 --> 00:00:23,850
module. And once we've learned all of those skills,

27658
00:00:24,150 --> 00:00:29,150
we're going to be building a really interesting and possibly helpful tool where

27659
00:00:29,850 --> 00:00:34,850
we can automate a happy birthday email to all of our friends and family.

27660
00:00:36,870 --> 00:00:41,870
So, I probably only remember a handful of people's emails off by heart and the

27661
00:00:42,900 --> 00:00:47,010
rest of the time, I rely pretty much on Facebook telling me that it's so,

27662
00:00:47,010 --> 00:00:51,600
and so's birthday. And I end up writing on their timeline.

27663
00:00:52,080 --> 00:00:56,490
But if Facebook didn't tell me, I would probably not remember.

27664
00:00:57,060 --> 00:01:01,860
Now I know some friends of mine are really good at remembering everybody's

27665
00:01:02,060 --> 00:01:02,893
birthday,

27666
00:01:03,110 --> 00:01:06,860
even if they don't go on the Facebook and they'll send you a message every year

27667
00:01:07,280 --> 00:01:09,530
showing how good of a friend they are.

27668
00:01:09,620 --> 00:01:12,770
And it always makes me feel a little bit bad inside.

27669
00:01:13,280 --> 00:01:16,850
So what's our solution? To remember everybody's date of birth?

27670
00:01:17,180 --> 00:01:20,750
No. We're going to build a Python program.

27671
00:01:21,410 --> 00:01:26,360
And this Python program is going to be the automated birthday wisher.

27672
00:01:27,110 --> 00:01:28,100
All we have to do it is

27673
00:01:28,220 --> 00:01:33,020
create a spreadsheet of all of our friend's birthdays and then create a bunch of

27674
00:01:33,020 --> 00:01:33,680
emails

27675
00:01:33,680 --> 00:01:38,240
and we'll randomly pick an email to send to each of these friends.

27676
00:01:38,990 --> 00:01:42,830
And this program is going to teach us some skills in Python

27677
00:01:43,100 --> 00:01:45,140
helping us level up as a programmer.

27678
00:01:45,350 --> 00:01:49,730
But it also makes us better people because our friends will feel like we

27679
00:01:49,730 --> 00:01:54,410
remember their birthdays and help our friends feel more appreciated.

27680
00:01:55,880 --> 00:02:00,080
Email SMTP is a module that comes pre-bundled with Python

27681
00:02:00,440 --> 00:02:04,370
and it helps us send email using Python code.

27682
00:02:05,210 --> 00:02:10,210
And daytime is another Python module that helps us figure out what today's date

27683
00:02:10,820 --> 00:02:15,710
is or how to format a particular date and time. And in our case,

27684
00:02:15,740 --> 00:02:20,330
it's going to help us figure out if today happens to be the day of one of our

27685
00:02:20,330 --> 00:02:23,900
friend's birthdays, in which case we'll send them a birthday email.

27686
00:02:24,500 --> 00:02:27,320
So that's the plan. Head over to the next lesson

27687
00:02:27,530 --> 00:02:30,650
and we'll get started by learning how to send email.


27688
00:00:00,750 --> 00:00:05,880
The first thing we have to figure out is how exactly does email work?

27689
00:00:06,300 --> 00:00:11,960
We all know that we can log on to Gmail or Yahoo dot com and we can start filling out an email.

27690
00:00:11,970 --> 00:00:14,820
It's pretty much second nature to everybody by now.

27691
00:00:15,030 --> 00:00:18,050
But what actually happens behind the scenes?

27692
00:00:18,060 --> 00:00:25,290
Well, let's say that we have a sender Angela gmail.com and a recipient Timmy at Yahoo dot com.

27693
00:00:25,500 --> 00:00:32,400
Now in order to send this email from my Gmail account to another email account, what happens behind

27694
00:00:32,400 --> 00:00:39,330
the scene is that there's a Gmail mail server which will receive my message and then there's a Yahoo

27695
00:00:39,330 --> 00:00:46,950
Mail server which will store the message until Timmy logs on to his computer and logs on to Yahoo dot

27696
00:00:46,950 --> 00:00:50,910
com, which downloads the email from the Yahoo Mail server.

27697
00:00:51,540 --> 00:00:56,340
So this email is going to move between all of these steps.

27698
00:00:56,430 --> 00:01:03,540
And in order to do this, it relies on something called SMTP, the simple mail transfer protocol.

27699
00:01:04,200 --> 00:01:11,400
And this contains all of the rules that determine how an email is received by mail servers passed onto

27700
00:01:11,400 --> 00:01:16,140
the next mail server and how email can be sent around the Internet.

27701
00:01:17,190 --> 00:01:25,440
Now, a good analogy for SMTP is if you imagine these mail servers as a post office and Timmy's computer

27702
00:01:25,440 --> 00:01:34,290
being the mailbox, then SMTP is basically the postman who knows how to handle the email and take it

27703
00:01:34,290 --> 00:01:38,790
to various post offices and eventually put it into Timmy's computer.

27704
00:01:39,520 --> 00:01:48,280
So in Python there's a module called SMTP lib, which allows us to use SMTP to send our email to any

27705
00:01:48,280 --> 00:01:49,930
address on the internet.

27706
00:01:50,530 --> 00:01:57,010
To start, I recommend setting up two fresh email accounts, create a new email account with Gmail,

27707
00:01:57,010 --> 00:02:00,100
and also create a new email account with Yahoo!

27708
00:02:00,190 --> 00:02:06,610
These new email accounts will be perfect for testing your code and following along with the video tutorials.

27709
00:02:06,760 --> 00:02:11,360
Plus, we'll be making those email accounts a little bit less secure to test our code.

27710
00:02:11,380 --> 00:02:15,010
So that's another reason to set up some testing email addresses for now.

27711
00:02:15,670 --> 00:02:20,830
After you've set up your new email accounts, head over to the course resources and download the zip

27712
00:02:20,830 --> 00:02:23,290
file with the starting code for today's lessons.

27713
00:02:24,160 --> 00:02:26,920
And then we're going to open that up using PI charm.

27714
00:02:27,280 --> 00:02:30,700
Now, I want you to take a look inside the starting project.

27715
00:02:30,730 --> 00:02:35,980
There is a main PI file and there's also a quote text file.

27716
00:02:36,010 --> 00:02:37,670
Don't worry about this file for now.

27717
00:02:37,690 --> 00:02:41,230
We're going to come back to it when we explore the date time module.

27718
00:02:41,500 --> 00:02:44,590
For now, we're going to be working within the main PI.

27719
00:02:44,620 --> 00:02:52,960
And I want to show you how you can use this SMTP lib library to start sending emails straight from your

27720
00:02:52,960 --> 00:02:53,980
Python code.

27721
00:02:54,610 --> 00:03:03,670
As always, we import the module SMTP lib and then we can start using it once we've imported this SMTP

27722
00:03:03,670 --> 00:03:04,460
library.

27723
00:03:04,480 --> 00:03:09,150
Essentially, we can use it to create a new SMTP object.

27724
00:03:09,160 --> 00:03:15,160
So we're going to call that object a new connection because it's basically a way for us to be able to

27725
00:03:15,160 --> 00:03:19,690
connect to our email provider's SMTP email server.

27726
00:03:19,900 --> 00:03:27,400
We're going to do this by tapping into the SMTP lib and then creating a object from the SMTP class.

27727
00:03:27,640 --> 00:03:35,350
Now, when we create this object, one of the things that we should specify is the location of our email

27728
00:03:35,350 --> 00:03:37,630
provider's SMTP server.

27729
00:03:37,840 --> 00:03:42,900
Now, for Gmail, it's simply SMTP gmail.com.

27730
00:03:43,000 --> 00:03:45,580
But it's different for every email provider.

27731
00:03:45,760 --> 00:03:52,990
So that means if your email ends in at gmail.com, then this would be how you would connect to your

27732
00:03:52,990 --> 00:03:54,040
email server.

27733
00:03:54,340 --> 00:04:01,750
In our case, I've created a testing email called App Brewery Info at gmail.com.

27734
00:04:01,960 --> 00:04:10,750
And this part that's before the ADD sign is the identity of my email account and the part after the

27735
00:04:10,750 --> 00:04:14,620
ADD sign is the identity of my email provider.

27736
00:04:14,710 --> 00:04:20,050
So in my case I need to connect to SMTP gmail.com.

27737
00:04:20,290 --> 00:04:27,040
But if you have a different email provider, for example, if you're with Hotmail, it's SMTP, Mlive.com

27738
00:04:27,040 --> 00:04:31,810
and if you're with Yahoo, it's SMTP mail, yahoo.com.

27739
00:04:31,960 --> 00:04:38,530
And if you're with a completely different email provider, then simply just Google your email provider

27740
00:04:38,530 --> 00:04:45,250
and the SMTP information and you should find an article somewhere that describes a URL that looks something

27741
00:04:45,250 --> 00:04:46,030
like this.

27742
00:04:46,570 --> 00:04:54,790
Once I've created my connection, the next thing I need to do is to go ahead and call start TLS.

27743
00:04:54,940 --> 00:04:58,720
Now TLS stands for Transport Layer Security.

27744
00:04:58,930 --> 00:05:03,950
And it's a way of securing our connection to our email server.

27745
00:05:03,970 --> 00:05:10,360
So that way, when we're sending an email, if somebody else intercepts our email somewhere along the

27746
00:05:10,360 --> 00:05:17,710
line and they try to read it because this is enabled, that message will be encrypted and it'll be impossible

27747
00:05:17,710 --> 00:05:20,950
for them to read what is in the content of our email.

27748
00:05:21,220 --> 00:05:24,610
So this line basically will make this connection secure.

27749
00:05:25,240 --> 00:05:30,820
Now, once we've secured our connection, the next thing to do is to actually log in.

27750
00:05:30,820 --> 00:05:33,220
So we'll call connection, log in.

27751
00:05:33,400 --> 00:05:38,290
And here we have to provide a username and a password.

27752
00:05:38,410 --> 00:05:44,710
So the username is simply the email that we use to log on to our email service.

27753
00:05:44,740 --> 00:05:49,540
So in my case, it's just my email and the password.

27754
00:05:49,540 --> 00:05:52,570
I've just made up a new password.

27755
00:05:52,960 --> 00:05:55,570
So my made up password is ABCD.

27756
00:05:55,570 --> 00:05:56,830
One, two, three, four.

27757
00:05:56,950 --> 00:05:58,450
And then two brackets.

27758
00:06:02,650 --> 00:06:11,530
And once I've logged in to my email provider, the final thing I want to do is to actually send my mail.

27759
00:06:11,830 --> 00:06:20,260
Now the from address is my email and the to address is the person who I want to send the email to.

27760
00:06:20,380 --> 00:06:30,100
So I've set up a new dummy account called App Brewery testing at Yahoo dot com and make sure that you

27761
00:06:30,100 --> 00:06:39,550
haven't got any typos in your email, your password, the SMTP URL, or the recipient email address.

27762
00:06:39,940 --> 00:06:43,810
Now, finally, the last thing we want to add is the message.

27763
00:06:43,810 --> 00:06:47,710
So this is what we actually want to send in our email.

27764
00:06:47,800 --> 00:06:53,980
And just like we did with our file when we opened it at the very end, once we're done with it, we're

27765
00:06:53,980 --> 00:06:55,810
going to close it off as well.

27766
00:06:56,020 --> 00:06:58,600
So now we can go ahead and hit run.

27767
00:07:00,680 --> 00:07:03,980
And you might get a number of errors at this point.

27768
00:07:04,070 --> 00:07:10,070
Now, it's important that if you do get an error, then you first check to make sure that you haven't

27769
00:07:10,070 --> 00:07:15,680
got any typos here, here, here or here.

27770
00:07:15,710 --> 00:07:21,020
But once you've checked that through, then the next thing you can do is you can actually look at this

27771
00:07:21,020 --> 00:07:23,750
error code and follow the URL.

27772
00:07:24,080 --> 00:07:32,150
Now, in our case, the reason is because by default, Gmail doesn't just let anybody access your email

27773
00:07:32,150 --> 00:07:32,840
account.

27774
00:07:33,200 --> 00:07:40,850
And you have other ways of making your account even more secure in order to send email from a Gmail

27775
00:07:40,850 --> 00:07:42,320
account with Python.

27776
00:07:42,350 --> 00:07:46,880
The first thing you have to do is create a special password for your application.

27777
00:07:46,910 --> 00:07:52,850
This means you have to go to the security settings for your Google account.

27778
00:07:52,880 --> 00:07:57,650
So if you're inside Gmail, go ahead and click on your profile.

27779
00:07:57,680 --> 00:08:02,270
Go to manage your Google account and then go to security.

27780
00:08:02,510 --> 00:08:07,100
Now, while you're here, you first have to turn on to step verification.

27781
00:08:13,390 --> 00:08:19,120
Once you've confirmed using your phone, go ahead and turn on two step verification.

27782
00:08:20,160 --> 00:08:24,300
And then go back to the security page.

27783
00:08:24,300 --> 00:08:26,760
And now you should be able to see this section.

27784
00:08:26,790 --> 00:08:28,710
App passwords show up.

27785
00:08:28,740 --> 00:08:33,659
Go ahead and click on it and enter your password for your Google account again.

27786
00:08:38,020 --> 00:08:45,940
And then go ahead and create a other type of app and we'll name it Birthday Wisher.

27787
00:08:47,210 --> 00:08:48,710
And click generate.

27788
00:08:49,790 --> 00:08:51,860
Now, here's the really important part.

27789
00:08:51,890 --> 00:08:55,080
You're going to get your app password show up here.

27790
00:08:55,160 --> 00:08:58,760
I want you to select all of it and copy it.

27791
00:09:00,110 --> 00:09:04,370
And then you'll be able to paste it inside your code.

27792
00:09:05,660 --> 00:09:10,810
Once we've done all of this, then we can go back and hit run again.

27793
00:09:10,820 --> 00:09:17,630
And you'll see this time we see the process finish with exit code zero, which means all of the code

27794
00:09:17,630 --> 00:09:19,070
ran successfully.

27795
00:09:19,400 --> 00:09:25,880
And now if I take a look at my sent box, you can see that I've got this message that's been sent.

27796
00:09:26,000 --> 00:09:32,660
And if I take a look at the email address which the email was sent to, then you can see that in my

27797
00:09:32,660 --> 00:09:34,570
inbox there's actually nothing here.

27798
00:09:34,580 --> 00:09:42,050
But if you take a look inside spam, then there is our brilliant email that came from our Python code.

27799
00:09:43,410 --> 00:09:48,930
So first thing I'm going to do is change that to not spam, to make sure that it goes into the actual

27800
00:09:48,930 --> 00:09:49,780
inbox.

27801
00:09:49,800 --> 00:09:55,530
And the next thing we want to be able to do is how can we make our emails seem less like spam?

27802
00:09:55,800 --> 00:10:02,160
So an email without a subject headline is prime target for being filtered as spam.

27803
00:10:02,280 --> 00:10:07,320
So let's go into our email and see how we can add a subject line.

27804
00:10:07,590 --> 00:10:08,870
It's pretty simple.

27805
00:10:08,880 --> 00:10:16,590
It goes inside the message parameter and all we have to do is just write the word subject colon and

27806
00:10:16,590 --> 00:10:21,960
then we can put in whatever it is that we want to use as the subject of the email like this.

27807
00:10:22,350 --> 00:10:25,740
Now, how do you put in the content or the body of the email?

27808
00:10:25,740 --> 00:10:32,430
Well, you add two new lines using backslash and backslash n, and then you can put the content.

27809
00:10:32,430 --> 00:10:41,220
So this is the body of my email and let's just split this up so it's a little bit easier to read.

27810
00:10:43,530 --> 00:10:46,470
And now I can hit run again.

27811
00:10:46,680 --> 00:10:54,360
And once that's done, you can see that in my Gmail in the sent folder that this message now has a subject

27812
00:10:54,360 --> 00:10:56,820
line and a body.

27813
00:10:56,880 --> 00:11:00,120
And it's the same thing when I go to my.

27814
00:11:05,990 --> 00:11:12,140
And when I take a look at this new email that came through, you can see the subject line and the body

27815
00:11:12,140 --> 00:11:14,390
of the email being separated.

27816
00:11:15,050 --> 00:11:22,460
Now we can actually avoid having to write this line connection close if we do the same trick as we did

27817
00:11:22,460 --> 00:11:31,640
with file opening, we use the with keyword, so we can say that with SMTP, SMTP to create the connection,

27818
00:11:31,640 --> 00:11:34,730
and then we save that as the connection.

27819
00:11:34,790 --> 00:11:39,540
Then we can indent all of the rest of the code inside this block.

27820
00:11:39,560 --> 00:11:46,700
And once it's done with sending the email, it will close off that connection automatically.

27821
00:11:47,060 --> 00:11:51,650
So this is how you could send email using Python and SMTP lib.

27822
00:11:51,680 --> 00:11:57,770
Now, there's quite a few things here that are prone to errors, especially given that we're typing

27823
00:11:57,770 --> 00:12:04,310
a lot of things in plain text, like our email or password and a bunch of things.

27824
00:12:04,310 --> 00:12:10,940
So if you're getting errors when you're running your code or if it's not doing what you expect it to

27825
00:12:10,970 --> 00:12:17,390
make sure that you've checked against all of these strings and it's actually what you expected it to

27826
00:12:17,390 --> 00:12:17,810
be.

27827
00:12:18,080 --> 00:12:23,990
Secondly, make sure that whichever account you're sending from that, you actually go ahead into the

27828
00:12:23,990 --> 00:12:27,170
account and modify the security settings.

27829
00:12:27,410 --> 00:12:33,860
For example, let's say I wanted to send from this email address, so I'm going to put that in here.

27830
00:12:33,980 --> 00:12:41,180
And then in this case, the email server I need to connect to will be Yahoo's email server, which is

27831
00:12:41,180 --> 00:12:49,460
under the URL that I showed you before SMTP dot mail, dot, Yahoo dot com.

27832
00:12:50,030 --> 00:12:52,550
And that is actually not enough.

27833
00:12:52,550 --> 00:12:54,890
So let me just change my recipient.

27834
00:12:58,290 --> 00:12:59,880
And I hit run.

27835
00:12:59,910 --> 00:13:02,070
This is the error that you'll see.

27836
00:13:02,190 --> 00:13:07,440
It says SMTP server disconnected connection unexpectedly closed.

27837
00:13:07,470 --> 00:13:10,200
Now, this could be down to a number of reasons.

27838
00:13:10,200 --> 00:13:18,660
For example, a typo in this part, but also if your account doesn't actually allow less secure apps.

27839
00:13:18,660 --> 00:13:19,920
So on Yahoo!

27840
00:13:19,950 --> 00:13:21,540
The process is a little bit different.

27841
00:13:21,540 --> 00:13:27,210
You have to go into your account, go to account info, and then go to account security.

27842
00:13:28,600 --> 00:13:31,060
And you'll have to log in again.

27843
00:13:33,710 --> 00:13:37,070
And generate a new app password.

27844
00:13:37,220 --> 00:13:43,610
So we're going to create a new app and we're going to give it a custom name, Python code, and then

27845
00:13:43,610 --> 00:13:44,930
click generate.

27846
00:13:44,930 --> 00:13:50,630
And now we have a app password to use for our Python code.

27847
00:13:50,930 --> 00:13:57,470
So now back over here, we change this password to the one that we just copied over.

27848
00:13:57,770 --> 00:14:04,280
And now if I hit run, that error should go away and we should get processed, finished with exit code

27849
00:14:04,280 --> 00:14:04,910
zero.

27850
00:14:05,180 --> 00:14:08,960
And when I take a look over here in my inbox.

27851
00:14:11,330 --> 00:14:15,500
I've got my email from Apple testing at Yahoo.com.

27852
00:14:17,250 --> 00:14:19,450
So check your security settings.

27853
00:14:19,470 --> 00:14:24,210
Check your spam and check that you haven't made any typos.

27854
00:14:24,990 --> 00:14:29,880
And if none of that works, then just simply try doing everything I did in the video.

27855
00:14:30,060 --> 00:14:34,650
But with a new email account that you set up with Gmail.

27856
00:14:34,920 --> 00:14:41,280
Then you can use the same SMTP address and the same process that you saw in the video to try this out.


27857
00:00:00,390 --> 00:00:04,410
In this lesson, I want to talk to you about the Python datetime module.

27858
00:00:04,920 --> 00:00:09,920
This is a really useful module that helps us work with dates and time.

27859
00:00:11,400 --> 00:00:14,550
Going back to our day 32 start project,

27860
00:00:14,640 --> 00:00:16,950
I'm going to comment out everything that's there.

27861
00:00:18,360 --> 00:00:23,310
And then I'm going to import our datetime module. Now, again,

27862
00:00:23,370 --> 00:00:26,010
this is the module that comes preloaded with Python

27863
00:00:26,070 --> 00:00:28,800
so you don't have to install it. Now,

27864
00:00:28,800 --> 00:00:33,800
one of the most useful things to get with daytime is the current date and time.

27865
00:00:35,820 --> 00:00:40,820
And you can write Python code to get that from the computer. Inside this date

27866
00:00:40,950 --> 00:00:41,783
time module,

27867
00:00:41,790 --> 00:00:46,770
there is a class called datetime as denoted by the c here.

27868
00:00:47,610 --> 00:00:51,870
And this is how you get to that class. So to get to that class,

27869
00:00:51,900 --> 00:00:54,540
you tap into the datetime module

27870
00:00:55,050 --> 00:00:57,900
and then you get to the datetime class.

27871
00:00:58,380 --> 00:01:00,210
Now this is really confusing.

27872
00:01:00,240 --> 00:01:05,239
So I prefer to rename the datetime module and give it a as so we can shorten it

27873
00:01:07,020 --> 00:01:08,370
to just dt.

27874
00:01:09,180 --> 00:01:12,300
And that way we can say dt.datetime

27875
00:01:12,480 --> 00:01:16,920
and that looks a little bit more easier to understand than before. Nnow,

27876
00:01:16,950 --> 00:01:21,330
inside this datetime class, there is a method called now,

27877
00:01:21,960 --> 00:01:25,590
and this gets you the current date and time.

27878
00:01:26,070 --> 00:01:30,810
So if we save this into a variable called now, and we go ahead and print

27879
00:01:30,840 --> 00:01:33,270
now, then when I run this code,

27880
00:01:33,300 --> 00:01:38,070
you can see it prints a very long string showing you the current year, month,

27881
00:01:38,100 --> 00:01:38,850
day,

27882
00:01:38,850 --> 00:01:43,850
as well as time in my local time zone with a high degree of accuracy

27883
00:01:44,520 --> 00:01:45,353
here. 

27884
00:01:46,880 --> 00:01:49,700
Working with that particular string is not very easy.

27885
00:01:49,730 --> 00:01:54,730
If you wanted to check something like if now is the year 2020,

27886
00:01:56,810 --> 00:02:00,110
then you can't really do that with just a string like that.

27887
00:02:00,740 --> 00:02:03,530
That's why once you've gotten the

27888
00:02:03,590 --> 00:02:08,590
now object out of this method because this method of course returns and it gets

27889
00:02:09,770 --> 00:02:13,760
saved inside here, then we can tap into some of its attributes.

27890
00:02:13,940 --> 00:02:17,330
So for example, we can tap into the year.

27891
00:02:18,440 --> 00:02:22,610
So let's save that has the year. And if I print that, you can see

27892
00:02:22,610 --> 00:02:26,000
it just gives us the year as a number.

27893
00:02:26,780 --> 00:02:29,210
And if I do a type check on that,

27894
00:02:29,750 --> 00:02:32,720
you can see that it has a class of integer

27895
00:02:33,350 --> 00:02:36,020
whereas if I do a type check on now

27896
00:02:36,230 --> 00:02:39,350
it has a class of a datetime object.

27897
00:02:40,580 --> 00:02:45,290
So this way, if we managed to get hold of the year as a number,

27898
00:02:45,320 --> 00:02:46,970
then we can say something like, well,

27899
00:02:46,970 --> 00:02:50,960
if the current year is equal to 2020,

27900
00:02:51,350 --> 00:02:53,630
then we will print something like,

27901
00:02:55,670 --> 00:03:00,310
and because this rings out as true, then that gets printed out.

27902
00:03:01,180 --> 00:03:06,010
In addition to the year, we've also got month, day,

27903
00:03:06,190 --> 00:03:10,930
hour, minutes. So you can basically tap into anything in that date

27904
00:03:10,930 --> 00:03:14,800
time string as you need. So when you write 'now.'

27905
00:03:14,800 --> 00:03:19,690
you can see that there's the year, day, month, hour, minutes,

27906
00:03:19,720 --> 00:03:22,000
microsecond, second,

27907
00:03:22,450 --> 00:03:26,530
and you can get to the specific part of that datetime that you need.

27908
00:03:27,160 --> 00:03:31,510
You can even call other methods like weekday. For example,

27909
00:03:33,220 --> 00:03:37,870
if we want to know which day of the week it is, so Monday, Tuesday, Wednesday,

27910
00:03:38,170 --> 00:03:42,460
then we can simply tap into now and call this weekday method.

27911
00:03:43,270 --> 00:03:46,390
And now if we print out this day of the week,

27912
00:03:46,420 --> 00:03:49,210
you can see that it gives us a number.

27913
00:03:49,600 --> 00:03:54,310
So it remember that computers start counting from zero so 1

27914
00:03:54,340 --> 00:03:57,850
means that its actually the second day of the week, which is Tuesday

27915
00:03:57,880 --> 00:03:58,930
as you can see up here.

27916
00:04:00,280 --> 00:04:04,540
So we've seen how we can get hold of the current day, year,

27917
00:04:04,540 --> 00:04:08,680
month and whichever property you're interested in for today.

27918
00:04:09,040 --> 00:04:14,040
But what if we wanted to create a daytime object of our own setting it to a

27919
00:04:14,800 --> 00:04:17,740
particular date of our choosing? Well,

27920
00:04:17,769 --> 00:04:22,770
let's say that I wanted to create a object that stored my date of birth.

27921
00:04:25,390 --> 00:04:30,390
Well then I would tap into the dt module and create a new datetime object

27922
00:04:31,300 --> 00:04:35,080
from that class. Now I get to specify, well,

27923
00:04:35,080 --> 00:04:38,770
what is the year? What is the month?

27924
00:04:39,250 --> 00:04:41,200
What is the day?

27925
00:04:41,830 --> 00:04:46,830
And I can even go even more specific like which hour was I born in?

27926
00:04:48,190 --> 00:04:52,750
And you'll notice that in here, when you look at the parameters,

27927
00:04:53,140 --> 00:04:55,300
the year requires an integer,

27928
00:04:55,360 --> 00:04:58,390
the month requires an interger and the day requires an integer.

27929
00:04:58,780 --> 00:05:03,730
But after the hour we've got this ... as does the minute and the second

27930
00:05:04,060 --> 00:05:07,960
and this is because they have default values. So if I delete this,

27931
00:05:09,790 --> 00:05:14,790
the only things I'm required to give when I'm creating a new datetime object is

27932
00:05:15,490 --> 00:05:16,570
the year, month and day.

27933
00:05:17,260 --> 00:05:22,260
Let's say that I was born in 1995 and I was born in December the 15th.

27934
00:05:26,880 --> 00:05:27,713
All right.

27935
00:05:30,300 --> 00:05:30,840
Now,

27936
00:05:30,840 --> 00:05:35,840
if I print this date of birth object you can see that we get 1995,

27937
00:05:38,190 --> 00:05:39,690
12, 15,

27938
00:05:40,080 --> 00:05:45,080
and the time in hour, minute and second are set to the default values of zero.

27939
00:05:46,890 --> 00:05:51,030
If I wanted to be more specific and I wanted to set my hour of birth,

27940
00:05:51,060 --> 00:05:53,520
let's say I was born at 4:00 AM,

27941
00:05:53,970 --> 00:05:58,700
then we can set the hour and that updates that default value.

27942
00:05:59,450 --> 00:06:04,450
So now we've seen how we can tap into the current date time and also create any

27943
00:06:05,210 --> 00:06:07,150
datetime object from scratch

27944
00:06:07,510 --> 00:06:12,310
then it's time to put this into practice and use it in our project.


27945
00:00:00,270 --> 00:00:04,740
Now let's put what you've learned into practice by creating a Monday

27946
00:00:04,740 --> 00:00:08,700
motivational quote email application. To get warmed up,

27947
00:00:08,850 --> 00:00:13,850
we're going to create a application that looks at the current date and time

27948
00:00:15,270 --> 00:00:19,260
and if it happens to be a particular day of the week,

27949
00:00:19,650 --> 00:00:21,360
let's say a Tuesday,

27950
00:00:21,510 --> 00:00:26,370
then we're going to email ourselves a motivational quote.

27951
00:00:27,240 --> 00:00:32,240
So I found 101 Monday motivational !uotes from a place called the positivity

27952
00:00:33,090 --> 00:00:35,910
blog and I'll link to this as well.

27953
00:00:36,240 --> 00:00:41,190
But the idea is that we all need a little bit of boost on Monday mornings and

27954
00:00:41,190 --> 00:00:45,510
getting an email from Albert Einstein might just be the little nudge that we

27955
00:00:45,510 --> 00:00:48,870
need in order to push us onto a successful week.

27956
00:00:49,350 --> 00:00:50,550
So that's the idea.

27957
00:00:51,000 --> 00:00:55,590
And if you take a look in the starting project that you've already downloaded

27958
00:00:55,590 --> 00:00:58,980
and opened up, that should be a quotes.txt file.

27959
00:00:59,580 --> 00:01:02,010
And here on each line,

27960
00:01:02,070 --> 00:01:05,880
I've placed the quote from the positivity blog,

27961
00:01:06,270 --> 00:01:10,950
and it's got the quote and person on the same line.

27962
00:01:11,580 --> 00:01:16,470
So you can use what you've learned before where we went into how to read files,

27963
00:01:16,470 --> 00:01:17,430
how to open files,

27964
00:01:17,730 --> 00:01:22,730
how to create a list of all of the lines inside a particular text file.

27965
00:01:25,410 --> 00:01:30,410
And you can use that along with what you've learned about sending emails to

27966
00:01:30,750 --> 00:01:35,750
check and make sure that the day of the week is your current day of the week

27967
00:01:36,420 --> 00:01:40,440
because obviously you need to test this. Instead of setting it to check for

27968
00:01:40,440 --> 00:01:43,770
Monday, I want you to check for the current day that you are on.

27969
00:01:44,190 --> 00:01:47,580
So if it happens to be Tuesday, then check for Tuesday, if it Saturday,

27970
00:01:47,580 --> 00:01:51,600
then check for a Saturday and I want your Python code to make that check

27971
00:01:51,990 --> 00:01:54,840
and if it matches today's weekday,

27972
00:01:55,170 --> 00:01:59,940
then to send an email with a random quote from the quotes

27973
00:01:59,940 --> 00:02:02,010
.txt. That's the goal.

27974
00:02:02,340 --> 00:02:05,100
So I want you to pause the video and give it a go.

27975
00:02:11,450 --> 00:02:11,900
Yeah.

27976
00:02:11,900 --> 00:02:15,170
All right. So in order to complete this mini project,

27977
00:02:15,200 --> 00:02:19,910
we first have to import those two modules we learned about; smtplib

27978
00:02:20,210 --> 00:02:23,510
and also the datetime module. And again,

27979
00:02:23,540 --> 00:02:27,950
I'm going to import it as dt, so give it an alias. Next

27980
00:02:28,010 --> 00:02:32,750
we're going to tap into the dt module and we're going to get today's date and

27981
00:02:32,750 --> 00:02:35,750
time. So we're going to use this now method.

27982
00:02:36,380 --> 00:02:38,540
If now is equal to this,

27983
00:02:38,930 --> 00:02:43,930
then today in terms of the weekday is equal to now.weekday.

27984
00:02:45,830 --> 00:02:49,190
And once we've gotten hold of that, then we can check well,

27985
00:02:49,220 --> 00:02:53,000
if the weekday is equal to say Monday

27986
00:02:53,060 --> 00:02:54,500
which would be zero,

27987
00:02:55,040 --> 00:03:00,040
then that means we're going to activate the rest of our code and send ourselves

27988
00:03:00,190 --> 00:03:03,820
the email. But of course, in order to test our code,

27989
00:03:04,150 --> 00:03:08,920
unless you have the patience to wait until next Monday and test your code once

27990
00:03:08,920 --> 00:03:09,730
every week,

27991
00:03:09,730 --> 00:03:14,200
then we probably want to set this to equal to the weekday that we're on

27992
00:03:14,200 --> 00:03:18,700
today. So in my case, I'm on Tuesday so I'm going to set that to equal to 1,

27993
00:03:19,000 --> 00:03:22,390
at least while I'm testing my code. And once I'm done with everything,

27994
00:03:22,420 --> 00:03:24,820
I can reset that to 0 for Monday.

27995
00:03:25,750 --> 00:03:28,540
If the weekday is equal to 1,

27996
00:03:29,020 --> 00:03:32,260
then we're going to initiate our email sending mission.

27997
00:03:32,860 --> 00:03:36,010
But first we have to figure out what we're going to send.

27998
00:03:36,520 --> 00:03:41,520
So we're going to open up our quotes.txt and I'm going to use the with

27999
00:03:42,310 --> 00:03:47,310
and then I'm going to use the open method to open the quotes.txt file that

28000
00:03:48,550 --> 00:03:49,510
I've got right here.

28001
00:03:49,900 --> 00:03:54,900
And I'm going to call this the quote_file. Iside this quote_file

28002
00:03:55,600 --> 00:03:59,500
I've got a bunch of quotes, one on each line.

28003
00:03:59,920 --> 00:04:04,920
So we can use the method called readlines in order to get a list of all of the

28004
00:04:07,630 --> 00:04:11,380
lines in this quote_file and I'm gonna save it into all_quotes.

28005
00:04:12,280 --> 00:04:17,279
Now we can import the random module and we can tap into a random quote.

28006
00:04:20,200 --> 00:04:25,200
So we'll use random.choice and we'll get a random quote from this list of

28007
00:04:26,890 --> 00:04:27,723
quotes.

28008
00:04:28,840 --> 00:04:32,800
Now that we've created our quote inside this with block,

28009
00:04:33,040 --> 00:04:37,360
we can actually go outside of the with block and we can still access our 

28010
00:04:37,360 --> 00:04:40,630
quote. So if I go ahead and print our quote,

28011
00:04:40,870 --> 00:04:44,590
you can see we've picked out a random quote. If you want to make an easy job

28012
00:04:44,590 --> 00:04:48,730
seem mighty hard just keep putting off doing it by Olin Miller.

28013
00:04:49,300 --> 00:04:54,300
And this is what we're going to try and send to ourselves using the smtplib.

28014
00:04:55,120 --> 00:05:00,040
Again, inside the same if statement, we're going to create a new connection

28015
00:05:00,460 --> 00:05:05,460
which is created from the smtplib and the SMTP class.

28016
00:05:06,160 --> 00:05:10,390
Now, once we create this class, we have to provide a host.

28017
00:05:10,630 --> 00:05:14,800
So that's the URL of the email server that we're going to use.

28018
00:05:15,370 --> 00:05:19,870
Again, I'm going to use my email as my testing Gmail

28019
00:05:20,230 --> 00:05:25,230
that was appbreweryinfo@gmail.com.

28020
00:05:26,080 --> 00:05:31,080
And then I'm going to put in my password as well as a constant

28021
00:05:31,720 --> 00:05:35,770
so this was abcd1234, and then brackets.

28022
00:05:36,550 --> 00:05:41,550
And then we can add our SMTP URL. Because we know that we're sending it from the

28023
00:05:42,820 --> 00:05:44,200
Gmail email service

28024
00:05:44,530 --> 00:05:49,530
then I'm going to tap into the Gmail SMTP server so that's smtp.gmail.com.

28025
00:05:53,230 --> 00:05:56,200
And instead of saving this as a connection,

28026
00:05:56,260 --> 00:06:01,260
I'm going to use the width method with SMTP as the connection.

28027
00:06:03,230 --> 00:06:07,900
Then using this connection, I'm going to firstly secure it.

28028
00:06:08,230 --> 00:06:11,050
So I'm going to starttls

28029
00:06:11,740 --> 00:06:15,640
and then I'm going to get this connection to log me in.

28030
00:06:16,180 --> 00:06:21,180
So the username is my email and the password is my password.

28031
00:06:23,830 --> 00:06:26,560
Once I've logged in to this connection,

28032
00:06:26,590 --> 00:06:31,150
then I'm going to finally send my email. Now, in this case,

28033
00:06:31,180 --> 00:06:34,570
the from address is going to be my email

28034
00:06:35,050 --> 00:06:38,350
and the to address is also my email.

28035
00:06:38,350 --> 00:06:41,230
I'm just sending an email from myself to myself,

28036
00:06:41,590 --> 00:06:44,770
but it's going to have a different piece of content every time it sends it.

28037
00:06:45,370 --> 00:06:49,690
And that message is going to contain that content.

28038
00:06:50,200 --> 00:06:53,770
So I'm going to change this into an f-string because firstly,

28039
00:06:53,770 --> 00:06:58,570
I want to have a subject which I'll call Monday Motivation

28040
00:06:59,080 --> 00:07:04,080
and then we know that we can add the content by adding two line breaks.

28041
00:07:05,260 --> 00:07:09,010
So let's format this so that it's easier for you to see.

28042
00:07:10,570 --> 00:07:13,270
And I'm going to put it on two separate lines like this.

28043
00:07:13,870 --> 00:07:17,260
Now after these two new lines comes my content

28044
00:07:17,560 --> 00:07:20,200
which is basically going to be my f-string

28045
00:07:20,240 --> 00:07:23,140
that's going to insert my quote right here.

28046
00:07:23,800 --> 00:07:28,800
So now with all of that done and making sure that our weekday is set as the same

28047
00:07:29,230 --> 00:07:31,420
day as today, so weekday ==

28048
00:07:31,450 --> 00:07:35,440
1, that is Tuesday. weekday == 0 means it's Monday.

28049
00:07:35,860 --> 00:07:39,490
Then we can be sort of sure that this code is actually going to run.

28050
00:07:40,390 --> 00:07:42,700
So now if we run our code,

28051
00:07:42,850 --> 00:07:47,850
you can see the quote being printed out here by Bertrand Russell.

28052
00:07:48,490 --> 00:07:50,740
And if we go to our email,

28053
00:07:50,770 --> 00:07:54,520
you can see that email from ourselves. Monday motivation.

28054
00:07:54,910 --> 00:07:58,360
One of the symptoms of an approaching nervous breakdown is the belief that one's

28055
00:07:58,360 --> 00:07:59,950
work is terribly important.

28056
00:08:00,310 --> 00:08:04,390
So I guess today's motivation is to not take ourselves too seriously.

28057
00:08:05,110 --> 00:08:08,650
But this is essentially what we're looking to achieve.

28058
00:08:09,190 --> 00:08:12,220
So hopefully you managed to get that working. If not,

28059
00:08:12,280 --> 00:08:14,350
you can take a look at my finished code

28060
00:08:14,590 --> 00:08:18,040
including all of the previous actions on smtplib

28061
00:08:18,070 --> 00:08:19,990
sending the email as well as date

28062
00:08:19,990 --> 00:08:24,990
time in the day 32 ending code that you'll find on the course resources page.

28063
00:08:26,920 --> 00:08:30,070
Now we're pretty much ready to tackle our final project,

28064
00:08:30,160 --> 00:08:34,900
which is the automated birthday wisher. So for that,

28065
00:08:34,990 --> 00:08:36,700
and more, I'll see you on the next lesson.


28066
00:00:00,420 --> 00:00:05,420
Now it's finally time to put all of our skills to use by creating our automated

28067
00:00:05,850 --> 00:00:06,870
birthday wisher

28068
00:00:07,200 --> 00:00:10,920
which is going to send our family or friends

28069
00:00:11,340 --> 00:00:15,660
a "Happy Birthday" email on their birthday automatically.

28070
00:00:15,960 --> 00:00:19,980
Now the idea for this project actually came from my mum. Well,

28071
00:00:20,040 --> 00:00:20,970
inadvertently.

28072
00:00:21,360 --> 00:00:25,350
Now I love my mom to death and she is my biggest source of motivation and

28073
00:00:25,380 --> 00:00:28,590
inspiration. But on her birthday,

28074
00:00:28,830 --> 00:00:33,830
she always expects me to send her some form of "Happy Birthday" by like 8:00 AM

28075
00:00:37,710 --> 00:00:38,120
And

28076
00:00:38,120 --> 00:00:42,380
if I send her a message at, like, 8:05,

28077
00:00:42,380 --> 00:00:44,600
or 9 o'clock, God forbid,

28078
00:00:44,630 --> 00:00:47,900
then I am deemed as a *bad child*.

28079
00:00:48,350 --> 00:00:51,470
I don't know if this is true for you. Um,

28080
00:00:51,530 --> 00:00:55,010
maybe other Asian kids out there can relate,

28081
00:00:55,040 --> 00:01:00,040
but my mom has this thing about being wished a "happy birthday" promptly on her

28082
00:01:00,170 --> 00:01:02,870
birthday. And you know, I always remember her birthday,

28083
00:01:02,870 --> 00:01:07,790
but I just might remember it at 10 o'clock or, you know, at lunchtime.

28084
00:01:07,820 --> 00:01:12,080
And I always panic, um, thinking that I've forgotten or missed

28085
00:01:12,110 --> 00:01:16,580
the crucial eight o'clock in the morning time slot.

28086
00:01:17,180 --> 00:01:19,130
So what did I decide to do?

28087
00:01:19,160 --> 00:01:19,700
Um,

28088
00:01:19,700 --> 00:01:24,700
I decided to use Python to create a automated way of wishing her a happy

28089
00:01:25,280 --> 00:01:30,280
birthday at 8:00 AM on the spot or even seven o'clock or five o'clock. That way

28090
00:01:31,640 --> 00:01:33,830
she'll think that I wake up really early and

28091
00:01:34,310 --> 00:01:38,300
I am working really hard in life. But

28092
00:01:38,630 --> 00:01:43,610
let me demonstrate to you what this app is going to do. This is the birthday

28093
00:01:43,610 --> 00:01:44,510
wisher demo,

28094
00:01:44,630 --> 00:01:48,500
and I'm not going to show you the code in my main.py cause that is what

28095
00:01:48,500 --> 00:01:49,640
you're going to create.

28096
00:01:50,120 --> 00:01:55,100
But what I've got here is a CSV file called birthdays.csv.

28097
00:01:56,240 --> 00:02:01,220
Now, here, I'm going to change one of these rows of data to test it.

28098
00:02:01,610 --> 00:02:05,570
And I'm going to change the month to the current month

28099
00:02:05,600 --> 00:02:09,889
which is July and the day to the current day, which has 14.

28100
00:02:10,009 --> 00:02:11,210
So I'll change this

28101
00:02:11,450 --> 00:02:16,450
which corresponds to this column of data to 7 and then the day to 14.

28102
00:02:18,350 --> 00:02:21,410
And then I'm going to hit save to save that data.

28103
00:02:21,980 --> 00:02:24,560
And now I'm going to run this code

28104
00:02:24,920 --> 00:02:29,920
and what it will do is it'll check against all of these dates inside my

28105
00:02:30,530 --> 00:02:31,580
birthdays.csv,

28106
00:02:31,910 --> 00:02:36,910
it'll find that one of these rows of data actually has a month and day that

28107
00:02:36,980 --> 00:02:38,150
matches today.

28108
00:02:38,540 --> 00:02:43,540
And it will pick a random letter from one of these text files and replace this

28109
00:02:44,300 --> 00:02:44,840
name

28110
00:02:44,840 --> 00:02:49,840
placeholder with the name of the row of data that actually matched today's

28111
00:02:50,450 --> 00:02:55,010
date. And then it's going to send that as an email to this email.

28112
00:02:55,700 --> 00:02:58,040
So now if I go ahead and hit run,

28113
00:02:58,870 --> 00:03:03,610
and once that process is finished, we can go and check our email.

28114
00:03:05,650 --> 00:03:10,650
And you can see that email show up here with a subject line of Happy Birthday!,

28115
00:03:11,200 --> 00:03:16,200
and it's replaced the name of the person whose birthday it is right here inside

28116
00:03:18,040 --> 00:03:21,760
that name placeholder, it sent the rest of the message

28117
00:03:22,120 --> 00:03:26,560
and this was all done automatically. As you can imagine,

28118
00:03:26,560 --> 00:03:29,140
if I change this back to a random date,

28119
00:03:29,620 --> 00:03:32,740
if our code was running in the background every single day

28120
00:03:33,010 --> 00:03:36,790
checking to see if today's date matched one of these dates,

28121
00:03:36,970 --> 00:03:40,390
then the day when it actually matches or on their birthday,

28122
00:03:40,660 --> 00:03:44,500
it's going to pick out their name, insert it into one of these letters randomly,

28123
00:03:44,860 --> 00:03:46,780
and then send it to them as an email.

28124
00:03:47,260 --> 00:03:50,710
And the reason why we have three letters is just because so that they don't

28125
00:03:51,310 --> 00:03:56,050
actually clock onto the fact that it's the same letter being sent every single

28126
00:03:56,050 --> 00:03:56,883
year.

28127
00:03:57,640 --> 00:04:01,780
The ethics of this whole project is really up to you to decide. Um,

28128
00:04:01,840 --> 00:04:05,200
I don't actually do this in reality. Um,

28129
00:04:05,230 --> 00:04:10,230
I just live with being told I'm a bad child by wishing my mom happy birthday at

28130
00:04:10,480 --> 00:04:14,290
10:00 AM instead of 8:00 AM. But in terms of Python Programming,

28131
00:04:14,320 --> 00:04:18,850
this is going to be a really interesting project because it's going to use a lot

28132
00:04:18,850 --> 00:04:20,470
of the things that you've learned before

28133
00:04:20,470 --> 00:04:24,970
like pandas to read CSVs or replacing texts,

28134
00:04:25,030 --> 00:04:28,150
doing mail merge, using built in Python

28135
00:04:28,150 --> 00:04:32,530
ways of opening and reading files, and also of course what we learned recently

28136
00:04:32,530 --> 00:04:35,260
which is the datetime module and the smtplib.

28137
00:04:36,460 --> 00:04:41,020
Now the starting project I've split into three difficulty levels.

28138
00:04:41,380 --> 00:04:46,180
So depending on how comfortable you feel with the things that you've learned in

28139
00:04:46,180 --> 00:04:47,890
all of these 32 days,

28140
00:04:48,070 --> 00:04:52,660
you can pick which level of starting project you want to use.

28141
00:04:53,200 --> 00:04:57,430
Obviously, if you go for the extra hard starting project,

28142
00:04:57,730 --> 00:04:59,680
it's not going to have a lot of hints in there.

28143
00:04:59,710 --> 00:05:03,190
It's going to tell you generally what the program needs to do

28144
00:05:03,310 --> 00:05:08,020
and it's your job to figure out how to actually implement it using maybe a

28145
00:05:08,020 --> 00:05:12,100
Google search or Stack Overflow or looking through some of the path lessons.

28146
00:05:12,250 --> 00:05:15,340
This is going to be the extra hard version.

28147
00:05:15,790 --> 00:05:19,240
And then there's the hard version with some hints, but not a lot.

28148
00:05:19,630 --> 00:05:23,650
And there's the normal version where I've put in a lot more hints that will make

28149
00:05:23,650 --> 00:05:26,560
it a little bit easier for you to write out all the code.

28150
00:05:27,250 --> 00:05:31,600
So depending on how confident you feel, head over to the course resources,

28151
00:05:31,960 --> 00:05:36,010
pic the difficulty level for your starting project

28152
00:05:36,700 --> 00:05:39,190
and then go ahead and try to complete this project.


28153
00:00:00,630 --> 00:00:04,770
Now I hope you've given this project a good go because I'm going to now go

28154
00:00:04,770 --> 00:00:08,910
through the solution for the normal starting project. Now,

28155
00:00:08,940 --> 00:00:13,770
the important thing to stress here is that if you used one of the hard starting 

28156
00:00:13,770 --> 00:00:16,140
project or the extra hard starting project,

28157
00:00:16,500 --> 00:00:20,850
you might have ended up with a different method of doing the same thing.

28158
00:00:21,450 --> 00:00:24,360
And often I get students asking me,

28159
00:00:24,360 --> 00:00:26,520
what is the right way of doing things?

28160
00:00:26,820 --> 00:00:31,050
And this is not really the thing that you should focus on. Instead,

28161
00:00:31,160 --> 00:00:33,950
use your creativity, you use your skills

28162
00:00:34,430 --> 00:00:38,090
and make sure that your program does what you want it to.

28163
00:00:38,510 --> 00:00:40,760
There is no real right answer.

28164
00:00:40,880 --> 00:00:45,880
It really depends on your preferences or even what it is that you know how to

28165
00:00:45,890 --> 00:00:46,670
do.

28166
00:00:46,670 --> 00:00:51,500
If you can get this project to work using just your own skills and a bit of

28167
00:00:51,500 --> 00:00:55,550
Googling, a bit of Stack Overflow, as long as you managed to get it to work,

28168
00:00:55,580 --> 00:01:00,200
it's way more important than what is the right way of doing things.

28169
00:01:00,680 --> 00:01:04,129
So all of that, I'm trying to say that I'm going to go through the solution,

28170
00:01:04,370 --> 00:01:08,870
but don't view this as the ultimate solution. And if you did it a different way,

28171
00:01:08,900 --> 00:01:13,850
that's totally fine as long as it works. Alright, let's get started. So here,

28172
00:01:13,850 --> 00:01:17,420
I've got these starting files for the normal starting project,

28173
00:01:17,960 --> 00:01:22,340
and I'm going to go through each of the lines line by line to create our final

28174
00:01:22,400 --> 00:01:23,750
birthday wisher project.

28175
00:01:24,320 --> 00:01:28,610
The first thing the instruction tells us to do is to go into this birthdays

28176
00:01:28,610 --> 00:01:33,610
.csv and update this with some birthdays of our friends and family.

28177
00:01:34,670 --> 00:01:37,100
So I'm going to replace all the data that's currently in here,

28178
00:01:37,550 --> 00:01:41,660
and I'm going to add some data of my own. Now,

28179
00:01:41,720 --> 00:01:45,980
the thing that we have to do in order to test this code is to make sure that one

28180
00:01:45,980 --> 00:01:50,390
of these rows of data actually matches an email that we can access

28181
00:01:50,780 --> 00:01:53,330
and also today's month and day.

28182
00:01:53,840 --> 00:01:56,090
So today is July 14th

28183
00:01:56,120 --> 00:02:00,140
so I'm going to update those two numbers and the year doesn't matter so much in

28184
00:02:00,140 --> 00:02:02,480
this case. Once I've done that,

28185
00:02:02,480 --> 00:02:07,340
I'm going to hit save, command + s or just go to file and go to save all.

28186
00:02:08,270 --> 00:02:13,270
And you can also see the shortcut for your particular operating system there as

28187
00:02:13,310 --> 00:02:16,490
well. Now, inside my main.py,

28188
00:02:16,490 --> 00:02:20,300
I've now completed this step. So I'm going to go ahead and delete it.

28189
00:02:22,220 --> 00:02:24,080
Now, step 2 is the hardest.

28190
00:02:24,410 --> 00:02:29,410
And here we have to check if today's date matches a birthday in the birthday

28191
00:02:30,170 --> 00:02:31,003
CSV.

28192
00:02:31,400 --> 00:02:35,540
The first thing I'm going to do is I'm going to import datetime

28193
00:02:35,990 --> 00:02:39,830
because that's going to be crucial for me to be able to figure out what today's

28194
00:02:39,830 --> 00:02:43,880
date actually is. And in fact, that is what hint one says.

28195
00:02:44,300 --> 00:02:48,530
It says to create a tuple from today's month and day using the datetime

28196
00:02:48,530 --> 00:02:51,200
module. This is essentially what we want to create.

28197
00:02:51,440 --> 00:02:53,840
So how do we get hold of today's month? Well,

28198
00:02:53,870 --> 00:02:57,650
we can use the datetime module and then the datetime class,

28199
00:02:57,710 --> 00:03:02,710
and then we can call now and we can get hold of the month like this.

28200
00:03:04,870 --> 00:03:07,230
Now we can simplify this in a number of ways.

28201
00:03:07,250 --> 00:03:11,680
We can create a alias for datetime as dt.

28202
00:03:12,040 --> 00:03:15,610
So then we can shorten this by a little bit, or

28203
00:03:15,610 --> 00:03:20,610
you can shorten it even more just by saying, well, from the datetime module

28204
00:03:20,650 --> 00:03:24,220
let's go ahead and import just the datetime class.

28205
00:03:24,790 --> 00:03:29,790
That way you can actually set this to simply as datetime.now.month.

28206
00:03:31,450 --> 00:03:36,250
Then we have to get hold of today's day so we could copy this

28207
00:03:36,310 --> 00:03:38,920
and instead of getting the month we could get the day.

28208
00:03:39,640 --> 00:03:44,620
So now we've created today. Now you can of course split this into two parts

28209
00:03:44,620 --> 00:03:46,510
if you find it easier to understand.

28210
00:03:46,840 --> 00:03:51,010
You could say that today well is equal to datetime.now,

28211
00:03:51,670 --> 00:03:55,000
and then today_tuple is equal to a tuple

28212
00:03:55,030 --> 00:04:00,030
which is today.month, today.day.

28213
00:04:00,760 --> 00:04:04,600
So this is another variation and there's millions of variations out there

28214
00:04:04,600 --> 00:04:08,860
of course. So I think we're now done with hint 1 so let's go and delete it.

28215
00:04:09,340 --> 00:04:10,870
Now we're onto hint 2.

28216
00:04:11,050 --> 00:04:14,260
We're going to use pandas to read from the birthday CSV.

28217
00:04:14,620 --> 00:04:19,480
So we're going to import pandas. And once we've imported that,

28218
00:04:19,510 --> 00:04:24,510
we're going to use pandas to read CSV and then provide our file name

28219
00:04:25,030 --> 00:04:27,490
which is birthdays.csv.

28220
00:04:28,000 --> 00:04:31,720
So I'm going to save this as a variable called data. And remember,

28221
00:04:31,750 --> 00:04:33,910
this is now a pandas dataframe

28222
00:04:34,420 --> 00:04:39,280
which we can use to do a number of things with including using these

28223
00:04:39,280 --> 00:04:42,610
instructions to create a birthday dictionary.

28224
00:04:43,330 --> 00:04:47,530
So what we're going to do is we're going to create a dictionary comprehension,

28225
00:04:48,100 --> 00:04:52,960
and I provided the template here for you already. So you can use that

28226
00:04:53,050 --> 00:04:58,050
iterrows in order to iterate through our dataframe that was created here,

28227
00:04:58,480 --> 00:05:00,100
so data.iterrows,

28228
00:05:00,310 --> 00:05:05,260
and then we'll get hold of the index of each of those rows and also the data in

28229
00:05:05,260 --> 00:05:06,160
each of the rows.

28230
00:05:06,760 --> 00:05:11,760
And then we could create a new dictionary with a new key and a new value from

28231
00:05:12,040 --> 00:05:14,470
all of these things that we've iterated through.

28232
00:05:15,130 --> 00:05:19,450
What is that new key going to be? Well, it's going to look something like this,

28233
00:05:19,480 --> 00:05:20,313
right?

28234
00:05:20,590 --> 00:05:25,570
We're hoping to create this birthday dictionary using this particular format.

28235
00:05:26,140 --> 00:05:31,140
Now the key is going to be a tuple that consists of the birthday month and the

28236
00:05:31,600 --> 00:05:32,433
birthday day

28237
00:05:32,830 --> 00:05:37,830
so let's replace that new key with a tuple. And the birthday month is of course

28238
00:05:38,050 --> 00:05:41,710
going to come from our data row. So that we're going to say data_row

28239
00:05:42,040 --> 00:05:43,930
and then we can either use square brackets

28240
00:05:43,960 --> 00:05:48,960
or we can use the dot notation to get hold of the data in this month column.

28241
00:05:50,440 --> 00:05:55,440
So you can either say data_row.month or data_row square brackets

28242
00:05:56,050 --> 00:05:59,540
and then month, like this. So it's totally up to you.

28243
00:06:00,200 --> 00:06:04,790
And then the next item in the tuple which is still in the key,

28244
00:06:04,790 --> 00:06:09,080
so we're still before the colon here, is going to be the birthday_day.

28245
00:06:09,110 --> 00:06:10,970
So that's going to be the data_row

28246
00:06:11,330 --> 00:06:14,540
and then we have to pass in the name of the day column,

28247
00:06:14,570 --> 00:06:16,670
which is just the word day.

28248
00:06:19,370 --> 00:06:20,600
Now, once we've done that,

28249
00:06:20,720 --> 00:06:25,720
then we have to provide what is the value for each of these key value pairs in

28250
00:06:26,000 --> 00:06:29,690
our dictionary. Well, what we actually want is the data row,

28251
00:06:29,690 --> 00:06:34,400
so the entire row of data, and we want it to look a bit like this.

28252
00:06:34,430 --> 00:06:37,730
So we have our tuple with our month and our day as the key

28253
00:06:38,060 --> 00:06:40,820
and then the value is just the entire row of data.

28254
00:06:41,270 --> 00:06:46,070
So we can simply replace this value with our data row like this.

28255
00:06:46,730 --> 00:06:51,730
Now we're pretty much done with this part and we can delete all of these bits of

28256
00:06:51,950 --> 00:06:56,420
hints and comments, and I can delete this example code as well.

28257
00:06:57,080 --> 00:06:59,300
Now that we've got our birthday dictionary,

28258
00:06:59,390 --> 00:07:04,390
the next thing we want to do is we want to check to see if today matches a

28259
00:07:04,490 --> 00:07:06,170
birthday in the birthdays.csv.

28260
00:07:06,470 --> 00:07:11,120
So you wanna check if this tuple exists inside this birthday_dict

28261
00:07:11,510 --> 00:07:15,830
and if it matches one of the actual birthday month and days.

28262
00:07:16,310 --> 00:07:20,720
So we can do something like this; if today_month, today_

28263
00:07:20,720 --> 00:07:23,660
day is in our birthdays dictionary.

28264
00:07:24,200 --> 00:07:28,580
Now this today_month today_day is of course going to be our today_

28265
00:07:28,670 --> 00:07:31,940
tuple. And this way with this

28266
00:07:31,970 --> 00:07:36,970
if statement we can check to see if this today_tuple with the month and day

28267
00:07:37,400 --> 00:07:42,200
actually exists as one of our friends and family's birthdays inside this

28268
00:07:42,200 --> 00:07:45,890
birthdays_dict. And once we've done that,

28269
00:07:46,010 --> 00:07:51,010
then we can get rid of step 2 and move on to step 3. In step 3

28270
00:07:51,290 --> 00:07:55,130
we're saying, well, if there is a match, so if this if statement is true,

28271
00:07:55,580 --> 00:07:58,970
then we're gonna pick a random letter out of letter_1, 2,

28272
00:07:58,970 --> 00:08:03,970
3, from our letter templates inside here. To do that,

28273
00:08:04,070 --> 00:08:06,830
we're going to need to think about the relative file path.

28274
00:08:06,830 --> 00:08:10,850
So we have to access the letter template folder to get to

28275
00:08:10,850 --> 00:08:11,960
each of these files.

28276
00:08:12,440 --> 00:08:17,440
The file path will look something like this.

28277
00:08:17,870 --> 00:08:21,740
It will be letter_template/ one of these letters for example,

28278
00:08:21,740 --> 00:08:25,910
letter_1.txt or letter_2 or 3. In fact,

28279
00:08:25,940 --> 00:08:30,380
this particular number is going to be something that we're going to generate

28280
00:08:30,440 --> 00:08:33,559
randomly and we're going to put in there as a f-string.

28281
00:08:34,159 --> 00:08:38,780
So I need to now import the random module in addition to everything else.

28282
00:08:39,320 --> 00:08:44,320
And we can go ahead and call the random module and get a randint between one and

28283
00:08:46,490 --> 00:08:47,323
three.

28284
00:08:47,410 --> 00:08:48,820
Like this.

28285
00:08:50,140 --> 00:08:53,320
So now we've completed these two hints, and finally,

28286
00:08:53,350 --> 00:08:58,350
we're going to use the replace() method to replace the name placeholder inside each of

28287
00:08:58,740 --> 00:09:03,740
these letters right here with the actual name of the person whose birthday it is.

28288
00:09:04,830 --> 00:09:09,030
Here I've linked it to the documentation for the replace keyword

28289
00:09:09,960 --> 00:09:14,550
and this is what it looks like. For example, if we have a string like this,

28290
00:09:14,580 --> 00:09:18,930
then we can say text.replace, take the word that we want to take out

28291
00:09:18,990 --> 00:09:22,140
and then the word we want to put in. In our case,

28292
00:09:22,290 --> 00:09:26,730
we're going to have to read the text from this file with our 

28293
00:09:26,730 --> 00:09:31,110
with open, and then the file path goes in here,

28294
00:09:31,440 --> 00:09:34,290
and then we'll call this the letter_file.

28295
00:09:35,700 --> 00:09:37,200
And then from this letter_file,

28296
00:09:37,200 --> 00:09:42,000
we're going to get the contents by reading from this letter_file.

28297
00:09:42,380 --> 00:09:43,213
Right.

28298
00:09:44,990 --> 00:09:49,340
Now, once we've gotten the contents, then we can say contents.replace

28299
00:09:49,730 --> 00:09:54,500
and the thing that we want to replace is that hard-coded name placeholder

28300
00:09:54,980 --> 00:09:59,750
and the thing we want to replace it with comes from the current matching

28301
00:09:59,780 --> 00:10:00,613
birthday.

28302
00:10:02,120 --> 00:10:06,800
If the today_tuple exists inside our birthday dictionary,

28303
00:10:07,250 --> 00:10:10,100
then we can get hold of the entire row of data

28304
00:10:10,550 --> 00:10:11,383
...

28305
00:10:14,660 --> 00:10:19,660
by taking our birthday dictionary and then getting hold of the item at the key

28306
00:10:21,380 --> 00:10:23,240
which matches today_tuple.

28307
00:10:24,650 --> 00:10:29,240
Remember that today_tuple is the month and day as a tuple and the birthday

28308
00:10:29,240 --> 00:10:34,240
dictionaries all have keys as the birthday month and birthday day as a tuple.

28309
00:10:35,030 --> 00:10:39,260
So we've checked that this tuple exists as a key inside the birthday

28310
00:10:39,260 --> 00:10:40,093
dictionary,

28311
00:10:40,250 --> 00:10:45,200
and then we use the square bracket to actually access the data row for that

28312
00:10:45,200 --> 00:10:49,130
particular match. And then we've got the birthday_person,

28313
00:10:49,490 --> 00:10:51,740
so from that birthday_person

28314
00:10:52,100 --> 00:10:54,740
we're going to get hold of their name.

28315
00:10:55,190 --> 00:10:58,940
And the name lives under the name column here.

28316
00:10:59,570 --> 00:11:01,610
As long as we put the name as a string,

28317
00:11:01,970 --> 00:11:05,510
then we should be able to get hold of their actual name right here.

28318
00:11:06,770 --> 00:11:09,920
And that is the end of step 3.

28319
00:11:10,550 --> 00:11:13,130
So now we're finally moving on to step 4

28320
00:11:13,370 --> 00:11:15,380
where we're going to send our letter

28321
00:11:15,380 --> 00:11:18,650
which was generated here in our contents,

28322
00:11:19,010 --> 00:11:22,400
and we're going to send it to that birthday person's email address.

28323
00:11:23,840 --> 00:11:27,470
So the first thing we're going to need is to create a connection and we're going

28324
00:11:27,470 --> 00:11:30,770
to use the smtplib library to do that.

28325
00:11:31,130 --> 00:11:35,750
So import smtplib. And then we're going to say with smtp

28326
00:11:35,750 --> 00:11:39,830
lib.SMTP, let's create an object from that

28327
00:11:40,130 --> 00:11:44,480
and we have to provide the host string. So as I mentioned before,

28328
00:11:44,480 --> 00:11:48,350
depending on which email provider you use, it will be different.

28329
00:11:48,860 --> 00:11:53,270
Now I'm going to put in my email and password at the top as constants.

28330
00:11:53,770 --> 00:11:55,420
Of course, this is not going to work for you

28331
00:11:55,420 --> 00:11:58,450
so you're going to have to use your own email and password.

28332
00:11:59,020 --> 00:12:01,660
And depending on which email provider you use,

28333
00:12:01,690 --> 00:12:06,010
you'll have to pick the correct SMTP. So I'm sending emails

28334
00:12:06,010 --> 00:12:10,120
using Gmail so I'm going to change this to smtp.gmail.com.

28335
00:12:10,690 --> 00:12:15,690
And I'm going to save this connection that I create as the connection.

28336
00:12:16,630 --> 00:12:21,630
Step 2 is to go ahead and call the starrttls.

28337
00:12:23,050 --> 00:12:27,190
So we'll get our connection and then call starttls.

28338
00:12:27,670 --> 00:12:32,670
And then step 3  is to log in to our connection by calling login.

28339
00:12:35,530 --> 00:12:40,150
And then we have to provide the email that we want to log into and the password

28340
00:12:40,180 --> 00:12:44,920
for that email account. Finally,

28341
00:12:44,980 --> 00:12:49,980
we're going to set up the subject and the content by calling connection.

28342
00:12:50,350 --> 00:12:55,060
sendmail. And the from address is MY_EMAIL,

28343
00:12:55,630 --> 00:13:00,280
the to address is going to be the email of the birthday person.

28344
00:13:00,730 --> 00:13:03,130
So we're going to get our birthday_person

28345
00:13:03,820 --> 00:13:08,710
and then we're going to get hold of their email by looking at the name of the

28346
00:13:08,740 --> 00:13:12,460
email column, which is just email actually like this.

28347
00:13:12,970 --> 00:13:16,870
And then finally, we can add in the actual message.

28348
00:13:18,880 --> 00:13:19,690
I'm going to again,

28349
00:13:19,690 --> 00:13:23,230
format this so that it's a little bit easier to read for you.

28350
00:13:25,480 --> 00:13:27,550
And then we're going to set up our message.

28351
00:13:27,760 --> 00:13:32,760
This is going to be an f-string and the subject is always going to be the same.

28352
00:13:33,130 --> 00:13:35,110
It's going to be happy birthday.

28353
00:13:36,280 --> 00:13:40,840
And then after two of these new lines, we can add the actual message body.

28354
00:13:41,350 --> 00:13:45,970
Now the message body is going to be the contents that we created because, 

28355
00:13:45,970 --> 00:13:49,360
remember, that takes a random letter, reads it

28356
00:13:49,420 --> 00:13:53,500
and then replaces in the name placeholder with the birthday person's name.

28357
00:13:54,130 --> 00:13:55,870
So that's what we're going to put in here.

28358
00:13:56,440 --> 00:13:59,860
And now that's step 4 completed as well

28359
00:14:00,220 --> 00:14:04,150
and we can now go ahead and run this file.

28360
00:14:04,630 --> 00:14:09,250
And hopefully it will show us process finished with exit code zero,

28361
00:14:09,280 --> 00:14:13,030
which is the best thing we can see. That means everything went well.

28362
00:14:13,510 --> 00:14:15,610
And remember that the birthday

28363
00:14:15,610 --> 00:14:19,840
which I set to test was this row of data.

28364
00:14:20,320 --> 00:14:25,320
So it should have replaced a random letter's placeholder with the name of mum

28365
00:14:26,650 --> 00:14:31,540
and it should've sent that email to appbreweryinfo@gmail.com. So now

28366
00:14:31,540 --> 00:14:34,870
if I take a look at my appbreweryinfo@gmail.com,

28367
00:14:35,380 --> 00:14:39,280
you can see the email come through, but you might notice a bug here.

28368
00:14:39,700 --> 00:14:42,820
The name was actually never replaced. Instead,

28369
00:14:42,880 --> 00:14:44,710
we're still seeing this placeholder.

28370
00:14:45,100 --> 00:14:48,550
So this is a really common mistake that a lot of people make

28371
00:14:48,850 --> 00:14:53,850
and the reason is because the text replacement comes out as the output.

28372
00:14:54,620 --> 00:14:58,880
So it doesn't actually change the original text just by calling that method.

28373
00:14:59,240 --> 00:14:59,810
Instead,

28374
00:14:59,810 --> 00:15:04,760
you have to save it to a new variable in order to see the replaced text.

28375
00:15:05,720 --> 00:15:10,250
So in our case what that means is we can't just say content.replace.

28376
00:15:10,520 --> 00:15:14,660
We actually have to say contents = contents.replace.

28377
00:15:14,690 --> 00:15:19,690
So we replace the contents and then we save it back to the original variable.

28378
00:15:21,260 --> 00:15:25,460
So now if I run this again, you can see that this time

28379
00:15:25,490 --> 00:15:28,940
our message actually has the name replaced in here,

28380
00:15:29,270 --> 00:15:34,270
it has a random letter that it's generated and it has sent it to the correct

28381
00:15:34,490 --> 00:15:39,140
email address. If you want to take a look at the completed code,

28382
00:15:39,200 --> 00:15:44,180
then you'll find it in the course resources as the end code for the birthday

28383
00:15:44,180 --> 00:15:45,140
wisher project

28384
00:15:45,530 --> 00:15:49,220
and this contains a lot of things that we've talked about so far,

28385
00:15:49,520 --> 00:15:53,180
including dictionary comprehension, reading CSVs,

28386
00:15:53,210 --> 00:15:57,590
creating dataframes from pandas, using and creating tuples,

28387
00:15:57,980 --> 00:16:02,780
working with dictionaries, file paths, opening files,

28388
00:16:02,840 --> 00:16:05,870
replacing files, reading them, and of course,

28389
00:16:05,930 --> 00:16:09,920
writing and sending email as well as the datetime module.

28390
00:16:10,550 --> 00:16:13,370
So if you got stuck on any of these aspects,

28391
00:16:13,760 --> 00:16:18,590
then be sure to take a look at the previous lesson where we covered them

28392
00:16:18,650 --> 00:16:23,650
because we covered all of these concepts in a lot of detail in previous lessons.

28393
00:16:24,530 --> 00:16:28,070
So make sure that you don't just skip ahead if you actually got stuck.

28394
00:16:28,160 --> 00:16:33,160
It probably is an indicator that it's a good time to revisit and review some of

28395
00:16:33,800 --> 00:16:37,910
these concepts. For example, if you got stuck on dictionary comprehension,

28396
00:16:38,180 --> 00:16:42,140
then go back to the lessons where we did list and dictionary comprehensions

28397
00:16:42,440 --> 00:16:46,490
and try out some of the exercises again, just to refresh your mind. Now,

28398
00:16:46,520 --> 00:16:51,520
if you got stuck on working with the iterrows or the data that comes from our

28399
00:16:52,520 --> 00:16:57,020
pandas dataframes, then go back to those lessons where we talked about CSVs,

28400
00:16:57,020 --> 00:17:00,770
and we talked about pandas because nothing here is new,

28401
00:17:01,070 --> 00:17:06,069
but it does require your understanding and your ability to know how to apply the

28402
00:17:06,890 --> 00:17:10,550
knowledge that you've learned before. Now,

28403
00:17:10,640 --> 00:17:15,640
the final thing I want to show you in the next lesson is how to get this code to

28404
00:17:16,310 --> 00:17:21,310
actually run every day so it can actually check every single day to see if it

28405
00:17:22,190 --> 00:17:24,500
needs to send out a birthday email.

28406
00:17:24,980 --> 00:17:27,650
So for all of that and more, I'll see you on the next lesson.


28407
00:00:00,060 --> 00:00:01,170
In previous lessons,

28408
00:00:01,200 --> 00:00:05,700
we completed our automated birthday wisher Python project

28409
00:00:06,000 --> 00:00:10,110
and also the motivational quotes on Monday's Python project.

28410
00:00:10,620 --> 00:00:11,700
But at the moment,

28411
00:00:11,700 --> 00:00:16,700
you'll notice that this code is only going to work to continuously check to see

28412
00:00:17,250 --> 00:00:20,970
which day it is currently, compare it against the birthdays,

28413
00:00:21,300 --> 00:00:22,710
and then run the code

28414
00:00:23,070 --> 00:00:26,610
if this code is actually running constantly in the background.

28415
00:00:27,210 --> 00:00:30,990
Now you could of course, open up your project in PyCharm,

28416
00:00:31,050 --> 00:00:35,730
hit run every single day and make sure that it works,

28417
00:00:36,000 --> 00:00:39,840
but that's actually more effort than wishing somebody happy birthday manually.

28418
00:00:40,380 --> 00:00:42,330
So what do we do instead? Well,

28419
00:00:42,330 --> 00:00:47,330
we want some sort of way where we can host our code in the cloud and run our code

28420
00:00:49,290 --> 00:00:50,670
every single day.

28421
00:00:51,390 --> 00:00:55,380
So one way of doing that is using a service called Python anywhere,

28422
00:00:55,830 --> 00:01:00,270
and they have a free tier where we can do exactly that without having to pay

28423
00:01:00,270 --> 00:01:03,030
anything. Head over to python

28424
00:01:03,030 --> 00:01:07,020
anywhere.com and go ahead and sign up for a new account.

28425
00:01:07,830 --> 00:01:09,960
Now, once you've signed up and signed in,

28426
00:01:10,230 --> 00:01:13,710
then you want to go ahead and start adding some files.

28427
00:01:14,250 --> 00:01:16,320
Head over to the files tab right here

28428
00:01:16,740 --> 00:01:21,740
and we're going to upload the files that's currently inside our birthday wisher

28429
00:01:22,080 --> 00:01:26,310
project. So that's our main.y, our birthdays.csv,

28430
00:01:27,480 --> 00:01:29,640
and also our letter templates.

28431
00:01:30,150 --> 00:01:34,530
Now we want our letter templates to be inside a folder, so we're going to

28432
00:01:34,530 --> 00:01:38,340
create a new directory called letter_templates.

28433
00:01:38,760 --> 00:01:40,470
Make sure there's no typos there.

28434
00:01:41,130 --> 00:01:45,360
And then inside this directory is where we're going to upload these three files.

28435
00:01:45,840 --> 00:01:47,850
So letter 1, 2 and 3.

28436
00:01:48,870 --> 00:01:53,700
So now we've got our letters inside hom/AppBrewery/letter_

28437
00:01:53,700 --> 00:01:55,980
templates, and inside AppBrewery

28438
00:01:55,980 --> 00:01:58,740
we've got our birthdays.csv and our main.py.

28439
00:01:59,400 --> 00:02:04,400
So now we're going to go into our console and we're going to create a new bash

28440
00:02:05,430 --> 00:02:08,280
console. So we're going to click on this link right here,

28441
00:02:09,570 --> 00:02:13,470
and then once all of that's loaded and you see this dollar sign right here,

28442
00:02:13,740 --> 00:02:17,550
we're going to type python3 main.py.

28443
00:02:18,960 --> 00:02:23,820
Now you might see this error right here, the SMTP authentication error.

28444
00:02:24,360 --> 00:02:29,360
And this is something that happens because our Python program is trying to log

28445
00:02:29,370 --> 00:02:33,510
into our email, and our email provider in this case,

28446
00:02:33,540 --> 00:02:38,540
it's Google, is actually blocking it. So we can copy this URL and you can see it

28447
00:02:39,510 --> 00:02:40,590
ends right here

28448
00:02:40,590 --> 00:02:45,590
cause there's a space there, and we can paste it into the address bar and it

28449
00:02:45,930 --> 00:02:47,220
takes us to this problem.

28450
00:02:47,400 --> 00:02:52,200
I can't sign into my email client, and this is essentially what our Python code

28451
00:02:52,200 --> 00:02:53,033
is trying to do.

28452
00:02:53,400 --> 00:02:58,400
So what we need to do is click on this link to display the unlock capture, we

28453
00:02:58,830 --> 00:03:03,670
click continue, and it's now enabled our code to sign in again.

28454
00:03:04,120 --> 00:03:08,830
So we have to go back and type in exactly the same as we did before, python3

28455
00:03:09,190 --> 00:03:10,120
main.py.

28456
00:03:11,050 --> 00:03:14,980
But this time it should complete without giving us any errors

28457
00:03:15,280 --> 00:03:19,000
and it does that by showing us the dollar sign again and our prompt.

28458
00:03:19,570 --> 00:03:22,600
And now if I head back into my email,

28459
00:03:22,810 --> 00:03:27,810
you can see that this email was actually sent because the code was initiated

28460
00:03:29,290 --> 00:03:33,340
inside Pythonanywhere. So going back to our Python

28461
00:03:33,340 --> 00:03:34,570
anywhere dashboard,

28462
00:03:35,080 --> 00:03:39,040
we can go to the task section to actually schedule

28463
00:03:39,280 --> 00:03:43,210
a task to run. Now to set up a scheduled task,

28464
00:03:43,270 --> 00:03:46,930
we're going to type the same command that we did in the console

28465
00:03:47,170 --> 00:03:49,870
which is python3 main.py.

28466
00:03:50,560 --> 00:03:53,590
And then we're going to schedule this at a particular time.

28467
00:03:54,010 --> 00:03:56,650
And the server time is based on UTC.

28468
00:03:57,160 --> 00:04:01,180
So you can take a look at the current time in UTC

28469
00:04:01,210 --> 00:04:03,790
by typing in UTC now into Google

28470
00:04:04,120 --> 00:04:06,310
and you can see right now it's 12:09.

28471
00:04:06,910 --> 00:04:10,900
So if I go ahead and schedule this for 12:10

28472
00:04:11,440 --> 00:04:13,030
and I hit create,

28473
00:04:13,540 --> 00:04:17,200
then at the time when this particular time hits,

28474
00:04:17,470 --> 00:04:21,970
when it becomes 12:10, then our command should be run

28475
00:04:22,300 --> 00:04:26,560
and we should see a happy birthday email show up in our testing Gmail account.

28476
00:04:27,460 --> 00:04:30,970
So right now UTC has just gone to 12:10.

28477
00:04:31,720 --> 00:04:34,810
And so if we wait for this schedule task,

28478
00:04:35,080 --> 00:04:40,080
we can click on this button to view the task log and you do have to be quite

28479
00:04:41,530 --> 00:04:46,530
patient because sometimes it might take a while before that task actually gets

28480
00:04:46,810 --> 00:04:51,640
executed. So just keep checking the task log until you see this happen.

28481
00:04:51,940 --> 00:04:56,320
Completed task at 12:10:56, o at the end of that minute.

28482
00:04:56,710 --> 00:05:01,630
Took 16.92 seconds return code was zero, which means it was successful.

28483
00:05:02,110 --> 00:05:07,110
And now we can see that email show up in our Gmail account and this was

28484
00:05:07,480 --> 00:05:11,770
completely automated and it was done by Python anywhere.

28485
00:05:12,160 --> 00:05:16,210
So now if we have that code running in the background every day,

28486
00:05:16,240 --> 00:05:21,010
you can get it to run that code at this particular time or another time of your

28487
00:05:21,010 --> 00:05:23,440
choosing in fact. If you're not testing it,

28488
00:05:23,530 --> 00:05:28,030
you can actually get it to run much earlier. Let's say maybe seven o'clock UTC.

28489
00:05:28,930 --> 00:05:31,180
Then it'll send the email out in the morning.

28490
00:05:31,780 --> 00:05:36,760
And every day it's going to check whose birthday it is in your birthday CSV

28491
00:05:36,850 --> 00:05:40,210
and then send an email to them and do all of that fancy stuff

28492
00:05:40,330 --> 00:05:45,330
using what we did with Python. Python anywhere has really good forums for help

28493
00:05:46,210 --> 00:05:48,910
and advice. And on the free tier,

28494
00:05:48,940 --> 00:05:53,830
you can only schedule one task to run, so one particular code base.

28495
00:05:54,190 --> 00:05:57,220
Now I don't work for them and I have no relations to them,

28496
00:05:57,610 --> 00:06:02,050
but I find it really helpful to have a really simple way of getting my Python

28497
00:06:02,050 --> 00:06:05,260
scripts to run everyday at a particular time.

28498
00:06:05,500 --> 00:06:09,430
So have a look at that and you can use it if you find it helpful as well.



28499
00:00:00,540 --> 00:00:01,080
Hey guys,

28500
00:00:01,080 --> 00:00:06,080
Welcome to Day 33 of 100 Days of Code. It's Angela here

28501
00:00:06,720 --> 00:00:11,490
and today we're going to be learning about application programming interfaces,

28502
00:00:11,820 --> 00:00:16,110
also known as APIs. What are we going to use it for? Well,

28503
00:00:16,110 --> 00:00:21,110
we're going to learn this technology so that we're able to create an ISS

28504
00:00:21,390 --> 00:00:22,223
tracker.

28505
00:00:22,440 --> 00:00:26,880
So this is the international space station and it floats high above in the sky

28506
00:00:26,970 --> 00:00:29,610
and it circles earth many, many times a day.

28507
00:00:30,210 --> 00:00:35,040
Here's a video that's taken from the ISS and you can see how glorious earth

28508
00:00:35,070 --> 00:00:38,550
looks in the eyes of the ISS.

28509
00:00:39,000 --> 00:00:43,860
And what we're going to try to do is we're going to try and track where the ISS

28510
00:00:44,100 --> 00:00:47,700
is currently at in the sky. And at the time point

28511
00:00:47,970 --> 00:00:52,860
when the ISS is in the night sky, right above where we are,

28512
00:00:53,220 --> 00:00:55,350
then we're going to send ourselves an email

28513
00:00:55,440 --> 00:00:59,760
telling us to look up and spot the fast-moving ISS.

28514
00:01:00,600 --> 00:01:04,590
Once you are ready, head over to the next lesson and we'll get started learning

28515
00:01:04,590 --> 00:01:05,430
about APIs.


28516
00:00:00,690 --> 00:00:05,010
First, let's take a look at what application programming interfaces

28517
00:00:05,070 --> 00:00:10,070
are and then we'll see how we can use them to start pulling in some data from the

28518
00:00:10,560 --> 00:00:13,290
internet. So when you're browsing the web,

28519
00:00:13,320 --> 00:00:17,070
you might've realized that there's a lot of websites out there that carry a

28520
00:00:17,070 --> 00:00:19,140
whole bunch of data. For example,

28521
00:00:19,140 --> 00:00:24,140
you could go onto Yahoo weather and see next week's weather predictions for

28522
00:00:24,390 --> 00:00:25,650
any city in the world,

28523
00:00:26,100 --> 00:00:31,100
you could go onto Coinbase and see what is the current market value of various

28524
00:00:31,650 --> 00:00:34,500
cryptocurrencies like Bitcoin and Ethereum.

28525
00:00:35,130 --> 00:00:39,600
You can also go onto the MBA website and look at various stats about your

28526
00:00:39,600 --> 00:00:42,330
favorite basketball players. Now,

28527
00:00:42,480 --> 00:00:45,540
what if we wanted to use the data that they have?

28528
00:00:45,780 --> 00:00:50,250
How can we tap into it and use it in our own programs? Well,

28529
00:00:50,280 --> 00:00:53,790
that's where application programming interfaces come into play.

28530
00:00:54,390 --> 00:00:58,320
They all are a set of commands, functions, protocols, and objects

28531
00:00:58,680 --> 00:01:03,680
that programmers can use to create software or interact with an external system.

28532
00:01:05,430 --> 00:01:06,720
In the upcoming lessons

28533
00:01:06,750 --> 00:01:11,280
what we're going to be focusing on is this interacting with external systems.

28534
00:01:11,970 --> 00:01:12,510
Namely,

28535
00:01:12,510 --> 00:01:17,510
we're going to try and interact with various websites and pull live data from

28536
00:01:17,910 --> 00:01:20,010
those websites. Essentially,

28537
00:01:20,010 --> 00:01:25,010
the API is an interface or rather a sort of barrier between your program and an

28538
00:01:26,940 --> 00:01:27,900
external system.

28539
00:01:28,530 --> 00:01:33,530
And what you're trying to do is you're trying to use the rules that the API has

28540
00:01:33,810 --> 00:01:38,810
prescribed to make a request to the external system for some piece of data.

28541
00:01:40,650 --> 00:01:42,810
And if you have structured your request

28542
00:01:43,080 --> 00:01:48,080
according to all of the requirements that this external system has set out in

28543
00:01:48,090 --> 00:01:48,923
their API,

28544
00:01:49,200 --> 00:01:54,200
then they will respond to you appropriately and give you the data that you want.

28545
00:01:56,940 --> 00:01:58,830
But if you don't follow the rules,

28546
00:01:59,040 --> 00:02:03,090
then your request will be invalid and they will tell you to go away.

28547
00:02:04,260 --> 00:02:09,120
So if we think about the websites we saw before, Yahoo weather has a Yahoo

28548
00:02:09,120 --> 00:02:10,050
weather  API

28549
00:02:10,110 --> 00:02:14,700
which you can tap into using your programs or apps and get things like 10-day

28550
00:02:14,700 --> 00:02:18,330
forecast, wind, atmosphere, astronomy conditions,

28551
00:02:18,750 --> 00:02:21,360
and Coinbase has their own API,

28552
00:02:21,420 --> 00:02:26,420
which lets you tap into the current live prices of various cryptocurrencies.

28553
00:02:28,020 --> 00:02:32,310
And of course, the MBA also has an API for you to be able to get various

28554
00:02:32,310 --> 00:02:37,310
information that you're interested in on leagues, teams, players, games and a whole

28555
00:02:37,830 --> 00:02:38,663
bunch more.

28556
00:02:39,630 --> 00:02:44,630
So essentially, you can imagine these websites as the sort of restaurant,

28557
00:02:44,910 --> 00:02:45,330
right?

28558
00:02:45,330 --> 00:02:50,330
And the data that powers these websites as the kitchen behind the scenes.

28559
00:02:51,570 --> 00:02:56,570
We can't really go to a restaurant as a member of the public and just go in to

28560
00:02:57,660 --> 00:03:01,150
the kitchen and start raiding their cupboards. You can't, you know,

28561
00:03:01,810 --> 00:03:05,830
imagine going to your favorite Japanese restaurant and heading straight into the

28562
00:03:05,830 --> 00:03:08,830
kitchen for some of your favorite Kewpie mayonnaise.

28563
00:03:08,980 --> 00:03:12,160
That's not really appropriate. In a restaurant

28564
00:03:12,190 --> 00:03:17,190
we have a menu and this menu is kind of like the interface between you and the

28565
00:03:18,670 --> 00:03:19,503
restaurant.

28566
00:03:19,690 --> 00:03:24,400
It's the thing that tells you what you can order and what you can't.

28567
00:03:24,760 --> 00:03:28,420
So maybe you can get a cake, a sandwich or tea from the restaurant,

28568
00:03:28,720 --> 00:03:32,380
but you can't just go into the kitchen and demand whatever it is that you want.

28569
00:03:33,180 --> 00:03:37,170
Essentially an API is exactly that. It's the menu.

28570
00:03:37,530 --> 00:03:41,850
It's all of the things that you can do to interact with

28571
00:03:42,210 --> 00:03:45,240
an external system such as a website

28572
00:03:45,240 --> 00:03:47,430
that carries data like Yahoo

28573
00:03:47,430 --> 00:03:51,330
weather or the MBA website. In the coming lessons

28574
00:03:51,360 --> 00:03:56,360
we're going to be looking at how we can read the documentation for the API and

28575
00:03:56,520 --> 00:03:59,820
interact with them to be able to pull pieces of data that

28576
00:03:59,880 --> 00:04:04,880
we want in the moment that we want it. So for all of that and more,

28577
00:04:05,310 --> 00:04:06,360
I'll see on the next lesson.


28578
00:00:00,150 --> 00:00:00,360
Now,

28579
00:00:00,360 --> 00:00:05,360
one of the most important aspects of an API is the API endpoint.

28580
00:00:07,110 --> 00:00:10,710
And you can imagine that as a location, right?

28581
00:00:10,740 --> 00:00:15,740
So we said that if we want to get data from a particular external service,

28582
00:00:16,079 --> 00:00:20,940
then we need to know what location that data is stored. So for example,

28583
00:00:20,970 --> 00:00:22,710
if you wanted to get money out of a bank,

28584
00:00:22,950 --> 00:00:27,360
then you need to know where that bank is and what is its address.

28585
00:00:28,200 --> 00:00:30,090
And that, when it comes to API

28586
00:00:30,090 --> 00:00:35,090
lingo, is called the API endpoint. And that's usually just a URL.

28587
00:00:35,940 --> 00:00:38,580
So for example, if you wanted to get crypto data,

28588
00:00:38,610 --> 00:00:41,700
you might use api.coinbase.com.

28589
00:00:42,270 --> 00:00:46,740
This is the location where the Coinbase data can be found.

28590
00:00:47,940 --> 00:00:51,630
Now, in addition to knowing the API endpoint,

28591
00:00:51,720 --> 00:00:54,900
you also have to make a request over the internet.

28592
00:00:55,530 --> 00:01:00,530
This API request is kind of similar to going to the bank and trying to get some

28593
00:01:00,870 --> 00:01:04,530
money out, so trying to withdraw some data from their vault.

28594
00:01:05,400 --> 00:01:09,270
As you can imagine, the world would be completely chaotic

28595
00:01:09,270 --> 00:01:12,900
if everybody was allowed to just go into a bank and take out the amount of money

28596
00:01:12,900 --> 00:01:15,810
they need without any sort of checks and balances.

28597
00:01:16,380 --> 00:01:20,490
So that's why, in the bank, you have a bank teller

28598
00:01:20,550 --> 00:01:25,550
so somebody who is there to ask you, "Can I help you? What you want?" and to prevent you

28599
00:01:26,730 --> 00:01:30,420
from going to the vault by yourself. And to also call the police

28600
00:01:30,420 --> 00:01:35,190
if you try to do that. Now this bank teller is kind of acting like the API.

28601
00:01:35,520 --> 00:01:40,520
It's the interface between you and the external system or between you and the

28602
00:01:41,310 --> 00:01:45,510
bank vault. And you can make a number of requests to this lady.

28603
00:01:45,900 --> 00:01:48,540
You could, of course, ask her to give you some money,

28604
00:01:48,570 --> 00:01:51,390
but that obviously is going to involve checking your ID,

28605
00:01:51,630 --> 00:01:55,860
making sure that you have your account number and she'll have to do a whole

28606
00:01:55,860 --> 00:01:56,693
bunch of checks.

28607
00:01:57,150 --> 00:02:01,230
But you can also go into the bank and ask the bank teller for things that

28608
00:02:01,230 --> 00:02:06,000
doesn't require any form of authentication. For example, you can say,

28609
00:02:06,030 --> 00:02:07,830
well, what are your opening hours?

28610
00:02:08,370 --> 00:02:11,370
And this is the equivalent of making a very,

28611
00:02:11,370 --> 00:02:16,370
very simple get request where you just try to get a piece of data from a website

28612
00:02:17,550 --> 00:02:19,890
using their API. Now,

28613
00:02:19,890 --> 00:02:23,970
one of the simplest APIs that I like to introduce students to is the

28614
00:02:23,970 --> 00:02:27,570
international space station current location API.

28615
00:02:28,350 --> 00:02:30,660
This is the endpoint,

28616
00:02:31,080 --> 00:02:35,850
and you can see that it returns the output in the form of a JSON,

28617
00:02:35,880 --> 00:02:38,400
which we've already played around with quite a bit.

28618
00:02:39,870 --> 00:02:42,990
If you want to make a request to this API,

28619
00:02:43,320 --> 00:02:47,880
you can of course use your browser to do it. Just paste the end point,

28620
00:02:47,880 --> 00:02:51,180
which is a URL into the address bar.

28621
00:02:51,510 --> 00:02:54,660
And once you hit enter, you can see the result

28622
00:02:54,690 --> 00:02:57,750
come back in the format of a JSON.

28623
00:02:58,380 --> 00:03:03,380
And this describes the current ISS position in terms of its longitude and

28624
00:03:04,570 --> 00:03:07,750
latitude. If I refresh this,

28625
00:03:07,870 --> 00:03:10,840
then I will make a new request to this end point

28626
00:03:11,230 --> 00:03:16,210
and I will get a slightly different piece of data back because the ISS is moving

28627
00:03:16,300 --> 00:03:20,040
actually quite fast through the air. So every time you can see that

28628
00:03:20,130 --> 00:03:23,000
it's moved by a little bit. Now, if

28629
00:03:23,160 --> 00:03:25,500
reading the data like this is a bit difficult,

28630
00:03:25,650 --> 00:03:30,270
I recommend installing a free Chrome browser plugin quote, JSON Viewer

28631
00:03:30,300 --> 00:03:31,133
Awesome

28632
00:03:31,410 --> 00:03:36,090
and what it will do is whenever it sees JSON data being rendered in the

28633
00:03:36,090 --> 00:03:36,923
browser,

28634
00:03:36,960 --> 00:03:41,960
it will display it in a nice tree structure and it will look something like

28635
00:03:42,240 --> 00:03:42,990
this.

28636
00:03:42,990 --> 00:03:47,370
So you can collapse each of these parts and you can see that this is a

28637
00:03:47,400 --> 00:03:52,020
dictionary effectively with three items, timestamp, message, ISS position.

28638
00:03:52,380 --> 00:03:54,570
And then when you tap into the ISS position,

28639
00:03:54,780 --> 00:03:56,640
you can get the longitude and latitude.

28640
00:03:57,570 --> 00:04:00,240
Now we've already seen the JSON data format,

28641
00:04:01,020 --> 00:04:04,020
and we know that it was originally created for JavaScript,

28642
00:04:04,320 --> 00:04:09,320
but later became almost the standard way of transferring data across the

28643
00:04:09,330 --> 00:04:12,120
internet. And the reason for it is really simple.

28644
00:04:12,420 --> 00:04:15,930
If you take something like a Python dictionary, let's say you have a wardrobe,

28645
00:04:15,960 --> 00:04:19,160
right? It's kind of like you're going to Ikea. You spotted a wardrobe

28646
00:04:19,170 --> 00:04:23,460
you would like, but you don't want to carry this home in its entirety.

28647
00:04:23,820 --> 00:04:28,260
It might not even fit in your car. Well, what do you do? Well in Ikea,

28648
00:04:28,320 --> 00:04:31,980
at least the way they've solved it, is they sell you a flat pack.

28649
00:04:32,250 --> 00:04:36,630
So all the pieces flat against each other and you go home and you build it

28650
00:04:36,630 --> 00:04:41,430
yourself. This is the equivalent of a JSON. It's very minimalist,

28651
00:04:41,730 --> 00:04:44,550
it doesn't have a lot of spaces and a lot of indents.

28652
00:04:44,850 --> 00:04:48,240
It just has a couple of symbols to denote which are the keys,

28653
00:04:48,270 --> 00:04:51,840
which are the values, which are the separate key-value pairs.

28654
00:04:52,230 --> 00:04:55,650
And this can be transported across the internet very,

28655
00:04:55,650 --> 00:04:59,640
very quickly because of how small and flat it is. Now,

28656
00:04:59,670 --> 00:05:01,620
once you receive this JSON,

28657
00:05:01,710 --> 00:05:06,710
then you can reconstitute it back to your original Python dictionary or a

28658
00:05:07,200 --> 00:05:11,010
JavaScript object depending on what programming language you were working with.

28659
00:05:11,370 --> 00:05:15,510
And this is the equivalent of taking a screwdriver and putting it together that

28660
00:05:15,510 --> 00:05:16,620
Ikea furniture.

28661
00:05:17,130 --> 00:05:22,130
But luckily for you, this process is a lot less painful than putting together

28662
00:05:22,470 --> 00:05:25,440
Ikea furniture. It's actually super easy.

28663
00:05:26,010 --> 00:05:27,750
Let me demonstrate. Here

28664
00:05:27,780 --> 00:05:32,780
I've created a brand new project from scratch day-33 and inside my main.py

28665
00:05:34,740 --> 00:05:39,740
I'm going to try and make a request to the ISS location API.

28666
00:05:41,430 --> 00:05:45,840
So the first thing I need to do is I need to import a library to help me to do

28667
00:05:45,840 --> 00:05:46,590
that.

28668
00:05:46,590 --> 00:05:51,590
And the one that I'm going to import is called requests and note that there's an

28669
00:05:51,720 --> 00:05:52,680
's' at the end.

28670
00:05:53,310 --> 00:05:58,310
And this has to be installed because it does not come prebuilt with Python.

28671
00:05:58,880 --> 00:06:01,940
So you can click on it, and then once you see the red light bulb,

28672
00:06:01,970 --> 00:06:06,140
click on it and get it to install the package called requests.

28673
00:06:06,710 --> 00:06:09,800
Once that's done, then you'll be able to use it. Now,

28674
00:06:09,800 --> 00:06:13,820
what we're going to do using this requests package is we're going to call one of

28675
00:06:13,820 --> 00:06:15,740
its methods called get.

28676
00:06:16,130 --> 00:06:20,450
So this is going to help us get the data that we want from the endpoint.

28677
00:06:21,110 --> 00:06:24,710
The endpoint goes in in an argument called the URL,

28678
00:06:25,280 --> 00:06:29,390
and we have the check the documentation to know what the endpoint is.

28679
00:06:29,990 --> 00:06:33,890
So in this case, if we want to get hold of the current location,

28680
00:06:34,190 --> 00:06:36,770
then this is the endpoint URL.

28681
00:06:37,130 --> 00:06:41,690
So we can simply copy it and paste it in here as a string.

28682
00:06:43,100 --> 00:06:46,340
Now, once we've gotten the data from this,

28683
00:06:46,520 --> 00:06:51,050
then it's going to be returned and we can capture it inside a new variable

28684
00:06:51,050 --> 00:06:52,850
which we'll call response.

28685
00:06:53,540 --> 00:06:57,440
So this is going to be equal to the response that we get back from this

28686
00:06:57,440 --> 00:06:59,120
particular website's API.

28687
00:06:59,900 --> 00:07:02,630
Now let's go ahead and print this response.

28688
00:07:02,900 --> 00:07:07,310
So let's run our project and making sure that you are connected to the internet

28689
00:07:07,580 --> 00:07:11,630
because this line of code is going to go across the internet and fetch this data

28690
00:07:11,630 --> 00:07:14,450
for us. We get back a response.

28691
00:07:15,830 --> 00:07:20,630
Now we have successfully made our very first API request from within our Python

28692
00:07:20,630 --> 00:07:23,600
code. However, when we print the response,

28693
00:07:23,660 --> 00:07:28,660
we don't see the JSON data like we did when we made the request directly inside

28694
00:07:28,670 --> 00:07:33,230
our browser. Instead, we see this number 200 printed here.

28695
00:07:33,950 --> 00:07:37,250
That is our response code. And in the next lesson,

28696
00:07:37,340 --> 00:07:41,570
we'll dive deeper into how to work with these responses and what exactly these

28697
00:07:41,570 --> 00:07:42,800
response codes mean.


28698
00:00:00,900 --> 00:00:04,350
So what are the response codes that we can get from an API?

28699
00:00:04,890 --> 00:00:08,220
Response codes actually have a very specific meaning,

28700
00:00:08,400 --> 00:00:12,290
but the most important thing they tell us is if our request succeeded or

28701
00:00:12,590 --> 00:00:16,010
if it failed. Now, if you've been using the internet for a while,

28702
00:00:16,010 --> 00:00:20,630
you've probably come across the 404 response code. And the 404

28703
00:00:20,630 --> 00:00:24,230
response code basically means that the thing that you're looking for doesn't

28704
00:00:24,230 --> 00:00:28,880
exist. And you can see various websites having fun with this 

28705
00:00:28,880 --> 00:00:29,713
404 page.

28706
00:00:29,960 --> 00:00:33,530
Basically when you're trying to retrieve something from a website and it doesn't

28707
00:00:33,530 --> 00:00:36,650
actually have the thing you're looking for, then this is the code you get.

28708
00:00:37,100 --> 00:00:41,150
But there's actually a lot more response codes other than just 404.

28709
00:00:41,690 --> 00:00:42,650
And in fact,

28710
00:00:42,680 --> 00:00:46,700
you could summarize these status codes just by looking at the first number.

28711
00:00:47,240 --> 00:00:51,620
If it is 100 and something, then it's telling you, hold on,

28712
00:00:51,800 --> 00:00:54,050
something's happening. This is not final.

28713
00:00:54,410 --> 00:00:58,790
If it's 200 something then it is saying, here you go. Everything was successful.

28714
00:00:58,940 --> 00:01:00,980
You should be getting the data you expected.

28715
00:01:01,940 --> 00:01:06,800
If it's 300 something then it usually means you don't actually have permission

28716
00:01:06,800 --> 00:01:11,600
to get this thing, so go away. 400 something, it means that 

28717
00:01:11,630 --> 00:01:15,020
you screwed up. Either it could be a 404

28718
00:01:15,380 --> 00:01:16,910
which means that you screwed up

28719
00:01:16,970 --> 00:01:19,130
and the thing you're looking for doesn't even exist,

28720
00:01:19,610 --> 00:01:22,700
or it could be 500 something, which means I,

28721
00:01:22,760 --> 00:01:27,760
as in the server that you are making the request to, screwed up. And maybe the

28722
00:01:28,370 --> 00:01:32,720
server is down, maybe the website is down or maybe there's some other issue.

28723
00:01:33,620 --> 00:01:34,940
So that's just a quick,

28724
00:01:34,970 --> 00:01:38,870
at a glance, sort of way of remembering what's actually happening

28725
00:01:38,870 --> 00:01:40,970
when you are getting these response codes.

28726
00:01:42,110 --> 00:01:46,640
Now you can actually dig deeper into this response object and you can get a

28727
00:01:46,640 --> 00:01:49,310
whole bunch of things from it. For example,

28728
00:01:49,310 --> 00:01:54,020
if you wanted to know the actual status code instead of just a response object,

28729
00:01:54,350 --> 00:01:57,230
then you can say response.status_code,

28730
00:01:57,560 --> 00:02:01,040
and you actually only get the status code. But notice how

28731
00:02:01,040 --> 00:02:04,910
if I change this URL and I make a typo in here,

28732
00:02:05,240 --> 00:02:07,220
instead of iss I have is,

28733
00:02:07,580 --> 00:02:11,600
then now I get a 404 as my response status code.

28734
00:02:12,860 --> 00:02:17,300
OK. So if we get the status code 200 then it means that we were successful.

28735
00:02:17,780 --> 00:02:20,150
But what do we do when we get a different status code?

28736
00:02:20,420 --> 00:02:23,150
What should our program do when the request fails?

28737
00:02:23,690 --> 00:02:28,690
We might be tempted to write code like this. By checking to see if the response

28738
00:02:30,170 --> 00:02:33,620
.status_code is not equal to 200,

28739
00:02:33,920 --> 00:02:38,570
we can actually figure out well, this means that there probably was an error.

28740
00:02:39,260 --> 00:02:44,260
Now it doesn't really make sense to just print out an error because the user who's

28741
00:02:44,480 --> 00:02:47,930
using our program might be expecting something to happen.

28742
00:02:48,350 --> 00:02:52,700
So in most, cases you might want to raise an exception instead.

28743
00:02:52,700 --> 00:02:57,700
You could say bad response from ISS API.

28744
00:02:58,730 --> 00:03:02,230
But we learned from our module on errors and exceptions,

28745
00:03:02,560 --> 00:03:06,730
this is not very good. Firstly, this is not a very specific exception.

28746
00:03:07,090 --> 00:03:11,230
It's going to raise a very general type of exception. And secondly,

28747
00:03:11,260 --> 00:03:14,650
all that we're catching is when the status code is not 200.

28748
00:03:14,980 --> 00:03:19,240
What if we wanted you to know specifically which status code we got back? Well,

28749
00:03:19,240 --> 00:03:20,830
we could, of course check well

28750
00:03:20,840 --> 00:03:24,730
if the response status code was equal to say

28751
00:03:24,730 --> 00:03:29,730
404, then we'll raise a particular type of exception that says that resource

28752
00:03:31,870 --> 00:03:36,670
does not exist. And then we can have,

28753
00:03:36,700 --> 00:03:38,830
um, an elif that says, well,

28754
00:03:38,830 --> 00:03:42,940
if the response status code was 401,

28755
00:03:43,210 --> 00:03:48,210
then that means that you should raise an exception because this particular code

28756
00:03:50,170 --> 00:03:55,170
only happens when you are not authorized to access this data.

28757
00:03:58,660 --> 00:04:02,710
Now there's a lot of status codes that you could be getting back.

28758
00:04:03,040 --> 00:04:04,060
And in the course

28759
00:04:04,060 --> 00:04:08,680
resources I'll link to this particular web page where it tells you all of the

28760
00:04:08,680 --> 00:04:13,680
possible codes that you could be getting and what it means. As you can imagine,

28761
00:04:13,990 --> 00:04:16,959
it's impossible for us to write this many

28762
00:04:16,959 --> 00:04:21,880
if statements checking for every single possibility. What do we do instead?

28763
00:04:22,540 --> 00:04:26,680
You can actually do away with all of this by getting the request module

28764
00:04:26,950 --> 00:04:29,200
to generate the exception instead.

28765
00:04:29,860 --> 00:04:34,860
The requests module is the most popular way for Python developers to work with

28766
00:04:37,450 --> 00:04:42,310
APIs. And you can see in their statistics just the number of stars,

28767
00:04:42,340 --> 00:04:43,240
number of forks,

28768
00:04:43,870 --> 00:04:48,190
and from these stats, you can see just how much active development there is and

28769
00:04:48,220 --> 00:04:51,370
how popular this particular module is. Now,

28770
00:04:51,400 --> 00:04:53,560
if you want to take a look at the documentation,

28771
00:04:53,830 --> 00:04:58,240
then you get taken to their website and it tells you all of the things that it

28772
00:04:58,240 --> 00:05:01,750
can do, which is quite a lot actually.

28773
00:05:02,500 --> 00:05:04,450
Now I won't read through all of this with you,

28774
00:05:04,720 --> 00:05:08,170
but if we take a look at one of the sections, Errors and Exceptions,

28775
00:05:08,530 --> 00:05:13,530
you can actually call raise for status on the response you get back in order

28776
00:05:13,540 --> 00:05:15,490
to raise a HTTP error

28777
00:05:15,610 --> 00:05:18,790
if the request returned an unsuccessful status code.

28778
00:05:19,600 --> 00:05:24,600
Basically instead of us trying to raise an exception for every single possible

28779
00:05:24,670 --> 00:05:29,670
status code and telling the developer what might be the reason, we can simply use

28780
00:05:30,520 --> 00:05:35,520
the request module by saying response.raise_for_status.

28781
00:05:36,070 --> 00:05:40,840
So now what you'll see is that if we don't get a 200

28782
00:05:40,900 --> 00:05:45,220
which is the pass-- Let's say I mess up this end point again,

28783
00:05:45,610 --> 00:05:49,270
then you'll see an exception being raised and it's telling us, look,

28784
00:05:49,270 --> 00:05:53,590
it's a 404 client error. This URL is not found.

28785
00:05:54,970 --> 00:05:59,720
So this request module is actually really powerful and we're going to see how to use

28786
00:05:59,750 --> 00:06:03,170
various aspects of it in the upcoming lessons.

28787
00:06:03,680 --> 00:06:08,510
But for now, the first thing we need to get hold of is the actual data from this

28788
00:06:08,510 --> 00:06:11,270
particular API. To do that,

28789
00:06:11,450 --> 00:06:15,650
we tap into our response and we get the JSON data.

28790
00:06:16,010 --> 00:06:19,640
So this is the actual data. And when I print it,

28791
00:06:19,910 --> 00:06:24,320
you can see that it looks exactly the same as what we got in our browser.

28792
00:06:25,160 --> 00:06:28,730
Coming back to our code where we have this JSON,

28793
00:06:29,150 --> 00:06:33,440
we can tap into it just like we would for any Python dictionary.

28794
00:06:33,740 --> 00:06:38,740
We could use some square brackets and then type in the name of a key that we're

28795
00:06:39,170 --> 00:06:41,720
interested in. For example,

28796
00:06:41,720 --> 00:06:46,720
if this was a Python dictionary and we wanted to know the iss_position,

28797
00:06:47,360 --> 00:06:52,360
then we would add the square brackets and then pass in iss_ position.

28798
00:06:54,170 --> 00:06:56,450
And now when we print data,

28799
00:06:56,480 --> 00:07:01,370
you can see it's now narrowed down and drilled into the position to give us this

28800
00:07:01,370 --> 00:07:02,540
longitude and latitude.

28801
00:07:02,960 --> 00:07:07,880
So we can go even further and tag on another set of square brackets and try to

28802
00:07:07,880 --> 00:07:10,370
get hold of, say the longitude.

28803
00:07:11,390 --> 00:07:16,040
And now we get that actual piece of data. There you have it.

28804
00:07:16,070 --> 00:07:21,070
We get access to the longitude by tapping into our data in the format of a JSON

28805
00:07:22,610 --> 00:07:27,380
and then getting the iss_position. And inside that dictionary,

28806
00:07:27,560 --> 00:07:32,560
we can get hold of the longitude. And we can do the same thing in order to get

28807
00:07:33,050 --> 00:07:35,090
hold of the latitude,

28808
00:07:37,480 --> 00:07:38,170
right?

28809
00:07:38,170 --> 00:07:41,350
But we would change the key of course, to latitude.

28810
00:07:43,510 --> 00:07:48,510
So now I'm going to create a tuple with the longitude and the latitude.

28811
00:07:49,660 --> 00:07:51,850
And now if I print it out,

28812
00:07:51,880 --> 00:07:56,880
you can see how I've managed to nicely format my code and get the pieces of

28813
00:07:57,370 --> 00:08:02,320
data that I want in order to be able to work with it in my project. Now,

28814
00:08:02,350 --> 00:08:06,970
if you wanna see where that particular latitude and longitude is on the world

28815
00:08:06,970 --> 00:08:10,390
map, then we can use a tool called latlong.net.

28816
00:08:10,750 --> 00:08:15,580
So if you go to geographic tools and go to latitude and longitude to address,

28817
00:08:15,850 --> 00:08:20,850
then you can paste in the longitude and latitude values that we got from

28818
00:08:22,060 --> 00:08:26,470
our API. And when we click convert, then you'll see on the map,

28819
00:08:26,560 --> 00:08:30,340
it shows where in the world the ISS is right now.

28820
00:08:31,120 --> 00:08:35,799
So at the moment, it's somewhere to the East of Japan over the Pacific ocean.

28821
00:08:36,039 --> 00:08:40,120
And of course, it's telling you no address found because I don't think anybody

28822
00:08:40,120 --> 00:08:40,953
lives right there.

28823
00:08:41,830 --> 00:08:45,310
So have a play around with that and make sure that you've fully understood

28824
00:08:45,340 --> 00:08:50,340
what's happening in these few lines of code and how we use the API endpoint to

28825
00:08:50,710 --> 00:08:54,490
get the data that we're showing up right here. In the next lesson

28826
00:08:54,550 --> 00:08:55,720
I've got a challenge for you.


28827
00:00:00,270 --> 00:00:05,130
Now that you've seen how you can make the most basic type of request to an API

28828
00:00:05,130 --> 00:00:09,600
endpoint, I want you to build a Kanye quote machine.

28829
00:00:09,960 --> 00:00:14,880
This is what it's going to look like and these are real Kanye quotes.

28830
00:00:15,300 --> 00:00:17,970
So every time you click on this button

28831
00:00:18,000 --> 00:00:21,690
which has a Kanye emoji, you can see

28832
00:00:21,690 --> 00:00:23,220
he'll say different things.

28833
00:00:24,000 --> 00:00:29,000
And some of the things he says are incredibly deep and other things are a little

28834
00:00:29,730 --> 00:00:33,810
bit weird. But we've created the starting file for this

28835
00:00:34,080 --> 00:00:37,110
so you don't have to spend a lot of time building up the UI.

28836
00:00:37,470 --> 00:00:41,850
All I want you to do is to figure out how to use the API

28837
00:00:41,880 --> 00:00:43,950
which is at kanye.rest

28838
00:00:44,370 --> 00:00:49,020
and this is the API endpoint. So you can test it out of course

28839
00:00:49,020 --> 00:00:52,110
in your browser just by putting it into the URL bar.

28840
00:00:52,560 --> 00:00:57,560
And you can see you get back a very simple JSON with just one key and one

28841
00:00:58,530 --> 00:01:03,060
value. And every time you run it, it'll give you a random quote.

28842
00:01:03,900 --> 00:01:08,100
Head over to the course resources and download the Kanye quote

28843
00:01:08,130 --> 00:01:12,060
starting file. And once you've unzipped it and opened it up,

28844
00:01:12,330 --> 00:01:16,290
you can see that there's the background.png, the kanye.png,

28845
00:01:16,650 --> 00:01:21,650
and there's all of the existing code that's required to generate this user

28846
00:01:22,830 --> 00:01:26,220
interface in tkinter. The point here is,

28847
00:01:26,520 --> 00:01:28,530
I know you can make tkinter apps,

28848
00:01:28,830 --> 00:01:33,570
but I want you to use the request module that you learned about just now in

28849
00:01:33,570 --> 00:01:38,400
order to get this function to work so that every time the Kanye button,

28850
00:01:38,550 --> 00:01:43,080
this one, is pressed, then we trigger this get_quote function.

28851
00:01:43,500 --> 00:01:48,500
And this is going to fetch the quote from the Kanye API here and fill it into

28852
00:01:51,780 --> 00:01:56,490
this quote_text on the canvas. Using what you've learned before

28853
00:01:56,850 --> 00:02:00,990
I think you can do this pretty quickly. So pause the video now and give it a go.

28854
00:02:05,300 --> 00:02:05,810
Yeah.

28855
00:02:05,810 --> 00:02:07,070
All right. So to begin,

28856
00:02:07,130 --> 00:02:11,660
we, of course, need to import our very important requests module,

28857
00:02:12,290 --> 00:02:15,890
and you need to install it if you see some red squiggly lines.

28858
00:02:16,310 --> 00:02:20,210
But if you see it grayed out like this then it means that we've already installed

28859
00:02:20,210 --> 00:02:23,210
it into the starting files. Now,

28860
00:02:23,210 --> 00:02:25,580
once we've got hold of that module,

28861
00:02:25,640 --> 00:02:30,080
then we can write some code here so that we get our function to work.

28862
00:02:30,620 --> 00:02:35,540
Now, what should happen when the user presses on the Kanye button? Well,

28863
00:02:35,780 --> 00:02:38,690
we have to fetch a new quote from the API.

28864
00:02:39,290 --> 00:02:41,360
This is the API endpoint

28865
00:02:41,660 --> 00:02:46,660
and we're going to use the requests module to make a request and get some data

28866
00:02:47,930 --> 00:02:49,490
from this API.

28867
00:02:50,240 --> 00:02:54,170
So this is the code that we used before to figure out where the ISS was.

28868
00:02:54,680 --> 00:02:59,170
And we're going to save this as the response. Now,

28869
00:02:59,170 --> 00:03:01,060
once we've got our response,

28870
00:03:01,120 --> 00:03:05,260
we're going to call response.raise_for_status.

28871
00:03:05,290 --> 00:03:09,880
So if we don't get a 200, which is everything is okay,

28872
00:03:10,120 --> 00:03:13,300
then we want to actually raise an exception. Now,

28873
00:03:13,360 --> 00:03:17,830
the next thing we're gonna do is I'm going to get my response to show me the

28874
00:03:17,890 --> 00:03:21,370
JSON data. And I'm gonna save that as the data.

28875
00:03:22,030 --> 00:03:25,930
And then if we take a look at what the response looks like,

28876
00:03:26,230 --> 00:03:30,160
then you can see it's just a single key-value pair

28877
00:03:30,520 --> 00:03:35,050
and the key is quote and the value is the random quote.

28878
00:03:35,680 --> 00:03:40,680
So we can get hold of the actual quote by simply tapping to our data and then

28879
00:03:41,260 --> 00:03:45,730
using square brackets to fetch the value under the key quote.

28880
00:03:46,570 --> 00:03:48,610
And once we've got that piece of text,

28881
00:03:48,700 --> 00:03:53,080
then we want to put it into our quote_text which is on our canvas.

28882
00:03:53,560 --> 00:03:55,120
And as you saw before,

28883
00:03:55,150 --> 00:03:59,290
the way we do this is we say canvas.itemconfig.

28884
00:03:59,620 --> 00:04:03,700
And the item we want to configure is, of course, our quote_text.

28885
00:04:04,240 --> 00:04:07,810
And the thing that we want to configure about it is its text.

28886
00:04:08,170 --> 00:04:11,860
And we're going to set it to equal this quote that we fetched just now.

28887
00:04:13,060 --> 00:04:15,610
So now if I run my code,

28888
00:04:16,000 --> 00:04:19,120
you can see my Kanye says app showing up,

28889
00:04:19,540 --> 00:04:22,029
and this is where the Kanye quote is going to go.

28890
00:04:22,510 --> 00:04:27,510
So if I click on Kanye, you can see how it shows all of his quotes.

28891
00:04:29,230 --> 00:04:34,060
So did you manage to get that? If not, be sure to head back to the last lesson and

28892
00:04:34,120 --> 00:04:38,680
take a closer look at how we formatted our request and our response.


28893
00:00:00,120 --> 00:00:03,930
We've seen how APIs can have endpoints and we said

28894
00:00:03,930 --> 00:00:08,820
that's equivalent to the address of the place that you want to get some data

28895
00:00:08,820 --> 00:00:10,860
from, or you want to communicate with.

28896
00:00:11,430 --> 00:00:14,310
But APIs also have something called parameters.

28897
00:00:14,760 --> 00:00:19,760
And this is a way that allows you to give an input when you are making your API

28898
00:00:19,830 --> 00:00:23,310
request so that you can get different pieces of data back,

28899
00:00:23,460 --> 00:00:28,140
depending on your input in the same way that we've given different inputs into

28900
00:00:28,140 --> 00:00:31,170
the same function in order to get a different outcome.

28901
00:00:32,040 --> 00:00:36,570
Coming back to our bank analogy, that's kinda similar to going to the bank

28902
00:00:36,570 --> 00:00:40,740
and instead of just asking them for what are your opening hours,

28903
00:00:40,800 --> 00:00:45,060
a sort of broad stroke question, you can also pass in a parameter.

28904
00:00:45,480 --> 00:00:48,750
For example, you could say, well, what time do you close on Monday?

28905
00:00:49,110 --> 00:00:51,720
Or what time do you close on Tuesday?

28906
00:00:52,320 --> 00:00:56,010
And this allows you to get these specific piece of information that you're

28907
00:00:56,010 --> 00:01:00,870
interested in depending on the input that you provided as a parameter.

28908
00:01:01,980 --> 00:01:06,510
Now, not all APIs have parameters. Some are incredibly simple,

28909
00:01:06,540 --> 00:01:08,700
like the ISS location API.

28910
00:01:09,270 --> 00:01:12,240
But other ones allow you to provide parameters.

28911
00:01:12,660 --> 00:01:17,660
And this is a sunrise and sunset API that gives you the time when the sun is

28912
00:01:19,020 --> 00:01:21,630
gonna rise and set wherever you may be.

28913
00:01:22,110 --> 00:01:27,110
So you have to obviously provide a location so that they can tell you when the

28914
00:01:27,390 --> 00:01:30,480
sun is going to rise and set at your position.

28915
00:01:31,080 --> 00:01:35,490
We can do that through two parameters, the latitude and the longitude.

28916
00:01:36,030 --> 00:01:38,790
And you'll notice that in the API documentation,

28917
00:01:39,090 --> 00:01:42,810
they will usually tell you how you should structure your parameter.

28918
00:01:42,990 --> 00:01:44,160
So for example, here

28919
00:01:44,160 --> 00:01:48,210
the latitude can be specified using a lat key,

28920
00:01:48,630 --> 00:01:52,620
and the longitude is lng as the longitude.

28921
00:01:53,100 --> 00:01:57,750
And they want those pieces of input as floating-point numbers. Now,

28922
00:01:57,750 --> 00:02:02,750
you also see that some parameters are required and others are optional. Just as

28923
00:02:03,840 --> 00:02:07,680
we can have optional and required parameters when we create functions,

28924
00:02:07,950 --> 00:02:10,169
you have the same thing in APIs.

28925
00:02:11,039 --> 00:02:14,550
The optional ones all have a default value.

28926
00:02:15,180 --> 00:02:17,970
For example, the date you could provide,

28927
00:02:18,030 --> 00:02:23,030
say you wanted to know the sunrise and sunset on a particular day in the future

28928
00:02:23,130 --> 00:02:26,730
or in the past, but you can also leave it empty

28929
00:02:27,090 --> 00:02:29,370
and it will default to the current date.

28930
00:02:30,360 --> 00:02:34,680
Now the endpoint in this case is this particular URL,

28931
00:02:35,100 --> 00:02:39,990
api.sunrise-sunset.org/json. But don't worry.

28932
00:02:40,020 --> 00:02:44,580
I'll also link to this documentation in the course resources as well.

28933
00:02:45,390 --> 00:02:47,370
Let's see how we can get this to work.

28934
00:02:47,820 --> 00:02:52,820
I'm gonna comment out all of the things that were related to our ISS location,

28935
00:02:53,610 --> 00:02:58,610
and I'm going to use this requests module in order to get the sunrise and sunset

28936
00:02:59,560 --> 00:03:00,393
times

28937
00:03:00,460 --> 00:03:04,150
because this is going to be really important when we're creating our final

28938
00:03:04,150 --> 00:03:04,983
project

28939
00:03:05,290 --> 00:03:10,290
because it's almost impossible to spot the ISS in the sky unless it's actually

28940
00:03:11,260 --> 00:03:12,040
dark.

28941
00:03:12,040 --> 00:03:15,940
So we need to know when the sun is going to go down and when the sun's going to

28942
00:03:15,940 --> 00:03:18,040
come back up in order for us to know

28943
00:03:18,100 --> 00:03:22,720
if the sky is actually dark enough for us to be able to spot the ISS

28944
00:03:22,780 --> 00:03:27,040
traveling in the sky. Let's go ahead and set up another response

28945
00:03:27,100 --> 00:03:29,650
which is going to be set up to a request.

28946
00:03:30,040 --> 00:03:35,040
And this request is going to get some information from this particular endpoint.

28947
00:03:35,710 --> 00:03:40,360
So let's copy that over and make sure that you leave out this final

28948
00:03:40,600 --> 00:03:41,433
full stop.

28949
00:03:41,530 --> 00:03:45,070
That's just a part of the sentence and not a part of the API endpoint.

28950
00:03:45,970 --> 00:03:48,400
So it should look something like this.

28951
00:03:49,180 --> 00:03:53,530
And then we're going to get our response to raise an exception if there was an

28952
00:03:53,560 --> 00:03:58,300
error status code. So anything other than 200, basically. Now, if I run this

28953
00:03:58,300 --> 00:04:01,600
as it is, you can see I already get an exception.

28954
00:04:02,080 --> 00:04:04,630
And the exception is a 400

28955
00:04:05,110 --> 00:04:08,500
which, if you remember, means bad request.

28956
00:04:08,650 --> 00:04:13,650
This server cannot or will not process the request because of something that they

28957
00:04:13,750 --> 00:04:17,200
think is your fault. In our case,

28958
00:04:17,320 --> 00:04:22,320
the thing that we've done badly is we haven't provided the required parameters.

28959
00:04:23,320 --> 00:04:26,440
So how is it supposed to tell us the sunrise and sunset times

28960
00:04:26,830 --> 00:04:30,550
if we don't tell it our location? Let's fix this.

28961
00:04:31,030 --> 00:04:36,030
Let's create a set of parameters and you can do this by simply creating a Python

28962
00:04:38,170 --> 00:04:39,003
dictionary.

28963
00:04:39,400 --> 00:04:44,400
Now the keys for the parameters must match the ones specified in the API

28964
00:04:44,800 --> 00:04:45,760
documentation.

28965
00:04:46,180 --> 00:04:49,960
So it's lat for latitude and lng for longitude.

28966
00:04:50,560 --> 00:04:53,530
So let's create those keys as strings,

28967
00:04:54,100 --> 00:04:58,420
and then we can provide our latitude and longitude.

28968
00:04:59,830 --> 00:05:03,100
So how do we know what is our latitude and longitude? Well,

28969
00:05:03,100 --> 00:05:05,680
we've got our good old friend latlong.net.

28970
00:05:06,160 --> 00:05:11,110
So here I can type a particular place name. So right now I'm in London.

28971
00:05:11,470 --> 00:05:16,470
And if I click find, it will find me on the map and it will tell me what is my

28972
00:05:17,530 --> 00:05:19,720
latitude and what is my longitude.

28973
00:05:20,140 --> 00:05:24,490
So let's copy these over and let's create them as constants.

28974
00:05:24,730 --> 00:05:27,430
So I'm going to have a MY_LAT

28975
00:05:28,180 --> 00:05:31,750
which is equal to this as a floating point number.

28976
00:05:32,200 --> 00:05:34,180
And then my longitude--

28977
00:05:35,200 --> 00:05:38,710
Remember to include any negative signs if you see it.

28978
00:05:39,250 --> 00:05:42,850
That's actually a part of the latitude longitude encoding.

28979
00:05:43,480 --> 00:05:47,890
So now I can set my lat key to the constant

28980
00:05:47,920 --> 00:05:52,360
MY_LAT and the longitude key to the constant MY_LONG.

28981
00:05:52,390 --> 00:05:56,410
So these are the values that I got from my latlong.net search and

28982
00:05:57,200 --> 00:06:02,200
then I formatted all of this into a dictionary using the keys that were

28983
00:06:02,360 --> 00:06:05,780
specified in the API documentation here.

28984
00:06:06,470 --> 00:06:09,260
Those are the only two required parameters.

28985
00:06:09,710 --> 00:06:14,710
So if we now add this in to our get requests under the argument called params,

28986
00:06:17,060 --> 00:06:20,330
then we're now able to run this request again

28987
00:06:20,660 --> 00:06:23,870
and you'll see that this time we don't get any exceptions.

28988
00:06:24,200 --> 00:06:27,050
So we can assume that everything went swimmingly.

28989
00:06:28,130 --> 00:06:32,570
The data that we get back is under the response.json.

28990
00:06:32,930 --> 00:06:36,830
So let's go ahead and print out that data and see what we managed to get.

28991
00:06:37,760 --> 00:06:42,760
We got a JSON as usual and the JSON contains the sunrise time and the sunset

28992
00:06:43,700 --> 00:06:47,360
time, in addition to other things like when is the solar noon,

28993
00:06:47,510 --> 00:06:51,890
how long is the day, what is the day length and so on and so forth.

28994
00:06:52,280 --> 00:06:57,260
So you can see this one is a lot longer than what we had before. Now,

28995
00:06:57,290 --> 00:07:02,090
the two pieces of information that we're interested in is just the sunrise and

28996
00:07:02,090 --> 00:07:03,260
sunset times.

28997
00:07:03,860 --> 00:07:08,210
If we want to view this JSON data in a nicely formatted way,

28998
00:07:08,690 --> 00:07:13,690
then we can do that by putting the full request into the browser URL bar. And the

28999
00:07:15,350 --> 00:07:18,950
way that you format parameters in a URL string

29000
00:07:19,340 --> 00:07:22,640
looks something like this. In the sample requests,

29001
00:07:22,670 --> 00:07:26,660
they've shown you that this part is the end point URL.

29002
00:07:27,110 --> 00:07:31,100
And then afterwards you can add a question mark to denote that you're going to

29003
00:07:31,100 --> 00:07:32,660
add some parameters.

29004
00:07:33,200 --> 00:07:37,640
And then you add each parameter with the key equal sign and then the value

29005
00:07:38,030 --> 00:07:42,950
and then you can tag on more parameters with the ampersand or the and symbol.

29006
00:07:44,300 --> 00:07:47,570
So let's try putting this into our browser bar.

29007
00:07:48,020 --> 00:07:51,290
So here's the latitude which we'll paste in here

29008
00:07:51,620 --> 00:07:55,940
and here's the longitude which we'll paste in here.

29009
00:07:57,530 --> 00:08:01,040
So now let's hit enter and you can see there our JSON Awesome

29010
00:08:01,040 --> 00:08:05,750
Viewer which we installed at the beginning of today's lessons is now active

29011
00:08:06,020 --> 00:08:10,760
and it's showing us all of this data in a much nicer format.

29012
00:08:11,720 --> 00:08:16,720
So we can see that this sunrise time that we're interested in is the value for the

29013
00:08:16,730 --> 00:08:21,260
key sunrise which is then inside of another key called results.

29014
00:08:22,400 --> 00:08:26,900
So we can use these two keys to pull out these specific pieces of data that

29015
00:08:26,900 --> 00:08:29,960
we're interested in. So we can get the sunrise

29016
00:08:29,990 --> 00:08:34,070
which is equal to data, and then square brackets

29017
00:08:34,130 --> 00:08:35,330
we put in the first key

29018
00:08:35,440 --> 00:08:37,570
which is results

29019
00:08:37,720 --> 00:08:40,960
with an s and then we can add the next key

29020
00:08:40,990 --> 00:08:42,760
which is sunrise.

29021
00:08:43,360 --> 00:08:47,290
And we can do the same thing for the sunset time.

29022
00:08:48,910 --> 00:08:53,590
And now if we print out our sunrise or our sunset time,

29023
00:08:53,860 --> 00:08:58,110
you can see its actually the exact piece of information that we're interested

29024
00:08:58,110 --> 00:09:02,010
in. Notice how this data is formatted

29025
00:09:02,520 --> 00:09:06,480
and it's giving us the time in a 12-hour format.

29026
00:09:06,810 --> 00:09:09,960
So it's going to have AM or PM tagged on at the end.

29027
00:09:10,650 --> 00:09:15,650
Now what we want to do is we want to be able to get the current time so we can

29028
00:09:16,590 --> 00:09:21,590
use the datetime module. From the datetime module, we'll import the date

29029
00:09:23,040 --> 00:09:24,000
time in class.

29030
00:09:24,480 --> 00:09:29,480
And then we can get the time now by tapping into that class and then calling the

29031
00:09:31,290 --> 00:09:32,310
now method.

29032
00:09:33,000 --> 00:09:38,000
But you'll notice that the format of time now is very different from our sunrise

29033
00:09:38,940 --> 00:09:42,060
and sunset time. Our sunrise and sunset time

29034
00:09:42,090 --> 00:09:44,370
are in the 12 hour format

29035
00:09:44,700 --> 00:09:49,500
whereas the time that we're getting back from datetime is in a 24-hour clock

29036
00:09:49,710 --> 00:09:50,543
format.

29037
00:09:51,150 --> 00:09:55,860
So how can we change this data that we're getting back from the sunrise and

29038
00:09:55,860 --> 00:09:58,950
sunset API? Well, back to the API

29039
00:09:58,950 --> 00:10:03,360
we go. Notice in one of the parameters, there is a parameter called

29040
00:10:03,630 --> 00:10:06,810
formatted which is an optional parameter,

29041
00:10:07,260 --> 00:10:10,770
but it can be turned off or on.

29042
00:10:11,310 --> 00:10:12,540
On is by default,

29043
00:10:12,660 --> 00:10:17,660
which means it's going to format it in a particular way with the 12-hour clock.

29044
00:10:18,330 --> 00:10:20,940
But if you switch off the formatting,

29045
00:10:21,330 --> 00:10:26,330
then it will give you the Unix time in this particular format and this will be a

29046
00:10:28,470 --> 00:10:33,270
24-hour clock. So here's your challenge.

29047
00:10:33,690 --> 00:10:38,690
Go ahead and change the parameters that you have and make sure that the data

29048
00:10:39,510 --> 00:10:44,070
that we get back is not formatted, so it's set to zero.

29049
00:10:44,610 --> 00:10:49,350
Pause the video and complete this challenge. Alright,

29050
00:10:49,590 --> 00:10:54,590
all we have to do is to add one more parameter to this dictionary and the

29051
00:10:54,630 --> 00:10:59,630
parameter must have a key that matches the one specified in the documentation,

29052
00:11:00,480 --> 00:11:05,070
so I'm just going to copy that over, and then we're going to set this to 0

29053
00:11:05,100 --> 00:11:08,790
for off. So now if we rerun our code,

29054
00:11:08,970 --> 00:11:13,050
you can see the data we're getting back is now in Unix time

29055
00:11:13,260 --> 00:11:16,320
which is a 12-hour format time.

29056
00:11:16,920 --> 00:11:19,620
So currently where I am in London

29057
00:11:20,070 --> 00:11:25,050
the sunrise time is actually quite early, it's at four o'clock in the morning.

29058
00:11:25,590 --> 00:11:28,500
So notice how the first part is the date

29059
00:11:28,830 --> 00:11:32,220
and then we have a T and then after that we've got the time.

29060
00:11:33,420 --> 00:11:38,070
What we want to be able to do is to compare this part from our sunrise

29061
00:11:38,070 --> 00:11:42,750
sunset API against this part from our datetime API.

29062
00:11:43,170 --> 00:11:47,730
So how can we just isolate the hour number from each of these?

29063
00:11:48,930 --> 00:11:52,500
Well, we can use a Python method called split,

29064
00:11:53,320 --> 00:11:55,030
and you've seen this before.

29065
00:11:55,360 --> 00:12:00,360
Basically you have to provide a separator and it will split a string by that

29066
00:12:01,960 --> 00:12:06,760
separator creating a list. So if you click on this, try this yourself,

29067
00:12:07,030 --> 00:12:12,030
you can see that this string becomes this list by splitting that string with the

29068
00:12:13,630 --> 00:12:17,080
pound sign separator. Now, in our case,

29069
00:12:17,110 --> 00:12:21,550
the separator that we want to separate by is firstly,

29070
00:12:21,610 --> 00:12:23,620
to split it by this T,

29071
00:12:24,220 --> 00:12:29,220
which is going to give us this part as the first item in the list and this part

29072
00:12:29,770 --> 00:12:31,330
as the second item in the list.

29073
00:12:31,900 --> 00:12:36,900
And then we can take the second part and then split it by the colon and then we can

29074
00:12:37,150 --> 00:12:41,080
get this first part of the list. So here's how we would do it.

29075
00:12:41,590 --> 00:12:44,650
So we can say sunrise.split

29076
00:12:45,340 --> 00:12:49,270
and then the separator we want to use was that capital T.

29077
00:12:49,930 --> 00:12:51,340
Now if I hit print,

29078
00:12:51,370 --> 00:12:56,370
you can see we've got a list that is now separated with two things on either

29079
00:12:57,040 --> 00:13:01,360
side of the T. So let me just comment out the time now

29080
00:13:01,660 --> 00:13:05,320
and we've got the sunrise and the sunrise split next to each other.

29081
00:13:05,770 --> 00:13:07,300
So that T is removed

29082
00:13:07,450 --> 00:13:11,770
and the two things on either side have become two items in our list.

29083
00:13:12,460 --> 00:13:14,740
Now we want to split this part further.

29084
00:13:15,130 --> 00:13:19,330
We can get this item by tapping into the item at index one,

29085
00:13:19,360 --> 00:13:20,193
so 0, 1,

29086
00:13:20,740 --> 00:13:25,480
and then we can split this even further by tagging on another split function.

29087
00:13:26,200 --> 00:13:31,120
Here, we can split it by the colon. So let's go ahead 

29088
00:13:31,120 --> 00:13:32,980
and provide that as the input.

29089
00:13:33,610 --> 00:13:38,610
And now you can see the result we get back is this. We've split the part that

29090
00:13:40,330 --> 00:13:44,560
comes after the T by the colon and we've got 04,

29091
00:13:44,560 --> 00:13:47,860
03, 32+00, and then 00.

29092
00:13:48,310 --> 00:13:50,200
This is clearly the item we want

29093
00:13:50,230 --> 00:13:53,890
so all we have to do is just to add a zero at the end.

29094
00:13:54,490 --> 00:13:56,650
And now we've got the actual 

29095
00:13:56,740 --> 00:14:01,420
hour in the 24-hour clock formatted from our sunrise time.

29096
00:14:02,260 --> 00:14:03,700
You could in fact,

29097
00:14:03,760 --> 00:14:08,760
just simply take all of this part after the sunrise and tag it onto the end of

29098
00:14:08,950 --> 00:14:13,950
this line and also this line so that we actually get the sunrise and sunset

29099
00:14:14,350 --> 00:14:19,000
times in terms of the 24-hour clock, like this.

29100
00:14:20,380 --> 00:14:25,380
Now we're perfectly poised to start comparing it against the time that we're

29101
00:14:26,230 --> 00:14:27,310
getting right now.

29102
00:14:27,970 --> 00:14:32,740
So we can take our time now and tap into the actual hour,

29103
00:14:33,310 --> 00:14:37,300
and you can see now that we've got our sunrise, which is this first number,

29104
00:14:37,630 --> 00:14:39,730
sunset, which is the second number,

29105
00:14:40,120 --> 00:14:45,120
and the third number is the current clock time in terms of the 24-hour clock.

29106
00:14:46,540 --> 00:14:49,810
So in order to figure out whether if it is day or night,

29107
00:14:50,110 --> 00:14:54,200
all we have to do is compare this number against these other two.

29108
00:14:55,160 --> 00:14:56,360
Now in the next lesson,

29109
00:14:56,390 --> 00:15:00,920
we're going to finish off this project and put everything together in order to

29110
00:15:00,920 --> 00:15:05,870
get an email when the ISS is passing overhead and it's currently nighttime.

29111
00:15:06,320 --> 00:15:08,630
So for all of that and more, I'll see you there.


29112
00:00:00,180 --> 00:00:03,390
All right. Congratulations on reaching the final project for the day.

29113
00:00:03,719 --> 00:00:08,010
Head on over to the course resources and download the starting files for the ISS

29114
00:00:08,039 --> 00:00:09,900
overhead notifier project.

29115
00:00:10,650 --> 00:00:13,230
If you followed along with all the lessons today,

29116
00:00:13,290 --> 00:00:18,290
then you've seen how we can get data from a particular API by simply just

29117
00:00:19,860 --> 00:00:24,720
providing an endpoint. So this is the simplest type of API calls.

29118
00:00:25,500 --> 00:00:30,450
And then you saw how we could pass, along with the API call, a set of parameters

29119
00:00:30,720 --> 00:00:35,720
in the form of a Python dictionary in order to get a specific piece of data that

29120
00:00:35,760 --> 00:00:40,320
we want based on the parameters that we pass over. So in this case,

29121
00:00:40,320 --> 00:00:44,220
it was the sunrise and sunset time of our local area.

29122
00:00:45,150 --> 00:00:45,930
Now later on,

29123
00:00:45,930 --> 00:00:50,340
I showed you how we can split the string that we get back from the sunrise and

29124
00:00:50,340 --> 00:00:54,840
sunset times in order to get the particular numbers that we're interested in,

29125
00:00:55,140 --> 00:01:00,140
which is the time of the sunrise and sunset in the 24-hour clock format.

29126
00:01:01,290 --> 00:01:03,450
Now it's time to put all of this together.

29127
00:01:03,720 --> 00:01:08,370
If the ISS is close to my current position and it's currently dark,

29128
00:01:08,430 --> 00:01:13,140
so basically it's nighttime, then send me an email to tell me to look up.

29129
00:01:13,650 --> 00:01:17,310
That's the objective of the challenge. However, as a bonus challenge,

29130
00:01:17,460 --> 00:01:21,480
see if you can further modify the code so that it runs every 60 seconds

29131
00:01:21,600 --> 00:01:23,400
if the ISS is overhead.

29132
00:01:24,300 --> 00:01:29,130
These are the three things that we need to achieve. And just as a quick tip

29133
00:01:29,130 --> 00:01:30,240
before you get started,

29134
00:01:30,540 --> 00:01:35,540
remember that the sunrise and sunset times are both in the format of strings.

29135
00:01:36,630 --> 00:01:40,650
So if you want to be able to work with them to compare to time

29136
00:01:40,650 --> 00:01:44,760
now, you also have to change this to an integer.

29137
00:01:45,900 --> 00:01:50,520
Now, the second tip I've got is that the ISS position,

29138
00:01:50,580 --> 00:01:54,840
the longitude and latitude that you get back, will be decimal numbers,

29139
00:01:55,110 --> 00:01:57,360
but it is currently in the format of a string.

29140
00:01:57,750 --> 00:02:01,500
So you'll need to convert that into a floating-point number

29141
00:02:01,830 --> 00:02:06,660
if you want to compare it against your current position. Now,

29142
00:02:06,690 --> 00:02:09,449
when we're checking whether if the ISS is overhead,

29143
00:02:09,660 --> 00:02:14,070
we want to have a margin of error. It doesn't have to be right above me,

29144
00:02:14,460 --> 00:02:19,380
precise to this number of decimal points. It can be plus or minus five.

29145
00:02:19,380 --> 00:02:24,380
So if the ISS's latitude with anywhere between say 56 and,

29146
00:02:24,990 --> 00:02:28,890
um, 51 minus five, which is 46,

29147
00:02:29,190 --> 00:02:32,940
then that's perfectly fine. That means I'll still be able to see it.

29148
00:02:33,510 --> 00:02:37,380
Take a look and find your own latitude and your own longitude

29149
00:02:37,740 --> 00:02:42,120
and see if you can figure out how to compare that against the ISS's a latitude

29150
00:02:42,120 --> 00:02:46,980
and longitude and adding in that degree of error. In fact,

29151
00:02:47,010 --> 00:02:51,450
consider creating a function that returns true if your position is within plus five

29152
00:02:51,780 --> 00:02:56,280
or minus five degrees of the ISS position and false otherwise.

29153
00:02:57,150 --> 00:03:02,150
So you should now have all the capabilities to complete this challenge.

29154
00:03:02,740 --> 00:03:03,573
Pause the video,

29155
00:03:03,880 --> 00:03:07,570
give that a little bit of a think and see if you can complete the challenge.

29156
00:03:08,970 --> 00:03:09,803
Thank you.

29157
00:03:12,600 --> 00:03:13,140
All right. What

29158
00:03:13,140 --> 00:03:18,140
we want to do up here is we wanna compare the ISS's position against our

29159
00:03:19,140 --> 00:03:20,580
position. Now,

29160
00:03:20,580 --> 00:03:25,580
what we want to check is to see if our position is within plus or minus five

29161
00:03:27,570 --> 00:03:32,250
degrees of the ISS position. So let's take one part of that position,

29162
00:03:32,280 --> 00:03:33,810
the ISS's latitude

29163
00:03:34,350 --> 00:03:38,670
and we want to check to see if it is close to my latitude.

29164
00:03:39,300 --> 00:03:41,550
If my latitude is currently 51,

29165
00:03:41,910 --> 00:03:45,210
then 51 minus five would be 46.

29166
00:03:45,570 --> 00:03:50,570
So we can check to see if 46 is less than or equal to the ISIS latitude.

29167
00:03:51,540 --> 00:03:56,130
And then if the ISS latitude is less than or equal to 51 plus five,

29168
00:03:56,130 --> 00:03:59,520
which is 56. Then if this is true,

29169
00:03:59,760 --> 00:04:03,810
it means that this value is in between these two values.

29170
00:04:04,260 --> 00:04:07,920
So let's replace these numbers with my actual latitude.

29171
00:04:08,280 --> 00:04:10,260
So MY_LAT - 5

29172
00:04:10,560 --> 00:04:13,440
and then MY_LAT + 5.

29173
00:04:15,150 --> 00:04:19,350
And then we have to make sure that it's also true for the longitude.

29174
00:04:19,709 --> 00:04:21,720
So we're going to do basically the same thing,

29175
00:04:21,720 --> 00:04:24,120
but this time using my longitude.

29176
00:04:24,450 --> 00:04:29,100
So in my longitude minus five is less than or equal to the ISS's longitude

29177
00:04:29,580 --> 00:04:30,990
and the ISS longitude

29178
00:04:31,010 --> 00:04:35,190
should be less than or equal to my longitude plus five.

29179
00:04:35,850 --> 00:04:37,740
If both of these things are true,

29180
00:04:37,770 --> 00:04:42,660
then my position is pretty much within plus or minus five degrees of the ISS.

29181
00:04:44,550 --> 00:04:48,030
At this point, I should probably create some sort of a function for this.

29182
00:04:48,030 --> 00:04:52,380
So I could say is_iss_overhead.

29183
00:04:53,520 --> 00:04:58,260
And I can indent all of this into that function.

29184
00:04:58,620 --> 00:05:02,610
And if this happens to be true, I'm going to return true.

29185
00:05:03,660 --> 00:05:05,460
This part deals with checking

29186
00:05:05,490 --> 00:05:09,990
whether if the ISS is at a similar position to my position,

29187
00:05:10,620 --> 00:05:14,250
the next part deals with figuring out whether if it's nighttime or not.

29188
00:05:14,790 --> 00:05:15,540
So again,

29189
00:05:15,540 --> 00:05:20,190
let's create a function and I'll call it is_night.

29190
00:05:21,330 --> 00:05:26,190
And this function is going to return true when it is actually nighttime. In

29191
00:05:26,190 --> 00:05:28,290
order to figure out whether if it is nighttime,

29192
00:05:28,890 --> 00:05:33,870
then we're going to get a response - so there's a typo there -

29193
00:05:36,210 --> 00:05:40,020
from our request to the sunrise-sunset API

29194
00:05:40,290 --> 00:05:44,400
passing in all of these parameters which contain my current location.

29195
00:05:44,970 --> 00:05:46,860
And then from the data we get back,

29196
00:05:46,890 --> 00:05:51,330
we figure out the sunrise and sunset time by formatting that string

29197
00:05:51,600 --> 00:05:53,820
and then turning it into an integer

29198
00:05:54,090 --> 00:05:59,090
which is going to represent the current hour in the 24-hour time format.

29199
00:05:59,870 --> 00:06:01,670
So then we figure out, well,

29200
00:06:01,670 --> 00:06:06,200
what is the current time using the datetime module?

29201
00:06:06,680 --> 00:06:09,080
And we can check to see, well,

29202
00:06:09,350 --> 00:06:14,350
if the time now is greater than or equal to the sunset time,

29203
00:06:14,900 --> 00:06:18,470
or if the time now is less than or equal to the sunrise time,

29204
00:06:18,770 --> 00:06:20,420
then it means it's dark.

29205
00:06:22,550 --> 00:06:27,550
So now we're getting a warning telling us that this time now is a datetime

29206
00:06:28,280 --> 00:06:33,080
object, but the sunset and sunrise are whole numbers or integers.

29207
00:06:33,680 --> 00:06:37,340
So what's happened well? Datetime now is, in fact,

29208
00:06:37,370 --> 00:06:38,960
the current date and time,

29209
00:06:39,320 --> 00:06:44,320
but what we actually want is the current hour and that converts it into an

29210
00:06:44,360 --> 00:06:46,670
integer making this comparison valid.

29211
00:06:47,270 --> 00:06:50,360
So if it is currently nighttime,

29212
00:06:50,600 --> 00:06:55,370
then we're going to return true. And if the ISS is overhead,

29213
00:06:55,430 --> 00:07:00,290
then we're also going to return true. So now we've done these two parts,

29214
00:07:00,410 --> 00:07:04,070
all that's left to do is once both of these things are true

29215
00:07:04,430 --> 00:07:08,060
we can send ourselves an email to tell us to look up.

29216
00:07:08,660 --> 00:07:13,660
So if the ISS is overhead and it is currently nighttime,

29217
00:07:15,260 --> 00:07:18,020
then we're going to initiate our email sending

29218
00:07:18,110 --> 00:07:21,020
which is going to require our smtplib.

29219
00:07:21,590 --> 00:07:25,850
And I'm also going to add my email and password as constants up here.

29220
00:07:27,950 --> 00:07:30,230
And now we can create our connection

29221
00:07:33,050 --> 00:07:35,630
and I'm using again a Gmail server.

29222
00:07:35,660 --> 00:07:40,340
So it's going to be smtp.gmail.com.

29223
00:07:40,790 --> 00:07:44,450
So we went through all of this when we talked about email in detail.

29224
00:07:44,720 --> 00:07:46,850
So I won't waste time talking about it again,

29225
00:07:47,680 --> 00:07:48,513
right?

29226
00:07:50,080 --> 00:07:55,080
I'm going to send this email from my own address and also to my own address

29227
00:07:55,780 --> 00:08:00,780
because after all I'm just making a notification for myself. And the message in this

29228
00:08:02,080 --> 00:08:07,080
case is going to have the subject line of look up and I can even add an emoji

29229
00:08:09,910 --> 00:08:10,743
here.

29230
00:08:12,970 --> 00:08:16,570
And then the content is going to say

29231
00:08:16,570 --> 00:08:20,740
The ISS is above you in the sky.

29232
00:08:22,780 --> 00:08:25,690
That's it. That's all there is to this. Now,

29233
00:08:25,720 --> 00:08:30,220
it'd be quite hard to test this code because we have to wait for the perfect

29234
00:08:30,250 --> 00:08:35,250
condition before all of these things will actually be true. While this is the end

29235
00:08:36,190 --> 00:08:37,600
of the challenge for you,

29236
00:08:37,900 --> 00:08:41,380
there's one thing I want to change with this code to make it a little bit

29237
00:08:41,380 --> 00:08:42,212
better.

29238
00:08:42,429 --> 00:08:46,450
We can actually put this if statement inside a while loop.

29239
00:08:46,900 --> 00:08:50,380
So we could say while true,

29240
00:08:50,440 --> 00:08:53,860
which means this loop is going to go again and again, and again,

29241
00:08:53,890 --> 00:08:56,730
checking if the ISS is overhead and it's at night.

29242
00:08:57,090 --> 00:09:00,750
Now this is going to happen quite frequently because its in a while loop,

29243
00:09:01,050 --> 00:09:04,260
but we can slow it down by using the time module.

29244
00:09:04,590 --> 00:09:09,590
So we could import the time module and then say time.sleep

29245
00:09:11,130 --> 00:09:11,630
and we can get

29246
00:09:11,630 --> 00:09:16,630
it to sleep for 60 seconds or however much long you want to wait between

29247
00:09:17,480 --> 00:09:20,990
running the script. So now if you hit run,

29248
00:09:21,740 --> 00:09:25,850
you won't see that final code where it tells you that your program is done

29249
00:09:25,850 --> 00:09:26,683
running.

29250
00:09:26,780 --> 00:09:31,400
It's actually continuously running in the background and it's going to execute

29251
00:09:31,400 --> 00:09:33,800
this code every 60 seconds.

29252
00:09:34,160 --> 00:09:37,250
So as long as you have your computer on and this is running,

29253
00:09:37,610 --> 00:09:41,180
then you can run this for a whole 24 hours. And I'll bet you

29254
00:09:41,180 --> 00:09:42,290
at some point in the night,

29255
00:09:42,320 --> 00:09:46,070
you'll get two or three emails telling you that the ISS is overhead.

29256
00:09:46,280 --> 00:09:50,600
So all you have to monitor is just to switch your notifications on on your phone

29257
00:09:50,990 --> 00:09:54,530
and when that email comes in to look up into the sky.

29258
00:09:55,850 --> 00:09:58,760
So I hope you enjoyed building this project with me

29259
00:09:58,880 --> 00:10:02,240
and I hope that you're going to be able to spot the ISS tonight.

29260
00:10:02,900 --> 00:10:05,930
If you do, take a video and let us know what it looks like.



29261
00:00:00,300 --> 00:00:00,930
Hey guys,

29262
00:00:00,930 --> 00:00:05,930
it's Angela here and welcome to Day 34 of 100 Days of Code. Today

29263
00:00:07,410 --> 00:00:09,510
we're going to be doing a little bit of review,

29264
00:00:09,870 --> 00:00:14,870
and we're going to be working with a trivia API to create a quiz app called

29265
00:00:15,360 --> 00:00:16,193
Quizzler.

29266
00:00:16,590 --> 00:00:21,590
Now we're going to be using a API that we've seen before a long time ago called

29267
00:00:22,170 --> 00:00:23,790
the open trivia database,

29268
00:00:23,940 --> 00:00:27,840
which contains over 3000 verified questions

29269
00:00:28,170 --> 00:00:33,170
which we can pick from randomly to fill into our quiz application.

29270
00:00:34,320 --> 00:00:34,590
Now,

29271
00:00:34,590 --> 00:00:39,590
the purpose of building this app is to review what we learned about using API

29272
00:00:40,170 --> 00:00:45,170
endpoints and sending requests to a particular end point to ask for some piece

29273
00:00:46,410 --> 00:00:47,243
of data.

29274
00:00:47,550 --> 00:00:51,300
And we're also going to be looking at what we learned about API parameters,

29275
00:00:51,570 --> 00:00:56,340
switching in and switching out different inputs in order to get different pieces

29276
00:00:56,340 --> 00:01:00,390
of data from the API. And with those things combined,

29277
00:01:00,450 --> 00:01:03,330
we're going to be able to build our Quizzler app

29278
00:01:03,780 --> 00:01:06,450
which is going to be built using tkinter.

29279
00:01:06,990 --> 00:01:08,760
So this is what it's going to look like,

29280
00:01:08,820 --> 00:01:13,820
and we're able to keep track of our score and see the true/false question 

29281
00:01:14,220 --> 00:01:17,460
show up in the middle and then we can select true or false.

29282
00:01:18,060 --> 00:01:22,080
So I have no idea what the answer to this is. So I'm just going to guess.

29283
00:01:23,210 --> 00:01:28,040
Oops! Maybe not. Um, the

29284
00:01:28,130 --> 00:01:32,120
vapor produced by e-cigarettes is actually water. I think so. Nope.

29285
00:01:32,780 --> 00:01:37,250
I am really bad at this quiz so I'm just going to guess from now on.

29286
00:01:38,750 --> 00:01:41,750
So there you go. I got one right and my score went up.

29287
00:01:42,290 --> 00:01:45,020
This is a computer related question, so I know that one.

29288
00:01:46,190 --> 00:01:48,650
But essentially this is what we're going to be building.

29289
00:01:48,800 --> 00:01:53,240
And the questions that we're answering here come from the open trivia database

29290
00:01:53,480 --> 00:01:55,760
which contains loads of questions.

29291
00:01:55,760 --> 00:02:00,760
So we don't have to make up the questions and we can even select which category

29292
00:02:01,580 --> 00:02:05,930
of questions we want and also how many questions we want

29293
00:02:06,260 --> 00:02:10,280
and we're going to use this API to populate the questions in our quiz

29294
00:02:10,280 --> 00:02:12,890
application. That's what we're going to be building.

29295
00:02:13,040 --> 00:02:14,900
So if you head over to the next lesson,

29296
00:02:15,140 --> 00:02:17,780
we'll get started by tapping into that API.


29297
00:00:00,570 --> 00:00:05,570
To begin, head over to the course resources as always and download the starting 

29298
00:00:06,060 --> 00:00:10,200
zip file for today's starting project. And once you've done that,

29299
00:00:10,200 --> 00:00:14,910
go ahead and unzip the file and open it up inside PyCharm. Now,

29300
00:00:14,940 --> 00:00:17,790
if we take a look inside the project folder,

29301
00:00:17,910 --> 00:00:20,430
you can see we've got a bunch of images

29302
00:00:20,730 --> 00:00:23,550
which is going to be used for the buttons,

29303
00:00:24,060 --> 00:00:29,060
and we've also got a lot of the code that we had created in our previous quiz

29304
00:00:30,540 --> 00:00:34,650
project. It may seem like it was a long time ago,

29305
00:00:34,770 --> 00:00:36,720
but back in day 17

29306
00:00:36,990 --> 00:00:41,990
we learned about creating classes and the project that we built to do that was a

29307
00:00:42,570 --> 00:00:45,270
text based quiz. And in fact,

29308
00:00:45,300 --> 00:00:49,740
once you've downloaded and opened up the starting file for today's project,

29309
00:00:50,010 --> 00:00:52,080
you can actually run this program.

29310
00:00:52,470 --> 00:00:55,500
So open up main.py and run it.

29311
00:00:55,770 --> 00:01:00,770
Then you can see the original format of the quiz application in action

29312
00:01:01,590 --> 00:01:06,000
inside the console. We can type true or false,

29313
00:01:07,170 --> 00:01:10,530
and it will give us some feedback, whether if we got it right

29314
00:01:10,560 --> 00:01:13,950
or whether if we got it wrong and also our current score.

29315
00:01:16,020 --> 00:01:18,720
Now this was great on day 17,

29316
00:01:18,810 --> 00:01:23,490
but now that we know all about creating graphical user interfaces using tkinter

29317
00:01:23,970 --> 00:01:27,840
as well as a whole bunch of things that we've learned about APIs just now, we're

29318
00:01:27,840 --> 00:01:31,560
going to upgrade this quiz app to the next level.

29319
00:01:32,700 --> 00:01:35,610
The first thing we want to upgrade is at the moment,

29320
00:01:35,640 --> 00:01:37,920
these questions are hard-coded.

29321
00:01:38,220 --> 00:01:40,920
So inside our data.py,

29322
00:01:41,220 --> 00:01:46,220
you can see all of these questions as a list of dictionary objects.

29323
00:01:46,800 --> 00:01:48,660
And at the time,

29324
00:01:48,960 --> 00:01:52,590
the place where we got all of these questions from was in fact,

29325
00:01:52,620 --> 00:01:54,510
the open trivia database.

29326
00:01:54,900 --> 00:01:59,010
But what we did here is we selected the number of questions we wanted,

29327
00:01:59,340 --> 00:02:01,890
we selected the category that we wanted,

29328
00:02:02,220 --> 00:02:07,170
and then we changed the type to true and false and we said, generate API URL.

29329
00:02:07,590 --> 00:02:09,780
And then once that URL is generated,

29330
00:02:10,080 --> 00:02:15,080
all we did was we put it into our  browser and we got this data and we put it

29331
00:02:15,810 --> 00:02:18,960
into our question data. Now,

29332
00:02:18,990 --> 00:02:22,710
this, being hard-coded, is obviously never going to change.

29333
00:02:23,220 --> 00:02:28,220
So what we want to do instead is we want to get 10 questions from the open

29334
00:02:29,040 --> 00:02:30,090
trivia database,

29335
00:02:30,720 --> 00:02:35,720
but this time we want to make a request to the API so that we always get

29336
00:02:36,480 --> 00:02:39,360
different questions and different answers.

29337
00:02:40,710 --> 00:02:45,710
The idea of this challenge is to modify the code in the data.py file to get 10

29338
00:02:46,380 --> 00:02:51,210
new questions using the open trivia database every time the program is run.

29339
00:02:51,750 --> 00:02:55,140
Here's what your code should do after you've successfully completed the

29340
00:02:55,140 --> 00:02:59,860
challenge. You'll still get a console based quiz, but this time,

29341
00:02:59,890 --> 00:03:04,890
the text and the correct answer came from the open trivia database via an API

29342
00:03:05,470 --> 00:03:06,303
call.

29343
00:03:06,310 --> 00:03:10,120
You'll see that any symbol like single double quotes will not be displayed

29344
00:03:10,120 --> 00:03:11,230
correctly just yet,

29345
00:03:11,500 --> 00:03:15,520
but getting the API call working is the first step and the goal of this

29346
00:03:15,520 --> 00:03:16,353
challenge.

29347
00:03:17,050 --> 00:03:22,050
So what I want you to do is to set the number of questions to 10 and leave the

29348
00:03:22,330 --> 00:03:25,480
category as blank, leave the difficulty is blank,

29349
00:03:25,780 --> 00:03:30,780
but make sure that the type is set to true-false and then generate this API URL.

29350
00:03:32,830 --> 00:03:37,830
Now remember what I said before that the API end point is everything before the

29351
00:03:38,920 --> 00:03:43,360
question mark. So this is the base URL that we're going to be working with.

29352
00:03:43,810 --> 00:03:47,500
And then after the question mark, we've got our different parameters.

29353
00:03:47,890 --> 00:03:50,290
So we've got a parameter called amount

29354
00:03:50,350 --> 00:03:55,030
which is set to 10, and we've got another parameter called type

29355
00:03:55,270 --> 00:03:57,340
which is set to the word boolean.

29356
00:03:57,940 --> 00:04:01,270
So you are going to have to think back to what you learned in yesterday's

29357
00:04:01,270 --> 00:04:02,103
lessons

29358
00:04:02,320 --> 00:04:07,320
and use the requests module to make a request to this API and passing in the

29359
00:04:09,940 --> 00:04:11,740
required parameters.

29360
00:04:12,250 --> 00:04:16,240
And then once you've generated the data from that API,

29361
00:04:16,660 --> 00:04:21,660
then I want you to make sure that you reach into the data that you get back and

29362
00:04:21,760 --> 00:04:24,970
grab the data that is in this format.

29363
00:04:25,690 --> 00:04:30,310
And we're going to replace this question_data with the actual questions that we

29364
00:04:30,310 --> 00:04:33,520
get from the open trivia database API.

29365
00:04:34,060 --> 00:04:38,020
When we make the request to the API in our browser,

29366
00:04:38,410 --> 00:04:41,140
we get back something that looks like this.

29367
00:04:41,560 --> 00:04:45,610
So we have a two item dictionary; one is the response code,

29368
00:04:45,940 --> 00:04:47,590
and one is the results.

29369
00:04:47,920 --> 00:04:52,920
Now the value for this key results is the list of dictionary objects that we

29370
00:04:54,310 --> 00:04:58,540
actually want and it looks very similar in structure to this.

29371
00:04:58,930 --> 00:05:03,220
So that is what we want. So everything inside here, basically.

29372
00:05:03,970 --> 00:05:08,950
Now we're going to still call it question_data because elsewhere in our main.py

29373
00:05:08,950 --> 00:05:11,680
we're tapping into this data here.

29374
00:05:12,160 --> 00:05:13,990
So make sure you name it the same.

29375
00:05:14,170 --> 00:05:17,410
And once you've done this successfully,

29376
00:05:17,710 --> 00:05:21,370
then you should be able to comment out all of this code here,

29377
00:05:24,480 --> 00:05:25,050
right?

29378
00:05:25,050 --> 00:05:30,050
And then simply run the program from main.py without any changes

29379
00:05:30,840 --> 00:05:32,220
and it should still work

29380
00:05:32,430 --> 00:05:37,350
but this time it should be using the questions and answers that you fetched from

29381
00:05:37,350 --> 00:05:42,030
the API. This is a challenge for you. So I want you to pause the video,

29382
00:05:42,090 --> 00:05:46,080
have a think about how you might do that and complete the challenge.


29383
00:00:00,990 --> 00:00:01,350
All right.

29384
00:00:01,350 --> 00:00:06,350
So the first thing we need to do that we learnt in order to work with APIs is to

29385
00:00:06,510 --> 00:00:08,910
import the requests module.

29386
00:00:09,390 --> 00:00:11,520
And once we've imported that,

29387
00:00:11,640 --> 00:00:16,640
we need to get a response from the URL that we saw over here.

29388
00:00:18,270 --> 00:00:22,440
As I mentioned, the end point is everything that's before the question mark.

29389
00:00:22,890 --> 00:00:26,760
So let's put that in as the URL for our get request.

29390
00:00:27,270 --> 00:00:30,180
And then in addition, we need to add some parameters.

29391
00:00:30,690 --> 00:00:35,040
So let's make our parameters a Python dictionary,

29392
00:00:35,760 --> 00:00:40,110
and the key must match the key that's shown here

29393
00:00:40,500 --> 00:00:43,830
and the value has to match the value that's given here as well.

29394
00:00:44,250 --> 00:00:46,770
So we've got two keys; amount and type.

29395
00:00:47,220 --> 00:00:49,680
So these are both going to be strings,

29396
00:00:49,710 --> 00:00:53,340
but the values can be numbers if it is appropriate.

29397
00:00:53,850 --> 00:00:58,170
So amount sets the number of questions we want back from the API,

29398
00:00:58,770 --> 00:01:03,270
and then the type sets the type of questions that we want. So in our case,

29399
00:01:03,300 --> 00:01:08,220
we want the boolean data type that matches this exact entry.

29400
00:01:08,520 --> 00:01:11,160
So that way we get back true-false questions.

29401
00:01:11,940 --> 00:01:16,410
Now that we've done that we can use this parameters dictionary as the

29402
00:01:16,410 --> 00:01:17,243
params,

29403
00:01:17,700 --> 00:01:22,700
and then we want our response to raise an exception if there were any errors.

29404
00:01:23,460 --> 00:01:27,750
And then we're going to get our response to give us the data using the JSON

29405
00:01:27,750 --> 00:01:31,290
method. If this is our data,

29406
00:01:31,320 --> 00:01:34,650
let's go ahead and print it and see what it looks like.

29407
00:01:35,100 --> 00:01:40,100
We can run this particular file, data.py, by right-clicking and just saying

29408
00:01:40,170 --> 00:01:44,940
run data. And once it's done, you can see we printed out the data

29409
00:01:45,450 --> 00:01:50,450
and the part that we're interested in is the value of this key results,

29410
00:01:51,300 --> 00:01:55,050
because it contains the list of questions.

29411
00:01:55,590 --> 00:01:59,760
That's the only part we're interested in. So in order to tap into that,

29412
00:02:00,060 --> 00:02:03,750
we have to add a set of square brackets and then pass in the key

29413
00:02:04,260 --> 00:02:08,100
which is called results. So let's put that as the key.

29414
00:02:08,400 --> 00:02:13,400
And now we're fetching all of the items that are the results from this data

29415
00:02:14,430 --> 00:02:19,140
object that we get back. So now, if I run this again, you can see

29416
00:02:19,140 --> 00:02:22,560
we now have a list of question objects

29417
00:02:22,890 --> 00:02:25,080
which each contains a dictionary

29418
00:02:25,350 --> 00:02:29,520
and it looks now pretty much identical to this structure that we had before.

29419
00:02:30,300 --> 00:02:34,890
Now, instead of printing this, we can save it as the question_data.

29420
00:02:36,450 --> 00:02:40,200
So now this question_data and has replaced this question_data,

29421
00:02:40,620 --> 00:02:41,760
and as I mentioned,

29422
00:02:41,790 --> 00:02:46,790
we can run our main.py and it should now work just as it did before.

29423
00:02:49,200 --> 00:02:54,200
But this time it's going to use questions that came from our API.

29424
00:02:54,840 --> 00:02:58,890
The cold war ended with Joseph Stalin's death, true or false.

29425
00:02:59,170 --> 00:03:03,430
I think that's actually false. But notice how

29426
00:03:03,430 --> 00:03:05,830
when we get the data back from the API,

29427
00:03:06,160 --> 00:03:11,160
it's formatted in such a way that we've got certain symbols that have been

29428
00:03:11,290 --> 00:03:14,290
encoded using this particular format

29429
00:03:14,650 --> 00:03:19,650
because all of this is meant to represent a single apostrophe. In the next

29430
00:03:19,900 --> 00:03:20,350
lesson,

29431
00:03:20,350 --> 00:03:25,120
I'm going to show you how we can format the text that we get back to turn this

29432
00:03:25,120 --> 00:03:28,030
encoding into the actual characters

29433
00:03:28,180 --> 00:03:32,650
that it should be. For all of that and more, I'll see you on the next lesson.


29434
00:00:00,630 --> 00:00:01,740
In the last lesson,

29435
00:00:01,800 --> 00:00:06,800
we managed to get our API to work and we got back some live data.

29436
00:00:07,800 --> 00:00:08,910
But when we ran it,

29437
00:00:09,030 --> 00:00:13,500
we saw that some of the texts that we were getting back was formatted really

29438
00:00:13,500 --> 00:00:17,970
strangely with these pound signs and ampersands,

29439
00:00:18,090 --> 00:00:21,290
and it's not the actual text that we see.

29440
00:00:21,920 --> 00:00:24,290
So what's happening here? Well,

29441
00:00:24,380 --> 00:00:28,310
what we're actually seeing here are called HTML entities,

29442
00:00:28,880 --> 00:00:33,880
and there are a way of replacing certain characters in HTML so that it doesn't

29443
00:00:35,060 --> 00:00:38,990
get confused with HTML code. So for example,

29444
00:00:39,020 --> 00:00:44,020
the less than symbol could be a part of HTML code.

29445
00:00:44,600 --> 00:00:48,590
And instead of using that, we have to use the

29446
00:00:48,650 --> 00:00:51,890
< and then semicolon.

29447
00:00:52,850 --> 00:00:55,100
So if we look down this table,

29448
00:00:55,370 --> 00:01:00,370
we can actually see this " actually stands for a double quotation mark.

29449
00:01:01,940 --> 00:01:05,930
And that would make sense cause it's saying "Mario Kart

29450
00:01:05,930 --> 00:01:07,400
64"

29451
00:01:08,060 --> 00:01:11,570
and this #039,

29452
00:01:11,570 --> 00:01:16,570
if we look up in this list, is actually a single quotation mark.

29453
00:01:17,570 --> 00:01:20,960
And that would make sense as well, cause it would be Stalin's death.

29454
00:01:21,740 --> 00:01:26,270
So how do we get hold of the actual human readable text? Well,

29455
00:01:26,420 --> 00:01:30,740
we can use this tool called the free formatter to

29456
00:01:31,160 --> 00:01:36,050
unescape the HTML results that we're getting back from our API.

29457
00:01:36,890 --> 00:01:40,040
I've copied and pasted this part we've got here.

29458
00:01:41,540 --> 00:01:43,790
And if I go ahead and click on unescape,

29459
00:01:44,060 --> 00:01:49,060
you can see that it formats it into the original human readable format

29460
00:01:49,430 --> 00:01:53,480
and now it says in "Mario Kart 64" Waluigi is a playable character.

29461
00:01:54,110 --> 00:01:58,580
And if I paste the cold war ended with Joseph Stalin, blah, blah, blah,

29462
00:01:59,030 --> 00:02:02,120
death and I click unescape, then you can see 

29463
00:02:02,120 --> 00:02:06,500
it says the Cold War ended with Joseph Stalin's death and it replaces that with

29464
00:02:06,560 --> 00:02:08,449
an apostrophe. Now,

29465
00:02:08,449 --> 00:02:13,070
essentially we know what to Google and that's kind of the first step towards

29466
00:02:13,070 --> 00:02:14,240
solving any problem.

29467
00:02:14,720 --> 00:02:18,620
So if you Google for escaping HTML entities in Python,

29468
00:02:18,860 --> 00:02:22,940
then the first result we get in Stack Overflow gives us the answer.

29469
00:02:23,540 --> 00:02:28,340
We have to import the HTML module and use one of the methods in that module

29470
00:02:28,340 --> 00:02:33,110
called unescape in order to unescape the text that we're getting back.

29471
00:02:33,950 --> 00:02:37,790
The part where we're interested in this is in our quiz brain,

29472
00:02:38,270 --> 00:02:42,260
because that's the part what we format it into our user answer.

29473
00:02:43,130 --> 00:02:45,330
Let's change the question

29474
00:02:45,380 --> 00:02:50,380
text to be equal to the self.current_question.text,

29475
00:02:50,870 --> 00:02:52,640
so this part that we have here

29476
00:02:52,970 --> 00:02:57,970
which is being put into our input and we can use this q_text instead.

29477
00:02:59,800 --> 00:03:03,640
But instead of using just the text that we get back from the API,

29478
00:03:03,970 --> 00:03:06,550
we're going to import the HTML module.

29479
00:03:08,550 --> 00:03:08,970
Yeah.

29480
00:03:08,970 --> 00:03:13,970
And we're going to use the method inside this HTML module called unescape

29481
00:03:14,700 --> 00:03:18,150
to unescape this string that we get from the API.

29482
00:03:18,930 --> 00:03:23,700
And now if I run this code again, you can see that this time,

29483
00:03:23,730 --> 00:03:28,730
no matter what is inside the string, say an apostrophe in this case or a double

29484
00:03:31,860 --> 00:03:35,580
quote in this case, they're all being formatted correctly.

29485
00:03:36,780 --> 00:03:37,613
There you have it.

29486
00:03:38,070 --> 00:03:42,270
We started off with some strange characters and after a bit of Googling around,

29487
00:03:42,270 --> 00:03:47,190
we found the solution to turn them into human readable text. Aas a programmer,

29488
00:03:47,220 --> 00:03:49,500
this is a skill that you have to really hone.

29489
00:03:49,800 --> 00:03:53,040
This is something that is going to take you to the next level

29490
00:03:53,250 --> 00:03:55,680
to this intermediate++ level.

29491
00:03:56,010 --> 00:03:59,040
You have to find out solutions to your own problems,

29492
00:03:59,340 --> 00:04:01,020
and Google is your best friend.


29493
00:00:00,210 --> 00:00:04,710
So now that our program works for text-based questions,

29494
00:00:05,160 --> 00:00:10,160
it's time to upgrade this program so that it actually has a graphical user

29495
00:00:10,530 --> 00:00:13,830
interface. You'll notice that in the project folder,

29496
00:00:14,150 --> 00:00:16,790
there is a file called ui.py,

29497
00:00:17,420 --> 00:00:22,160
and this is pretty much empty at the moment, other than a single constant

29498
00:00:22,430 --> 00:00:24,950
which sets the theme color. Now,

29499
00:00:24,950 --> 00:00:28,310
what we're trying to create is something that looks like this.

29500
00:00:28,790 --> 00:00:31,850
So we have some sort of a score board label,

29501
00:00:32,060 --> 00:00:36,110
we have a canvas with a white background,

29502
00:00:36,440 --> 00:00:37,670
and then on the canvas,

29503
00:00:37,700 --> 00:00:42,020
we've got some text in the middle and then we've got a true button and a false

29504
00:00:42,020 --> 00:00:46,820
button each using the true and false images from this folder.

29505
00:00:47,480 --> 00:00:51,680
Now we've seen how we can create graphical user interfaces using tkinter.

29506
00:00:52,130 --> 00:00:55,190
But in this case, we're going to do something a little bit different.

29507
00:00:55,790 --> 00:00:59,060
We're going to create our user interface in tkinter

29508
00:00:59,330 --> 00:01:01,730
but we're going to do it inside a class.

29509
00:01:02,210 --> 00:01:05,870
If you remember from day 17 where this project comes from,

29510
00:01:06,260 --> 00:01:09,170
that was when we learned about Object Oriented Programming,

29511
00:01:09,530 --> 00:01:13,850
and we learned about how to separate out our concerns like

29512
00:01:13,910 --> 00:01:18,110
the part that fetches the data or the part that model each of the questions

29513
00:01:18,380 --> 00:01:22,070
or the part that handles the actual quiz functionality,

29514
00:01:22,430 --> 00:01:27,430
and they are all separated in that own class. In order to create our user

29515
00:01:27,530 --> 00:01:28,280
interface

29516
00:01:28,280 --> 00:01:33,280
we're also going to create our very own class inside this ui.py.

29517
00:01:34,370 --> 00:01:36,710
So it's been a while since we've created classes.

29518
00:01:36,770 --> 00:01:40,910
So I want to do a quick reminder session on how to do that.

29519
00:01:41,330 --> 00:01:45,740
So we use the class keyword and then we provide the name of the class. Now,

29520
00:01:45,770 --> 00:01:48,890
in my case, I'm going to call this the QuizInterface.

29521
00:01:49,550 --> 00:01:54,350
And remember that the way that you name classes is what this is called. Pascal

29522
00:01:54,380 --> 00:01:56,000
case. So a capital letter,

29523
00:01:56,240 --> 00:02:01,240
and then each word is not separated by any underscores or any dashes.

29524
00:02:01,880 --> 00:02:03,170
So this is our class

29525
00:02:03,260 --> 00:02:07,490
and then we're going to create our init inside this class.

29526
00:02:08,060 --> 00:02:10,550
Now, if any of this is unfamiliar to you,

29527
00:02:10,550 --> 00:02:14,660
then make sure that you haven't skipped the lessons on Object Oriented

29528
00:02:14,660 --> 00:02:18,410
Programming and creating and using classes in Python.

29529
00:02:18,740 --> 00:02:21,890
We covered that in day 17. So if you skipped that,

29530
00:02:22,040 --> 00:02:25,580
be sure to head back before you proceed, because otherwise, the rest of this

29531
00:02:25,880 --> 00:02:29,780
is not going to make any sense at all. In our class init,

29532
00:02:29,840 --> 00:02:32,930
we're going to create our user interface.

29533
00:02:33,140 --> 00:02:35,870
So we're going to create all the buttons and all of the layouts.

29534
00:02:36,200 --> 00:02:40,670
And we start off by simply creating our window. Now this time though,

29535
00:02:40,700 --> 00:02:45,380
instead of creating our window as just a simple variable,

29536
00:02:45,710 --> 00:02:48,500
we're going to make it a property of this class.

29537
00:02:48,530 --> 00:02:50,480
So we're going to add self in front of it.

29538
00:02:51,050 --> 00:02:54,710
And then we're going to create it from the tkinter module.

29539
00:02:54,770 --> 00:02:59,180
So let's go ahead and import everything from the tkinter module,

29540
00:03:01,450 --> 00:03:06,450
and let's set our window as a new object from the tk class.

29541
00:03:07,780 --> 00:03:11,920
Next, I'm going to change some aspects of the window. So for example,

29542
00:03:11,920 --> 00:03:16,090
I'm going to change the title. So I'm going to set it to, um,

29543
00:03:16,420 --> 00:03:19,090
Quizzler which is going to be the name of this app.

29544
00:03:19,960 --> 00:03:23,470
We can continued like this inside the init function,

29545
00:03:23,800 --> 00:03:28,510
which remember, is going to be called whenever we create a new object from this

29546
00:03:28,510 --> 00:03:29,343
class.

29547
00:03:29,590 --> 00:03:34,590
This is where we're also going to have our self.window.mainloop

29548
00:03:36,340 --> 00:03:41,080
and that will set our program to run. In order to test this,

29549
00:03:41,140 --> 00:03:43,180
we're going to go back to our main.py

29550
00:03:43,570 --> 00:03:46,000
and we're going to import that class.

29551
00:03:46,180 --> 00:03:49,870
So from ui import the QuizInterface,

29552
00:03:50,290 --> 00:03:53,650
and then we're going to create that QuizInterface down here.

29553
00:03:55,210 --> 00:03:57,010
I'm going to call it the quiz_ui

29554
00:03:57,550 --> 00:04:01,990
and it's going to be initialized from our quiz interface. Now,

29555
00:04:02,020 --> 00:04:04,360
if you remember, when we first learned about 

29556
00:04:04,360 --> 00:04:09,360
tkinter I told you that tkinter works by having this endless loop

29557
00:04:10,810 --> 00:04:13,090
essentially that's called the main loop.

29558
00:04:13,900 --> 00:04:16,630
And this is a bit like a never ending while loop.

29559
00:04:16,899 --> 00:04:21,130
It's constantly checking to see if it needs to update something in the graphical

29560
00:04:21,130 --> 00:04:25,810
user interface, or if the user has interacted with it in some sort of way.

29561
00:04:26,410 --> 00:04:31,270
So it will get confused if you have another while loop somewhere near it.

29562
00:04:31,840 --> 00:04:34,060
So we actually have to comment out this while loop

29563
00:04:34,420 --> 00:04:38,560
if we want this user interface to work properly. Now,

29564
00:04:38,590 --> 00:04:40,810
whenever we want to test out our UI,

29565
00:04:40,840 --> 00:04:44,200
all we have to do is to run our main.py.

29566
00:04:44,860 --> 00:04:46,570
And once it hits this line,

29567
00:04:46,600 --> 00:04:51,340
it's going to create a new object from our QuizInterface over here.

29568
00:04:51,850 --> 00:04:55,090
And once it does that, it's going to hit the init method

29569
00:04:55,420 --> 00:04:57,310
and it's going to create our new GUI.

29570
00:04:57,940 --> 00:05:01,540
You can continue coding up your user interface inside this init

29571
00:05:01,840 --> 00:05:03,880
and it will work just as it did before

29572
00:05:04,030 --> 00:05:08,680
when you created just a very simple tkinter graphical user interface

29573
00:05:08,710 --> 00:05:12,100
application. Here comes the challenging part.

29574
00:05:12,670 --> 00:05:15,790
I want you to create this particular user interface,

29575
00:05:16,300 --> 00:05:21,300
and I've created a slide that shows you all of the padding, the sizing,

29576
00:05:21,610 --> 00:05:23,980
the fonts, the background color,

29577
00:05:24,010 --> 00:05:26,440
and all of the components that go onto this screen.

29578
00:05:27,070 --> 00:05:31,840
I want you to pause the video here and see if you can create this user interface

29579
00:05:32,050 --> 00:05:35,380
inside the init method of the quiz interface class.

29580
00:05:36,070 --> 00:05:38,020
Pause the video now and give that a go.

29581
00:05:38,130 --> 00:05:38,963
Okay.

29582
00:05:42,780 --> 00:05:43,200
All right.

29583
00:05:43,200 --> 00:05:46,770
So we're going to continue where we left off here inside the init method.

29584
00:05:47,190 --> 00:05:50,160
And we already started off our window property

29585
00:05:50,190 --> 00:05:53,100
so we're going to continue making that a little bit better.

29586
00:05:53,490 --> 00:05:56,940
So we're going to call the config method on this self.window,

29587
00:05:57,350 --> 00:06:02,210
and we're going to change the padx and the pady so that we add 20 pixels

29588
00:06:02,210 --> 00:06:05,420
of padding on all four sites. Now,

29589
00:06:05,450 --> 00:06:08,180
the next thing I want to configure is the background color.

29590
00:06:08,540 --> 00:06:10,280
And as I mentioned in this slide,

29591
00:06:10,520 --> 00:06:13,610
we're going to use this theme color that I've already provided here,

29592
00:06:13,940 --> 00:06:16,070
which is a nice sort of midnight blue.

29593
00:06:16,580 --> 00:06:19,040
So I'm going to tap into the background attribute

29594
00:06:19,130 --> 00:06:22,700
and I'm going to set it to this theme color. Now,

29595
00:06:22,730 --> 00:06:25,130
if we go ahead and run our main file,

29596
00:06:25,490 --> 00:06:28,550
then we can see our user interface show up.

29597
00:06:30,830 --> 00:06:32,720
And it's now got the background color

29598
00:06:32,900 --> 00:06:34,940
and it's a little bit bigger because of the padding.

29599
00:06:35,870 --> 00:06:39,800
The next step is to create this label up here,

29600
00:06:39,860 --> 00:06:42,320
which is just a very simple text label.

29601
00:06:42,950 --> 00:06:46,730
So let's go ahead and create it as a property of this class.

29602
00:06:47,000 --> 00:06:48,890
So I'm going to call it the score label,

29603
00:06:49,400 --> 00:06:53,690
and I'm going to create it from the label class of tkinter. I'm going to set

29604
00:06:53,690 --> 00:06:56,300
the text as just Score: 0.

29605
00:06:57,020 --> 00:07:00,050
And I'm going to change the color of this text,

29606
00:07:00,080 --> 00:07:03,410
which is the foreground, to white.

29607
00:07:03,710 --> 00:07:07,580
That way it will actually be able to show up on this dark background.

29608
00:07:08,510 --> 00:07:10,790
Now, in order for this label to show up, we,

29609
00:07:10,790 --> 00:07:13,040
of course, have to give it some sort of layout.

29610
00:07:13,340 --> 00:07:18,020
So we're going to use the grid and I'm going to set the row to zero

29611
00:07:18,050 --> 00:07:21,980
cause it's the very top, and then the column to one.

29612
00:07:22,490 --> 00:07:26,720
So this way it sticks to the right. At this point when we run it,

29613
00:07:26,750 --> 00:07:28,460
because there is no column zero,

29614
00:07:28,760 --> 00:07:32,390
it's still going to be just showing up on the screen on the left.

29615
00:07:33,200 --> 00:07:38,200
And it's also got a white background making it impossible to see the white text.

29616
00:07:39,320 --> 00:07:44,030
Let's go ahead and change the background of this label to the same theme color.

29617
00:07:44,570 --> 00:07:48,890
And that way, when we run it, we actually see our label with its white text.

29618
00:07:49,880 --> 00:07:54,050
That's the label done. And the next step is to create our canvas.

29619
00:07:54,470 --> 00:07:59,470
Remember that our canvas is really useful because it allows us to layer lots of

29620
00:07:59,540 --> 00:08:00,470
things on top of it.

29621
00:08:01,220 --> 00:08:05,120
And we can also set its background and size very easily.

29622
00:08:05,630 --> 00:08:09,890
So we're going to create this canvas from the canvas class and straight away,

29623
00:08:09,890 --> 00:08:11,660
I'm going to set the width and height.

29624
00:08:12,020 --> 00:08:17,020
So the width is going to be 300 and the height is going to be 250

29625
00:08:19,490 --> 00:08:23,600
as we specified in the slide here. In addition,

29626
00:08:23,600 --> 00:08:28,600
I'm going to change the background color to white so that it stands out almost

29627
00:08:28,610 --> 00:08:33,610
like a card on the background. After I've created my canvas,

29628
00:08:33,740 --> 00:08:38,090
I'm going to add some question_text onto the canvas.

29629
00:08:38,299 --> 00:08:43,299
So I'm going to create this as the self.canvas.create_text

29630
00:08:44,750 --> 00:08:48,860
and this is going to have a single attribute called text,

29631
00:08:49,400 --> 00:08:54,400
and I'm going to set the text to say Some Question Text.

29632
00:08:55,110 --> 00:08:58,170
So we don't actually have that at the moment. We'll just put in a placeholder.

29633
00:08:59,040 --> 00:09:02,610
And if you want to, you can actually change the fill color of this text

29634
00:09:02,640 --> 00:09:06,090
which is the color of the text to the theme color as well

29635
00:09:06,210 --> 00:09:09,450
just to make it all matchy matchy. Now, finally,

29636
00:09:09,480 --> 00:09:13,290
we're going to put our canvas onto the screen by giving it a grid.

29637
00:09:13,890 --> 00:09:18,540
And this time we're going to set the row to one, so below the score label,

29638
00:09:18,990 --> 00:09:21,390
and then the column I'm going to set it to zero.

29639
00:09:21,810 --> 00:09:26,810
But then I'm going to set the column span to two so that it starts at column

29640
00:09:27,210 --> 00:09:31,200
zero and spans two columns to column one.

29641
00:09:31,620 --> 00:09:33,630
So now when I run this code,

29642
00:09:33,780 --> 00:09:37,710
I actually get an error and the error is super obscure.

29643
00:09:37,980 --> 00:09:41,520
Tells me tuple index out of range. Now, if you remember

29644
00:09:41,520 --> 00:09:43,050
when we worked with tkinter,

29645
00:09:43,080 --> 00:09:46,470
whenever we add an image or we add something to the canvas,

29646
00:09:46,800 --> 00:09:51,300
we always have to provide a position as the first two arguments.

29647
00:09:51,840 --> 00:09:56,700
And that is the tuple that represents the X and Y position of the text.

29648
00:09:57,000 --> 00:09:58,920
We have to make sure that we don't forget that.

29649
00:09:59,370 --> 00:10:01,500
So the first value is going to be the X,

29650
00:10:01,530 --> 00:10:05,160
so that's going to be half of the width so that it's centered on the canvas.

29651
00:10:05,490 --> 00:10:07,920
So that's 150, half of 300.

29652
00:10:08,280 --> 00:10:13,050
And then the Y is going to be half of 250, which is going to be 125.

29653
00:10:14,430 --> 00:10:15,900
Now, if we run this again,

29654
00:10:15,930 --> 00:10:20,930
hopefully we won't encounter the same error and you can now see this card show

29655
00:10:21,480 --> 00:10:24,330
up and our label show up on the right,

29656
00:10:24,360 --> 00:10:28,920
because its in the second column and this is the first column and this canvas

29657
00:10:28,950 --> 00:10:33,450
spans both columns. Now this text is a little bit small,

29658
00:10:33,450 --> 00:10:38,400
so let's take a look at the slide and see what we need to change it to.

29659
00:10:38,820 --> 00:10:42,810
So we want it to be arial font, 20 point size and italic.

29660
00:10:43,800 --> 00:10:48,800
Let's go ahead and add that to our text. And because its getting a little bit

29661
00:10:48,960 --> 00:10:49,680
crammed in here,

29662
00:10:49,680 --> 00:10:54,680
I'm actually going to put this on two separate lines just so I can read it a

29663
00:10:54,810 --> 00:10:56,790
little bit easier like this.

29664
00:10:58,530 --> 00:11:03,530
Now we can add that font argument and we're going to set it to a tuple with the

29665
00:11:03,570 --> 00:11:05,520
first item being the name of the font

29666
00:11:05,910 --> 00:11:07,770
and then the second is the size of the font

29667
00:11:07,950 --> 00:11:11,940
and finally we'll also make the text italic as well.

29668
00:11:12,450 --> 00:11:16,770
So now lets run that again and you'll see the text is now much bigger and its been

29669
00:11:16,770 --> 00:11:21,770
formatted in the way that we wanted it to. The next thing we want to do is to

29670
00:11:21,930 --> 00:11:25,950
add a bit of padding between this canvas and the score.

29671
00:11:26,400 --> 00:11:31,170
So we want to add 50 points of padding here and probably 50 here as well

29672
00:11:31,170 --> 00:11:36,030
just to push everything a little bit further away from each other. To do that

29673
00:11:36,390 --> 00:11:41,390
all we have to do is the tap into the canvas grid and then add a single pady.

29674
00:11:42,630 --> 00:11:45,330
We don't want to add any more padding on the X axis.

29675
00:11:45,390 --> 00:11:50,040
The original 20 is enough from the window. But we want to add 50

29676
00:11:50,250 --> 00:11:55,250
so that this way the canvas has some padding on the top and the bottom like this. And it

29677
00:11:56,380 --> 00:11:59,290
now looks a little bit more spaced out and easier to read.

29678
00:12:00,370 --> 00:12:01,990
That's pretty much the canvas done.

29679
00:12:02,230 --> 00:12:04,840
The last thing we need to add are the two buttons.

29680
00:12:05,170 --> 00:12:09,910
So we'll add a true button and a false button,

29681
00:12:09,970 --> 00:12:14,970
both created from the button class and neither of them are going to have to any

29682
00:12:15,580 --> 00:12:16,413
text.

29683
00:12:16,420 --> 00:12:21,420
Instead we're going to create a true_image from the PhotoImage class,

29684
00:12:22,420 --> 00:12:25,750
tapping into the file that comes from this folder.

29685
00:12:26,230 --> 00:12:30,460
So it's images/true.png.

29686
00:12:31,060 --> 00:12:34,990
And that is the image that we're going to slot in to this button.

29687
00:12:35,850 --> 00:12:36,683
Right.

29688
00:12:38,130 --> 00:12:39,090
Now. In addition,

29689
00:12:39,090 --> 00:12:43,680
I'm going to set the highlightthickness to zero. This way

29690
00:12:43,680 --> 00:12:46,620
it doesn't have that weird, awkward border around the button.

29691
00:12:47,430 --> 00:12:52,430
And I'm also going to put this button onto the screen using the grid method.

29692
00:12:53,220 --> 00:12:55,830
So now we're onto a row two,

29693
00:12:55,950 --> 00:12:59,580
so below the canvas, and the column

29694
00:12:59,610 --> 00:13:04,140
we're going to set it to column zero. Now, depending on what you prefer,

29695
00:13:04,140 --> 00:13:07,620
you can have the true button on the left or the true button on the right.

29696
00:13:07,890 --> 00:13:11,070
It doesn't really matter cause it's so big and it's quite easy for the user to

29697
00:13:11,070 --> 00:13:15,060
see. I'm going to set it on the left, so column zero.

29698
00:13:15,270 --> 00:13:20,220
And when I run this code, you can see that show up. So using the same method,

29699
00:13:20,250 --> 00:13:22,350
I'm going to create the false button.

29700
00:13:28,200 --> 00:13:28,950
Right.

29701
00:13:28,950 --> 00:13:33,870
Now we have a true and a false button and we pretty much have our final user

29702
00:13:33,870 --> 00:13:36,930
interface completed. Now,

29703
00:13:37,080 --> 00:13:41,250
one of the things you see here is almost everything that I've created inside my

29704
00:13:41,250 --> 00:13:42,030
init,

29705
00:13:42,030 --> 00:13:47,030
I've given it the 'self.' And remember from our lessons on OOP, this turns

29706
00:13:48,270 --> 00:13:52,590
this into a property which can be accessed anywhere in the class.

29707
00:13:53,130 --> 00:13:57,060
Now, some other things like the true image and the false image,

29708
00:13:57,360 --> 00:14:01,050
I've not done that for because we're not going to use it anywhere else

29709
00:14:01,290 --> 00:14:04,050
other than to set up our button right here.

29710
00:14:04,770 --> 00:14:09,180
This, hopefully, will be a good review of what we learned about Object Oriented

29711
00:14:09,180 --> 00:14:14,180
Programming and classes and objects as well as tkinter and all of the new stuff

29712
00:14:14,820 --> 00:14:18,660
around APIs. But this completes the user interface

29713
00:14:18,930 --> 00:14:21,210
and we're now ready to head over to the next lesson

29714
00:14:21,310 --> 00:14:24,840
where we're going to fill some text into this question area.

29715
00:14:25,140 --> 00:14:27,810
So for all of that and more, I'll see you there.


29716
00:00:00,300 --> 00:00:02,670
Now that we've sorted out the user interface,

29717
00:00:02,730 --> 00:00:07,730
the next step is to populate this with some questions that we got from our API

29718
00:00:09,510 --> 00:00:10,343
call.

29719
00:00:10,590 --> 00:00:15,590
So everything in our program is linked and the place where we get hold of the

29720
00:00:15,930 --> 00:00:20,250
next question is inside our quiz_brain. At the moment,

29721
00:00:20,250 --> 00:00:24,150
the quiz_brain, when this method next_question is called,

29722
00:00:24,450 --> 00:00:28,830
will find the current question from the list of questions that it gets from

29723
00:00:28,830 --> 00:00:33,600
data.py, and then it will serve it up in a input.

29724
00:00:34,110 --> 00:00:35,430
This is what used to happen,

29725
00:00:35,430 --> 00:00:38,970
at least, when we were still making our text-based quiz app.

29726
00:00:39,540 --> 00:00:40,440
But in this case,

29727
00:00:40,470 --> 00:00:45,470
we actually want to be able to output that question text and then get hold of it

29728
00:00:46,440 --> 00:00:48,510
inside our ui.py.

29729
00:00:49,770 --> 00:00:54,770
So let's update our quiz_brain so that this question is returned as an output.

29730
00:00:56,790 --> 00:01:01,440
I'm gonna comment out this part of the code where we check the user answer

29731
00:01:01,470 --> 00:01:05,640
because we no longer get a user answer from the input. Instead,

29732
00:01:05,700 --> 00:01:09,840
we're going to take this question_text and the question_number

29733
00:01:10,020 --> 00:01:12,480
and we're going to serve it up as the output.

29734
00:01:12,810 --> 00:01:16,080
So let's go ahead and return this entire string.

29735
00:01:19,170 --> 00:01:21,510
And we can comment out this line of code.

29736
00:01:22,440 --> 00:01:24,900
Now inside our ui.py,

29737
00:01:25,020 --> 00:01:30,000
we can call that method and put it onto this piece of text in the canvas.

29738
00:01:30,630 --> 00:01:34,830
Let's create a method in here, which we'll call get_

29739
00:01:35,010 --> 00:01:37,650
_next_question.

29740
00:01:38,430 --> 00:01:43,430
And this method is going to tap into the quiz_brain and call this next_question.

29741
00:01:45,960 --> 00:01:50,960
So how do we get hold of the same quiz brain that we create in our main.py?

29742
00:01:51,900 --> 00:01:52,140
Well,

29743
00:01:52,140 --> 00:01:57,140
we could pass it in when we create our quiz UI as an input.

29744
00:01:57,660 --> 00:01:59,100
So this quiz,

29745
00:01:59,130 --> 00:02:03,870
which is creative from the quiz brain, can be passed into the quiz interface. And

29746
00:02:03,870 --> 00:02:06,600
to catch it, all we have to do is just to

29747
00:02:06,600 --> 00:02:09,330
add another parameter in our init

29748
00:02:10,199 --> 00:02:11,700
which we'll call the quiz brain.

29749
00:02:12,300 --> 00:02:16,230
And then we can create a property called the quiz

29750
00:02:16,560 --> 00:02:20,610
and we can set that equal to the quiz brain that we receive when we initialize

29751
00:02:20,880 --> 00:02:22,590
this new quiz interface.

29752
00:02:24,570 --> 00:02:28,260
So now when we have our get next question being called,

29753
00:02:28,530 --> 00:02:31,020
we're going to tap into the self.quiz,

29754
00:02:31,410 --> 00:02:34,590
and then we're going to call the method quiz_

29755
00:02:34,710 --> 00:02:39,390
_next_question. Now notice how as I'm typing,

29756
00:02:39,420 --> 00:02:41,370
you don't actually get anything showing up.

29757
00:02:41,850 --> 00:02:46,350
And the reason for this is because even though we're passing in that quiz brain

29758
00:02:46,500 --> 00:02:49,560
into here through the init, this file

29759
00:02:49,560 --> 00:02:53,910
doesn't actually know what is the datatype of this particular object that's

29760
00:02:53,910 --> 00:02:54,840
being passed in.

29761
00:02:55,530 --> 00:03:00,430
So one of the things that you can do is actually to add the datatype when you

29762
00:03:00,430 --> 00:03:02,470
create it as a parameter.

29763
00:03:02,950 --> 00:03:07,090
So we could say that this quiz brain thing that's going to be passed in must be

29764
00:03:07,120 --> 00:03:11,020
of data type quiz brain. And in order for that to work,

29765
00:03:11,050 --> 00:03:13,270
we need to import it. So from quiz

29766
00:03:13,270 --> 00:03:17,380
brain import the quiz brain class.

29767
00:03:17,740 --> 00:03:21,790
And now we can declare that when we initialize a new quiz interface,

29768
00:03:22,060 --> 00:03:25,030
we must pass in a quiz brain object

29769
00:03:25,300 --> 00:03:29,740
which is of the data type quiz brain. And once we've done that

29770
00:03:29,800 --> 00:03:31,150
and we've ensured this,

29771
00:03:31,300 --> 00:03:35,020
then when we try to initialize this and we try to pass on something else,

29772
00:03:35,290 --> 00:03:38,440
let's say I try to pass in the question bank

29773
00:03:39,250 --> 00:03:43,960
then this is going to give me a error and you can see it says expected type quiz

29774
00:03:43,960 --> 00:03:46,060
brain, but instead got a list.

29775
00:03:46,990 --> 00:03:49,810
So this also ensures that we don't make any mistakes

29776
00:03:49,870 --> 00:03:51,910
when we initialize the quiz interface.

29777
00:03:52,600 --> 00:03:56,710
Coming back to here and scrolling down, now, at this point

29778
00:03:56,740 --> 00:03:59,050
once we know the data type of quiz,

29779
00:03:59,320 --> 00:04:02,620
then we can start typing next question. And you can see,

29780
00:04:02,830 --> 00:04:06,070
it shows up all of the methods that are available to the quiz brain

29781
00:04:06,070 --> 00:04:10,630
object. We know that this is going to give us the output,

29782
00:04:10,630 --> 00:04:15,310
so this is the question text. And once we get that,

29783
00:04:15,370 --> 00:04:17,560
then we want to update our canvas.

29784
00:04:17,589 --> 00:04:22,590
So what's tap into our self.canvas and then call the item config method to

29785
00:04:24,190 --> 00:04:28,210
change the item, which is our self.question_text.

29786
00:04:30,910 --> 00:04:33,460
And the thing we want to change about it is the text

29787
00:04:33,580 --> 00:04:37,300
and we wanna set it to this q_text that we got from here.

29788
00:04:39,100 --> 00:04:39,430
Now,

29789
00:04:39,430 --> 00:04:43,420
all that's left to do is to actually call this method and we have to do it

29790
00:04:43,720 --> 00:04:47,380
in our init so that when we first initialize our user interface,

29791
00:04:47,710 --> 00:04:51,250
we don't end up seeing this Some Question Text. Instead,

29792
00:04:51,250 --> 00:04:54,580
we actually fetch the first question from our list of questions.

29793
00:04:55,090 --> 00:04:58,720
But remember that everything has to go before the main loop

29794
00:04:59,050 --> 00:05:03,520
because all the code you write after this line is not going to be executed until

29795
00:05:03,520 --> 00:05:04,990
that window gets destroyed.

29796
00:05:05,710 --> 00:05:10,510
So let's put it here and we can call self.get_next_question.

29797
00:05:10,870 --> 00:05:12,670
And now if we run our code,

29798
00:05:14,440 --> 00:05:17,170
you can see that instead of some dummy text,

29799
00:05:17,200 --> 00:05:20,020
we're actually getting a real question here.

29800
00:05:20,500 --> 00:05:23,560
The only problem is that it's not fully visible.

29801
00:05:24,100 --> 00:05:28,270
One of the tricks that we can use is to get the text in the canvas

29802
00:05:28,330 --> 00:05:33,330
to wrap by setting the text width property. Back up here

29803
00:05:34,510 --> 00:05:38,050
where we created our question_text, we can add 

29804
00:05:38,050 --> 00:05:40,360
another argument which is called width.

29805
00:05:40,900 --> 00:05:45,900
And if we set that width to some value that is maybe a little bit less than the

29806
00:05:46,810 --> 00:05:47,980
width of the canvas,

29807
00:05:48,400 --> 00:05:52,960
then this question_text is automatically going to go on two separate lines.

29808
00:05:53,590 --> 00:05:57,800
I'm going to set it to 280 so that it's a little bit less than 300.

29809
00:05:58,220 --> 00:06:02,960
So that way there's a little bit of padding, either side. And now if I hit run,

29810
00:06:03,200 --> 00:06:08,200
you can see the question now fits into the actual piece of card. There you have

29811
00:06:09,470 --> 00:06:13,610
it. We've now created our get next question method

29812
00:06:13,880 --> 00:06:17,930
which is able to fetch the question text from the quiz brain

29813
00:06:18,230 --> 00:06:22,070
by returning the question text that it got. Now,

29814
00:06:22,100 --> 00:06:27,100
we still have our principles of Object Oriented Programming maintained where

29815
00:06:27,140 --> 00:06:30,170
each module is responsible for its own thing.

29816
00:06:30,470 --> 00:06:34,820
So the quiz brain is responsible for managing the quiz, getting questions,

29817
00:06:35,000 --> 00:06:38,660
keeping track of score, and our user interface

29818
00:06:38,660 --> 00:06:43,130
or our quiz interface class is responsible for putting those things onto the

29819
00:06:43,130 --> 00:06:46,310
screen to be displayed. In the next lesson,

29820
00:06:46,370 --> 00:06:49,430
we're going to take a closer look at Python type hints.

29821
00:06:49,700 --> 00:06:52,880
And then afterwards, we'll figure out how to get our buttons working.

29822
00:06:53,120 --> 00:06:55,940
So for all of that and more, I'll see you on the next lesson.


29823
00:00:00,090 --> 00:00:03,420
A long time ago, we've talked about Python data types.

29824
00:00:03,540 --> 00:00:08,370
So the data types that we've been working with include things like integers,

29825
00:00:08,610 --> 00:00:12,180
strings, floating point numbers and booleans.

29826
00:00:12,720 --> 00:00:16,980
And we've seen how you can interchange between different data types by casting.

29827
00:00:17,460 --> 00:00:21,780
And we've also seen that in Python, the data types are flexible.

29828
00:00:21,780 --> 00:00:25,800
So you could create a variable and then change its data type later on.

29829
00:00:26,220 --> 00:00:27,990
This is known as dynamic typing.

29830
00:00:28,890 --> 00:00:32,790
Now I want to show you another thing that you can do with data types to make

29831
00:00:32,790 --> 00:00:34,530
your code less error prone.

29832
00:00:35,160 --> 00:00:39,900
Let's say that we were to create a variable, for example, a variable called age.

29833
00:00:40,020 --> 00:00:42,720
Now, normally we would set it with an equal sign.

29834
00:00:43,140 --> 00:00:48,140
But you can also simply declare its data type and then leave it as is.

29835
00:00:48,750 --> 00:00:51,210
So this means that later on, at some point,

29836
00:00:51,240 --> 00:00:55,140
once you've actually gotten the age of from the user or you've worked it out,

29837
00:00:55,410 --> 00:01:00,390
then at that point, you can set it. And this age now has to match

29838
00:01:00,390 --> 00:01:02,850
the data type over here. So for example,

29839
00:01:02,850 --> 00:01:07,850
if I was to change this to 12 using a string, then you can see that my 

29840
00:01:08,430 --> 00:01:08,910
PyCharm,

29841
00:01:08,910 --> 00:01:13,910
my IDE, is now being very helpful in telling me that this age thing ages ago

29842
00:01:13,950 --> 00:01:18,060
when you created it, you said it should be an integer. Instead, I got a string.

29843
00:01:18,600 --> 00:01:23,010
So this is quite helpful. You can do this with all of the basic data types.

29844
00:01:23,010 --> 00:01:27,870
So for example, age is an int, name is a string,

29845
00:01:28,710 --> 00:01:33,710
height is a float and is_human is a boolean.

29846
00:01:34,800 --> 00:01:39,800
Now we can also specify the data type inside a function.

29847
00:01:40,290 --> 00:01:41,490
So for example,

29848
00:01:41,490 --> 00:01:46,490
if I was to create a function here called a police_check and it took the age as

29849
00:01:47,850 --> 00:01:52,800
an input, and then inside the police_check function, I would check well,

29850
00:01:52,800 --> 00:01:55,170
if the age is over 18,

29851
00:01:55,470 --> 00:02:00,060
then maybe we would have some sort of variable called can_drive and we could set

29852
00:02:00,060 --> 00:02:01,050
that to true.

29853
00:02:01,650 --> 00:02:05,070
But otherwise, we can set that to false

29854
00:02:05,630 --> 00:02:06,463
right?

29855
00:02:07,880 --> 00:02:10,669
Now, we're going to return this as the output.

29856
00:02:11,510 --> 00:02:15,860
So now at some point we can call our police_check function,

29857
00:02:15,920 --> 00:02:19,550
pass in the age and if we print this out,

29858
00:02:19,730 --> 00:02:24,260
you can see that it's going to give me false for age 12.

29859
00:02:24,710 --> 00:02:29,120
And if I decide to say I'm 19, well, then we get true.

29860
00:02:29,810 --> 00:02:34,810
We can actually use the output from this function to create a print statement,

29861
00:02:35,390 --> 00:02:36,223
for example.

29862
00:02:38,420 --> 00:02:42,980
So if the police check passes, then the policeman tells you, you may pass.

29863
00:02:43,370 --> 00:02:46,700
Otherwise you might have to pay a fine or spend a night in jail.

29864
00:02:47,150 --> 00:02:48,500
So this is our function

29865
00:02:49,100 --> 00:02:52,220
and if we were to use this function

29866
00:02:52,220 --> 00:02:54,140
police_check at some point

29867
00:02:54,380 --> 00:02:59,240
way down the line where we've forgotten what we created for this function

29868
00:02:59,530 --> 00:03:03,250
and we can't look it up very easily without scrolling up hundreds of lines of

29869
00:03:03,250 --> 00:03:08,020
code, now, if at this point we've mistaken the input type

29870
00:03:08,080 --> 00:03:11,920
and we put in, for example, 12 as a string,

29871
00:03:12,250 --> 00:03:16,810
then this is actually going to give us a type error and it throws an exception

29872
00:03:16,840 --> 00:03:17,470
crashing our

29873
00:03:17,470 --> 00:03:22,470
app. One of the ways that we can make our lives a little bit easier is by

29874
00:03:22,480 --> 00:03:27,310
declaring a type for this input. So we do it in the same way as you see above.

29875
00:03:27,370 --> 00:03:32,370
We can add a colon and then we can specify the data type of this particular

29876
00:03:32,440 --> 00:03:36,190
input. So now when we actually write this line of code,

29877
00:03:36,250 --> 00:03:39,610
you can see immediately we get this part highlighted.

29878
00:03:40,000 --> 00:03:44,680
And if I hover over it, it tells me that this input expected a datatype

29879
00:03:44,680 --> 00:03:48,130
that's an integer and instead I gave it a string.

29880
00:03:48,400 --> 00:03:53,290
So this is a quick hint for us to fix our code before we even run it and get

29881
00:03:53,290 --> 00:03:54,580
into trouble and create

29882
00:03:54,630 --> 00:03:56,850
bugs. In addition,

29883
00:03:56,880 --> 00:04:01,880
you can also specify the data type of the output of a function,

29884
00:04:02,850 --> 00:04:07,740
and you do that by creating a little arrow with a hyphen and an angle bracket.

29885
00:04:08,310 --> 00:04:13,310
So now we can say that this particular function is expected to return a boolean

29886
00:04:14,640 --> 00:04:15,473
data type.

29887
00:04:15,840 --> 00:04:20,839
And my return statement does in fact comply with this because can_drive can only

29888
00:04:21,240 --> 00:04:25,560
be true or false. Now, if I forget that this is what I need

29889
00:04:25,650 --> 00:04:29,460
and at some point I return let's say a string,

29890
00:04:30,570 --> 00:04:33,660
then also I'm getting this warning highlight here.

29891
00:04:33,720 --> 00:04:37,230
And when I hover over it again, it's expecting a boolean

29892
00:04:37,290 --> 00:04:39,150
but instead I'm giving it a string.

29893
00:04:39,840 --> 00:04:42,870
This is known as a type hint in Python.

29894
00:04:43,320 --> 00:04:46,680
And it is a feature that we got relatively recently from Python

29895
00:04:47,100 --> 00:04:52,080
and it has a lot of benefits especially when you want your IDE, for example

29896
00:04:52,080 --> 00:04:52,913
PyCharm,

29897
00:04:52,980 --> 00:04:57,980
to help you spot potential bugs and keep your code safer and spend less time

29898
00:04:58,500 --> 00:05:00,480
debugging and more time writing code.

29899
00:05:01,170 --> 00:05:05,580
So we've seen how we can declare a data type for a variable like this

29900
00:05:05,910 --> 00:05:10,830
and we've also seen how we can declare data type for the return type like this.

29901
00:05:11,430 --> 00:05:12,600
That's all there is to it.


29902
00:00:00,390 --> 00:00:01,380
In the last lesson,

29903
00:00:01,410 --> 00:00:06,330
we got our quiz app to start displaying the questions that we were getting from

29904
00:00:06,360 --> 00:00:10,560
our API. This question I landed on is pretty interesting.

29905
00:00:10,650 --> 00:00:13,200
Nintendo started out as a playing card manufacturer?

29906
00:00:13,560 --> 00:00:16,500
And I would love to know if that's actually true or false.

29907
00:00:17,070 --> 00:00:20,310
So I'd really like these buttons to work basically.

29908
00:00:20,700 --> 00:00:22,560
If I click on one of these buttons,

29909
00:00:22,620 --> 00:00:27,090
I want to be able to check my answer against the real answer that we got back

29910
00:00:27,090 --> 00:00:31,230
from our API. So in this lesson, that's what we're going to get to work.

29911
00:00:32,070 --> 00:00:34,020
So I want this to be a bit of a challenge for you.

29912
00:00:34,560 --> 00:00:39,560
We know that we can add a command argument to our buttons so that it calls a

29913
00:00:41,490 --> 00:00:46,170
particular method when it gets pressed. Now, when that method gets pressed,

29914
00:00:46,620 --> 00:00:51,620
we want to go into our quiz brain and call this check answer.

29915
00:00:52,530 --> 00:00:57,480
Now this check answer method expects a answer to check against.

29916
00:00:57,840 --> 00:01:02,700
Have a think about how you might solve this and get this to work so that we can

29917
00:01:02,700 --> 00:01:07,290
start printing out whether if we got the question right or the question

29918
00:01:07,290 --> 00:01:10,860
wrong. Pause the video now, and try to complete this challenge.

29919
00:01:10,910 --> 00:01:11,743
Go. 

29920
00:01:15,950 --> 00:01:17,360
Okay. Here's the solution.

29921
00:01:18,080 --> 00:01:23,080
The first thing I'm going to do is create a new method called true_pressed

29922
00:01:26,930 --> 00:01:30,050
and also a method called a false_pressed.

29923
00:01:31,430 --> 00:01:36,430
This true_pressed is obviously going to be the one that will be the command for

29924
00:01:37,100 --> 00:01:40,820
this true button and it's going to be self.

29925
00:01:40,820 --> 00:01:44,900
true_pressed because we're inside a class and we have to make sure that there's

29926
00:01:44,900 --> 00:01:49,280
no parentheses at the end of it because we only want to trigger this method

29927
00:01:49,580 --> 00:01:54,530
when the button actually detects a click. In a similar way,

29928
00:01:54,530 --> 00:01:58,250
we're going to add a command to the false button and it's going to be

29929
00:01:58,250 --> 00:02:02,360
self.false_pressed. And again, deleting the parenthesis.

29930
00:02:02,840 --> 00:02:05,210
And now we can figure out what to do in here.

29931
00:02:05,930 --> 00:02:10,190
We already have access to our quiz brain object in here

29932
00:02:10,520 --> 00:02:13,700
which is saved under self.quiz.

29933
00:02:14,210 --> 00:02:16,280
When either of these gets pressed,

29934
00:02:16,400 --> 00:02:21,400
then we can simply tap into self.quiz and we can call the check_

29935
00:02:22,190 --> 00:02:24,770
answer method that exists over there.

29936
00:02:25,310 --> 00:02:29,090
And we can pass over true when true_pressed is called,

29937
00:02:29,480 --> 00:02:31,880
and then when false_pressed is called

29938
00:02:31,880 --> 00:02:32,713
...

29939
00:02:34,760 --> 00:02:38,870
we'll pass in false. Now it's going to go into this check_answer,

29940
00:02:38,930 --> 00:02:43,040
pass that answer in and it's going to print out whether if you got it right

29941
00:02:43,220 --> 00:02:45,950
or whether if you got it wrong. So let's test that out.

29942
00:02:46,400 --> 00:02:51,400
Let's run the code again and make sure that we don't make any silly typos like

29943
00:02:52,400 --> 00:02:53,300
comand.

29944
00:02:53,630 --> 00:02:54,463
Yeah.

29945
00:02:56,330 --> 00:03:00,490
So let's run our app and see if can answer some questions.

29946
00:03:01,450 --> 00:03:04,570
Gumbo is a stew that originated in Louisiana.

29947
00:03:05,260 --> 00:03:06,760
I think that might be true.

29948
00:03:08,590 --> 00:03:10,540
And when I click on the button,

29949
00:03:10,570 --> 00:03:14,230
you can see in the console it's printed whether

29950
00:03:14,230 --> 00:03:16,720
if I got it right or wrong. Now,

29951
00:03:16,720 --> 00:03:21,720
while our code works and we can see whether we got it right or wrong in the

29952
00:03:22,060 --> 00:03:24,790
console, that's not something the user will see.

29953
00:03:24,790 --> 00:03:28,120
This is only something that's available to us as developers.

29954
00:03:28,630 --> 00:03:31,330
So how can we give the user some feedback?

29955
00:03:31,900 --> 00:03:33,970
That's what we'll figure out in the next lesson.


29956
00:00:00,240 --> 00:00:04,710
We saw in the last lesson how we could see the feedback in the console.

29957
00:00:05,010 --> 00:00:08,039
But what if we wanna see the feedback on screen?

29958
00:00:08,730 --> 00:00:12,960
What I want to be able to happen is when the user taps on true or false

29959
00:00:13,080 --> 00:00:15,990
as an answer to the question, I want this card,

29960
00:00:16,050 --> 00:00:18,540
which is our canvas, to give us the feedback.

29961
00:00:18,900 --> 00:00:22,320
So if I click this and it turns green for a second,

29962
00:00:22,350 --> 00:00:23,580
then that means I got it right.

29963
00:00:24,000 --> 00:00:26,940
And then afterwards it goes straight to the next question.

29964
00:00:27,360 --> 00:00:29,760
And when I get the wrong answer, it should flash red.

29965
00:00:30,990 --> 00:00:35,280
Instead of getting check_answer in the quiz brain to print out

29966
00:00:35,370 --> 00:00:39,480
you got it right or you got it wrong, we want it to return true

29967
00:00:39,510 --> 00:00:40,860
if we actually got it right

29968
00:00:41,100 --> 00:00:44,610
and to return false when we get it wrong.

29969
00:00:47,400 --> 00:00:51,270
And we can delete these last two lines of code with the print statements.

29970
00:00:51,990 --> 00:00:56,970
So now we can catch that when we call each of these methods, check_answer,

29971
00:00:57,270 --> 00:00:59,880
and check_answer something like this.

29972
00:01:01,320 --> 00:01:05,700
What we want to happen is we want to check whether if the user got it right or

29973
00:01:05,700 --> 00:01:08,910
wrong, and depending on that, we'll give them different feedback.

29974
00:01:09,390 --> 00:01:12,300
So we'll create a new method called it give_feedback

29975
00:01:13,740 --> 00:01:18,740
and this is going to take input in the form of whether if they got it right or not.

29976
00:01:20,940 --> 00:01:25,020
Now, all we have to do is to call self.give_feedback

29977
00:01:25,410 --> 00:01:30,150
and then pass in the output to this method call, like this.

29978
00:01:30,540 --> 00:01:33,750
And we can delete this line. Alternatively,

29979
00:01:33,750 --> 00:01:35,520
you can use two lines of code for this

29980
00:01:36,030 --> 00:01:37,980
and you can pass in the value to this variable.

29981
00:01:38,460 --> 00:01:40,560
These two lines do exactly the same thing.

29982
00:01:42,000 --> 00:01:45,090
Once we get into this method, give_feedback, though,

29983
00:01:45,300 --> 00:01:49,650
we need to change the canvas background to red or green

29984
00:01:49,710 --> 00:01:52,140
depending on whether the user got it right or wrong.

29985
00:01:52,770 --> 00:01:55,500
And then after a delay of one second,

29986
00:01:55,530 --> 00:02:00,530
we need to change it back to white so that we can then go to the next question.

29987
00:02:02,400 --> 00:02:06,120
You might think that we can simply use something like time.sleep and then

29988
00:02:06,120 --> 00:02:10,889
sleep for one second. But if you remember from previous lessons on tkinter,

29989
00:02:11,100 --> 00:02:15,750
we mentioned that we can't mess with the time because we have this main loop

29990
00:02:15,780 --> 00:02:20,490
going on continuously. So we have to use a tkinter method

29991
00:02:20,640 --> 00:02:24,720
which is window.after.

29992
00:02:25,680 --> 00:02:30,510
And here we can set how many milliseconds we want to delay by, so 1000,

29993
00:02:30,870 --> 00:02:33,030
and then what function we want to call.

29994
00:02:33,870 --> 00:02:38,670
Have a think about how you might create this give_feedback so that it has

29995
00:02:38,730 --> 00:02:43,710
this particular functionality where the user gives their answer and if they got

29996
00:02:43,710 --> 00:02:48,060
it right then it's green and if they get it wrong, then it's red.

29997
00:02:48,840 --> 00:02:51,300
Pause the video and try to complete this challenge.

29998
00:02:51,770 --> 00:02:52,603
Go.

29999
00:02:55,910 --> 00:02:56,390
All right.

30000
00:02:56,390 --> 00:03:01,390
What we have to first check is whether if this variable that's being passed in, is_

30001
00:03:01,990 --> 00:03:06,670
right, is actually true or false. If the user got it right,

30002
00:03:06,730 --> 00:03:08,020
well then in that case,

30003
00:03:08,290 --> 00:03:13,290
we're going to change the canvas and call config on it

30004
00:03:13,480 --> 00:03:17,560
to change the background to green. However,

30005
00:03:17,560 --> 00:03:20,170
if this is false, if they got it wrong,

30006
00:03:20,320 --> 00:03:25,320
then we're going to change the canvas.config so that the background is red

30007
00:03:26,530 --> 00:03:29,530
instead. Now, once that's done,

30008
00:03:29,590 --> 00:03:31,720
then our canvas will be a different color.

30009
00:03:32,080 --> 00:03:36,910
And then this is where we set up our timer. So after 1000 milliseconds,

30010
00:03:36,940 --> 00:03:40,810
so one second, we want to go to the next question.

30011
00:03:42,100 --> 00:03:45,880
So let's go ahead and call self.get_next_question.

30012
00:03:46,420 --> 00:03:50,320
But in the same way that we can't have the parentheses

30013
00:03:50,350 --> 00:03:54,940
when we set the command method, when we use this as an input,

30014
00:03:55,180 --> 00:03:59,020
we also need to get rid of the parentheses. So now

30015
00:03:59,020 --> 00:04:03,250
if we run this code and I pick an answer,

30016
00:04:03,850 --> 00:04:07,090
then it goes red when it shows that I've got it wrong.

30017
00:04:07,420 --> 00:04:11,410
And then after once one second, it goes to the next question. Now,

30018
00:04:11,440 --> 00:04:16,180
once it goes to the next question, that's where we need to reset our canvas.

30019
00:04:16,450 --> 00:04:21,100
So if we can say self.canvas and then do the same thing to configure the

30020
00:04:21,100 --> 00:04:26,080
background back to white. And let's run this again.

30021
00:04:26,440 --> 00:04:29,140
I can see I got it wrong. And then after one second,

30022
00:04:29,230 --> 00:04:32,260
it goes back to white and it goes to the next question.

30023
00:04:33,370 --> 00:04:35,020
And that completes the challenge.

30024
00:04:36,760 --> 00:04:41,470
So the very last thing that we need to add is our score keeping capabilities.

30025
00:04:42,130 --> 00:04:47,130
And all we need to do that is to pick out the value of the score from the quiz

30026
00:04:48,340 --> 00:04:52,570
brain and populate it every time we get the next question.

30027
00:04:53,350 --> 00:04:55,570
In addition to configuring the canvas,

30028
00:04:55,600 --> 00:05:00,600
we're going to set the score label's config so that we change the text to

30029
00:05:03,010 --> 00:05:06,940
the new score. This is going to be a f-string

30030
00:05:07,030 --> 00:05:09,040
and we're going to say Score:

30031
00:05:09,370 --> 00:05:12,280
and then we're going to insert the self.quiz,

30032
00:05:12,310 --> 00:05:16,510
which is the quiz brain object, and we're going to get its current score.

30033
00:05:17,230 --> 00:05:22,120
Now you can see that every time we score a single point,

30034
00:05:22,390 --> 00:05:24,310
then that value gets updated,

30035
00:05:26,700 --> 00:05:27,390
right?

30036
00:05:27,390 --> 00:05:31,350
Whereas if we get it wrong, then that score doesn't change at all. Now,

30037
00:05:31,350 --> 00:05:35,190
the thing that we haven't seen yet is what happens when we get to the end of

30038
00:05:35,190 --> 00:05:39,210
the quiz, because we know that we only have 10 questions.

30039
00:05:39,660 --> 00:05:41,730
And once we get to the 10th question,

30040
00:05:42,030 --> 00:05:47,030
you'll see that we actually get an exception thrown: index out of range.

30041
00:05:47,430 --> 00:05:50,550
And that's because we've reached the end of our quiz,

30042
00:05:50,880 --> 00:05:53,850
but we're still trying to get hold of the next question.

30043
00:05:55,080 --> 00:06:00,080
So what we need to do is to check that we can actually get the next question. And

30044
00:06:00,650 --> 00:06:05,540
to do that, all we need is an if statement tapping into our self.quiz,

30045
00:06:05,570 --> 00:06:07,910
which is the quiz brain. And here,

30046
00:06:07,940 --> 00:06:12,290
remember we have a method called still_has_questions

30047
00:06:12,590 --> 00:06:15,470
which is either true or false. Now,

30048
00:06:15,530 --> 00:06:17,840
if we still have questions remaining,

30049
00:06:17,990 --> 00:06:21,560
then we're going to go to the next question. But otherwise,

30050
00:06:21,560 --> 00:06:26,560
what we're going to do is we're going to update the canvas text so that we

30051
00:06:26,810 --> 00:06:31,810
change the question text to actually tell the user that they've reached the end

30052
00:06:32,870 --> 00:06:37,670
of the quiz. Now there's just a few more bugs to iron out.

30053
00:06:38,000 --> 00:06:41,900
The first one is when we get to the end of our quiz,

30054
00:06:42,350 --> 00:06:44,480
you can see that it shows up this text

30055
00:06:44,840 --> 00:06:49,310
but we can still press on these buttons and it changes the background for no

30056
00:06:49,310 --> 00:06:52,700
reason. So we want to be able to disable these buttons

30057
00:06:52,760 --> 00:06:54,530
once we reached the end of the quiz

30058
00:06:54,860 --> 00:06:58,610
and we also want to make sure that the canvas background is actually white

30059
00:06:58,700 --> 00:06:59,533
again.

30060
00:06:59,630 --> 00:07:04,630
So let's move this line of code out of the if statement so that no matter what

30061
00:07:05,060 --> 00:07:07,130
happens when we go to the next question,

30062
00:07:07,160 --> 00:07:11,990
we always change the canvas background back to white. Now, in addition,

30063
00:07:11,990 --> 00:07:16,220
we want to disable our true and false buttons. To do that,

30064
00:07:16,310 --> 00:07:20,810
all we have to do is to tap into a keyword argument called state.

30065
00:07:21,290 --> 00:07:24,950
And if we change the state of the button to disabled,

30066
00:07:25,280 --> 00:07:30,280
then this will prevent the buttons from being pressed or activated.

30067
00:07:30,910 --> 00:07:35,910
[inaudible]

30068
00:07:37,240 --> 00:07:38,380
There, you have it. Here's

30069
00:07:38,380 --> 00:07:43,380
a upgraded quiz application that now has a graphical user interface

30070
00:07:43,780 --> 00:07:46,000
which we can interact with data

30071
00:07:46,000 --> 00:07:51,000
that's completely generated from random and fetched from the open trivia

30072
00:07:51,370 --> 00:07:52,203
database.

30073
00:07:52,450 --> 00:07:57,450
And we can even modify these parameters to change up this quiz to our liking.

30074
00:07:58,420 --> 00:08:02,980
So for example, if you want to change the category to say computers,

30075
00:08:03,370 --> 00:08:06,040
then once we generate our API URL,

30076
00:08:06,220 --> 00:08:10,300
you can see that it adds one other parameter called category,

30077
00:08:10,540 --> 00:08:14,230
and we can change that to 18. So let's try that.

30078
00:08:16,270 --> 00:08:19,480
Set the category to the number of 18

30079
00:08:19,960 --> 00:08:21,610
and now when we run our code,

30080
00:08:21,820 --> 00:08:24,910
all our questions will be computer science related.

30081
00:08:25,900 --> 00:08:28,570
So have fun playing with your quiz app

30082
00:08:28,990 --> 00:08:33,429
and if you've modified your quiz app to make it more interesting or added some

30083
00:08:33,460 --> 00:08:34,293
other features,

30084
00:08:34,480 --> 00:08:37,720
then be sure to share it with the rest of us in the Q/A section.



30085
00:00:00,060 --> 00:00:02,370
Hey guys, welcome to day 35

30086
00:00:02,400 --> 00:00:05,730
of 100 Days of Code. It's Angela here again

30087
00:00:05,850 --> 00:00:09,000
and today we're going to be learning all about API keys,

30088
00:00:09,240 --> 00:00:11,580
authentication, environment variables,

30089
00:00:11,940 --> 00:00:15,690
and also how to send SMS using Python.

30090
00:00:16,530 --> 00:00:20,190
It's going to be a pretty packed day and we're going to be learning a whole

30091
00:00:20,190 --> 00:00:21,023
bunch of things.

30092
00:00:21,360 --> 00:00:26,360
And the goal is the look at even more advanced ways of using APIs and

30093
00:00:27,180 --> 00:00:31,710
looking at how we can authenticate ourselves with an API provider so that we can

30094
00:00:31,710 --> 00:00:35,220
get access to more precious data. Now we're also going

30095
00:00:35,220 --> 00:00:40,220
to be looking at how we can use an API like Twilio to send SMS messages to

30096
00:00:41,370 --> 00:00:45,030
ourselves so that we can get an alert wherever we are.

30097
00:00:45,750 --> 00:00:46,710
And finally,

30098
00:00:46,740 --> 00:00:50,790
we're going to be taking a look at what environment variables are in association

30099
00:00:50,790 --> 00:00:54,450
with how they're used for safely storing API keys.

30100
00:00:55,140 --> 00:01:00,140
What all of this knowledge is going to amount to is to build a rain alert

30101
00:01:00,750 --> 00:01:01,583
application.

30102
00:01:01,950 --> 00:01:06,930
So we're going to be writing Python code that is going to send us a text message

30103
00:01:06,990 --> 00:01:11,310
in the morning, just before we head out, telling us to bring an umbrella

30104
00:01:11,580 --> 00:01:13,350
if it's going to rain in the day.

30105
00:01:13,920 --> 00:01:15,960
So this way we don't have to check the weather.

30106
00:01:16,320 --> 00:01:21,320
We know that our trusty application is always going to alert us via an SMS

30107
00:01:21,420 --> 00:01:24,510
message if we need to bring an umbrella before we leave home.

30108
00:01:25,140 --> 00:01:28,260
So that's the goal. And if you head over to the next lesson,

30109
00:01:28,650 --> 00:01:33,570
we'll get started building our application and learning about API

30110
00:01:33,570 --> 00:01:34,410
authentication.


30111
00:00:00,060 --> 00:00:05,060
The first thing we're going to explore is how to authenticate ourselves with an

30112
00:00:05,340 --> 00:00:10,340
API provider so that we can access more secure and more valuable data from the

30113
00:00:11,310 --> 00:00:16,170
API providers. Up to this point, we've learned about API endpoints,

30114
00:00:16,230 --> 00:00:20,720
so figuring out what is the URL that we need to hit up in order to get a

30115
00:00:20,720 --> 00:00:24,830
particular piece of data. We also looked at API parameters,

30116
00:00:25,100 --> 00:00:29,600
so passing in different inputs so that we can get different pieces of data

30117
00:00:29,810 --> 00:00:31,460
back from the API provider.

30118
00:00:32,119 --> 00:00:36,530
Now we're going to take one step further and look at how we can use APIs

30119
00:00:36,530 --> 00:00:39,830
that require authentication. Previously

30120
00:00:39,830 --> 00:00:43,580
all of the APIs that we've used were free APIs.

30121
00:00:43,850 --> 00:00:48,850
They were provided completely free and we can access all parts of it without any

30122
00:00:49,040 --> 00:00:51,110
sort of payment here. Now,

30123
00:00:51,140 --> 00:00:56,140
this is because the data that's contained in those APIs are very simple and

30124
00:00:56,750 --> 00:01:01,750
nobody is going to be using that data to build a very fancy or big commercial

30125
00:01:02,660 --> 00:01:05,630
application. Now, on the other hand, there's 

30126
00:01:05,640 --> 00:01:10,010
other types of data that are very valuable, for example, weather data,

30127
00:01:10,310 --> 00:01:10,880
because it

30128
00:01:10,880 --> 00:01:15,680
makes a lot of energy and time for somebody or some company to collect all of

30129
00:01:15,680 --> 00:01:19,580
this data and provide it for you. In these cases,

30130
00:01:19,610 --> 00:01:22,610
some of these APIs can have a paid tier.

30131
00:01:23,000 --> 00:01:27,110
So you actually have to pay if you're running an application

30132
00:01:27,110 --> 00:01:32,090
or if you have a company that needs to get this data very frequently and you

30133
00:01:32,090 --> 00:01:33,980
need to get large amounts of the data.

30134
00:01:34,820 --> 00:01:39,590
Why do people charge for API anyways? Well, if you think about something simple

30135
00:01:39,590 --> 00:01:43,850
like the weather, it's not actually that simple. How do you even get 

30136
00:01:43,880 --> 00:01:44,270
the weather

30137
00:01:44,270 --> 00:01:49,270
if I asked you to figure out the weather without using some sort of website or tool?

30138
00:01:50,660 --> 00:01:53,570
Well, in this particular case, open weather map,

30139
00:01:53,780 --> 00:01:58,100
they have access to over 4,000 weather stations across the globe,

30140
00:01:58,580 --> 00:02:03,580
and then their data scientists will take that weather data and look at the

30141
00:02:03,680 --> 00:02:08,680
satellite images and process that data in order to figure out the weather and

30142
00:02:08,720 --> 00:02:13,220
predict the weather for each city in the world. As you can imagine,

30143
00:02:13,220 --> 00:02:16,610
that's going to be really resource-intensive and it's going to require a lot of

30144
00:02:16,610 --> 00:02:21,440
employees and also server maintenance and electricity costs, right?

30145
00:02:21,890 --> 00:02:26,000
So for all of that hassle, if they're going to provide this data for you,

30146
00:02:26,270 --> 00:02:29,900
then it's reasonable that you should be paying for it, right?

30147
00:02:30,380 --> 00:02:31,830
Essentially you can see a lot of

30148
00:02:31,940 --> 00:02:35,660
APIs as a way of selling data.

30149
00:02:36,140 --> 00:02:40,820
If you own some sort of privileged piece of data that you are constantly

30150
00:02:40,820 --> 00:02:44,720
updating, or you are actively generating, for example,

30151
00:02:44,720 --> 00:02:48,320
weather data from satellite images or financial data,

30152
00:02:48,650 --> 00:02:52,940
then it's reasonable that you should be charging for this data

30153
00:02:53,180 --> 00:02:57,260
especially if somebody is going to rely on it heavily in order to build a

30154
00:02:57,290 --> 00:03:01,030
commercial app or a company. But luckily,

30155
00:03:01,240 --> 00:03:06,240
most of these APIs provide a free tier that allows you to test out the

30156
00:03:07,500 --> 00:03:08,333
application.

30157
00:03:08,610 --> 00:03:12,150
And if you are somebody who's just learning the ropes then it doesn't make sense

30158
00:03:12,150 --> 00:03:12,983
to charge you.

30159
00:03:13,290 --> 00:03:18,090
It only makes sense when your application or your service has a lot of users.

30160
00:03:18,480 --> 00:03:22,860
And then you start going into the paid tiers. Now,

30161
00:03:22,890 --> 00:03:27,180
how do you prevent people from abusing this free tier?

30162
00:03:27,210 --> 00:03:29,880
Because anybody can say, well, I'm just learning, you know.

30163
00:03:30,360 --> 00:03:34,260
You can be somebody who's running a 1000 employee company

30164
00:03:34,260 --> 00:03:36,900
and you could claim that you're just learning.

30165
00:03:37,800 --> 00:03:42,240
So the way that they prevent people from abusing their service is through

30166
00:03:42,240 --> 00:03:44,640
something known as an API key.

30167
00:03:45,180 --> 00:03:50,160
And this is almost like your personal account number and password.

30168
00:03:50,730 --> 00:03:55,730
This is the way how the API provider can track how much you're using their API

30169
00:03:57,210 --> 00:04:01,110
and to authorize your access and deny you access

30170
00:04:01,110 --> 00:04:03,720
once you've gone over the limit. Now,

30171
00:04:03,780 --> 00:04:08,160
different API providers tend to have different ways that you can authenticate

30172
00:04:08,160 --> 00:04:09,210
yourself with them,

30173
00:04:09,630 --> 00:04:13,350
but most of them involve some sort of an API key.

30174
00:04:14,100 --> 00:04:18,149
In the next lesson, I want to show you how we can implement the open weather

30175
00:04:18,149 --> 00:04:19,140
map API,

30176
00:04:19,500 --> 00:04:24,500
authenticate ourselves with an API key that we generate, and get the live wather

30177
00:04:24,550 --> 00:04:28,500
data. So for all of that and more, I'll see you on the next lesson,


30178
00:00:00,330 --> 00:00:05,330
Now whenever we start using a new API, the most important thing is to read the

30179
00:00:06,300 --> 00:00:07,350
documentation.

30180
00:00:07,920 --> 00:00:11,730
I know it's really tempting to skip over the instructions and just get right

30181
00:00:11,730 --> 00:00:12,563
into it.

30182
00:00:12,720 --> 00:00:17,250
I'm also the sort of person who buys a lawnmower and throws away the instruction

30183
00:00:17,250 --> 00:00:20,820
manual. And then two days later, something breaks

30184
00:00:20,820 --> 00:00:25,380
and I just want to hurt myself because it would be so much easier if I had

30185
00:00:25,380 --> 00:00:29,940
actually read the instruction manual. But in this case, it is really important.

30186
00:00:30,060 --> 00:00:33,300
So let's head over to openweathermap.org together

30187
00:00:33,360 --> 00:00:38,360
and let's go to the API section to see their API documentation.

30188
00:00:39,480 --> 00:00:44,340
As you can see, this API provider actually has several products.

30189
00:00:44,370 --> 00:00:49,140
So you could look at the current weather data, the hourly forecast,

30190
00:00:49,410 --> 00:00:51,240
the one call API,

30191
00:00:51,250 --> 00:00:55,290
the daily forecast and a whole bunch of other things.

30192
00:00:55,500 --> 00:01:00,330
So each of these have their own endpoints. And if we take a look at the API doc,

30193
00:01:00,360 --> 00:01:01,800
you can see this first one

30194
00:01:02,100 --> 00:01:07,100
the API is api.openweathermap.org/data/2.5/weather. That's the end

30195
00:01:10,560 --> 00:01:11,393
point.

30196
00:01:11,400 --> 00:01:16,400
Whereas the hourly forecast is pro.openweathermap.org/data/2.5/forecasts

30197
00:01:19,830 --> 00:01:24,450
/hourly. So depending on what it is that we need,

30198
00:01:24,480 --> 00:01:27,990
we can tap into each of these different APIs.

30199
00:01:28,800 --> 00:01:30,450
Let's start off with an easy one.

30200
00:01:30,540 --> 00:01:34,140
Let's try and get the current weather data for the city that we're in.

30201
00:01:34,740 --> 00:01:37,230
You can see that this part is the end point,

30202
00:01:37,290 --> 00:01:39,780
so the URL that we're going to tap into.

30203
00:01:40,320 --> 00:01:42,300
And then we have some parameters.

30204
00:01:42,870 --> 00:01:47,870
The parameter where we can specify the city name is q.

30205
00:01:48,510 --> 00:01:52,920
So that's the name of the parameter and then we have to provide a value.

30206
00:01:53,460 --> 00:01:54,420
Now, in addition,

30207
00:01:54,450 --> 00:01:59,450
there's another parameter which we have to include with all of the API calls to

30208
00:02:00,450 --> 00:02:04,020
this particular service. And that is an app ID.

30209
00:02:04,110 --> 00:02:09,110
We have to get hold of an API key in order to use this service. And they show you

30210
00:02:10,350 --> 00:02:13,230
an example here. If we click on this URL,

30211
00:02:13,530 --> 00:02:17,310
it takes us to samples.openweathermap.org

30212
00:02:17,610 --> 00:02:22,470
and this is just some sample data where they provided a sample App ID.

30213
00:02:23,100 --> 00:02:28,100
Now we can get our own app ID for free by simply signing up to this weather

30214
00:02:28,440 --> 00:02:31,980
service. And once you register and sign in,

30215
00:02:32,250 --> 00:02:33,960
this is the page that you see.

30216
00:02:34,320 --> 00:02:39,320
So we can now go into this section called API keys and grab our API key here.

30217
00:02:41,400 --> 00:02:43,770
So you can create as many keys as you want

30218
00:02:43,830 --> 00:02:48,830
and you can provide a name that's associated with the final usage for that key.

30219
00:02:49,650 --> 00:02:50,940
So I've named it Python.

30220
00:02:51,360 --> 00:02:56,360
And now I'm going to copy this API key and I'm gonna place it into my project.

30221
00:02:57,360 --> 00:03:01,900
So I've started a new project called rain alert and inside the main.py,

30222
00:03:02,260 --> 00:03:04,990
I'm going to create a api_key

30223
00:03:05,170 --> 00:03:10,170
and I'm going to save that key that I copied into a set of double quotes as a

30224
00:03:11,530 --> 00:03:15,310
string. Now, once I've got my API key,

30225
00:03:15,370 --> 00:03:17,950
I can actually test out this API call.

30226
00:03:20,320 --> 00:03:24,100
So I can replace this part with my city name

30227
00:03:24,160 --> 00:03:25,450
which is London,

30228
00:03:25,840 --> 00:03:30,280
and then I can add my country afterwards just to make sure that it goes to

30229
00:03:30,280 --> 00:03:34,090
London UK, and not London Ontario, or somewhere else.

30230
00:03:34,870 --> 00:03:35,680
And then finally,

30231
00:03:35,680 --> 00:03:40,680
I'm going to paste in the API key that I copied over just now. And now when I hit

30232
00:03:41,470 --> 00:03:44,230
enter and as long as my API key is valid,

30233
00:03:44,560 --> 00:03:48,760
I should get a result in the format of my weather data.

30234
00:03:49,510 --> 00:03:54,310
Now I want you to make sure that your API key works as well by using the same

30235
00:03:54,310 --> 00:03:55,143
method.

30236
00:03:55,270 --> 00:04:00,250
But remember that you have to get hold of your own API key by signing up to open

30237
00:04:00,250 --> 00:04:03,130
weather map if you want this to work.

30238
00:04:03,580 --> 00:04:07,330
Make sure that you replace this part with your own API key.

30239
00:04:07,750 --> 00:04:12,750
Otherwise, it's not going to work. Now that we've seen that this particular API

30240
00:04:13,270 --> 00:04:14,920
call actually works,

30241
00:04:15,400 --> 00:04:19,360
let's see what happens if we provide the wrong API key.

30242
00:04:19,839 --> 00:04:23,800
So if I just make up an API key and hit enter,

30243
00:04:24,100 --> 00:04:26,740
you can see we get a code back

30244
00:04:26,800 --> 00:04:29,950
which has an HTTP code called 401.

30245
00:04:30,400 --> 00:04:34,780
And we can also get a message telling us that that's an invalid API key

30246
00:04:35,020 --> 00:04:38,530
and we can go to this URL for more info. Now,

30247
00:04:38,560 --> 00:04:40,270
remember in previous lessons,

30248
00:04:40,270 --> 00:04:45,270
I mentioned that HTTP status codes are the codes that we get back when we try to

30249
00:04:45,790 --> 00:04:48,610
talk to another server. So in this case,

30250
00:04:48,640 --> 00:04:53,110
we got the 401 code back which means unauthorized.

30251
00:04:53,680 --> 00:04:56,770
And when you get this code back and you're working with an API, it

30252
00:04:57,190 --> 00:05:02,190
usually means that your API key or your way of authorizing with the API key is

30253
00:05:03,580 --> 00:05:08,080
somehow not working. So that is the thing that you should examine.

30254
00:05:09,520 --> 00:05:12,790
We can see that for this particular API provider,

30255
00:05:13,180 --> 00:05:18,180
we have to authenticate ourselves with their server by providing the API key as

30256
00:05:19,540 --> 00:05:24,340
a parameter. So now I want to give you a challenge.

30257
00:05:24,700 --> 00:05:28,900
I want you to go to the API doc for their one call API.

30258
00:05:29,500 --> 00:05:33,610
This one call API gives you a bunch of things. It gives you the current

30259
00:05:33,610 --> 00:05:38,350
weather, the minute forecasts for the next hour, the hourly forecasts for the

30260
00:05:38,350 --> 00:05:42,280
next 48 hours, and the daily forecast for seven days.

30261
00:05:43,030 --> 00:05:48,030
My challenge to you is to make an API request from PyCharm to the one call API

30262
00:05:48,400 --> 00:05:53,400
and to locate the hourly forecasts for the next 48 hours in the JSON response

30263
00:05:53,500 --> 00:05:56,710
that you get back. Now, I could tell you exactly what to do,

30264
00:05:56,740 --> 00:06:01,310
but it's really good to get some practice reading API documentation

30265
00:06:01,610 --> 00:06:03,140
because, after all, in the future

30266
00:06:03,140 --> 00:06:05,420
you're going to be using loads of different APIs

30267
00:06:05,480 --> 00:06:08,810
and they all have different ways of working with their services.

30268
00:06:10,010 --> 00:06:13,250
Have a look at this page, I'll link to it in the course resources.

30269
00:06:13,640 --> 00:06:18,640
And I want you to implement this API call by providing a latitude and longitude

30270
00:06:19,580 --> 00:06:21,230
of where you currently are.

30271
00:06:21,860 --> 00:06:26,860
Now you can leave this exclude parameter out and make sure that you add your

30272
00:06:27,560 --> 00:06:32,360
personal app ID by getting hold of your API key. Now,

30273
00:06:32,390 --> 00:06:36,230
remember you can get your current latitude and longitude just by going to

30274
00:06:36,230 --> 00:06:39,380
latlong.net and then typing a place name,

30275
00:06:39,470 --> 00:06:43,550
and then clicking find. Don't worry if it tells you a bot is detected.

30276
00:06:43,550 --> 00:06:47,600
Just go back to the website after a little while and try it again.

30277
00:06:47,780 --> 00:06:51,140
At some point, it should show you your latitude and longitude

30278
00:06:51,410 --> 00:06:55,940
which you can then plug in as a parameter to this particular API call.

30279
00:06:56,630 --> 00:06:59,120
So if you manage to work through all the lessons yesterday,

30280
00:06:59,390 --> 00:07:03,350
then this should be a piece of cake for you. Pause the video and give that a go.

30281
00:07:04,360 --> 00:07:05,193
Okay. 

30282
00:07:09,880 --> 00:07:11,740
All right. So if that was hard at all,

30283
00:07:11,980 --> 00:07:16,090
make sure that you've not skipped yesterday's lessons because I go through in

30284
00:07:16,090 --> 00:07:19,570
detail, how to hit up a API endpoint,

30285
00:07:19,570 --> 00:07:23,950
how to provide parameters and how to essentially complete this challenge.

30286
00:07:24,580 --> 00:07:26,170
But hopefully you managed alright

30287
00:07:26,290 --> 00:07:31,290
and you're just here to check the solution. As always we're going to start off by

30288
00:07:31,510 --> 00:07:33,910
importing our requests package.

30289
00:07:35,200 --> 00:07:39,850
Remember that if you're creating this file from scratch and you haven't

30290
00:07:39,850 --> 00:07:42,010
downloaded it from a zip file,

30291
00:07:42,310 --> 00:07:45,250
then you'll have to install this module manually.

30292
00:07:45,370 --> 00:07:48,790
So if you click on it in PyCharm, you get a little red light bulb.

30293
00:07:48,910 --> 00:07:53,080
And then when you click on the down arrow, you can install that package.

30294
00:07:53,590 --> 00:07:57,430
Simple. Now, once you've got requests installed,

30295
00:07:57,700 --> 00:08:01,750
we can use the get method to pass in our endpoint.

30296
00:08:02,350 --> 00:08:04,870
Now the open weather map endpoint

30297
00:08:06,580 --> 00:08:11,260
is the one that we see in the API docs. So it's everything up to,

30298
00:08:11,260 --> 00:08:14,500
but not including, the question mark. So all of this.

30299
00:08:15,040 --> 00:08:18,220
And we can paste that in and save it as a string.

30300
00:08:18,970 --> 00:08:23,530
That is what we want to make our get requests to. So OWM endpoint.

30301
00:08:24,220 --> 00:08:27,130
And in addition, we're going to provide some params.

30302
00:08:27,280 --> 00:08:31,870
So this is going to determine what kind of data we get back. And in this case,

30303
00:08:31,900 --> 00:08:36,010
it's going to be the weather for a particular location that we're interested in.

30304
00:08:36,789 --> 00:08:40,419
Let's create our weather params,

30305
00:08:40,929 --> 00:08:42,760
and this is going to be a dictionary.

30306
00:08:43,240 --> 00:08:48,240
And we have to follow the keys that are provided in the API docs.

30307
00:08:49,090 --> 00:08:53,110
So the parameters that we can provide for this API are lat

30308
00:08:53,140 --> 00:08:56,280
which is the latitude, lon which is longitude.

30309
00:08:56,520 --> 00:09:00,600
And a lot of people make typos here because they add a 'g.' It's actually just lon.

30310
00:09:00,600 --> 00:09:05,490
That's the name of the parameter key. And then there's exclude

30311
00:09:05,760 --> 00:09:10,760
which tells you which parts of the weather data you want to exclude.

30312
00:09:11,580 --> 00:09:16,230
And finally, the app ID which is your API key that you got earlier on.

30313
00:09:17,760 --> 00:09:21,480
In our case, we want to provide a lat, the latitude.

30314
00:09:21,690 --> 00:09:25,530
We want to provide a lon, L-O-N, which is the longitude,

30315
00:09:25,890 --> 00:09:30,480
and we also want to provide our app ID. Now our app ID is

30316
00:09:30,480 --> 00:09:35,070
simple. It's simply the API key that we got earlier on. And again,

30317
00:09:35,100 --> 00:09:37,890
just as a reminder, this key is not going to work.

30318
00:09:37,920 --> 00:09:41,940
You'll have to register and get your own for it to work. Now,

30319
00:09:41,970 --> 00:09:45,270
the latitude we're going to figure out by using latlong.net.

30320
00:09:45,720 --> 00:09:49,890
So I'm trying to get the weather for where I currently reside, which is London.

30321
00:09:50,280 --> 00:09:54,900
So my latitude is this value and my longitude is this value.

30322
00:09:55,080 --> 00:09:59,550
Make sure that you copy everything including any negative signs like this.

30323
00:10:01,230 --> 00:10:03,660
So these are going to go in as floating point numbers.

30324
00:10:04,140 --> 00:10:06,270
And now that we've completed our

30325
00:10:06,270 --> 00:10:09,600
weather params, we're going to pass it in to this method.

30326
00:10:10,290 --> 00:10:15,290
And now we can save the output that comes from this as the response,

30327
00:10:16,440 --> 00:10:21,440
and we can print the response.status_code to see if it was successful.

30328
00:10:24,180 --> 00:10:28,440
So now let's go ahead and run our main.py and you can see the response code

30329
00:10:28,440 --> 00:10:33,210
we get back is 200, which means everything is OK. Now,

30330
00:10:33,240 --> 00:10:35,880
if you get a response code that's 401,

30331
00:10:36,150 --> 00:10:39,030
that means your API key is probably not valid,

30332
00:10:39,450 --> 00:10:42,750
or you misspelled the name of that key.

30333
00:10:42,750 --> 00:10:45,180
It should be appid all in lowercase,

30334
00:10:45,540 --> 00:10:47,970
as they've shown us in their documentation.

30335
00:10:49,560 --> 00:10:51,510
If you did get 200 though,

30336
00:10:51,540 --> 00:10:56,400
that means everything was successful and we can now tap into the actual data.

30337
00:10:56,850 --> 00:11:01,590
So let's tap into the response.json, and let's print that out.

30338
00:11:03,510 --> 00:11:04,560
So they're you have it.

30339
00:11:04,590 --> 00:11:09,360
We've got all of the data here that came back from that API call.

30340
00:11:09,450 --> 00:11:13,950
And if you scroll, there's actually quite a lot of data that's in there.

30341
00:11:16,920 --> 00:11:21,360
Now, in order to view this, it's not very easy to look at it in the console.

30342
00:11:21,390 --> 00:11:26,100
So I'm going to triple-click on this and copy all of that string

30343
00:11:26,610 --> 00:11:30,570
and I'm going to view it in a online JSON viewer.

30344
00:11:30,810 --> 00:11:34,140
So I'll link to this as well, but you want to pace that JSON

30345
00:11:34,140 --> 00:11:38,460
you got back into this and you can see, wow, what a mess. So much data.

30346
00:11:38,850 --> 00:11:41,280
But if you click on viewer then you can see

30347
00:11:41,280 --> 00:11:46,280
it's nicely formatted all of that data for us to get the current data,

30348
00:11:47,550 --> 00:11:51,300
or you can get the hourly data or the daily data.

30349
00:11:52,230 --> 00:11:56,110
So this is the data that's effective for this latitude and longitude

30350
00:11:56,440 --> 00:12:00,160
and this is the current time zone we're in. So in my case,

30351
00:12:00,190 --> 00:12:04,570
I want to know the hourly data for the next 12 hours.

30352
00:12:04,900 --> 00:12:09,880
So I can expand this list and you can see they're 48 data points here.

30353
00:12:10,630 --> 00:12:12,460
If we take a look at each of those,

30354
00:12:12,520 --> 00:12:17,380
they give us a timestamp for when this predicted weather is valid,

30355
00:12:17,800 --> 00:12:22,240
the temperature in Kelvins, the pressure, humidity,

30356
00:12:22,510 --> 00:12:24,850
but also the actual weather data.

30357
00:12:25,450 --> 00:12:30,310
The weather data is a list which contains a bunch of dictionaries. In this case

30358
00:12:30,310 --> 00:12:34,510
there's only one and it's telling us that right now, where I am in London,

30359
00:12:34,540 --> 00:12:38,800
there's scattered clouds, which is pretty normal

30360
00:12:38,860 --> 00:12:41,620
if you've ever been to London. At least it's not raining.

30361
00:12:43,030 --> 00:12:46,900
We've now managed to use this open weather app API,

30362
00:12:47,290 --> 00:12:52,290
authenticate ourselves with an API key, and get the required data back from the

30363
00:12:53,140 --> 00:12:55,480
service. So in the next lesson,

30364
00:12:55,510 --> 00:12:57,550
we're going to dig into the data that we got back

30365
00:12:57,880 --> 00:13:01,210
and we're going to use it to figure out whether if it's going to rain today.

30366
00:13:01,720 --> 00:13:04,570
So for all of that and more, I'll see you on the next lesson.


30367
00:00:00,450 --> 00:00:03,600
In order to create my rain alert Python script.

30368
00:00:03,840 --> 00:00:07,590
I want the script to be run every morning at 7:00 AM.

30369
00:00:08,039 --> 00:00:12,330
Let's say that I'm going to head out of the door at 8:00 AM in order to go to

30370
00:00:12,330 --> 00:00:16,020
work, I want my script to run at 7:00 AM,

30371
00:00:16,110 --> 00:00:18,570
check the weather for the next 12 hours,

30372
00:00:18,720 --> 00:00:23,310
so the time when I'm going to be away from home, and then send me a text message

30373
00:00:23,370 --> 00:00:24,540
if it's going to rain today

30374
00:00:24,780 --> 00:00:28,980
so that I can remember to bring an umbrella. That way I'll get notified before I

30375
00:00:28,980 --> 00:00:31,770
leave home and I'll know how to prepare for the day.

30376
00:00:33,240 --> 00:00:37,830
The data that we got back from open weather map contains the hourly

30377
00:00:37,880 --> 00:00:41,810
weather forecast for the next 48 hours.

30378
00:00:42,260 --> 00:00:45,260
So it starts from zero and goes up to 47.

30379
00:00:45,800 --> 00:00:49,250
Now we're only interested in the next 12 hours

30380
00:00:49,340 --> 00:00:53,030
because, if you imagine, this script is run at 7:00 AM

30381
00:00:53,360 --> 00:00:58,220
then plus 12 hours, that's going to be 7:00 PM. By which time,

30382
00:00:58,250 --> 00:01:00,200
hopefully I'm already on the way home

30383
00:01:00,500 --> 00:01:05,000
and I don't need to worry about whether if it rains or not. That's the goal.

30384
00:01:05,090 --> 00:01:07,700
And if we head back into our code,

30385
00:01:08,030 --> 00:01:11,600
what we want to do is firstly modify certain parts.

30386
00:01:12,170 --> 00:01:14,180
Now we know that at the moment,

30387
00:01:14,240 --> 00:01:18,980
the response code that we're getting back from calling this API is 200.

30388
00:01:19,010 --> 00:01:22,850
So it's successful. So we're going to call raise for status

30389
00:01:22,880 --> 00:01:27,880
so that if there is right a problem and we don't get a 200 code that we

30390
00:01:28,400 --> 00:01:31,370
actually raise an exception. Now,

30391
00:01:31,400 --> 00:01:36,400
next we want to save our response.json as the weather data.

30392
00:01:38,120 --> 00:01:41,450
And then we're going to work with this data in order to get the particular

30393
00:01:41,450 --> 00:01:46,370
pieces that we're interested in. So if we look at this JSON that

30394
00:01:46,370 --> 00:01:50,630
we get back, firstly, we don't really care about the current weather or

30395
00:01:50,980 --> 00:01:52,160
the daily weather.

30396
00:01:52,610 --> 00:01:56,390
So when we look at the API documentation

30397
00:01:56,780 --> 00:01:58,850
which is probably the hardest part,

30398
00:01:59,090 --> 00:02:03,020
making sure that you're diligent enough to read the entire documentation,

30399
00:02:03,380 --> 00:02:07,280
there's often some good nuggets in there. For example, in this case,

30400
00:02:07,340 --> 00:02:10,610
we can add another parameter called exclude

30401
00:02:10,970 --> 00:02:15,970
which allows us to exclude some parts of the weather data that comes from the

30402
00:02:15,980 --> 00:02:20,210
API. This should speed up the API fetching process

30403
00:02:20,270 --> 00:02:24,800
and it also means that we're transferring less data across the internet. So we

30404
00:02:24,800 --> 00:02:28,400
can get rid of the current, minutely and daily.

30405
00:02:28,430 --> 00:02:33,140
We're only interested in the hourly and we have to provide this as a comma-

30406
00:02:33,140 --> 00:02:37,940
delimited list. So if we take a look at their example, you can see here,

30407
00:02:37,940 --> 00:02:42,170
they've said exclude and then they've said hourly, daily.

30408
00:02:42,440 --> 00:02:46,400
And notice how it says without spaces. So as I always say,

30409
00:02:46,430 --> 00:02:49,100
this is like going into somebody else's house.

30410
00:02:49,130 --> 00:02:52,550
Everything is different. The way that the washing machine works is different,

30411
00:02:52,550 --> 00:02:54,560
the way that their dryer works is different.

30412
00:02:54,830 --> 00:02:59,350
So you really have to look at the API documentation when you were working

30413
00:02:59,350 --> 00:03:02,110
with a new API just so that you're not caught out

30414
00:03:02,170 --> 00:03:07,170
and you understand exactly what you have to do in order to be a good API user.

30415
00:03:09,040 --> 00:03:13,930
Let's go back into our code and let's provide that extra parameter.

30416
00:03:14,020 --> 00:03:16,630
So that was called exclude.

30417
00:03:17,560 --> 00:03:22,120
And the thing that we want to exclude is going to be provided as a string.

30418
00:03:22,630 --> 00:03:25,750
So we want to get rid of current, minutely and daily.

30419
00:03:25,840 --> 00:03:30,670
So we're going to add that into the string and make sure that we separate each

30420
00:03:30,700 --> 00:03:32,740
with a comma and without spaces.

30421
00:03:33,300 --> 00:03:34,133
okay.

30422
00:03:35,460 --> 00:03:36,930
Now when we hit run

30423
00:03:37,020 --> 00:03:41,010
and when we get back our weather data and we print it out

30424
00:03:42,570 --> 00:03:47,550
and we copy this and put it into our online JSON viewer,

30425
00:03:49,350 --> 00:03:52,170
so let's replace all of the stuff that was there before

30426
00:03:52,500 --> 00:03:55,560
and you can see the JSON we're getting back is now a lot simpler.

30427
00:03:55,890 --> 00:03:57,960
We're only getting back the hourly weather

30428
00:03:58,380 --> 00:03:59,213
forecast.

30429
00:04:00,930 --> 00:04:02,040
So that's step one done.

30430
00:04:02,400 --> 00:04:07,400
The next step is to dig through this hourly forecast and get hold of the thing

30431
00:04:08,280 --> 00:04:12,270
that we're interested in, which is the actual weather condition.

30432
00:04:13,080 --> 00:04:17,790
The way that weather services tend to provide the weather condition is through

30433
00:04:17,790 --> 00:04:18,630
an ID.

30434
00:04:19,200 --> 00:04:22,800
And I know this because I read the API documentation.

30435
00:04:23,610 --> 00:04:28,230
It's not because I'm some sort of weather geek. Although, I mean,

30436
00:04:28,230 --> 00:04:29,550
that's not a bad thing to be

30437
00:04:29,550 --> 00:04:34,110
I guess. If we take a look inside the API key,

30438
00:04:35,220 --> 00:04:39,930
if we scroll down in this documentation past the examples,

30439
00:04:40,230 --> 00:04:44,550
you can see it provides all of the fields in the API response. So these are

30440
00:04:44,550 --> 00:04:48,600
all of the things that we could possibly get back and what they mean.

30441
00:04:49,050 --> 00:04:54,050
And you can see there's some really interesting things like the UV index or you

30442
00:04:54,090 --> 00:04:55,170
can get, um,

30443
00:04:55,200 --> 00:04:59,940
what does the temperature feel like based on the wind chill and actual ground

30444
00:04:59,940 --> 00:05:00,773
temperature.

30445
00:05:01,290 --> 00:05:05,040
But what we're mostly interested in is the hourly data.

30446
00:05:05,460 --> 00:05:08,250
And then inside that the hourly weather data.

30447
00:05:08,820 --> 00:05:13,820
So this hourly.weather.id is a weather condition id.

30448
00:05:14,880 --> 00:05:16,290
And when you click on that link,

30449
00:05:16,320 --> 00:05:21,120
it takes you to this table that shows you all of the weather condition codes

30450
00:05:21,120 --> 00:05:25,350
that we could possibly get back in this particular field.

30451
00:05:26,400 --> 00:05:31,400
Now you can see that all the codes that start off with a two means some sort of

30452
00:05:32,280 --> 00:05:35,130
thunderstorm, and then starting with three

30453
00:05:35,130 --> 00:05:39,390
that means some sort of drizzling starting, with five means rain, starting with

30454
00:05:39,390 --> 00:05:43,830
six means snow. And then afterward we have the seven hundreds

30455
00:05:43,830 --> 00:05:47,400
so these are atmospheric. Thing's like a bit of mist, a bit of smoke,

30456
00:05:47,670 --> 00:05:51,240
a bit of dust or fog. And this is also incidentally,

30457
00:05:51,240 --> 00:05:56,240
the reason why this weather key actually has a value that's in the form of

30458
00:05:57,230 --> 00:06:01,130
a list. You can see that's denoted by the square brackets here.

30459
00:06:01,610 --> 00:06:06,610
So there could actually be multiple weather conditions for a particular place

30460
00:06:06,980 --> 00:06:11,420
at a particular hour. And that's because you could maybe have, um,

30461
00:06:11,450 --> 00:06:16,310
snow, but you could also have fog at the same time. Now,

30462
00:06:16,310 --> 00:06:20,030
when I looked through a lot of the examples and the documentation,

30463
00:06:20,330 --> 00:06:24,830
it seems like the first item in that list is the main condition.

30464
00:06:25,100 --> 00:06:28,550
So if it's going to rain, then it's going to be in that first item

30465
00:06:28,550 --> 00:06:32,510
in the list of weather conditions. Inside that list,

30466
00:06:32,540 --> 00:06:35,390
we have a dictionary or many dictionaries.

30467
00:06:35,990 --> 00:06:38,960
Each of those contain a weather condition ID,

30468
00:06:39,230 --> 00:06:41,960
the main condition name and the description.

30469
00:06:42,620 --> 00:06:45,770
So if we look at this ID code 802,

30470
00:06:45,800 --> 00:06:50,510
we can decode it in this table and you can see it means scattered clouds,

30471
00:06:50,900 --> 00:06:54,140
25 to 50% of the sky is covered in clouds basically.

30472
00:06:55,730 --> 00:06:56,960
Based on this list,

30473
00:06:56,990 --> 00:07:01,580
we can say that well anything that has a code less than 700,

30474
00:07:01,910 --> 00:07:04,580
then we probably will need an umbrella.

30475
00:07:05,090 --> 00:07:09,200
I'm not sure how you stand on the umbrella in snow situation

30476
00:07:09,530 --> 00:07:13,460
but I personally do like to hold an umbrella when it's snowing,

30477
00:07:13,490 --> 00:07:17,210
especially because I live in a country where the snow is not crazy.

30478
00:07:17,210 --> 00:07:18,200
It's just sort of,

30479
00:07:19,580 --> 00:07:24,580
it's never sort of the beautiful snow where it's thick and it gets caught on

30480
00:07:24,890 --> 00:07:28,100
your eyelashes. It's is the sort of annoying slush

30481
00:07:28,130 --> 00:07:32,840
that's just sort of snow, but it sort of like somebody spitting at you.

30482
00:07:33,560 --> 00:07:38,240
So in my case, I would prefer to have an umbrella if it was going to snow.

30483
00:07:39,020 --> 00:07:43,340
I'm going to check for the codes that we get back from the open weather map

30484
00:07:43,370 --> 00:07:46,790
API, and if the code is less than 700,

30485
00:07:47,060 --> 00:07:50,570
then I'm going to advise my user to bring an umbrella.

30486
00:07:52,490 --> 00:07:54,440
Here's a challenge for you.

30487
00:07:54,890 --> 00:07:58,940
Can you figure out how to look through the data that we get back,

30488
00:07:59,000 --> 00:08:03,860
which remember looks something like this, get hold of

30489
00:08:03,880 --> 00:08:06,130
the first 12

30490
00:08:06,190 --> 00:08:08,830
items from that hourly list.

30491
00:08:09,520 --> 00:08:14,520
And then look at the weather and the first item in the weather list and also the

30492
00:08:16,540 --> 00:08:20,830
ID. So you are going to go all the way down to this, but remember,

30493
00:08:20,830 --> 00:08:22,900
you're going to do that for all of the items

30494
00:08:23,410 --> 00:08:26,260
and you're going to check for the condition code. Now,

30495
00:08:26,290 --> 00:08:31,290
if any of those ID codes are less than 700 then you want to be able to print

30496
00:08:31,900 --> 00:08:33,280
out, bring an umbrella.

30497
00:08:33,880 --> 00:08:38,080
So that's the goal, and the actual implementation

30498
00:08:38,140 --> 00:08:41,049
I'll leave up to you because there's quite a few ways that you can do this.

30499
00:08:41,350 --> 00:08:46,350
But I'm sure by now you're well prepared with all of your tools in Python to

30500
00:08:46,450 --> 00:08:51,340
figure this out. If you want to make sure that your code is actually working,

30501
00:08:51,760 --> 00:08:55,860
you can switch to a latitude and longitude that is definitely raining.

30502
00:08:56,430 --> 00:08:59,580
So if you go to ventusky.com,

30503
00:08:59,700 --> 00:09:02,610
they actually show you the live weather forecast.

30504
00:09:02,940 --> 00:09:06,480
So we can look at precipitation, which is basically rain.

30505
00:09:06,870 --> 00:09:09,540
And we can find some sort of unfortunate place

30506
00:09:09,570 --> 00:09:13,320
which seems to be really heavily raining. For example,

30507
00:09:13,320 --> 00:09:15,300
this place in Poland, Lodz,

30508
00:09:15,870 --> 00:09:18,960
and if I spell that name correctly,

30509
00:09:21,890 --> 00:09:22,400
right,

30510
00:09:22,400 --> 00:09:25,430
Lodz, and then I'll add the country code Poland.

30511
00:09:26,120 --> 00:09:28,280
And just to make sure in the map

30512
00:09:28,310 --> 00:09:32,480
it's actually found the correct place. Yep that looks pretty much it.

30513
00:09:32,840 --> 00:09:37,190
Then I can switch out my latitude and longitude with this rainy place.

30514
00:09:37,850 --> 00:09:42,770
And that way I know that at least one of the results I get back is definitely

30515
00:09:42,770 --> 00:09:44,870
going to contain some sort of rain

30516
00:09:45,380 --> 00:09:46,213
right.

30517
00:09:47,960 --> 00:09:50,120
Now if we look at their hourly data,

30518
00:09:50,180 --> 00:09:54,710
you can see that the weather is basically just rain, rain, rain.

30519
00:09:55,370 --> 00:09:59,600
So between looking at places which are sunny and places

30520
00:09:59,600 --> 00:10:00,740
which are rainy,

30521
00:10:00,950 --> 00:10:05,480
you should be able to get your code to work so that it tells you in the next 12

30522
00:10:05,480 --> 00:10:06,200
hours

30523
00:10:06,200 --> 00:10:10,730
if any of those condition codes are less than 700,

30524
00:10:10,910 --> 00:10:13,670
which means it's got some form of precipitation.

30525
00:10:14,840 --> 00:10:16,550
Pause the video and give this a go.

30526
00:10:21,170 --> 00:10:21,890
Now.

30527
00:10:21,890 --> 00:10:24,380
All right. So let's narrow down into this

30528
00:10:24,410 --> 00:10:29,390
weather. If we want to get the weather for the next hour,

30529
00:10:29,510 --> 00:10:34,130
then we have to tap into the first item in our hourly list

30530
00:10:34,520 --> 00:10:36,140
and then we get hold of the weather

30531
00:10:36,230 --> 00:10:41,180
and then we get hold of the first item in that list. Under the ID key,

30532
00:10:41,240 --> 00:10:42,560
we'll get the actual value.

30533
00:10:43,220 --> 00:10:46,040
We've talked about this in detail in previous lessons.

30534
00:10:46,220 --> 00:10:49,670
If you've skipped a lot of lessons and you've come here directly,

30535
00:10:50,030 --> 00:10:52,160
then it's going to be a little bit confusing

30536
00:10:52,250 --> 00:10:55,850
and I recommend to review the previous lessons before you continue.

30537
00:10:56,780 --> 00:10:59,660
Instead of printing the weather data, let's drill down.

30538
00:10:59,990 --> 00:11:03,200
Let's get to the first item here, which is hourly.

30539
00:11:04,010 --> 00:11:08,990
If we provide a set of square brackets and then we can access the value inside

30540
00:11:08,990 --> 00:11:11,600
the hourly key like this.

30541
00:11:12,140 --> 00:11:17,140
And now we've got a list with all of the hourly data and it looks pretty much

30542
00:11:18,050 --> 00:11:19,100
like this.

30543
00:11:20,450 --> 00:11:25,100
Now you can confirm this by also pasting this into the JSON viewer,

30544
00:11:25,460 --> 00:11:28,520
replacing the previous text that was there. You can see

30545
00:11:28,520 --> 00:11:33,520
we now have our 48 items in this list of hourly data. To drill further down,

30546
00:11:35,210 --> 00:11:40,210
let's get hold of the first item in that list by providing a square bracket

30547
00:11:40,520 --> 00:11:42,890
and then the index, which is zero.

30548
00:11:43,580 --> 00:11:48,580
Now we're into the first item and this is what the data looks like.

30549
00:11:48,680 --> 00:11:49,700
It's a lot shorter.

30550
00:11:50,540 --> 00:11:53,710
Now we want to tap into the weather condition.

30551
00:11:54,400 --> 00:11:59,320
So that means yet another set of square brackets and then the name of the key,

30552
00:11:59,380 --> 00:12:03,280
which is weather. Now, it's pretty simple.

30553
00:12:03,310 --> 00:12:07,720
It's simply giving us a list with only one item.

30554
00:12:08,050 --> 00:12:12,100
Let's tap into that one item by using, again,

30555
00:12:12,370 --> 00:12:13,810
square brackets, zero.

30556
00:12:14,590 --> 00:12:18,970
And now we've got just a simple dictionary

30557
00:12:19,000 --> 00:12:21,850
essentially. So if you want to get hold of the ID,

30558
00:12:21,910 --> 00:12:25,990
then its the final square brackets and the key

30559
00:12:26,110 --> 00:12:31,110
which is ID. The current weather data ID code is 500 and that, of course, refers to

30560
00:12:35,770 --> 00:12:36,970
light rain.

30561
00:12:38,770 --> 00:12:43,770
The next problem is how do we get hold of the first 12 items that we get back in

30562
00:12:44,380 --> 00:12:48,790
our weather data? In previous lessons, we covered the Python

30563
00:12:48,790 --> 00:12:49,810
slice function

30564
00:12:49,840 --> 00:12:54,840
which could work for this by simply providing a value and slicing a sequence

30565
00:12:55,780 --> 00:13:00,780
like a list or tuple to get hold of a particular section of that list or

30566
00:13:01,300 --> 00:13:06,100
tuple. Now you can also use the Python slice operator

30567
00:13:06,130 --> 00:13:08,710
which is the square bracket and a colon

30568
00:13:09,190 --> 00:13:12,820
and this is probably a more pythonic way of doing things.

30569
00:13:13,150 --> 00:13:18,010
And you'll see more people doing this in the wild than using the slice function.

30570
00:13:18,160 --> 00:13:21,640
So let's do it with this notation. We're going to use this version.

30571
00:13:21,640 --> 00:13:26,640
So we're going to tap into a list and then provide a colon and then where we

30572
00:13:26,680 --> 00:13:30,550
want to stop because we want to go from the beginning of the list through to

30573
00:13:30,580 --> 00:13:31,750
stop-1.

30574
00:13:33,190 --> 00:13:38,190
We know that it's this part of our code that gets us to our list of hourly

30575
00:13:38,920 --> 00:13:43,420
weather forecasts. So we want to create a slice from that data.

30576
00:13:44,260 --> 00:13:46,840
So let's copy that and comment this line out.

30577
00:13:47,290 --> 00:13:50,050
And then I'm going to create my weather slice

30578
00:13:50,560 --> 00:13:55,560
which is going to be generated from the weather data under the key called

30579
00:13:55,990 --> 00:13:58,720
hourly. If I print this,

30580
00:13:58,750 --> 00:14:03,750
you can see it starts off just simply being a list with all of the weather

30581
00:14:04,120 --> 00:14:07,960
forecasts. Now, if I go ahead and slice this,

30582
00:14:08,050 --> 00:14:11,920
I'll use that syntax that you saw earlier on where we have a square bracket,

30583
00:14:12,370 --> 00:14:15,670
a colon, and then where we want our slice to end.

30584
00:14:16,270 --> 00:14:21,270
And we want this slice to go from zero all the way up to hour 11,

30585
00:14:22,330 --> 00:14:26,440
so that's 12 hours in total. So if we want to go up to 11,

30586
00:14:26,470 --> 00:14:30,460
then we have to put 12 in here because it's going to be whatever number here,

30587
00:14:30,520 --> 00:14:34,330
minus one. And now if we print this data that we get back,

30588
00:14:34,380 --> 00:14:35,213
and

30589
00:14:36,630 --> 00:14:40,440
we replaced the existing text inside our JSON viewer,

30590
00:14:40,800 --> 00:14:41,880
then we take a look at it

30591
00:14:41,880 --> 00:14:46,880
you can see we've got the next 12 hours of weather data from 0 to 11.

30592
00:14:49,470 --> 00:14:52,520
Once we've got that slice, the next step is, well,

30593
00:14:52,520 --> 00:14:54,980
how do we get the rest of the stuff, right?

30594
00:14:55,400 --> 00:15:00,230
What if I created a new list that contains the condition codes?

30595
00:15:01,970 --> 00:15:06,970
We know that we've got a list of all of the weather conditions for the next 12

30596
00:15:07,700 --> 00:15:08,533
hours.

30597
00:15:08,870 --> 00:15:13,870
How can we loop through that list to find out the actual ID of the weather

30598
00:15:14,750 --> 00:15:18,500
condition for each of those hours? Well,

30599
00:15:18,500 --> 00:15:23,500
we can create a for loop that looks at each of the data from the hour,

30600
00:15:23,960 --> 00:15:27,350
so for hour_data in weather_slice,

30601
00:15:27,680 --> 00:15:30,410
so this is going to go through each of the 12 hours.

30602
00:15:30,470 --> 00:15:32,030
And then for each of those hours,

30603
00:15:32,240 --> 00:15:37,240
we're going to tap into the hour_data and try to get hold of the item that is in

30604
00:15:38,240 --> 00:15:42,410
the weather key. Like this.

30605
00:15:43,550 --> 00:15:48,550
Now I'm going to print each of these and you can see we've now got a list of all

30606
00:15:51,350 --> 00:15:55,400
of the weather conditions for each of those hours.

30607
00:15:55,940 --> 00:15:58,610
Now let's narrow down that a little bit further.

30608
00:15:59,000 --> 00:16:02,990
Let's get hold of the first item of each of these lists and you can see,

30609
00:16:02,990 --> 00:16:05,840
in fact, there's only one item in all of these lists.

30610
00:16:06,140 --> 00:16:10,490
It's very rare that you have multiple weather conditions for each hour.

30611
00:16:11,600 --> 00:16:15,950
Now, that gives us a Python dictionary for each of those hours

30612
00:16:16,340 --> 00:16:21,080
and we can tap into that final value we're interested in under the key id.

30613
00:16:21,980 --> 00:16:26,980
So now we've looped through the next 12 hours and got hold of the weather

30614
00:16:28,640 --> 00:16:32,900
condition id for each of those hours. Now,

30615
00:16:32,930 --> 00:16:37,930
all we need to do is to save this instead of printing it and we'll call it the

30616
00:16:39,380 --> 00:16:40,520
condition_code.

30617
00:16:40,960 --> 00:16:41,793
Yeah.

30618
00:16:44,440 --> 00:16:49,270
And remember previously we said that if the condition code is less than 700,

30619
00:16:49,540 --> 00:16:52,240
then we're going to print bring an umbrella.

30620
00:16:53,170 --> 00:16:55,780
So we can check if condition_code,

30621
00:16:56,140 --> 00:16:59,350
which remember at this point is still a string

30622
00:16:59,740 --> 00:17:04,740
so we have to turn that into an integer in order to be able to compare it

30623
00:17:05,230 --> 00:17:06,520
against another number.

30624
00:17:07,210 --> 00:17:11,410
If that condition_code as an integer is less than 700,

30625
00:17:11,770 --> 00:17:15,040
then we're going to print bring an umbrella,

30626
00:17:15,310 --> 00:17:16,143
right?

30627
00:17:17,740 --> 00:17:20,290
And you can see that for the next 12 hours

30628
00:17:20,589 --> 00:17:25,359
there's six hours which are going to rain at this particular place

30629
00:17:25,510 --> 00:17:29,620
in Lodz in Poland that I've put into that latitude and longitude.

30630
00:17:30,550 --> 00:17:34,840
Now, if I don't want to call this print statement many times,

30631
00:17:35,410 --> 00:17:37,650
then we can define a variable outside

30632
00:17:37,670 --> 00:17:42,400
the for loop called will_rain and we can set that to false

30633
00:17:42,460 --> 00:17:46,360
to begin with. Now, if during the next 12 hours

30634
00:17:46,360 --> 00:17:51,210
the condition_code is less than 700, then we'll switch that to equal

30635
00:17:51,390 --> 00:17:53,910
true instead. Now,

30636
00:17:54,690 --> 00:17:56,550
after the for loop has completed,

30637
00:17:56,850 --> 00:18:01,440
then we can check to see if it will rain in the next 12 hours. And if so,

30638
00:18:01,440 --> 00:18:04,980
we'll print bring an umbrella. This way

30639
00:18:05,010 --> 00:18:09,420
we'll only get one print statement being called instead of every single time we

30640
00:18:09,420 --> 00:18:12,090
land on a condition code for rain.

30641
00:18:12,990 --> 00:18:17,990
So this involved quite a bit of JSON passing and also understanding how to work

30642
00:18:20,190 --> 00:18:22,920
with parameters in APIs. Now,

30643
00:18:22,950 --> 00:18:25,140
I hope you managed to get this far by yourself.

30644
00:18:25,200 --> 00:18:29,970
But if not, be sure to review what I've written and fix your code as required.

30645
00:18:30,420 --> 00:18:31,950
If any of it was confusing,

30646
00:18:32,010 --> 00:18:35,010
be sure to review previous lessons before you continue

30647
00:18:35,250 --> 00:18:39,270
because we're now building heavily on your previous knowledge that you learnt

30648
00:18:39,300 --> 00:18:42,480
through the course. Now in the next lesson,

30649
00:18:42,510 --> 00:18:45,930
we're going to be looking at how we can, instead of printing

30650
00:18:45,960 --> 00:18:50,960
bring an umbrella, to send a SMS text message that notifies you to bring an

30651
00:18:52,650 --> 00:18:56,400
umbrella instead. So for all of that and more,

30652
00:18:56,700 --> 00:18:57,900
I'll see you on the next lesson.


30653
00:00:00,240 --> 00:00:03,750
Now that we've got the hard part out of the way, figuring out when it's

30654
00:00:03,750 --> 00:00:04,740
actually going to rain,

30655
00:00:05,100 --> 00:00:10,050
the next step is to figure out how we can send this as an alert to our phone

30656
00:00:10,050 --> 00:00:13,920
number, using an SMS service. So for that,

30657
00:00:13,950 --> 00:00:16,230
we're going to need to use a different API.

30658
00:00:16,560 --> 00:00:21,560
The Twilio API. Twilio is an API service that allows us to send text messages or

30659
00:00:24,390 --> 00:00:28,740
phone calls or have a virtual phone number in any country.

30660
00:00:29,070 --> 00:00:31,140
And if you take a look at their front page,

30661
00:00:31,410 --> 00:00:35,310
you can see there's actually a whole bunch of things you can do with the Twilio

30662
00:00:35,310 --> 00:00:35,850
API.

30663
00:00:35,850 --> 00:00:40,850
You could build an ordering system, you could create a video app,

30664
00:00:41,250 --> 00:00:45,330
you could have SMS to email, whole bunch of things basically. Now,

30665
00:00:45,360 --> 00:00:46,830
in order to create the service,

30666
00:00:46,830 --> 00:00:51,150
they obviously had to build a lot of infrastructure and they've invested a lot

30667
00:00:51,360 --> 00:00:53,940
into making this seamless and work well.

30668
00:00:54,360 --> 00:00:57,150
So that's why if you look at the pricing section,

30669
00:00:57,330 --> 00:01:01,560
they do charge for their service if you're using it a lot.

30670
00:01:02,070 --> 00:01:06,540
Now, in our case, we're going to get started using some trial credit.

30671
00:01:06,840 --> 00:01:09,240
So they're going to give us $10 of trial credit

30672
00:01:09,300 --> 00:01:14,100
and we can test out all of the API and use any of their features.

30673
00:01:14,730 --> 00:01:17,700
First, go ahead and click on, get started for free,

30674
00:01:19,350 --> 00:01:23,160
and you'll need to sign up to get a free Twilio account.

30675
00:01:23,460 --> 00:01:26,280
No credit card required. Now,

30676
00:01:26,310 --> 00:01:28,980
if you don't want to learn how to send a text message to yourself,

30677
00:01:29,220 --> 00:01:31,710
that's also perfectly fine. You don't have to sign up.

30678
00:01:31,740 --> 00:01:35,430
You can just do what we did previously using email.

30679
00:01:36,240 --> 00:01:37,860
Once you've signed up with Twilio,

30680
00:01:37,890 --> 00:01:42,630
you'll have to confirm your email and also confirm your actual phone number.

30681
00:01:43,890 --> 00:01:48,000
Once you've completed confirming your email and your phone number,

30682
00:01:48,330 --> 00:01:50,520
then it's going to take you to the console

30683
00:01:50,580 --> 00:01:53,880
and it's going to ask you a few questions. Do you write code? Yes,

30684
00:01:53,880 --> 00:01:57,060
of course we do. What's your preferred language? Python.

30685
00:01:57,570 --> 00:01:59,370
And what's your goal today? Well,

30686
00:01:59,370 --> 00:02:03,690
we're going to use Twilio in a project. And the first thing we want to do is to

30687
00:02:03,690 --> 00:02:05,520
send or receive SMS.

30688
00:02:06,810 --> 00:02:11,810
So now it's going to take us to our Twilio project dashboard and it starts off

30689
00:02:13,170 --> 00:02:15,540
by giving us some trial money.

30690
00:02:15,960 --> 00:02:20,960
So this is the money that we can use to test out and use the Twilio API.

30691
00:02:22,560 --> 00:02:26,250
Let's first start by clicking on get a trial number,

30692
00:02:26,940 --> 00:02:31,440
and it's going to generate for you a automatic number from the US.

30693
00:02:32,070 --> 00:02:33,000
Now, if you want to,

30694
00:02:33,000 --> 00:02:38,000
you can buy a number from a different country and you can start typing any of

30695
00:02:38,340 --> 00:02:40,350
these numbers. But in our case,

30696
00:02:40,350 --> 00:02:43,050
it doesn't actually matter where the number is from.

30697
00:02:43,350 --> 00:02:48,350
We can simply just get the default number and click on choose this number.

30698
00:02:51,810 --> 00:02:56,810
So now we have a new phone number based in the US. We're ready to click done and

30699
00:02:57,330 --> 00:03:02,200
start using that Twilio number to send ourselves some SMS messages.

30700
00:03:02,920 --> 00:03:06,700
Now we're going ahead over to docs and we're going to go over to QuickStarts.

30701
00:03:08,260 --> 00:03:12,970
Now, what we want to do is to follow this guide, the programmable SMS

30702
00:03:12,970 --> 00:03:16,810
quick start, in order to start sending SMS messages.

30703
00:03:17,320 --> 00:03:20,710
So we're going to click on the Python section of that Quickstart,

30704
00:03:21,130 --> 00:03:22,300
and you can see on the right,

30705
00:03:22,660 --> 00:03:27,430
it gives us the example code that we need to implement in order to make this

30706
00:03:27,460 --> 00:03:28,293
work.

30707
00:03:28,840 --> 00:03:33,840
The first thing we need to do is to download the Twilio library in order to use

30708
00:03:33,940 --> 00:03:36,310
it to import this client class.

30709
00:03:36,880 --> 00:03:39,970
Let's go ahead and copy this into our project.

30710
00:03:40,480 --> 00:03:43,630
So right below where we've got import requests,

30711
00:03:44,110 --> 00:03:48,040
let's go ahead and paste this line of code that we copied.

30712
00:03:48,490 --> 00:03:51,070
And you'll notice that it has some red underlines.

30713
00:03:51,340 --> 00:03:54,760
This is because we need to install this Twilio module.

30714
00:03:55,090 --> 00:03:57,550
So clicking on that underlined Twilio,

30715
00:03:57,580 --> 00:04:01,030
we can click on the red light bulb and install this package.

30716
00:04:01,840 --> 00:04:02,860
Once that's done,

30717
00:04:02,860 --> 00:04:07,660
all of the errors should go away and we can now start using this client class.

30718
00:04:08,380 --> 00:04:10,480
Going back to the example code.

30719
00:04:10,870 --> 00:04:13,390
We need to copy down our account

30720
00:04:13,390 --> 00:04:16,060
sid and our auth token.

30721
00:04:16,540 --> 00:04:20,079
We can get these details from the Twilio dashboard.

30722
00:04:20,529 --> 00:04:25,530
Notice here that this account sid is basically the identification for my

30723
00:04:26,290 --> 00:04:30,820
Twilio account. And the auth token we'll need to get from the dashboard.

30724
00:04:31,540 --> 00:04:34,090
If we go to the console here on the top right,

30725
00:04:35,800 --> 00:04:38,830
and we copy this auth token here,

30726
00:04:39,190 --> 00:04:41,230
or you can click on show to see it,

30727
00:04:42,040 --> 00:04:46,660
then we can paste it in here and replace this auth token.

30728
00:04:47,290 --> 00:04:49,480
And just for consistency sake,

30729
00:04:49,510 --> 00:04:52,780
I'm going to change this single quote to double quote.

30730
00:04:54,160 --> 00:04:58,390
So these are both strings. Now, as I mentioned before,

30731
00:04:58,420 --> 00:05:02,710
these IDs that you see on screen are not going to work for you.

30732
00:05:03,040 --> 00:05:08,020
So make sure that you've actually logged on and confirmed all your details

30733
00:05:08,200 --> 00:05:11,560
so you can get your own account sid and auth token.

30734
00:05:13,090 --> 00:05:17,410
Now let's head back to our quick start and we've done all of this.

30735
00:05:17,980 --> 00:05:22,980
What we need to do now is to set up a Twilio client using our account sid and

30736
00:05:24,040 --> 00:05:24,873
auth token.

30737
00:05:25,600 --> 00:05:29,590
Let's go ahead and create our client at the point where we want to send

30738
00:05:29,590 --> 00:05:31,750
ourselves a SMS message.

30739
00:05:32,170 --> 00:05:36,430
So I'm going to delete all of this. And instead of the print statement,

30740
00:05:36,700 --> 00:05:39,790
we're going to set up our Twilio client. Next,

30741
00:05:39,820 --> 00:05:41,710
we're going to create our message.

30742
00:05:41,800 --> 00:05:44,920
So this is the message that we're going to send ourselves.

30743
00:05:45,550 --> 00:05:47,950
The part that we need to change is the body.

30744
00:05:48,040 --> 00:05:50,740
So this is the text that we're going to send ourselves.

30745
00:05:51,280 --> 00:05:52,690
And then we're going to change the

30746
00:05:52,690 --> 00:05:57,690
from field to the telephone number that we got from Twilio and the to

30747
00:05:58,040 --> 00:06:02,030
number to the telephone number that we signed up with Twilio with.

30748
00:06:02,360 --> 00:06:06,800
So let's do one thing at a time. The message that I want to send myself is

30749
00:06:07,750 --> 00:06:08,583
um,

30750
00:06:11,650 --> 00:06:12,730
As always on a Mac,

30751
00:06:12,760 --> 00:06:16,510
you can go to edit emojis and symbols to pull up the emoji keyboard.

30752
00:06:16,840 --> 00:06:18,070
If you were in Windows or Linux,

30753
00:06:18,130 --> 00:06:22,270
you can simply just head over to Google and search for an umbrella emoji and

30754
00:06:22,270 --> 00:06:25,420
paste it in here. That's our message done.

30755
00:06:25,810 --> 00:06:30,810
The next step is to figure out what is the telephone number that is going to be

30756
00:06:31,180 --> 00:06:36,130
the sender's telephone number. Going back to our Twilio dashboard,

30757
00:06:36,580 --> 00:06:39,460
we're going to copy this trial number here

30758
00:06:40,330 --> 00:06:44,770
and we're going to paste it in the from field as a string.

30759
00:06:45,610 --> 00:06:50,590
The next thing is the to, so this is who the message is going to be sent to.

30760
00:06:51,130 --> 00:06:56,130
This has to be the phone number that you used to sign up to Twilio. On the

30761
00:06:56,800 --> 00:07:01,360
Twilio trial account, you can send messages and make calls to verified numbers.

30762
00:07:02,020 --> 00:07:05,410
And you can add verified numbers by clicking on this plus button

30763
00:07:05,920 --> 00:07:09,820
and you can enter somebody's phone numbers, so your friends or family,

30764
00:07:10,180 --> 00:07:14,530
but you have to be able to receive a message or receive a call in order to

30765
00:07:14,530 --> 00:07:19,330
verify that you actually own that number, or you have access to that number.

30766
00:07:21,100 --> 00:07:26,100
Any of the numbers that you see here under verified caller IDs can be used in

30767
00:07:26,140 --> 00:07:26,973
your code.

30768
00:07:27,580 --> 00:07:32,470
Go ahead and replace this part where it says to with your verified number.

30769
00:07:33,760 --> 00:07:34,780
Now, finally,

30770
00:07:34,780 --> 00:07:39,780
it asks us to print the message that we created here .sid.

30771
00:07:40,540 --> 00:07:44,920
And basically what it means is that once this message has an ID created,

30772
00:07:44,980 --> 00:07:49,720
it means it was sent successfully. Instead of printing the message sid,

30773
00:07:49,750 --> 00:07:53,020
we're going to print the message status instead

30774
00:07:53,560 --> 00:07:56,560
just to make sure that it was actually sent successfully.

30775
00:07:57,190 --> 00:08:01,090
All of this code is indented inside the will_rain block

30776
00:08:01,150 --> 00:08:04,990
and this is what's going to be triggered if indeed it will rain today.

30777
00:08:06,400 --> 00:08:10,240
Now let's go ahead and test this. But before we can test it,

30778
00:08:10,270 --> 00:08:13,210
we have to find somewhere that's actually raining.

30779
00:08:13,630 --> 00:08:17,170
It seems like people in Bern are getting quite a bit of rainfall.

30780
00:08:17,200 --> 00:08:22,200
So let's update our latitude and longitude to Bern in Switzerland.

30781
00:08:27,760 --> 00:08:28,180
Right.

30782
00:08:28,180 --> 00:08:29,920
Now that we've got somewhere that's raining,

30783
00:08:30,040 --> 00:08:35,039
let's go ahead and run our code and let's take a look at what happens on the

30784
00:08:35,260 --> 00:08:37,330
phone. There you have it.

30785
00:08:37,600 --> 00:08:40,929
We've got our message sent from our Twilio trial account.

30786
00:08:41,200 --> 00:08:45,460
It's going to rain today. Remember to bring an umbrella. Now, of course,

30787
00:08:45,460 --> 00:08:49,000
you'll be able to get rid of this part where it says sent from your Twilio trial

30788
00:08:49,000 --> 00:08:53,830
account if you sign up for an actual account. But for all intents and purposes,

30789
00:08:53,860 --> 00:08:58,860
this is working perfectly and we're now able to receive an SMS when the weather condition

30790
00:08:59,640 --> 00:09:02,460
in the next 12 hours contains some rain.

30791
00:09:03,420 --> 00:09:08,420
So the very last thing we have to do is set up our Python script to run every

30792
00:09:09,180 --> 00:09:10,650
morning at 7:00 AM.


30793
00:00:00,480 --> 00:00:04,980
Now that we've tested our code and we've managed to get it working locally,

30794
00:00:05,310 --> 00:00:10,310
the next step is to put our script online so that it can be run on schedule and

30795
00:00:11,070 --> 00:00:15,270
we don't have to manually open up PyCharm and run it every morning at 7:00 AM.

30796
00:00:15,960 --> 00:00:18,660
How do we do this? Well, we're going to use Python anywhere,

30797
00:00:18,720 --> 00:00:23,310
the same service that we use before when we created the automatic birthday

30798
00:00:23,310 --> 00:00:26,370
wisher. Now, the first thing we're going to do is of course,

30799
00:00:26,400 --> 00:00:29,940
log into the service and we're going to delete all of our previous files.

30800
00:00:30,270 --> 00:00:35,270
So that includes the letter template folder and also the main.

30801
00:00:35,340 --> 00:00:40,200
py and the birthdays.csv. Now,

30802
00:00:40,230 --> 00:00:44,070
instead of the previous main.py, we're going to upload our latest

30803
00:00:44,100 --> 00:00:44,933
main.py.

30804
00:00:45,270 --> 00:00:49,170
So let's go ahead and locate this in our computer,

30805
00:00:50,400 --> 00:00:53,430
and then we're going to upload it to Python anywhere.

30806
00:00:55,680 --> 00:00:56,513
There you go.

30807
00:00:56,880 --> 00:01:01,440
Now let's open up this file and click bash console here.

30808
00:01:02,250 --> 00:01:05,069
So that's going to create our console down at the bottom.

30809
00:01:07,080 --> 00:01:11,790
And once it's ready, like this, we can enter the command to run this code.

30810
00:01:11,910 --> 00:01:15,180
So it's pythone and then its the name of our file,

30811
00:01:15,180 --> 00:01:17,070
which is main.py.

30812
00:01:17,820 --> 00:01:20,790
And because it's directly within my users folder,

30813
00:01:21,150 --> 00:01:23,760
I don't have to specify a file path to it.

30814
00:01:24,180 --> 00:01:28,590
Now I don't recommend to have your main.py nested within other folders because

30815
00:01:28,590 --> 00:01:30,900
it's going to make this a little bit more complicated.

30816
00:01:31,380 --> 00:01:35,400
So as long as you've uploaded it to the same place that I have, just straight

30817
00:01:35,400 --> 00:01:38,520
after your username, then we should be able to run this line of code

30818
00:01:40,530 --> 00:01:43,770
and we can test out whether if this code now works,

30819
00:01:43,980 --> 00:01:47,040
when it's being run from Python anywhere. Now,

30820
00:01:47,040 --> 00:01:50,880
what you'll see instead of the message status however,

30821
00:01:51,120 --> 00:01:56,120
is a exception and it's a connection error. And the connection error tells us

30822
00:01:57,360 --> 00:02:00,360
something about this API Twilio

30823
00:02:00,420 --> 00:02:03,330
max retries exceeded with URL.

30824
00:02:04,410 --> 00:02:07,710
So if we go ahead and highlight that, which will copy it,

30825
00:02:08,400 --> 00:02:11,670
then we can paste it into Google and figure out what's wrong.

30826
00:02:12,570 --> 00:02:17,570
The first post you can see is a post from help at Python anywhere.

30827
00:02:18,120 --> 00:02:21,120
And they've created this post to tell you how to get Twilio

30828
00:02:21,120 --> 00:02:24,150
to work on free accounts with Python

30829
00:02:24,150 --> 00:02:28,380
anywhere. As they say, if you're trying to use Twilio on a Python anywhere

30830
00:02:28,380 --> 00:02:31,890
free account, you're going to run into an error that looks something like this,

30831
00:02:32,160 --> 00:02:33,720
which is exactly what we got.

30832
00:02:33,840 --> 00:02:37,260
And that's where Google search picked it up to show us this article.

30833
00:02:38,280 --> 00:02:42,750
The reason for this is because the Twilio API basically needs to be told how to

30834
00:02:42,750 --> 00:02:46,650
connect to the proxy servers that free accounts use.

30835
00:02:47,250 --> 00:02:49,500
When you have a paid account on Python

30836
00:02:49,500 --> 00:02:53,160
anywhere, you have an actual address to your dedicated server.

30837
00:02:53,550 --> 00:02:57,000
But when you only sign up with a free account like we have here,

30838
00:02:57,270 --> 00:02:59,290
we only get a proxy server.

30839
00:02:59,560 --> 00:03:02,890
So we need to change the code a little bit in order for it to work.

30840
00:03:03,910 --> 00:03:08,200
Even though we are actually using the latest version of Twilio, from testing

30841
00:03:08,230 --> 00:03:11,650
I found that this code doesn't seem to work for me. Instead,

30842
00:03:11,680 --> 00:03:15,910
we have to use this version of the fix that they've specified here.

30843
00:03:16,660 --> 00:03:21,370
So the only difference from their version of code and what we have here in our

30844
00:03:21,370 --> 00:03:25,030
main.py is three lines of code. First,

30845
00:03:25,060 --> 00:03:30,060
we have to import this class called TwilioHttpClient from the Twilio module.

30846
00:03:30,430 --> 00:03:33,880
So let's copy that and paste it below our previous lines.

30847
00:03:35,410 --> 00:03:36,400
Now, in addition,

30848
00:03:36,430 --> 00:03:41,430
we have to create a proxy client with the TwilioHttpClient class that we just

30849
00:03:42,400 --> 00:03:46,360
imported just now. So we're going to put that in our if statement

30850
00:03:46,720 --> 00:03:49,030
when we're about to create our SMS message.

30851
00:03:49,840 --> 00:03:54,310
The last step is where we have our client class being created,

30852
00:03:54,610 --> 00:03:59,610
we have to set this HTTP client parameter to the proxy client that we created

30853
00:04:00,010 --> 00:04:03,070
just now. That's going to go right here.

30854
00:04:04,000 --> 00:04:06,190
The rest of the code we can leave as is,

30855
00:04:06,610 --> 00:04:10,450
and we can simply hit save to update that code.

30856
00:04:11,560 --> 00:04:15,700
Now, once we've typed all of that code, you can see we get an error in here.

30857
00:04:15,910 --> 00:04:17,890
It says undefined name 'os'.

30858
00:04:18,250 --> 00:04:22,029
And that's because this os actually comes from an os module.

30859
00:04:22,510 --> 00:04:26,020
So we should import that in order for this error to go away.

30860
00:04:27,070 --> 00:04:30,040
So let's hit save again and you can see,

30861
00:04:30,070 --> 00:04:32,590
we are now free of warnings and errors.

30862
00:04:33,040 --> 00:04:37,570
We're now ready to go into our console and to run the same command again,

30863
00:04:37,630 --> 00:04:41,950
which is python3 and then it's the name of our file, main.py.

30864
00:04:42,580 --> 00:04:46,390
So now when we hit enter, you can see we get back the message queued,

30865
00:04:46,450 --> 00:04:48,010
which comes from this print statement

30866
00:04:48,370 --> 00:04:52,150
and that's because the status of our message has now been queued.

30867
00:04:53,200 --> 00:04:57,100
And you can see I've now received the message from Twilio.

30868
00:04:57,490 --> 00:04:58,270
And this is of course,

30869
00:04:58,270 --> 00:05:02,920
because my main.py was run on the Python anywhere servers instead of from my

30870
00:05:02,920 --> 00:05:06,850
local computer. So now that we've confirmed that this works,

30871
00:05:06,940 --> 00:05:11,940
we can now finally go back to Python anywhere and go to the Tasks section in

30872
00:05:14,500 --> 00:05:17,800
order to set up our task. Now here,

30873
00:05:17,830 --> 00:05:22,150
I've still got my previous task set up when we created the automatic birthday

30874
00:05:22,150 --> 00:05:26,560
wisher. Now because I'm demoing this with a free Python anywhere account,

30875
00:05:27,010 --> 00:05:31,480
I can only create one scheduled task. If I start paying them,

30876
00:05:31,570 --> 00:05:34,990
then I can schedule as many as I want and they never expire.

30877
00:05:35,560 --> 00:05:37,000
But because we're just learning here,

30878
00:05:37,330 --> 00:05:40,870
I don't want you to commit to a paid account just to be able to see how it

30879
00:05:40,870 --> 00:05:44,530
works. So we're going to use the same schedule task. Now,

30880
00:05:44,530 --> 00:05:47,680
if you don't have any task scheduled, just go ahead and create one.

30881
00:05:48,010 --> 00:05:50,920
And the command is going to be the same. It's python3

30882
00:05:51,190 --> 00:05:52,090
and then it's running

30883
00:05:52,120 --> 00:05:55,600
our main.py. So the same command that you entered previously.

30884
00:05:56,230 --> 00:06:00,560
And we're going to set the frequency to daily and it's going to run at 7:00 AM

30885
00:06:00,560 --> 00:06:03,590
every day. In order to test this,

30886
00:06:03,620 --> 00:06:08,620
I'm going to change the time from 7:00 AM to the current time.

30887
00:06:08,660 --> 00:06:12,830
So the current server time is registering as 10:01, but in fact,

30888
00:06:12,830 --> 00:06:14,240
I'm actually seeing 02.

30889
00:06:14,270 --> 00:06:19,270
So I'm going to change that to 10:03 and then hit the checkmark.

30890
00:06:20,840 --> 00:06:25,790
And now I'm going to wait patiently to see if that is going to be triggered

30891
00:06:25,820 --> 00:06:28,340
automatically from the schedule tasks

30892
00:06:28,610 --> 00:06:32,720
and I get the SMS sent to my phone. And there you have it.

30893
00:06:33,230 --> 00:06:37,640
This is now being sent to me from Twilio because we made the API call,

30894
00:06:37,910 --> 00:06:41,660
but it's being sent because I've got this scheduled task

30895
00:06:41,840 --> 00:06:46,280
which is calling this command in order to run our main.py

30896
00:06:46,670 --> 00:06:49,430
and it's being done at a time which I've specified,

30897
00:06:49,790 --> 00:06:54,110
which in fact, I want to happen at probably 7:00 AM in the morning.

30898
00:06:54,530 --> 00:06:56,750
Now notice that this is UTC time.

30899
00:06:56,770 --> 00:07:01,400
So if you want to convert the UTC time to your local time,

30900
00:07:01,430 --> 00:07:04,460
so at the moment, we're on British summer time where I'm at,

30901
00:07:04,970 --> 00:07:09,290
then you can type this into Google and change this to whatever time zone you're

30902
00:07:09,290 --> 00:07:10,123
in.

30903
00:07:10,160 --> 00:07:15,160
And that way you can figure out what time UTC is relative to your local time.

30904
00:07:17,030 --> 00:07:19,220
In my case, it's just one hour behind.

30905
00:07:19,430 --> 00:07:23,960
So if I want this to run at 7:00 AM my local time that I have to change this to

30906
00:07:23,960 --> 00:07:28,960
six o'clock. And now that's going to run every day at 6:00 AM without me needing

30907
00:07:29,060 --> 00:07:32,810
to do anything and I'm going to get my notification on time

30908
00:07:33,200 --> 00:07:34,400
if it's going to rain.


30909
00:00:00,030 --> 00:00:01,800
Now that we've got our app working,

30910
00:00:02,040 --> 00:00:04,770
you might think we've reached the end of today's lessons,

30911
00:00:05,070 --> 00:00:08,010
but there's just one final thing I want to talk to you about.

30912
00:00:08,550 --> 00:00:12,210
And that is the environment. Not the environment as a whole,

30913
00:00:12,330 --> 00:00:15,510
but more precisely environment variables.

30914
00:00:16,260 --> 00:00:18,510
Now what our environment variables anyways?

30915
00:00:18,870 --> 00:00:20,760
If you go into your PyCharm project

30916
00:00:20,880 --> 00:00:24,780
and you go into this tab where it says "Terminal", here

30917
00:00:24,810 --> 00:00:27,840
if you type in env (set on Windows) and hit "Enter",

30918
00:00:28,170 --> 00:00:31,020
you can see a whole bunch of variables.

30919
00:00:31,050 --> 00:00:35,250
So you've got a key and a value

30920
00:00:35,760 --> 00:00:39,270
and in between there is just a single equal (=) sign.

30921
00:00:39,960 --> 00:00:44,790
So these are the different variables that are set in the environment in which

30922
00:00:44,820 --> 00:00:45,720
your code is run.

30923
00:00:46,350 --> 00:00:49,980
These variables have values which are strings

30924
00:00:50,400 --> 00:00:54,300
which can be used in our applications or our code.

30925
00:00:55,230 --> 00:00:56,490
Now inside Python

30926
00:00:56,490 --> 00:01:00,750
anywhere you can also type env and you can see some slightly different

30927
00:01:00,750 --> 00:01:05,099
environment variables which are relative to the Python anywhere environment.

30928
00:01:05,580 --> 00:01:09,660
What exactly all these environment variables used for? Well,

30929
00:01:09,840 --> 00:01:14,370
there's two major use cases. One is for convenience.

30930
00:01:14,970 --> 00:01:18,690
Normally when you deploy a large application,

30931
00:01:19,140 --> 00:01:23,340
the process is quite complicated. And once you've done it,

30932
00:01:23,670 --> 00:01:28,230
you kind of don't want to mess around with the code base and update the code

30933
00:01:28,230 --> 00:01:31,890
files like your main.py for example. Instead,

30934
00:01:31,920 --> 00:01:36,450
you could have these environment variables, which you can change. For example,

30935
00:01:36,510 --> 00:01:40,260
if you had an application that was sending you emails out to your clients,

30936
00:01:40,500 --> 00:01:43,500
then your client base emails might change day to day.

30937
00:01:44,070 --> 00:01:48,840
So certain variables that are being used in your code base could be set as

30938
00:01:48,840 --> 00:01:49,980
environment variables

30939
00:01:50,220 --> 00:01:53,640
and you can modify those variables without having to touch the code.

30940
00:01:54,510 --> 00:01:57,480
A second reason might be for security.

30941
00:01:58,140 --> 00:01:59,700
So when you're developing software,

30942
00:01:59,730 --> 00:02:04,110
you might be uploading your code based somewhere, for example

30943
00:02:04,110 --> 00:02:07,590
to store it online or to a service like PythonAnywhere.

30944
00:02:08,520 --> 00:02:13,440
And it's usually not a good idea to have things like your authentication keys or

30945
00:02:13,440 --> 00:02:18,440
your API keys to be stored in the same place as the rest of your code.

30946
00:02:19,140 --> 00:02:21,180
That's where environment variables come in.

30947
00:02:21,420 --> 00:02:26,420
So environment variables essentially allow us to separate out where we store

30948
00:02:26,490 --> 00:02:28,590
our keys, our secret stuff,

30949
00:02:28,800 --> 00:02:33,480
and various other variables away from where our code base is located.

30950
00:02:34,140 --> 00:02:34,973
In our case,

30951
00:02:35,010 --> 00:02:39,270
it doesn't really matter because we haven't got a paid account anywhere in here.

30952
00:02:39,750 --> 00:02:44,370
It doesn't really matter if somebody steals our auth token or our API key,

30953
00:02:44,490 --> 00:02:49,170
because none of those are linked to our payment details. Now, however,

30954
00:02:49,170 --> 00:02:53,130
if we were to upgrade our accounts on open weather map's API

30955
00:02:53,400 --> 00:02:54,900
or on Twilio's API,

30956
00:02:55,200 --> 00:03:00,200
then we definitely want to keep these two things secret; auth token and the API

30957
00:03:00,790 --> 00:03:01,623
key.

30958
00:03:01,810 --> 00:03:05,860
Instead of having it located in the same place where we've got our code base

30959
00:03:06,310 --> 00:03:10,210
which means you might accidentally upload it somewhere on the internet where

30960
00:03:10,210 --> 00:03:12,610
other people can see it, instead,

30961
00:03:12,640 --> 00:03:15,910
we can store these two things as environment variables.

30962
00:03:16,600 --> 00:03:21,340
We can create an environment variable by simply typing export

30963
00:03:21,760 --> 00:03:26,050
and then the name of the variable which I'll call OWM

30964
00:03:26,410 --> 00:03:31,270
_API_KEY. And then it's really important that we have no spaces,

30965
00:03:31,480 --> 00:03:33,640
but just a single equal sign.

30966
00:03:34,360 --> 00:03:37,720
And then we're going to store everything that's in between the quotation marks.

30967
00:03:38,020 --> 00:03:39,880
So I'm going to copy that from over here,

30968
00:03:40,900 --> 00:03:45,430
and I'm going to paste that in here. Once I've exported that

30969
00:03:46,180 --> 00:03:49,330
and then if I hit "env" again, you'll see

30970
00:03:49,330 --> 00:03:51,370
now in this updated environment

30971
00:03:51,430 --> 00:03:55,090
you can see that environment variable go in right there.

30972
00:03:55,510 --> 00:04:00,100
And now we can tap into that environment variable in any of the code that we run

30973
00:04:00,160 --> 00:04:05,160
from this particular environment. To do that we have to use this os module that

30974
00:04:05,740 --> 00:04:06,573
we've already got.

30975
00:04:06,940 --> 00:04:10,780
So I'm going to delete everything that's currently stored in the API key.

30976
00:04:11,230 --> 00:04:15,250
And instead, I'm going to tap into os.environ,

30977
00:04:16,029 --> 00:04:21,029
and then I'm going to use a method called get to get the value of a particular

30978
00:04:21,070 --> 00:04:22,060
environment variable.

30979
00:04:22,960 --> 00:04:26,500
The name is everything that's before the equal sign.

30980
00:04:26,980 --> 00:04:31,960
So let's go ahead and paste it in here. And now when I run this code,

30981
00:04:32,320 --> 00:04:36,010
so using python3 and then the name of the file,

30982
00:04:36,760 --> 00:04:41,470
you can see that it successfully runs queuing our message into Twilio.

30983
00:04:42,250 --> 00:04:45,730
Now go ahead and do the same thing with the auth token.

30984
00:04:46,360 --> 00:04:48,520
You want to save this as an environment

30985
00:04:48,520 --> 00:04:52,510
variable code auth_token in all caps,

30986
00:04:52,900 --> 00:04:54,430
similar to what we've got here.

30987
00:04:55,060 --> 00:04:58,390
And you want to store this value in the environment variable.

30988
00:04:58,630 --> 00:05:02,850
Pause the video and give that a go. All right.

30989
00:05:02,880 --> 00:05:06,090
So we're going to follow the exact same thing that we did before. We use the

30990
00:05:06,090 --> 00:05:10,920
export keyword and then we type in the name of the environment variable

30991
00:05:11,190 --> 00:05:15,420
which is going to be AUTH_TOKEN. And then really importantly,

30992
00:05:15,450 --> 00:05:17,670
we just have an equal sign, no spaces,

30993
00:05:18,090 --> 00:05:21,840
and we're going to store this value without the double-quotes

30994
00:05:22,440 --> 00:05:26,970
and we're going to put it in here. Now in our environment variables,

30995
00:05:27,000 --> 00:05:30,120
you can see we've got our open weather map API key.

30996
00:05:30,540 --> 00:05:35,280
And if we scroll up a bit more, you can see our auth token as well.

30997
00:05:36,750 --> 00:05:41,750
So now we can replace this string with our os.environ.get

30998
00:05:43,560 --> 00:05:47,580
and then we pass in the name of the key which is AUTH_TOKEN.

30999
00:05:48,630 --> 00:05:53,630
And now let's run our code again with python3 main.py.

31000
00:05:54,090 --> 00:05:56,580
And you can see it's still works as before.

31001
00:05:57,320 --> 00:06:01,730
But now if somebody comes across this particular code base on the internet,

31002
00:06:02,030 --> 00:06:07,030
they won't be able to use our Twilio account or our open weather map account

31003
00:06:07,460 --> 00:06:12,350
because both of these keys are now hidden. Let's go ahead and hit save.

31004
00:06:13,760 --> 00:06:15,410
So now we're going to do the same thing,

31005
00:06:15,680 --> 00:06:19,340
but at the point where we run our code from our task scheduler.

31006
00:06:19,880 --> 00:06:24,590
So go ahead and right-click on this snake and then open the link in a new tab so

31007
00:06:24,590 --> 00:06:27,470
that we can go to our tasks section.

31008
00:06:27,920 --> 00:06:32,480
And here we're going to edit our command. Instead of just running Python main

31009
00:06:32,480 --> 00:06:36,740
.py, we're going to export those two environment variables.

31010
00:06:37,280 --> 00:06:41,810
This is why we've got two screens open up so we can actually copy the actual

31011
00:06:41,900 --> 00:06:46,430
values. The first value is going to be our open weather map

31012
00:06:46,460 --> 00:06:49,790
API key. So I'm going to copy that. And then here,

31013
00:06:49,820 --> 00:06:54,470
I'm going to write export and then paste in that first key. Now,

31014
00:06:54,500 --> 00:06:58,790
afterward, I'm going to use a semi-colon to denote a new line

31015
00:06:59,210 --> 00:07:03,140
and then I'm going to export the next key. Scrolling up,

31016
00:07:03,170 --> 00:07:07,220
we can see our auth token right here so we're going to copy that as well

31017
00:07:07,550 --> 00:07:11,330
and we're going to export that as the other environment variable.

31018
00:07:11,780 --> 00:07:14,480
And then finally, we're going to cap it off with a semicolon.

31019
00:07:14,930 --> 00:07:18,860
So now you should have your export OWM_API_KEY

31020
00:07:19,430 --> 00:07:23,750
and then your exporting your auth token as well. And then finally,

31021
00:07:23,750 --> 00:07:26,960
on the last line, we're running our python3 main.py.

31022
00:07:27,770 --> 00:07:31,550
Now let's change this to run at the current time.

31023
00:07:31,550 --> 00:07:35,690
So it's going to be UTC time which happens to be 10 o'clock

31024
00:07:35,720 --> 00:07:38,600
and then instead of 46, it's now 48

31025
00:07:38,600 --> 00:07:43,340
so I'm going to change that to 49. And then I'm gonna hit the tick.

31026
00:07:44,060 --> 00:07:47,120
And now we're going to wait to see if it actually works

31027
00:07:47,330 --> 00:07:51,410
even though we've taken out the API keys from our main.py

31028
00:07:51,650 --> 00:07:53,960
because we're exporting it in our command.

31029
00:07:54,200 --> 00:07:56,870
Let's see if we still get the notification message.

31030
00:07:58,490 --> 00:08:01,310
There you have it. It's still working as before.

31031
00:08:02,180 --> 00:08:04,760
But now this is invisible to people

31032
00:08:05,180 --> 00:08:07,910
if they happen to access our main.py.

31033
00:08:08,510 --> 00:08:12,020
Now don't worry. The service of Python anywhere are pretty secure.

31034
00:08:12,050 --> 00:08:14,000
Nobody's really going to hack into your account

31035
00:08:14,300 --> 00:08:16,130
just to look into your main.py.

31036
00:08:16,760 --> 00:08:20,390
The bigger problem is when you upload your own code to places like Git

31037
00:08:20,390 --> 00:08:21,890
Hub or a BitBucket,

31038
00:08:22,160 --> 00:08:25,580
basically places that are essentially a Dropbox for code.

31039
00:08:26,150 --> 00:08:29,120
And when you have it on there, because your code could be public,

31040
00:08:29,420 --> 00:08:31,280
that's where the problem happens.

31041
00:08:31,580 --> 00:08:35,659
If people look at your code file and they see that you've got API keys in there,

31042
00:08:35,659 --> 00:08:40,130
then they might steal them. So whenever you're uploading your code publicly,

31043
00:08:40,309 --> 00:08:45,310
always be careful that you strip it of all of the API keys and instead use

31044
00:08:45,560 --> 00:08:50,450
environment variables like we have here to pull it from the environment.

31045
00:08:51,440 --> 00:08:56,070
All that's left to do for you is to update your latitude and longitude to your

31046
00:08:56,070 --> 00:09:00,810
actual local latitude and longitude instead of the rainy place that we're

31047
00:09:00,810 --> 00:09:05,550
testing. And you've now completed the rain alert application.

31048
00:09:06,210 --> 00:09:08,970
Now I've showed you quite a few different APIs,

31049
00:09:09,000 --> 00:09:12,300
but there's a whole world of APIs for you to explore.

31050
00:09:12,810 --> 00:09:16,680
And if you have the patience to read their documentation and understand how to

31051
00:09:16,680 --> 00:09:20,700
work with their APIs, then you now know how to work with their endpoints,

31052
00:09:20,940 --> 00:09:25,560
how to pass parameters and also how to authenticate yourself with their servers.

31053
00:09:26,100 --> 00:09:31,100
So here's a list of fun APIs that you can use to build applications with.

31054
00:09:32,700 --> 00:09:37,700
I've shown you how you can make a rain alert and send yourself SMS messages,

31055
00:09:38,520 --> 00:09:43,110
or how to get the location of the ISS or the sunrise and sunset times,

31056
00:09:43,410 --> 00:09:48,090
but there's a whole bunch of other APIs for you to explore. For example,

31057
00:09:48,090 --> 00:09:50,460
things like the open movie database API,

31058
00:09:50,910 --> 00:09:53,970
which contains a whole bunch of movie related data,

31059
00:09:54,390 --> 00:09:59,390
or looking up songs and artists using the Spotify API and a whole lot more.

31060
00:10:00,840 --> 00:10:02,760
So I'll leave you to explore that.

31061
00:10:03,090 --> 00:10:06,000
And if you come up with something innovative and interesting,

31062
00:10:06,240 --> 00:10:10,380
be sure to share it with the rest of us in the Q&A below this lesson so that

31063
00:10:10,380 --> 00:10:12,810
we can all check it out and admire your hard work.



31064
00:00:00,090 --> 00:00:00,720
Hey guys,

31065
00:00:00,720 --> 00:00:05,720
it's Angela here and welcome to Day 36 of 100 Days of Code. Today

31066
00:00:06,150 --> 00:00:08,370
we've got a fun project for you.

31067
00:00:08,550 --> 00:00:12,720
We're going to be building a stock news monitoring project.

31068
00:00:13,410 --> 00:00:16,650
So I don't know how many of you guys trade stocks out there,

31069
00:00:16,800 --> 00:00:19,110
but I've recently started learning about it.

31070
00:00:19,350 --> 00:00:22,590
And one of the pictures that always come to my mind when I think of people

31071
00:00:22,590 --> 00:00:25,440
trading stocks is something like this,

31072
00:00:25,890 --> 00:00:28,230
where if you will sit in front of a million screens,

31073
00:00:28,260 --> 00:00:31,020
looking at all of the data and all of the news.

31074
00:00:31,800 --> 00:00:33,990
Now I did a bit of research into this

31075
00:00:34,050 --> 00:00:39,050
and it seems like a lot of the people who trade stocks professionally have

31076
00:00:39,110 --> 00:00:43,700
access to what's that a Bloomberg terminal, which looks something like this.

31077
00:00:43,790 --> 00:00:45,890
And it provides you with a number of things,

31078
00:00:46,370 --> 00:00:49,640
the current stock prices of whichever companies you're looking at,

31079
00:00:50,150 --> 00:00:55,130
and also the breaking news that's relevant to those companies. So 

31080
00:00:55,130 --> 00:00:57,440
depending on whether if they had some good news

31081
00:00:57,440 --> 00:01:00,680
say they earned a lot of money in the last quarter, or

31082
00:01:00,690 --> 00:01:04,519
they built a really great product or they developed a new vaccine.

31083
00:01:04,760 --> 00:01:09,760
Then obviously you can imagine the price of their company's stock go up or down

31084
00:01:11,540 --> 00:01:16,540
depending on the type of news that comes out. And finally these platforms

31085
00:01:17,450 --> 00:01:22,450
also give you the ability to alert you when relevant pieces of news happen that are

31086
00:01:23,930 --> 00:01:26,030
related to stocks that you're following.

31087
00:01:27,170 --> 00:01:32,170
So I found out for my friend that to subscribe to one of these Bloomberg

31088
00:01:33,290 --> 00:01:34,123
terminals,

31089
00:01:34,220 --> 00:01:39,220
it costs something like $24,000 a year.

31090
00:01:39,920 --> 00:01:43,160
So that was the end of that research. Um,

31091
00:01:43,190 --> 00:01:46,820
but I thought about it and I thought about the kind of things that would be

31092
00:01:46,820 --> 00:01:49,400
really useful to somebody who trades stocks.

31093
00:01:49,580 --> 00:01:54,260
And I thought about how we could turn this into a Python project.

31094
00:01:54,830 --> 00:01:56,360
So here's what's going to happen.

31095
00:01:56,600 --> 00:02:01,600
We're going to DIY our own a Bloomberg terminal or at least the parts of the

31096
00:02:01,640 --> 00:02:05,240
functionality that are quite useful. First,

31097
00:02:05,300 --> 00:02:09,500
let's take a look at what stock market data looks like. So here,

31098
00:02:09,500 --> 00:02:14,500
I've got a website up called tradingview.com and I'm looking at the large cap

31099
00:02:15,950 --> 00:02:16,783
companies.

31100
00:02:17,120 --> 00:02:20,840
So these are well known companies that you've probably heard of like Apple or

31101
00:02:20,840 --> 00:02:22,370
Microsoft or Amazon.

31102
00:02:22,910 --> 00:02:26,330
And let's say that we had an interest in a particular stock.

31103
00:02:26,360 --> 00:02:28,610
Let's say that we bought shares in Tesla,

31104
00:02:29,120 --> 00:02:31,340
and we want to know how it's doing. Well,

31105
00:02:31,340 --> 00:02:34,130
we could take a closer look at it and we could take a look at

31106
00:02:34,400 --> 00:02:35,840
the full featured chart.

31107
00:02:36,560 --> 00:02:41,560
And this shows us the price of the Tesla stock over the past few days.

31108
00:02:45,410 --> 00:02:49,670
Now I'm going to change the time zone here to the actual time zone of the

31109
00:02:49,670 --> 00:02:54,170
exchange. And if I change the view to one day view,

31110
00:02:54,470 --> 00:02:58,730
then you can see the points at which the market is open and when it's closed.

31111
00:02:59,110 --> 00:03:03,010
So these blue sections highlight when the market is closed.

31112
00:03:03,730 --> 00:03:07,540
Currently it's the 22nd of July. So because this day's

31113
00:03:07,540 --> 00:03:11,550
data is not yet complete, we're going to look at the previous day's data.

31114
00:03:11,580 --> 00:03:12,750
So this is yesterday.

31115
00:03:13,320 --> 00:03:18,120
And you can see that NASDAQ opens at 9:30 AM New York time

31116
00:03:18,180 --> 00:03:21,840
and it closes down at 4:00 PM on the same day.

31117
00:03:22,410 --> 00:03:24,960
And often when you're getting data on stocks,

31118
00:03:25,260 --> 00:03:30,060
you can get the price of a particular stock at the point when the market opens

31119
00:03:30,300 --> 00:03:33,120
and when the market closes. For example,

31120
00:03:33,120 --> 00:03:38,120
we could compare the price of the Tesla stock at market close yesterday.

31121
00:03:38,610 --> 00:03:43,610
So that was about $1,567 and at market close the previous day

31122
00:03:45,560 --> 00:03:48,510
so that's four o'clock on the 20th of July,

31123
00:03:48,900 --> 00:03:53,900
and that was at around $1,641.

31124
00:03:54,120 --> 00:03:59,120
So there was a big difference between the end of the 20th of July and the end of

31125
00:03:59,490 --> 00:04:03,630
the 21st of July. As a stock trader would be quite 

31126
00:04:03,630 --> 00:04:08,310
interested in these big fluctuations because it might mean that we would want to

31127
00:04:08,340 --> 00:04:12,150
buy more, or we might want to sell our stocks in Tesla.

31128
00:04:13,020 --> 00:04:14,910
When you look at a lot of these services

31129
00:04:14,940 --> 00:04:18,690
be it Bloomberg terminals or something much simpler like this,

31130
00:04:19,019 --> 00:04:21,930
they often give you a whole bunch of other data as well.

31131
00:04:23,100 --> 00:04:28,100
One of the most useful things is actually to look at the news that's related to

31132
00:04:28,350 --> 00:04:32,340
the company that you're investigating. So for example,

31133
00:04:32,340 --> 00:04:34,740
these are the current headlines for Tesla,

31134
00:04:35,250 --> 00:04:39,990
and it comes from various news sources like Reuters or my Wall Street or

31135
00:04:39,990 --> 00:04:44,850
Bloomberg. And it gives us some information to start analyzing.

31136
00:04:44,850 --> 00:04:48,480
For example, well why was there this big drop, what's the reason,

31137
00:04:48,990 --> 00:04:52,710
and there's various news sources that might tell us why. For example,

31138
00:04:52,710 --> 00:04:56,130
maybe they're experiencing problems with servicing staff,

31139
00:04:56,220 --> 00:05:00,330
or maybe as this news piece suggests, the stock is probably going to rise again.

31140
00:05:00,930 --> 00:05:02,850
So these are really interesting things

31141
00:05:02,880 --> 00:05:05,820
if we were to trade this particular stock.

31142
00:05:06,750 --> 00:05:10,350
If we were to create a Python program that's going to help us trade stocks,

31143
00:05:11,010 --> 00:05:14,010
then this is how it might work. First,

31144
00:05:14,160 --> 00:05:18,480
we're going to pull in the stock prices of the stocks that we're interested in.

31145
00:05:18,900 --> 00:05:21,810
So we would be using an API to get this data.

31146
00:05:22,560 --> 00:05:26,460
And let's say that we were monitoring the Tesla stock cause we bought some

31147
00:05:26,460 --> 00:05:29,400
shares and we want to know how it's doing. Well,

31148
00:05:29,430 --> 00:05:34,430
it might pull in the data for the price of Tesla stock that was at market close.

31149
00:05:35,220 --> 00:05:37,950
Let's say that today was March the 11th.

31150
00:05:38,250 --> 00:05:43,170
So we're pulling in yesterday's closing price and let's just say, for example,

31151
00:05:43,320 --> 00:05:44,700
it is $1,000.

31152
00:05:45,270 --> 00:05:49,320
Now the next thing our program is going to do is it's going to pull in the

31153
00:05:49,350 --> 00:05:52,020
closing price on the previous day.

31154
00:05:52,530 --> 00:05:56,760
And we're going to compare these two values. So over the course of one day,

31155
00:05:56,790 --> 00:05:59,300
what was the difference. And in this case,

31156
00:05:59,360 --> 00:06:03,890
there's a difference of a hundred dollars and the direction is up.

31157
00:06:03,950 --> 00:06:08,720
So it increased in value, right? Going from March 9th to March 10th.

31158
00:06:08,960 --> 00:06:12,260
So that's good news for us if we bought in. Now,

31159
00:06:12,320 --> 00:06:16,910
we can also calculate what is the percentage that this rise represents.

31160
00:06:16,940 --> 00:06:21,770
So if we look at this difference of a hundred dollars and calculate it as a

31161
00:06:21,770 --> 00:06:24,890
percentage of yesterday's closing price,

31162
00:06:25,160 --> 00:06:30,160
then we can see that the price on March 9th was 10% lower than on March 10th.

31163
00:06:31,340 --> 00:06:33,650
So let's say that in our Python program,

31164
00:06:34,010 --> 00:06:37,550
we set the program to run and fetch us some news

31165
00:06:37,790 --> 00:06:42,530
whenever we get a slightly extraordinary rise or an extraordinary fall.

31166
00:06:42,920 --> 00:06:46,850
So you can define that as anything you want, but let's say it's 10%.

31167
00:06:47,600 --> 00:06:52,400
If there was a difference of 10% or more between yesterday's closing price and

31168
00:06:52,400 --> 00:06:55,040
the previous day, then we want to know about it.

31169
00:06:55,910 --> 00:07:00,470
So we're going to get our API to fetch us some relevant news.

31170
00:07:01,070 --> 00:07:05,240
That way we can figure out what is the reason for this rise or what is the

31171
00:07:05,240 --> 00:07:06,350
reason for this fall.

31172
00:07:06,860 --> 00:07:11,030
And it might just turn out well because Tesla launched a new product,

31173
00:07:11,360 --> 00:07:14,240
or because they've acquired a new factory.

31174
00:07:14,480 --> 00:07:17,240
Some sort of indicator that says, well,

31175
00:07:17,240 --> 00:07:20,630
this company is going to do a lot better. Now,

31176
00:07:20,630 --> 00:07:25,630
once the stock prices have triggered this alert and we fetched the news data,

31177
00:07:26,660 --> 00:07:29,660
then we're going to send ourselves an SMS.

31178
00:07:29,930 --> 00:07:34,190
So we're going to send ourselves a message telling us what was the big

31179
00:07:34,220 --> 00:07:39,220
fluctuation that happened and what is the relevant news so that we can decide

31180
00:07:39,440 --> 00:07:41,780
there and then whether if you want to sell our stock,

31181
00:07:41,810 --> 00:07:42,950
or if we want to buy more.

31182
00:07:43,730 --> 00:07:48,440
We're aiming for messages from Twilio that look a bit like this.

31183
00:07:48,950 --> 00:07:49,610
That way

31184
00:07:49,610 --> 00:07:52,940
when you wake up in the morning and you're wondering what's happening with my

31185
00:07:52,940 --> 00:07:57,020
Tesla stock and it just so happens that over the last two days,

31186
00:07:57,110 --> 00:07:59,510
it experienced huge fluctuations,

31187
00:07:59,870 --> 00:08:04,870
then you would get sent the relevant pieces of news to help you decide and help

31188
00:08:05,270 --> 00:08:10,190
you figure out what you should do with your trades. That's the goal.

31189
00:08:10,430 --> 00:08:15,350
And the best part of this project is the fact that it's going to be mostly up to

31190
00:08:15,350 --> 00:08:17,060
you as to how you create it

31191
00:08:18,190 --> 00:08:20,350
In the course resources I've got links

31192
00:08:20,650 --> 00:08:24,100
to starting projects with the comment and hints,

31193
00:08:24,580 --> 00:08:29,020
and depending on which level of difficulty you want to choose, normal,

31194
00:08:29,020 --> 00:08:33,520
hard or extra hard, you can pick the starting project that's right for you.

31195
00:08:34,090 --> 00:08:35,710
Once you pick the starting project,

31196
00:08:35,740 --> 00:08:37,780
then you are going to work through each of the comments

31197
00:08:38,110 --> 00:08:42,280
and you're going to try and complete the functionality of this program.

31198
00:08:42,940 --> 00:08:47,200
Now I want you to spend at least a half an hour to 45 minutes working on this

31199
00:08:47,200 --> 00:08:51,580
project, just because it has quite a few APIs that you need to tap into.

31200
00:08:51,940 --> 00:08:53,440
And most importantly,

31201
00:08:53,710 --> 00:08:58,440
I want you to read through the API documentation yourself so that you can

31202
00:08:58,440 --> 00:09:02,820
understand how to work with it and how to figure out things on your own.

31203
00:09:03,210 --> 00:09:06,300
Because after all, there are millions of APIs out there

31204
00:09:06,420 --> 00:09:09,270
and if you're going to need it for a special project of your own,

31205
00:09:09,570 --> 00:09:12,870
you're going to need to go through this process that all developers go through

31206
00:09:13,050 --> 00:09:18,050
which is digging through documentation and understanding how to work with an

31207
00:09:18,240 --> 00:09:19,073
external piece of  software

31208
00:09:19,550 --> 00:09:21,350
or code.

31209
00:09:21,380 --> 00:09:25,700
That's the challenge I've set for you. Head over to the course resources now and

31210
00:09:25,700 --> 00:09:29,630
get the starting code so that you can get started working on the project.

31211
00:09:29,750 --> 00:09:30,380
Good luck.


31212
00:00:00,180 --> 00:00:02,310
Now I'm going to walk you through the solution.

31213
00:00:02,790 --> 00:00:06,870
And I want to make sure that you've actually given this a go before you look

31214
00:00:06,870 --> 00:00:10,920
through the solution, because you can watch me type in code all day long,

31215
00:00:10,950 --> 00:00:13,410
and it's still not going to get you where you want to be.

31216
00:00:13,470 --> 00:00:16,530
So make sure you've actually practiced and you've struggled.

31217
00:00:16,890 --> 00:00:18,180
Even if you get stuck,

31218
00:00:18,300 --> 00:00:22,950
it's still better than just watching the videos and seeing the code written.

31219
00:00:23,190 --> 00:00:27,210
You have to write code to get good at writing code. All right,

31220
00:00:27,210 --> 00:00:28,260
enough motivation.

31221
00:00:28,470 --> 00:00:33,470
Now I'm going to take the normal starting point to guide you through step by

31222
00:00:33,990 --> 00:00:38,640
step. Now, notice how in the starting project I've included a bunch of to-dos.

31223
00:00:39,060 --> 00:00:42,810
And one of the nice things about PyCharm is you can view all of the

31224
00:00:42,810 --> 00:00:47,220
to-dos a found in the file and you can delete them as you check them off,

31225
00:00:47,460 --> 00:00:51,150
and then you'll be able to see what is remaining. And when you click on it,

31226
00:00:51,150 --> 00:00:55,470
it takes you directly to that particular to-do's location, which is really neat.

31227
00:00:56,040 --> 00:00:57,240
Let's start from the top.

31228
00:00:57,510 --> 00:01:02,510
We want to be able to use the alphavantage.co's APIs in order to get

31229
00:01:03,420 --> 00:01:07,020
yesterday's closing stock price. So that's the first thing.

31230
00:01:08,610 --> 00:01:13,260
How do we do that? Well, Alpha vantage is a stock market API

31231
00:01:13,770 --> 00:01:16,680
and what we have to do is first set up an API key.

31232
00:01:17,970 --> 00:01:22,500
You can select yourself as a student and then your organization if you have one

31233
00:01:23,280 --> 00:01:28,110
and then enter your email. Now, once you filled in the form, you can click on

31234
00:01:28,110 --> 00:01:29,550
get a free API key

31235
00:01:29,940 --> 00:01:33,300
and you should see your API key show up below.

31236
00:01:33,900 --> 00:01:37,800
Make sure that you copy this API key and save it in your project.

31237
00:01:38,310 --> 00:01:41,370
So I'm going to head over here and right at the top,

31238
00:01:41,400 --> 00:01:46,400
I'm going to add my STOCK_API_KEY as a constant like this.

31239
00:01:47,940 --> 00:01:48,390
That way

31240
00:01:48,390 --> 00:01:52,260
I won't forget it because it's actually quite hard to navigate back to this page

31241
00:01:52,590 --> 00:01:56,190
and get your API key. Now, the next step is of course,

31242
00:01:56,190 --> 00:01:59,130
the digging through the documentation. Now,

31243
00:01:59,130 --> 00:02:02,190
for those of you guys who chose the hard and extra hard versions,

31244
00:02:02,220 --> 00:02:06,510
I didn't really point you towards which part of the API documentation is most

31245
00:02:06,510 --> 00:02:10,440
relevant, because I hope that if you had chosen to give yourself a challenge,

31246
00:02:10,500 --> 00:02:14,850
you would appreciate having the opportunity to dig through all of the different

31247
00:02:14,850 --> 00:02:18,180
things you can do with the API. Now, in our case,

31248
00:02:18,210 --> 00:02:20,400
we actually want is the daily data.

31249
00:02:21,240 --> 00:02:24,720
So this API will return the daily data

31250
00:02:25,020 --> 00:02:29,790
which will give us the open price, the highest price of the day,

31251
00:02:29,790 --> 00:02:33,210
the lowest price of the day, and also the closing price at the day

31252
00:02:33,240 --> 00:02:37,470
which is what we're mostly interested in. There's a couple of API parameters

31253
00:02:37,470 --> 00:02:39,720
which are required; the function

31254
00:02:39,870 --> 00:02:43,530
which in this case is a time series daily, and also the symbol

31255
00:02:43,560 --> 00:02:47,370
which is the name of the equity of your choice. In our case,

31256
00:02:47,400 --> 00:02:50,850
we've already defined that at the top. It's the stock name right here.

31257
00:02:51,510 --> 00:02:56,370
So let's see how we can fetch yesterday's closing stock price. To start

31258
00:02:56,370 --> 00:02:59,220
we of course need our trusty requests module.

31259
00:03:01,120 --> 00:03:03,010
And using requests

31260
00:03:03,040 --> 00:03:08,040
we're going to fetch from the stock endpoint.

31261
00:03:08,860 --> 00:03:10,960
So you can see that in their example,

31262
00:03:11,020 --> 00:03:15,970
the end point is everything up to and not including the question

31263
00:03:15,970 --> 00:03:18,670
mark. This should be all pretty familiar to you,

31264
00:03:18,760 --> 00:03:22,600
but you could also just type in simply the one that I've already included.

31265
00:03:22,720 --> 00:03:27,610
This stock endpoint. Now next we're going to need to add some parameters.

31266
00:03:27,790 --> 00:03:32,790
So let's create something called our stock_params and let's see what we need

31267
00:03:33,190 --> 00:03:35,920
to add. So we have to add the function

31268
00:03:36,220 --> 00:03:39,640
which is equal to time series daily. I'm going to copy that

31269
00:03:39,640 --> 00:03:41,020
so I don't make any typos.

31270
00:03:41,560 --> 00:03:46,560
So let's create a Python dictionary and this is going to be the key and value.

31271
00:03:47,710 --> 00:03:48,160
Next,

31272
00:03:48,160 --> 00:03:52,870
we have to add our symbol and that is going to be the name of our stock or

31273
00:03:52,870 --> 00:03:53,703
equity.

31274
00:03:55,780 --> 00:03:59,830
The symbol, in this case, is simply going to be our stock name TSLA

31275
00:04:00,210 --> 00:04:01,043
Right.

31276
00:04:03,420 --> 00:04:07,500
And stock symbols tend to have a maximum number of four letters.

31277
00:04:07,500 --> 00:04:12,500
So that's why you see it abbreviated like Snap for Snapchat or TSLA for Tesla.

31278
00:04:14,220 --> 00:04:17,790
Now the final required parameter is our API key.

31279
00:04:18,300 --> 00:04:22,800
The whole thing is not going to work unless we authenticate ourselves using the

31280
00:04:22,800 --> 00:04:24,420
API key that we got just now,

31281
00:04:24,690 --> 00:04:27,810
which is saved as our STOCK_API_KEY.

31282
00:04:28,860 --> 00:04:33,270
Now that we've got all three parameters in there, well, we can add it to our

31283
00:04:33,270 --> 00:04:37,170
request method, and it will just add it as the stock_params.

31284
00:04:37,710 --> 00:04:42,710
Now let's save this as the response and let's print out what the response

31285
00:04:43,680 --> 00:04:47,040
actually look like when it's in the format of a JSON.

31286
00:04:48,420 --> 00:04:53,400
So let's run this code and I'm getting a error that says indentation error

31287
00:04:53,490 --> 00:04:57,390
unexpected indent. And that's because my stock_params here

31288
00:04:57,390 --> 00:05:02,390
really should actually be within the same indentation as the starting point

31289
00:05:04,950 --> 00:05:08,400
like this. So be careful that when you have a to-do that's

31290
00:05:08,400 --> 00:05:12,540
indented every line that you start afterward is going to be indented as

31291
00:05:12,540 --> 00:05:13,373
well.

31292
00:05:13,920 --> 00:05:18,920
So it probably helps to just unindent everything so that they will start at the

31293
00:05:19,260 --> 00:05:22,530
margin here. So let's try that again.

31294
00:05:25,140 --> 00:05:28,800
And this time it looks like we're getting back actual data in the format of

31295
00:05:28,800 --> 00:05:33,030
a JSON. Let's view it using our JSON viewer.

31296
00:05:34,830 --> 00:05:36,870
You can see that we've got some metadata

31297
00:05:36,900 --> 00:05:41,880
which basically just describes what we told the API. For example,

31298
00:05:41,880 --> 00:05:46,880
we wanted the Tesla symbol and we wanted the daily price.

31299
00:05:47,370 --> 00:05:51,660
But what we're actually interested is in the time series daily data.

31300
00:05:52,110 --> 00:05:56,280
So you can see it's giving us the data for all of the dates prior to today.

31301
00:05:56,400 --> 00:05:58,640
So currently it's 22nd of July

31302
00:05:58,940 --> 00:06:03,940
so we can see the complete data for the 21st of July and the 20th of July. Right

31303
00:06:05,090 --> 00:06:09,590
now, what we're interested in is yesterday's closing stock price.

31304
00:06:10,190 --> 00:06:14,600
So this is yesterday and this is the closing stock price.

31305
00:06:14,930 --> 00:06:19,130
So it's 1,568. How do we get hold of it? Well,

31306
00:06:19,130 --> 00:06:22,970
we have to step through a number of keys in order to get to this particular

31307
00:06:22,970 --> 00:06:25,130
value. First,

31308
00:06:25,160 --> 00:06:30,160
we need to pass in our time series daily and notice how this has brackets and

31309
00:06:30,830 --> 00:06:35,810
everything. We have to include all of the spaces, all the brackets in our key.

31310
00:06:36,380 --> 00:06:40,880
Let's say that our data is equal to the response.

31311
00:06:40,910 --> 00:06:44,870
json, let's go ahead and add a square bracket,

31312
00:06:45,170 --> 00:06:47,270
and then we can provide the key

31313
00:06:47,660 --> 00:06:50,600
which I'm actually just going to copy from down here.

31314
00:06:51,440 --> 00:06:53,510
So I don't make any typos and

31315
00:06:53,540 --> 00:06:58,190
make sure that I preserve all of the spaces and all of the symbols.

31316
00:06:58,430 --> 00:07:03,430
So basically everything in between the quotation marks like this.

31317
00:07:04,220 --> 00:07:06,680
Now, if we print our data,

31318
00:07:07,910 --> 00:07:11,480
you can see it's stepped into that particular dictionary

31319
00:07:11,810 --> 00:07:16,730
and it's now giving us all of this data. But this is not a list.

31320
00:07:16,790 --> 00:07:20,390
As you can see, the data starts out with a curly bracket. In fact,

31321
00:07:20,390 --> 00:07:24,260
it's a really big dictionary with the key being the date.

31322
00:07:25,670 --> 00:07:28,940
Now, while I can tap into yesterday's data

31323
00:07:28,970 --> 00:07:32,390
by simply providing this as the key,

31324
00:07:32,780 --> 00:07:36,740
this is going to be pretty hard-coded because once I get to tomorrow

31325
00:07:36,740 --> 00:07:41,450
when it becomes the 23rd, then yesterday's date is going to change.

31326
00:07:41,960 --> 00:07:46,960
So we have to figure out another way of getting hold of that first value.

31327
00:07:47,960 --> 00:07:52,960
How about turning this large dictionary into a list where we get each of the

31328
00:07:55,940 --> 00:08:00,940
pieces of data that's associated with each of the keys? To do that,

31329
00:08:01,070 --> 00:08:03,380
we're going to need to do a bit of a list comprehension.

31330
00:08:03,770 --> 00:08:05,810
So I'm going to create a variable called data_list

31331
00:08:06,020 --> 00:08:09,650
and then I'm going to use my list comprehension keywords.

31332
00:08:09,650 --> 00:08:12,860
So we did list comprehensions a while back,

31333
00:08:12,890 --> 00:08:16,280
but this might be a good time to remind yourself of how to use it.

31334
00:08:17,060 --> 00:08:21,200
It's going to be new item for item in list.

31335
00:08:21,680 --> 00:08:25,670
Our list is actually not a list. It's in fact a dictionary.

31336
00:08:26,120 --> 00:08:29,960
So we're going to tap into our data, which is the dictionary,

31337
00:08:30,350 --> 00:08:33,860
and we're going to call the items method on it.

31338
00:08:34,490 --> 00:08:37,549
And this is going to give us not just the item,

31339
00:08:37,640 --> 00:08:40,250
but the key and the value.

31340
00:08:40,730 --> 00:08:45,080
So we're actually only interested in the values. So we can put that in here

31341
00:08:45,440 --> 00:08:50,440
so that each item in this new list is composed of only the values and not the

31342
00:08:51,290 --> 00:08:54,830
keys. Now, if I print this data list,

31343
00:08:56,340 --> 00:09:00,510
you can see I've now got a list denoted by the square brackets

31344
00:09:00,900 --> 00:09:05,900
and each item in the list is a dictionary with each day's data. Using that I can

31345
00:09:08,850 --> 00:09:10,110
get hold of yesterday_

31346
00:09:10,110 --> 00:09:15,110
data by simply tapping to our data list and getting the object at index zero.

31347
00:09:17,280 --> 00:09:19,410
Now, once I've got yesterday's data,

31348
00:09:19,470 --> 00:09:24,470
then it's pretty simple to get yesterday's closing price,

31349
00:09:26,640 --> 00:09:31,320
because that is simply stored under this particular key. Now again,

31350
00:09:31,350 --> 00:09:36,060
notice how the entire key is this. It's everything in between the quotation

31351
00:09:36,060 --> 00:09:39,420
marks, including the number and the dot and all of that.

31352
00:09:39,810 --> 00:09:43,380
So this is a bit of a strange way of formatting your keys, to be honest.

31353
00:09:43,440 --> 00:09:47,610
I haven't seen many APIs that do this because it's a little bit confusing to

31354
00:09:47,610 --> 00:09:50,760
have spaces and dots and numbers,

31355
00:09:50,970 --> 00:09:53,370
but that's just the way that they decided to do it.

31356
00:09:53,400 --> 00:09:56,130
So in order to get the closing price,

31357
00:09:56,160 --> 00:10:01,140
we can tap into yesterday's data, add a set of square brackets, pass in this

31358
00:10:01,140 --> 00:10:05,880
particular key. So now if we print out yesterday's closing price,

31359
00:10:06,000 --> 00:10:11,000
you can see we've narrowed down on the exact price of the Tesla stock at

31360
00:10:11,730 --> 00:10:13,110
yesterday market close.

31361
00:10:15,230 --> 00:10:15,680
Right?

31362
00:10:15,680 --> 00:10:19,670
That's to-do number one completed. We can delete the to-do.

31363
00:10:20,570 --> 00:10:20,960
Now

31364
00:10:20,960 --> 00:10:25,910
the next one is to get the day before yesterday's closing stock price.

31365
00:10:26,270 --> 00:10:28,670
So now that we've actually got this data list,

31366
00:10:28,760 --> 00:10:33,760
it's pretty simple to do that; day_before_yesterday_

31367
00:10:34,490 --> 00:10:39,490
data is going to be equal to the data list at index one

31368
00:10:40,190 --> 00:10:44,840
because remember everything in the list is ordered going backward from today's

31369
00:10:44,840 --> 00:10:48,650
date. So that is going to be the day before yesterday's data.

31370
00:10:51,380 --> 00:10:54,830
And then the day before yesterday's closing price,

31371
00:10:54,890 --> 00:10:56,420
we can fetch that in the same way

31372
00:10:56,420 --> 00:11:00,380
by passing in that key 4.space close.

31373
00:11:01,130 --> 00:11:03,200
And just to confirm everything works,

31374
00:11:03,260 --> 00:11:05,960
let's print out both of the closing prices

31375
00:11:06,260 --> 00:11:10,790
so you can see that yesterday it closed at $1,568

31376
00:11:11,120 --> 00:11:14,780
and then the day before it closed at $1,643.

31377
00:11:15,020 --> 00:11:18,740
So that's actually quite a big drop, almost a hundred dollars.

31378
00:11:20,600 --> 00:11:22,580
That's to-do number two done.

31379
00:11:22,580 --> 00:11:27,580
We've managed to get the day before yesterday's closing stock price. To-do number

31380
00:11:27,980 --> 00:11:28,813
three

31381
00:11:28,940 --> 00:11:33,050
involves finding the positive difference between step one and two,

31382
00:11:33,350 --> 00:11:37,370
so yesterday's closing price and the day before yesterday's closing price.

31383
00:11:38,090 --> 00:11:39,320
And it gives us a hint.

31384
00:11:40,790 --> 00:11:44,360
Now the hint takes us to the Python abs function,

31385
00:11:44,450 --> 00:11:46,220
which we've also seen before.

31386
00:11:46,880 --> 00:11:50,300
It's a function that returns the absolute value of a number.

31387
00:11:50,300 --> 00:11:54,700
So it basically just gets rid of any negative sign in front of a number.

31388
00:11:55,630 --> 00:11:59,860
And this is what we need in order to complete to-do number three.

31389
00:11:59,880 --> 00:12:00,713
Right?

31390
00:12:02,130 --> 00:12:07,130
The difference is going to be yesterday's closing price subtract by the day

31391
00:12:08,670 --> 00:12:12,180
before yesterday's closing price. Now,

31392
00:12:12,240 --> 00:12:16,800
because these two are strings, if we actually run the code right now,

31393
00:12:16,830 --> 00:12:18,510
you're going to get an error.

31394
00:12:19,380 --> 00:12:23,310
And the error tells you that you can't subtract between a string and a string.

31395
00:12:23,910 --> 00:12:26,250
We know that these numbers look like this,

31396
00:12:26,310 --> 00:12:31,310
so we can quite easily convert them into a floating point numbers just by

31397
00:12:31,350 --> 00:12:35,850
wrapping the float function around them. If we print that out,

31398
00:12:35,880 --> 00:12:39,960
you can see that it's actually going to be a negative number.

31399
00:12:40,500 --> 00:12:42,780
And the reason is because this is yesterday's price,

31400
00:12:42,810 --> 00:12:44,940
this is the day before yesterday's price.

31401
00:12:45,330 --> 00:12:48,660
The price actually went down by $74.

31402
00:12:49,290 --> 00:12:53,700
What if we want to get the positive difference between one and two?

31403
00:12:55,770 --> 00:12:56,160
Well,

31404
00:12:56,160 --> 00:13:01,050
this is where the abs or absolute value function comes in handy.

31405
00:13:01,260 --> 00:13:05,490
If we wrap all of that around the absolute function, now, if I run it,

31406
00:13:05,640 --> 00:13:08,970
you can see we're getting a positive value instead.

31407
00:13:10,590 --> 00:13:12,600
Now that's step three completed.

31408
00:13:12,720 --> 00:13:17,370
We found the positive difference between yesterday's closing price and the day

31409
00:13:17,370 --> 00:13:19,470
before yesterday's closing price.

31410
00:13:20,610 --> 00:13:22,770
Now let's tackle step number four.

31411
00:13:23,400 --> 00:13:27,570
We want to be able to work out the percentage difference in price between the

31412
00:13:27,570 --> 00:13:31,980
closing price yesterday and the closing price the day before yesterday.

31413
00:13:33,390 --> 00:13:38,390
The diff_percent is going to be the difference divided by the closing price

31414
00:13:40,920 --> 00:13:41,753
yesterday.

31415
00:13:43,830 --> 00:13:46,860
And in order to turn this into a percentage,

31416
00:13:46,920 --> 00:13:51,210
we're going to have to multiply it by 100. But again,

31417
00:13:51,240 --> 00:13:56,040
notice that this is a floating point number because it was calculated here,

31418
00:13:56,370 --> 00:13:58,290
but this is still the string.

31419
00:13:58,770 --> 00:14:02,670
So we're going to have to turn that into a float for this calculation to

31420
00:14:02,670 --> 00:14:06,510
actually go through. And once it does that, we're going to print it out.

31421
00:14:08,370 --> 00:14:12,870
We've got about a 4.75% difference.

31422
00:14:14,220 --> 00:14:17,700
Now we can tackle to-do number five,

31423
00:14:18,150 --> 00:14:22,350
which is if the percentage here is greater than five,

31424
00:14:22,680 --> 00:14:27,600
then we're going to print get news. This is pretty simple.

31425
00:14:27,630 --> 00:14:31,650
All we have to do is check if the diff_percent is greater than five,

31426
00:14:32,130 --> 00:14:36,810
in which case we're going to print get news. Now,

31427
00:14:36,810 --> 00:14:39,630
depending on the time when you're completing this project,

31428
00:14:39,960 --> 00:14:43,290
the stock price of Tesla may not show a difference

31429
00:14:43,320 --> 00:14:47,880
that's greater than five. Because in order to continue testing our code

31430
00:14:47,910 --> 00:14:50,670
we're going to need this to be true,

31431
00:14:51,110 --> 00:14:54,530
then we can change this number to a smaller number,

31432
00:14:54,560 --> 00:14:57,890
just so that we can actually get it to work. So my case,

31433
00:14:57,890 --> 00:15:02,150
the difference is 4.75. So I'm actually just going to change this down to 4.

31434
00:15:04,130 --> 00:15:06,380
And now if I run all of this,

31435
00:15:06,710 --> 00:15:09,680
then you can see it's going to print get news.

31436
00:15:10,190 --> 00:15:12,350
So that is what we're going to do on the next lesson

31437
00:15:12,620 --> 00:15:14,450
in the second part of the solution.


31438
00:00:00,420 --> 00:00:02,310
In the first part of the solution,

31439
00:00:02,340 --> 00:00:07,340
we managed to get our code to pull in the live stock data for the selected

31440
00:00:08,180 --> 00:00:09,020
stock name.

31441
00:00:09,740 --> 00:00:14,270
And then we looked at the difference in price between yesterday and the day

31442
00:00:14,270 --> 00:00:18,140
before yesterday and then we worked out the percentage difference.

31443
00:00:18,920 --> 00:00:22,760
Now we have this if statement which will print get news

31444
00:00:23,090 --> 00:00:27,560
if the percentage difference is greater than a specified amount.

31445
00:00:28,130 --> 00:00:31,760
Now, I've put right five here, just because ideally,

31446
00:00:31,820 --> 00:00:33,980
if you were monitoring a particular stock,

31447
00:00:34,220 --> 00:00:37,880
you'd probably only be interested if it changed by a large amount,

31448
00:00:37,880 --> 00:00:42,800
like 5 or 10 or 50% set by you. But at the moment,

31449
00:00:42,800 --> 00:00:47,780
because we're testing these things and the Tesla stock is only moved by one

31450
00:00:47,780 --> 00:00:51,710
point something percent, then this is actually never going to be true.

31451
00:00:51,800 --> 00:00:56,030
So I'm going to manually adjust this down so that we can continue working with

31452
00:00:56,030 --> 00:01:00,770
the rest of the challenge. So now onto step two of the challenge,

31453
00:01:00,920 --> 00:01:04,459
the first part is instead of printing get news,

31454
00:01:04,670 --> 00:01:08,960
we're going to use the news API to get articles related to

31455
00:01:08,960 --> 00:01:13,820
the company name. The news API is newsapi.org.

31456
00:01:14,540 --> 00:01:17,780
And we can start by getting hold of an API key.

31457
00:01:18,590 --> 00:01:21,740
Once you signed up, you should get a free API key

31458
00:01:21,860 --> 00:01:25,580
and we're going to paste that into our project.

31459
00:01:27,500 --> 00:01:31,550
Now we can start looking through the documentation and seeing how we can use

31460
00:01:31,550 --> 00:01:32,990
this news API.

31461
00:01:34,010 --> 00:01:39,010
There's a number of end points as we can see. There's top headlines and also

31462
00:01:39,170 --> 00:01:41,810
everything. These are the two main end points.

31463
00:01:42,470 --> 00:01:46,250
Now everything is better for article discovery

31464
00:01:46,700 --> 00:01:50,990
whereas the headlines tend to only have a limited number of headlines.

31465
00:01:51,530 --> 00:01:53,300
I've tested both of these

31466
00:01:53,360 --> 00:01:58,360
and I found that the everything one is more likely to give us a news piece for

31467
00:01:58,670 --> 00:02:03,260
stocks that we're looking for. Because very often a lot of these companies and

31468
00:02:03,260 --> 00:02:06,530
their stocks don't actually make it to the day's headlines.

31469
00:02:07,190 --> 00:02:12,170
So this is what the query looks like, this is the end point,

31470
00:02:12,230 --> 00:02:16,730
and these are the parameters. Now, if we scroll down,

31471
00:02:16,760 --> 00:02:20,330
we can see a number of request parameters; q

31472
00:02:20,330 --> 00:02:25,330
which is the keyword or phrase the same in the article title and body, qIn

31473
00:02:25,760 --> 00:02:29,210
Title is to search for in the title only,

31474
00:02:29,720 --> 00:02:32,420
and then you can limit the sources or the domains

31475
00:02:32,420 --> 00:02:35,570
which you want to search or exclude certain websites

31476
00:02:35,930 --> 00:02:39,200
and you can also specify the date, time, language,

31477
00:02:39,530 --> 00:02:43,550
and a number of other things. Now, the only required parameter is

31478
00:02:43,880 --> 00:02:47,780
actually this API key. Now, in addition,

31479
00:02:47,810 --> 00:02:51,500
we're probably gonna want to use one of these requests parameters.

31480
00:02:52,250 --> 00:02:57,050
There's a lot of stocks that get lumped in into these analysis articles.

31481
00:02:57,410 --> 00:03:01,420
So I think it will be more specific if we can actually check the title of the

31482
00:03:01,420 --> 00:03:03,730
article for our company name.

31483
00:03:04,600 --> 00:03:08,680
So let's get started putting this API to use. Up here

31484
00:03:08,680 --> 00:03:10,840
we've really got the news end point,

31485
00:03:11,770 --> 00:03:15,010
and we're going to delete this print statement,

31486
00:03:15,400 --> 00:03:20,400
and we're going to use the requests library to get hold of some data from that

31487
00:03:21,550 --> 00:03:22,383
endpoint.

31488
00:03:23,920 --> 00:03:28,920
And then we're going to add our params. Our new params is firstly going to

31489
00:03:29,950 --> 00:03:34,950
contain our API key and notice how it's spelled. When you are using parameters,

31490
00:03:36,400 --> 00:03:40,840
you have to make sure that any capitalization or spelling must match their

31491
00:03:40,840 --> 00:03:42,430
requirements exactly.

31492
00:03:43,510 --> 00:03:48,040
So the API key is just going to be our news API key that we added previously,

31493
00:03:48,580 --> 00:03:52,690
and then we're going to provide a queryInTitle as well.

31494
00:03:53,020 --> 00:03:57,130
And I'm actually just going to straight up copy it because I'm not sure if that

31495
00:03:57,130 --> 00:04:01,390
was an I or an L. That way we don't make any typos. Now,

31496
00:04:01,420 --> 00:04:04,810
the query we're going to search for is actually our company name,

31497
00:04:04,990 --> 00:04:07,420
because while we can search for the name of the stock,

31498
00:04:07,660 --> 00:04:11,860
it's actually better to search for the company name because most articles tend

31499
00:04:11,860 --> 00:04:14,650
to include the company name rather than the stock name.

31500
00:04:15,730 --> 00:04:19,120
This is going to be the params that's going to go in here.

31501
00:04:19,720 --> 00:04:22,300
Now we're going to get hold of our response

31502
00:04:24,340 --> 00:04:28,420
and I'm going to print out the response as a JSON.

31503
00:04:31,170 --> 00:04:31,410
All right.

31504
00:04:31,410 --> 00:04:33,030
If you take a look at the documentation,

31505
00:04:33,030 --> 00:04:37,080
they also tell you what an example output would look like.

31506
00:04:37,500 --> 00:04:42,060
Firstly, we have a dictionary with status,

31507
00:04:42,090 --> 00:04:45,150
total results, but most importantly articles,

31508
00:04:45,330 --> 00:04:50,130
which is a list. In that list there's a bunch of dictionaries

31509
00:04:50,160 --> 00:04:54,480
which contains things like the source, the author, the title, description,

31510
00:04:54,870 --> 00:04:59,370
and each of these articles are an item in this list of articles.

31511
00:05:00,060 --> 00:05:02,730
We can actually get hold of all the articles

31512
00:05:03,210 --> 00:05:08,210
just by tapping into the news_response.json and then passing in the key

31513
00:05:09,420 --> 00:05:14,400
articles. And now when I print that out,

31514
00:05:14,400 --> 00:05:16,830
you can see its a list first of all,

31515
00:05:17,280 --> 00:05:21,150
and then each article is a dictionary inside that list.

31516
00:05:22,710 --> 00:05:27,630
Now we've managed to complete to-do number six and we can move on to

31517
00:05:27,630 --> 00:05:28,800
to-do number seven,

31518
00:05:29,280 --> 00:05:34,280
which is to use the Python slice operator to create a list that contains the

31519
00:05:35,220 --> 00:05:38,130
first three articles. And as a hint,

31520
00:05:38,220 --> 00:05:41,160
I've linked to the Stack Overflow page

31521
00:05:41,190 --> 00:05:46,170
where they go through the slice operator in quite a bit of detail

31522
00:05:46,170 --> 00:05:47,003
actually.

31523
00:05:48,240 --> 00:05:51,900
If we want to only get the first three articles,

31524
00:05:51,960 --> 00:05:55,950
then our start is probably going to be from the beginning and then we're going

31525
00:05:55,950 --> 00:05:58,100
to loop to stop minus one.

31526
00:05:58,490 --> 00:06:03,490
So that's going to be :3 because let's start counting from zero. Like

31527
00:06:05,000 --> 00:06:08,300
that. And now if I print these three articles,

31528
00:06:08,380 --> 00:06:09,213
right,

31529
00:06:11,380 --> 00:06:12,010
to see them,

31530
00:06:12,010 --> 00:06:17,010
if you click on this soft wrap and you can see the three items,

31531
00:06:17,980 --> 00:06:22,540
one, two, and three.

31532
00:06:24,310 --> 00:06:25,143
That's

31533
00:06:25,630 --> 00:06:26,463
step two.

31534
00:06:26,500 --> 00:06:31,500
Now we've managed to use the news API to get hold of the first three articles

31535
00:06:32,440 --> 00:06:37,240
that talk about this particular company name. In the next lesson

31536
00:06:37,270 --> 00:06:41,350
I'm going to go through the final part of the solution which is step three,

31537
00:06:41,500 --> 00:06:46,500
and to figure out how to send the relevant parts of the articles to our mobile

31538
00:06:47,140 --> 00:06:47,560
number.


31539
00:00:00,150 --> 00:00:04,770
So previously we managed to check the stock price difference between the day

31540
00:00:04,770 --> 00:00:06,600
before yesterday and yesterday.

31541
00:00:06,990 --> 00:00:11,460
And then based on when that different is over a certain threshold,

31542
00:00:11,760 --> 00:00:14,010
then we trigger this bunch of code

31543
00:00:14,100 --> 00:00:18,990
which actually fetches some news from the news API regarding that company.

31544
00:00:19,620 --> 00:00:24,030
So now that we've got the top three articles from the news API,

31545
00:00:24,420 --> 00:00:26,130
now we're onto step three

31546
00:00:26,190 --> 00:00:31,190
which is to use Twilio to send a message with each article's

31547
00:00:31,200 --> 00:00:33,120
title and description to a phone number.

31548
00:00:33,840 --> 00:00:38,760
The first step is to create a list of the first three article's

31549
00:00:38,760 --> 00:00:42,390
headline, and description using list comprehension.

31550
00:00:42,810 --> 00:00:47,610
So what we're aiming for is a single string that says something like this.

31551
00:00:48,240 --> 00:00:49,073
Headline:

31552
00:00:49,470 --> 00:00:53,820
and then it's the actual article title.

31553
00:00:54,600 --> 00:00:57,810
And then we've got our brief

31554
00:00:57,840 --> 00:00:59,760
which is going to go on a new line,

31555
00:01:00,150 --> 00:01:03,990
and then this is going to be the article description.

31556
00:01:05,250 --> 00:01:09,690
You can see those parts in the articles that we printed out.

31557
00:01:10,050 --> 00:01:12,270
For example, this first article here,

31558
00:01:12,510 --> 00:01:17,510
you can see the title says Spartan Energy surges after something,

31559
00:01:17,910 --> 00:01:21,690
something, something, something. You can see this is the first title

31560
00:01:21,960 --> 00:01:23,970
and this is the first description.

31561
00:01:24,480 --> 00:01:29,480
So its basically the title of the article and also a brief description of what

31562
00:01:31,080 --> 00:01:35,160
the article is about. That is what we want to get messaged to us.

31563
00:01:35,640 --> 00:01:38,760
Now in order to use list comprehension,

31564
00:01:39,000 --> 00:01:41,670
we first use the keyword method.

31565
00:01:42,420 --> 00:01:45,960
So new item for item in list.

31566
00:01:46,590 --> 00:01:51,590
Now our list in this case is of course our three articles and each of those

31567
00:01:51,990 --> 00:01:54,930
items will be an article in themselves.

31568
00:01:55,560 --> 00:01:59,490
And for each of those articles, we want to have this format.

31569
00:02:00,090 --> 00:02:03,540
So I'm just going to cut that and then paste it in here

31570
00:02:03,930 --> 00:02:08,580
and then I'm going to use an f-string in order to insert these relevant parts.

31571
00:02:09,180 --> 00:02:14,180
So the article title is stored under the title key and the description is stored

31572
00:02:14,490 --> 00:02:15,810
under the description key.

31573
00:02:16,410 --> 00:02:21,410
So we can simply use that as the key to tap into this article.

31574
00:02:22,920 --> 00:02:27,920
Notice how we've got a set of double quotes outside to create our string.

31575
00:02:28,860 --> 00:02:32,190
If we have another set of double quotes to specify the key,

31576
00:02:32,460 --> 00:02:35,730
this is going to be a bit confusing for the code interpreter.

31577
00:02:36,180 --> 00:02:41,180
So let's change that to single quotes instead to make it actually work. Like this.

31578
00:02:43,080 --> 00:02:45,630
Now, next is the article description.

31579
00:02:46,350 --> 00:02:51,000
So this is going to go inside another set of quotes and also it's going to go

31580
00:02:51,000 --> 00:02:55,050
inside a set of square brackets. Like this.

31581
00:02:57,120 --> 00:03:01,330
Each of the new items that's going to go into this new list is going to be a

31582
00:03:01,330 --> 00:03:06,040
string that's comprised of the article title and also the article description.

31583
00:03:06,790 --> 00:03:11,790
Now we can save this new list into a formatted_articles list, like this.

31584
00:03:15,640 --> 00:03:17,830
So that's to-do eight completed,

31585
00:03:18,250 --> 00:03:22,840
and now we're going to try and send each article as a separate message via

31586
00:03:22,840 --> 00:03:27,070
Twilio. Here's our Twilio SMS Python Quickstart,

31587
00:03:27,310 --> 00:03:30,250
and we're basically going to replicate all of this.

31588
00:03:30,490 --> 00:03:35,490
So first we're gonna import the client class from the Twilio library,

31589
00:03:38,760 --> 00:03:39,180
right?

31590
00:03:39,180 --> 00:03:41,850
And make sure that we actually have this installed

31591
00:03:41,850 --> 00:03:46,850
if it's not already installed, and get rid of the red underlines. Next,

31592
00:03:47,790 --> 00:03:52,260
we're going to get our account SID and auth token from Twilio.

31593
00:03:53,280 --> 00:03:58,280
So I'm going to copy my account SID and put that over here.

31594
00:03:59,880 --> 00:04:00,713
Right?

31595
00:04:03,390 --> 00:04:06,450
And also get my auth token from here as well.

31596
00:04:08,220 --> 00:04:13,220
So now I can set up my client by creating it from the client class. Down here, at

31597
00:04:14,250 --> 00:04:16,440
the point where I want to send my message,

31598
00:04:16,470 --> 00:04:20,010
I'm going to create a new client from the Twilio client class

31599
00:04:20,490 --> 00:04:25,490
and this is going to be comprised of my Twilio account SID and also my Twilio

31600
00:04:26,970 --> 00:04:29,490
auth token. Finally,

31601
00:04:29,520 --> 00:04:34,230
we can create our message and send it to our own number,

31602
00:04:34,380 --> 00:04:35,213
right?

31603
00:04:37,620 --> 00:04:41,610
The body of the message is going to be each of the articles.

31604
00:04:42,000 --> 00:04:44,640
So in order to send three messages,

31605
00:04:44,940 --> 00:04:49,940
we can loop through our three formatted articles, like this, and then we can

31606
00:04:50,550 --> 00:04:54,960
create a message and send each of those one by one.

31607
00:04:55,380 --> 00:05:00,150
So the body is going to be each article in the formatted articles.

31608
00:05:01,260 --> 00:05:01,590
Now the

31609
00:05:01,590 --> 00:05:06,590
from number is going to be our Twilio virtual number and our to number is going

31610
00:05:07,710 --> 00:05:12,060
to be our actual phone number. Once we've done all of that,

31611
00:05:12,120 --> 00:05:16,290
we can now test this and run it to see if it actually works.

31612
00:05:17,010 --> 00:05:19,350
Now I'm going to go ahead and hit run.

31613
00:05:20,100 --> 00:05:22,500
And hopefully our messages will get sent

31614
00:05:24,780 --> 00:05:26,130
as you can see right now.

31615
00:05:26,820 --> 00:05:31,110
So we've got our headline and our brief and each of the three articles are being

31616
00:05:31,110 --> 00:05:33,330
sent as a separate message.

31617
00:05:34,200 --> 00:05:36,930
That's pretty much the end of this challenge.

31618
00:05:37,110 --> 00:05:39,930
Now you can of course improve this even further.

31619
00:05:40,620 --> 00:05:45,390
And one of the things I thought about is having a little emoji to show whether

31620
00:05:45,390 --> 00:05:50,390
if your stock is up or down and also showing a rounded percentage. To do that,

31621
00:05:51,930 --> 00:05:56,520
we need to figure out whether if the stock was up or down and we can work that

31622
00:05:56,520 --> 00:06:01,520
out by looking at the difference. If instead of using the abs here

31623
00:06:01,850 --> 00:06:04,880
which is going to get rid of our negative and positive,

31624
00:06:05,420 --> 00:06:10,420
if we had instead used an if statement to check if the difference is greater than

31625
00:06:10,760 --> 00:06:15,650
zero, so it's positive, then we can create a variable called up_down

31626
00:06:15,680 --> 00:06:19,160
which starts out as none. But if it's positive,

31627
00:06:19,190 --> 00:06:23,000
then we can turn that into a up emoji.

31628
00:06:26,230 --> 00:06:30,460
And remember emojis are simply just treated as strings in our code.

31629
00:06:31,090 --> 00:06:36,040
Otherwise, if it's below zero, then it will change that to a down emoji,

31630
00:06:36,160 --> 00:06:36,993
Right?

31631
00:06:42,820 --> 00:06:44,650
Like this. And as always,

31632
00:06:44,680 --> 00:06:48,310
you can always search for these emojis in Google and copy and paste them in

31633
00:06:48,730 --> 00:06:52,180
if you don't have the emoji and symbols keyboard.

31634
00:06:53,290 --> 00:06:57,310
But having taken away that absolute value function here,

31635
00:06:57,550 --> 00:06:59,770
we're going to have to put it back somewhere else.

31636
00:06:59,920 --> 00:07:04,920
So we're going to put it right here at the point where we do the if checking.

31637
00:07:07,510 --> 00:07:08,650
And in addition,

31638
00:07:08,740 --> 00:07:13,740
I want to change this diff_percentage so that we actually around it to the

31639
00:07:13,990 --> 00:07:15,010
nearest whole number.

31640
00:07:16,600 --> 00:07:20,410
With the rounded diff_percentage and also this up_down,

31641
00:07:20,500 --> 00:07:25,500
we can now format our message so that it says the name of the stock

31642
00:07:28,450 --> 00:07:29,283
...

31643
00:07:29,290 --> 00:07:31,750
and then whether if it's up or down,

31644
00:07:33,370 --> 00:07:38,370
and then the diff_percentage, and finally a percentage sign and also a new

31645
00:07:40,390 --> 00:07:43,660
line. So now if I run this again,

31646
00:07:46,300 --> 00:07:47,740
you can see that this time

31647
00:07:47,770 --> 00:07:51,730
these messages come complete with the stock name,

31648
00:07:51,970 --> 00:07:55,930
the movement percentage, the headlines and the brief.

31649
00:07:57,220 --> 00:07:58,300
So there you have it.

31650
00:07:58,750 --> 00:08:02,800
I'm sure you can think of even more improvements to this program.

31651
00:08:03,160 --> 00:08:05,350
And especially if you're somebody who actually trades stocks,

31652
00:08:05,590 --> 00:08:09,040
then I'm sure you'll think of even more ways of improving this project.

31653
00:08:09,550 --> 00:08:11,650
If you come up with anything interesting and fun,

31654
00:08:11,800 --> 00:08:15,910
be sure to share it with the rest of us in the Q/A so that we can all admire

31655
00:08:15,940 --> 00:08:16,810
your hard work.



31656
00:00:00,240 --> 00:00:00,870
Hey guys,

31657
00:00:00,870 --> 00:00:05,400
welcome to day 37 of 100 Days of Code. Today

31658
00:00:05,430 --> 00:00:09,840
we're going to be learning about advanced authentication methods using the

31659
00:00:09,840 --> 00:00:10,673
header

31660
00:00:10,860 --> 00:00:15,450
and we're also going to be learning how to make POST, PUT and DELETE requests

31661
00:00:15,540 --> 00:00:19,980
using the requests module. And once we've learned all of that,

31662
00:00:20,040 --> 00:00:24,450
we're going to be building a habit tracker. This lady is Simone Giertz

31663
00:00:24,540 --> 00:00:26,760
and she's somebody who I really admire.

31664
00:00:26,760 --> 00:00:31,740
She makes all sorts of useless robots, um, that's what she says,

31665
00:00:31,800 --> 00:00:33,660
but they're actually really fascinating.

31666
00:00:33,750 --> 00:00:38,610
And one of the products that she brought out through Kickstarter was this habit

31667
00:00:38,610 --> 00:00:39,270
tracker,

31668
00:00:39,270 --> 00:00:44,270
where you could go to it every day and just tap on today's date.

31669
00:00:45,540 --> 00:00:50,370
So if you wanted to meditate every day, if you wanted to read 500 pages

31670
00:00:50,370 --> 00:00:54,990
of a book every day, then you could track your habit. And because it's continuous,

31671
00:00:55,390 --> 00:00:59,970
it makes you really want to continue your streak and not break the line.

31672
00:01:00,750 --> 00:01:05,750
So we're going to be using technology to build a digital version of that today.

31673
00:01:06,390 --> 00:01:09,270
And we're going to be using an API called Pixela.

31674
00:01:09,780 --> 00:01:14,160
This comes from a Japanese developer and it's really awesome.

31675
00:01:14,550 --> 00:01:17,070
It allows you to track your habits,

31676
00:01:17,130 --> 00:01:20,970
but not just show which days you've done your habit, which days you haven't,

31677
00:01:21,360 --> 00:01:25,140
but it also shows the intensity. So for example,

31678
00:01:25,170 --> 00:01:29,040
maybe you want to track how many pages you're reading every day,

31679
00:01:29,040 --> 00:01:33,010
you want to build a reading habit. Well, you can see that on certain days you

31680
00:01:33,010 --> 00:01:36,870
will really reading a lot and you're heading a streak, but then on other days,

31681
00:01:36,900 --> 00:01:40,050
even though you are doing some breeding because the color is lighter,

31682
00:01:40,350 --> 00:01:44,700
it means that you read fewer pages. And over a year's time,

31683
00:01:44,730 --> 00:01:49,230
you can see your entire progress and you can see your habit being tracked day by

31684
00:01:49,230 --> 00:01:52,050
day, which I think is really awesome.

31685
00:01:52,740 --> 00:01:56,730
This is what we're going to end up building. You can take any example,

31686
00:01:56,910 --> 00:01:59,640
any habit you want to build, so in my case,

31687
00:01:59,670 --> 00:02:04,670
I want to try and cycle every day and I'm logging how much I'm cycling in terms

31688
00:02:04,770 --> 00:02:05,670
of kilometers.

31689
00:02:06,150 --> 00:02:10,560
And you can see that certain days I cycled a lot and other days I cycled a

31690
00:02:10,560 --> 00:02:11,393
little bit less.

31691
00:02:11,790 --> 00:02:16,790
But I can see which days I've missed out on cycling and try to keep up with the

31692
00:02:17,760 --> 00:02:19,080
momentum and the streak.

31693
00:02:19,410 --> 00:02:23,130
Maybe you want to keep track of how long you're spending every day learning to

31694
00:02:23,130 --> 00:02:28,020
code, or maybe you want to track how long you're meditating every day,

31695
00:02:28,590 --> 00:02:31,950
or maybe you want to track how many lengths in the pool you swam.

31696
00:02:32,400 --> 00:02:34,380
Whatever habit it is you're trying to build

31697
00:02:34,830 --> 00:02:37,290
I'm sure that by the end of today's project,

31698
00:02:37,350 --> 00:02:40,620
you are going to have a tool that's going to help you achieve your goals.

31699
00:02:40,980 --> 00:02:44,730
So once you are ready, let's get started by heading over to the next lesson.


31700
00:00:00,180 --> 00:00:03,180
We've been using the requests module for a while now,

31701
00:00:03,270 --> 00:00:07,590
and we've been using it to make HTTP requests across the internet.

31702
00:00:08,189 --> 00:00:10,260
We've already seen the get request,

31703
00:00:10,410 --> 00:00:14,940
and this is a way for us to get pieces of data from somebody else,

31704
00:00:14,970 --> 00:00:16,350
like an API provider.

31705
00:00:17,070 --> 00:00:22,070
Now there's also four other common types of requests that we should probably know

31706
00:00:22,170 --> 00:00:24,630
about; post put and delete.

31707
00:00:25,440 --> 00:00:30,440
We can use the request module to complete a get request by simply writing

31708
00:00:30,480 --> 00:00:31,920
requests.get

31709
00:00:32,400 --> 00:00:37,400
and then we put our parameters inside the parentheses. For the other three

31710
00:00:37,470 --> 00:00:38,303
requests,

31711
00:00:38,460 --> 00:00:42,900
the code looks pretty much the same. It's .post, .put, and .delete.

31712
00:00:44,010 --> 00:00:49,010
Whereas a get request is made where we ask an external system for a

31713
00:00:49,560 --> 00:00:53,610
particular piece of data and they give that to us in the response.

31714
00:00:54,270 --> 00:00:59,220
a post request is where we give the external system some piece of data

31715
00:00:59,820 --> 00:01:03,660
and we're not so interested in the response we're getting back other than

31716
00:01:03,660 --> 00:01:06,960
whether if it was successful or not. For example,

31717
00:01:06,990 --> 00:01:10,950
if you wanted to save a piece of data in Google sheets,

31718
00:01:11,220 --> 00:01:13,440
then you might use the Google sheets API

31719
00:01:13,680 --> 00:01:17,190
to you post your data into your Google sheet.

31720
00:01:18,060 --> 00:01:21,450
Or maybe you want to use the Twitter API to post a tweet

31721
00:01:21,780 --> 00:01:26,780
then your program is going to send your tweet through a post request to the

31722
00:01:27,150 --> 00:01:29,580
Twitter API. So that's how get

31723
00:01:29,610 --> 00:01:34,610
and post works. Put is where you simply update a piece of data in the

31724
00:01:34,680 --> 00:01:38,100
external service. So if you had a spreadsheet in Google sheets

31725
00:01:38,100 --> 00:01:41,430
and maybe you want to update some of the values in the spreadsheet,

31726
00:01:41,640 --> 00:01:43,590
then you would use a put request.

31727
00:01:44,010 --> 00:01:48,330
And finally delete is simply where you want to delete a piece of data in the

31728
00:01:48,330 --> 00:01:49,350
external service

31729
00:01:49,350 --> 00:01:53,550
like a tweet that you posted or a Facebook post. Today

31730
00:01:53,550 --> 00:01:57,360
we're going to be building our habit tracker using the Pixela API.

31731
00:01:57,990 --> 00:02:00,030
And in order to use this API,

31732
00:02:00,090 --> 00:02:04,380
we're going to post our habit tracking data, for example,

31733
00:02:04,380 --> 00:02:08,460
how many pages have a book we've read, how many kilometers we've cycled,

31734
00:02:08,729 --> 00:02:11,940
and we're going to be posting that data to Pixela

31735
00:02:12,030 --> 00:02:14,040
to be tracked in our graph.

31736
00:02:14,730 --> 00:02:17,610
If you head over to their website and you scroll down,

31737
00:02:17,850 --> 00:02:21,090
you can see that it tells you how to get started.

31738
00:02:21,450 --> 00:02:24,810
And it's a series of six steps.

31739
00:02:25,200 --> 00:02:27,480
So we're going to be completing these in order

31740
00:02:27,930 --> 00:02:30,360
and we're going to be pairing this short form

31741
00:02:30,360 --> 00:02:33,810
get started guide with their documentation.

31742
00:02:34,380 --> 00:02:38,490
So we're going to have that side by side in order to see all of the

31743
00:02:38,490 --> 00:02:42,300
documentation on each of the steps. Step one

31744
00:02:42,300 --> 00:02:47,300
involves creating a user account. And it says you have to hit up this particular

31745
00:02:48,240 --> 00:02:52,290
end point using the HTTP post request.

31746
00:02:52,680 --> 00:02:55,860
So this is the first time we're making a post request.

31747
00:02:56,640 --> 00:03:00,100
Now I've set up a new project in  PyCharm habit tracker

31748
00:03:00,490 --> 00:03:05,110
and in my main.py, as always, that I'm going to start off by importing the

31749
00:03:05,110 --> 00:03:07,090
requests module. Now,

31750
00:03:07,090 --> 00:03:11,650
because this is a brand new project we're going to have to install that package

31751
00:03:11,710 --> 00:03:14,020
to make this red underline go away.

31752
00:03:14,620 --> 00:03:19,330
And once it's been installed successfully, we can tap into that method requests

31753
00:03:19,860 --> 00:03:22,290
.post. What are we going to

31754
00:03:22,410 --> 00:03:27,060
put into this parentheses, what are the parameters, what are the inputs?

31755
00:03:27,420 --> 00:03:31,350
Well, the first thing is the URL endpoint, right?

31756
00:03:31,440 --> 00:03:34,020
So this is the Pixela endpoint,

31757
00:03:34,740 --> 00:03:38,130
and that is going to be all of this.

31758
00:03:38,820 --> 00:03:42,690
Let's copy that over and paste it in as a string.

31759
00:03:44,070 --> 00:03:46,410
Now, if we head over to the API document,

31760
00:03:46,560 --> 00:03:50,220
you can see that there's an index of the API on the right,

31761
00:03:50,580 --> 00:03:52,650
and also at the beginning of the docs.

31762
00:03:53,010 --> 00:03:56,130
So what we want to do is first create a user,

31763
00:03:56,130 --> 00:03:58,350
 That's step one.

31764
00:03:58,440 --> 00:04:01,200
Now, this API is actually really well-documented,

31765
00:04:01,590 --> 00:04:04,950
especially given the fact that it's actually not a big development team behind

31766
00:04:04,950 --> 00:04:08,790
this. If we take a look, this is the end point,

31767
00:04:09,090 --> 00:04:12,150
and this is what we've got in our code. Next,

31768
00:04:12,180 --> 00:04:14,160
we're going to make our post request

31769
00:04:14,190 --> 00:04:18,240
and we're going to add some parameters into the request body.

31770
00:04:18,959 --> 00:04:23,100
So you can see that some of these are required and others are optional.

31771
00:04:23,610 --> 00:04:28,200
So we're going to add a value for each of the required parameters;

31772
00:04:28,470 --> 00:04:32,550
token, username, agreedTermsOfService, and that we're not a minor.

31773
00:04:35,760 --> 00:04:35,880
Cool.

31774
00:04:35,880 --> 00:04:40,380
So let's create our user_params. And the first key is our token.

31775
00:04:40,920 --> 00:04:42,780
Now let's see what this token needs to be.

31776
00:04:42,990 --> 00:04:47,190
It has to be a string that's used to authenticate your user

31777
00:04:47,670 --> 00:04:51,510
and we're going to use it later on as well when we access our graph

31778
00:04:51,540 --> 00:04:55,020
and when we add to it. So make sure you save this securely.

31779
00:04:55,110 --> 00:04:59,430
This is basically like an API key that you're going to generate yourself.

31780
00:05:00,090 --> 00:05:02,370
This token can contain any characters,

31781
00:05:02,370 --> 00:05:05,940
so you can make up a key like this,

31782
00:05:06,120 --> 00:05:10,650
but the length of the token has to be between 8 characters and 128

31783
00:05:10,650 --> 00:05:14,310
characters. So I think I've definitely got more than eight characters there,

31784
00:05:14,580 --> 00:05:18,270
so I can move on to the next key, which is my username.

31785
00:05:19,350 --> 00:05:23,730
I'm going to try and see if I can get away with just my first name. If it fails,

31786
00:05:23,730 --> 00:05:26,340
we can always try it again. Next,

31787
00:05:26,370 --> 00:05:31,370
we've got agreeTermsOfService and this is going to be either yes or no.

31788
00:05:32,700 --> 00:05:34,200
We're probably going to have to say yes

31789
00:05:34,200 --> 00:05:36,120
if we actually want to use this service.

31790
00:05:36,420 --> 00:05:39,240
And also we're going to have to say yes that we're not a minor.

31791
00:05:40,680 --> 00:05:44,760
Let's make sure that we don't make any typos by simply pasting this in.

31792
00:05:45,660 --> 00:05:50,660
So it's a yes for agreed to terms of service and a yes

31793
00:05:51,240 --> 00:05:56,130
to the fact that I'm not a minor, sadly. Not a minor anymore.

31794
00:05:56,840 --> 00:06:01,070
Once we've got our user parameters and our Pixela endpoint,

31795
00:06:01,190 --> 00:06:04,910
then we're ready to make our post request. Again,

31796
00:06:04,910 --> 00:06:09,710
we're going to start off with the URL which is going to be our Pixela endpoint,

31797
00:06:10,370 --> 00:06:13,790
and then we're going to add a new keyword argument.

31798
00:06:14,270 --> 00:06:15,770
And this is called json.

31799
00:06:16,250 --> 00:06:21,250
Notice how all the data that we're posting over to Pixela is pretty much in

31800
00:06:21,260 --> 00:06:24,860
the format of a JSON. String and string.

31801
00:06:25,310 --> 00:06:28,670
This is basically a piece of JSON data that we're going to send over.

31802
00:06:29,570 --> 00:06:33,080
And that's all there is to it. The endpoint

31803
00:06:33,380 --> 00:06:36,020
and also the JSON data that we want to send over.

31804
00:06:36,560 --> 00:06:41,060
So let's go ahead and save this inside a response variable just as we did

31805
00:06:41,060 --> 00:06:44,060
before. And then once this is completed,

31806
00:06:44,120 --> 00:06:46,910
let's go ahead and print what the response is.

31807
00:06:47,420 --> 00:06:50,270
Now you can either tap into the response as a JSON,

31808
00:06:50,630 --> 00:06:54,560
but given that in this case we're not really looking to do anything with the

31809
00:06:54,560 --> 00:06:58,160
response. We just wanna check if it's actually successful or not.

31810
00:06:58,580 --> 00:07:01,070
We can actually tap into a property called text.

31811
00:07:02,060 --> 00:07:05,180
So it'll give you back the response as a piece of text.

31812
00:07:05,690 --> 00:07:09,230
Let's go ahead and run this and see if I can get away with setting my username

31813
00:07:09,350 --> 00:07:12,500
as angela. Wow.

31814
00:07:12,650 --> 00:07:16,130
So there's actually no user called angela at the moment

31815
00:07:16,550 --> 00:07:19,790
and I was able to nab that username.

31816
00:07:20,360 --> 00:07:23,090
So the reason why we're interested in looking at the response is

31817
00:07:23,180 --> 00:07:27,650
if there were some issues, for example, if I tried to run this again

31818
00:07:27,680 --> 00:07:32,210
now that I've taken this username, I think it's probably going to fail

31819
00:07:32,300 --> 00:07:36,740
and it tells us this user already exists. Now, alternatively, if we said

31820
00:07:36,770 --> 00:07:40,430
no to one of these, agreed to terms of service or not minor,

31821
00:07:40,670 --> 00:07:45,110
it's probably also going to give us a message telling us why this post request

31822
00:07:45,170 --> 00:07:49,490
failed. But now that I've completed this step,

31823
00:07:49,550 --> 00:07:54,550
I can actually comment it out because I've now created my user.

31824
00:07:55,370 --> 00:08:00,370
We've now set up ourselves with a new account on Pixela with a username and also

31825
00:08:02,120 --> 00:08:06,110
a secret token that we're gonna use in the future to access this account.

31826
00:08:06,560 --> 00:08:11,060
It's effectively our user name and password. So in the next lesson

31827
00:08:11,120 --> 00:08:14,960
we're going to create our graph and we're going to learn how to use a more

31828
00:08:14,960 --> 00:08:17,570
secure method of authentication.

31829
00:08:18,080 --> 00:08:21,110
So for all of that and more, I'll see you on the next lesson.


31830
00:00:00,360 --> 00:00:03,090
Previously we completed step one

31831
00:00:03,330 --> 00:00:06,960
which is setting up a user account on Pixela.

31832
00:00:07,590 --> 00:00:09,360
Now we can move on to step two

31833
00:00:09,450 --> 00:00:13,920
which is to create a new graph on Pixela for our username.

31834
00:00:14,550 --> 00:00:19,550
So notice how the endpoint is now different because in addition to /

31835
00:00:20,160 --> 00:00:21,210
v1/users

31836
00:00:21,480 --> 00:00:26,480
we also have to add our username now and then for /graphs.

31837
00:00:27,030 --> 00:00:31,590
So let's go back to the documentation and scroll down to the relevant part of

31838
00:00:31,590 --> 00:00:36,030
the API, which is this part to create a graph, that's step two.

31839
00:00:37,410 --> 00:00:40,890
This is also going to be a HTTP post request,

31840
00:00:41,310 --> 00:00:43,770
but the end point has now changed.

31841
00:00:44,280 --> 00:00:47,160
So let's go ahead and create our new endpoint

31842
00:00:47,580 --> 00:00:49,770
which is the graph endpoint.

31843
00:00:51,750 --> 00:00:56,340
And this is going to be comprised of the Pixela endpoint

31844
00:00:56,700 --> 00:01:00,780
and then in addition, it's going to be / our username.

31845
00:01:01,770 --> 00:01:03,090
So let's take out our

31846
00:01:03,090 --> 00:01:07,050
username and our token and put it as a constant at the top.

31847
00:01:07,130 --> 00:01:07,963
Right

31848
00:01:14,840 --> 00:01:17,720
Now we can add that in here using an f-string

31849
00:01:20,630 --> 00:01:23,300
and then finally it's /graphs.

31850
00:01:25,700 --> 00:01:27,920
Now, remember if you're doing this along with me,

31851
00:01:27,950 --> 00:01:32,750
this username is going to have to be your own unique username and the token is

31852
00:01:32,750 --> 00:01:34,700
going to be your own secret token.

31853
00:01:36,230 --> 00:01:38,360
Once we've created our graph end point,

31854
00:01:38,600 --> 00:01:43,130
the next step is to make our post request. Again,

31855
00:01:43,160 --> 00:01:48,160
we're going to use our request module and call the post method to make this

31856
00:01:48,200 --> 00:01:52,760
request. This time what is the data that we want to send over?

31857
00:01:53,330 --> 00:01:53,690
Well,

31858
00:01:53,690 --> 00:01:58,690
we want to be able to add the ID of our new graph,

31859
00:01:59,300 --> 00:02:04,300
so some way of identifying it in the URL, and then the name of the graph,

31860
00:02:05,090 --> 00:02:09,590
and then the unit of measure that we're keeping track of. For example,

31861
00:02:09,590 --> 00:02:11,600
if I'm keeping track of my cycling,

31862
00:02:11,840 --> 00:02:14,540
then that's going to be kilometers that I've cycled,

31863
00:02:14,870 --> 00:02:18,950
or if I want to keep track of how long I'm coding

31864
00:02:18,980 --> 00:02:21,320
then that might be minutes or hours.

31865
00:02:21,950 --> 00:02:25,850
And then the data type of the unit of measure.

31866
00:02:26,240 --> 00:02:29,930
If I was tracking the number of pages I've read then they'll be whole numbers,

31867
00:02:30,320 --> 00:02:32,660
if I'm tracking the number of kilometers I've ridden

31868
00:02:32,900 --> 00:02:36,470
then it's probably going to be a floating point number. And then finally,

31869
00:02:36,500 --> 00:02:39,530
we're going to specify the color of our graph. Here

31870
00:02:39,530 --> 00:02:42,950
you have to be a little bit careful because these are strings

31871
00:02:42,980 --> 00:02:46,160
which are actually in Japanese. So for example,

31872
00:02:46,580 --> 00:02:48,680
momiji is autumn leaves.

31873
00:02:49,250 --> 00:02:52,580
shibafu is grass, sara is sky,

31874
00:02:53,300 --> 00:02:58,300
and they've got a whole bunch of poetic names for each of these colors,

31875
00:02:58,790 --> 00:03:01,120
which wonderful, but it also prone to errors.

31876
00:03:01,180 --> 00:03:05,590
So you have to be careful when you're typing in the color that you want.

31877
00:03:05,800 --> 00:03:09,640
And if in doubt, just simply copy it from the documentation.

31878
00:03:10,930 --> 00:03:14,110
So let's go ahead and create our graph configuration.

31879
00:03:15,730 --> 00:03:20,080
To start off, I have to specify an ID. And in this case,

31880
00:03:20,110 --> 00:03:23,590
it has to start off with some letters from A to Z,

31881
00:03:23,920 --> 00:03:26,050
and then it could be letters or numbers.

31882
00:03:26,500 --> 00:03:29,680
And it has to be between 1 and 16 characters.

31883
00:03:30,100 --> 00:03:33,280
Let's say that the id of my graph is going to be graph1,

31884
00:03:33,730 --> 00:03:38,730
notice how we can't have the number just at the beginning because of these rules.

31885
00:03:40,450 --> 00:03:42,460
Next is the name of the graph.

31886
00:03:44,320 --> 00:03:46,750
So mine is going to be my cycling graph,

31887
00:03:47,830 --> 00:03:50,110
and then it's the unit of measure.

31888
00:03:50,860 --> 00:03:55,030
So because I'm tracking my cycling, it's going to be in kilometers.

31889
00:03:55,960 --> 00:04:00,880
And then it's going to be the type of data that I'm going to be posting in this

31890
00:04:00,880 --> 00:04:03,310
unit. Because it's kilometers,

31891
00:04:03,490 --> 00:04:06,370
I'm probably going to have some numbers after the decimal point.

31892
00:04:06,640 --> 00:04:09,730
So I'm going to keep it as a float rather than an int.

31893
00:04:10,780 --> 00:04:13,450
And finally, we're going to pick a color.

31894
00:04:14,080 --> 00:04:18,370
I'm going to pick purple, ajisai, which is hydrangea flower.

31895
00:04:18,910 --> 00:04:21,670
And just to make sure I don't make a mistake,

31896
00:04:21,700 --> 00:04:24,160
I'm going to copy that and paste it in.

31897
00:04:25,570 --> 00:04:30,520
That's all of my required graph config. But right now,

31898
00:04:31,060 --> 00:04:33,280
if I do the same thing as I did before

31899
00:04:33,310 --> 00:04:37,660
which is to put in my graph endpoint as the URL

31900
00:04:38,080 --> 00:04:42,460
and then the JSON is set to equal the graph config,

31901
00:04:42,970 --> 00:04:47,440
if I actually post this right now, it's not going to work.

31902
00:04:47,680 --> 00:04:52,570
And if I print the response.text, you'll see the reason.

31903
00:04:54,610 --> 00:04:58,750
The message tells me that the user angela does not exist.

31904
00:04:59,110 --> 00:05:03,790
I know it exists because I created in this step and I got a successful response,

31905
00:05:04,990 --> 00:05:09,940
or it's telling me that the token is wrong. So think about it.

31906
00:05:09,970 --> 00:05:12,760
Where have we actually provided our password?

31907
00:05:12,760 --> 00:05:16,750
Where if we provided our token in this request? No where.

31908
00:05:17,380 --> 00:05:19,930
It's not one of the request body keys.

31909
00:05:20,440 --> 00:05:24,070
So how do we provide our authentication? Well,

31910
00:05:24,070 --> 00:05:26,620
it's done using the request header.

31911
00:05:27,130 --> 00:05:29,080
We have to provide this key

31912
00:05:29,170 --> 00:05:34,170
and it's gonna look for the token that we used to register with Pixela.

31913
00:05:35,650 --> 00:05:40,060
You might have even noticed previously when we were working with the news API

31914
00:05:40,390 --> 00:05:42,820
that when we were looking at the authentication,

31915
00:05:43,150 --> 00:05:48,150
even though there's three methods for authentication, via a API key, query string

31916
00:05:49,330 --> 00:05:50,050
parameter

31917
00:05:50,050 --> 00:05:55,050
which is what we used or via the X-Api-Key HTTP header or via the authorization

31918
00:05:56,750 --> 00:05:57,680
HTEP header.

31919
00:05:58,160 --> 00:06:02,810
And you can see that they actually say we strongly recommend either of the

31920
00:06:02,810 --> 00:06:06,350
latter two, so using the HTTP header.

31921
00:06:06,830 --> 00:06:11,270
And the reason is so that your API key isn't visible to others in logs

31922
00:06:11,510 --> 00:06:13,730
or if they're doing requests sniffing.

31923
00:06:14,990 --> 00:06:17,720
So what exactly are these headers anyways?

31924
00:06:18,020 --> 00:06:21,290
Well if you think about a letter that you might get in the mail,

31925
00:06:21,530 --> 00:06:26,390
the header is the part that contains some relevant pieces of information,

31926
00:06:26,390 --> 00:06:27,350
like, um,

31927
00:06:27,620 --> 00:06:32,240
the phone numbers of the company or their website of the company or their logo.

31928
00:06:32,780 --> 00:06:36,380
And then the body is the actual message part sesentially.

31929
00:06:36,380 --> 00:06:40,610
It's the part that changes from letter to letter. Now,

31930
00:06:40,640 --> 00:06:45,640
back in the previous project where we created our stock news alert application,

31931
00:06:46,970 --> 00:06:51,970
you can see that we're simply sending our API key as a parameter

31932
00:06:53,810 --> 00:06:58,810
along with the get request. And what this effectively looks like

31933
00:06:59,510 --> 00:07:04,220
if we're doing it in the browser is we're taking the news endpoint,

31934
00:07:04,670 --> 00:07:09,670
we're putting it into the URL bar and then we're adding our parameters.

31935
00:07:10,700 --> 00:07:12,890
So the first one is the API key.

31936
00:07:14,540 --> 00:07:18,350
And then the next one is the actual query.

31937
00:07:19,550 --> 00:07:23,990
So we were querying for the company name in the title of the news piece

31938
00:07:24,440 --> 00:07:26,600
and we were looking for Tesla.

31939
00:07:27,320 --> 00:07:31,460
This is effectively exactly the same as our code here.

31940
00:07:31,970 --> 00:07:36,200
We make a request to that URL and pass over these parameters.

31941
00:07:36,560 --> 00:07:39,770
There's effectively no difference between this and that.

31942
00:07:40,370 --> 00:07:45,110
As you can imagine, all our secret stuff in the request itself.

31943
00:07:45,500 --> 00:07:47,450
So if anybody's monitoring this,

31944
00:07:47,510 --> 00:07:51,710
then they will be able to see all of this information and they might be able to

31945
00:07:51,710 --> 00:07:54,890
steal your API key. Now,

31946
00:07:54,890 --> 00:07:59,890
one of the things that's reassuring is that this API is accessed via HTTPS and

31947
00:08:01,880 --> 00:08:04,070
the S stands for secure.

31948
00:08:04,400 --> 00:08:07,610
So this request is actually encrypted,

31949
00:08:07,970 --> 00:08:12,970
but it doesn't stop somebody from installing something on your browser to look

31950
00:08:13,130 --> 00:08:14,660
at what requests you're making

31951
00:08:15,260 --> 00:08:20,260
and there are certain cases where this might leak your API key to somebody that

31952
00:08:21,530 --> 00:08:25,370
you don't want to. So for some API providers,

31953
00:08:25,400 --> 00:08:29,630
you'll see that they want you to provide the authentication in the header.

31954
00:08:30,410 --> 00:08:35,240
Let's go ahead and do that. So let's take the key that they're expecting

31955
00:08:35,870 --> 00:08:39,409
and let's create a dictionary called headers,

31956
00:08:41,659 --> 00:08:44,210
and let's make that the key,

31957
00:08:44,540 --> 00:08:47,930
and then the value is going to be our token.

31958
00:08:48,270 --> 00:08:51,950
This is our top secret password. Now,

31959
00:08:51,950 --> 00:08:56,950
in addition to our URL on the JSON that we're sending over to Pixela,

31960
00:08:57,390 --> 00:09:02,340
we're also going to add a optional keyword argument which is called headers.

31961
00:09:02,910 --> 00:09:07,860
This is not going to show up when you start typing, not like JSON or URL.

31962
00:09:08,010 --> 00:09:12,990
And this is because it's one of the kwargs or keyword arguments.

31963
00:09:13,590 --> 00:09:17,370
And that means you also have to spell it exactly right

31964
00:09:17,460 --> 00:09:21,750
and make sure you don't make any typos. It's headers with an S at the end.

31965
00:09:22,260 --> 00:09:26,370
And then we're going to pass our variable headers into this parameter.

31966
00:09:27,990 --> 00:09:31,350
Now what we're going to make our request once more,

31967
00:09:31,830 --> 00:09:35,640
and you can see this time when we print the response.text,

31968
00:09:35,730 --> 00:09:40,730
it gives us success and we've now managed to set up our brand new cycling graph.

31969
00:09:42,890 --> 00:09:45,290
So if we go back to step three,

31970
00:09:45,410 --> 00:09:50,410
we can actually go ahead and look at our cycling graph by going to this URL and

31971
00:09:50,840 --> 00:09:55,550
replacing this part which is the creator's username with our own,

31972
00:09:55,580 --> 00:09:58,490
so mine was angela. Yours will be something else.

31973
00:09:58,790 --> 00:10:02,540
And we're also going to replace this final part with our ID,

31974
00:10:02,720 --> 00:10:05,090
which in my case is just graph1.

31975
00:10:05,870 --> 00:10:09,890
Now we're going to finally tag on .html to the end,

31976
00:10:09,980 --> 00:10:11,120
and when I hit enter,

31977
00:10:11,480 --> 00:10:16,480
you'll see it go to my brand new cycling graph right here.

31978
00:10:17,150 --> 00:10:20,900
And it's going to be colored in purple and it's going to look beautiful and it's

31979
00:10:20,900 --> 00:10:23,840
going to start tracking my cycling data.

31980
00:10:25,070 --> 00:10:29,750
So this is how we can authenticate ourselves using a header

31981
00:10:30,140 --> 00:10:35,140
and the requests module makes passing over headers just as easy as passing over

31982
00:10:35,990 --> 00:10:40,990
other parameters or other parts of the message body. In the next lesson,

31983
00:10:41,660 --> 00:10:46,100
we're going to be moving on to step 4 so that we can finally add a

31984
00:10:46,130 --> 00:10:48,740
the pixel of data to our graph.

31985
00:10:49,250 --> 00:10:51,830
So head over to the next lesson and give that a go.


31986
00:00:00,120 --> 00:00:03,000
So we're now finally ready to move on to the last step,

31987
00:00:03,330 --> 00:00:05,939
which is posting a value to our graph.

31988
00:00:06,360 --> 00:00:10,920
And this is going to create a new pixel on our habit graph.

31989
00:00:11,820 --> 00:00:15,570
So I want you to pull up the relevant piece of documentation

31990
00:00:15,660 --> 00:00:18,630
which is going to be posting a pixel.

31991
00:00:19,320 --> 00:00:24,320
And I want you to take a look at the description and the header and the body,

31992
00:00:25,470 --> 00:00:28,320
and see if you can complete the step as a challenge.

31993
00:00:28,710 --> 00:00:33,330
Notice that, firstly, the endpoint is again different and everything that's

31994
00:00:33,330 --> 00:00:34,163
inside

31995
00:00:34,170 --> 00:00:38,520
these angle brackets need to be replaced with your actual values.

31996
00:00:38,580 --> 00:00:42,660
So your actual username and your actual graph ID. In addition,

31997
00:00:42,720 --> 00:00:47,720
this is again going to be a post request and it requires the authentication in

31998
00:00:48,150 --> 00:00:50,670
the request header. Finally,

31999
00:00:50,670 --> 00:00:55,530
you have to provide the date in the format of four characters for the year,

32000
00:00:55,530 --> 00:00:58,710
two characters for the month and two characters for the day.

32001
00:00:59,010 --> 00:01:01,380
So today would be 2020

32002
00:01:01,410 --> 00:01:04,739
0724 in this format.

32003
00:01:05,280 --> 00:01:09,750
And then you have to provide the quantity that you want to add to today's pixel.

32004
00:01:10,050 --> 00:01:14,250
So if you cycled 10.5 kilometers, then it would be 10.5.

32005
00:01:14,640 --> 00:01:19,080
If you originally set up your graph to track integers, for example,

32006
00:01:19,080 --> 00:01:22,590
the number of pages you read in a book, then that would be the number.

32007
00:01:23,310 --> 00:01:27,780
So I want you to pause the video and see if you can complete this step as a

32008
00:01:27,780 --> 00:01:29,850
challenge. Have a go now.

32009
00:01:33,260 --> 00:01:37,430
All right. So the first thing we're going to do is to update our end point.

32010
00:01:38,720 --> 00:01:42,590
I'm gonna comment out this previous step because we've already created our graph

32011
00:01:43,040 --> 00:01:45,890
and we're now going to move on to our pixel creation.

32012
00:01:46,010 --> 00:01:48,890
So that's what I'm going to call my endpoint.

32013
00:01:51,260 --> 00:01:55,550
Now, this pixel creation endpoint is obviously not what we need.

32014
00:01:55,610 --> 00:01:59,990
We need to format this URL so that we add in the first part

32015
00:02:00,110 --> 00:02:04,520
which is the pixela endpoint which goes up to /users.

32016
00:02:05,330 --> 00:02:07,160
So that's all of this part.

32017
00:02:07,280 --> 00:02:11,180
So we can use an f-string and add the pixel endpoint.

32018
00:02:11,570 --> 00:02:16,370
And then we're going to replace the /username with our own

32019
00:02:16,400 --> 00:02:19,880
username, and then it's /graphs

32020
00:02:20,030 --> 00:02:23,930
and we have to replace this graph ID as well. And in my case,

32021
00:02:23,930 --> 00:02:26,570
the graph ID is simply just graph1.

32022
00:02:26,990 --> 00:02:30,830
So it might make sense to create a constant for that as well,

32023
00:02:31,160 --> 00:02:31,993
right?

32024
00:02:41,630 --> 00:02:45,950
So that we can use it at the very end of this endpoint.

32025
00:02:47,090 --> 00:02:49,550
So now that we've created our end point,

32026
00:02:49,940 --> 00:02:53,420
the next step is to create the request body.

32027
00:02:53,780 --> 00:02:56,570
So passing over the date and the quantity.

32028
00:02:57,620 --> 00:02:59,740
So I'm going to create the pixel_data,

32029
00:03:00,790 --> 00:03:04,000
and this is going to first have the date,

32030
00:03:04,300 --> 00:03:07,360
but it has to be formatted in the way they specified.

32031
00:03:07,510 --> 00:03:11,350
So four characters for the year, which is 2020,

32032
00:03:11,380 --> 00:03:13,060
and then two characters for the month,

32033
00:03:13,330 --> 00:03:15,850
07, and then two characters for the day.

32034
00:03:16,510 --> 00:03:21,510
But notice here that they specify the data type for the date has to be a string.

32035
00:03:22,390 --> 00:03:24,640
So we can't simply leave it as a number.

32036
00:03:24,790 --> 00:03:27,610
So we have to add some quotation marks around it.

32037
00:03:28,480 --> 00:03:31,360
And then finally we can add the actual data

32038
00:03:31,480 --> 00:03:35,140
which is going to go under the key quantity

32039
00:03:35,680 --> 00:03:37,840
and this is also going to be a string

32040
00:03:38,140 --> 00:03:41,830
and this is the quantity that we're going to register in the pixel

32041
00:03:42,070 --> 00:03:46,360
and that's going to determine the intensity of the actual pixel.

32042
00:03:47,320 --> 00:03:51,370
So in my case, I did actually go for a quick ride today. Um,

32043
00:03:51,880 --> 00:03:55,480
and my stats were not fantastic, but, um,

32044
00:03:55,780 --> 00:03:56,890
I'm still gonna log it.

32045
00:03:57,040 --> 00:04:00,790
So that was 9.74 kilometers that I cycled.

32046
00:04:01,660 --> 00:04:06,640
So that's what my quantity is going to be, 9.74. And again,

32047
00:04:06,670 --> 00:04:10,690
this is a string because that's what the documentation tells us.

32048
00:04:12,160 --> 00:04:14,320
And remember that when you set up your graph,

32049
00:04:14,410 --> 00:04:17,079
if you set up the data type to receive floats,

32050
00:04:17,380 --> 00:04:21,339
then you can actually give it a floating-point number. If you set it up as int,

32051
00:04:21,350 --> 00:04:23,380
then you have to give it a whole number.

32052
00:04:24,340 --> 00:04:26,650
Now that we've got our data and our endpoint,

32053
00:04:26,680 --> 00:04:31,330
then we're finally ready to create our requests. So you request.posts.

32054
00:04:31,690 --> 00:04:32,590
And again,

32055
00:04:32,620 --> 00:04:36,910
our URL is going to be this new pixel creation endpoint.

32056
00:04:38,230 --> 00:04:42,100
Our JSON that we're going to pass over is our pixel_data,

32057
00:04:42,820 --> 00:04:43,990
and finally,

32058
00:04:44,020 --> 00:04:47,920
we're going to reuse the headers that we had from previously,

32059
00:04:48,340 --> 00:04:52,750
because it still contains the same token that we need to authenticate ourselves.

32060
00:04:53,440 --> 00:04:56,350
So let's see what is the response that we get back.

32061
00:04:56,470 --> 00:05:01,470
So I'm going to print out the response.text and hopefully if everything went

32062
00:05:03,790 --> 00:05:07,450
well, then we should get the success message.

32063
00:05:08,110 --> 00:05:10,570
But now is the most exciting part.

32064
00:05:10,780 --> 00:05:14,710
You can go back to our cycling graph and then hit refresh,

32065
00:05:15,040 --> 00:05:20,040
and we should see all brand new pixel show up in our graph right there.

32066
00:05:22,540 --> 00:05:26,980
And it tells us today we cycled 9.74 kilometers.

32067
00:05:28,300 --> 00:05:30,520
One thing you might be wondering is, well,

32068
00:05:30,580 --> 00:05:33,370
how can we get this date to be automated?

32069
00:05:33,400 --> 00:05:36,550
Because I don't want to have to check the date and type it in.

32070
00:05:36,790 --> 00:05:40,510
We can use the date time module, right? So in the next lesson,

32071
00:05:40,540 --> 00:05:45,370
I'm going to show you how you can use a method called strftime in order to

32072
00:05:45,370 --> 00:05:50,370
format the date time that you get from Python into any format that you require.

32073
00:05:51,820 --> 00:05:54,640
For all of that and more, I'll see you on the next lesson.


32074
00:00:00,180 --> 00:00:04,170
In the previous lesson, we saw how we could create a pixel.

32075
00:00:04,560 --> 00:00:08,220
But one of the things that would be nice is instead of having to type this

32076
00:00:08,220 --> 00:00:09,053
manually,

32077
00:00:09,240 --> 00:00:14,240
I would really like to be able to create that using the date-time module.

32078
00:00:15,090 --> 00:00:19,500
I can import my datetime, so from datetime module,

32079
00:00:19,530 --> 00:00:22,860
I'm going to import the datetime class.

32080
00:00:23,550 --> 00:00:28,550
And now I can use it to get today's date by tapping into datetime.now.

32081
00:00:30,330 --> 00:00:31,950
But if I print this out,

32082
00:00:32,040 --> 00:00:37,040
you can see that this is clearly not going to be in the format that I need it to

32083
00:00:37,080 --> 00:00:37,770
be.

32084
00:00:37,770 --> 00:00:42,770
So I'm gonna comment out my request and I'm going to take a look at what my data

32085
00:00:42,900 --> 00:00:46,260
looks like. This contains the date and time,

32086
00:00:46,560 --> 00:00:49,530
and it's in a different format.

32087
00:00:50,460 --> 00:00:53,910
So whenever we're encounter a new API or a new service,

32088
00:00:54,180 --> 00:00:58,980
they often want the date and time in a different format. For example, in Asia,

32089
00:00:58,980 --> 00:01:02,430
the year tends to come first, in the US or in the UK,

32090
00:01:02,550 --> 00:01:04,440
the year tend to come at the end.

32091
00:01:05,250 --> 00:01:09,660
How can we format the Python date to any format we need? Well,

32092
00:01:09,720 --> 00:01:14,720
there is a really useful method called the strftime method.

32093
00:01:15,630 --> 00:01:20,630
And this allows us to pass in a string that will a format

32094
00:01:21,180 --> 00:01:25,680
the date that we get back from datetime into any format we need.

32095
00:01:26,250 --> 00:01:27,083
For example,

32096
00:01:27,180 --> 00:01:32,180
if we pass in %a then we'll get the short version of the week-

32097
00:01:32,400 --> 00:01:35,700
day. If we pass in a %b,

32098
00:01:35,760 --> 00:01:40,050
then we'll get the full name of the month and so on and so forth.

32099
00:01:40,230 --> 00:01:45,230
So we can use this table to actually create the exact date format we need.

32100
00:01:46,380 --> 00:01:51,380
Let's go ahead and take this today and let's go ahead and use the strftime

32101
00:01:54,690 --> 00:01:57,300
and we're going to pass in a string. Now,

32102
00:01:57,300 --> 00:02:01,260
the first string we need is the year in the full version.

32103
00:02:01,290 --> 00:02:04,710
So this is going to be %Y and it's a capital Y.

32104
00:02:06,120 --> 00:02:09,449
Now, if you need a dash, then you can add a dash. If you need a space,

32105
00:02:09,479 --> 00:02:12,870
you can add a space. But in my case, I actually wanted it all together.

32106
00:02:13,230 --> 00:02:16,140
So the next thing I want is the month as a number.

32107
00:02:16,170 --> 00:02:18,360
So that's %m

32108
00:02:19,980 --> 00:02:23,280
and then it's %d to get the day of the month.

32109
00:02:25,980 --> 00:02:28,500
Now, if I actually print this out,

32110
00:02:31,770 --> 00:02:35,760
you can see that this is formatted in the exact format I need.

32111
00:02:35,850 --> 00:02:39,180
And if I wanna add in a, I dunno,

32112
00:02:39,240 --> 00:02:41,940
asterix there then it'll format it like that.

32113
00:02:42,240 --> 00:02:47,010
If I want to change the date to a word like Wednesday or December,

32114
00:02:47,040 --> 00:02:49,200
then I can simply change that format string.

32115
00:02:50,760 --> 00:02:54,900
Now that we've managed to do this, then we can get our date

32116
00:02:54,900 --> 00:02:59,320
time programmatically using the datetime.now method.

32117
00:02:59,860 --> 00:03:03,280
We can also use it to create any datetime of our choosing.

32118
00:03:03,490 --> 00:03:07,720
So lets say I wanted a backtrack to create a pixel for yesterday.

32119
00:03:08,080 --> 00:03:12,730
Well then I can simply create my datetime by specifying the year,

32120
00:03:13,240 --> 00:03:17,320
the month and the day.

32121
00:03:17,350 --> 00:03:18,790
So today's 24th.

32122
00:03:18,820 --> 00:03:23,820
So yesterday was 23rd and then it's going to take that date and it's going to

32123
00:03:23,890 --> 00:03:28,000
format it into the correct format and then post a quantity.

32124
00:03:28,240 --> 00:03:30,700
So let's say that yesterday I cycled,

32125
00:03:30,940 --> 00:03:34,630
I did cycle a bit more actually, let's say it was 15 kilometers.

32126
00:03:35,320 --> 00:03:39,040
Now if I go ahead and uncomment this and run it again,

32127
00:03:39,070 --> 00:03:43,270
it's gonna post the latest piece of data to pixela and

32128
00:03:43,750 --> 00:03:45,460
if we now update our graph,

32129
00:03:45,580 --> 00:03:50,580
you can see I've now got two pixels and this one is a lot heavier in terms of

32130
00:03:51,730 --> 00:03:55,960
color to show that I cycled a lot further than today.

32131
00:03:57,070 --> 00:04:01,150
And we've now got a total kilometer, a max, a min,

32132
00:04:01,150 --> 00:04:03,610
an average and the total number of pixels.

32133
00:04:04,660 --> 00:04:08,530
The last thing I want to show you before we finish off with this project is how

32134
00:04:08,530 --> 00:04:13,530
we can update and delete pixels using the put and delete requests.

32135
00:04:15,430 --> 00:04:17,290
That's what we're going to do in the next lesson.


32136
00:00:00,150 --> 00:00:02,820
Now in the very beginning of today's lessons,

32137
00:00:02,880 --> 00:00:07,880
I mentioned that we can do other requests in addition to get and post like put

32138
00:00:08,580 --> 00:00:09,413
and delete.

32139
00:00:09,900 --> 00:00:14,900
And we can do that using a similar format as we have done for get and post.

32140
00:00:15,750 --> 00:00:20,250
Just by simply changing the method we end up with a different behavior.

32141
00:00:20,850 --> 00:00:25,850
So put will change an existing piece of data and delete will delete the piece

32142
00:00:26,760 --> 00:00:29,160
of data. Let's try it out for size.

32143
00:00:29,790 --> 00:00:34,440
If we go into the documentation and we scroll down to all the things that we can

32144
00:00:34,440 --> 00:00:36,120
do to pixels, you can see

32145
00:00:36,120 --> 00:00:39,840
we can also update a pixel, which is put, and delete a pixel.

32146
00:00:40,200 --> 00:00:44,850
So let's click on update first and let's say that, um,

32147
00:00:44,940 --> 00:00:49,620
I decided that yesterday I didn't actually cycle 15 kilometers. I lied.

32148
00:00:49,650 --> 00:00:54,330
I only cycled 4. Well, how would we do that? Well,

32149
00:00:54,340 --> 00:00:59,340
we would use the documentation here and also the put method to achieve this.

32150
00:01:00,660 --> 00:01:05,250
So I want you to give it a go and see if you can figure it out. Now,

32151
00:01:05,310 --> 00:01:09,810
I've already told you that you need to use the put method and you know how to

32152
00:01:09,840 --> 00:01:13,860
format the endpoints and provide the request body and the header.

32153
00:01:14,160 --> 00:01:17,370
So pause the video and give this challenge a go.

32154
00:01:19,730 --> 00:01:20,390
Right?

32155
00:01:20,390 --> 00:01:20,720
All right.

32156
00:01:20,720 --> 00:01:25,720
So the first thing we're going to do is to copy this new format of the end

32157
00:01:25,910 --> 00:01:29,630
point and I'm going to comment out the previous part

32158
00:01:29,630 --> 00:01:34,610
where we posted our pixel and I'm going to create this new endpoint.

32159
00:01:34,640 --> 00:01:36,800
So this is the update_endpoint,

32160
00:01:38,660 --> 00:01:42,470
and it's going to be a combination of everything up to here,

32161
00:01:42,680 --> 00:01:44,450
which is our pixela

32162
00:01:44,630 --> 00:01:45,463
...

32163
00:01:47,480 --> 00:01:50,840
endpoint. And then it's your own username

32164
00:01:53,570 --> 00:01:56,360
and then it's graphs and then the graph ID.

32165
00:01:58,760 --> 00:02:00,800
And finally, it's the year,

32166
00:02:00,800 --> 00:02:04,850
month and date for the piece of data that you actually want to update.

32167
00:02:05,870 --> 00:02:09,530
So let's say that I'm going to update yesterday's piece of data

32168
00:02:09,560 --> 00:02:11,870
which I've manually created up here.

32169
00:02:11,960 --> 00:02:15,320
And I formatted using strftime right here.

32170
00:02:15,830 --> 00:02:20,830
So I'm going to replace this with a set of curly brackets and paste that in

32171
00:02:22,220 --> 00:02:25,460
there. Now notice,

32172
00:02:25,460 --> 00:02:28,850
because I've got these two sets of double quotes,

32173
00:02:28,910 --> 00:02:30,380
it's getting a little bit confused.

32174
00:02:30,680 --> 00:02:34,790
So I'm going to change one of those sets to a single quote instead.

32175
00:02:35,480 --> 00:02:38,960
And now I get rid of all my errors and warnings.

32176
00:02:40,220 --> 00:02:42,560
So this is our update endpoint.

32177
00:02:43,130 --> 00:02:46,580
And the only thing that we're going to change is the quantity.

32178
00:02:47,810 --> 00:02:51,980
Let's say I create a new pixel data dictionary.

32179
00:02:52,430 --> 00:02:57,430
And now my quantity instead of being 15 kilometers was, actually,  let's say 4.5.

32180
00:03:03,160 --> 00:03:04,990
So this is my new pixel data,

32181
00:03:05,410 --> 00:03:08,470
and now I'm ready to make my put request.

32182
00:03:08,860 --> 00:03:12,040
So we're using requests.put,

32183
00:03:12,340 --> 00:03:15,970
and then the URL is going to be the update endpoint,

32184
00:03:16,630 --> 00:03:20,170
the JSON is going to be our new pixel data,

32185
00:03:20,710 --> 00:03:25,330
and finally, the headers is going to be our headers for authentication.

32186
00:03:26,550 --> 00:03:27,383
Right.

32187
00:03:33,240 --> 00:03:35,880
So now let's go ahead and run this code.

32188
00:03:36,480 --> 00:03:41,460
And once we get our message success, we can go back to our chart,

32189
00:03:41,700 --> 00:03:42,533
refresh it,

32190
00:03:42,990 --> 00:03:47,880
and you'll see that yesterday's pixel no longer is as dense.

32191
00:03:47,970 --> 00:03:48,720
And in fact,

32192
00:03:48,720 --> 00:03:53,610
it's now lost a bit of color and it's been updated with the new value.

32193
00:03:55,290 --> 00:03:56,130
So finally,

32194
00:03:56,130 --> 00:04:01,130
we have our delete method and we're going to use that to delete a pixel.

32195
00:04:04,620 --> 00:04:06,690
Again, I want you to do this by yourself.

32196
00:04:06,750 --> 00:04:11,750
See if you can delete one of the pixels in your graph using the endpoint and the

32197
00:04:11,880 --> 00:04:12,750
documentation.

32198
00:04:14,190 --> 00:04:15,023
Go!

32199
00:04:16,410 --> 00:04:20,700
All right. So the endpoint is identical to the update endpoint.

32200
00:04:20,730 --> 00:04:25,730
So I'm simply just going to copy it and create a new one called delete.

32201
00:04:27,960 --> 00:04:32,610
And I'm also gonna comment out this request so that I use this one

32202
00:04:32,610 --> 00:04:36,990
instead. Now the delete endpoint doesn't actually take any data,

32203
00:04:37,170 --> 00:04:38,580
but it does need the header.

32204
00:04:39,120 --> 00:04:44,120
So we can use our request module and call the delete method and pass in the end

32205
00:04:45,630 --> 00:04:49,230
point which is the delete endpoint, the headers

32206
00:04:49,260 --> 00:04:51,720
which is our authentication headers,

32207
00:04:52,260 --> 00:04:55,830
and we can already enact our request.

32208
00:05:01,920 --> 00:05:02,580
Right

32209
00:05:02,580 --> 00:05:06,720
Now when we hit run, if it gives us a success message,

32210
00:05:07,050 --> 00:05:10,740
then we know that we've updated our data here

32211
00:05:11,280 --> 00:05:13,470
and we now no longer have two pixels.

32212
00:05:13,500 --> 00:05:16,980
We only have one cause we deleted the one for yesterday.

32213
00:05:17,970 --> 00:05:22,860
That's all there is to it. If now you want to be able to track your habit,

32214
00:05:23,190 --> 00:05:28,190
all you have to do is to comment out all of the rest of the responses and

32215
00:05:29,580 --> 00:05:34,580
reactivate the one where we post our pixel data and changing the quantity into a

32216
00:05:37,140 --> 00:05:40,400
custom input. So in my case,

32217
00:05:40,410 --> 00:05:45,410
it'll be how many kilometers did you cycle today?

32218
00:05:47,940 --> 00:05:52,320
And then of course changing our datetime back to now.

32219
00:05:54,090 --> 00:05:56,850
And now when I run my code,

32220
00:05:57,680 --> 00:06:01,390
it will go ahead and ask me how many kilometers I run.

32221
00:06:01,720 --> 00:06:05,350
I could type in the number, and then when I hit enter there,

32222
00:06:05,440 --> 00:06:09,460
data is going to be posted to the servers. Now, of course,

32223
00:06:09,460 --> 00:06:13,180
because I already have a piece of data, this is not going to let me,

32224
00:06:13,570 --> 00:06:17,740
so I'm going to have to wait for tomorrow to post my updated cycling data.

32225
00:06:18,550 --> 00:06:21,340
I hope you enjoyed building this project together.

32226
00:06:21,730 --> 00:06:26,730
And I hope you'll have a go at trying to modify this to your own habit tracking

32227
00:06:27,310 --> 00:06:31,240
and see if you can do some creative stuff with it. And as always,

32228
00:06:31,360 --> 00:06:34,540
if you create something fun, be sure to share it with the rest of us.



32229
00:00:00,510 --> 00:00:05,010
Hey guys, welcome to day 38 of 100 Days of Code. Now,

32230
00:00:05,040 --> 00:00:08,189
today I've got a challenge project for you.

32231
00:00:08,580 --> 00:00:13,580
And this challenge project is going to be building an exercise tracking

32232
00:00:13,710 --> 00:00:17,430
application using Python and Google sheets.

32233
00:00:18,090 --> 00:00:23,090
One of the things I've been trying to do recently is to track my workouts and

32234
00:00:23,130 --> 00:00:25,620
I've been doing that on pretty much pen and paper.

32235
00:00:26,250 --> 00:00:30,330
But wouldn't it be nice if we could track the workout that we're doing,

32236
00:00:30,690 --> 00:00:33,990
what time, how long we've been doing the exercises for,

32237
00:00:34,410 --> 00:00:39,060
and also figure out how many ice creams we can eat because of the workout that

32238
00:00:39,060 --> 00:00:43,170
we did. So tracking the amount of calories we've used up as well.

32239
00:00:44,160 --> 00:00:44,370
Now,

32240
00:00:44,370 --> 00:00:49,370
a lot of the inspiration for this project comes from the recent news on the Open

32241
00:00:49,800 --> 00:00:53,190
AI's GPT-3 AI model.

32242
00:00:53,820 --> 00:00:58,740
And it's a really smart, natural language processing model where for example,

32243
00:00:58,740 --> 00:01:01,860
if you went onto Wikipedia, you found an article on bread,

32244
00:01:02,160 --> 00:01:05,910
you decide to use this model to ask it, well, why is bread so fluffy?

32245
00:01:06,480 --> 00:01:11,190
It can actually search through all of the text and find you the relevant part.

32246
00:01:11,730 --> 00:01:16,620
So it's doing some intelligent stuff behind the scenes to understand what you're

32247
00:01:16,620 --> 00:01:19,620
saying and also understand what the article is all about.

32248
00:01:20,190 --> 00:01:23,670
And this is called natural language processing,

32249
00:01:23,790 --> 00:01:28,170
but it's just a very powerful one. Now, in our case,

32250
00:01:28,200 --> 00:01:31,260
we're also going to use natural language processing,

32251
00:01:31,680 --> 00:01:35,580
and we're going to write down the exercises that we did,

32252
00:01:35,760 --> 00:01:38,010
but in a normal English sentence.

32253
00:01:38,550 --> 00:01:43,440
You can imagine the situation where you're in the gym and you pull up your final

32254
00:01:43,470 --> 00:01:47,880
Repl.it. So this is the link to the completed app's console.

32255
00:01:48,380 --> 00:01:49,213
Right

32256
00:01:51,350 --> 00:01:53,510
Now I've pulled up this same page,

32257
00:01:53,570 --> 00:01:56,900
but on the Chrome browser on my mobile phone.

32258
00:01:57,350 --> 00:02:01,790
So this is what I might do after a gym workout or after a quick cycle.

32259
00:02:02,270 --> 00:02:07,270
And what we're going to try and do is to get the data to go into our spreadsheet

32260
00:02:07,340 --> 00:02:08,690
here on Google sheets.

32261
00:02:09,590 --> 00:02:14,590
So here I'm gonna type the I ran 5K and cycled for let's say,

32262
00:02:18,350 --> 00:02:19,220
20 minutes.

32263
00:02:20,060 --> 00:02:25,060
So this is my full input and it's pretty much just a plain English sentence.

32264
00:02:25,610 --> 00:02:29,390
Now I'm going to go ahead and hit return to trigger the code to run.

32265
00:02:29,930 --> 00:02:33,860
And immediately you can see that my activities have been logged.

32266
00:02:34,280 --> 00:02:37,070
So the date and time have been added automatically,

32267
00:02:37,490 --> 00:02:42,110
it's understood that one of my activities was running and it figured out the

32268
00:02:42,110 --> 00:02:45,620
duration based on the distance. So on average,

32269
00:02:45,830 --> 00:02:49,820
it might take somebody 31 minutes in order to run 5 kilometers.

32270
00:02:50,210 --> 00:02:54,800
And then it worked out the number of calories I've expended doing that activity.

32271
00:02:55,310 --> 00:02:57,290
And it did the same thing for my cycling,

32272
00:02:57,650 --> 00:03:02,650
except this time the duration comes from my input and the calories is calculated

32273
00:03:03,250 --> 00:03:04,090
automatically.

32274
00:03:04,870 --> 00:03:09,310
So this is really exciting and the best part you're going to be building it all

32275
00:03:09,310 --> 00:03:10,143
by yourself.

32276
00:03:10,810 --> 00:03:14,020
You're going to be using a bunch of things that you've learned so far,

32277
00:03:14,050 --> 00:03:17,980
including the Python datetime, strftime method,

32278
00:03:18,340 --> 00:03:23,140
using APIs, making post requests, creating authorization headers,

32279
00:03:23,260 --> 00:03:24,610
and environment variables.

32280
00:03:24,940 --> 00:03:28,450
You're going to be doing a bunch of this, step by step, by yourself.

32281
00:03:28,900 --> 00:03:30,760
And if you head over to the next lesson,

32282
00:03:31,120 --> 00:03:33,250
there's the instructions for how to get started.

32283
00:03:33,580 --> 00:03:36,970
So I hope you're excited to get started and I'll see you on the next lesson.


32284
00:00:00,150 --> 00:00:04,500
Hey there. Welcome to day 39 of 100 Days of Code.

32285
00:00:04,980 --> 00:00:05,400
Now,

32286
00:00:05,400 --> 00:00:10,260
today we've got a two part series and this is the part

32287
00:00:10,260 --> 00:00:12,360
one of your capstone project.

32288
00:00:12,840 --> 00:00:15,450
So we've been learning about APIs for quite a while now,

32289
00:00:15,660 --> 00:00:20,660
and we're going to be using a combination of different APIs to create a cheap

32290
00:00:21,780 --> 00:00:24,720
flight finder. Part one,

32291
00:00:25,020 --> 00:00:29,610
our program is going to find amazing flight deals just for ourselves.

32292
00:00:29,910 --> 00:00:30,930
And in part two,

32293
00:00:31,200 --> 00:00:36,200
we turn this project into a fully-fledged product where we can start signing up

32294
00:00:36,780 --> 00:00:41,190
users to use our service. So I don't know about you,

32295
00:00:41,220 --> 00:00:44,400
but I am a travel aficionado.

32296
00:00:44,430 --> 00:00:46,890
I absolutely love to travel.

32297
00:00:47,400 --> 00:00:51,030
I'm the sort of person who can't stay stationary in one location.

32298
00:00:51,510 --> 00:00:56,190
And one of the reasons why I teach Programming online is to be able to travel

32299
00:00:56,250 --> 00:00:58,020
and work from different places.

32300
00:00:58,500 --> 00:01:02,910
Now I'm not that picky about where I go. I think everywhere I go,

32301
00:01:02,910 --> 00:01:06,690
there's beautiful people who can teach me a lot of things.

32302
00:01:07,290 --> 00:01:12,290
So instead of planning a trip where I have one destination and I plan out the

32303
00:01:12,570 --> 00:01:16,350
time and date, I actually just look for a good deal.

32304
00:01:16,710 --> 00:01:18,660
So when I can get a flight

32305
00:01:18,660 --> 00:01:22,830
that's really cheap and it's to a location that I want to visit,

32306
00:01:23,190 --> 00:01:27,930
then I pretty much just go for it. So for example,

32307
00:01:28,440 --> 00:01:32,820
whereas a flight to New Zealand normally costs something like 800 pounds,

32308
00:01:33,240 --> 00:01:36,900
I managed to get a flight for just a 350 pounds,

32309
00:01:37,170 --> 00:01:39,030
and it was such a good deal.

32310
00:01:39,060 --> 00:01:43,170
It even included a stopover in Beijing where I was able to get some tasty duck

32311
00:01:43,710 --> 00:01:48,210
before I went onto the next 12-hour flight. Another case, um,

32312
00:01:48,240 --> 00:01:52,950
was Japan where the flight normally costs around 500,

32313
00:01:53,160 --> 00:01:58,140
550. And I managed to find a flight that was just a 250 pounds return.

32314
00:01:58,680 --> 00:02:02,880
And the savings on the flight meant that I got to eat some extra tasty sushi.

32315
00:02:03,420 --> 00:02:07,860
The way that these deals come about is imagine if you go onto a flight search

32316
00:02:07,860 --> 00:02:11,100
website and you look for flights,

32317
00:02:11,160 --> 00:02:12,990
anytime in the next six months,

32318
00:02:13,290 --> 00:02:16,590
every day for lots of different locations.

32319
00:02:16,980 --> 00:02:19,230
Then you will see that at some point,

32320
00:02:19,230 --> 00:02:23,490
one of the flight prices will come up and it's much lower than what you expect

32321
00:02:23,490 --> 00:02:27,600
it to be. And that's how you get a good deal. But of course,

32322
00:02:27,750 --> 00:02:30,420
we're too busy to do that every single day manually.

32323
00:02:30,810 --> 00:02:34,320
So here's how my program works. First,

32324
00:02:34,350 --> 00:02:39,350
we have a Google sheet which keeps track of the locations that we want to visit

32325
00:02:39,750 --> 00:02:44,520
and a price cutoff. So a historical low price.

32326
00:02:44,850 --> 00:02:45,683
For example,

32327
00:02:45,690 --> 00:02:50,690
maybe I want to go to Carola and visit kitchen and eat some tasty South Indian

32328
00:02:51,390 --> 00:02:52,470
food. Well,

32329
00:02:52,500 --> 00:02:57,060
maybe I would set the price at 350 pounds return from London.

32330
00:02:57,750 --> 00:03:02,560
So we take this data from our Google sheet with lots of different locations

32331
00:03:02,620 --> 00:03:07,180
and their lowest prices and we feed that into a flight search API,

32332
00:03:07,570 --> 00:03:11,260
which is going to run every day, searching through all of the locations

32333
00:03:11,530 --> 00:03:14,080
looking for the cheapest flight in the next six months.

32334
00:03:14,650 --> 00:03:19,420
When it comes up with a hit and it finds a flight that's actually cheaper than

32335
00:03:19,420 --> 00:03:20,800
our predefined price,

32336
00:03:21,100 --> 00:03:26,100
then it's going to send that date and price via our Twilio SMS module to our

32337
00:03:26,320 --> 00:03:29,110
mobile phone so that we can book it right there

32338
00:03:29,110 --> 00:03:33,160
and then. That's the theory of it, but let's see it in action.

32339
00:03:33,700 --> 00:03:38,700
So here I've got the code for my personal flight club and I'm going to run it

32340
00:03:39,490 --> 00:03:44,490
and we're going to watch my phone and wait to see if there were any good deals

32341
00:03:45,730 --> 00:03:46,900
that they found today.

32342
00:03:47,800 --> 00:03:52,800
And we get a text message from our Twilio account and there we have it. Today's

32343
00:03:54,580 --> 00:03:56,800
message says low price alert,

32344
00:03:57,010 --> 00:04:02,010
only 41 pounds to fly from London Stansted to Berlin from the 25th of August to

32345
00:04:03,970 --> 00:04:06,040
the 10th of September.

32346
00:04:06,670 --> 00:04:11,670
That was triggered because it looked at my spreadsheet of flight prices and it

32347
00:04:11,860 --> 00:04:14,770
found that out of all of these locations,

32348
00:04:15,220 --> 00:04:20,140
the only flight that it found which was cheaper than my lowest price was

32349
00:04:20,170 --> 00:04:22,600
for Berlin. It was actually only one pound cheaper.

32350
00:04:23,440 --> 00:04:27,190
So now that I've got my message, I can go ahead and book my trip to Berlin.

32351
00:04:28,720 --> 00:04:31,990
But before I do that, we're going to complete this capstone project.

32352
00:04:32,410 --> 00:04:36,670
So head over to the next lesson and let's get started building this project.


32353
00:00:00,210 --> 00:00:00,840
Hey guys,

32354
00:00:00,840 --> 00:00:05,840
welcome to day 40 of 100 Days of Code. Today is really exciting because

32355
00:00:06,870 --> 00:00:11,870
we're going to be upgrading the project that we created in the last day

32356
00:00:12,270 --> 00:00:17,220
to a fully-fledged product. We're going to be building a company today,

32357
00:00:17,610 --> 00:00:20,730
and this is part two of your capstone project.

32358
00:00:21,330 --> 00:00:26,130
Now the first rule of flight club is you do not talk about flight club.

32359
00:00:26,670 --> 00:00:31,410
So in part one, we created our flight deal hunter for ourselves,

32360
00:00:31,950 --> 00:00:36,300
and we only had a user base of one. Now in this part 2,

32361
00:00:36,420 --> 00:00:41,250
we're going to be leveling up the code so that we can start signing up users and

32362
00:00:41,250 --> 00:00:45,990
send them an email with a notification of all of the best flight deals.

32363
00:00:47,310 --> 00:00:50,940
A little while ago, I discovered a company called Jack's flight club,

32364
00:00:51,420 --> 00:00:52,950
and it's pretty simple.

32365
00:00:53,220 --> 00:00:57,600
All you have to do is put in your email and then they'll send you cheap flight

32366
00:00:57,600 --> 00:01:00,840
deals. So any flight within the next six months

32367
00:01:01,170 --> 00:01:06,120
that is a lot cheaper than it normally is, you'll get it through an email.

32368
00:01:06,570 --> 00:01:10,980
And if you're like me, somebody who doesn't really care where they're going

32369
00:01:11,310 --> 00:01:15,570
just as long as they're getting a good deal, then these emails are pretty cool,

32370
00:01:15,630 --> 00:01:16,463
right?

32371
00:01:16,830 --> 00:01:21,830
They actually charge for this premium service in order to get an email with all

32372
00:01:22,650 --> 00:01:27,630
of the latest deals and all of the best flight prices. Now,

32373
00:01:27,660 --> 00:01:28,560
if you think about it,

32374
00:01:28,650 --> 00:01:33,510
their service is essentially the same as what we've created using Python code.

32375
00:01:33,990 --> 00:01:37,890
Maybe they'll have a larger Google spreadsheet with more destinations,

32376
00:01:38,220 --> 00:01:40,350
but essentially it's pretty much the same.

32377
00:01:41,100 --> 00:01:46,100
I want you to take a look at their website, Jack's flight club, and see how it

32378
00:01:46,320 --> 00:01:50,940
works and you can see that they've actually got a whole bunch of members,

32379
00:01:51,390 --> 00:01:53,970
but this is essentially what we're going to replicate.

32380
00:01:54,930 --> 00:01:56,430
By the end of today,

32381
00:01:56,460 --> 00:02:01,460
we'll have a text-based way of getting our customers or users to join.

32382
00:02:02,160 --> 00:02:06,840
So maybe you've got some friends and family who might want to use your flight

32383
00:02:06,840 --> 00:02:09,210
club to get the best flight deals. Well

32384
00:02:09,210 --> 00:02:13,440
then all you have to do is point them to a link in Repl.it

32385
00:02:13,500 --> 00:02:17,880
which contains your customer acquisition code and then they get to, um,

32386
00:02:17,910 --> 00:02:22,440
enter in their name and email.

32387
00:02:24,000 --> 00:02:25,890
And after a little bit of validation,

32388
00:02:25,920 --> 00:02:30,920
we hit enter and we get added to a spreadsheet. In our spreadsheet,

32389
00:02:31,860 --> 00:02:33,780
in another sheet called users

32390
00:02:34,200 --> 00:02:37,620
we'll see all the details of our customer being added,

32391
00:02:38,100 --> 00:02:42,270
and we're going to be using the SMTP module that we learned about a long time

32392
00:02:42,270 --> 00:02:46,710
ago to email all of our users with the latest deals every day.

32393
00:02:47,700 --> 00:02:52,020
So head over to the next lesson and get started by downloading the starting

32394
00:02:52,020 --> 00:02:52,440
files.


32395
00:00:00,200 --> 00:00:02,540
Hey, guys, it's Angela from the App Brewery.

32396
00:00:02,540 --> 00:00:08,380
And in this lesson, we're going to deep dive into how exactly does the Internet work?

32397
00:00:08,390 --> 00:00:10,970
So what exactly is the Internet?

32398
00:00:11,000 --> 00:00:15,440
A lot of people think it's a cloud, something that's hanging around in the sky.

32399
00:00:15,440 --> 00:00:20,270
It's super complex, super difficult to understand, but actually that's not it at all.

32400
00:00:20,300 --> 00:00:22,760
The Internet is pretty simple.

32401
00:00:22,850 --> 00:00:29,510
All it is, is just a long piece of wire and wire connects different computers to each other.

32402
00:00:29,510 --> 00:00:35,090
So you might have one computer that's in London and another one that's in Seattle, and they can talk

32403
00:00:35,090 --> 00:00:38,450
to each other and transfer data through this giant wire.

32404
00:00:38,450 --> 00:00:42,530
Now, some of these computers attach to the Internet, have a very special job.

32405
00:00:42,560 --> 00:00:49,040
They have to be online 24 over seven ready to serve you all the data and files that you are requesting

32406
00:00:49,040 --> 00:00:51,110
when you try to access a website.

32407
00:00:51,260 --> 00:00:54,140
And these are called servers.

32408
00:00:54,170 --> 00:01:00,840
And what they do is they serve you all the data and files you need to be able to access and interact

32409
00:01:00,840 --> 00:01:02,250
with certain websites.

32410
00:01:02,250 --> 00:01:04,800
So these computers are called servers.

32411
00:01:04,800 --> 00:01:10,230
And any computer that a user would use to access the Internet is called a client.

32412
00:01:10,260 --> 00:01:16,620
Now you can imagine a web server as a giant library that's open 24 over seven, and you can go in there

32413
00:01:16,620 --> 00:01:22,350
at any hour of the day and say, I want to see Google's homepage or I want to see the latest posts on

32414
00:01:22,350 --> 00:01:27,870
TechCrunch and would be able to serve you with all the files and data you would need to be able to view

32415
00:01:27,900 --> 00:01:29,400
whatever website you want.

32416
00:01:29,430 --> 00:01:35,070
Now, as you can imagine, if there's a library that's big enough to house all of these websites, then

32417
00:01:35,070 --> 00:01:41,400
it's going to be pretty difficult to quickly locate the thing that you want out of this giant library.

32418
00:01:41,400 --> 00:01:41,970
Right?

32419
00:01:41,970 --> 00:01:44,670
So how is this problem solved on the Internet?

32420
00:01:45,120 --> 00:01:50,520
Well, let's say that you're sitting at home on your computer and you type in Google.com because you

32421
00:01:50,520 --> 00:01:53,070
want to head over to the main Google home page.

32422
00:01:53,160 --> 00:02:01,410
Well, what happens behind the scenes is that your browser will send that message to your ISP or your

32423
00:02:01,410 --> 00:02:03,030
Internet service provider.

32424
00:02:03,030 --> 00:02:06,630
So these are the people who you pay to be able to access the internet.

32425
00:02:06,840 --> 00:02:10,770
If you live in the US, that will be AT&T or Comcast.

32426
00:02:10,770 --> 00:02:14,490
And if you're in the UK, there will be something like BT or TalkTalk.

32427
00:02:14,520 --> 00:02:21,600
Now the message that you're sending the ISP is I want to see Google.com and the ISP will then relay

32428
00:02:21,600 --> 00:02:28,590
that message to something called a DNS server, which stands for a domain name system server.

32429
00:02:28,590 --> 00:02:33,180
And a DNS server is essentially just a souped up phone book.

32430
00:02:33,180 --> 00:02:39,000
And what happens when you make that request through your browser is the DNS server will look up in its

32431
00:02:39,000 --> 00:02:44,910
database to find the exact IP address of that website that you're trying to access.

32432
00:02:44,910 --> 00:02:50,160
And every single computer that's connected to the internet has an IP address.

32433
00:02:50,190 --> 00:02:55,680
It's kind of like a postal code for your computer so that when people need to send and receive files

32434
00:02:55,680 --> 00:03:02,940
on the Internet, each computer can be located and contacted using their unique IP address.

32435
00:03:02,940 --> 00:03:09,720
And once the DNS server finds that IP address, it will send it back to your browser through the ISP

32436
00:03:09,870 --> 00:03:11,190
over the Internet.

32437
00:03:11,220 --> 00:03:15,150
Then you can make a direct request to that address.

32438
00:03:15,150 --> 00:03:21,810
And what lives at that IP address is of course the Google servers and they'll be able to send you back

32439
00:03:21,810 --> 00:03:27,150
all the files and data you need to be able to view the Google Home page.

32440
00:03:27,150 --> 00:03:33,330
Now you can try this for yourself to look up the IP address of the Google Home page, head over to this

32441
00:03:33,330 --> 00:03:41,550
website nslookup.io and type in google.com and they should show you the exact IP address of the Google

32442
00:03:41,550 --> 00:03:43,470
servers that you can access.

32443
00:03:43,500 --> 00:03:49,230
Now, if you try checking this on a different day, say in a week or in a month's time, you might see

32444
00:03:49,230 --> 00:03:51,750
that this address actually changes.

32445
00:03:51,750 --> 00:03:56,880
And that's because many websites, including Google, use something called dynamic IP addresses, as

32446
00:03:56,880 --> 00:03:59,880
well as a content distribution network or a CDN.

32447
00:03:59,910 --> 00:04:05,310
This basically ensures that it gets you to the closest server to where you are located.

32448
00:04:05,310 --> 00:04:10,950
And also this address will change depending on whether if it's being used or not.

32449
00:04:10,950 --> 00:04:13,260
So don't type in what you see on screen.

32450
00:04:13,260 --> 00:04:20,160
Instead, head over to nslookup.io and look up what is the closest IP address to you that is currently

32451
00:04:20,160 --> 00:04:21,209
being used.

32452
00:04:21,300 --> 00:04:27,840
So if you copy it and paste it into a new tab, then you'll be able to replicate that process and see

32453
00:04:27,840 --> 00:04:29,490
the Google Home page show up.

32454
00:04:29,490 --> 00:04:37,590
So to summarize, the Internet is just a bunch of wires that connects up different computers, but it's

32455
00:04:37,590 --> 00:04:42,150
just on a much bigger scale connecting up all the computers in the world.

32456
00:04:42,150 --> 00:04:43,710
But what about the oceans?

32457
00:04:43,710 --> 00:04:44,810
I hear you ask.

32458
00:04:44,820 --> 00:04:47,310
Well, that's one of the coolest things.

32459
00:04:47,310 --> 00:04:52,710
There are these massive undersea cables connecting all the continents on earth.

32460
00:04:52,710 --> 00:04:59,640
And if you head over to submarine cable map.com, you can see all of these cables and see the ones that

32461
00:04:59,640 --> 00:04:59,820
connect.

32462
00:05:00,030 --> 00:05:01,480
You up to the Internet.

32463
00:05:01,480 --> 00:05:08,140
And these undersea cables are massive, consisting of hundreds of fiber optic fibers, each of them

32464
00:05:08,140 --> 00:05:13,030
using lasers to transmit up to 400GB of data per second.

32465
00:05:13,060 --> 00:05:16,720
This is a cross-section of one of the cables that run to New Zealand.

32466
00:05:16,750 --> 00:05:20,020
It's an absolute marvel of modern technology.

32467
00:05:20,020 --> 00:05:22,600
And it looks really beautiful, don't you think?

32468
00:05:22,630 --> 00:05:28,360
And to think that every single time we load up a web page or click on a button on a website, behind

32469
00:05:28,360 --> 00:05:34,710
the scenes was sending signals that navigate all of this crazy underwater and above water wires.

32470
00:05:34,720 --> 00:05:37,630
And all I need is just an IP address.

32471
00:05:37,630 --> 00:05:43,030
And through tiny electric signals, traveling at the speed of light through the oceans and halfway around

32472
00:05:43,030 --> 00:05:50,080
the world in a matter of milliseconds, I get to view my favorite websites and that is how awesome the

32473
00:05:50,080 --> 00:05:51,150
internet is.

32474
00:05:51,160 --> 00:05:55,630
And we're going to be taming it to build our own websites and web apps.

32475
00:05:55,630 --> 00:06:01,330
And to be able to do that, we first have to understand how exactly do websites work.

32476
00:06:01,340 --> 00:06:04,940
So for all of that and more, I'll see you on the next lesson.


32477
00:00:00,450 --> 00:00:04,530
Now that we've spoken about how the internet works, in this episode

32478
00:00:04,560 --> 00:00:09,240
I want to talk about how exactly do websites work. What exactly does HTML,

32479
00:00:09,240 --> 00:00:14,130
CSS and JavaScript do exactly? Now, in order to access a webpage,

32480
00:00:14,160 --> 00:00:18,420
we all know that you need a browser, right? And that can be Chrome,

32481
00:00:18,480 --> 00:00:21,330
Safari, Firefox, whatever is your favorite one.

32482
00:00:21,570 --> 00:00:26,570
These are all pieces of software that allow you to look up the IP address of

32483
00:00:27,420 --> 00:00:32,420
your website and be able to receive data that it can render into this beautiful

32484
00:00:33,060 --> 00:00:34,950
websites that we see. Now,

32485
00:00:35,310 --> 00:00:40,100
the data that you receive from the server usually consists of three types of

32486
00:00:40,100 --> 00:00:43,400
files; HTML, CSS, and JavaScript.

32487
00:00:43,700 --> 00:00:48,080
And it's very likely that you would have come across these types of files or

32488
00:00:48,080 --> 00:00:49,340
these words before,

32489
00:00:49,610 --> 00:00:53,930
because they're so common and there are so integral to how websites work.

32490
00:00:53,960 --> 00:00:56,150
But, what exactly do they do

32491
00:00:56,210 --> 00:00:58,970
and why are there so many different types of files?

32492
00:00:59,300 --> 00:01:03,440
Why can't we just have one file that's, you know, a website? Well,

32493
00:01:03,710 --> 00:01:05,480
they actually have very different jobs.

32494
00:01:05,690 --> 00:01:10,690
The HTML code file is responsible for the structure of your website.

32495
00:01:11,030 --> 00:01:12,860
So if a website was a house,

32496
00:01:13,130 --> 00:01:18,020
then the HTML would be the builder who would come in to build the walls or put

32497
00:01:18,020 --> 00:01:22,670
in a toilet. Basically they establish the structure of your house.

32498
00:01:23,000 --> 00:01:27,410
And when you write HTML code, you also build up the structure of your website.

32499
00:01:27,620 --> 00:01:32,270
So you could use HTML to add an image or button or text box,

32500
00:01:32,540 --> 00:01:35,600
whatever it is that you need in your website. Now,

32501
00:01:35,630 --> 00:01:38,150
the second type of file are CSS files,

32502
00:01:38,360 --> 00:01:41,840
and these files are responsible for styling your website.

32503
00:01:42,530 --> 00:01:46,460
If you were building a house, then this would be the painters and decorators.

32504
00:01:46,670 --> 00:01:47,720
They would be going around

32505
00:01:47,720 --> 00:01:51,980
painting the walls or adding stylistic flourishes to your place,

32506
00:01:52,160 --> 00:01:55,850
and generally making the place look the way that you want it to.

32507
00:01:56,210 --> 00:02:00,950
And that's exactly what CSS code does as well. When you incorporate CSS,

32508
00:02:01,040 --> 00:02:04,820
it allows you to specify how you want your website to look.

32509
00:02:05,060 --> 00:02:09,380
So you could say that, yes, I have a button that I got from my HTML,

32510
00:02:09,620 --> 00:02:14,000
but that button I want it to be red and I want the text to be white

32511
00:02:14,090 --> 00:02:19,090
and I want the font of the text to be an Arial. That is all done using CSS code.

32512
00:02:19,910 --> 00:02:23,420
Now the final component is the JavaScript code.

32513
00:02:23,660 --> 00:02:28,430
And this is the code that allows your website to actually do things or have

32514
00:02:28,460 --> 00:02:30,890
behavior. And if you were building a house,

32515
00:02:30,920 --> 00:02:32,720
you would have the electrician come in,

32516
00:02:32,900 --> 00:02:36,860
who would be able to connect the wires so that your light bulbs actually switch

32517
00:02:36,860 --> 00:02:40,550
on or somebody who comes in and does the plumbing so that your toilet can

32518
00:02:40,550 --> 00:02:44,000
actually flush. And the JavaScript code does exactly that.

32519
00:02:44,390 --> 00:02:48,860
It allows your website to actually do things and have behavior.

32520
00:02:49,100 --> 00:02:51,920
So if we take the Google website as an example again,

32521
00:02:52,100 --> 00:02:54,980
once we receive these files from Google server,

32522
00:02:55,130 --> 00:02:58,850
when our browser loads up the HTML files, we'll get to see the structure

32523
00:02:59,500 --> 00:03:03,160
of the website, namely, there's one image which has their logo,

32524
00:03:03,400 --> 00:03:08,200
there's two buttons, and there's a text box where we can enter our search. Now,

32525
00:03:08,200 --> 00:03:10,240
when we receive the CSS files,

32526
00:03:10,630 --> 00:03:14,770
then that will modify the appearance of all of those components.

32527
00:03:15,010 --> 00:03:18,580
We don't have any more buttons or any more images,

32528
00:03:18,790 --> 00:03:23,410
but the now look the way that Google wanted it to. And finally,

32529
00:03:23,680 --> 00:03:25,900
when we incorporate the JavaScript files,

32530
00:03:26,140 --> 00:03:31,090
then our website actually starts having behavior. It has functionality

32531
00:03:31,330 --> 00:03:35,650
and it's actually able to do something rather than just display some images and

32532
00:03:35,650 --> 00:03:39,490
texts to us. Now, with the knowledge that we've already acquired,

32533
00:03:39,610 --> 00:03:43,150
we can already start messing around with websites on the internet.

32534
00:03:43,600 --> 00:03:46,510
So open up Chrome and head over to techcrunch.com.

32535
00:03:46,780 --> 00:03:48,340
And if you're not familiar with it,

32536
00:03:48,430 --> 00:03:52,390
it's basically a technology news website where I get my latest tech news.

32537
00:03:52,780 --> 00:03:53,920
Once you're over here,

32538
00:03:54,130 --> 00:03:59,130
I want you to right-click on the title here and click on inspect.

32539
00:04:01,660 --> 00:04:04,210
Now this brings up the Chrome developer tools,

32540
00:04:04,570 --> 00:04:07,930
and we're going to be exploring this in a lot more detail,

32541
00:04:08,290 --> 00:04:11,860
but for now we're going to use it to do something really simple.

32542
00:04:12,070 --> 00:04:15,970
You can see that when I right-click on that heading and click inspect,

32543
00:04:16,209 --> 00:04:21,209
it automatically opens up the entire code file that was used to render this

32544
00:04:21,760 --> 00:04:25,900
website. So these are all of the elements that make up this website.

32545
00:04:26,320 --> 00:04:28,420
And when you click on inspect,

32546
00:04:28,780 --> 00:04:33,700
it will highlight to you the part of the code that corresponds to the thing that

32547
00:04:33,700 --> 00:04:36,700
you right clicked, right? In this case, it's this title.

32548
00:04:37,390 --> 00:04:40,840
And inside this title, you can see that there is a link,

32549
00:04:41,230 --> 00:04:44,350
which means that when you click on it, it'll go to another web page,

32550
00:04:44,710 --> 00:04:49,510
but it also got a bit of text. So right inside Chrome developer tools,

32551
00:04:49,660 --> 00:04:53,620
if you double click on the bit of text that corresponds to the title,

32552
00:04:53,950 --> 00:04:55,180
you can actually edit it.

32553
00:04:56,110 --> 00:04:59,800
So let's go ahead and change the front page of TechCrunch.

32554
00:04:59,890 --> 00:05:01,030
Let's say something like,

32555
00:05:02,040 --> 00:05:02,873
uhm..

32556
00:05:04,500 --> 00:05:07,410
So this is a great way of pranking your friends,

32557
00:05:07,560 --> 00:05:12,540
especially when they can see that you're on tech crunch.com and the title or any

32558
00:05:12,540 --> 00:05:15,810
of the texts on the website is what you want it to say.

32559
00:05:15,990 --> 00:05:19,470
And this is a great joke to play on friends who are maybe not quite as

32560
00:05:19,470 --> 00:05:21,120
technologically advanced as you,

32561
00:05:21,300 --> 00:05:24,810
because they haven't taken the course that you have. Now unfortunately,

32562
00:05:24,840 --> 00:05:29,580
when I hit refresh on this website, all of my good work is gone.

32563
00:05:29,910 --> 00:05:34,910
And the reason is because when I'm editing it here inside my browser,

32564
00:05:35,730 --> 00:05:40,730
I'm actually changing the local copy of this file that I got back from the

32565
00:05:41,430 --> 00:05:44,340
server. But when I click refresh,

32566
00:05:44,430 --> 00:05:49,320
then that makes a new request to the servers to load up a fresh copy of the

32567
00:05:49,320 --> 00:05:53,400
website. So of course, then it updates to the original content.

32568
00:05:53,640 --> 00:05:57,530
But in the coming lessons, we're going to be working with HTML, CSS,

32569
00:05:57,740 --> 00:06:02,150
and JavaScript so that you can create and host live on the internet,

32570
00:06:02,360 --> 00:06:06,770
your very own websites and through learning how to code and how to build

32571
00:06:06,770 --> 00:06:07,580
websites

32572
00:06:07,580 --> 00:06:11,270
you are going to be able to make websites that say anything that you want it to,

32573
00:06:11,540 --> 00:06:15,520
look the way that you want it to, and have the functionality that you need.

32574
00:06:15,940 --> 00:06:19,210
So for all of that and more, I'll see you in the next lesson.


32575
00:00:00,560 --> 00:00:09,110
Now let's get started by learning a little bit more about what exactly is it and how do we use it to

32576
00:00:09,110 --> 00:00:10,340
create websites.

32577
00:00:10,370 --> 00:00:18,050
Now, no matter what browser you like to use, Chrome or Safari or Brave, even all of these applications

32578
00:00:18,050 --> 00:00:19,230
do the same thing.

32579
00:00:19,250 --> 00:00:27,110
They take different files such as HTML, CSS and JavaScript, and they render them into a website.

32580
00:00:27,260 --> 00:00:34,100
But even though most modern websites are created using these three different file types combined together,

32581
00:00:34,100 --> 00:00:39,540
you can't create a website with just a CSS file or just a JavaScript file.

32582
00:00:39,560 --> 00:00:43,490
However, you can have just an HTML file.

32583
00:00:43,490 --> 00:00:48,800
And in fact, that's exactly what the first websites were created with HTML.

32584
00:00:48,830 --> 00:00:53,390
Now HTML defines the content and structure of the website.

32585
00:00:53,390 --> 00:01:00,960
So for example, in this case, all that my HTML file does is it it renders a heading that says my website.

32586
00:01:00,990 --> 00:01:08,640
And when this file is opened by the browser, it will display that heading saying my website.

32587
00:01:08,730 --> 00:01:11,490
Now what exactly is HTML?

32588
00:01:11,520 --> 00:01:12,690
Let's break it down.

32589
00:01:12,690 --> 00:01:16,950
So HTML stands for hypertext markup language.

32590
00:01:16,980 --> 00:01:20,940
If we look at the first part, hypertext, what does that mean?

32591
00:01:21,420 --> 00:01:28,600
Well, it refers to the pieces of text which can link to other documents in the website.

32592
00:01:28,620 --> 00:01:37,830
So these pieces of text are hypertext or hyperlinks, and they are the foundation of how an HTML website

32593
00:01:37,830 --> 00:01:38,580
works.

32594
00:01:38,610 --> 00:01:46,560
Now, if we take a look at the World First website created by Sir Tim Berners-Lee, who also happens

32595
00:01:46,560 --> 00:01:52,040
to be the inventor of the Internet, then you can see it's filled with these hyperlinks marked in blue

32596
00:01:52,050 --> 00:01:54,600
and exactly as you would expect.

32597
00:01:54,600 --> 00:02:01,710
If you click on any of these hyperlinks, it takes you to another document, another HTML file.

32598
00:02:01,740 --> 00:02:06,600
So if we go back, you can see that we were on projecting HTML.

32599
00:02:06,600 --> 00:02:14,880
And if I click on one of the hyperlinks like how can I help, it will take me to another HTML file and

32600
00:02:14,880 --> 00:02:16,650
this is how hypertext works.

32601
00:02:16,650 --> 00:02:22,260
And there's even a link on this website explaining exactly what hypertext is.

32602
00:02:22,290 --> 00:02:28,080
So now that we know what hypertext is, what about the other part, the markup language?

32603
00:02:28,080 --> 00:02:29,910
What is a markup language?

32604
00:02:30,300 --> 00:02:36,870
Now, if you look at the English language, we often see little bits that function very similar to markup,

32605
00:02:36,960 --> 00:02:38,970
like these double quotes.

32606
00:02:39,000 --> 00:02:45,690
The presence of these quotation marks is what tells a reader that this part is a quotation.

32607
00:02:45,690 --> 00:02:54,480
And as you'll find, this is going to be really similar to what you see in the editor's review of manuscript.

32608
00:02:54,480 --> 00:03:01,830
So used to mark them up and show different things, such as, for example, which parts need to be bold

32609
00:03:01,850 --> 00:03:09,830
by adding a squiggly line underneath it and which parts need to be underlined by adding a straight line

32610
00:03:09,830 --> 00:03:10,490
through it.

32611
00:03:11,060 --> 00:03:15,230
So how do you do markup with HTML?

32612
00:03:15,260 --> 00:03:19,670
Well, it's done through what's called HTML tags.

32613
00:03:19,700 --> 00:03:25,040
Now, in the early days of the Internet, there were only very few HTML tags.

32614
00:03:25,160 --> 00:03:31,310
These days there are loads more, but realistically, you're only going to be using some of the most

32615
00:03:31,310 --> 00:03:38,700
important ones such as headings H1 through to H6 or the paragraph tag the P tag.

32616
00:03:38,720 --> 00:03:44,570
So here you can see all of the HTML tags, but when we narrow it down to the ones that you actually

32617
00:03:44,570 --> 00:03:47,810
need to know, then it makes it a lot more approachable.

32618
00:03:47,930 --> 00:03:52,610
And in the rest of the course we're going to be covering some of the most essential tags.

32619
00:03:52,610 --> 00:03:55,400
And so don't worry about learning them.

32620
00:03:55,400 --> 00:03:58,950
So don't worry about memorizing all of them or learning them.

32621
00:03:58,970 --> 00:04:03,690
We're going to cover them as we need them in our projects and in our exercises.

32622
00:04:03,870 --> 00:04:11,610
So in the next lesson, we're going to get started by learning about the heading tag, one of the most

32623
00:04:11,640 --> 00:04:14,940
OG HTML tags that ever existed.

32624
00:04:14,940 --> 00:04:18,360
So for all of that and more, I'll see you on the next lesson.


32625
00:00:00,200 --> 00:00:07,130
Now, in the previous lesson, we took a look at what is and in this lesson I want to get us started

32626
00:00:07,130 --> 00:00:13,640
using HTML as quickly as possible so we can learn how to write our own code and start creating websites

32627
00:00:13,640 --> 00:00:14,240
with it.

32628
00:00:14,270 --> 00:00:19,400
Now, in this lesson, we're going to be learning about one of the most important elements, the heading

32629
00:00:19,400 --> 00:00:20,060
element.

32630
00:00:20,060 --> 00:00:23,320
And this is what a heading element looks like.

32631
00:00:23,330 --> 00:00:31,460
It starts off with what's called an opening tag here, and it ends with what's called a closing tag.

32632
00:00:31,460 --> 00:00:37,610
Now, if you look closely, the opening and the closing tag actually have one thing that's different,

32633
00:00:37,610 --> 00:00:40,520
and it's this forward slash right here.

32634
00:00:40,700 --> 00:00:44,240
And that is what makes this a closing tag.

32635
00:00:44,450 --> 00:00:52,100
And what goes in between these two tags is the content of that particular HTML element.

32636
00:00:52,100 --> 00:00:58,820
So in this case, what we're saying we want to do is we want to create a H1 heading and what the heading

32637
00:00:58,820 --> 00:01:03,200
is going to contain is these words Hello world.

32638
00:01:03,620 --> 00:01:10,670
Now, very often when you hear me talking about HTML, you'll hear me refer to tags and elements and

32639
00:01:10,670 --> 00:01:13,490
you'll see this on the Internet and everywhere else as well.

32640
00:01:13,730 --> 00:01:16,550
So what exactly is the difference?

32641
00:01:16,850 --> 00:01:20,360
Well, the tag refers to these bits.

32642
00:01:20,360 --> 00:01:21,530
These are tags.

32643
00:01:21,530 --> 00:01:27,530
Anything that's inside an angle bracket we call these angle brackets is a tag.

32644
00:01:27,530 --> 00:01:28,910
And they have different names.

32645
00:01:28,910 --> 00:01:32,180
So as I mentioned, this one is the opening tag.

32646
00:01:33,210 --> 00:01:37,950
And this one at the end is, of course, called the closing tag.

32647
00:01:38,520 --> 00:01:40,920
Now, these are the tags.

32648
00:01:40,920 --> 00:01:42,630
So what's an element?

32649
00:01:42,660 --> 00:01:52,260
Well, the entire thing here, this is an element that includes the content as well as any opening or

32650
00:01:52,260 --> 00:01:53,420
closing tags.

32651
00:01:53,430 --> 00:01:56,160
This is the HTML element.

32652
00:01:56,160 --> 00:01:59,550
And these parts are the tags.

32653
00:02:00,120 --> 00:02:05,520
So hopefully that'll make things a little bit clearer the next time you hear about tags and elements.

32654
00:02:06,210 --> 00:02:09,750
What is the purpose of these heading elements?

32655
00:02:09,750 --> 00:02:12,930
Well, the idea comes from book binding.

32656
00:02:12,930 --> 00:02:18,810
If you create a book and you create a table of contents like this one, you'll see that there's a sort

32657
00:02:18,810 --> 00:02:20,250
of hierarchy, right?

32658
00:02:20,280 --> 00:02:23,670
You've got the top level headings here.

32659
00:02:23,760 --> 00:02:31,530
This would probably be a level one heading and these would be a level two heading because they refer

32660
00:02:31,530 --> 00:02:37,180
to something that's more or less related to this approval section.

32661
00:02:37,300 --> 00:02:45,490
And you can see inside section eight here, there's even another subsection 8.1, which goes into more

32662
00:02:45,490 --> 00:02:48,280
detail about some aspect of eight.

32663
00:02:48,310 --> 00:02:52,300
This in our case might be an H three heading.

32664
00:02:52,330 --> 00:02:58,270
These levels are what we get to define using our HTML headings.

32665
00:02:59,350 --> 00:03:07,540
This is what the code would look like for all six level of headings and remember that there is no heading

32666
00:03:07,540 --> 00:03:08,290
seven.

32667
00:03:08,320 --> 00:03:15,430
There is no such thing as an H seven that does not exist once you've gone to heading six.

32668
00:03:15,430 --> 00:03:23,410
That's pretty much the end as defined by the people and anything that's lower in importance, you would

32669
00:03:23,410 --> 00:03:27,940
start using a different type of tag, which will go into a little bit later on.

32670
00:03:27,940 --> 00:03:33,610
But for everything from one through to six, the structure is pretty much the same.

32671
00:03:33,610 --> 00:03:39,490
You've got an open tag, which is H one or H six, and you've got a closing tag that has the corresponding

32672
00:03:39,490 --> 00:03:40,140
number.

32673
00:03:40,150 --> 00:03:47,140
Now if you create a tag like this with an H one and then you end with a different one like an H six,

32674
00:03:47,170 --> 00:03:49,210
then that's not going to work either.

32675
00:03:49,210 --> 00:03:51,850
Just remember that when you're writing your own code.

32676
00:03:51,880 --> 00:03:54,070
Now, what does this look like?

32677
00:03:54,070 --> 00:03:57,400
If we were to run this code, this is what we would get.

32678
00:03:57,430 --> 00:04:04,870
We would get different heading levels and by default, they would be styled to have different sizes.

32679
00:04:04,870 --> 00:04:09,310
So heading one being the biggest and heading six being the smallest.

32680
00:04:09,490 --> 00:04:15,340
We can of course further style this later on, but as soon as we type these headings, it just gives

32681
00:04:15,340 --> 00:04:21,820
us an indication of our levels to make sure that we've written all our code as intended.

32682
00:04:21,820 --> 00:04:26,950
And this essentially follows that structure we saw earlier on with the table of contents.

32683
00:04:26,950 --> 00:04:32,320
The level one headings are the biggest and the level six headings are the smallest.

32684
00:04:32,990 --> 00:04:39,200
So now that we've seen a little bit about how all of this works, let's try an exercise where we create

32685
00:04:39,200 --> 00:04:40,990
our own heading elements.

32686
00:04:41,000 --> 00:04:48,440
To download the starting files, you have to go over to the course resources for this lesson and click

32687
00:04:48,440 --> 00:04:53,060
on the 2.1 heading element file in order to download it.

32688
00:04:53,060 --> 00:04:58,310
Now, if you don't know where that is, then you might have missed where at the very beginning of the

32689
00:04:58,310 --> 00:05:05,030
course there's a lesson called how to download the course resources and in there I show you exactly

32690
00:05:05,030 --> 00:05:08,930
how to download each of the course resources for every single lesson.

32691
00:05:08,930 --> 00:05:14,060
So if you miss that, be sure to head over there to take a look and see how you can do this.

32692
00:05:14,810 --> 00:05:21,910
Now, once you've downloaded this file, it's really important that you extract it or what we call unzipping.

32693
00:05:21,920 --> 00:05:28,250
Now, the first thing I want you to do is to create a folder for all of your web development projects,

32694
00:05:28,250 --> 00:05:35,130
and you can create that folder anywhere you like on your desktop in your C drive, in your username

32695
00:05:35,130 --> 00:05:40,560
section, wherever you want, but just call it web development projects like this.

32696
00:05:41,130 --> 00:05:47,520
Now, once you've created that folder, then I want you to go ahead and open up the zip file that you

32697
00:05:47,520 --> 00:05:50,400
just downloaded by double clicking on it.

32698
00:05:50,490 --> 00:05:57,450
And once you've opened up that zip file, I want you to drag it into your Web development projects folder

32699
00:05:57,600 --> 00:05:58,890
like this.

32700
00:05:59,760 --> 00:06:03,150
And then you'll be able to access them right here.

32701
00:06:03,450 --> 00:06:07,170
Now, the next step is we're going to open it up in VS code.

32702
00:06:08,510 --> 00:06:13,310
Inside vs code, go to file and we're going to create a new window.

32703
00:06:13,340 --> 00:06:16,160
Now open up the explorer here.

32704
00:06:16,160 --> 00:06:22,000
And then when we're here, we're going to open up our web development projects folder that we just created,

32705
00:06:22,010 --> 00:06:26,480
and you should be able to see that folder heading element.

32706
00:06:26,750 --> 00:06:32,510
Now, if for some reason this is not working for you, especially if you're on Windows, this might

32707
00:06:32,510 --> 00:06:36,100
be because you haven't actually extracted this folder properly.

32708
00:06:36,110 --> 00:06:41,120
So again, make sure that you double click on the zip file or on Windows.

32709
00:06:41,120 --> 00:06:44,510
You can also right click on it and click extract.

32710
00:06:44,510 --> 00:06:50,900
And then once you've done that, drag, that folder that's been extracted into your web development

32711
00:06:50,900 --> 00:06:56,000
projects folder and open up that folder inside your VS code.

32712
00:06:56,390 --> 00:07:02,390
When you're here, you can see that there are three files in this folder called 2.1 heading Element

32713
00:07:02,420 --> 00:07:04,880
one is the index.html.

32714
00:07:04,910 --> 00:07:10,290
This is where you're going to be writing your code and I've got some starting code for you which we're

32715
00:07:10,290 --> 00:07:13,770
going to need to modify in order to complete this challenge.

32716
00:07:13,800 --> 00:07:20,220
Now you've also got the solution, which I don't recommend looking at until you've completed the challenge,

32717
00:07:20,220 --> 00:07:23,790
just to check your code or see if there's any differences.

32718
00:07:23,790 --> 00:07:29,430
Now notice how I've added a little bit here so that you don't accidentally see it unless you wanted

32719
00:07:29,430 --> 00:07:29,970
to.

32720
00:07:29,970 --> 00:07:34,110
But if you want to see the solution, just scroll down and you'll see it down there.

32721
00:07:34,320 --> 00:07:43,560
The goal of this exercise is to make the code here, create a website that looks like this.

32722
00:07:43,740 --> 00:07:48,780
Remember previously when we did our setup and download for VS Code, I showed you how to install the

32723
00:07:48,780 --> 00:07:50,580
extension live preview.

32724
00:07:50,580 --> 00:07:55,770
If you don't see live preview when you click on extensions, that might mean that you've missed out

32725
00:07:55,770 --> 00:07:57,360
on some parts of that video.

32726
00:07:57,360 --> 00:08:03,690
So please go back to the setup and download videos for VS Code because there's some other things that

32727
00:08:03,690 --> 00:08:05,100
I need you to set up as well.

32728
00:08:05,130 --> 00:08:10,020
Make sure you don't skip any of these lessons unless you know exactly what you're doing and you're really

32729
00:08:10,020 --> 00:08:11,400
familiar with everything.

32730
00:08:11,580 --> 00:08:18,690
What that live preview allows us to do is to go into our code file index.html, right click on it and

32731
00:08:18,690 --> 00:08:20,160
click show preview.

32732
00:08:20,160 --> 00:08:26,190
So it should now open up another pane and you can see it shows us our book chapters, Section one,

32733
00:08:26,190 --> 00:08:31,800
Chapter one, chapter two, chapter three sections and Diagrams and Subsections.

32734
00:08:31,920 --> 00:08:38,010
Unfortunately, everything seems to be just on one long line, and if you drag it out, you can see

32735
00:08:38,010 --> 00:08:39,330
it's just one long line.

32736
00:08:39,330 --> 00:08:44,400
There's no formatting at all and there's no indication about hierarchy.

32737
00:08:44,400 --> 00:08:46,860
So that's where the challenge comes in.

32738
00:08:46,890 --> 00:08:54,660
You're going to use what you learned about heading elements in order to format this code here in the

32739
00:08:54,660 --> 00:08:59,820
index.html so that we end up with something that looks like this.

32740
00:08:59,820 --> 00:09:05,700
So we want the preview to show us heading one elements heading two elements heading three elements.

32741
00:09:05,700 --> 00:09:09,330
And this one this diagram one is actually a heading four element.

32742
00:09:09,330 --> 00:09:14,370
So you should have H one through to H four in your code here.

32743
00:09:14,370 --> 00:09:21,030
So now is the time to pause me in the video and try to complete this challenge.

32744
00:09:21,030 --> 00:09:26,970
And after you're done then you can resume the video and we'll walk through the solution together, pause

32745
00:09:26,970 --> 00:09:28,890
the video now and give it a go.

32746
00:09:32,320 --> 00:09:32,770
All right.

32747
00:09:32,770 --> 00:09:40,480
So we're going to have a single h one element up here, which is going to be for this word book.

32748
00:09:40,510 --> 00:09:48,250
So we're going to put an H one element right here, and we're going to drag our book, which is the

32749
00:09:48,250 --> 00:09:48,820
content.

32750
00:09:48,820 --> 00:09:54,700
Remember, in between these two tags, that's how our heading tags are formatted.

32751
00:09:54,790 --> 00:10:00,910
Now, the next one are these Chapter one, chapter two, chapter three sections, and they're all going

32752
00:10:00,910 --> 00:10:05,500
to be the next level of hierarchy, which is an H two.

32753
00:10:05,530 --> 00:10:08,290
So let's do that for all three of them.

32754
00:10:16,830 --> 00:10:23,070
And then we can move on to our H three, which is going to be the sections within the chapters.

32755
00:10:23,220 --> 00:10:27,690
And now I'm just going to fast forward through the rest of the code so that you don't get bored.

32756
00:10:29,000 --> 00:10:35,930
And then finally, this diagram, which belongs inside section one in chapter two, is going to be the

32757
00:10:35,930 --> 00:10:40,860
final and the lowest level of hierarchy, which is an H four.

32758
00:10:40,880 --> 00:10:47,120
And once we've completed all of this code, you can check yourself against the solution code and you

32759
00:10:47,120 --> 00:10:49,400
should see it's pretty much the same.

32760
00:10:51,020 --> 00:11:00,320
Now, one of the things that you'll find is when you hit save using command S or using file save, you'll

32761
00:11:00,320 --> 00:11:05,810
see that IT auto formats our code so that we lose any of the indentation.

32762
00:11:05,840 --> 00:11:09,470
Don't worry if this happens to you, it's perfectly normal.

32763
00:11:09,590 --> 00:11:13,670
And if we check ourselves against the solution, you can see they match.

32764
00:11:13,700 --> 00:11:14,600
Exactly.

32765
00:11:14,600 --> 00:11:20,840
And we end up with the same result as the goal image, which is what we were aiming for.

32766
00:11:21,470 --> 00:11:22,960
How did you manage that?

32767
00:11:22,970 --> 00:11:23,750
Don't worry.

32768
00:11:23,750 --> 00:11:30,170
If you got things wrong, this is where it's safe to go wrong and try things because we're just learning

32769
00:11:30,170 --> 00:11:32,600
there's no tests and there's nobody watching you.

32770
00:11:32,630 --> 00:11:35,420
All that matters is you're actually learning stuff.

32771
00:11:35,420 --> 00:11:36,890
That's what's important.

32772
00:11:36,920 --> 00:11:38,590
Have a play around with the code.

32773
00:11:38,600 --> 00:11:42,260
Don't worry, if you do anything wrong, there's always a solution.

32774
00:11:42,260 --> 00:11:44,240
And me here to help you.

32775
00:11:44,900 --> 00:11:49,880
There's a couple of things to note in terms of do's and don'ts when it comes to heading elements that

32776
00:11:49,880 --> 00:11:51,390
I want to talk to you about.

32777
00:11:51,420 --> 00:11:56,990
One important rule is notice how in our exercise there was only one H1.

32778
00:11:57,000 --> 00:12:05,280
It's not good practice to have more than one H1 because the H1 is the very top level heading.

32779
00:12:05,310 --> 00:12:11,340
Imagine the H1 as the book title and the table of contents as including the other parts.

32780
00:12:11,340 --> 00:12:14,520
So maybe the H2 would be the first chapter.

32781
00:12:15,150 --> 00:12:17,580
Don't have more than one H1.

32782
00:12:17,580 --> 00:12:26,400
Instead, if you need another subtitle or another level of heading, then go to the H2 or H3 or all

32783
00:12:26,400 --> 00:12:29,430
of the other ones up until H6.

32784
00:12:30,180 --> 00:12:34,710
Now the other thing to watch out for is don't skip a level.

32785
00:12:34,710 --> 00:12:40,440
When you're creating heading elements, don't go straight from H1 to H3.

32786
00:12:40,470 --> 00:12:46,170
If you have an H3, there should also be an H2 somewhere on that web page.

32787
00:12:46,230 --> 00:12:52,650
Instead, I recommend to just go in order when you have an H1 that you've created and then you realize

32788
00:12:52,650 --> 00:12:55,650
you need another heading, then go to an H2.

32789
00:12:55,650 --> 00:13:01,620
And then if you need another level of heading that's even lower in priority, go to an H3.

32790
00:13:01,650 --> 00:13:04,680
Don't jump between the different level headings.

32791
00:13:04,890 --> 00:13:07,710
These are not things that will break your code.

32792
00:13:07,710 --> 00:13:11,190
Your website will still look fine even if you break all of these rules.

32793
00:13:11,190 --> 00:13:13,140
But they're just rules for convention.

32794
00:13:13,140 --> 00:13:17,880
And because we're going to be professionals, we're going to start off on the right foot and learn all

32795
00:13:17,880 --> 00:13:19,740
the rules that we need to know.

32796
00:13:20,270 --> 00:13:27,350
Now, if you wanted to read up even more on the heading elements, then I recommend going to the professional

32797
00:13:27,380 --> 00:13:34,610
tool, which is our Mozilla developer network web docs, and they have documentation for all of the

32798
00:13:34,760 --> 00:13:36,950
HTML elements that exist.

32799
00:13:36,950 --> 00:13:43,070
And when you read up on each of these pages, they tell you more details about things that you need

32800
00:13:43,070 --> 00:13:47,630
to know, and they show you some interactive examples of how it all works.

32801
00:13:47,870 --> 00:13:53,750
Now, I don't recommend reading through all of these for all of the HTML elements, but I do recommend

32802
00:13:53,750 --> 00:13:59,420
that if you're going to use a new element that you haven't seen before and you don't know how it works,

32803
00:13:59,420 --> 00:14:04,700
you haven't had a lecture on it, then I recommend just taking a quick look at the docs and seeing some

32804
00:14:04,700 --> 00:14:09,920
examples about how they're used in a similar way that I've shown you in the lectures.

32805
00:14:10,640 --> 00:14:15,800
Now that we've learned about one of the most important HTML elements, the heading elements, in the

32806
00:14:15,800 --> 00:14:21,960
next lesson, we're going to move on to another super important element which is the paragraph element.

32807
00:14:21,960 --> 00:14:24,450
So for all of that and more, I'll see you there.


32808
00:00:00,170 --> 00:00:05,330
So now that you've seen what you can do with the HTML heading element, the next one we're going to

32809
00:00:05,330 --> 00:00:07,880
learn about is the paragraph element.

32810
00:00:07,880 --> 00:00:13,490
And this is also related to formatting and putting text on our websites.

32811
00:00:14,000 --> 00:00:22,070
This is what a paragraph element looks like and similar to the heading element, you've got the opening

32812
00:00:22,100 --> 00:00:31,670
tag and the closing tag, and in between you've got the content that is going to be your paragraph.

32813
00:00:32,000 --> 00:00:39,710
Now the reason why we need a paragraph tag is because if you just had plain text in your HTML document,

32814
00:00:39,740 --> 00:00:46,720
when you run the code and you see it on a website, what you'll see is something like this.

32815
00:00:46,730 --> 00:00:53,870
The text, they run into each other onto the same line and you can't actually tell where one paragraph

32816
00:00:53,870 --> 00:00:56,060
begins and where the other ends.

32817
00:00:56,510 --> 00:01:03,630
On the other hand, if we had created two paragraph elements for these two lines, then when we run

32818
00:01:03,630 --> 00:01:10,890
the code you will see them being separated with a line in between to be able to distinguish the different

32819
00:01:10,890 --> 00:01:12,060
paragraphs.

32820
00:01:12,630 --> 00:01:18,930
And this is also really important for people who are using screen readers, so people who might be blind,

32821
00:01:18,960 --> 00:01:26,010
because what the screen reader will do is they'll see the beginning of each paragraph element and it

32822
00:01:26,010 --> 00:01:33,480
allows the blind user to be able to skip to the next paragraph easily and be able to see what's going

32823
00:01:33,480 --> 00:01:34,770
on each time.

32824
00:01:35,340 --> 00:01:41,460
Now let's put those skills into practice by trying an exercise using the paragraph element.

32825
00:01:41,730 --> 00:01:47,130
If you head over to the course resources for this lesson, you should be able to download the zip file

32826
00:01:47,130 --> 00:01:50,100
for the 2.2 paragraph element.

32827
00:01:50,100 --> 00:01:56,040
And once you've extracted and unzipped it, then go ahead and put it into your web development projects

32828
00:01:56,040 --> 00:01:59,520
folder and then open it up inside vs code.

32829
00:01:59,550 --> 00:02:06,150
I showed you how to do all of this in the previous lesson in HTML heading element as well as the initial

32830
00:02:06,150 --> 00:02:11,910
lesson when I showed you how to download course resources, so be sure to check those places if you

32831
00:02:11,910 --> 00:02:14,850
don't know how to get hold of this folder.

32832
00:02:15,060 --> 00:02:20,970
But once you have it opened up like this, then I want you to go ahead and open up the index.html file,

32833
00:02:20,970 --> 00:02:24,690
which as always, is where we're going to write our code.

32834
00:02:24,930 --> 00:02:32,070
Notice here we've got three paragraphs, the first paragraph, the second paragraph and the third paragraph.

32835
00:02:32,070 --> 00:02:36,240
And then there's some placeholder text in Latin, which doesn't mean anything.

32836
00:02:36,240 --> 00:02:42,180
It just is there so that you can see what a paragraph of text would look like.

32837
00:02:42,180 --> 00:02:49,860
And when you go ahead and right click and show preview, you should see that all of the paragraphs are

32838
00:02:49,860 --> 00:02:58,050
jumbled together into one long line and we can't tell where one paragraph begins and the other one ends.

32839
00:02:58,050 --> 00:03:05,490
So now it is your mission to solve this problem using what you've learned about the paragraph element.

32840
00:03:05,490 --> 00:03:12,960
So go ahead and format these three paragraphs using the paragraph tag and once you're done, you should

32841
00:03:12,960 --> 00:03:14,250
see the preview.

32842
00:03:14,280 --> 00:03:22,560
Show something like this where each paragraph is separated into new lines and clearly visually, we're

32843
00:03:22,560 --> 00:03:28,650
able to see the difference and we're able to distinguish these three different paragraphs.

32844
00:03:28,980 --> 00:03:32,880
Pause the video now, and once you're done, we'll go through the solution together.

32845
00:03:36,890 --> 00:03:37,280
All right.

32846
00:03:37,280 --> 00:03:39,800
We're going to use our paragraph tag.

32847
00:03:39,800 --> 00:03:46,970
So we're going to put the open tag here just in front of our first paragraph, and then we're going

32848
00:03:46,970 --> 00:03:53,510
to put the closing tag at the very end of our first paragraph, and then we're going to repeat that

32849
00:03:53,510 --> 00:03:56,810
basically for all of the other paragraphs.

32850
00:03:59,490 --> 00:04:03,390
Now you can see here I'm just clicking and dragging.

32851
00:04:03,510 --> 00:04:11,370
Alternatively, you can cut it and then paste it at the very end of the paragraph.

32852
00:04:11,400 --> 00:04:16,950
It really doesn't matter how you do it, as long as you get those tags in the right places.

32853
00:04:16,950 --> 00:04:24,250
And now hopefully your preview should have updated and you can see these paragraphs forming as we type.

32854
00:04:24,270 --> 00:04:27,660
So this looks pretty much the same as our goal.

32855
00:04:27,660 --> 00:04:35,760
And if you check the solution HTML, you should see the tags in the correct places as well.

32856
00:04:35,880 --> 00:04:42,780
So hopefully that wasn't too hard and you were able to do it all by yourself and you've seen now what

32857
00:04:42,780 --> 00:04:51,870
is the benefit of using a paragraph element to separate text into different paragraphs of content?

32858
00:04:52,140 --> 00:04:59,260
Now, what you saw in the exercise are bits of placeholder text, and it's what we would refer to as

32859
00:04:59,260 --> 00:05:00,310
Lorem ipsum.

32860
00:05:00,340 --> 00:05:04,240
It's something that you'll come across quite a lot, especially in web design.

32861
00:05:04,240 --> 00:05:11,110
It's so that we don't end up with something like this where we're trying to simulate content in a paragraph,

32862
00:05:11,110 --> 00:05:15,310
but then we're just writing content, content, content, or this is a paragraph, this is a paragraph,

32863
00:05:15,310 --> 00:05:16,180
this is a paragraph.

32864
00:05:16,180 --> 00:05:20,500
And the reason why we don't want to do this is because these are all the same words.

32865
00:05:20,530 --> 00:05:22,240
The sentence has the same length.

32866
00:05:22,240 --> 00:05:27,640
It doesn't look like what a natural block of text would look like, and we don't have the time or energy

32867
00:05:27,640 --> 00:05:31,660
to actually create the content just for testing and web design.

32868
00:05:31,660 --> 00:05:35,140
So that's why we use something called Lorem Ipsum.

32869
00:05:35,590 --> 00:05:44,320
And Lorem ipsum apparently comes from Latin classical literature by a famous author called Cicero.

32870
00:05:44,350 --> 00:05:51,160
If you've heard of him and it's over 2000 years old and this has been in use in the print industry for

32871
00:05:51,160 --> 00:05:57,700
many, many years, ever since the 1500s, even, where people started laying out newspapers and when

32872
00:05:57,700 --> 00:06:01,780
they didn't have the content for the layout, they would use this placeholder text.

32873
00:06:01,810 --> 00:06:09,640
If you want to get hold of them, you can go over to Simcom and there you'll find Lorem ipsum even in

32874
00:06:09,640 --> 00:06:17,050
different languages like Dutch or Polish, and you can use this tool to generate as many paragraphs

32875
00:06:17,050 --> 00:06:24,160
or words or bytes or lists as you need by simply using this generate button.

32876
00:06:24,160 --> 00:06:29,130
And here I've got five paragraphs ready to go to put into my new web design.

32877
00:06:29,140 --> 00:06:35,290
Now, instead of having something that looks like this where everything's all the same length, instead

32878
00:06:35,290 --> 00:06:42,310
we have very natural looking paragraphs that mimic pretty much what a regular English article would

32879
00:06:42,310 --> 00:06:43,150
look like.

32880
00:06:43,150 --> 00:06:47,230
And this is done in a matter of seconds using Lorem ipsum.

32881
00:06:47,560 --> 00:06:53,410
Now if Lorem ipsum is a little bit too boring for you, there's actually some novelty versions of this.

32882
00:06:53,440 --> 00:06:59,650
One of my favorite is bacon ipsum.com and it will generate similar to Lorem ipsum, but then you'll

32883
00:06:59,650 --> 00:07:05,710
get words like bacon and flank and pork loin and pork belly.

32884
00:07:05,740 --> 00:07:11,950
Now if you're not a meat eater, then maybe you should try something like bro ipsum.com where you can

32885
00:07:11,950 --> 00:07:18,550
have all of the bro terminology in a Lorem ipsum format.

32886
00:07:18,580 --> 00:07:35,110
And apparently the things that bros say are things like Taco pow and washboard and rail and heli paopao,

32887
00:07:35,200 --> 00:07:36,670
whatever it may be.

32888
00:07:36,670 --> 00:07:42,370
And if none of these take your fancy, then I recommend going on to Google and you can actually find

32889
00:07:42,370 --> 00:07:46,270
more of these kind of things by just searching for funny Lorem ipsum.

32890
00:07:46,270 --> 00:07:52,780
And there's a whole bunch of different ones like vegan ipsum or pirate ipsum and you'll come across

32891
00:07:52,780 --> 00:07:56,170
all sorts of different placeholder text generators.

32892
00:07:56,170 --> 00:08:02,290
But the important thing is you know how to get hold of them and you can use it in your code.

32893
00:08:02,290 --> 00:08:10,300
So as an add on challenge, if you want to, you can generate your own version of Lorem ipsum or Bacon

32894
00:08:10,300 --> 00:08:18,880
ipsum or bro ipsum and you can create an article using the paragraph tag and the Lorem ipsum that you've

32895
00:08:18,880 --> 00:08:20,200
generated.

32896
00:08:20,500 --> 00:08:26,500
Feel free to modify the index.html in the coding exercise that we just completed.

32897
00:08:26,980 --> 00:08:32,260
So have a play around with that and be sure to comment in the Q&A sections below.

32898
00:08:32,260 --> 00:08:39,400
If you find some Lorem ipsum that you think is ridiculous or really funny or really cool and I'll see

32899
00:08:39,400 --> 00:08:40,929
you on the next lesson.


32900
00:00:00,680 --> 00:00:01,040
All right.

32901
00:00:01,040 --> 00:00:08,690
So in this lesson, we're going to learn all about the void elements such as the horizontal rule and

32902
00:00:08,690 --> 00:00:09,770
the break element.

32903
00:00:10,130 --> 00:00:12,420
What exactly are void elements?

32904
00:00:12,440 --> 00:00:19,700
Well, we've seen what non void elements are, such as the paragraph element or the heading elements,

32905
00:00:19,700 --> 00:00:25,070
and they're not void because they have content right here in between.

32906
00:00:25,490 --> 00:00:33,340
A void element is an element where you are forbidden from putting any content inside the tag.

32907
00:00:33,350 --> 00:00:37,160
And in fact the tag itself even looks very different.

32908
00:00:37,160 --> 00:00:43,490
So this is a horizontal rule element and you can see that it starts out with an angle, bracket ends

32909
00:00:43,490 --> 00:00:44,660
with an angle bracket.

32910
00:00:44,660 --> 00:00:51,320
But then right here, there is this forward slash just before the end of the tag.

32911
00:00:51,410 --> 00:00:58,520
You might think this looks a bit like the closing tag of a normal HTML element, but it's actually subtly

32912
00:00:58,520 --> 00:01:07,500
different because here in the closing tag, that forward slash is just after the opening angle bracket.

32913
00:01:07,500 --> 00:01:10,680
It's right here in front of the letter.

32914
00:01:10,710 --> 00:01:17,760
Whereas in the void elements, the forward slash is actually just before the end of the tag.

32915
00:01:17,850 --> 00:01:23,910
And normally by convention, you'll see a little space here as well between the tag name and also that

32916
00:01:23,910 --> 00:01:25,170
forward slash.

32917
00:01:25,710 --> 00:01:28,740
This is just something to be really careful about.

32918
00:01:28,740 --> 00:01:31,560
When you're creating these void elements.

32919
00:01:31,560 --> 00:01:38,400
Make sure that you've got the forward slash slashing in the right direction so this way and not a backslash

32920
00:01:38,400 --> 00:01:39,150
like this.

32921
00:01:39,150 --> 00:01:47,700
So when it points to the right, then it's a forward slash and when it points backwards, then it's

32922
00:01:47,700 --> 00:01:49,020
a backslash.

32923
00:01:49,770 --> 00:01:55,020
So what does this look like when we add it to a HTML document?

32924
00:01:55,050 --> 00:02:02,250
Well, here we've got our previous two paragraphs and right in between the two paragraphs I've added

32925
00:02:02,250 --> 00:02:10,860
a horizontal rule which will hopefully help us divide the content to show that this part is not related

32926
00:02:10,860 --> 00:02:11,670
to this part.

32927
00:02:11,670 --> 00:02:18,840
And we've got some sort of separation in between when we run this code or when we view it in a web browser,

32928
00:02:18,840 --> 00:02:20,130
this is what you would see.

32929
00:02:20,160 --> 00:02:25,560
You would see the first paragraph, the second paragraph, and then you would see this horizontal rule

32930
00:02:25,560 --> 00:02:31,920
or basically a horizontal line where the air element would be in that document.

32931
00:02:32,130 --> 00:02:35,970
Now the horizontal rule is not the only void element.

32932
00:02:36,000 --> 00:02:38,910
Another common one you'll see is the break element.

32933
00:02:38,910 --> 00:02:40,650
And it looks like this.

32934
00:02:40,680 --> 00:02:47,670
Now, similarly, again, we've got the name of the tag and then we've got that forward slash and then

32935
00:02:47,670 --> 00:02:50,190
we basically end the tag.

32936
00:02:50,190 --> 00:02:51,810
So there is no opening tag.

32937
00:02:51,810 --> 00:02:53,040
There is no closing tag.

32938
00:02:53,040 --> 00:02:56,580
There is only a single tag that looks like this.

32939
00:02:56,580 --> 00:03:01,650
And the name of the tag goes right before the forward slash.

32940
00:03:01,770 --> 00:03:04,800
Now, how does the break element work?

32941
00:03:05,280 --> 00:03:11,220
Well, it's really useful when you have things where you need to separate things onto separate lines

32942
00:03:11,220 --> 00:03:13,440
in order to have the correct meaning.

32943
00:03:13,470 --> 00:03:21,240
For example, if you have poems, they are in fact meant to be in the same paragraph, but they should

32944
00:03:21,240 --> 00:03:27,900
really each be on different lines in order to make the rhyming work or in order to make the structure

32945
00:03:27,900 --> 00:03:29,370
of the poem correct.

32946
00:03:29,400 --> 00:03:34,350
So this is a poem from one of my favorite poets, William Blake.

32947
00:03:34,350 --> 00:03:42,840
And in order for it to work, we can't have it all run in one line, even if it's in the same paragraph.

32948
00:03:42,930 --> 00:03:49,980
If we had this code right here, even though yes, it is all in the same paragraph, it is all related

32949
00:03:49,980 --> 00:03:52,920
to each other and this does make sense.

32950
00:03:52,920 --> 00:03:54,960
But you don't look at poetry like this.

32951
00:03:54,960 --> 00:03:56,250
It doesn't really work.

32952
00:03:56,250 --> 00:04:00,270
We don't know where we're supposed to breathe and how we're supposed to read out the poem.

32953
00:04:00,270 --> 00:04:04,350
So instead we can add our break elements that we just learned about.

32954
00:04:04,590 --> 00:04:11,820
Our void element doesn't have any content in it, but it just shows where the breaks in this paragraph

32955
00:04:11,820 --> 00:04:14,880
has to go in order for this poem to look right.

32956
00:04:14,880 --> 00:04:19,110
And when this HTML document is rendered, this is what you'll see.

32957
00:04:19,140 --> 00:04:21,410
A perfect layout for a poem.

32958
00:04:21,420 --> 00:04:25,230
The World in a grain of sand and heaven in a war flower.

32959
00:04:25,260 --> 00:04:29,970
Hold infinity in the palm of your hand and eternity in an hour.

32960
00:04:30,390 --> 00:04:39,060
And it's all beautifully formatted thanks to each of our break elements at the end of each line.

32961
00:04:39,540 --> 00:04:45,120
So now it's your turn to try an exercise using these void elements.

32962
00:04:45,120 --> 00:04:53,160
So go ahead and download the starting files for this exercise from the course resources for this lesson.

32963
00:04:53,700 --> 00:04:59,610
And when you've extracted it and open it up, this is what you should see in the index.

32964
00:05:00,960 --> 00:05:07,170
We've got the name of our poet William Blake, and this is apparently his real address that he lived

32965
00:05:07,170 --> 00:05:08,900
at at some point in life.

32966
00:05:08,910 --> 00:05:14,160
And then we've got two paragraphs from Wikipedia which briefly describes the poet.

32967
00:05:14,160 --> 00:05:20,790
And I want you to use everything you've learned so far in order to format this document so that it will

32968
00:05:20,790 --> 00:05:24,480
look like the goal that I've got right here for you.

32969
00:05:24,600 --> 00:05:31,200
As you can see, this top level, the name of our poet is going to be rendered as an H one, because

32970
00:05:31,200 --> 00:05:35,450
that is the most important thing about this particular web page.

32971
00:05:35,460 --> 00:05:40,800
And then we've got the address of the poet, which is rendered as a paragraph.

32972
00:05:40,800 --> 00:05:47,520
But notice that addresses, even though they are a single paragraph, they again need to be broken up

32973
00:05:47,520 --> 00:05:50,670
into separate lines using our break element.

32974
00:05:50,670 --> 00:05:58,380
And then finally, we've got a horizontal rule that separates the address and the name of the author

32975
00:05:58,380 --> 00:06:04,960
from the little bit of description of this author, which should sit in two separate paragraphs.

32976
00:06:04,990 --> 00:06:12,720
Now I want you to pause the video and edit the index.html so you end up with this goal PNG.

32977
00:06:13,000 --> 00:06:19,930
When you preview this website instead of this jumbled block of text that we have at the moment.

32978
00:06:20,650 --> 00:06:24,430
Pause the video now and give this challenge a go.

32979
00:06:26,080 --> 00:06:26,620
All right.

32980
00:06:26,620 --> 00:06:31,060
So hopefully you've given it a go and everything worked out.

32981
00:06:31,720 --> 00:06:33,850
I'm going to run through the solution.

32982
00:06:33,850 --> 00:06:41,200
So first we said we were going to have an H one for his name, and then we're going to have a paragraph

32983
00:06:41,200 --> 00:06:44,390
tag that encloses the address.

32984
00:06:44,410 --> 00:06:52,240
Now, in order to have that address on different lines, we're going to add our break element to the

32985
00:06:52,240 --> 00:06:53,860
end of each line.

32986
00:06:53,860 --> 00:06:57,730
And remember, our break element is a self-closing tag.

32987
00:06:57,730 --> 00:07:02,110
So we're going to create it like like so.

32988
00:07:02,350 --> 00:07:09,340
Now I'm going to go ahead and simply copy and paste it to the end of each line and you can see how nicely

32989
00:07:09,340 --> 00:07:11,710
our address is now formatted.

32990
00:07:11,710 --> 00:07:19,240
And finally, we wanted these two paragraphs at the end to be separated.

32991
00:07:19,240 --> 00:07:22,750
So I'm going to go ahead and simply do that.

32992
00:07:22,870 --> 00:07:26,890
And now we are pretty much golden.

32993
00:07:28,840 --> 00:07:31,960
We've achieved our goal output.

32994
00:07:31,990 --> 00:07:38,380
We've got our H1, our address separated, and the only thing we need to do is to add that horizontal

32995
00:07:38,380 --> 00:07:42,340
rule between the address and the two paragraphs.

32996
00:07:42,370 --> 00:07:46,690
Let's go ahead and add the other void element that we learned about.

32997
00:07:46,690 --> 00:07:52,960
And now we've completed the challenge and you can check yourself against the solution to make sure that

32998
00:07:52,960 --> 00:07:56,530
everything that you did looks exactly the same.

32999
00:07:56,680 --> 00:08:03,940
Now, a neat trick I like to use is to simply copy the solution and go to diff checker.com paste in

33000
00:08:03,940 --> 00:08:05,470
the solution code.

33001
00:08:06,620 --> 00:08:12,710
And then paste your code and then go ahead and click find difference.

33002
00:08:12,770 --> 00:08:18,320
And it should highlight all the places that are different in case you've misspelled something or you've

33003
00:08:18,320 --> 00:08:19,370
done something wrong.

33004
00:08:19,370 --> 00:08:26,360
So for example, in this case, in our version, there is a space after the word Blake and the closing

33005
00:08:26,390 --> 00:08:30,830
tag, which in terms of HTML will not make any difference.

33006
00:08:30,980 --> 00:08:41,030
But had I instead maybe written the H1 incorrectly and I didn't write the H for the closing tag, then

33007
00:08:41,030 --> 00:08:45,560
you can see our output looks completely different and we're looking through all of this text.

33008
00:08:45,560 --> 00:08:51,590
We don't know why it's happened, so we go ahead and copy it and then diff it to the solution.

33009
00:08:51,590 --> 00:09:00,770
And it should highlight the fact that that is incorrect and we should now be alerted to check the difference.

33010
00:09:01,070 --> 00:09:04,490
That's one tip that I have for you today.

33011
00:09:04,940 --> 00:09:13,800
And let me just go back to our index.html fix this bug and we should now be ready to go.

33012
00:09:14,690 --> 00:09:22,340
Now in terms of do's and don'ts with void elements, sometimes you see people doing is they add a break

33013
00:09:22,370 --> 00:09:28,010
tag to add a new line instead of creating a separate paragraph element.

33014
00:09:28,040 --> 00:09:34,040
Now, this is not what you want to do because this is not very good for accessibility, which means

33015
00:09:34,040 --> 00:09:40,630
it'll make it harder for blind users with screen readers to understand the content on your website.

33016
00:09:40,640 --> 00:09:47,570
So I recommend you always create new paragraph elements when you have new paragraphs and use the break

33017
00:09:47,570 --> 00:09:54,110
element only when there is some sort of reason why you would want to separate the different lines in

33018
00:09:54,110 --> 00:09:55,220
a single paragraph.

33019
00:09:55,220 --> 00:10:01,580
But it still is a single paragraph such as in the case of a poem or in the case of an address that we

33020
00:10:01,610 --> 00:10:03,140
covered in this lesson.

33021
00:10:03,830 --> 00:10:11,120
Now, the final thing to mention is that sometimes when you look at the horizontal rule element or the

33022
00:10:11,120 --> 00:10:14,340
break element, you might see it represented.

33023
00:10:14,340 --> 00:10:21,240
Without this final closing tag, you might see people simply write this and this is perfectly valid

33024
00:10:21,450 --> 00:10:21,950
HTML.

33025
00:10:21,960 --> 00:10:26,940
So you could in fact have a horizontal rule that looks like this.

33026
00:10:26,970 --> 00:10:34,620
You could have a break element that looks like this instead of the one with the forward slash at the

33027
00:10:34,620 --> 00:10:35,190
end.

33028
00:10:35,190 --> 00:10:38,370
And these are both valid options.

33029
00:10:38,370 --> 00:10:44,670
You could go for this or you could go for this as of HTML5, the latest version of HTML.

33030
00:10:44,700 --> 00:10:50,490
What it's starting to do is it's starting to ignore this forward slash at the end so it doesn't even

33031
00:10:50,490 --> 00:10:51,120
look at it.

33032
00:10:51,120 --> 00:10:57,330
It sees the first part and already knows that a break is a void element and a horizontal rule is a void

33033
00:10:57,330 --> 00:10:57,900
element.

33034
00:10:57,900 --> 00:11:00,300
So it doesn't actually need to keep reading.

33035
00:11:00,420 --> 00:11:06,150
But I recommend to write your code with this end forward slash.

33036
00:11:06,150 --> 00:11:11,820
And the reason is because when you read your code, you as the human, it will be much easier for you

33037
00:11:11,820 --> 00:11:19,590
to see that this is a void element and it doesn't need a closing tag so that you don't end up being

33038
00:11:19,590 --> 00:11:26,370
confused and you can identify the void elements and the non void elements easily and distinguish them

33039
00:11:26,370 --> 00:11:27,240
from each other.

33040
00:11:27,240 --> 00:11:34,260
So that's just a quick tip and something to alert you to when you see it written like this on the internet.

33041
00:11:34,260 --> 00:11:35,850
Both versions are valid.

33042
00:11:35,850 --> 00:11:39,720
You can pick and choose, but I recommend going with this version.


33043
00:00:00,200 --> 00:00:07,310
So now that we've gotten a introduction to HTML, I want you to put everything you've learned together

33044
00:00:07,310 --> 00:00:10,630
in order to create a new project.

33045
00:00:10,640 --> 00:00:15,530
So the project that we're going to be building today is called The Favorite Movie Project.

33046
00:00:15,530 --> 00:00:22,910
It's going to be a website to keep track of all of your favorite movies that you've watched When you

33047
00:00:22,910 --> 00:00:28,580
go to Roger Ebert.com, he is one of the greatest film critics of all time.

33048
00:00:28,580 --> 00:00:34,460
In fact, he's passed away now, but he's got movie reviews and ratings for all the movies that he's

33049
00:00:34,460 --> 00:00:35,120
watched.

33050
00:00:35,120 --> 00:00:37,850
And you can see that when you go to his website.

33051
00:00:38,150 --> 00:00:41,960
I think this is a really great way of keeping track of what you've watched.

33052
00:00:41,960 --> 00:00:47,450
Because when friends ask me for recommendations, I can never remember what it is that I've watched

33053
00:00:47,450 --> 00:00:50,970
in this year that I really like and what to recommend.

33054
00:00:50,990 --> 00:00:54,890
So what we're going to be building today is a very simple website.

33055
00:00:54,890 --> 00:01:02,580
It's going to be a website that tracks your favorite movies maybe of all time, maybe of the last year,

33056
00:01:02,580 --> 00:01:03,810
whatever you want to do.

33057
00:01:03,810 --> 00:01:08,940
And the requirement is you should have at least three movies that you put in here.

33058
00:01:09,150 --> 00:01:17,640
So what you're going to need is to create a H1 as the title of the website, and then you're going to

33059
00:01:17,640 --> 00:01:26,910
have an H2 as the subtitle, and then you're going to have a horizontal rule as your void element in

33060
00:01:26,940 --> 00:01:27,530
there.

33061
00:01:27,540 --> 00:01:33,360
And then you're going to have three movies that you're going to list and they're all going to be created

33062
00:01:33,360 --> 00:01:36,240
using the H3 element.

33063
00:01:36,240 --> 00:01:44,010
And then finally you should have a section which is going to be a paragraph element that's going to

33064
00:01:44,010 --> 00:01:47,190
describe why you liked those movies.

33065
00:01:47,190 --> 00:01:51,690
And this is basically a very simple format for this website.

33066
00:01:51,720 --> 00:01:58,710
Now feel free once you've done all of this to continue to mod this website, to change it up, to add

33067
00:01:58,710 --> 00:02:01,620
things, to add break elements, whatever it is you want to do.

33068
00:02:01,620 --> 00:02:06,930
But at the minimum, I want to see all of these elements represented on a page.

33069
00:02:06,930 --> 00:02:10,350
And of course, feel free to add your own movies.

33070
00:02:10,350 --> 00:02:17,070
And I would love to see in the Q and A a picture of your website to see what it is that are your top

33071
00:02:17,070 --> 00:02:17,640
movies.

33072
00:02:17,640 --> 00:02:19,440
And maybe I'll get some inspiration.

33073
00:02:19,440 --> 00:02:23,010
So the next time when I have movie night and I can't figure out what to watch.

33074
00:02:23,160 --> 00:02:26,550
So I'm curious to see your recommendations as well.

33075
00:02:26,730 --> 00:02:34,950
So go ahead and download the movie ranking project ZIP file from this lesson's course resources.

33076
00:02:34,950 --> 00:02:40,170
If you don't know how to do that again, go back to one of the first videos in the course at the very

33077
00:02:40,170 --> 00:02:46,170
beginning of Section one where I showed you in a video how to download course resources.

33078
00:02:46,290 --> 00:02:53,490
And once you've unzipped it and extracted it, then open it up in vs code and go ahead and code to your

33079
00:02:53,490 --> 00:02:56,040
heart's content using everything you've learned.

33080
00:02:56,220 --> 00:02:58,680
Pause the video now and give that a go.

33081
00:03:02,510 --> 00:03:05,270
Now let's go through the solution.

33082
00:03:05,270 --> 00:03:10,040
In my case, I'm going to have an H one at the top, which is going to be the title.

33083
00:03:10,040 --> 00:03:18,440
So, um, top movies of all time, according to Angela.

33084
00:03:19,190 --> 00:03:28,580
And then afterwards, I'm going to create a subtitle which I will write my best three movies.

33085
00:03:29,870 --> 00:03:36,110
And then after that we were going to add a horizontal rule to separate this part from the actual content

33086
00:03:36,110 --> 00:03:37,220
of our website.

33087
00:03:37,220 --> 00:03:42,530
And I'm going to create an H three to represent each of the movies I'm going to recommend.

33088
00:03:42,530 --> 00:03:49,430
So I'm going to recommend A Spirited Away, which is one of my favorite animes.

33089
00:03:50,390 --> 00:03:55,790
And I'm going to use a paragraph tag to describe a little bit about why I like it.

33090
00:03:55,790 --> 00:03:58,370
So I'm just going to call it favorite anime.

33091
00:03:59,360 --> 00:04:05,520
And then the next movie we will be Ex Machina.

33092
00:04:06,600 --> 00:04:11,940
And I really liked it because it's a really cool sci fi movie.

33093
00:04:13,120 --> 00:04:24,520
And then finally, the third one is going to be the movie Drive with Ryan Gosling because it was really

33094
00:04:24,520 --> 00:04:26,080
beautifully shot.

33095
00:04:29,150 --> 00:04:29,910
Cool.

33096
00:04:29,930 --> 00:04:37,520
This is the basics of what you would need to have done for this project.

33097
00:04:37,520 --> 00:04:45,890
It has all of the elements that were required and you can see in the goal PNG that it's got all the

33098
00:04:45,890 --> 00:04:49,160
things that we've described, even if the text is a little bit different.

33099
00:04:49,190 --> 00:04:53,510
Of course it won't be, according to Angela for you, it will be according to your name.

33100
00:04:53,510 --> 00:04:59,600
And now that you've done that, feel free to add different things in here as you would want.

33101
00:04:59,630 --> 00:05:07,640
Maybe add a bit more to the paragraph tags, maybe add a poem about your favorite movie, go crazy,

33102
00:05:07,670 --> 00:05:14,300
try out things and share in the Q&A your project as a screenshot.

33103
00:05:14,660 --> 00:05:19,070
If you don't know how to do a screenshot, be sure to be sure to type that into Google.

33104
00:05:19,070 --> 00:05:20,660
How do I create a screenshot?

33105
00:05:20,660 --> 00:05:27,110
And then you can add it into the Q&A and we can all look at your favorite movies and be inspired.

33106
00:05:27,110 --> 00:05:30,930
So I hope you enjoyed building the project together.

33107
00:05:30,930 --> 00:05:39,060
And in the next section we're going to dive a little bit deeper into some more intermediate aspects

33108
00:05:39,060 --> 00:05:40,320
of HTML.

33109
00:05:40,320 --> 00:05:43,350
So for all of that and more, I'll see you there.



33110
00:00:00,290 --> 00:00:07,370
Now that we've seen how HTML elements and tags work, it's time to explore the bigger picture, what's

33111
00:00:07,370 --> 00:00:09,430
called the HTML boilerplate.

33112
00:00:09,440 --> 00:00:16,880
And this will allow us to understand the structure of our HTML files, just like how there is structure

33113
00:00:16,880 --> 00:00:19,380
to letters that you would write.

33114
00:00:19,400 --> 00:00:26,030
For example, there's the section where you have your address and then you probably would include a

33115
00:00:26,060 --> 00:00:32,810
dear so and so, and then you have the body of your letter and finally you would write something like

33116
00:00:32,840 --> 00:00:36,660
your sincerely and then your name and signature.

33117
00:00:36,680 --> 00:00:43,760
Similarly, there is a structure to our HTML files and it looks something like this.

33118
00:00:43,760 --> 00:00:45,500
And this is called a boilerplate.

33119
00:00:45,530 --> 00:00:50,510
It's what you usually start off with when you create any new HTML file.

33120
00:00:50,660 --> 00:00:54,050
And we're going to go through it line by line so that we understand it.

33121
00:00:54,080 --> 00:00:59,300
At the top of every HTML file, there should be a doctype declaration.

33122
00:00:59,300 --> 00:01:01,530
And that's what this tag does.

33123
00:01:01,560 --> 00:01:06,610
It tells the browser which version of the file was written in.

33124
00:01:06,630 --> 00:01:15,570
Now the latest version of HTML is HTML5 and the Doctype declaration looks like this with an angle bracket,

33125
00:01:15,570 --> 00:01:20,310
an exclamation mark, doctype in all caps and then HTML.

33126
00:01:20,310 --> 00:01:26,850
And this line tells any browser that's reading our HTML file that we have written our code in HTML version

33127
00:01:26,850 --> 00:01:27,480
five.

33128
00:01:27,510 --> 00:01:31,120
The next part that we've got is the actual HTML.

33129
00:01:31,140 --> 00:01:34,440
Now, this is going to be the root of the document.

33130
00:01:34,470 --> 00:01:41,310
It means that everything else, every other element, no matter if it's an H1 or an image or a link,

33131
00:01:41,310 --> 00:01:52,440
it's all going to go inside the opening and closing tags of the HTML element and this attribute where

33132
00:01:52,440 --> 00:01:58,380
it says Lang This is the language of the text content in that element.

33133
00:01:58,380 --> 00:02:05,160
So for example, if you're writing a website that is going to be targeted at English speakers, then

33134
00:02:05,160 --> 00:02:07,920
you're going to set your lang to English.

33135
00:02:07,950 --> 00:02:08,550
N.

33136
00:02:08,580 --> 00:02:13,380
Now this isn't very important for the users who can see your website.

33137
00:02:13,410 --> 00:02:20,370
It's more important for the users who can't because there are various screen readers and assistive technologies

33138
00:02:20,370 --> 00:02:25,770
that will look at this language attribute so that when they read out the website, they can pronounce

33139
00:02:25,770 --> 00:02:27,000
the words correctly.

33140
00:02:27,150 --> 00:02:30,220
Opens profile photo follow at you.

33141
00:02:30,270 --> 00:02:31,590
Angela Button.

33142
00:02:31,920 --> 00:02:36,870
Now, with the HTML element, we're starting to see the beginnings of a hamburger.

33143
00:02:36,900 --> 00:02:39,810
There's a bun at the top and there's a bun at the bottom.

33144
00:02:39,870 --> 00:02:45,180
For those of you guys who have been my long term friends, you know how much I love food analogies,

33145
00:02:45,180 --> 00:02:51,570
but this is a great one because when we have an HTML element, usually there is the opening and the

33146
00:02:51,570 --> 00:02:55,920
closing and everything that belongs in it is sandwiched inside.

33147
00:02:55,950 --> 00:03:00,600
Now the next part of the HTML boilerplate is the head element.

33148
00:03:00,600 --> 00:03:07,590
And this is an area where important information about our website is placed that is not going to be

33149
00:03:07,590 --> 00:03:09,450
displayed to the user.

33150
00:03:09,480 --> 00:03:15,450
It includes things that will help the website render in the browser correctly, but it doesn't include

33151
00:03:15,450 --> 00:03:19,940
any sort of content like text or images or anything that the user will see.

33152
00:03:19,950 --> 00:03:27,180
So one of the things that you should always have in the head section is a meta tag for the character

33153
00:03:27,180 --> 00:03:32,280
set encoding of the web page, and in this case it's set as UTF eight.

33154
00:03:32,310 --> 00:03:40,110
What this does is it ensures that the characters that you're using on your website gets displayed correctly.

33155
00:03:40,110 --> 00:03:46,410
So, for example, in certain character sets, it won't allow emojis to render in other character sets.

33156
00:03:46,410 --> 00:03:50,580
They won't have certain symbols like multiplication and division symbols.

33157
00:03:50,580 --> 00:03:54,210
And that's what this meta tag takes care of.

33158
00:03:54,240 --> 00:04:01,740
Usually by convention in our HTML boilerplate, we will simply just include this tag as is using the

33159
00:04:01,770 --> 00:04:05,310
UTF eight character set, which is one of the most common.

33160
00:04:05,310 --> 00:04:07,260
So you don't even have to think about it.

33161
00:04:07,290 --> 00:04:14,340
Now another thing that you should have in your head section is the title of your website, and that

33162
00:04:14,340 --> 00:04:20,519
title is usually what gets displayed up here in the Tab Bar.

33163
00:04:20,519 --> 00:04:28,380
And in fact, if you right click on any website in Chrome, you can click to view page source and you

33164
00:04:28,380 --> 00:04:35,580
can see we've got our Doctype, we've got our HTML element inside it, we've got our head, our character

33165
00:04:35,580 --> 00:04:36,120
set.

33166
00:04:36,120 --> 00:04:42,240
And then if we scroll a little bit more, you can see we've got our title here.

33167
00:04:42,240 --> 00:04:48,840
And in between the opening and closing tags of the title, it tells you what title should be displayed

33168
00:04:48,840 --> 00:04:49,710
up here.

33169
00:04:50,070 --> 00:04:54,150
So in our case here, the title was simply say my website.

33170
00:04:54,360 --> 00:04:59,880
Now there's a lot more things that can go into the head element, as you've seen when we looked at.

33171
00:04:59,960 --> 00:05:01,520
The Google Home page.

33172
00:05:01,850 --> 00:05:09,050
But for now, these two are the most important things that will always go into your files.

33173
00:05:09,050 --> 00:05:10,700
And it's important to know.

33174
00:05:10,730 --> 00:05:13,490
We'll cover other tags as we come across them.

33175
00:05:13,520 --> 00:05:19,520
Now, the next sandwich inside the sandwich, if you will, are two slices of tomatoes.

33176
00:05:19,850 --> 00:05:20,990
No, just kidding.

33177
00:05:20,990 --> 00:05:23,000
It's actually the body element.

33178
00:05:23,030 --> 00:05:24,140
Just like a person.

33179
00:05:24,140 --> 00:05:26,600
After the head element comes the body element.

33180
00:05:26,720 --> 00:05:33,920
Inside the body element is where we're going to be spending the majority of our time creating and writing

33181
00:05:33,920 --> 00:05:35,030
our website.

33182
00:05:35,060 --> 00:05:38,530
This is where all of the content of the website goes.

33183
00:05:38,540 --> 00:05:45,090
So the text, the titles, the images, the links, everything that you can do with HTML.

33184
00:05:45,110 --> 00:05:53,180
Creating content and structure goes in between the opening and the closing tags of the body element.

33185
00:05:53,180 --> 00:05:56,510
So somewhere inside here.

33186
00:05:57,020 --> 00:05:58,580
Now what can go in here?

33187
00:05:58,580 --> 00:06:06,660
Well, we've seen already how an H1 works so we can put in a heading, we can add images, we can add

33188
00:06:06,660 --> 00:06:07,380
lots of things.

33189
00:06:07,380 --> 00:06:13,680
And this is essentially where the meat of our website is going to live.

33190
00:06:14,280 --> 00:06:21,300
Once our burger collapses down, you can see that this is what a typical website's HTML code is made

33191
00:06:21,300 --> 00:06:21,990
up of.

33192
00:06:22,080 --> 00:06:26,490
So no matter what you add into your body, you can vary it up.

33193
00:06:26,490 --> 00:06:32,430
But by default, most websites will start off with a boilerplate that looks like this.

33194
00:06:32,610 --> 00:06:39,450
When you're starting out, I often recommend students to type this out when they're creating new websites

33195
00:06:39,450 --> 00:06:47,640
and in fact you can have a go doing this now by going into VS code, typing out these elements and creating

33196
00:06:47,640 --> 00:06:50,400
your website entirely from scratch.

33197
00:06:50,430 --> 00:06:57,900
Now we're beginning to see this idea of nesting in an HTML document, and this is going to be a concept

33198
00:06:57,900 --> 00:07:02,970
that's going to become super important as we learn more and more programming.

33199
00:07:02,970 --> 00:07:08,850
But it's simple to understand if we come back to this analogy of the hamburger.

33200
00:07:09,000 --> 00:07:18,150
So we have our HTML element which has the opening and closing tags here, and it is exactly like our

33201
00:07:18,150 --> 00:07:19,410
hamburger bun.

33202
00:07:19,410 --> 00:07:26,220
So this is our top bun and this is our bottom bun and sandwich.

33203
00:07:26,220 --> 00:07:30,510
In between is everything that goes inside the HTML element.

33204
00:07:30,810 --> 00:07:38,040
Now, if we take a look at our body element, then you can see here we've got the opening body tag,

33205
00:07:38,040 --> 00:07:43,500
which will represent with a slice of tomato and the closing body tag.

33206
00:07:43,500 --> 00:07:48,570
And in between those two slices of tomato is the content for our website.

33207
00:07:48,600 --> 00:07:55,890
Now you'll notice that some of the HTML tags, even though they have an opening and closing tag, they're

33208
00:07:55,890 --> 00:07:58,380
not on different lines.

33209
00:07:58,380 --> 00:08:04,380
And that's because if we can fit it on one line and we can see the beginning and the end very easily,

33210
00:08:04,380 --> 00:08:07,230
then we don't actually need to create several lines.

33211
00:08:07,230 --> 00:08:11,040
But nonetheless, it still got a beginning and an end.

33212
00:08:11,070 --> 00:08:17,280
Now the important thing for us when we're writing code and we've got all of this sandwiching going on

33213
00:08:17,280 --> 00:08:25,680
that we indent our code properly so that you can see that this clearly lines up with the opening tag

33214
00:08:25,680 --> 00:08:26,040
here.

33215
00:08:26,040 --> 00:08:29,640
So they are clearly sandwiching something in between.

33216
00:08:29,640 --> 00:08:34,650
And then we have two spaces and we've got the next indentation level here.

33217
00:08:34,650 --> 00:08:43,320
So this one lines up with the closing tag and through this kind of indentation you can quite easily

33218
00:08:43,320 --> 00:08:52,610
visualize that this head section is clearly embedded inside the HTML section.

33219
00:08:52,620 --> 00:09:00,840
So just like our lettuce is inside our hamburger, by indenting our code properly, we'll be able to

33220
00:09:00,840 --> 00:09:07,180
keep our code tidy and we'll be able to see at a glance exactly what our code looks like.

33221
00:09:07,200 --> 00:09:12,510
Now, finally, because we're using vs code, I want to tell you about a shortcut.

33222
00:09:12,510 --> 00:09:16,580
That means you don't have to type out this boilerplate every single time.

33223
00:09:16,620 --> 00:09:22,800
Once you've typed it out once or twice and you know exactly how this boilerplate looks, you can save

33224
00:09:22,800 --> 00:09:26,760
a lot of time by simply typing exclamation mark.

33225
00:09:26,790 --> 00:09:33,810
Hitting Enter on the first selection and then it will automatically insert all of that code for you,

33226
00:09:33,840 --> 00:09:39,060
saving you a lot of time, especially when you're creating many documents.

33227
00:09:39,270 --> 00:09:47,580
Now, the important thing here, though, is this only works if you have created a dot HTML website.

33228
00:09:47,850 --> 00:09:55,880
So notice that when you create a new file inside vs code, if you name it and save it as something something

33229
00:09:55,890 --> 00:09:59,460
dot html, then this trick will work.

33230
00:09:59,550 --> 00:10:03,450
If you save it with another extension, then it won't.

33231
00:10:03,960 --> 00:10:07,050
There's a couple of things here that we haven't seen before.

33232
00:10:07,080 --> 00:10:11,040
Couple more meta tags and there's a lot of other meta tags.

33233
00:10:11,040 --> 00:10:19,140
But here we've got one line here which says HTTP equivalent compatible content, i.e. edge.

33234
00:10:19,170 --> 00:10:24,690
This basically just keeps our code compatible with Internet Explorer.

33235
00:10:24,690 --> 00:10:30,150
And in fact, I normally don't write this line anymore because Internet Explorer has been deprecated

33236
00:10:30,150 --> 00:10:32,270
and is no longer in use.

33237
00:10:32,280 --> 00:10:38,430
So if you want to keep your code clean, you can actually delete this from your code or to generated

33238
00:10:38,430 --> 00:10:39,210
boilerplate.

33239
00:10:39,780 --> 00:10:48,420
Now the next one tells you the viewport and it defines how the website should be displayed relative

33240
00:10:48,450 --> 00:10:51,840
to the screen that it's being rendered on.

33241
00:10:51,930 --> 00:10:57,990
And this line of code just tells the browser how to display your website when it first opens.

33242
00:10:58,260 --> 00:11:04,530
So now that we've learned all about HTML boilerplates, it's time to build your own boilerplate, or

33243
00:11:04,530 --> 00:11:06,570
in this case, build your own burger.

33244
00:11:07,080 --> 00:11:13,650
As you notice, there are endless numbers of HTML elements and we're going to be creating our own HTML

33245
00:11:13,650 --> 00:11:14,400
elements.

33246
00:11:14,400 --> 00:11:22,050
But the important thing here I want you to understand is how nesting works in HTML and how you can keep

33247
00:11:22,050 --> 00:11:27,510
your code tidy by using good indentation and keeping good programming practices.

33248
00:11:27,690 --> 00:11:33,450
If we're building our own imaginary burger, let's imagine the world's best burger.

33249
00:11:33,450 --> 00:11:38,820
You can have it vegan, you can have it vegetarian, you can have bacon, you can have whatever it is

33250
00:11:38,820 --> 00:11:43,950
your heart desires, but you have to write it in code.

33251
00:11:44,400 --> 00:11:47,160
Let's begin by creating a bun.

33252
00:11:47,250 --> 00:11:56,010
So I've got a bun element that I've created which has an opening and a closing tag, and I've added

33253
00:11:56,010 --> 00:11:56,790
an attribute.

33254
00:11:56,790 --> 00:11:59,490
You can add as many of these attributes as you like.

33255
00:11:59,490 --> 00:12:06,780
And remember, we add attributes by giving it a name, and then after an equal sign, we give it a value.

33256
00:12:06,930 --> 00:12:10,260
Now the next part is for you to invent.

33257
00:12:10,260 --> 00:12:16,020
So head over to VS code and build your own burger, adding in whatever elements you want.

33258
00:12:16,050 --> 00:12:24,780
Add tomatoes, add ham, but make sure that you're keeping the indentation correct and that you're working

33259
00:12:24,780 --> 00:12:29,220
with this idea of opening and closing tags.

33260
00:12:29,310 --> 00:12:36,660
But you can be as creative as you like, and be sure to share your code for your burger in the Q&A section.

33261
00:12:36,660 --> 00:12:38,700
And if you want some inspiration.

33262
00:12:38,700 --> 00:12:47,130
This is one that I made earlier, but I want you to practice making your own and doing it your way.

33263
00:12:47,160 --> 00:12:51,960
Have a go at that and once you're done, head over to the next lesson.


33264
00:00:00,320 --> 00:00:01,250
Hey guys.

33265
00:00:01,250 --> 00:00:06,320
In the previous lesson, you've learned a lot about different types of HTML elements and you already

33266
00:00:06,320 --> 00:00:08,960
got started using them to create websites.

33267
00:00:08,990 --> 00:00:13,670
Now in this section we're going to take it a little bit further and explore some more intermediate and

33268
00:00:13,670 --> 00:00:15,770
advanced concepts in HTML.

33269
00:00:15,890 --> 00:00:21,320
We're going to get started in this lesson by learning about list elements, the ordered and unordered

33270
00:00:21,320 --> 00:00:22,070
lists.

33271
00:00:22,430 --> 00:00:27,170
Now, if you've spent any time around on the Internet recently, you'll notice that it's completely

33272
00:00:27,170 --> 00:00:28,520
full of lists.

33273
00:00:28,520 --> 00:00:36,020
If you go on to BuzzFeed or any of these sort of clickbaity articles, usually they'll create a list

33274
00:00:36,020 --> 00:00:41,300
of something such as great items that must have been invented by geniuses.

33275
00:00:41,300 --> 00:00:47,660
But also if you look at something like the FBI's ten Most Wanted Fugitives, this is also created in

33276
00:00:47,660 --> 00:00:49,700
this website using a list.

33277
00:00:49,700 --> 00:00:52,690
So how do we create these lists ourselves?

33278
00:00:52,700 --> 00:00:57,080
Well, let's start off with one of the most common types, the unordered list.

33279
00:00:57,080 --> 00:01:04,260
And it's super simple to create simply, you have a starting tag with UL and then have a closing tag.

33280
00:01:04,260 --> 00:01:11,880
Now, normally we've had one line elements such as this where we get to add some content in between

33281
00:01:11,880 --> 00:01:13,730
the open and closing tags.

33282
00:01:13,740 --> 00:01:16,920
Now in this case, however, it's a little bit different.

33283
00:01:16,950 --> 00:01:23,940
They actually go on separate lines because in between these two open and closing tags, we need an extra

33284
00:01:23,940 --> 00:01:27,600
type of tag in order to complete this unordered list.

33285
00:01:27,600 --> 00:01:30,570
And these are called list items.

33286
00:01:30,570 --> 00:01:38,730
So here you can see we've got three list items and each of them contain some piece of content.

33287
00:01:38,820 --> 00:01:44,270
But all three items are enclosed inside this unordered list.

33288
00:01:44,280 --> 00:01:50,850
So for any list to work and display content, then you're going to have to add list items into it.

33289
00:01:51,000 --> 00:01:54,150
So what does this look like if we actually run the code?

33290
00:01:54,150 --> 00:01:55,770
Well, this is what you would see.

33291
00:01:55,800 --> 00:02:03,420
Essentially unordered list items will create these bullet points because such as in the case of a shopping

33292
00:02:03,420 --> 00:02:08,190
list here, the order of the items doesn't matter.

33293
00:02:08,190 --> 00:02:11,970
So that's why an unordered list would be perfect for this situation.

33294
00:02:12,390 --> 00:02:19,200
However, on the other hand, if you needed your list items to be arranged in a particular order, then

33295
00:02:19,200 --> 00:02:21,060
you would create an ordered list.

33296
00:02:21,210 --> 00:02:27,570
And once you've added the list items inside there, what this will do is it will give you numbers.

33297
00:02:27,570 --> 00:02:35,700
So it would start from one and the number next to each list item will depend on the order that you put

33298
00:02:35,700 --> 00:02:39,420
into this ordered list element.

33299
00:02:39,420 --> 00:02:44,960
If this milk was down here, then it would get the number three and so on and so forth.

33300
00:02:44,970 --> 00:02:46,530
That's all pretty simple.

33301
00:02:46,530 --> 00:02:54,990
So if we compare the ordered list, the ol element that gives us numbers and versus the UL, the unordered

33302
00:02:54,990 --> 00:02:58,830
list item, which just gives us bullet points, simple as that.

33303
00:02:58,830 --> 00:03:05,310
And coming back to our FBI ten Most Wanted Fugitives website, you can see they actually created this

33304
00:03:05,310 --> 00:03:07,230
website using lists.

33305
00:03:07,230 --> 00:03:14,160
So when you right click on any of these images and select inspect, you can see that each of these photos

33306
00:03:14,160 --> 00:03:19,170
are actually a list item placed inside an unordered list.

33307
00:03:19,200 --> 00:03:23,910
Now there's a whole bunch more to this website which we're going to learn in future lessons.

33308
00:03:23,910 --> 00:03:30,060
But the really important thing is for you to see that this is a really important part that you see in

33309
00:03:30,060 --> 00:03:32,100
websites all over on the Internet.

33310
00:03:32,100 --> 00:03:35,280
So it's really important that we understand how to use them.

33311
00:03:35,520 --> 00:03:41,490
So now that we've learned a little bit about ordered and unordered lists, let's try an exercise to

33312
00:03:41,490 --> 00:03:43,680
make sure that you've understood everything.

33313
00:03:43,800 --> 00:03:50,400
Go ahead and download the list element zip file from this current lesson.

33314
00:03:50,400 --> 00:03:57,000
And as always, if you forget how to do that, or if you just started on this lesson, then I recommend

33315
00:03:57,000 --> 00:04:01,860
going to one of the earlier lessons where I show you how to download course resources.

33316
00:04:01,860 --> 00:04:10,830
Now, once you've downloaded and extracted the folder 3.0 list elements and dragged it into VS code

33317
00:04:10,830 --> 00:04:16,860
or your web development projects folder, then you should be able to see it here on the file Explorer

33318
00:04:16,860 --> 00:04:17,790
on the left.

33319
00:04:17,820 --> 00:04:24,420
If we explore some of the files for this current coding exercise, you can see we've got an index.html

33320
00:04:24,450 --> 00:04:29,280
that contains some plain text which you're going to be formatting into lists.

33321
00:04:29,280 --> 00:04:36,330
And if we take a look at the goal, feel free to choose whichever heading sizes you want.

33322
00:04:36,330 --> 00:04:43,830
But for me, I think it made the most sense to have one H1 and then the ingredients and the instructions

33323
00:04:43,830 --> 00:04:50,850
as h2's and then any other headings like this part and this part as h3's.

33324
00:04:50,850 --> 00:04:56,730
But the most important thing I care about in this exercise is you manage to create these lists.

33325
00:04:56,730 --> 00:04:59,690
So we've got an unordered list for.

33326
00:05:00,110 --> 00:05:03,110
Section one of the ingredients to create the dough.

33327
00:05:03,110 --> 00:05:07,460
And then we've got another unordered list for the filling ingredients.

33328
00:05:07,460 --> 00:05:13,550
And finally, we've got all the rest of the instructions as a ordered list.

33329
00:05:13,580 --> 00:05:18,710
Think about how you're going to create this and don't worry about typing all the text out because if

33330
00:05:18,710 --> 00:05:23,510
you look inside the index.html, you'll see all the text typed out for you already.

33331
00:05:23,510 --> 00:05:30,830
All you need to do is to add the HTML tags and to format the document into an HTML website.

33332
00:05:30,830 --> 00:05:37,640
And in the end we should end up with this recipe website for creating delicious cinnamon rolls.

33333
00:05:37,850 --> 00:05:44,120
Now, if you watched my recent Instagram takeover of the Udemy account, you'll see me making the same

33334
00:05:44,120 --> 00:05:45,110
cinnamon rolls.

33335
00:05:45,110 --> 00:05:48,920
And if you want to do the same, then this is the recipe for you.

33336
00:05:49,100 --> 00:05:54,200
This is what you're aiming for and using what you've learnt about list elements.

33337
00:05:54,200 --> 00:05:58,550
I want you to go ahead and pause the video and complete this challenge.

33338
00:06:02,620 --> 00:06:03,040
All right.

33339
00:06:03,040 --> 00:06:04,510
So did you manage to do that?

33340
00:06:04,510 --> 00:06:06,970
Let's go ahead and walk through the solution together.

33341
00:06:06,970 --> 00:06:12,610
So I'm going to show you the preview on the right side so you can see the website update as I type.

33342
00:06:12,610 --> 00:06:15,670
First, we're going to start off with our heading tags.

33343
00:06:15,670 --> 00:06:18,850
So I'm just going to add a bunch of headings in quite quickly.

33344
00:06:24,090 --> 00:06:26,800
All right, so that's all the headings out of the way.

33345
00:06:26,820 --> 00:06:31,320
So now we're on to the proper work, which is creating our lists.

33346
00:06:31,350 --> 00:06:36,810
As I said, the ingredients don't really need an order, so we're going to create an unordered list.

33347
00:06:36,840 --> 00:06:43,740
So in between our start and end UL tags, we're going to have each of these as a list item.

33348
00:06:43,740 --> 00:06:46,980
So I'm going to create the list item tag.

33349
00:06:46,980 --> 00:06:55,650
And once I've created that, then all I need to do is to drag my first list item in between the list

33350
00:06:55,650 --> 00:06:56,360
item.

33351
00:06:56,370 --> 00:07:01,440
Now, if clicking and dragging doesn't work for you, if this doesn't show up, then you can also just

33352
00:07:01,440 --> 00:07:05,190
right click, copy and paste that also works.

33353
00:07:05,310 --> 00:07:12,580
Now I need to do this many times, so for efficiency's sake, I'm just going to paste in another 4 or

33354
00:07:12,580 --> 00:07:20,100
5 of these and drag in all of the other ingredients into each of these list items.

33355
00:07:21,360 --> 00:07:26,340
Now, when you're actually coding this from scratch, you won't need to do all of this dragging because

33356
00:07:26,340 --> 00:07:33,020
you'll be typing your list item and then you'll be writing your item name in here like so.

33357
00:07:33,030 --> 00:07:38,790
But because we've written all the text for you, hopefully to save you some time so that you're actually

33358
00:07:38,790 --> 00:07:44,040
doing more coding and less sort of busy work, then this is how we do it.

33359
00:07:44,490 --> 00:07:45,780
Again for the filling.

33360
00:07:45,780 --> 00:07:51,900
We've got another unordered list and then inside there are three list items.

33361
00:07:51,900 --> 00:07:59,820
So let me go ahead and paste those three list items in and drag each of them in between the tags like

33362
00:07:59,820 --> 00:08:00,450
so.

33363
00:08:00,960 --> 00:08:08,040
So now we've got our ingredients and we've got our two unordered lists showing up perfectly.

33364
00:08:08,040 --> 00:08:13,530
Now all we have to do is to create the final list, which is going to be an ordered list, because if

33365
00:08:13,530 --> 00:08:16,200
you think about it, instructions have an order, right?

33366
00:08:16,200 --> 00:08:20,370
You can't first bake the thing if you haven't created it yet.

33367
00:08:20,400 --> 00:08:28,390
Inside this order list, we again need these list item elements and we need to create as many of them

33368
00:08:28,390 --> 00:08:31,270
as we have steps.

33369
00:08:31,270 --> 00:08:36,370
So I'm going to drag each of the lines into the list elements.

33370
00:08:41,130 --> 00:08:42,600
And there we have it.

33371
00:08:42,630 --> 00:08:50,150
We've got all of our list items and all of our instructions showing up perfectly inside an ordered list.

33372
00:08:50,160 --> 00:08:55,530
And if we check against the goal, then you can see we've pretty much completed everything perfectly.

33373
00:08:56,520 --> 00:09:05,850
Now, one thing to talk about at this point is notice how some HTML elements are one line and other

33374
00:09:06,000 --> 00:09:08,520
HTML elements are on multiple lines.

33375
00:09:08,640 --> 00:09:17,010
When you paste long lines of text in between the start and end tags of an element, sometimes vs code

33376
00:09:17,010 --> 00:09:20,970
will automatically put the closing tag onto the next line.

33377
00:09:21,000 --> 00:09:28,590
Now you can edit this so that it all goes onto the same line, or you can purposely make sure they're

33378
00:09:28,590 --> 00:09:33,360
on different lines and you see it being sandwiched between the open and closing tags.

33379
00:09:33,780 --> 00:09:39,450
Now this is a personal preference, so it really doesn't matter how you want to do this so you can do

33380
00:09:39,450 --> 00:09:40,810
this however you like.

33381
00:09:40,810 --> 00:09:45,310
But for me, I like to have list items all on the same line.

33382
00:09:45,340 --> 00:09:53,470
This just kind of helps me see visually how many list items I have, and it doesn't clutter up the list

33383
00:09:53,500 --> 00:09:55,600
with all of these list items.

33384
00:09:55,600 --> 00:10:02,080
So have a think about whether, if you like to see your elements like this all on one line with the

33385
00:10:02,080 --> 00:10:10,510
content enclosed or if you prefer to have it like this where things are more indented and you have the

33386
00:10:10,510 --> 00:10:14,880
content in between two lines of your list item.

33387
00:10:14,890 --> 00:10:20,320
In the next lesson, we're going to talk a little bit more about this type of indentation.

33388
00:10:20,320 --> 00:10:22,840
So don't worry if that doesn't make sense just yet.

33389
00:10:22,870 --> 00:10:27,910
We're going to talk about nesting and we're going to talk about indentation of HTML elements.

33390
00:10:27,910 --> 00:10:31,690
So once you're ready, head over to the next lesson and we'll continue from there.


33391
00:00:00,140 --> 00:00:04,910
Now, in the previous lesson, we learned a little bit about ordered and unordered lists.

33392
00:00:04,939 --> 00:00:08,510
Now in this lesson, we're going to take that concept a little bit further.

33393
00:00:08,550 --> 00:00:12,180
I want to show you how you can nest things inside others.

33394
00:00:12,200 --> 00:00:21,020
For example, we saw that we could already nest the list elements inside an unordered list and you would

33395
00:00:21,020 --> 00:00:23,110
see it indented like this.

33396
00:00:23,120 --> 00:00:29,810
But we can actually go a step further and we can actually nest a list inside another list.

33397
00:00:29,840 --> 00:00:37,520
So in this case, what you see is we've got the first unordered list that starts here, and this is

33398
00:00:37,520 --> 00:00:39,260
where it ends.

33399
00:00:39,470 --> 00:00:42,890
But we've also got another unordered list here.

33400
00:00:42,890 --> 00:00:48,050
And this is where the second one begins and where it ends.

33401
00:00:48,140 --> 00:00:51,950
When this is rendered in a website, this is what you'll see.

33402
00:00:51,980 --> 00:00:55,010
You'll see it's looking like this.

33403
00:00:55,010 --> 00:00:59,970
So you've got the first list that is this entire part.

33404
00:00:59,970 --> 00:01:04,830
And then inside the first list, we've got a separate list.

33405
00:01:04,950 --> 00:01:07,530
Under this particular bullet point.

33406
00:01:07,950 --> 00:01:10,190
Now, how does the code look?

33407
00:01:10,200 --> 00:01:12,380
Well, it looks quite simple.

33408
00:01:12,390 --> 00:01:17,010
All you have to do is inside a list item.

33409
00:01:17,010 --> 00:01:20,520
You see how the starting list item is right here.

33410
00:01:20,520 --> 00:01:27,450
And the end list item is down here inside this list item.

33411
00:01:27,450 --> 00:01:34,620
Instead of simply just having a single line of text such as what we've got up here, instead, we've

33412
00:01:34,620 --> 00:01:38,080
actually embedded an entire unordered list.

33413
00:01:38,100 --> 00:01:46,290
So first we'll write the text for the list item, and then after the text we embed our unordered list,

33414
00:01:46,290 --> 00:01:49,890
just as you would see in any other normal list.

33415
00:01:50,820 --> 00:01:55,770
And then we end up with what's called a nested list.

33416
00:01:56,410 --> 00:02:04,690
This is the part where indentation your code becomes super important because imagine the code looked

33417
00:02:04,690 --> 00:02:07,990
like this and not like this.

33418
00:02:08,020 --> 00:02:16,360
When you look at this code at a glance, it's a lot harder to see that you've got a list embedded inside.

33419
00:02:16,360 --> 00:02:17,410
Another list.

33420
00:02:17,410 --> 00:02:17,980
Right.

33421
00:02:18,070 --> 00:02:24,490
Because you have to actually read what each of these tags are instead of using the clues that's offered

33422
00:02:24,490 --> 00:02:26,560
by that indentation.

33423
00:02:27,100 --> 00:02:34,260
And as you can imagine, we can have even crazier nested lists like what I've got right here.

33424
00:02:34,270 --> 00:02:37,480
So there's actually three lists here.

33425
00:02:37,510 --> 00:02:39,550
One is up here.

33426
00:02:39,580 --> 00:02:41,860
This is the first list.

33427
00:02:41,950 --> 00:02:44,530
This is a unordered list.

33428
00:02:44,680 --> 00:02:51,400
And then we've got a second list right here, which is again, an unordered list.

33429
00:02:51,400 --> 00:02:56,000
And that's embedded under the list item for be.

33430
00:02:56,300 --> 00:03:05,270
And then to complicate things, I've added a third ordered list that's listed under this second item

33431
00:03:05,270 --> 00:03:06,410
right here.

33432
00:03:06,650 --> 00:03:12,800
This amount of craziness starts to really highlight the issues that you're going to have reading this

33433
00:03:12,800 --> 00:03:13,340
code.

33434
00:03:13,370 --> 00:03:18,410
Imagine somebody else gave you this code and you had to figure out without looking at the right hand

33435
00:03:18,440 --> 00:03:21,500
side, what is going on right here.

33436
00:03:21,680 --> 00:03:30,860
It's a lot easier if we have it indented, right, Because we can clearly see one unordered list, the

33437
00:03:30,860 --> 00:03:39,770
second unordered list and the third ordered list because they're all nicely indented and is a lot easier

33438
00:03:39,770 --> 00:03:42,480
visually for when we're reading code.

33439
00:03:42,500 --> 00:03:48,410
So when you're writing code, you also are thinking about how other people are going to find reading

33440
00:03:48,410 --> 00:03:49,220
your code.

33441
00:03:49,760 --> 00:03:53,480
Now let's try an exercise to really drill this home.

33442
00:03:54,020 --> 00:03:59,840
I want you to download the nesting and indentation zip file from this current lesson, and I want you

33443
00:03:59,840 --> 00:04:04,010
to open up inside vs code as you have done previously.

33444
00:04:04,100 --> 00:04:10,760
Now, in this case, if we take a look at our goal is to create a super complex nested list.

33445
00:04:10,880 --> 00:04:17,120
In the last lesson you already saw how you can create simple list elements, whether it's unordered

33446
00:04:17,120 --> 00:04:19,370
lists or it's ordered lists.

33447
00:04:19,399 --> 00:04:23,740
It's pretty simple to create just a list with some list items.

33448
00:04:23,750 --> 00:04:29,460
But in this challenge, I want you to create something a lot more complicated.

33449
00:04:29,480 --> 00:04:30,980
Let me walk you through it.

33450
00:04:30,980 --> 00:04:40,010
So firstly, we've got a unordered list that has just three list items A, B and C, but under item

33451
00:04:40,040 --> 00:04:44,720
B, notice here we've got a ordered list.

33452
00:04:45,050 --> 00:04:55,850
This ordered list also has three items and under item B to the second item, we've got yet another unordered

33453
00:04:55,850 --> 00:04:56,510
list.

33454
00:04:56,750 --> 00:05:01,220
And inside the first item we've nested another unordered list.

33455
00:05:01,220 --> 00:05:06,380
And inside the third item we've embedded another ordered list.

33456
00:05:06,710 --> 00:05:12,590
This is a little bit complicated and in order to really understand it, you need to take a look at this

33457
00:05:12,590 --> 00:05:20,920
part of the video because here I've got the code that will create this simpler structure.

33458
00:05:20,930 --> 00:05:28,280
And the important thing to notice is that whereas normally you would probably have a list item that

33459
00:05:28,280 --> 00:05:33,920
starts like this and then you would have it closed like this.

33460
00:05:35,340 --> 00:05:44,370
In the case when we're embedding a list, that closing tag does not go here, but instead it goes all

33461
00:05:44,370 --> 00:05:49,590
the way at the end of the nested list.

33462
00:05:49,680 --> 00:05:57,000
Once we're done nesting, this unordered list right here, then do we close that list item?

33463
00:05:57,000 --> 00:06:00,710
So this is a really important thing to take notice of.

33464
00:06:00,720 --> 00:06:08,340
And then I want you to just study this page a little bit to see how I created this list using this code

33465
00:06:08,340 --> 00:06:14,910
and then take this and apply it to the challenge in the coding exercise.

33466
00:06:15,300 --> 00:06:16,800
Have a good think about it.

33467
00:06:16,800 --> 00:06:19,440
Take some time to try and complete this challenge.

33468
00:06:19,470 --> 00:06:25,170
I for one, believe that you can do this if you just spend some time thinking and trying it.

33469
00:06:25,170 --> 00:06:32,100
And as always, remember you can use the preview feature to see how your code is turning out and shaping

33470
00:06:32,100 --> 00:06:34,140
up while you're writing it.

33471
00:06:34,140 --> 00:06:36,160
And I think that will help you quite a lot.

33472
00:06:36,250 --> 00:06:39,310
Pause the video now and give that coding exercise a go.

33473
00:06:40,800 --> 00:06:41,280
All right.

33474
00:06:41,280 --> 00:06:42,330
So how did that go?

33475
00:06:42,330 --> 00:06:45,630
Now, if you didn't give that a go, I want you to stop the video now.

33476
00:06:45,660 --> 00:06:47,280
Make sure that you've tried it.

33477
00:06:47,280 --> 00:06:50,250
You're not going to learn coding through just watching me code.

33478
00:06:50,280 --> 00:06:54,540
You're only going to learn programming by actually doing it.

33479
00:06:54,540 --> 00:06:59,010
Solving challenges, feeling stupid, sometimes feeling like you're not good enough.

33480
00:06:59,010 --> 00:07:03,750
But at the end, when you do get it, when you do succeed, it's going to feel amazing.

33481
00:07:03,750 --> 00:07:07,860
And I promise you it was the same for everybody who's gone through this journey.

33482
00:07:08,040 --> 00:07:13,980
So what I'm going to do is I'm going to run through the solution and I'm going to drag my goal up over

33483
00:07:13,980 --> 00:07:19,020
here so I can compare it to the preview as I go along.

33484
00:07:19,020 --> 00:07:28,200
So the first step is creating the first unordered list with three items A, B and C That should be pretty

33485
00:07:28,200 --> 00:07:29,190
easy to do.

33486
00:07:29,190 --> 00:07:32,580
And let's go ahead and create that.

33487
00:07:35,850 --> 00:07:41,670
All right, so now we've got the top of our nest, which is our A, B and C.

33488
00:07:41,850 --> 00:07:44,940
If we take a look at our goal, compare it.

33489
00:07:44,970 --> 00:07:48,690
We've got A, B, C inside the bullet.

33490
00:07:48,720 --> 00:07:53,760
B, we're going to embed right here, a ordered list.

33491
00:07:53,760 --> 00:07:58,860
So it's again going to have three items B1, B2 and B3.

33492
00:07:58,860 --> 00:08:04,050
And we know it's an ordered list because it starts off with the numbers one, two and three.

33493
00:08:04,920 --> 00:08:10,760
Let's go ahead and embed that inside this second B list item.

33494
00:08:10,770 --> 00:08:16,830
Remember what I said when you embed a list in another one, you find the list item you want to embed

33495
00:08:16,830 --> 00:08:17,340
it in.

33496
00:08:17,340 --> 00:08:25,260
And after the content of the list item, which is of course, this B right here, then we go ahead and

33497
00:08:25,260 --> 00:08:29,820
hit enter and that is where we create our list.

33498
00:08:29,850 --> 00:08:36,280
We're going to create an ordered list in this case and it's going to have three items.

33499
00:08:36,280 --> 00:08:42,520
The first one is going to be B1 and then B2 and B3.

33500
00:08:43,030 --> 00:08:45,880
Now let's again compare and contrast.

33501
00:08:45,910 --> 00:08:52,750
We've got our B1, B2, B3, but take a look inside this B2 item.

33502
00:08:52,750 --> 00:09:01,240
Again, we're going to nest another list and here we've got a unordered list B2, a B2B and B2C.

33503
00:09:01,390 --> 00:09:03,460
Let's go ahead and do that.

33504
00:09:06,400 --> 00:09:14,020
Right here inside the B2 list item, we're going to create our unordered list, our UL, and we're going

33505
00:09:14,020 --> 00:09:19,720
to have B2, a B2B and B2C.

33506
00:09:21,100 --> 00:09:22,180
Let's compare.

33507
00:09:22,180 --> 00:09:26,650
We've got B2B, B2B, B2C, so we've already got most of the parts done.

33508
00:09:26,740 --> 00:09:35,140
The final nest in this big long chain is under B to A, we need to add a unordered list, B to A and

33509
00:09:35,140 --> 00:09:36,010
B to a B.

33510
00:09:36,430 --> 00:09:40,630
Now, the way that I've named each of these hopefully should help you with the nesting.

33511
00:09:40,630 --> 00:09:46,000
If it doesn't, then you just have to compare against the goal and try matching it visually.

33512
00:09:46,240 --> 00:09:51,910
In this case instead of under the second item, it's actually nested under the first item.

33513
00:09:51,910 --> 00:10:03,700
And again, it's an unordered list with just two list items B to A and B to a B.

33514
00:10:05,140 --> 00:10:10,180
Now we've got pretty much all of this part sorted.

33515
00:10:10,300 --> 00:10:19,030
All we need to do now is just to add the final ordered list in bed under the B three list item.

33516
00:10:19,600 --> 00:10:22,010
Let's find our B three list item.

33517
00:10:22,010 --> 00:10:27,560
After the text, let's hit enter to create a new line and then we're going to create an ordered list

33518
00:10:27,560 --> 00:10:38,540
like this and we're going to add our two list items B31 and B32.

33519
00:10:39,020 --> 00:10:45,650
So now if we compare our goal and what we've got in the preview, you should see it's completely identical.

33520
00:10:45,650 --> 00:10:50,210
And through this process, hopefully you've learned a little bit more about nesting.

33521
00:10:50,300 --> 00:10:58,370
And one of the nice things about Visual Studio Code is that it will automatically indent things as you

33522
00:10:58,370 --> 00:10:59,570
write your code.

33523
00:10:59,600 --> 00:11:04,190
It knows, for example, list items, go inside a list.

33524
00:11:04,190 --> 00:11:12,410
So whether if it's a UL or an O, L, when you go to file and save or use the shortcut command here,

33525
00:11:12,410 --> 00:11:14,810
in my case on a mac, it's command s.

33526
00:11:14,840 --> 00:11:17,420
If you're on a windows, it's probably Ctrl s.

33527
00:11:17,450 --> 00:11:21,800
When you do that, it automatically re indents everything.

33528
00:11:21,800 --> 00:11:29,270
So even if you kind of mess things up in a big way as you type like I've got here and you've made all

33529
00:11:29,270 --> 00:11:31,520
of the structure look very weird.

33530
00:11:31,760 --> 00:11:40,280
If you save Visual Studio code will re indent everything for you so you don't have to necessarily indent

33531
00:11:40,310 --> 00:11:43,910
things, but it's important you understand what the indentation means.

33532
00:11:43,910 --> 00:11:52,430
So here you see a line right here and it links the opening UL to the matching closing tag, and then

33533
00:11:52,430 --> 00:12:02,150
it has indented these two list items over so that you can see these two items probably belong to this

33534
00:12:02,180 --> 00:12:03,650
unordered list.

33535
00:12:04,070 --> 00:12:09,140
And very often in HTML you will have matching tags.

33536
00:12:09,140 --> 00:12:12,620
If there's an open tag, there's probably a closing tag.

33537
00:12:12,620 --> 00:12:15,800
And all of these things on screen such as these lines.

33538
00:12:15,800 --> 00:12:22,490
And the indentation is here to help you to understand how your code looks so that if you actually have

33539
00:12:22,490 --> 00:12:29,540
an error, such as, for example, if you had forgotten to close this UL and when you see your code

33540
00:12:29,540 --> 00:12:36,020
doing weird things like for example, in this case, why is my C in an ordered list when it should be

33541
00:12:36,020 --> 00:12:38,960
at the top level with the other unordered list?

33542
00:12:38,990 --> 00:12:40,700
What is going on here?

33543
00:12:40,910 --> 00:12:44,420
Well, I can then follow these indentations.

33544
00:12:44,750 --> 00:12:52,580
I can see that this UL obviously matches along this line down to this closing one.

33545
00:12:52,580 --> 00:12:55,880
And then this next one is a list item.

33546
00:12:55,880 --> 00:13:04,940
So these two are on one line, they're matched and then this next list item is matched up with this

33547
00:13:04,940 --> 00:13:05,300
one.

33548
00:13:05,300 --> 00:13:07,720
But then wait a minute, what's going on here?

33549
00:13:07,730 --> 00:13:13,670
Why is this ol matched to a list item?

33550
00:13:13,670 --> 00:13:17,330
Or maybe there's something missing right here?

33551
00:13:17,330 --> 00:13:21,560
Well, it is, of course, the missing closing tag.

33552
00:13:21,560 --> 00:13:25,730
So this way I can start to figure out where my errors come from.

33553
00:13:25,730 --> 00:13:31,070
So we're going to do a lot more of this kind of error checking and mistake correction, which we call

33554
00:13:31,100 --> 00:13:33,110
debugging in future lessons.

33555
00:13:33,110 --> 00:13:39,860
But this is just a taster in this lesson for how you can use some of the tools to help you make sure

33556
00:13:39,860 --> 00:13:43,010
that your code is working and that you're writing the correct things.

33557
00:13:43,010 --> 00:13:50,750
And when you do make a mistake, as we all do, you can use the nesting in indentation in order to diagnose

33558
00:13:50,750 --> 00:13:54,290
what's wrong with your code and help you fix it.

33559
00:13:55,100 --> 00:13:58,400
So that's all for nesting and indentation.

33560
00:13:58,400 --> 00:14:05,300
In the next lesson, we're going to learn about anchor elements and we're going to start creating hyperlinks

33561
00:14:05,300 --> 00:14:06,440
in our web pages.

33562
00:14:06,440 --> 00:14:09,740
So for all of that and more, I'll see you on the next lesson.


33563
00:00:00,170 --> 00:00:00,770
Hey, guys.

33564
00:00:00,770 --> 00:00:08,210
In this lesson, we're going to understand a bit more about another aspect of HTML, which is their

33565
00:00:08,210 --> 00:00:13,850
attributes and understand that we're going to learn all about the anchor element, which allows us to

33566
00:00:13,850 --> 00:00:15,240
create hyperlinks.

33567
00:00:15,260 --> 00:00:21,620
This is what an anchor element looks like and similar to previous elements, we've got the opening tag

33568
00:00:21,620 --> 00:00:27,620
and the closing tag, but there's something a little bit special about this one because right now if

33569
00:00:27,620 --> 00:00:32,299
you wrote the code as it is here, this is not an active hyperlink.

33570
00:00:32,330 --> 00:00:39,590
What you need is to add an additional attribute, and the attribute for an HTML element goes in the

33571
00:00:39,590 --> 00:00:40,820
opening tag.

33572
00:00:40,820 --> 00:00:49,490
It goes into the part just after the name of the tag and just before the end of the opening tag where

33573
00:00:49,490 --> 00:00:51,530
we have the closing angle bracket.

33574
00:00:51,740 --> 00:00:58,730
And what an attribute does is it adds additional information to this HTML element, such as in this

33575
00:00:58,730 --> 00:01:01,260
case where this link should link to.

33576
00:01:01,290 --> 00:01:05,069
Now, the way that we structure an attribute looks something like this.

33577
00:01:05,069 --> 00:01:15,270
So we have the name of the element and then we have a space and then we have the name of the attribute.

33578
00:01:15,450 --> 00:01:18,960
And afterwards we have a equal sign.

33579
00:01:18,960 --> 00:01:23,640
And after the equal sign, we have the value of the attribute.

33580
00:01:24,300 --> 00:01:31,350
Now you can have as many attributes as you want and all you have to do is simply separate each one of

33581
00:01:31,350 --> 00:01:37,590
them with a space and make sure that they all go into the opening tag.

33582
00:01:37,860 --> 00:01:45,600
Now, in the case of our image element, if you take a look on the Mozilla developer network documentation

33583
00:01:45,600 --> 00:01:55,230
for the anchor element, then you can see it has the special attribute of href and href is the part

33584
00:01:55,260 --> 00:02:01,380
where we add the URL that the hyperlink should go to without the attribute.

33585
00:02:01,380 --> 00:02:02,820
This is what you would see.

33586
00:02:02,850 --> 00:02:10,979
It is an anchor element and you do see the content in between the tags, but you do not see an active

33587
00:02:10,979 --> 00:02:11,970
link when you click on it.

33588
00:02:11,970 --> 00:02:13,110
Nothing happens.

33589
00:02:13,140 --> 00:02:13,620
Now.

33590
00:02:13,620 --> 00:02:20,910
As soon as you add that href attribute and you provide it with in this case a target.

33591
00:02:20,910 --> 00:02:25,170
So where should this hyperlink go to then?

33592
00:02:25,170 --> 00:02:31,980
This link actually gets styled to show you that this is now an active link in the familiar blue with

33593
00:02:31,980 --> 00:02:32,970
the underline.

33594
00:02:32,970 --> 00:02:40,710
And at this point, if you click on it, it is going to go straight to this URL that we've specified

33595
00:02:41,100 --> 00:02:44,130
in addition to the specific attributes.

33596
00:02:44,130 --> 00:02:51,720
So for example, in the anchor element documentation, we saw that it has all of these specific attributes

33597
00:02:51,720 --> 00:02:55,740
which are relevant to this particular element.

33598
00:02:55,770 --> 00:03:01,920
Now we're not going to be using all of them and some of them are also deprecated and no longer in use

33599
00:03:01,920 --> 00:03:03,240
in HTML5.

33600
00:03:03,330 --> 00:03:09,680
But in addition to these specific attributes, there are also global attributes that every single HTML

33601
00:03:09,690 --> 00:03:11,370
element has access to.

33602
00:03:12,000 --> 00:03:18,570
And if you look through some of these, an example is something like draggable, right?

33603
00:03:19,080 --> 00:03:26,010
And it basically allows us to set true or false to say whether if the element may or may not be dragged,

33604
00:03:26,520 --> 00:03:31,560
you can apply a global attribute to any given element.

33605
00:03:31,560 --> 00:03:35,730
So in this case, we can apply it even to our anchor element.

33606
00:03:35,730 --> 00:03:44,400
Again, we have the name of the attribute, we have the equal sign and we have the value of the attribute.

33607
00:03:44,400 --> 00:03:50,610
So in this case, the name of the attribute is Draggable, and we've set it equal to true.

33608
00:03:50,820 --> 00:03:57,930
So once this attribute is set, what happens is you can click and drag that anchor tag around.

33609
00:03:58,020 --> 00:04:03,510
Now, if that attribute wasn't set, then when you try to drag it, it's just going to highlight the

33610
00:04:03,510 --> 00:04:06,240
line and it's not going to allow that behavior.

33611
00:04:06,540 --> 00:04:12,390
So we've learned that there are specific attributes which are reserved for only certain elements, such

33612
00:04:12,390 --> 00:04:19,529
as the href for the anchor tag, and there are global attributes which can be used on any HTML element.

33613
00:04:19,829 --> 00:04:27,150
So now let's try an exercise and see if you've understood how to use anchor elements and more specifically,

33614
00:04:27,180 --> 00:04:32,070
see if you've understood how the HTML attribute is written in HTML code.

33615
00:04:32,400 --> 00:04:39,390
In this exercise, we're going to create a website that shows our top five favorite websites.

33616
00:04:39,840 --> 00:04:45,960
I've got the H1 already written for you, but what we're aiming for is something like this.

33617
00:04:45,960 --> 00:04:54,210
So you have a list here and notice that this is actually an ordered list because it goes from one all

33618
00:04:54,210 --> 00:04:59,850
the way to five and the fact that the list is not highlighted.

33619
00:04:59,880 --> 00:05:09,300
Is in blue should show you that this is actually created using a list element and not a part of the

33620
00:05:09,300 --> 00:05:10,470
anchor tag.

33621
00:05:10,500 --> 00:05:12,510
It's not a part of the content.

33622
00:05:12,510 --> 00:05:15,870
And the anchor tag only starts here.

33623
00:05:16,530 --> 00:05:24,810
I want you to document your top five all time favorite websites and feel free to Google or check mine

33624
00:05:24,810 --> 00:05:26,700
if you want to see what they do.

33625
00:05:26,790 --> 00:05:33,420
These are some of the websites that I go to when I'm bored or when I'm trying to look for some new ideas

33626
00:05:33,420 --> 00:05:34,800
and new inspiration.

33627
00:05:35,160 --> 00:05:40,770
So I want you to use what you've learned previously about creating lists.

33628
00:05:40,770 --> 00:05:47,100
And within those lists, I want you to create five anchor tags, each of them pointing to a different

33629
00:05:47,100 --> 00:05:48,870
website that you like.

33630
00:05:49,350 --> 00:05:54,240
And if you've got everything working, then you would end up with a website that looks like the goal.

33631
00:05:54,240 --> 00:06:00,040
And when you click on any of these links, then they should take you to the correct website.

33632
00:06:00,070 --> 00:06:00,850
Pause the video.

33633
00:06:00,850 --> 00:06:06,340
Now, give this challenge a go, and once you're done, come back here and I'll go through the solution

33634
00:06:06,340 --> 00:06:07,030
with you.

33635
00:06:12,400 --> 00:06:12,880
All right.

33636
00:06:12,880 --> 00:06:14,290
So how did that go?

33637
00:06:14,500 --> 00:06:18,370
The first thing we wanted to do was to create a ordered list.

33638
00:06:18,400 --> 00:06:21,330
We already saw how to do this in a previous lesson.

33639
00:06:21,340 --> 00:06:27,730
We create our tags and inside we add our list elements.

33640
00:06:27,880 --> 00:06:32,260
Inside the list element is where our anchor tag is going to go.

33641
00:06:32,290 --> 00:06:42,220
It's an anchor tag, which is inside a list element, which is then inside a ordered list.

33642
00:06:42,520 --> 00:06:46,150
So several layers of nesting that's going on here.

33643
00:06:46,720 --> 00:06:53,530
Now, once you've created your anchor tag, then in between the open and closing tags, we add the text

33644
00:06:53,530 --> 00:06:54,590
for our link.

33645
00:06:54,610 --> 00:07:00,910
So in my case, it will be the name of my website that I'm linking to, which is called Product Hunt.

33646
00:07:01,000 --> 00:07:07,720
And this is a place where you can see all the latest product launches and great websites and start ups

33647
00:07:07,720 --> 00:07:09,700
that people are building every day.

33648
00:07:09,940 --> 00:07:14,950
The important part comes here when we create the attribute for that anchor tag.

33649
00:07:14,960 --> 00:07:23,840
So remember that the attribute for linking a anchor tag is called the href, and we're going to add

33650
00:07:23,840 --> 00:07:25,970
it after the equal sign.

33651
00:07:26,520 --> 00:07:31,640
As you start typing, you might see code, start suggesting what you're looking for.

33652
00:07:31,650 --> 00:07:37,380
So if you pick the ref and hit enter, then it will format everything for you ready for you to enter

33653
00:07:37,380 --> 00:07:38,340
the URL.

33654
00:07:38,730 --> 00:07:45,690
If you're wondering why there are these quotation marks here, well, that's because it's actually a

33655
00:07:45,690 --> 00:07:48,950
piece of text that we're going to add in here.

33656
00:07:48,960 --> 00:07:52,230
So this is treated slightly differently in code.

33657
00:07:52,230 --> 00:07:59,140
So whenever you have text, normally you will see them enclosed inside a set of double quotes.

33658
00:07:59,160 --> 00:08:07,050
This is to differentiate from the reserved words like, you know, I or a or h ref.

33659
00:08:07,080 --> 00:08:08,820
These are all special words.

33660
00:08:08,820 --> 00:08:13,890
And in order to show that you're not creating anything special, you're just pointing to our URL, which

33661
00:08:13,890 --> 00:08:15,210
is just a piece of text.

33662
00:08:15,240 --> 00:08:17,670
We have our double quotes around it.

33663
00:08:18,420 --> 00:08:26,380
Inside here, I'm going to paste in the URL of product hunt, and now I have myself a link and if I

33664
00:08:26,380 --> 00:08:32,590
go ahead and show preview, then you should see that we've got our list item one.

33665
00:08:32,590 --> 00:08:39,580
And when I click on it, it goes to the website that I have linked to.

33666
00:08:39,760 --> 00:08:47,410
You can repeat this process and link to all of your five favorite websites and you should end up with

33667
00:08:47,410 --> 00:08:50,680
something that looks like this.

33668
00:08:50,680 --> 00:08:58,510
And as an extra challenge, I want you to head over to the developer documentation for the ordered list,

33669
00:08:58,540 --> 00:09:01,750
which you're using in this current code exercise.

33670
00:09:01,750 --> 00:09:03,850
And look at the attributes.

33671
00:09:04,000 --> 00:09:12,130
I want you to see whether if you can change one of the attributes, the start attribute, so that your

33672
00:09:12,130 --> 00:09:17,290
list, instead of starting from one starts from five.

33673
00:09:17,470 --> 00:09:19,300
This is what you're aiming for.

33674
00:09:19,390 --> 00:09:23,950
Pause the video, give that a go, and then afterwards we'll go through the solution together.

33675
00:09:26,750 --> 00:09:28,940
Let's take a look at the documentation.

33676
00:09:28,940 --> 00:09:31,400
We can see that for the ordered list.

33677
00:09:31,430 --> 00:09:34,370
One of the attributes is called START.

33678
00:09:34,460 --> 00:09:42,680
And in the explanation, it says, All we have to do is to set this attribute to a number for it to

33679
00:09:42,680 --> 00:09:43,430
start from.

33680
00:09:43,430 --> 00:09:45,020
So that's pretty simple.

33681
00:09:45,020 --> 00:09:47,690
But we need to remember where our attributes go.

33682
00:09:47,690 --> 00:09:55,250
So they go in the starting tag, which is here, and the name of the attribute is Start, and we can

33683
00:09:55,250 --> 00:09:57,140
set it equal to five.

33684
00:09:57,170 --> 00:10:02,930
Now once we've done that, if we take a look at our website, you can see the order list now starts

33685
00:10:02,930 --> 00:10:07,970
from five and ends at nine because we've changed that attribute.

33686
00:10:08,390 --> 00:10:12,680
Hopefully that wasn't too difficult and you managed to get it to work.

33687
00:10:12,710 --> 00:10:17,390
Have a quick review of the concepts that are covered in this lesson.

33688
00:10:17,390 --> 00:10:21,920
And remember, we're always trying to repeat things that we've learnt before just to make sure that

33689
00:10:21,920 --> 00:10:25,830
we reinforce those pieces of knowledge from earlier on.

33690
00:10:25,830 --> 00:10:32,220
And one thing I like to do as I learn is to make some notes on the things that are new to me that I

33691
00:10:32,220 --> 00:10:33,600
didn't realize before.

33692
00:10:33,600 --> 00:10:38,700
So if there's something new in this lesson that you want to write down, take a quick note of it and

33693
00:10:38,700 --> 00:10:42,840
then head over to the next lesson where we talk about image elements.

33694
00:10:43,230 --> 00:10:44,850
For all of that and more.

33695
00:10:44,850 --> 00:10:45,450
I'll see you there.


33696
00:00:00,170 --> 00:00:04,490
Now, a website would be pretty boring if it had no images on it, right?

33697
00:00:04,490 --> 00:00:11,330
So in this lesson we're going to learn how we can add images to our website using the image element.

33698
00:00:11,720 --> 00:00:13,430
Now this is what it looks like.

33699
00:00:13,430 --> 00:00:14,660
It's pretty simple.

33700
00:00:14,660 --> 00:00:20,630
And you'll notice that similar to the anchor tag or the anchor element that we learned about in the

33701
00:00:20,630 --> 00:00:27,950
last lesson, the main component of an image tag that renders the image is this attribute, which is

33702
00:00:27,950 --> 00:00:30,410
called source or SRC.

33703
00:00:30,950 --> 00:00:38,810
And what this does is it tells the image element what is the source of the image.

33704
00:00:39,710 --> 00:00:47,510
And that's why after the equal sign, the value is going to be the location of the image.

33705
00:00:48,650 --> 00:00:56,300
One last thing to notice about the image tag is, unlike the anchor tag, it doesn't have a closing

33706
00:00:56,330 --> 00:00:56,960
tag.

33707
00:00:56,960 --> 00:01:03,540
Instead, it is a self closing tag, also known as a void element.

33708
00:01:03,570 --> 00:01:09,390
Remember, previously we learned about void elements where we learnt that you can have horizontal rule

33709
00:01:09,390 --> 00:01:12,540
elements, you can also have break elements.

33710
00:01:12,540 --> 00:01:19,230
And similarly the image element is also a void element that doesn't have a closing tag.

33711
00:01:19,230 --> 00:01:23,150
Because if you think about it, what is the text content of an image?

33712
00:01:23,170 --> 00:01:24,390
Doesn't really make sense, right?

33713
00:01:24,390 --> 00:01:29,970
The main content is actually the image that will be rendered from the source.

33714
00:01:30,390 --> 00:01:31,800
What does this look like?

33715
00:01:31,800 --> 00:01:39,810
Well, here's an example image element where we've set the source to a real life live photo on the Internet.

33716
00:01:40,110 --> 00:01:44,940
Now, when this code is rendered in a website, it will display a random image.

33717
00:01:44,940 --> 00:01:48,570
So in this case, the random image I got was a forest.

33718
00:01:48,780 --> 00:01:56,430
And the reason why it's random is because I'm getting these photos from a source called pixham.photos.

33719
00:01:56,430 --> 00:02:02,460
So if you type this into your browser, you should see a website and the idea is kind of like the Lorem

33720
00:02:02,460 --> 00:02:05,310
ipsum for placeholder photos.

33721
00:02:05,310 --> 00:02:11,220
So when you don't really care what the photo is, but you need a photo on your website as you're creating

33722
00:02:11,220 --> 00:02:17,070
it in order to see what it would look like, then you could use this website and you could put in the

33723
00:02:17,100 --> 00:02:21,390
URL, which is the standard one like here.

33724
00:02:21,390 --> 00:02:26,040
And then after a forward slash, you can add in the size of your image.

33725
00:02:26,040 --> 00:02:32,640
So in this case, I'm saying I want a square that is 200 pixels by 200 pixels.

33726
00:02:32,880 --> 00:02:38,400
It gives me a random image from its data bank, for example, in this case of a forest.

33727
00:02:38,670 --> 00:02:47,160
The other attribute for an image tag that's super important and one that you should always have is the

33728
00:02:47,160 --> 00:02:48,480
alt attribute.

33729
00:02:48,690 --> 00:02:53,820
And the alt attribute stands for Alternative Text Description.

33730
00:02:54,030 --> 00:02:59,910
This is really important because people who are blind or visually impaired, they don't look at the

33731
00:02:59,910 --> 00:03:01,440
Internet the same way we do.

33732
00:03:01,440 --> 00:03:03,780
They often use something called a screen reader.

33733
00:03:03,780 --> 00:03:10,830
And what the screen reader is going to do when it hits an image is it will look at the alternative text

33734
00:03:10,830 --> 00:03:11,760
provided.

33735
00:03:11,760 --> 00:03:17,460
So in this case, I've provided that this is a forest at sunset or sunrise.

33736
00:03:17,460 --> 00:03:22,830
I'm not quite sure, but that means that the person with visual impairment will get this read out to

33737
00:03:22,830 --> 00:03:26,760
them and it will help them understand what the website's all about.

33738
00:03:26,790 --> 00:03:29,400
So what is this process like?

33739
00:03:29,610 --> 00:03:36,840
As an example, I'm using the Silktide Toolbar, which is a Chrome browser extension, to simulate what

33740
00:03:36,870 --> 00:03:40,530
a person with visual impairment might hear as they're browsing.

33741
00:03:40,530 --> 00:03:42,420
In this case, the BBC website.

33742
00:03:42,510 --> 00:03:48,300
As I click through next, you can see it describes the different things that are on screen.

33743
00:03:48,300 --> 00:03:53,670
And if I go over to the image, it describes the image for me.

33744
00:03:55,380 --> 00:03:58,740
Item two Dolphin leaping from the sea image.

33745
00:03:58,770 --> 00:04:01,470
So where is it getting this description from?

33746
00:04:01,470 --> 00:04:08,070
Well, if we right click on the image and inspect it, and if we look for the image, which I think

33747
00:04:08,100 --> 00:04:14,490
should be down here, you can see as I highlight different parts, it shows me which part.

33748
00:04:14,490 --> 00:04:22,350
So in this element, I'm probably going to find an image at the end right here and you can see the alt

33749
00:04:22,380 --> 00:04:25,590
text saying dolphin leaping from the sea.

33750
00:04:25,590 --> 00:04:30,630
And that is what gets read out from the screen reader helping somebody with blindness.

33751
00:04:30,660 --> 00:04:33,570
Be able to understand what's on this website.

33752
00:04:34,410 --> 00:04:40,860
Now, if you want to check out this tool, it's a Chrome browser extension called Silktide and it should

33753
00:04:40,860 --> 00:04:48,030
be a free plugin, but it might only work on Mac or certain versions of Windows, but it's not so much

33754
00:04:48,030 --> 00:04:55,590
about the tool, but I wanted to show you how important it is the alt text that you provide for accessibility

33755
00:04:55,590 --> 00:04:58,620
and for disabled users browsing your website.

33756
00:04:58,710 --> 00:04:59,730
Now let's try.

33757
00:04:59,780 --> 00:05:02,930
An exercise and create some images of our own.

33758
00:05:03,080 --> 00:05:10,280
Download the zip file from this current lesson and go ahead and drag it into your web development project

33759
00:05:10,280 --> 00:05:13,400
folder and open it inside vs code.

33760
00:05:13,610 --> 00:05:21,110
If you take a look inside the index.html, you can see I've provided to you two image URL examples that

33761
00:05:21,110 --> 00:05:22,320
you can use.

33762
00:05:22,340 --> 00:05:28,610
And what we're aiming for is to find out if you're a cat person or if you're a dog person.

33763
00:05:28,760 --> 00:05:34,430
I want you to create a H1 that says I'm a cat person or I'm a dog person.

33764
00:05:34,430 --> 00:05:39,350
And also I want you to add a image element straight afterwards.

33765
00:05:39,380 --> 00:05:44,970
Now you can use the URL for the dog or for the cat.

33766
00:05:44,990 --> 00:05:50,960
It doesn't really matter at the end of the day, as long as you've understood how to create images.

33767
00:05:51,140 --> 00:05:52,640
That's the challenge.

33768
00:05:52,670 --> 00:05:55,760
Pause the video and give that a go.

33769
00:05:58,260 --> 00:05:58,680
All right.

33770
00:05:58,680 --> 00:06:02,280
So personally, I'm more of a dog kind of person.

33771
00:06:02,280 --> 00:06:08,680
And if you're also a dog person, then you might see my little Easter egg that I've buried in there.

33772
00:06:08,700 --> 00:06:16,570
So first, let's go ahead and create our H1, and then we're going to create our image.

33773
00:06:16,590 --> 00:06:22,530
Remember, we create a image tag and it's a self-closing tag.

33774
00:06:22,560 --> 00:06:33,630
Then we add in our source as the image source, and we're going to put our URL right inside there.

33775
00:06:34,110 --> 00:06:40,650
Now, already, if we go ahead and show preview, you can see our little dog digging in the sand.

33776
00:06:40,680 --> 00:06:46,350
Because if you've noticed, this is actually a gif image.

33777
00:06:46,620 --> 00:06:52,200
GIF images work exactly the same way as normal images, JPEGs or PNGs.

33778
00:06:52,230 --> 00:06:57,780
As long as you put it into the source, it will be rendered in a website and it will start animating

33779
00:06:57,880 --> 00:06:58,990
or by itself.

33780
00:06:58,990 --> 00:07:01,810
And you get a cute little dog digging through the sand.

33781
00:07:02,110 --> 00:07:08,500
Now if you're a cat person, then this is just a static jpeg because cats are more chill.

33782
00:07:09,790 --> 00:07:12,880
So I hope you manage to get that part right.

33783
00:07:13,120 --> 00:07:17,530
But we haven't finished creating our image element yet.

33784
00:07:17,560 --> 00:07:20,530
Remember what I said about the alt tag?

33785
00:07:20,530 --> 00:07:25,990
It's a good idea to always add an alt tag to describe our image when we can.

33786
00:07:26,020 --> 00:07:31,990
Now, there are some cases where you don't create an alt tag because it's not really relevant to somebody

33787
00:07:31,990 --> 00:07:36,400
reading through the content of a website and you can in fact leave it blank.

33788
00:07:36,850 --> 00:07:38,710
But in this case, it's very simple.

33789
00:07:38,710 --> 00:07:43,630
We've got a puppy who is digging through the sand.

33790
00:07:44,800 --> 00:07:51,970
And now when we take a look at our preview, then nothing visually for us changes.

33791
00:07:51,970 --> 00:07:57,550
But behind the scenes, we will help our visually impaired friends to be able to understand our website

33792
00:07:57,550 --> 00:07:58,900
just a little bit better.

33793
00:07:59,230 --> 00:08:03,310
So I hope you managed to achieve either of these goals.

33794
00:08:03,310 --> 00:08:09,130
And once you're ready, we can head over to the next lesson where we've got the final project to create

33795
00:08:09,160 --> 00:08:14,410
a birthday invite website using all the skills that we've learned so far.

33796
00:08:14,410 --> 00:08:16,250
So all of that and more.

33797
00:08:16,270 --> 00:08:17,110
I'll see you there.


33798
00:00:01,040 --> 00:00:01,490
All right.

33799
00:00:01,490 --> 00:00:07,060
It's time to put everything we've learned so far together and create a project.

33800
00:00:07,070 --> 00:00:13,760
In this project, we're going to create a website for your next party to help you invite all your guests.

33801
00:00:13,760 --> 00:00:19,880
Because paper invites and WhatsApp invites are only for people who can't create websites.

33802
00:00:20,420 --> 00:00:21,230
Am I right?

33803
00:00:21,710 --> 00:00:23,540
We can do it better.

33804
00:00:23,570 --> 00:00:25,400
This is what we're aiming for.

33805
00:00:25,430 --> 00:00:31,970
We're aiming for a retro 90s look website because we haven't learned about styling websites yet, which

33806
00:00:31,970 --> 00:00:34,970
is yet to come, but this is already pretty nice.

33807
00:00:34,970 --> 00:00:41,630
We're going to create a website to tell people that it's our birthday, which day it is, and we're

33808
00:00:41,630 --> 00:00:43,460
going to add some images.

33809
00:00:43,490 --> 00:00:46,790
We're going to tell people what to bring using lists.

33810
00:00:46,790 --> 00:00:51,140
And also we're going to add an anchor tag to show people where they need to go.

33811
00:00:51,320 --> 00:00:55,970
Hopefully, we're going to combine a lot of the things that you've learned in previous lessons.

33812
00:00:55,970 --> 00:01:01,290
And once you're ready, head over to the course resources for this lesson.

33813
00:01:01,290 --> 00:01:05,160
Download and extract the zip file in order to get started.

33814
00:01:05,190 --> 00:01:12,900
When you take a look at the index.html, you can see I've provided an example image URL and an example

33815
00:01:12,930 --> 00:01:14,040
Google Maps link.

33816
00:01:14,040 --> 00:01:19,650
So if you take a look inside the goal, you can see what the example image will take you to.

33817
00:01:19,650 --> 00:01:25,230
And if you're ready for an Easter egg slash mini surprise, you can head over to the Google map link

33818
00:01:25,230 --> 00:01:27,990
and see where it's located as well.

33819
00:01:28,440 --> 00:01:32,580
So this is a project and it's not a coding exercise.

33820
00:01:32,580 --> 00:01:35,520
It's not something that I'm testing you on.

33821
00:01:35,550 --> 00:01:36,780
Everything I'm saying.

33822
00:01:36,780 --> 00:01:38,430
It's just a guideline.

33823
00:01:38,430 --> 00:01:47,610
I want you to at minimum, have an image in there, have a list in there, and also have an anchor tag

33824
00:01:47,610 --> 00:01:48,360
in there.

33825
00:01:48,660 --> 00:01:51,120
Everything else is totally up to you.

33826
00:01:51,120 --> 00:01:56,010
You can mess around with it as much as you like or change as much as you like, or keep it as simple

33827
00:01:56,010 --> 00:01:56,550
as you like.

33828
00:01:56,550 --> 00:01:58,110
It doesn't really matter.

33829
00:01:58,140 --> 00:02:05,760
Pause the video and give this project a go and happy birthday if it is your birthday today.

33830
00:02:09,050 --> 00:02:09,500
All right.

33831
00:02:09,500 --> 00:02:13,190
So want to walk through one possible solution?

33832
00:02:13,490 --> 00:02:16,430
I just want to say this is just one possibility.

33833
00:02:16,460 --> 00:02:18,680
You can change it as much as you like.

33834
00:02:18,680 --> 00:02:20,900
There is no right or wrong in the project.

33835
00:02:20,930 --> 00:02:24,970
It's all about practice and also your own personal style.

33836
00:02:24,980 --> 00:02:30,590
So in my case, I created an H1 for the top level heading, which is the most important thing.

33837
00:02:30,590 --> 00:02:36,170
It's my birthday and then I've got some h2's and some H3.

33838
00:02:36,200 --> 00:02:42,110
So for what to bring and where you need to go in the image tag.

33839
00:02:42,110 --> 00:02:50,000
I've added a source to that image I provided in the starting code, and also I provided an alternative

33840
00:02:50,000 --> 00:02:53,840
text to show people what this image is all about.

33841
00:02:54,560 --> 00:03:01,370
If you manage to get the image source and the alternative text and your image shows up, then congratulations.

33842
00:03:01,370 --> 00:03:02,600
You did a great job.

33843
00:03:02,630 --> 00:03:09,720
Now the next part I've got is a unordered list to tell people what they should bring with each item

33844
00:03:09,720 --> 00:03:12,660
in its own list item element.

33845
00:03:12,660 --> 00:03:17,790
And finally, I created an anchor tag to tell people where they need to go.

33846
00:03:17,790 --> 00:03:25,470
So I've added an href attribute and I used the link that I supplied in the starting code and I told

33847
00:03:25,470 --> 00:03:33,660
people that the link text is a Google map link, which hopefully will take them to where they need to

33848
00:03:33,660 --> 00:03:38,400
go, which is somewhere in Tokyo where all the pigeon people meet, apparently.

33849
00:03:39,300 --> 00:03:42,660
So if you found that Easter egg, then congratulations.

33850
00:03:43,020 --> 00:03:48,270
But if you're really proud of what you managed to do for your project, then be sure to take a screenshot

33851
00:03:48,300 --> 00:03:51,810
of it and post it in the Q&A to share it with the rest of us.

33852
00:03:51,810 --> 00:03:56,640
I would love to see what you came up with, but that's all from me for this section.

33853
00:03:56,640 --> 00:04:01,710
I hope you enjoyed learning more about HTML elements and I'll see you soon.



33854
00:00:00,380 --> 00:00:05,689
Hey guys, welcome to the introduction to CSS section.

33855
00:00:05,689 --> 00:00:10,430
And in this very first lesson, we're going to be introducing you to CSS.

33856
00:00:10,460 --> 00:00:16,760
You'll be learning what it is, how it works and why we need it to be able to style our websites and

33857
00:00:16,760 --> 00:00:18,740
make them look beautiful.

33858
00:00:19,400 --> 00:00:21,470
What exactly is CSS?

33859
00:00:21,500 --> 00:00:25,610
Well, it stands for cascading style sheets.

33860
00:00:25,640 --> 00:00:29,270
It kind of conjures up the image of a cascade.

33861
00:00:29,270 --> 00:00:29,570
Right.

33862
00:00:29,600 --> 00:00:33,540
And a cascade is simply like a waterfall.

33863
00:00:33,560 --> 00:00:39,880
You have water at one level that then drops down through a waterfall into another level.

33864
00:00:39,890 --> 00:00:46,940
And we're going to see as we start to use these cascading style sheets, why that analogy is so apt.

33865
00:00:46,940 --> 00:00:51,960
Because the way that the style is applied cascades like a waterfall.

33866
00:00:51,980 --> 00:00:59,000
We start from the most general all the way down to the most specific styling requirements, and we're

33867
00:00:59,000 --> 00:01:03,560
going to see that in use as we use these cascading style sheets.

33868
00:01:03,800 --> 00:01:07,550
The other part of this name is the style sheet.

33869
00:01:07,820 --> 00:01:17,150
A style sheet is a type of language similar to how we had the HTML, which is a markup language.

33870
00:01:17,150 --> 00:01:20,810
That's what the part of stands for.

33871
00:01:21,200 --> 00:01:29,150
We have the style sheet, which is what the SS part stands for, and this is a language that allows

33872
00:01:29,150 --> 00:01:33,200
us to specify how things should look in our website.

33873
00:01:33,200 --> 00:01:36,770
And there are many different types of stylesheet languages.

33874
00:01:36,800 --> 00:01:42,710
The one that's most important and what we're going to be learning all about in this section is the cascading

33875
00:01:42,710 --> 00:01:43,340
style sheet.

33876
00:01:43,550 --> 00:01:52,520
But there's also others like Sass, which stands for syntactically awesome style sheet and Less, which

33877
00:01:52,520 --> 00:01:57,110
stands for Leaner CSS and many, many others.

33878
00:01:57,110 --> 00:02:03,530
But the most important one that every web developer needs to know is CSS.

33879
00:02:03,530 --> 00:02:05,990
And that's what we're going to be focusing on today.

33880
00:02:06,290 --> 00:02:09,770
So why did we need CSS?

33881
00:02:09,800 --> 00:02:14,030
Where did it come from and what exactly is the history of this whole thing?

33882
00:02:14,060 --> 00:02:20,820
Well, in the very beginning when the Internet was very, very new, there was no CSS, there was only

33883
00:02:21,090 --> 00:02:21,800
HTML.

33884
00:02:21,810 --> 00:02:28,350
And one of the things that developers started wanting to do is they wanted to style their website and

33885
00:02:28,350 --> 00:02:33,830
make it look the way they want it to, but they were really, really limited by HTML.

33886
00:02:33,840 --> 00:02:42,780
And this is a now famous email sent by Marc Andreessen, who is the founder of Mosaic, which is one

33887
00:02:42,780 --> 00:02:49,320
of the earliest Internet browsers who later founded Netscape and now the very famous Andreessen Horowitz

33888
00:02:49,350 --> 00:02:50,550
VC Fund.

33889
00:02:50,550 --> 00:02:57,270
And in this email he famously said that the answer he has for so many developers who want to simply

33890
00:02:57,270 --> 00:03:03,810
control what their documents look like, meaning what their websites look like in a way that would be

33891
00:03:03,810 --> 00:03:05,880
trivial, say in Microsoft Word.

33892
00:03:05,910 --> 00:03:09,330
His answer to these developers is just sorry, you're screwed.

33893
00:03:09,480 --> 00:03:14,430
There is no way to do it very easily at that point in HTML.

33894
00:03:14,590 --> 00:03:17,490
That's why all the website looks pretty much the same.

33895
00:03:17,490 --> 00:03:18,390
Pretty boring.

33896
00:03:18,390 --> 00:03:20,460
And there was no variation.

33897
00:03:20,460 --> 00:03:21,930
So what happened next?

33898
00:03:21,930 --> 00:03:31,140
Well, the W3C consortium responded by releasing a new version of HTML, HTML 3.2, and this came out

33899
00:03:31,140 --> 00:03:35,040
in 1997, so it was still in the very early days of the Internet.

33900
00:03:35,160 --> 00:03:44,700
And what this 3.2 HTML allowed was it introduced new HTML tags such as the font tag, which allows you

33901
00:03:44,700 --> 00:03:48,870
to define the font size, the color and the font face.

33902
00:03:48,870 --> 00:03:52,950
So the type of font you would want to use for your document.

33903
00:03:53,160 --> 00:03:57,630
Similarly, there was also the color attribute for font.

33904
00:03:57,660 --> 00:04:02,670
There was the face attribute, the size attribute, and these attributes allow you to change all sorts

33905
00:04:02,670 --> 00:04:06,360
of things about the way the text looks on your website.

33906
00:04:06,660 --> 00:04:14,340
And then there was also the center element which allows you to format your document and define how it

33907
00:04:14,340 --> 00:04:16,380
would be laid out on the screen.

33908
00:04:16,470 --> 00:04:23,680
Now, what you'll notice in all three of these Web pages is the deprecated symbol next to it.

33909
00:04:23,700 --> 00:04:31,380
All of these are deprecated, which in programming lingo, simply means you should no longer be using

33910
00:04:31,380 --> 00:04:34,140
these attributes and elements.

33911
00:04:34,140 --> 00:04:41,730
And the reason for this is because, as you can imagine, our HTML is supposed to be for content.

33912
00:04:41,760 --> 00:04:49,710
Now, if you add in a ton of styling into all of that content, you tell the website how it should be

33913
00:04:49,710 --> 00:04:56,400
centered, how it should be laid out, how the font should look, what color it should be, what kind

33914
00:04:56,400 --> 00:05:01,680
of border your tables should have, and a whole bunch of other styling effectively.

33915
00:05:01,710 --> 00:05:06,990
Then this is going to massively clutter up all of your HTML.

33916
00:05:06,990 --> 00:05:12,600
And you can imagine this is a really, really short website and it's already got so much junk in it

33917
00:05:12,600 --> 00:05:18,510
that we can't really tell what exactly is the structure and the content of the website and.

33918
00:05:18,530 --> 00:05:24,560
If you extend this to a larger website and you just want to do some simple things like give it some

33919
00:05:24,560 --> 00:05:32,270
colors or put things into the center, then your whole HTML file is going to be many, many, many thousands

33920
00:05:32,270 --> 00:05:37,790
of lines long and it's impossible to differentiate the content from the styling.

33921
00:05:38,060 --> 00:05:40,340
So what happened next?

33922
00:05:40,880 --> 00:05:52,250
Well, in 1996, a new recommendation was proposed by the W3 consortium, and this was led by Hakon

33923
00:05:52,250 --> 00:05:52,940
Wium.

33924
00:05:53,930 --> 00:05:56,180
How come?

33925
00:05:56,420 --> 00:05:59,980
How come by how come?

33926
00:05:59,990 --> 00:06:04,250
And he's basically the father of the cascading style sheet.

33927
00:06:04,250 --> 00:06:11,540
And what this recommendation allows us to do is to allow us to attach styles such as font colors and

33928
00:06:11,540 --> 00:06:15,380
spacing to our HTML documents.

33929
00:06:15,500 --> 00:06:22,890
And this is the breakthrough that allowed us to separate our styling from our content.

33930
00:06:23,010 --> 00:06:31,110
And as in many different situations, a separation of concerns so that somebody is responsible for putting

33931
00:06:31,140 --> 00:06:36,750
together the car headlights and somebody else is responsible for dealing with the wheels rather than

33932
00:06:36,750 --> 00:06:39,590
one person making an entire car.

33933
00:06:39,600 --> 00:06:46,710
This kind of modularity, as you'll see in coming lessons, is super important, not just in manufacturing

33934
00:06:46,710 --> 00:06:49,830
and in real life, but also in programming.

33935
00:06:50,100 --> 00:06:54,450
If you want to see what CSS is able to achieve.

33936
00:06:54,540 --> 00:06:57,490
I've built this website for you to be able to do that.

33937
00:06:57,510 --> 00:07:05,010
If you go over to App Brewery, Github.io and then forward Slash, just add CSS, you should be able

33938
00:07:05,010 --> 00:07:06,540
to see this website.

33939
00:07:06,540 --> 00:07:13,020
And when you first go over there, you'll see that it's just a very, very simple website, pretty bland.

33940
00:07:13,050 --> 00:07:15,210
All it's got is HTML.

33941
00:07:15,210 --> 00:07:22,710
And now if we go ahead and press this button to toggle and turn on CSS, then you'll see the entire

33942
00:07:22,710 --> 00:07:26,300
website transform and look way more beautiful.

33943
00:07:26,340 --> 00:07:30,840
It's now got different fonts, different colors and different layouts.

33944
00:07:30,840 --> 00:07:39,270
But you'll notice that if you go ahead and right click and view the page source in these two versions,

33945
00:07:39,270 --> 00:07:41,580
the HTML does not change at all.

33946
00:07:41,580 --> 00:07:47,320
So let's toggle our back and then let's go ahead and view page source again.

33947
00:07:47,340 --> 00:07:49,710
You'll see that in these two versions.

33948
00:07:49,710 --> 00:07:56,730
As you see me switch it on screen, nothing changes in our index.html.

33949
00:07:56,820 --> 00:08:02,220
The only thing that is different is the CSS that gets added.

33950
00:08:02,250 --> 00:08:08,910
Now don't worry too much about the script tags down here or how we've created our buttons.

33951
00:08:08,910 --> 00:08:12,870
We're going to learn all of that later on when we learn JavaScript.

33952
00:08:13,050 --> 00:08:19,890
But I created this website so that you can play around with toggling the CSS on and off to see how it

33953
00:08:19,890 --> 00:08:27,000
can transform a simple HTML website without touching any of the code inside the HTML.

33954
00:08:27,000 --> 00:08:34,260
And all that we're doing is adding style to our website in a completely separate language.

33955
00:08:34,289 --> 00:08:36,059
The cascading style sheet.

33956
00:08:36,270 --> 00:08:42,570
To learn more about how CSS works, head over to the next lesson where we're going to get started styling

33957
00:08:42,570 --> 00:08:43,740
up a website.


33958
00:00:00,320 --> 00:00:07,310
Now, I hope you had to play around with this example website where you could toggle the CSS on and

33959
00:00:07,340 --> 00:00:08,029
off.

33960
00:00:08,300 --> 00:00:13,880
How exactly did I add CSS to this plain HTML website?

33961
00:00:14,270 --> 00:00:17,840
Well, that is what we're going to be learning about in this lesson.

33962
00:00:18,200 --> 00:00:23,420
There's three ways of adding CSS into an HTML website.

33963
00:00:23,720 --> 00:00:28,670
Inline, internal and external.

33964
00:00:28,940 --> 00:00:34,580
We're going to be exploring all three of these different styles of adding CSS, and I'm going to show

33965
00:00:34,580 --> 00:00:39,380
you why they're important and in which situations you would use which one.

33966
00:00:39,800 --> 00:00:44,840
Now, the first one is the inline style of adding CSS.

33967
00:00:44,870 --> 00:00:51,170
As the name suggests, it goes into the same line as a particular HTML element.

33968
00:00:51,260 --> 00:00:58,130
So in this case, you can see we've got an HTML open tag and an HTML closing tag.

33969
00:00:58,280 --> 00:01:04,640
Now, we know from learning about HTML boilerplate, this is an element that goes into all of our HTML

33970
00:01:04,640 --> 00:01:05,570
documents.

33971
00:01:05,690 --> 00:01:08,240
There's nothing special about this particular element.

33972
00:01:08,270 --> 00:01:12,830
It just tells the browser that this file is made up of HTML.

33973
00:01:13,220 --> 00:01:21,020
Now, in this case, the inline CSS goes into the opening tag of the HTML.

33974
00:01:21,050 --> 00:01:24,110
This is where the CSS exists.

33975
00:01:24,140 --> 00:01:27,830
It's in the same line as the HTML tag.

33976
00:01:28,640 --> 00:01:34,520
What the inline CSS looks like is something like this.

33977
00:01:34,940 --> 00:01:44,990
You've got a style attribute, which is an attribute that is globally available to all tags, not just

33978
00:01:45,290 --> 00:01:47,390
HTML, but anything else.

33979
00:01:47,420 --> 00:01:51,440
Image or break or anything you can think of.

33980
00:01:51,470 --> 00:01:54,200
You can add the style attribute to it.

33981
00:01:54,470 --> 00:01:57,340
As we know, normally attributes look like this.

33982
00:01:57,350 --> 00:02:01,530
They have a name of the attribute.

33983
00:02:01,560 --> 00:02:04,440
Then we add the equal sign.

33984
00:02:04,440 --> 00:02:09,180
And then finally we add a value for the attribute.

33985
00:02:09,930 --> 00:02:14,400
In this value section is where we add our CSS code.

33986
00:02:14,700 --> 00:02:18,210
Our CSS code is broken down like this.

33987
00:02:18,240 --> 00:02:23,610
The first part of it is the property that you want to change.

33988
00:02:24,810 --> 00:02:31,650
And the second part is the value of that property that you want to set it to.

33989
00:02:32,400 --> 00:02:38,130
So in this case, what we're trying to do is to set our website's background to blue.

33990
00:02:38,250 --> 00:02:46,230
And if I go ahead and run this code and load it up in a browser, you would simply see a website that

33991
00:02:46,230 --> 00:02:47,700
has a blue background.

33992
00:02:47,880 --> 00:02:51,600
And this is achieved using our inline CSS.

33993
00:02:52,300 --> 00:03:01,320
Inline elements are really useful for adding CSS style to just a single element on your HTML page.

33994
00:03:01,330 --> 00:03:07,720
But normally that's quite cumbersome because as you can imagine, there's tons of different HTML elements.

33995
00:03:07,750 --> 00:03:13,120
If you have more and more of them and you wanted them to share similar styles, then you would have

33996
00:03:13,120 --> 00:03:19,720
to add these inline styles to each and every single one of them, which is pretty tedious.

33997
00:03:19,750 --> 00:03:25,720
It's not normally recommended to use inline styles in your entire document.

33998
00:03:25,720 --> 00:03:33,100
It's only for specific sections or when you're testing or when you only want it in one single element

33999
00:03:33,100 --> 00:03:35,860
or one line in your HTML document.

34000
00:03:36,190 --> 00:03:42,100
Now, the second way you can add CSS is through what's called internal CSS.

34001
00:03:42,250 --> 00:03:48,400
Now this is done through a special HTML tag called the Style Element.

34002
00:03:48,430 --> 00:03:52,550
We've got an open style tag and a closing style tag.

34003
00:03:52,550 --> 00:03:58,610
And in between those two lines is where we add all of our CSS.

34004
00:03:58,760 --> 00:04:02,060
All of this is our CSS.

34005
00:04:02,540 --> 00:04:08,140
The CSS looks a little bit different from what you saw previously, right?

34006
00:04:08,150 --> 00:04:11,480
Because previously all we had was this line.

34007
00:04:11,510 --> 00:04:14,750
Now, in this case, we've got something a little bit extra here.

34008
00:04:14,780 --> 00:04:16,100
Why is that?

34009
00:04:16,130 --> 00:04:26,060
Well, this is because last time when we had the CSS rule, we had it inline inside a particular element.

34010
00:04:26,060 --> 00:04:32,420
So we said for this HTML element, we want to apply a background color.

34011
00:04:33,020 --> 00:04:40,790
Now, in this case, it's a little bit different because our internal style can apply to anywhere within

34012
00:04:40,790 --> 00:04:43,010
the same HTML document.

34013
00:04:43,010 --> 00:04:49,400
So it could go into any of these elements, the HTML or the head or anything that you've got coming

34014
00:04:49,400 --> 00:04:50,930
up later on as well.

34015
00:04:51,110 --> 00:05:00,040
What we have to add in addition often is what we call a selector, and this selector comes before a

34016
00:05:00,040 --> 00:05:07,300
set of curly braces and then the CSS goes in between these two sets of curly braces.

34017
00:05:07,510 --> 00:05:15,310
Now, when I say in between a set of curly braces, you have to imagine it a little bit like this.

34018
00:05:15,310 --> 00:05:19,450
This is the opening curly brace and this is the closing curly brace.

34019
00:05:19,450 --> 00:05:28,090
And if you had it all on one line, then it would look something like this with your CSS going in between

34020
00:05:28,090 --> 00:05:29,780
on multiple lines.

34021
00:05:29,800 --> 00:05:34,030
That's why we open and close them on separate lines.

34022
00:05:34,030 --> 00:05:38,620
But if you imagine it as one line, then it would look something like this.

34023
00:05:39,550 --> 00:05:49,660
Our internal styling can apply to anywhere in our HTML document, and inside we can target or select

34024
00:05:49,660 --> 00:05:51,730
as many elements as we want.

34025
00:05:51,760 --> 00:05:59,450
We could say let's apply the background red to the HTML, and when this code is rendered in the browser,

34026
00:05:59,450 --> 00:06:03,500
you will see the background of the entire HTML turn red.

34027
00:06:03,950 --> 00:06:10,700
Internal styles are really useful for applying it only to one HTML document.

34028
00:06:10,700 --> 00:06:18,200
As you can see, this style and any code that goes in there is limited to the HTML that it sits in.

34029
00:06:18,200 --> 00:06:25,690
So it means if you have a multi-page website, then you probably shouldn't be using the internal style.

34030
00:06:25,700 --> 00:06:31,610
Instead you should be using something called an external CSS styling.

34031
00:06:31,700 --> 00:06:39,290
Now the biggest difference between the external and the internal and inline styles is that this actually

34032
00:06:39,290 --> 00:06:47,900
lives in a completely separate file, which you'll normally see as Styles.css or Main.css or anything

34033
00:06:47,900 --> 00:06:57,290
that has a dot CSS extension inside this CSS file is where we write our CSS rules.

34034
00:06:57,290 --> 00:07:04,430
So we've got our selector, we've got our property and we've got values and we can make many, many

34035
00:07:04,430 --> 00:07:06,350
of these inside this file.

34036
00:07:06,500 --> 00:07:12,950
Now how do we link up the style sheet file with our index.html?

34037
00:07:13,130 --> 00:07:22,970
Well, inside the head section of our HTML, we would add a link element which you'll notice is a self-closing

34038
00:07:23,000 --> 00:07:23,390
tag.

34039
00:07:23,390 --> 00:07:25,850
So it doesn't need a closing tag.

34040
00:07:25,940 --> 00:07:29,000
And we have two things that we normally write.

34041
00:07:29,030 --> 00:07:38,510
One which is a relationship which refers to what is the role of this thing that we're linking to?

34042
00:07:38,840 --> 00:07:45,320
And the second thing is the href, which is where is it located?

34043
00:07:45,890 --> 00:07:51,500
In this case, we're saying it's in the same directory and it's inside a file called Styles.

34044
00:07:52,170 --> 00:07:56,430
CSS, which points to this file right here.

34045
00:07:56,430 --> 00:08:04,590
And when we go ahead and run this and show it in the browser, you'll see it turns our HTML background

34046
00:08:04,590 --> 00:08:06,810
to a green color.

34047
00:08:06,930 --> 00:08:13,320
And this style of external CSS is what's used most commonly in web development.

34048
00:08:13,320 --> 00:08:16,710
And this is what we're going to be focusing on most of the time.

34049
00:08:16,710 --> 00:08:24,540
But it's important to be aware of the other two styles the inline, the internal, because you'll see

34050
00:08:24,540 --> 00:08:27,980
it out there in the wild in other people's CSS code.

34051
00:08:27,990 --> 00:08:34,169
So remember, inline is really useful when you only want to target a single element.

34052
00:08:34,860 --> 00:08:40,590
And internal is really useful when you only want to target a single web page.

34053
00:08:41,730 --> 00:08:49,290
But for most cases and when you have a multi-page website, then what you're going to need is the external

34054
00:08:49,290 --> 00:08:56,950
way of adding CSS through the use of a separate file, which will be called something, something dot

34055
00:08:56,980 --> 00:09:05,170
CSS, and it's inside this file where you're going to be writing the CSS code that can target an entire

34056
00:09:05,170 --> 00:09:09,070
website with all of its multiple web pages.

34057
00:09:09,640 --> 00:09:14,950
So these are the three ways that you can add CSS to your HTML documents.

34058
00:09:14,950 --> 00:09:20,500
And don't worry, we're going to be practicing this and all of its forms many, many times so that you

34059
00:09:20,500 --> 00:09:22,660
understand how it works.

34060
00:09:23,290 --> 00:09:30,340
Let's try an exercise and see how to add CSS in various different ways to our HTML file.

34061
00:09:31,430 --> 00:09:31,790
All right.

34062
00:09:31,790 --> 00:09:38,930
So once you've downloaded and extracted the project file and open it inside vs code, you should see

34063
00:09:38,930 --> 00:09:40,250
this folder.

34064
00:09:40,250 --> 00:09:45,880
And here notice that our five files that have already been created for you.

34065
00:09:45,890 --> 00:09:52,190
And in this exercise there is a little bit of revision about creating multiple web pages about file

34066
00:09:52,190 --> 00:09:52,820
paths.

34067
00:09:52,820 --> 00:10:00,800
But more importantly, we want you to practice using the three different ways of adding CSS inline,

34068
00:10:01,100 --> 00:10:03,800
internal and external.

34069
00:10:03,800 --> 00:10:10,700
So starting inside index.html, the first thing I want you to do is to create three links to the three

34070
00:10:10,700 --> 00:10:12,260
different web pages.

34071
00:10:12,650 --> 00:10:16,040
This one, this one and this one.

34072
00:10:16,040 --> 00:10:21,140
And once you've done that, then you can go inside each of those web pages.

34073
00:10:21,140 --> 00:10:27,380
So starting with the inline and then internal external, and you're going to follow the instruction

34074
00:10:27,380 --> 00:10:29,040
that the H one tells you to.

34075
00:10:29,060 --> 00:10:38,010
So in this case, we want to use inline styling in order to style this h one in blue and then you get

34076
00:10:38,010 --> 00:10:44,130
to go to the internal and do the same thing, but this time using internal styling and styling the H

34077
00:10:44,130 --> 00:10:52,800
one in red and then finally using external styling using this style.css file and styling the h one in

34078
00:10:52,800 --> 00:10:53,610
green.

34079
00:10:53,700 --> 00:10:59,430
If you want to take a look at what the final outcome will look like, you can go into the solution folder,

34080
00:10:59,430 --> 00:11:05,670
right click on the solution, dot HTML and show preview and then make sure that you collapse this solution

34081
00:11:05,670 --> 00:11:06,030
folder.

34082
00:11:06,030 --> 00:11:10,920
Because having all of it out, two versions of each file is very confusing.

34083
00:11:10,920 --> 00:11:16,290
So I recommend just collapsing that folder so you don't get confused and this is what you're aiming

34084
00:11:16,290 --> 00:11:19,380
for on the index.html, which is the home page.

34085
00:11:19,380 --> 00:11:22,320
We've got an H one and then we've got three links.

34086
00:11:22,320 --> 00:11:28,260
And if we click on each of these, you can see they've got an H1 that says style me in blue style,

34087
00:11:28,260 --> 00:11:34,740
me in red and green and we're going to achieve that using the three different ways of adding CSS.

34088
00:11:34,920 --> 00:11:41,190
Once you're ready, go ahead and download the starting files and give this challenge a go.

34089
00:11:41,550 --> 00:11:42,750
Pause the video now.

34090
00:11:45,230 --> 00:11:45,560
All right.

34091
00:11:45,560 --> 00:11:46,760
So how did that go?

34092
00:11:46,790 --> 00:11:51,620
I'm going to run through the solution code with you to explain some of the things that you would need

34093
00:11:51,620 --> 00:11:53,420
to do to complete this challenge.

34094
00:11:53,450 --> 00:11:57,770
The first thing we said was to style the home page.

34095
00:11:57,770 --> 00:12:02,650
So we added in three anchor tags, which is how we create links.

34096
00:12:02,660 --> 00:12:11,300
And once we did that, we were able to use the href of each of the anchor tags in order to link to the

34097
00:12:11,300 --> 00:12:13,550
relevant web page.

34098
00:12:13,580 --> 00:12:22,130
The first one links to the inline web page, inline HTML, internal external, and we use the dot slash

34099
00:12:22,130 --> 00:12:26,600
notation in order to reach within the current folder.

34100
00:12:26,600 --> 00:12:29,630
So solution dot html lives inside solution.

34101
00:12:29,630 --> 00:12:34,910
And in this case, in order to get to inline dot html, we use the dot slash to get to this folder and

34102
00:12:34,910 --> 00:12:39,800
then we forward slash to go to inline dot html right here.

34103
00:12:41,120 --> 00:12:48,720
Now once you've created your three links, the next stage is to go into the first web page inline and

34104
00:12:48,720 --> 00:12:54,390
here we want to style the H1 using CSS, but adding it inline.

34105
00:12:54,510 --> 00:13:03,840
As I said, it's in the literal line of the H1 element, so it only applies to this H1 element and we've

34106
00:13:03,840 --> 00:13:12,900
added it in right here saying that the style should be set so that the color of this text is blue.

34107
00:13:13,530 --> 00:13:23,190
And remember that the inline style goes in the opening tag of the element that you want to target.

34108
00:13:24,630 --> 00:13:34,470
The next one is internal, so we add internal styling, usually by putting it inside the head section.

34109
00:13:34,470 --> 00:13:41,790
So between the open and closing tags of the head element, and this is a convention that most developers

34110
00:13:41,790 --> 00:13:46,770
will stick to, although this will work no matter where you put the style element.

34111
00:13:46,920 --> 00:13:54,240
So here we've got an open and closing style tag and in between we've added in our CSS.

34112
00:13:54,240 --> 00:14:01,590
So we're saying that our selector is going to select all the H1 on this page, of which there is only

34113
00:14:01,590 --> 00:14:05,550
one, and we're going to change its text color to red.

34114
00:14:05,880 --> 00:14:11,400
And finally we've got the final version, which is the external HTML.

34115
00:14:11,400 --> 00:14:19,410
And we do this by creating a link element right again, inside the head section of your website.

34116
00:14:19,440 --> 00:14:27,450
We establish the relationship is we're setting up a style sheet and then we provide a href to the location

34117
00:14:27,450 --> 00:14:33,840
where our stylesheet is located, which is in the current directory, and then it's in a file called

34118
00:14:33,840 --> 00:14:35,310
Style.css.

34119
00:14:35,310 --> 00:14:38,310
So we can see that right here.

34120
00:14:39,030 --> 00:14:46,950
And inside here we've again targeted the H1 and we've set the color to green and all of that together

34121
00:14:46,950 --> 00:14:55,470
creates these different web pages in our multi-page website with the code that sets the style in three

34122
00:14:55,470 --> 00:14:56,670
different ways.

34123
00:14:56,670 --> 00:14:58,270
So did you get that right?

34124
00:14:58,290 --> 00:15:04,710
If you had any issues at all, be sure to go back into your code and fix anything that was wrong and

34125
00:15:04,710 --> 00:15:09,030
make sure that you've understood the three different ways of adding CSS.

34126
00:15:09,510 --> 00:15:14,910
In the next lesson, we're going to learn more about the different selectors that we can use to select

34127
00:15:14,910 --> 00:15:17,220
different parts of our HTML file.

34128
00:15:17,220 --> 00:15:19,920
So for all of that and more, I'll see you there.


34129
00:00:00,470 --> 00:00:01,070
Hi guys.

34130
00:00:01,070 --> 00:00:04,280
Welcome to another lesson on CSS.

34131
00:00:04,310 --> 00:00:11,570
In this lesson, we're going to be talking about CSS selectors, and this is going to help us choose

34132
00:00:11,570 --> 00:00:14,150
where to apply our CSS.

34133
00:00:14,480 --> 00:00:21,220
We've seen previously that we can create CSS rules by simply specifying two things.

34134
00:00:21,230 --> 00:00:31,400
One is the property we want to change and after a colon we get to specify the value to change that property

34135
00:00:31,400 --> 00:00:31,990
to.

34136
00:00:32,210 --> 00:00:38,900
In this case, what we're saying is we want to change the text color into a blue color.

34137
00:00:39,320 --> 00:00:45,110
Now we've come across some of these rules already and I'll be showing you in a later lesson in the next

34138
00:00:45,110 --> 00:00:48,230
section how to find out more about these rules.

34139
00:00:48,230 --> 00:00:54,680
But more importantly, in this lesson, what I want to talk about is the part outside of these rules.

34140
00:00:54,680 --> 00:00:57,860
It's the part that comes right here.

34141
00:00:57,860 --> 00:01:02,280
And this is known as a CSS selector.

34142
00:01:02,550 --> 00:01:04,769
What is a CSS selector?

34143
00:01:04,769 --> 00:01:14,190
Well, it's the part that selects the HTML in order to apply whichever rules go in between these curly

34144
00:01:14,190 --> 00:01:15,120
braces.

34145
00:01:15,330 --> 00:01:20,910
How do we know which part of our HTML file to make the text color blue?

34146
00:01:20,940 --> 00:01:25,650
Well, we look at this part and we can see we're targeting the H1.

34147
00:01:25,740 --> 00:01:30,750
Now, this style of selector is one of the simplest CSS selectors.

34148
00:01:30,780 --> 00:01:32,640
It's called an element selector.

34149
00:01:32,640 --> 00:01:38,070
And all it does is it selects a particular HTML tag.

34150
00:01:38,070 --> 00:01:42,000
So in this case it's targeting all h ones.

34151
00:01:42,000 --> 00:01:49,710
If your HTML is any good, you should only have a single H1, but it will be different for other tags.

34152
00:01:49,710 --> 00:01:57,150
If you had anchor tags or if you had paragraph tags or h twos or any of the other HTML tags.

34153
00:01:57,150 --> 00:02:07,430
Then when you select each of these in your CSS, it means apply to all elements that have that particular

34154
00:02:07,430 --> 00:02:08,240
tag.

34155
00:02:08,360 --> 00:02:12,260
Let's see this in action here.

34156
00:02:12,260 --> 00:02:13,910
I've got two files.

34157
00:02:13,910 --> 00:02:18,890
One is the index.html and another is our stylesheet.

34158
00:02:18,980 --> 00:02:26,450
And inside our index.html we've just got three H twos, red, green and blue.

34159
00:02:26,450 --> 00:02:30,140
And when displayed or run they will look like this.

34160
00:02:30,140 --> 00:02:31,520
Three headings.

34161
00:02:31,520 --> 00:02:40,640
Now if we go ahead and add a little bit of CSS and target our H two element, in this case we're using

34162
00:02:40,640 --> 00:02:45,260
an element selector which is simply the name of the tag.

34163
00:02:45,260 --> 00:02:50,870
And then after the curly braces, we can define whichever CSS rules we want.

34164
00:02:50,900 --> 00:02:54,590
In this case, turning the color of the text red.

34165
00:02:54,680 --> 00:03:00,230
If we go ahead and run this code, I want you to imagine what you expect to happen.

34166
00:03:00,230 --> 00:03:03,010
Which of these texts will turn red?

34167
00:03:03,030 --> 00:03:04,950
So let's go and run the code.

34168
00:03:04,950 --> 00:03:10,920
And once this change is incorporated, this is what we see Red, green and blue all turn red because

34169
00:03:10,920 --> 00:03:13,020
they are all h twos.

34170
00:03:13,020 --> 00:03:18,750
And this element selector here selects all of the h twos turning them red.

34171
00:03:18,750 --> 00:03:20,670
So pretty simple so far.

34172
00:03:20,790 --> 00:03:25,710
Now let's look at another type of selector, a class selector.

34173
00:03:25,770 --> 00:03:30,540
This requires a special symbol, which is the dot.

34174
00:03:30,570 --> 00:03:39,750
And then after that dot immediately with no spaces right here, then you have the name of the class.

34175
00:03:39,750 --> 00:03:45,150
So this is the actual name of the class that we're selecting.

34176
00:03:45,150 --> 00:03:47,670
In this case, I've called it Red dash heading.

34177
00:03:47,790 --> 00:03:52,890
And then after the curly braces again, we have the same CSS rule to apply.

34178
00:03:52,920 --> 00:03:55,050
Change the text color to red.

34179
00:03:55,830 --> 00:03:58,230
Now, what is a class?

34180
00:03:58,230 --> 00:04:05,490
Well, a class is something that we can add as an attribute to any HTML element.

34181
00:04:05,880 --> 00:04:14,130
And this attribute is kind of like saying, well, let's group these particular elements into a class.

34182
00:04:14,130 --> 00:04:21,779
So it's used for grouping elements in your HTML file to apply the same CSS rule to all of them.

34183
00:04:21,779 --> 00:04:29,910
So in this case, we've only got one H2 that has a class and the class is set to red text.

34184
00:04:30,090 --> 00:04:39,390
Now when I go ahead and write some CSS and I target the class, which remember requires the DOT and

34185
00:04:39,390 --> 00:04:45,420
then the name of the class, which is this, and it has to be spelled exactly the same.

34186
00:04:45,420 --> 00:04:47,760
These two cannot have any differences.

34187
00:04:47,760 --> 00:04:53,970
So you can't have, for example, a capital R or a capital T, This will not work.

34188
00:04:54,510 --> 00:04:59,820
Instead, what we have is our class selector and our CSS rule.

34189
00:05:00,460 --> 00:05:07,900
What do you expect will happen when the code is run in the browser when this CSS gets applied?

34190
00:05:07,930 --> 00:05:10,360
Well, it'll look like this.

34191
00:05:10,390 --> 00:05:16,990
It selects the only element that has that class and turns the text color red.

34192
00:05:17,470 --> 00:05:22,330
Now what if we had multiple elements with the same class?

34193
00:05:22,330 --> 00:05:27,640
So here you can see we've actually got two different types of HTML elements.

34194
00:05:27,670 --> 00:05:32,800
One is an H2 and another is a paragraph element.

34195
00:05:32,920 --> 00:05:38,470
Even though these two are completely different elements, we can tag them using the same class.

34196
00:05:38,470 --> 00:05:43,900
We're saying the H2 should have the class of red text, as should the paragraph.

34197
00:05:44,020 --> 00:05:54,070
Now if we write our CSS and we select again all the classes that have red text, then what do you think

34198
00:05:54,070 --> 00:05:55,110
will happen?

34199
00:05:55,120 --> 00:06:01,850
Well, in this case it doesn't matter if it's an H2 or if it's a paragraph.

34200
00:06:01,850 --> 00:06:08,870
As long as they've got that class, they've been converted into red text and the style has been applied

34201
00:06:08,870 --> 00:06:11,900
to these two HTML elements.

34202
00:06:12,380 --> 00:06:16,520
As you can see, the class selector is really versatile.

34203
00:06:16,520 --> 00:06:22,430
It allows you to group different parts of your HTML file into having the same styling.

34204
00:06:22,430 --> 00:06:28,010
And this can be really, really useful on multi-page websites with lots of different elements.

34205
00:06:28,010 --> 00:06:32,840
And you don't just want to select a particular type of HTML element.

34206
00:06:33,650 --> 00:06:39,800
The next one I want to show you is called the ID Selector and the ID Selector.

34207
00:06:39,800 --> 00:06:47,300
It has its own special symbol, which is a pound sign or a hash tag, and you put that pound sign and

34208
00:06:47,300 --> 00:06:57,320
again, no spaces in between the pound sign and the actual name of the ID, and this selects all elements

34209
00:06:57,320 --> 00:07:00,590
with a particular ID attribute.

34210
00:07:00,590 --> 00:07:07,190
This is what an ID attribute looks like, it's simply the words ID, and then after the equal sign,

34211
00:07:07,190 --> 00:07:14,870
we can give it a particular ID and it works similarly to the class selector, because if I go ahead

34212
00:07:14,870 --> 00:07:24,770
and select this ID of Main and I apply these changes, then you can see it will add the styling and

34213
00:07:24,770 --> 00:07:28,520
apply it to the only element that has that ID.

34214
00:07:29,120 --> 00:07:35,160
So then what is the difference between the ID and the class selector?

34215
00:07:35,180 --> 00:07:44,390
Well, the class selector can be applied to many elements, whereas the ID should be only applied to

34216
00:07:44,390 --> 00:07:52,220
one element in a single HTML file in a single HTML file like our index.html.

34217
00:07:52,250 --> 00:07:58,490
There should only be one ID of this particular name main.

34218
00:07:58,490 --> 00:08:04,090
It should be completely unique and this is the difference.

34219
00:08:04,090 --> 00:08:13,840
If you had say three h2's you can't select all of them using the element selector like this because

34220
00:08:13,840 --> 00:08:17,530
that would select all of the h2's.

34221
00:08:17,560 --> 00:08:27,610
Instead you apply the ID to the unique element that you want to apply your style to and it selects it

34222
00:08:27,610 --> 00:08:29,590
in the HTML file.

34223
00:08:30,310 --> 00:08:38,530
Again, remember, IDs are unique only one element per file and classes you can put on as many elements

34224
00:08:38,530 --> 00:08:40,690
as you like to group them together.

34225
00:08:41,440 --> 00:08:49,060
Another way that you can select parts of your HTML is using the attribute selector so we know that we

34226
00:08:49,060 --> 00:08:54,850
can create a HTML tag and add as many attributes as we like.

34227
00:08:54,850 --> 00:09:09,670
So we had attributes such as ID or class or draggable or source for the images or RF for the anchor

34228
00:09:09,670 --> 00:09:17,110
tags or alt for the images and a whole bunch more that will get to see in the future as well.

34229
00:09:17,380 --> 00:09:26,020
Now we can select these elements that have particular attributes or particular attributes values by

34230
00:09:26,020 --> 00:09:27,910
using this notation.

34231
00:09:27,940 --> 00:09:39,010
Notice the first part here is the HTML element that you want to select, and then using a set of square

34232
00:09:39,010 --> 00:09:41,380
brackets, these ones right here.

34233
00:09:41,410 --> 00:09:46,390
Then inside we can include the attribute that you want to select.

34234
00:09:46,630 --> 00:09:57,640
What this entire selector says is select all paragraph elements with the attribute draggable and then

34235
00:09:57,640 --> 00:09:59,680
apply this CSS style.

34236
00:09:59,820 --> 00:10:00,270
To it.

34237
00:10:00,750 --> 00:10:03,860
What does this look like in HTML code?

34238
00:10:03,870 --> 00:10:10,680
Well, here we've got three paragraph tags, but only one of them has the attribute draggable set to

34239
00:10:10,710 --> 00:10:11,370
true.

34240
00:10:11,490 --> 00:10:21,780
If we go ahead and apply the CSS style where we select the paragraph element with the draggable attribute

34241
00:10:21,780 --> 00:10:31,020
and give it this CSS style, then when this CSS is applied to our HTML, this is what will happen.

34242
00:10:31,020 --> 00:10:37,260
It will find the unique paragraph tag with that particular attribute.

34243
00:10:37,290 --> 00:10:41,130
Now you can go one step further with attribute selectors.

34244
00:10:41,310 --> 00:10:47,980
You can actually select the value of the attribute that you want to apply your CSS to.

34245
00:10:48,000 --> 00:10:54,840
So in this case, you can see we've got all three paragraphs with the same attribute.

34246
00:10:54,870 --> 00:10:59,070
All the draggable attributes are set, but the set to different values.

34247
00:10:59,170 --> 00:11:03,320
So the first one is set to true and the other two are set to false.

34248
00:11:03,340 --> 00:11:07,670
So now we can actually write our CSS like this.

34249
00:11:07,690 --> 00:11:16,470
We can select all the paragraph elements which has an attribute of draggable set an equal to false.

34250
00:11:16,480 --> 00:11:25,330
And what this selector is going to do all of this is it's going to look inside our file and it's going

34251
00:11:25,330 --> 00:11:35,590
to find these two paragraph elements in order to select and apply the CSS when this CSS is applied instead

34252
00:11:35,590 --> 00:11:43,540
of the first one, which previously was selected, we actually have the other two selected and turned

34253
00:11:43,540 --> 00:11:44,290
red.

34254
00:11:44,620 --> 00:11:51,250
This is again a really versatile way of applying CSS, but as you can see, it selects on different

34255
00:11:51,250 --> 00:11:53,460
things than what we've seen before.

34256
00:11:53,470 --> 00:11:58,990
The element, the ID or the class selectors, the final selector.

34257
00:11:58,990 --> 00:12:01,960
I want to talk about is the universal selector.

34258
00:12:01,960 --> 00:12:03,580
And it's really simple.

34259
00:12:03,580 --> 00:12:05,470
It's just an asterix.

34260
00:12:05,470 --> 00:12:08,740
And after the Asterix you have your CSS rules.

34261
00:12:08,740 --> 00:12:12,460
But what this means is it means select all.

34262
00:12:12,910 --> 00:12:19,240
And when you apply this, it doesn't matter what class you've got, what ID, what attribute set, which

34263
00:12:19,240 --> 00:12:20,320
different elements.

34264
00:12:20,350 --> 00:12:27,610
If you select all, it's going to apply the style to everything where the stylesheet is active.

34265
00:12:27,610 --> 00:12:31,540
And this is probably one of the simplest selectors to understand.

34266
00:12:31,900 --> 00:12:38,530
So now that we've seen all the different ways that we can apply our CSS to different parts of the HTML

34267
00:12:38,560 --> 00:12:46,000
using selectors, let's try an exercise where we experiment hands on and see if you've understood all

34268
00:12:46,000 --> 00:12:47,830
the concepts in this lesson.

34269
00:12:48,130 --> 00:12:55,600
Now, once you've downloaded and extracted the starting files and have it open in vs code, then I want

34270
00:12:55,600 --> 00:13:02,350
you to go into the index.html file and here you'll notice a couple of things.

34271
00:13:02,350 --> 00:13:09,400
Firstly, we've already set up the stylesheet for you, so we've got an external stylesheet set up using

34272
00:13:09,400 --> 00:13:14,590
a link and it's pointing to this file right here, the Style.css.

34273
00:13:15,100 --> 00:13:22,240
The part that we want you to do is to revise what you've learned about CSS selectors.

34274
00:13:22,240 --> 00:13:26,830
And I've set up five to do's for you and I want you to do them in order.

34275
00:13:26,830 --> 00:13:31,120
So start from one and then go to two and continue downwards.

34276
00:13:31,390 --> 00:13:37,000
What this is going to involve is for you to write actual CSS code.

34277
00:13:37,030 --> 00:13:44,650
I don't want you to actually touch anything inside the index.html because I don't want you to change

34278
00:13:44,650 --> 00:13:48,970
any of the HTML with the classes or values or IDs.

34279
00:13:48,970 --> 00:13:51,340
I want you to leave it exactly as it is.

34280
00:13:51,370 --> 00:13:57,280
And instead your job is to write the selectors in the style dot CSS.

34281
00:13:57,430 --> 00:14:04,660
Notice when you open up the style.css there's a little bit of CSS already here for you and I want you

34282
00:14:04,660 --> 00:14:05,770
to leave this alone.

34283
00:14:05,800 --> 00:14:07,540
Don't touch it, don't change it.

34284
00:14:07,540 --> 00:14:13,780
It's important so that the final styling looks right when we haven't covered all of the different CSS

34285
00:14:13,780 --> 00:14:15,160
styling rules.

34286
00:14:15,160 --> 00:14:19,180
In the next section, we're going to be talking about all of this in a lot more detail.

34287
00:14:19,180 --> 00:14:22,480
Where to find out about different rules and how to use them.

34288
00:14:22,480 --> 00:14:27,640
But for now, I want you to ignore this part and write your CSS below.

34289
00:14:28,240 --> 00:14:34,780
Similarly, I'm not expecting you to know which CSS rules to use because I'll provide all the rules

34290
00:14:34,780 --> 00:14:36,730
for you in to do one.

34291
00:14:36,730 --> 00:14:42,640
I want you to change the text color to red and to do two, I want you to change the font size or change

34292
00:14:42,640 --> 00:14:48,220
the text align and this is all going to be provided for you completely formatted.

34293
00:14:48,220 --> 00:14:53,590
So it's got the property, the colon and the value I want you to set it to.

34294
00:14:53,620 --> 00:14:59,710
Now, the part that you need to think about and where your challenge comes in is how to select.

34295
00:14:59,940 --> 00:15:01,080
The correct paths.

34296
00:15:01,080 --> 00:15:07,860
So how to select all the paragraphs, for example, or how to select parts with a class of this or an

34297
00:15:07,860 --> 00:15:09,240
ID of this?

34298
00:15:09,240 --> 00:15:10,620
So that is the challenge.

34299
00:15:10,620 --> 00:15:14,040
And this is what you need to do in this exercise.

34300
00:15:14,490 --> 00:15:21,540
And if you take a look at the preview right now, it's very plain, all black, no styling at all.

34301
00:15:21,570 --> 00:15:27,630
But if you take a look at the goal PNG, you'll see this is what the final outcome will look like.

34302
00:15:27,630 --> 00:15:33,330
It's going to be centered, it's going to have different colors and you can almost even use this website

34303
00:15:33,330 --> 00:15:42,720
as a revision tool because each of the bullet points are linked to a particular style of CSS selection.

34304
00:15:43,020 --> 00:15:50,820
This hopefully will be quite a fun challenge for you and if you get stuck, be sure to rewind a little

34305
00:15:50,850 --> 00:15:56,280
bit in the video to see how to do the different things as seen in the previous examples.

34306
00:15:56,280 --> 00:16:01,750
And I want you to really give it a good go before you continue and watch the solution.

34307
00:16:02,410 --> 00:16:03,460
Pause the video now.

34308
00:16:03,460 --> 00:16:04,450
Give this a go.

34309
00:16:09,440 --> 00:16:09,860
All right.

34310
00:16:09,860 --> 00:16:14,210
So the first thing we're going to do is we're going to pull up our preview to make sure we are doing

34311
00:16:14,210 --> 00:16:15,470
the right things.

34312
00:16:15,470 --> 00:16:23,660
And to begin the first to do is to set the CSS for all paragraph tags to this color.

34313
00:16:23,660 --> 00:16:29,750
Now, remember, I said we're not writing any code or changing anything in the HTML side.

34314
00:16:29,750 --> 00:16:37,730
We're doing it all in our CSS, but it's still really important that we look at what's in our HTML code

34315
00:16:37,730 --> 00:16:41,030
in order to complete each of the steps of the challenge.

34316
00:16:41,180 --> 00:16:42,350
The first one's easy.

34317
00:16:42,350 --> 00:16:47,180
We're going to target all paragraph tags and we're going to apply this CSS style.

34318
00:16:47,180 --> 00:16:54,140
So let me copy the CSS style, paste it in, and now I've got an error because I haven't selected what

34319
00:16:54,140 --> 00:16:56,030
this style should be applied to.

34320
00:16:56,240 --> 00:17:01,790
In this case, we're applying it to all the paragraph elements, so we're using the element selector

34321
00:17:01,790 --> 00:17:09,150
and all we have to do there is simply add the name of the tag and then apply it and you can see the

34322
00:17:09,150 --> 00:17:12,750
first line of our bullet is now read.

34323
00:17:13,170 --> 00:17:15,030
That's to do number one.

34324
00:17:15,030 --> 00:17:15,569
Done.

34325
00:17:15,569 --> 00:17:17,910
Let's move on to the next to do so.

34326
00:17:17,910 --> 00:17:26,430
In this one, we want to set the CSS for all the elements with a class of this to this CSS rule.

34327
00:17:26,430 --> 00:17:30,960
So let me again copy the CSS rule and then paste it below.

34328
00:17:31,140 --> 00:17:37,020
And now we're going to use a class selector and select all the elements.

34329
00:17:37,020 --> 00:17:42,270
So notice how we've got many elements with the same class, even though they're applied to different

34330
00:17:42,270 --> 00:17:46,680
elements, but we can select across them using the class selector.

34331
00:17:46,950 --> 00:17:52,530
The class selector, if you remember, requires the dot, and then immediately afterwards we add in

34332
00:17:52,530 --> 00:17:58,350
the name of the class, and then we enclose our CSS rule in between the curly braces again.

34333
00:17:58,350 --> 00:18:06,570
And what this has done is it's applied a larger font size to all of the HTML elements that have that

34334
00:18:06,570 --> 00:18:11,970
class applied to them, which is all the bullets here, but not the H one or H twos.

34335
00:18:12,390 --> 00:18:14,610
So that's to do number two done.

34336
00:18:14,640 --> 00:18:22,890
Next one is to set the CSS for the element with a particular unique ID and the ID is this one.

34337
00:18:22,890 --> 00:18:24,450
So which one has that ID?

34338
00:18:24,690 --> 00:18:31,710
It's this particular list element and we're going to set it to have access rule to turn the color green

34339
00:18:33,660 --> 00:18:37,530
with ID names or class names or attribute names, any of that.

34340
00:18:37,530 --> 00:18:41,340
It's very important that you don't make any spelling errors.

34341
00:18:41,340 --> 00:18:48,090
What I normally do is I normally just copy it and then paste it in so that I don't actually mistakenly

34342
00:18:48,090 --> 00:18:52,470
add a capitalized s or something else that I could write incorrectly.

34343
00:18:52,470 --> 00:18:57,270
So remember, the ID selector is a pound sign or a hashtag.

34344
00:18:57,270 --> 00:19:05,490
And once we enclose our rule inside that selector, you'll see bullet number three turn green, because

34345
00:19:05,490 --> 00:19:11,610
that is the only item and it should be only one item that has the same ID.

34346
00:19:12,690 --> 00:19:21,480
Now let's move on to To-Do number four, which is to set the CSS for the elements that have the value

34347
00:19:21,480 --> 00:19:23,520
attribute set to four.

34348
00:19:23,760 --> 00:19:32,610
And notice now that all of the items in the ordered list, I've set a value attribute.

34349
00:19:32,610 --> 00:19:42,210
And what this does, if you take a look at the web docs for the list item element is this attribute

34350
00:19:42,210 --> 00:19:46,290
can indicate the current ordinal value of the list item.

34351
00:19:46,290 --> 00:19:56,640
When you have a list item inside a ordered list by default, it starts numbering from one like so this

34352
00:19:56,640 --> 00:19:58,410
is this list item.

34353
00:19:58,410 --> 00:20:04,560
But because I've got that paragraph tag above and I want to format this so that we have an interesting

34354
00:20:04,560 --> 00:20:14,700
CSS exercise, I've set the value attribute so that the list starts from two, which is totally valid

34355
00:20:14,700 --> 00:20:20,100
and I've set it for all of the other items as well so that we continue the list.

34356
00:20:21,420 --> 00:20:28,260
In this case, we're going to use the attribute selector to select this value attribute and turn the

34357
00:20:28,260 --> 00:20:29,520
text blue.

34358
00:20:29,610 --> 00:20:36,120
Let's paste in the CSS rule and then remember, the way that we use the attribute inspector is we first

34359
00:20:36,120 --> 00:20:42,420
select the element in this case list item, and then we add some square brackets.

34360
00:20:42,420 --> 00:20:48,540
And inside the square brackets we add the attribute that we want to select, which in this case is called

34361
00:20:48,540 --> 00:20:49,410
value.

34362
00:20:49,410 --> 00:20:57,150
And if right now I already close these curly braces, so we select on that attribute is going to turn

34363
00:20:57,150 --> 00:21:05,160
all the list items that have a attribute of value set, which is basically all four of these.

34364
00:21:05,190 --> 00:21:08,550
Now, some of you might have noticed that bullet number three, which.

34365
00:21:08,610 --> 00:21:13,470
Remain green instead of turning blue like the rest of the list elements.

34366
00:21:13,500 --> 00:21:19,650
Now, if you're curious about why this is, this is to do with something called CSS specificity relating

34367
00:21:19,680 --> 00:21:22,380
to how specific the rule is.

34368
00:21:22,410 --> 00:21:28,560
Now, we're going to be covering this in Section seven for our advanced CSS module.

34369
00:21:28,560 --> 00:21:32,070
So that's something you get to look forward to in the future.

34370
00:21:32,700 --> 00:21:39,930
Now, if we want to set the attribute that we want to select to a particular value, which in this case

34371
00:21:39,930 --> 00:21:47,100
is the one that's four, then I have to go a little bit further and set this equal to four.

34372
00:21:47,280 --> 00:21:52,830
And now you can see it's only selecting this fourth bullet and turning it blue.

34373
00:21:54,380 --> 00:21:56,780
Now attribute selectors can be a little bit tricky.

34374
00:21:56,780 --> 00:22:02,450
So if you didn't understand this at all, be sure to rewind in the video and watch that section of the

34375
00:22:02,450 --> 00:22:08,000
video again, just to make sure that you fully understand what's going on before you move on.

34376
00:22:08,540 --> 00:22:11,510
The final to do is the easiest.

34377
00:22:11,540 --> 00:22:17,480
All we have to do is set all the elements to text, align to center.

34378
00:22:17,810 --> 00:22:23,570
When we want to select all the elements, we use our universal selector, which is the asterisks.

34379
00:22:23,570 --> 00:22:31,490
And then once we paste in this rule, you'll see now our preview looks exactly the same as what we wanted

34380
00:22:31,490 --> 00:22:34,370
for our goal Everything center aligned.

34381
00:22:34,400 --> 00:22:41,690
There's lots of different styling being applied and we've now managed to achieve all of the to do's

34382
00:22:41,690 --> 00:22:44,030
in our exercise.

34383
00:22:44,450 --> 00:22:45,830
So hope that made sense.

34384
00:22:45,830 --> 00:22:49,680
And it helped you review all the things we learned in this lesson.

34385
00:22:49,700 --> 00:22:55,590
Once you're ready, head over to the next lesson where we've got our final project for the section.


34386
00:00:00,290 --> 00:00:00,680
All right.

34387
00:00:00,680 --> 00:00:04,220
So now it's time for our final project of the section.

34388
00:00:04,220 --> 00:00:09,320
And in this project, we're going to be building a website to help you learn Spanish.

34389
00:00:09,440 --> 00:00:14,900
Now, you might already know Spanish, but I'm currently learning Spanish, and there's so much vocab

34390
00:00:14,900 --> 00:00:15,760
to get through.

34391
00:00:15,770 --> 00:00:21,050
I thought, Why don't we build a vocabulary flashcard website?

34392
00:00:21,050 --> 00:00:22,820
But a really, really simple one.

34393
00:00:22,820 --> 00:00:30,650
Using everything we know so far in this project, we're going to be creating a website where we list

34394
00:00:30,680 --> 00:00:34,400
the words in, well, in this case in Spanish.

34395
00:00:34,400 --> 00:00:40,370
It could be any other language you choose, and we're going to match it with an image of a particular

34396
00:00:40,370 --> 00:00:44,300
color so that we learn all the colors in our foreign language.

34397
00:00:44,480 --> 00:00:47,450
This is what the final website should look like.

34398
00:00:47,450 --> 00:00:55,370
We've got our word which is foreign in the color that matches the image.

34399
00:00:55,370 --> 00:01:02,640
And we've got our images all lined up as nice little squares so that we can scroll through this website

34400
00:01:02,640 --> 00:01:05,160
and learn the words for the colors in Spanish.

34401
00:01:05,340 --> 00:01:11,700
Once you're ready, go ahead and download the color vocab project starting files, extract it and open

34402
00:01:11,700 --> 00:01:16,800
it up inside vs code in the index.html.

34403
00:01:16,830 --> 00:01:20,330
You'll see that I've already set you up with some starting code.

34404
00:01:20,340 --> 00:01:29,460
If you go ahead and show it as a preview, you'll see some words for the colors in Spanish and the different

34405
00:01:29,460 --> 00:01:31,500
images for the different colors.

34406
00:01:31,530 --> 00:01:34,650
Now don't worry about the fact the images are all different sizes.

34407
00:01:34,650 --> 00:01:38,490
We're going to fix that with CSS very soon in the project.

34408
00:01:38,700 --> 00:01:46,320
First thing to note is we've already set you up with a link to an external stylesheet which is inside

34409
00:01:46,320 --> 00:01:48,210
Style.css.

34410
00:01:48,210 --> 00:01:55,680
But notice that we haven't created that file for you, so I want you to create a new file inside the

34411
00:01:55,680 --> 00:02:03,450
correct location by using this button in VS code and then name it once you've created it so that it

34412
00:02:03,450 --> 00:02:04,560
actually works.

34413
00:02:04,560 --> 00:02:11,670
And one of the things that I often check to make sure that my external CSS is linked up is to target

34414
00:02:11,670 --> 00:02:17,790
everything on the page and to set the background color to red.

34415
00:02:17,820 --> 00:02:24,330
That way you know that if actually does work, then it's linked up correctly and it's really obvious

34416
00:02:24,330 --> 00:02:26,460
when it doesn't like right now.

34417
00:02:26,460 --> 00:02:32,070
And the reason here is because my style.css is actually outside this folder.

34418
00:02:32,070 --> 00:02:39,000
It's just floating about somewhere and I have to get it so that it's at the location that I specified

34419
00:02:39,000 --> 00:02:41,580
in the external stylesheet link.

34420
00:02:41,580 --> 00:02:47,250
So I don't want you to change anything inside the index.html.

34421
00:02:47,250 --> 00:02:55,080
Instead, all of your work is going to happen inside the CSS file, which you will create and you will

34422
00:02:55,080 --> 00:03:03,270
incorporate into your project using this file path to make sure that you understand how file paths work

34423
00:03:03,270 --> 00:03:06,330
and how you can create this for yourself in the future.

34424
00:03:07,500 --> 00:03:14,280
Now, if we scroll down, you can see there's five different colors, five different images, and there

34425
00:03:14,280 --> 00:03:16,950
are some h2's and H ones.

34426
00:03:17,460 --> 00:03:24,540
In order to complete this project, I've created some steps for you in the to dos which you can follow.

34427
00:03:24,540 --> 00:03:29,610
Alternatively, you can simply look at the goal image and try to figure out yourself.

34428
00:03:29,640 --> 00:03:36,000
You can either use a stepwise approach in the to dos or you can use the goal and do everything yourself.

34429
00:03:36,000 --> 00:03:37,890
It totally is up to you.

34430
00:03:38,640 --> 00:03:45,870
But what you're aiming for in the final version of the website, which you can view by right clicking

34431
00:03:45,870 --> 00:03:49,290
on solution dot HTML, opening it up in the preview.

34432
00:03:49,290 --> 00:03:55,590
And the most important things I want to point out is that the images are squares.

34433
00:03:55,620 --> 00:04:02,120
They are 200 pixels by 200 pixels, so 200 pixels high, 200 pixels wide.

34434
00:04:02,120 --> 00:04:09,590
Secondly, the font weight of these h twos are different from normal h twos.

34435
00:04:09,620 --> 00:04:11,510
They're actually a lot lighter.

34436
00:04:11,510 --> 00:04:18,140
So we've set the font weight to be normal rather than the default, which is h to get bolded.

34437
00:04:18,320 --> 00:04:23,450
The next thing is that the color of the text should match the meaning.

34438
00:04:23,450 --> 00:04:27,320
So rojo means red azul means blue.

34439
00:04:27,320 --> 00:04:32,300
And because in our index.html I've matched each of them up together.

34440
00:04:32,300 --> 00:04:39,020
But also you can look at the IDs if you don't know Spanish words because we're learning them after all

34441
00:04:39,020 --> 00:04:45,040
right, so yellow is Amarillo, green is Verde and so on and so forth.

34442
00:04:45,050 --> 00:04:53,510
So I want you to make sure that these h twos have a text color that matches whatever it is supposed

34443
00:04:53,510 --> 00:04:53,900
to be.

34444
00:04:53,900 --> 00:04:56,780
So blue or orange or green or whichever.

34445
00:04:56,780 --> 00:04:59,420
So if you get confused, look at the goal dot PNG.

34446
00:04:59,960 --> 00:05:03,380
If you want to go step by step, then look at the to dos at the bottom.

34447
00:05:03,380 --> 00:05:09,050
But importantly, don't write anything or change anything in the index.html.

34448
00:05:09,080 --> 00:05:11,600
All your work goes into the CSS file.

34449
00:05:11,900 --> 00:05:14,600
Pause the video and give this a go now.

34450
00:05:19,890 --> 00:05:20,250
All right.

34451
00:05:20,250 --> 00:05:22,230
So let's run through the solution together.

34452
00:05:22,230 --> 00:05:27,450
So the first thing we're going to do is we're going to make sure that the solution folder is collapsed.

34453
00:05:27,450 --> 00:05:29,160
So it's not confusing.

34454
00:05:29,160 --> 00:05:37,200
And then we're going to select this folder and then add a new file, which I'll call style dot CSS.

34455
00:05:37,230 --> 00:05:41,310
Remember, the file name has to match what it's referred to here.

34456
00:05:41,310 --> 00:05:42,330
Exactly.

34457
00:05:42,330 --> 00:05:48,630
Sometimes you'll see people have styles.css, sometimes you'll see main dot CSS, but as long as the

34458
00:05:48,630 --> 00:05:50,520
file name matches, it doesn't really matter.

34459
00:05:50,520 --> 00:05:52,770
It's up to you how you want to name it.

34460
00:05:53,130 --> 00:06:00,360
Once I've created that, let's just make sure that my CSS file is properly linked up by doing that background

34461
00:06:00,360 --> 00:06:01,950
color change.

34462
00:06:01,950 --> 00:06:06,090
So let's change it to Red and then let's go ahead and preview this.

34463
00:06:06,090 --> 00:06:10,290
And if the background is red, then it means that it works.

34464
00:06:10,290 --> 00:06:14,550
So I can now delete this and get rid of that horrible background.

34465
00:06:15,120 --> 00:06:23,230
The next step is to go ahead and use CSS to style each of the color titles so that the color matches

34466
00:06:23,230 --> 00:06:24,070
the meaning.

34467
00:06:24,460 --> 00:06:34,360
The first one that we want to select is this H2, which displays Rojo and it has the ID of red.

34468
00:06:34,360 --> 00:06:37,930
So remember, IDs are unique, so we can simply select that.

34469
00:06:37,930 --> 00:06:45,190
So let's select the element with an ID of red and set its color to red.

34470
00:06:45,580 --> 00:06:49,390
And so we can do the same thing for the rest of the colors.

34471
00:06:49,390 --> 00:06:52,390
So now they're all matching with their meaning.

34472
00:06:52,660 --> 00:06:59,620
The next step is to use CSS to change all the color titles, to have a different font weight.

34473
00:06:59,620 --> 00:07:02,710
And this is what we want the font weight of normal.

34474
00:07:02,710 --> 00:07:10,180
If we want to select all the h2's, then we're going to have a problem because this one is also an H2

34475
00:07:10,180 --> 00:07:13,690
and we don't want that one to have a normal font weight.

34476
00:07:13,690 --> 00:07:15,640
We still want that to be bold.

34477
00:07:15,640 --> 00:07:18,970
We want these to have the lower font weight.

34478
00:07:19,000 --> 00:07:22,060
So what is unique to all of these?

34479
00:07:22,060 --> 00:07:29,200
Well, we've applied a class of color title to each of them, which this H2 does not have.

34480
00:07:29,230 --> 00:07:36,880
Then that means that we can simply select color dash title and then apply the font weight to all of

34481
00:07:36,880 --> 00:07:38,680
those with that same class.

34482
00:07:38,680 --> 00:07:43,540
And you can see that differentiates between this H2 and this H2.

34483
00:07:43,540 --> 00:07:49,780
And instead all of these which are grouped together have that style applied.

34484
00:07:50,020 --> 00:07:53,410
Now the final thing we need to do is to use CSS.

34485
00:07:53,440 --> 00:08:00,070
No, not HTML to make all the images 200 pixels high and 200 pixels wide.

34486
00:08:00,790 --> 00:08:02,200
How can we do that?

34487
00:08:02,200 --> 00:08:06,670
Well, we can simply select the image element.

34488
00:08:06,670 --> 00:08:17,230
So this is using an element selector and we can set the height to 200 pixels and the width to 200 pixels.

34489
00:08:17,410 --> 00:08:19,180
And there you have it.

34490
00:08:19,180 --> 00:08:26,140
All of our images are now squares matching the height and width that we've specified.

34491
00:08:26,380 --> 00:08:30,820
You can of course change this and personalize it as much as you like.

34492
00:08:30,820 --> 00:08:36,820
Change up the colors or change up the words, learn the colors in a different language, make things

34493
00:08:36,820 --> 00:08:39,789
even more beautiful using the styling that you've learned.

34494
00:08:39,820 --> 00:08:46,180
But in the next section, we're going to be covering more about different CSS rules and you'll have

34495
00:08:46,180 --> 00:08:50,320
more tools at your disposal in order to style your websites.

34496
00:08:50,470 --> 00:08:56,680
So I hope you have fun in this section where we introduce you to CSS once you're ready.

34497
00:08:56,710 --> 00:09:03,760
Maybe tomorrow, maybe the next day, head over to the next section and continue learning about intermediate

34498
00:09:03,760 --> 00:09:05,740
aspects of CSS.

34499
00:09:05,770 --> 00:09:08,440
For all of that and more, I'll see you there.



34500
00:00:00,110 --> 00:00:08,300
Now we've already used some CSS properties in order to apply to our different HTML elements, but in

34501
00:00:08,300 --> 00:00:13,220
this section we're going to do a deep dive into some of the most important CSS properties that you'll

34502
00:00:13,220 --> 00:00:14,690
see and use.

34503
00:00:14,720 --> 00:00:20,300
And we're going to start with CSS, color properties, some of the color properties you've already seen

34504
00:00:20,300 --> 00:00:21,410
previously.

34505
00:00:21,530 --> 00:00:28,640
I've shown you how you can set the background color of a particular HTML element by using the background

34506
00:00:29,180 --> 00:00:30,800
color property.

34507
00:00:30,800 --> 00:00:36,920
And previously we've been setting it to basic colors like red or blue or green.

34508
00:00:37,040 --> 00:00:45,080
And remember that the way that the CSS rules work is the first part is the property.

34509
00:00:46,280 --> 00:00:52,850
And the part that comes after the colon is the value that you want to set that property to.

34510
00:00:52,880 --> 00:00:59,630
So in this case, we're setting the background color of the HTML element, which remember contains everything

34511
00:00:59,630 --> 00:01:00,660
on our website.

34512
00:01:00,660 --> 00:01:04,769
So the entire web page to a color of red.

34513
00:01:04,769 --> 00:01:06,510
That's what that rule does.

34514
00:01:06,690 --> 00:01:10,170
Now, there are different types of color properties.

34515
00:01:10,170 --> 00:01:15,090
There's the background color, but you can also simply use the color property.

34516
00:01:15,090 --> 00:01:19,080
And what this does is it sets the text color.

34517
00:01:19,080 --> 00:01:21,900
So always check the docs.

34518
00:01:21,930 --> 00:01:25,200
If you're not sure which property does what.

34519
00:01:26,370 --> 00:01:32,460
Notice that in this case we've got two colors, which we've named Red and Blue.

34520
00:01:32,490 --> 00:01:35,640
Well, how do we know that we can use these colors?

34521
00:01:35,640 --> 00:01:37,380
And what exactly are they?

34522
00:01:37,500 --> 00:01:39,810
Well, they're called named colors.

34523
00:01:39,810 --> 00:01:47,910
And there's a whole bunch of them out there with poetic names like Cornflower Blue or Cadet Blue or

34524
00:01:47,910 --> 00:01:51,390
dim gray or olive drab, etcetera.

34525
00:01:51,390 --> 00:01:56,340
And you can find all of them by, of course, going to the developer documentation.

34526
00:01:56,430 --> 00:02:03,140
If you Google for docs named color, the first link should take you to this web page.

34527
00:02:03,150 --> 00:02:08,580
Alternatively, you can use this URL as well, and the syntax is pretty simple.

34528
00:02:08,580 --> 00:02:16,080
You simply use the name of the color and if you scroll through this table you'll see all the different

34529
00:02:16,080 --> 00:02:16,740
colors.

34530
00:02:16,740 --> 00:02:20,880
And don't worry too much about the CSS level one or level two or level three.

34531
00:02:20,910 --> 00:02:24,870
It just describes historically when each color was introduced.

34532
00:02:24,870 --> 00:02:28,330
So these were introduced first because it's basically the rainbow.

34533
00:02:28,330 --> 00:02:35,650
And then over time we got some more fun colors like cyan and dark khaki and all of these different colors.

34534
00:02:35,650 --> 00:02:42,490
So you can simply copy the name of the color and paste it into your code and you'll be able to see that

34535
00:02:42,490 --> 00:02:44,380
rendered in your website.

34536
00:02:44,530 --> 00:02:49,900
Of course, even though there's many colors available in the default CSS named colors.

34537
00:02:49,900 --> 00:02:54,460
But you still sometimes might want to have a more unique color palette.

34538
00:02:54,460 --> 00:02:56,410
So what do you do in that case?

34539
00:02:56,410 --> 00:03:01,510
Well, one of my favorite color palettes is color hunt.co.

34540
00:03:01,900 --> 00:03:09,070
It's a free tool that's created by designers for designers and of course, for us as well.

34541
00:03:09,250 --> 00:03:15,610
Here you've got professionally designed color palettes for colors stacked together that would look perfect

34542
00:03:15,610 --> 00:03:16,840
on any website.

34543
00:03:16,870 --> 00:03:22,450
You can imagine that if you select any of these random websites, maybe this could be the background

34544
00:03:22,450 --> 00:03:23,500
color of the website.

34545
00:03:23,500 --> 00:03:28,090
This could be an H1 color, this could be a subtitle or H2 color.

34546
00:03:28,090 --> 00:03:33,310
You have accent tones, you have main tones, and you can use all of these colors in your website.

34547
00:03:33,310 --> 00:03:38,110
But how do we use them if we don't have a name that's attached to it?

34548
00:03:38,110 --> 00:03:40,960
Instead, we've got all these numbers and letters.

34549
00:03:40,960 --> 00:03:42,730
What exactly are these?

34550
00:03:42,760 --> 00:03:51,820
Well, these are hex codes and they are a way of representing a larger number code for that particular

34551
00:03:51,820 --> 00:03:52,450
color.

34552
00:03:52,450 --> 00:04:00,010
So, for example, in this case, this is a color purple which is formed of three fractions, red,

34553
00:04:00,010 --> 00:04:01,030
green and blue.

34554
00:04:01,090 --> 00:04:04,720
And these are colors out of 255.

34555
00:04:04,720 --> 00:04:15,160
So if you imagine a fraction, 93 out of 255 red, 56 out of 255 green and one for five out of 255 blue.

34556
00:04:15,160 --> 00:04:21,160
And when you mix all three of these primary colors, you can get so many different types of shades.

34557
00:04:21,160 --> 00:04:24,550
So in this case, we've got 93, 56, one four, five.

34558
00:04:24,580 --> 00:04:37,300
So 93 out of two, five five, 56, green out of two, five, five and one, four five.

34559
00:04:37,300 --> 00:04:44,860
So a little bit more blue and we end up with exactly the same shade as this purple you see right here

34560
00:04:45,370 --> 00:04:49,480
converting that RGB into a hex code.

34561
00:04:49,480 --> 00:04:52,600
So a different way of representing that number.

34562
00:04:52,600 --> 00:04:55,210
We get this particular hex code.

34563
00:04:55,210 --> 00:04:56,860
What does this mean for you?

34564
00:04:56,860 --> 00:05:01,780
Well, when you're using something like color hunt and you want to apply these different colors to your

34565
00:05:01,780 --> 00:05:08,080
website, you can simply copy the hex code and use it instead of the name.

34566
00:05:08,080 --> 00:05:14,770
And even on the docs for the named colors, you can see their hex codes lined up next to the names,

34567
00:05:14,770 --> 00:05:18,220
and in code it looks pretty much exactly the same.

34568
00:05:18,220 --> 00:05:20,860
Instead of the name, you just put the hex code.

34569
00:05:21,370 --> 00:05:23,650
So now it's time to try an exercise.

34570
00:05:23,680 --> 00:05:30,730
Go ahead and download this zip file from this current lesson, extract it and open it inside vs code.

34571
00:05:30,910 --> 00:05:36,970
Once you're here, you should see it's a pretty simple website with just two elements inside the body

34572
00:05:37,210 --> 00:05:38,950
an H1 and H2.

34573
00:05:38,950 --> 00:05:44,740
And if we look at the preview, then you can see it's clearly a drab, black and white world.

34574
00:05:44,860 --> 00:05:48,370
We're going to change all of that by adding in CSS colors.

34575
00:05:48,370 --> 00:05:54,610
So you've got five steps that you need to complete here and you should follow them one by one and by

34576
00:05:54,610 --> 00:06:00,010
the end of all five steps, you should have a website that looks something like this with lots of different

34577
00:06:00,010 --> 00:06:02,980
colors and different background colors as well.

34578
00:06:03,160 --> 00:06:05,980
Pause the video now and give this challenge a go.

34579
00:06:09,620 --> 00:06:10,040
All right.

34580
00:06:10,040 --> 00:06:12,500
So let's walk through the solution together.

34581
00:06:12,680 --> 00:06:20,330
We've got the background color of the body, which is set to antique white, which is this color right

34582
00:06:20,330 --> 00:06:20,890
here.

34583
00:06:20,900 --> 00:06:25,400
And we've got the text color of the H one set to white smoke.

34584
00:06:25,430 --> 00:06:29,430
But you can also set the background color of the H one.

34585
00:06:29,450 --> 00:06:35,390
It's a property that's available on any of the elements and it simply takes the existing area of that

34586
00:06:35,390 --> 00:06:37,700
element and colors the background.

34587
00:06:37,910 --> 00:06:41,870
Now, that might have required a little bit of lateral thinking, but hopefully you got there in the

34588
00:06:41,870 --> 00:06:42,440
end.

34589
00:06:42,440 --> 00:06:49,910
And notice how in the H one we've got all named colors and in the H two, I've asked you to use hex

34590
00:06:49,910 --> 00:06:55,760
colors and this is just so that you have practice adding colors using the two different methods.

34591
00:06:56,630 --> 00:06:58,280
Hopefully you got there in the end.

34592
00:06:58,280 --> 00:07:05,090
Once you're ready, head over to the next lesson and let's learn more about formatting fonts using CSS.


34593
00:00:00,290 --> 00:00:05,510
Now, in this lesson, we're going to talk a bit more about the different CSS properties that we can

34594
00:00:05,510 --> 00:00:11,060
set for fonts so we can change the appearance of the text in our websites.

34595
00:00:11,630 --> 00:00:18,050
And we've already seen some of them, for example, the color property which sets the text color, but

34596
00:00:18,050 --> 00:00:25,820
there's other ones as well, such as the font weight, the font size and also the font family, which

34597
00:00:25,820 --> 00:00:28,140
is the typeface that we want to use.

34598
00:00:28,160 --> 00:00:30,680
Let's explore some of these newer ones.

34599
00:00:30,710 --> 00:00:33,910
The first one I'll talk about is the font size.

34600
00:00:33,920 --> 00:00:42,320
We can change the size of a font by simply using the font size property and then setting it to a particular

34601
00:00:42,320 --> 00:00:45,890
pixel size, as you might have seen me do already.

34602
00:00:46,280 --> 00:00:51,350
But if we think about it, what exactly does a 20 pixel font size mean?

34603
00:00:51,350 --> 00:00:53,110
How big is it really?

34604
00:00:53,120 --> 00:00:55,040
Well, this is how big it is.

34605
00:00:55,040 --> 00:01:00,750
One pixel is about 1/96 of an inch.

34606
00:01:00,750 --> 00:01:07,560
And the reason why we're using imperial units is because a lot of the sizing for websites and for design

34607
00:01:07,560 --> 00:01:12,330
work actually comes from the olden days of book printing, book binding.

34608
00:01:12,330 --> 00:01:14,010
And it was very traditional.

34609
00:01:14,010 --> 00:01:20,220
If you know how big an inch is, then you know how big one over 96 of an inch is.

34610
00:01:20,220 --> 00:01:26,640
It's absolutely tiny, but if you have no idea how big an inch is, then in metric units it's about

34611
00:01:26,670 --> 00:01:29,550
0.26mm.

34612
00:01:29,550 --> 00:01:32,310
That's about how big a pixel is.

34613
00:01:32,310 --> 00:01:39,150
It's 0.26mm wide and 0.26mm tall.

34614
00:01:39,150 --> 00:01:43,620
So it's a small cube that's very, very tiny.

34615
00:01:44,500 --> 00:01:50,800
There are other ways that we can represent the font size when we're writing CSS.

34616
00:01:50,920 --> 00:01:58,090
One common way that you'll see in addition to pixels is using something called a point.

34617
00:01:58,540 --> 00:02:06,010
A stands for a pixel and a P stands for a point.

34618
00:02:06,100 --> 00:02:07,950
Now how big is a point?

34619
00:02:07,960 --> 00:02:10,630
Well, it's a slightly bigger than a pixel.

34620
00:02:10,630 --> 00:02:15,070
It's about one over 72 second of an inch.

34621
00:02:15,070 --> 00:02:17,320
So that's just slightly bigger.

34622
00:02:17,350 --> 00:02:30,880
If 1.96 of an inch is 0.26mm, one over 72 of an inch is about 0.35mm, just a tiny bit bigger.

34623
00:02:30,940 --> 00:02:36,220
Now the point is actually often used in many different applications.

34624
00:02:36,220 --> 00:02:45,350
So when you select a 12 size font in, say, word, you're actually selecting 12 points.

34625
00:02:45,350 --> 00:02:50,930
So that means when you're using 12 points on your web page, you can expect that when a website is at

34626
00:02:50,930 --> 00:02:56,000
100%, it will look about the same as a 12 font on your word document.

34627
00:02:56,090 --> 00:03:04,040
In addition, there are some other ways of representing font size, the M and the M.

34628
00:03:04,160 --> 00:03:06,140
What are these units?

34629
00:03:06,170 --> 00:03:13,520
Well, the M is actually not pronounced M It's pronounced M, so it's pronounced in the same way that

34630
00:03:13,520 --> 00:03:16,100
this letter is in the alphabet.

34631
00:03:16,370 --> 00:03:17,660
Why is that?

34632
00:03:17,660 --> 00:03:24,170
Well, one M is defined as the full width of an M.

34633
00:03:24,260 --> 00:03:32,150
The letter M is probably one of the widest letters in the English alphabet, and this unit simply represents

34634
00:03:32,150 --> 00:03:33,950
that entire width.

34635
00:03:34,430 --> 00:03:37,700
But what does it actually mean when we use it?

34636
00:03:37,730 --> 00:03:46,850
Well, what it means is that when you set an H one to have the font size of one M, your CSS code would

34637
00:03:46,850 --> 00:03:48,570
look something like this.

34638
00:03:48,590 --> 00:03:58,910
Then it means that if it had a parent, for example, if we had a body tag that enclosed this h one

34639
00:03:58,910 --> 00:04:13,100
tag, then if this body had a font size of say, 20 pixels, then this h one if we set it to one M or

34640
00:04:13,100 --> 00:04:19,120
one M, then it means it's going to be a 100% of the parent size.

34641
00:04:19,130 --> 00:04:21,829
So it means it's going to be 20 pixels.

34642
00:04:22,070 --> 00:04:31,760
Now, however, if we set it to two M instead, then in this case it's going to be two times the parent

34643
00:04:31,760 --> 00:04:32,450
size.

34644
00:04:32,450 --> 00:04:37,940
So two times 20 pixels, which is going to be 40 pixels instead.

34645
00:04:38,030 --> 00:04:41,090
It's basically a relative size.

34646
00:04:41,450 --> 00:04:45,260
And I'm going to explain to you why this is important very shortly.

34647
00:04:45,260 --> 00:04:52,730
But closely related to the M or the M is the M, and it's got that extra word.

34648
00:04:52,760 --> 00:04:55,670
Ah, And basically it works the same thing.

34649
00:04:55,670 --> 00:05:00,860
It's a relative size, but it's now relative instead of to the parent.

34650
00:05:00,860 --> 00:05:08,840
It's relative to the root of your HTML file, which if you remember, the root is usually an HTML element

34651
00:05:08,840 --> 00:05:11,750
that encloses everything inside.

34652
00:05:12,770 --> 00:05:17,840
What is the difference then, between the M and the M?

34653
00:05:18,170 --> 00:05:26,930
If we take a look at this code where we've got a body tag that encloses an H1 and then we've got a footer

34654
00:05:26,930 --> 00:05:33,950
tag, which is one of the tags that you can use to define a section in your code for the footer area

34655
00:05:33,950 --> 00:05:34,940
of your website.

34656
00:05:35,030 --> 00:05:39,680
Then inside here we've got an H2 that's enclosed.

34657
00:05:40,220 --> 00:05:52,250
If I set my H2 to have a font size of two M and my footer had a font size of 20 pixels, then two M

34658
00:05:52,280 --> 00:05:57,860
is two times 20 pixels, which is equal to 40 pixels.

34659
00:05:57,860 --> 00:06:00,860
So this H2 is now 40 pixels.

34660
00:06:01,310 --> 00:06:08,810
However, if I go in here and I change this footer to have 80 pixels, then all of a sudden this is

34661
00:06:08,810 --> 00:06:16,760
going to change and it's no longer going to be 40 pixels, but instead it's going to be two times 80,

34662
00:06:16,790 --> 00:06:20,840
which is now equal to 160 pixels.

34663
00:06:20,840 --> 00:06:25,310
So it's moving relative to its parent size.

34664
00:06:25,610 --> 00:06:37,100
On the other hand, if I had set this H2 to have a size of two REM and I change the size of my footer

34665
00:06:37,100 --> 00:06:43,760
from 20 pixels to 80 pixels, then it does not affect this.

34666
00:06:43,820 --> 00:06:44,510
Whatsoever.

34667
00:06:44,510 --> 00:06:47,200
It still remains the same size.

34668
00:06:47,210 --> 00:06:55,340
It's only if I change the root element, which if you take a look, it's the thing that encloses all

34669
00:06:55,340 --> 00:06:59,440
of the rest of the code, which is normally the HTML element.

34670
00:06:59,450 --> 00:07:07,580
If I change this size to something larger, say 90 pixels, then that is the thing that will affect

34671
00:07:07,580 --> 00:07:09,170
this sizing.

34672
00:07:09,170 --> 00:07:19,100
So the main difference between the M and the M is the fact that this is a more consistent way of changing

34673
00:07:19,100 --> 00:07:20,210
the sizing.

34674
00:07:20,210 --> 00:07:27,230
So I normally recommend that everybody who develops websites when you're setting the font size to use

34675
00:07:27,230 --> 00:07:32,960
the REM, because the way that you have different things embedded in others.

34676
00:07:32,960 --> 00:07:39,170
So this H two is inside a footer which is inside the body, which is inside the HTML.

34677
00:07:39,200 --> 00:07:46,100
Then the relationship to the parent can very quickly get very confused and you don't know whose parent

34678
00:07:46,100 --> 00:07:49,730
you're referring to, especially when you're working in a separate CSS file.

34679
00:07:49,820 --> 00:07:53,300
So understand how the REM works.

34680
00:07:53,300 --> 00:07:58,670
Remember, it is a scaled size of the root one.

34681
00:07:58,910 --> 00:08:03,980
M is one x, the root size two M is two x, the root size.

34682
00:08:03,980 --> 00:08:09,770
And this is a much easier way to control the different sizes of various elements on your screen and

34683
00:08:09,770 --> 00:08:15,440
have more clarity around what's going on in the starting file that you downloaded previously.

34684
00:08:15,440 --> 00:08:17,750
I've got some sample code for you.

34685
00:08:17,780 --> 00:08:25,040
If we take a look at all the different ways of setting font size, you can see that we can use the pixel

34686
00:08:25,040 --> 00:08:33,080
size, we can use point size, we can use M REM, and we can also use named font sizes such as extra

34687
00:08:33,080 --> 00:08:34,970
large or large.

34688
00:08:34,970 --> 00:08:40,159
And when all of this is rendered, you'll see the different sizes in play.

34689
00:08:40,190 --> 00:08:48,780
The fact that a pixel is much smaller than a point, but these two are static font sizes and then the

34690
00:08:48,780 --> 00:08:53,490
M is relative to the parent and the M is relative to the root.

34691
00:08:53,490 --> 00:08:55,920
But these are relative sizes.

34692
00:08:56,160 --> 00:09:02,190
If you want to see this code and be able to edit it and change it and see it working, then download

34693
00:09:02,190 --> 00:09:07,200
the zip file from this current lesson called 6.1 font properties.

34694
00:09:07,590 --> 00:09:10,710
Once you've extracted it, open it up inside vs code.

34695
00:09:10,710 --> 00:09:17,130
Head over to font size dot HTML and you'll see exactly the same code as in the demo.

34696
00:09:17,130 --> 00:09:20,190
But in this case it's of course in VS code.

34697
00:09:20,190 --> 00:09:26,820
So you can change things such as the REM, the m, the different font sizes, the root font size, and

34698
00:09:26,820 --> 00:09:29,280
you'll see it reflected on the screen.

34699
00:09:29,400 --> 00:09:36,360
For example, if I change this root font size from extra extra large down to say, 20 pixels, then

34700
00:09:36,390 --> 00:09:44,790
you'll see that this paragraph change accordingly because its size is based on REM.

34701
00:09:44,790 --> 00:09:48,960
So have a play around with that so that you can understand what's going on.

34702
00:09:49,710 --> 00:09:53,940
There are some other font properties that I want to briefly cover.

34703
00:09:53,940 --> 00:09:57,840
One is the font weight, which is relatively simple.

34704
00:09:57,840 --> 00:10:01,710
You can have normal or you can have bold, and we all know what that means.

34705
00:10:01,710 --> 00:10:04,050
It just makes the font look a bit heavier.

34706
00:10:04,290 --> 00:10:09,210
But out in the wild you might see some other ways that people use to change the font weight.

34707
00:10:09,210 --> 00:10:16,230
In addition to the basic keywords, you can have a relative font weight which is relative to the parent

34708
00:10:16,230 --> 00:10:19,320
to have the font lighter or have it be bolder.

34709
00:10:19,320 --> 00:10:29,520
In addition, you can also use a number from 100 up to 900 to determine how light or how bold you want

34710
00:10:29,520 --> 00:10:30,690
the font to be.

34711
00:10:30,690 --> 00:10:37,710
And similarly, when we say lighter it basically minuses the number by 100.

34712
00:10:37,710 --> 00:10:41,370
And if we say bolder, it just makes it bolder by 100.

34713
00:10:41,370 --> 00:10:49,560
Somewhere along this range, in addition to font size and font weight, there's also the all important

34714
00:10:49,560 --> 00:10:50,880
font family.

34715
00:10:50,880 --> 00:10:55,380
And this determines what you want your text to look like.

34716
00:10:55,410 --> 00:11:01,320
For example, in this first example, we've got the font family that is set to Helvetica.

34717
00:11:01,350 --> 00:11:10,260
This is a particular typeface and the name is called Helvetica, but this is a mac specific typeface.

34718
00:11:10,260 --> 00:11:15,360
So there are many Windows computers that do not own this typeface.

34719
00:11:15,480 --> 00:11:23,400
That's why very often when we write a font family, we don't just write the font name, we have a comma

34720
00:11:23,520 --> 00:11:28,350
and then we have a backup generic font type.

34721
00:11:28,830 --> 00:11:31,920
So in this case it's a sans serif.

34722
00:11:32,310 --> 00:11:38,550
A sans serif is simply the type of font where all the edges are pretty much at right angles.

34723
00:11:38,550 --> 00:11:43,230
If you had these little feet or these little decorations at the edges.

34724
00:11:43,340 --> 00:11:48,790
Of your letters, then very often what you're looking at is a serif type font.

34725
00:11:48,820 --> 00:11:52,450
So that's the main two types of different typefaces.

34726
00:11:52,450 --> 00:11:54,370
And in later lessons, we.

34727
00:11:54,400 --> 00:11:56,620
Cover typefaces in more detail.

34728
00:11:56,620 --> 00:12:01,000
So you can either search for that lesson or wait until it comes up to learn more about that.

34729
00:12:01,570 --> 00:12:05,750
What is important, though, is having this generic typeface.

34730
00:12:05,770 --> 00:12:13,180
This means that when you have this set that Mac users will see this font, but Windows users will see

34731
00:12:13,180 --> 00:12:18,610
something that's relatively equivalent and it will be automatically displayed for them when it doesn't

34732
00:12:18,610 --> 00:12:19,330
work.

34733
00:12:20,020 --> 00:12:23,860
Now what if you have a font that has many words in it?

34734
00:12:23,860 --> 00:12:27,550
For example, times new Roman consists of three words.

34735
00:12:27,580 --> 00:12:32,450
Well, in this case, we can't simply just type it out like this and then have a comma.

34736
00:12:32,470 --> 00:12:38,890
We actually need the quotation marks around it so that we can tell the CSS file that there are spaces

34737
00:12:38,890 --> 00:12:41,050
in the name of the font family.

34738
00:12:41,050 --> 00:12:43,850
So just be careful about that when you're using it.

34739
00:12:44,180 --> 00:12:52,220
And because times new Roman is a serif type font, then the backup, the generic type is also a serif.

34740
00:12:52,730 --> 00:12:59,120
Now what if you want a completely custom font that maybe the user doesn't have?

34741
00:12:59,150 --> 00:13:05,390
Well, one of the best places to find free fonts is going over to Fonts.google.com.

34742
00:13:05,570 --> 00:13:12,050
And here you can find all sorts of different fonts and there are so, so many for you to choose from

34743
00:13:12,050 --> 00:13:14,570
and you can browse to your heart's content.

34744
00:13:14,720 --> 00:13:16,550
Now I want you to do this with me.

34745
00:13:16,580 --> 00:13:20,480
Go over to Fonts.google.com, find a font that you like.

34746
00:13:20,510 --> 00:13:27,710
So maybe I really like a particular font and if you click on it, sometimes you'll see that it has different

34747
00:13:27,710 --> 00:13:31,100
font faces for the different weights.

34748
00:13:31,100 --> 00:13:34,850
So there's Bold, which is 700 or regular 400.

34749
00:13:34,850 --> 00:13:40,700
But then other fonts you might see in here doesn't actually have any weight other than just the regular

34750
00:13:40,700 --> 00:13:45,240
one that you can use depending on which of these type you have.

34751
00:13:45,260 --> 00:13:48,740
Simply select the weight that you're interested in.

34752
00:13:48,740 --> 00:13:57,800
For example, with this font, maybe I want the medium size, and with this font, maybe I'm just going

34753
00:13:57,800 --> 00:13:59,420
to select a regular one.

34754
00:13:59,540 --> 00:14:04,940
And once you've selected that, if you go to the top right corner, you can see all of your selections.

34755
00:14:04,940 --> 00:14:09,470
So you can remove all or you can remove the ones that you're not interested in.

34756
00:14:09,470 --> 00:14:13,480
But either way, you should end up with a font that you want to include.

34757
00:14:13,490 --> 00:14:19,520
Now make sure that that link is selected and then copy that over to your starting file.

34758
00:14:19,520 --> 00:14:26,450
So select the font family dot html inside the head element just after the style tag.

34759
00:14:26,450 --> 00:14:33,680
Go ahead and paste all of that in and this is basically a link that is going to pull in the Google font

34760
00:14:33,680 --> 00:14:35,870
for any user on the internet.

34761
00:14:35,870 --> 00:14:41,330
So it doesn't matter if they have a mac or a PC or which fonts they have downloaded on their computer,

34762
00:14:41,360 --> 00:14:45,680
they'll all be able to access this font because we're including it in the link.

34763
00:14:45,680 --> 00:14:51,680
And then let's go ahead and copy the CSS rule, which Google has very helpfully included for us.

34764
00:14:51,680 --> 00:14:57,980
And if you scroll up, you'll see that I've again got an internal style set in here so that we can more

34765
00:14:57,980 --> 00:15:01,760
easily see the CSS alongside the HTML on the same file.

34766
00:15:01,760 --> 00:15:03,530
While we're doing the exercise.

34767
00:15:03,530 --> 00:15:11,210
Let's go ahead and create an H1 here and I'm simply going to write the words font family because that

34768
00:15:11,210 --> 00:15:13,160
is what this page is all about.

34769
00:15:13,160 --> 00:15:16,430
And then let's right click and show it in the preview.

34770
00:15:16,520 --> 00:15:23,070
Now I want you to set the H1 CSS style to the one that you just copied over.

34771
00:15:23,090 --> 00:15:26,120
Pause the video and do that right now.

34772
00:15:27,990 --> 00:15:28,320
All right.

34773
00:15:28,320 --> 00:15:34,710
So we need to target the H, one of which we've only got one so we can use the element selector and

34774
00:15:34,710 --> 00:15:38,490
then we paste in our CSS style as easy as that.

34775
00:15:38,490 --> 00:15:45,510
And you'll notice immediately that updates that font into our custom font from Google.

34776
00:15:45,510 --> 00:15:50,790
And it doesn't matter what you've chosen, this should always work as long as you've included all of

34777
00:15:50,790 --> 00:15:55,770
the links that are required and added in the relevant CSS.

34778
00:15:56,040 --> 00:16:02,730
Also on this page you'll see the different font families, for example, the Helvetica and the sans

34779
00:16:02,730 --> 00:16:03,390
serif.

34780
00:16:03,390 --> 00:16:05,700
Or on a windows.

34781
00:16:05,700 --> 00:16:09,000
The default sans serif will be an Ariel type font.

34782
00:16:09,000 --> 00:16:14,940
And then you've got serif type fonts, which are the ones with the little feet that I mentioned.

34783
00:16:14,970 --> 00:16:22,230
You've got these sans serif fonts and you've got all of these other generics such as cursive monospace

34784
00:16:22,230 --> 00:16:25,830
and fantasy cursive is a little bit curly.

34785
00:16:25,830 --> 00:16:26,970
That's how I remember it.

34786
00:16:27,000 --> 00:16:34,600
Monospace has all the letters occupying the same width, so similar to a typewriter or code, and fantasy

34787
00:16:34,600 --> 00:16:36,250
is usually something kind of wild.

34788
00:16:36,250 --> 00:16:41,740
And these generic fonts will be different depending on the computer that you use and the browser that

34789
00:16:41,740 --> 00:16:42,190
you use.

34790
00:16:42,190 --> 00:16:49,240
So you might not see the same type of fonts that I have here, but if you specify a specific font and

34791
00:16:49,240 --> 00:16:55,300
you make sure that it's linked to, then we should all be looking at the same font face right up here.

34792
00:16:55,780 --> 00:17:04,420
And notice how when we copy that over it specified the specific font, but also a backup font in case

34793
00:17:04,420 --> 00:17:09,640
these links didn't work or something messed up and it would default to a cursive font.

34794
00:17:09,819 --> 00:17:13,480
The generic cursive font would then look like this.

34795
00:17:14,200 --> 00:17:21,069
So the final thing I want to talk about in terms of text styling is alignment.

34796
00:17:21,069 --> 00:17:22,720
So text alignment.

34797
00:17:22,720 --> 00:17:30,120
And this, this property called text align where you can set it to say centered or you can set it to

34798
00:17:30,120 --> 00:17:32,580
the left or to the right.

34799
00:17:32,580 --> 00:17:36,810
And you've also got some values like start and end.

34800
00:17:36,810 --> 00:17:43,500
And basically start is when you have text that maybe starts writing from the right to left, such as

34801
00:17:43,500 --> 00:17:44,520
in Arabic.

34802
00:17:44,520 --> 00:17:49,680
And so in this case, the start is actually here and the end is here.

34803
00:17:49,680 --> 00:17:56,220
But then if you're working with Western text, then the start will be right here and the end will be

34804
00:17:56,220 --> 00:17:57,000
right here.

34805
00:17:57,120 --> 00:18:01,800
That's just a more flexible way of determining the text align.

34806
00:18:01,800 --> 00:18:10,410
But all in all, this is a pretty simple property and you can take a look at it in the docs to learn

34807
00:18:10,410 --> 00:18:18,780
more about what the other values in addition to start end are and try the demo to see how they work.

34808
00:18:19,200 --> 00:18:27,180
Now once you've done all of that, I've got a final exercise for you and that's located in the index.html

34809
00:18:27,210 --> 00:18:27,690
here.

34810
00:18:27,930 --> 00:18:36,160
There's a number of to do's I want you to complete and I want you to go through them one by one.

34811
00:18:36,160 --> 00:18:43,000
It involves changing some colors, changing some font sizes, font weight, font, family, the text

34812
00:18:43,000 --> 00:18:48,070
align and also changing a root element font size.

34813
00:18:48,580 --> 00:18:54,400
The important thing is that you don't change any of the CSS that's already included, but instead write

34814
00:18:54,400 --> 00:19:01,750
your CSS below in this internal style element so that you can quickly refer to the to do's and see what

34815
00:19:01,750 --> 00:19:03,760
you need to write in the CSS.

34816
00:19:03,790 --> 00:19:06,700
Don't worry too much about setting external CSS.

34817
00:19:06,730 --> 00:19:10,330
We're just completing this as a quick exercise.

34818
00:19:10,600 --> 00:19:15,190
And remember, while you're doing this, if you want to see what the end result should look like, go

34819
00:19:15,190 --> 00:19:17,110
ahead into the goal dot PNG.

34820
00:19:17,410 --> 00:19:22,000
To see all the colors and layout and relative sizes of everything.

34821
00:19:22,030 --> 00:19:25,570
Pause the video now and go through each of these two dos.

34822
00:19:28,500 --> 00:19:28,890
All right.

34823
00:19:28,890 --> 00:19:31,070
So let's go through the solution together.

34824
00:19:31,080 --> 00:19:38,670
Now, step one was to change the color of this particular element to a named color called coral.

34825
00:19:38,670 --> 00:19:41,370
And the solution should look something like this.

34826
00:19:42,090 --> 00:19:49,200
The second one is to change the font size of this element to two times the size of the root element.

34827
00:19:49,350 --> 00:19:56,340
Remember, to do that, we have to use the REM and two times the size is two REM.

34828
00:19:56,700 --> 00:20:01,980
I've selected it based on the size ID and I've changed the font size to that.

34829
00:20:03,050 --> 00:20:04,010
The next step.

34830
00:20:04,010 --> 00:20:12,380
I've changed the font weight of this element to 900 by using the font weight property and then we change

34831
00:20:12,380 --> 00:20:19,460
the font family of this element to use the caveat font with a regular font weight.

34832
00:20:19,670 --> 00:20:28,040
So I selected that font from there and then I added in all the required links just before the end of

34833
00:20:28,040 --> 00:20:28,790
the head section.

34834
00:20:28,790 --> 00:20:33,860
But outside of the style section, this is very important in terms of placement.

34835
00:20:33,860 --> 00:20:39,140
And then I added in the font family and a backup font in case it goes wrong.

34836
00:20:39,620 --> 00:20:44,990
Next I changed this particular paragraph element so that it's right aligned.

34837
00:20:44,990 --> 00:20:51,650
And finally I change the route, which is the HTML element to have a 30 pixel font.

34838
00:20:51,800 --> 00:21:00,350
And when that was changed, then the two REM one, which is the font size element here, actually changes

34839
00:21:00,350 --> 00:21:00,800
with it.

34840
00:21:00,800 --> 00:21:05,100
So it gets bigger or it gets smaller depending on the route size.

34841
00:21:05,100 --> 00:21:11,010
So hopefully that was easy enough for you to complete and it tested you on all the things that we learned

34842
00:21:11,010 --> 00:21:12,820
in this lesson so far.

34843
00:21:12,840 --> 00:21:18,540
Once you're ready, head over to the next lesson where we're going to learn more about CSS inspection

34844
00:21:18,540 --> 00:21:23,700
and how you can find out what is happening with your CSS using the Chrome developer tools.

34845
00:21:23,700 --> 00:21:26,220
So for all of that and more, I'll see you there.


34846
00:00:00,260 --> 00:00:05,570
Hey guys, welcome to another lesson where we learn more about CSS.

34847
00:00:05,689 --> 00:00:12,950
Now in this lesson, we're going to deep dive into CSS inspection and learn about the Chrome developer

34848
00:00:12,950 --> 00:00:20,300
tools that allow us to figure out what our CSS is doing and potentially diagnose any bugs or resolve

34849
00:00:20,300 --> 00:00:21,320
any issues.

34850
00:00:22,550 --> 00:00:28,220
As I mentioned before, the Chrome developer tools are a really powerful suite of tools that is completely

34851
00:00:28,220 --> 00:00:31,800
free and comes bundled with the Chrome browser.

34852
00:00:31,820 --> 00:00:35,570
If you are not using a Chrome browser, you won't get access to it.

34853
00:00:35,570 --> 00:00:41,780
And it's really important, at least for this course, that you've got the same browser as I'm using

34854
00:00:41,780 --> 00:00:44,090
so that we can go through these tools together.

34855
00:00:44,360 --> 00:00:50,960
If you head over to this URL, which we visited before in the last section where I showed you how CSS

34856
00:00:50,990 --> 00:00:57,920
works and how we can simply add CSS to make our website look beautiful, then we can use this as an

34857
00:00:57,920 --> 00:01:01,160
example to learn more about CSS inspection.

34858
00:01:01,430 --> 00:01:07,460
In order to bring up the Chrome developer tools, we go over to these three dots and then we go to more

34859
00:01:07,460 --> 00:01:10,160
tools and we go to developer tools.

34860
00:01:10,400 --> 00:01:19,310
Now you'll notice that on the right hand side of this selection, you have the shortcut for your computer

34861
00:01:19,340 --> 00:01:21,980
on how you can bring it up quickly.

34862
00:01:21,980 --> 00:01:22,810
On a mac.

34863
00:01:22,820 --> 00:01:32,780
It's usually set by default to command option and I on Windows it's normally control plus shift plus

34864
00:01:32,780 --> 00:01:33,050
I.

34865
00:01:33,080 --> 00:01:35,810
So holding down those three keys together.

34866
00:01:35,990 --> 00:01:41,840
But if you have the function keys up here, pressing F12 usually also brings up the chrome developer

34867
00:01:41,840 --> 00:01:42,650
console.

34868
00:01:42,650 --> 00:01:44,900
But the shortcut could be totally different for you.

34869
00:01:44,900 --> 00:01:49,730
So make sure you take a look over here to figure out what your precise shortcut is.

34870
00:01:50,030 --> 00:01:55,370
Another way of bringing up this developer console is simply to right click on any element you're interested

34871
00:01:55,370 --> 00:01:55,730
in.

34872
00:01:55,730 --> 00:02:00,740
For example, this button and then click on inspect and it will do the same thing.

34873
00:02:00,740 --> 00:02:06,200
But in addition, it will highlight in the HTML that element that you selected.

34874
00:02:06,230 --> 00:02:10,370
Now what if you wanted to select a different element while you're here?

34875
00:02:10,400 --> 00:02:17,210
Well, you can use this button up here to select an element visually so you can click that and then

34876
00:02:17,240 --> 00:02:22,500
say, okay, I want to look at the footer here, this paragraph, Well, then it will select it for

34877
00:02:22,500 --> 00:02:23,450
you in the HTML.

34878
00:02:23,460 --> 00:02:30,240
Or I want to look at this H1 so you can select it visually or you can select it using the HTML.

34879
00:02:30,810 --> 00:02:37,860
This is the Elements tab and we're going to be exploring a subsection of this, which is the styles

34880
00:02:37,860 --> 00:02:38,700
section.

34881
00:02:38,850 --> 00:02:45,570
Notice that when I select any of these elements, it shows me the styles that have been applied to those

34882
00:02:45,570 --> 00:02:46,330
elements.

34883
00:02:46,350 --> 00:02:52,590
For example, if we take a look at this button, at least in the CSS on version, you'll see that it's

34884
00:02:52,590 --> 00:02:54,480
got a background color that I've set.

34885
00:02:54,510 --> 00:02:59,340
I've set a color for the text and lots of other things that we don't need to worry about too much right

34886
00:02:59,340 --> 00:03:03,930
now because in the next lesson we're going to learn more about different CSS properties.

34887
00:03:03,930 --> 00:03:09,990
But the important thing is that notice if I go ahead and press that button and switch off all the CSS

34888
00:03:09,990 --> 00:03:17,250
and I select that button again, then you can see that most of the element style is actually all automatic.

34889
00:03:17,250 --> 00:03:24,780
Whenever you insert a HTML element, it comes with automatic preloaded CSS and that's what you're getting.

34890
00:03:24,780 --> 00:03:31,200
By default, it looks something like this, but when you actually apply your own CSS, then it gets

34891
00:03:31,200 --> 00:03:34,410
shown here and you can even see which file it's coming from.

34892
00:03:34,410 --> 00:03:41,460
In this case, it's the Styles.css right here and you can click on it to view the source code of that

34893
00:03:41,460 --> 00:03:42,300
CSS.

34894
00:03:43,290 --> 00:03:49,350
The next thing I want to show you is how you can actually change the CSS live in the Chrome developer

34895
00:03:49,350 --> 00:03:50,070
tools.

34896
00:03:50,160 --> 00:03:59,100
Right now you can see I've got my H1 selected and by simply clicking add I can add a style to this H1.

34897
00:03:59,100 --> 00:04:07,710
So I could say let's change its color instead of white to um, maybe black instead.

34898
00:04:07,710 --> 00:04:10,610
And you can see that reflected live over here.

34899
00:04:10,620 --> 00:04:16,440
Now I can switch that off by hovering over here and clicking on the button to put a slash through it

34900
00:04:16,440 --> 00:04:18,660
and it deletes that CSS.

34901
00:04:18,690 --> 00:04:24,720
Now, the important thing to remember is any of the changes that you make in the Chrome developer tool

34902
00:04:24,750 --> 00:04:28,020
does not affect your original file.

34903
00:04:28,050 --> 00:04:35,400
Previously, remember we looked at TechCrunch using the Chrome developer tools and we were able to change

34904
00:04:35,400 --> 00:04:40,050
the text by simply typing in the Chrome developer tool.

34905
00:04:40,500 --> 00:04:46,590
This does not change Techcrunch's website and some of you have asked Is this illegal?

34906
00:04:46,620 --> 00:04:47,760
Am I doing something bad?

34907
00:04:47,790 --> 00:04:48,360
No, it doesn't.

34908
00:04:48,360 --> 00:04:53,730
It's just you affecting your local copy that's loaded up inside the Chrome browser.

34909
00:04:53,730 --> 00:04:59,490
It doesn't affect any of the other users and certainly doesn't change anything on Techcrunch's servers.

34910
00:04:59,820 --> 00:05:07,470
Similarly, back over here, when we're editing the CSS, when we are selecting or unselecting or adding

34911
00:05:07,470 --> 00:05:11,040
new rules, it doesn't affect the actual website.

34912
00:05:11,370 --> 00:05:16,560
Even if you load up one of your local websites that you're developing and you change a whole bunch of

34913
00:05:16,560 --> 00:05:18,390
things, this is just temporary.

34914
00:05:18,390 --> 00:05:21,630
It's for you to look and try things out and.

34915
00:05:21,860 --> 00:05:28,130
See how you like it before you add these rules into your actual CSS source code.

34916
00:05:28,130 --> 00:05:32,720
And you can further confirm this by seeing that I've got an H1 that says color black.

34917
00:05:32,720 --> 00:05:39,950
But if I go into the sources, my style.css for this file and I look in this file, you can see that

34918
00:05:39,950 --> 00:05:41,810
nothing has changed here.

34919
00:05:42,140 --> 00:05:47,270
There is no H1 that has a color of black.

34920
00:05:47,600 --> 00:05:50,840
Again, I recommend don't worry too much about the different properties.

34921
00:05:50,840 --> 00:05:53,840
There's lots of them that's coming up that we're going to talk about.

34922
00:05:53,840 --> 00:05:59,780
But the main thing to focus on here is how to use the inspector to understand other peoples as well

34923
00:05:59,780 --> 00:06:03,080
as your own websites and how the CSS is laid out.

34924
00:06:03,560 --> 00:06:07,820
If you go ahead and inspect on one of these anchor tags.

34925
00:06:07,820 --> 00:06:11,240
So when you click this and hover over it, you should see an A tag show up.

34926
00:06:11,240 --> 00:06:14,390
So click on it and it'll select it in the HTML.

34927
00:06:14,420 --> 00:06:20,720
Now, if you look over here, you can see that it's got some default properties that have been striked

34928
00:06:20,720 --> 00:06:30,150
out and the reason for this is because when we apply a CSS rule that conflicts with some of the automatically

34929
00:06:30,150 --> 00:06:35,820
applied rules, such as the color of that anchor tag, remember, by default, the color of any anchor

34930
00:06:35,820 --> 00:06:37,710
tag is blue to start with.

34931
00:06:37,740 --> 00:06:39,810
But here we've got one that's white.

34932
00:06:39,840 --> 00:06:42,690
Well, we've overridden it simply with this line.

34933
00:06:42,690 --> 00:06:46,170
So if I switch this off, you can see the other one switched back on.

34934
00:06:46,170 --> 00:06:51,480
But if I do have my own rules, then it can override other existing rules.

34935
00:06:51,480 --> 00:06:55,860
So how do you know what's actually being applied to your CSS element?

34936
00:06:55,890 --> 00:07:01,230
Well, that's where the computer tab comes in, because when you click on it, you'll see the actual

34937
00:07:01,230 --> 00:07:03,030
color in terms of RGB.

34938
00:07:03,030 --> 00:07:09,600
So how much red, green and blue is being applied to the text color and other properties as well.

34939
00:07:09,600 --> 00:07:14,190
And it removes all of the craziness of all this crossing out stuff.

34940
00:07:14,190 --> 00:07:18,780
And you can actually see in one place what is being applied.

34941
00:07:19,140 --> 00:07:25,620
Now another feature of Chrome Developer tool that I find really useful is to go over to the three dots,

34942
00:07:25,650 --> 00:07:33,270
go to more tools, and remember, this is the three dots for the settings of the Chrome developer tools,

34943
00:07:33,270 --> 00:07:35,160
not the one for Chrome.

34944
00:07:35,160 --> 00:07:40,830
This is easily confused, but when you go here and you go to more tools, you should find CSS overview.

34945
00:07:40,830 --> 00:07:47,310
And this is a neat feature where you can select capture overview and it will show you a bunch of useful

34946
00:07:47,310 --> 00:07:51,210
things like, for example, that there are two background colors here.

34947
00:07:51,210 --> 00:07:55,410
There's a sort of whitish gray and there's a sort of purple going on.

34948
00:07:55,440 --> 00:07:59,160
There's two different text colors, white and black.

34949
00:07:59,280 --> 00:08:04,470
And we've also got information on the different fonts that are being used on the web page.

34950
00:08:05,160 --> 00:08:10,080
I find this really neat when I come across a website that I really like and I'm trying to figure out,

34951
00:08:10,080 --> 00:08:11,850
Oh, what font is that?

34952
00:08:11,880 --> 00:08:18,120
Well, it seems like they're using Helvetica Neue or What color is this green Exactly.

34953
00:08:18,120 --> 00:08:24,330
Well, I can actually find out simply by looking at this inspector and maybe I can copy it for my own

34954
00:08:24,330 --> 00:08:25,380
use later on.

34955
00:08:25,380 --> 00:08:27,840
So you can see the colors, you can see the fonts.

34956
00:08:27,840 --> 00:08:31,290
And for now, we won't worry too much about the last two.

34957
00:08:31,320 --> 00:08:34,200
We'll come to that in later modules.

34958
00:08:34,530 --> 00:08:42,179
Have a play around with the CSS inspector and I want you to take a look at selecting different elements,

34959
00:08:42,179 --> 00:08:48,780
looking at their styles, trying to add some styles in the Chrome developer tool and looking around

34960
00:08:48,780 --> 00:08:51,030
at some of the other things we've mentioned.

34961
00:08:51,480 --> 00:08:57,100
Once you're happy that you know how to do that, I want you to head over to this URL at Brewery dot

34962
00:08:57,120 --> 00:09:06,030
Github.io slash CSS dash inspection and I've created a website for you to inspect in this website.

34963
00:09:06,030 --> 00:09:15,870
We've got some things that are on the screen and this is an H1 and H2 and a paragraph tag.

34964
00:09:15,870 --> 00:09:24,780
Now I want you to use the CSS inspector to answer these four quiz questions and once you've put in the

34965
00:09:24,780 --> 00:09:28,950
answer, click submit and you'll see if you got it right or if you got it wrong.

34966
00:09:29,370 --> 00:09:32,940
Pause the video and try to complete this challenge.

34967
00:09:34,940 --> 00:09:35,300
All right.

34968
00:09:35,300 --> 00:09:40,280
So the first question is, what is the named color of the body?

34969
00:09:40,310 --> 00:09:41,810
Well, what is the color?

34970
00:09:41,810 --> 00:09:48,350
So let's go ahead and pull up our inspector and let's select the body element if we haven't already

34971
00:09:48,350 --> 00:09:50,330
got it selected in the HTML.

34972
00:09:50,330 --> 00:09:53,380
And let's take a look at what styles are applied.

34973
00:09:53,390 --> 00:09:56,810
You can see it's got a background color that's being applied.

34974
00:09:56,810 --> 00:10:01,430
And if we switch it off, you can see it changes it to the default, which is white.

34975
00:10:01,430 --> 00:10:05,630
So this is the background color of the body and it's called Alice Blue.

34976
00:10:05,660 --> 00:10:11,720
If I type that in here and click submit, then I get my answer correct.

34977
00:10:11,960 --> 00:10:14,000
Now let's move on to the second question.

34978
00:10:14,000 --> 00:10:16,580
What's the font size of the H1?

34979
00:10:16,580 --> 00:10:23,300
Let's select the H1 right here and let's take a look at the font size that's mentioned here.

34980
00:10:23,300 --> 00:10:28,130
Well, it says it's three REM, which makes it a lot bigger than the default.

34981
00:10:28,130 --> 00:10:32,840
So let's type three REM in here, hit submit.

34982
00:10:32,840 --> 00:10:39,660
And we got that question right to number three is what is the font weight of the H2?

34983
00:10:39,690 --> 00:10:45,900
Select the H2, look at the font weight, its font weight 500.

34984
00:10:46,170 --> 00:10:46,740
Okay.

34985
00:10:46,740 --> 00:10:48,180
And hit submit.

34986
00:10:48,600 --> 00:10:54,000
And finally, what's the font family of the paragraph tag?

34987
00:10:54,000 --> 00:10:59,640
So let's select the paragraph tag and then look at the font family.

34988
00:10:59,640 --> 00:11:06,240
And this is a little bit tricky because it's actually not applied directly to the paragraph, but it's

34989
00:11:06,270 --> 00:11:10,680
actually one of the automatically inherited parts.

34990
00:11:10,680 --> 00:11:13,710
So you can see down here it says the font family.

34991
00:11:13,710 --> 00:11:19,470
And also if you go to computed where everything's all stacked up together, as I mentioned, where you

34992
00:11:19,470 --> 00:11:24,570
don't have to go through the entire list of what's being striked out, what's being applied, etcetera.

34993
00:11:24,570 --> 00:11:29,310
You can see the font family is Ariel comma sans serif.

34994
00:11:29,310 --> 00:11:37,560
So Ariel comma, sans serif and hit submit and we get all our answers correct.

34995
00:11:37,560 --> 00:11:39,360
So did you manage to do that?

34996
00:11:39,360 --> 00:11:43,200
Did you manage to use the inspector to figure out the answers to these questions?

34997
00:11:43,200 --> 00:11:48,870
If not, be sure to review the previous parts of this video so that you understand exactly what's going

34998
00:11:48,870 --> 00:11:51,450
on before you move on to the next lesson.


34999
00:00:00,350 --> 00:00:00,980
Hey, guys.

35000
00:00:00,980 --> 00:00:07,190
In this lesson, we're going to talk about some other really important properties and the ones that

35001
00:00:07,190 --> 00:00:12,140
you might have already seen if you've been doing a little bit of inspection around the Internet.

35002
00:00:12,140 --> 00:00:19,670
And these are margin padding and the border properties and these three properties, along with width

35003
00:00:19,670 --> 00:00:25,760
and height, form a really important CSS concept known as the box model.

35004
00:00:25,760 --> 00:00:27,830
So what exactly is it?

35005
00:00:27,860 --> 00:00:33,110
Well, if you think about a typical website here, I've created one called I Love Bacon.

35006
00:00:33,140 --> 00:00:38,000
Then you've got different components that are on screen, different HTML elements.

35007
00:00:38,000 --> 00:00:46,820
And even though we can't really see it effectively, each element is a box in itself and we can change

35008
00:00:46,820 --> 00:00:51,110
the dimensions of those boxes by changing things such as width and height.

35009
00:00:51,110 --> 00:00:54,230
So in this case, I've made my bacon much, much bigger.

35010
00:00:54,230 --> 00:01:00,290
And that invisible box around the element describes how it would be laid out on screen.

35011
00:01:00,290 --> 00:01:06,980
If we have an element that has a height of 300 pixels, we can change that height to allow our element

35012
00:01:06,980 --> 00:01:10,100
to take up more vertical spacing on the web page.

35013
00:01:10,130 --> 00:01:18,020
And when this happens, it pushes the box of any other elements lower on the web page.

35014
00:01:18,380 --> 00:01:24,470
Now, similarly, we can also change the width of an element to allow it to take up more space horizontally.

35015
00:01:24,470 --> 00:01:31,280
And we can either do this using pixels as defined here or we can use percentages.

35016
00:01:31,280 --> 00:01:38,390
So in this case, we've gotten our blue element to take up the entire width of the website and that

35017
00:01:38,390 --> 00:01:43,580
can be done using percentages in addition to width and height.

35018
00:01:43,610 --> 00:01:48,500
We can also set a border on each of the HTML elements.

35019
00:01:48,500 --> 00:01:55,250
If you imagine, again each HTML element being a box, then this would be the border of the box.

35020
00:01:55,970 --> 00:02:01,950
And the way that the border property works is a little bit different from what you might have seen before.

35021
00:02:02,070 --> 00:02:07,650
It can take three values separated by a space.

35022
00:02:07,860 --> 00:02:13,680
The first value that you should provide is the thickness of the border.

35023
00:02:14,190 --> 00:02:18,510
And this, as you can see here, is the thickness of this line.

35024
00:02:18,510 --> 00:02:21,720
If I made it thicker, then it would look like this.

35025
00:02:21,720 --> 00:02:26,910
And so we can provide a pixel value for the thickness as the first item.

35026
00:02:27,090 --> 00:02:31,140
Now, the second item is the style of the border.

35027
00:02:31,170 --> 00:02:37,440
You can have, for example, solid, but you can also have a dashed line, in which case the border

35028
00:02:37,440 --> 00:02:43,710
would look something like this instead of a solid line as we've gotten here.

35029
00:02:44,700 --> 00:02:52,500
And finally, we've got the color of the border in which you can set to any named color or hex color

35030
00:02:52,500 --> 00:02:59,400
as we've covered in the color properties lesson, These are three items together determine what the

35031
00:02:59,400 --> 00:03:01,790
border should look like.

35032
00:03:01,790 --> 00:03:09,380
So if I was to change the border from ten pixels to 30 pixels, then we would get a lot thicker of a

35033
00:03:09,380 --> 00:03:10,040
border.

35034
00:03:10,040 --> 00:03:18,350
But remember, the important thing is that the height and the width of your HTML element, your box

35035
00:03:18,350 --> 00:03:19,840
does not change.

35036
00:03:19,850 --> 00:03:23,870
It's exactly the same as what it was before.

35037
00:03:23,870 --> 00:03:28,580
So this border actually goes outwards rather than inwards.

35038
00:03:28,580 --> 00:03:31,100
And that's the important thing to remember here.

35039
00:03:32,030 --> 00:03:38,780
Now, once you've defined a border, you can further modify it with more specific rules.

35040
00:03:38,780 --> 00:03:46,430
So, for example, in this case, I've got a around 30 pixels solid black border around my element.

35041
00:03:46,430 --> 00:03:53,270
But then afterwards on the next line and this is very important where this line goes, it has to go

35042
00:03:53,270 --> 00:03:55,730
after the point where we've created the border.

35043
00:03:56,240 --> 00:04:02,550
In this case, I'm saying I want the top of that border to be zero pixels instead.

35044
00:04:02,550 --> 00:04:09,030
And, well, the way that these rules are evaluated is first they will look at this line creating this

35045
00:04:09,030 --> 00:04:11,970
border, which is 30 pixels all around.

35046
00:04:11,970 --> 00:04:18,480
But then once it lands on the next line, it evaluates this rule and sees that actually I should amend

35047
00:04:18,510 --> 00:04:21,570
the top of the border to have zero pixels.

35048
00:04:21,570 --> 00:04:25,770
So effectively getting rid of the border at the top here.

35049
00:04:26,520 --> 00:04:33,270
This border width works similarly to the way that the border property works, namely that it can take

35050
00:04:33,270 --> 00:04:35,970
a maximum of four values.

35051
00:04:36,000 --> 00:04:45,570
The first value is the top, the second is the right, third is the bottom, and the fourth is the left.

35052
00:04:45,600 --> 00:04:48,930
It goes in a clockwise direction.

35053
00:04:49,110 --> 00:04:54,690
In addition, you can also just provide two values for the border width.

35054
00:04:54,720 --> 00:04:59,790
And what that does is it sets one and three.

35055
00:05:00,040 --> 00:05:03,460
And then it sets two and four.

35056
00:05:03,700 --> 00:05:12,940
For example, if my border width, I had set to zero pixels and 20 pixels, then what that would do

35057
00:05:12,940 --> 00:05:19,720
is it would set two and four, which is the left and right to 20 pixels, and then it would set one

35058
00:05:19,720 --> 00:05:21,700
and 3 to 0 pixels.

35059
00:05:21,730 --> 00:05:24,850
This then becomes top and bottom.

35060
00:05:26,190 --> 00:05:29,730
And then we've got our left and right.

35061
00:05:31,560 --> 00:05:37,530
Now, another property I want to talk about in regards to the box model is something called padding.

35062
00:05:37,530 --> 00:05:41,760
And this is most easily seen when we have content such as text.

35063
00:05:41,850 --> 00:05:48,210
So in this case, imagine that this blue box is a paragraph element.

35064
00:05:48,300 --> 00:05:53,460
And in the paragraph element we've got Hello world repeated many, many times.

35065
00:05:53,610 --> 00:06:02,070
This paragraph element has got a border property and it's a solid black border, measuring 30 pixels

35066
00:06:02,070 --> 00:06:03,120
wide all around.

35067
00:06:04,160 --> 00:06:14,030
If at this point I add a padding property to this element, then what would happen is it would push

35068
00:06:14,030 --> 00:06:18,770
my border out by 20 pixels.

35069
00:06:18,770 --> 00:06:23,900
And in this case, I'm pushing it by 20 on all sides.

35070
00:06:24,260 --> 00:06:33,260
And notice how, again, in this situation, the height and the width of this box does not change.

35071
00:06:33,260 --> 00:06:34,690
It's still the same.

35072
00:06:34,700 --> 00:06:43,190
The padding simply adds this padding or space between the element and the border.

35073
00:06:43,880 --> 00:06:48,180
In addition to the padding, there's also something known as a margin.

35074
00:06:48,200 --> 00:06:54,330
And the margin is actually the part that's outside of the border.

35075
00:06:54,350 --> 00:07:03,170
So here again is the border in between the border and the width and height of the element.

35076
00:07:03,860 --> 00:07:12,680
Is the padding and the part between the border and any other content that's on screen is the margin.

35077
00:07:12,680 --> 00:07:18,410
So in this case, we've added a margin of ten pixels on all four sides.

35078
00:07:19,010 --> 00:07:27,170
If you imagine, we had two elements, each with the same padding, margin and border, then this margin

35079
00:07:27,170 --> 00:07:35,060
or this distance between the two elements in this case will actually be 20 pixels because it's ten pixels

35080
00:07:35,060 --> 00:07:37,700
from this side and ten pixels from this side.

35081
00:07:37,700 --> 00:07:43,390
And it adds this spacing between elements that you would not get with the padding.

35082
00:07:43,400 --> 00:07:45,980
So that is the main difference.

35083
00:07:47,020 --> 00:07:56,530
In your inspection, you might have seen the box model already shown in the inspector, and it shows

35084
00:07:56,530 --> 00:08:01,090
you the margin, the border, the padding and the width and height.

35085
00:08:01,180 --> 00:08:05,330
So that's what all of these different colors represent.

35086
00:08:05,350 --> 00:08:13,450
And when you take a look at the box model on inspection, then you can actually change each of these

35087
00:08:13,450 --> 00:08:18,460
values to see how it would look differently if you head over to this address.

35088
00:08:18,490 --> 00:08:25,960
App dot Github.io forward slash box dash model, and then we go ahead and open up the developer tools

35089
00:08:25,960 --> 00:08:34,690
and we select on the first image here, which shows a daytime world and we go into the box model that's

35090
00:08:34,690 --> 00:08:36,390
under the Styles tab.

35091
00:08:36,400 --> 00:08:43,720
If I go ahead and add a margin right here, let's say, I don't know, 100 pixels, then it's going

35092
00:08:43,720 --> 00:08:45,220
to add that gap.

35093
00:08:45,220 --> 00:08:50,630
Did you see it just now, that gap between that image and anything that's below it?

35094
00:08:50,780 --> 00:09:00,470
And similarly, if I add a little bit of a margin above, say, 100 pixels, then you can see it adds

35095
00:09:00,470 --> 00:09:05,840
a gap between that image and the next element above, which is that paragraph tag.

35096
00:09:05,930 --> 00:09:14,720
However, if I added the padding as 100 pixels, then you'll see it add the space as well.

35097
00:09:14,720 --> 00:09:19,520
But it's actually inside the border of the image.

35098
00:09:20,030 --> 00:09:30,200
If this element actually had a border which will set as a ten pixels solid black, then you can see

35099
00:09:30,200 --> 00:09:35,060
how that padding goes to a different place versus where the border goes.

35100
00:09:35,060 --> 00:09:41,960
And this box model is going to come really, really handy when you start to try and lay out different

35101
00:09:41,960 --> 00:09:48,290
items on your website determining how they look and where they're placed Relative to each other.

35102
00:09:48,620 --> 00:09:57,350
The final thing I wanted to mention is that padding and margin, similar to what we saw for the border

35103
00:09:57,680 --> 00:10:07,460
and also the border width function in that same way where we've got one, two, three and four values

35104
00:10:07,460 --> 00:10:16,190
that we can provide and if we provide a different value for each of them, so zero, ten, 20 and 30

35105
00:10:16,190 --> 00:10:22,490
pixels, then this will determine how it looks on all four sides.

35106
00:10:22,490 --> 00:10:30,830
And you have to remember that this is where the first value is second, and it goes around in a clockwise

35107
00:10:30,830 --> 00:10:31,790
direction.

35108
00:10:32,240 --> 00:10:37,460
Again, with the border width, you can change to only provide two values.

35109
00:10:37,460 --> 00:10:47,390
So say ten pixels and 40 pixels, then this is going to be applied to the top and the bottom and also

35110
00:10:47,390 --> 00:10:49,490
the left and the right.

35111
00:10:49,910 --> 00:10:57,980
So this is just a particular way of how these three properties can accept multiple values.

35112
00:10:57,980 --> 00:11:06,140
If you only set one value, say ten pixels, then that's going to affect all sides in addition to the

35113
00:11:06,140 --> 00:11:13,670
boxes that are created by elements, we can actually create our own boxes independent of that, and

35114
00:11:13,670 --> 00:11:19,460
that's really useful when we want to group different bits of content together so that we can style it

35115
00:11:19,460 --> 00:11:20,030
together.

35116
00:11:20,030 --> 00:11:22,250
Or maybe we want to lay it out together.

35117
00:11:22,250 --> 00:11:31,100
For example, here we have an image and maybe I would want the image to have a caption and I would probably

35118
00:11:31,100 --> 00:11:38,390
want to style these two bits together so I can wrap a box around these two elements.

35119
00:11:38,510 --> 00:11:46,130
And the way that I would create these artificial boxes is through the use of a HTML element, which

35120
00:11:46,130 --> 00:11:48,980
is called the content division element.

35121
00:11:48,980 --> 00:11:55,300
There was no point learning about the div element before we could learn about CSS because these are

35122
00:11:55,300 --> 00:12:04,960
completely invisible unless you apply CSS style to it and the whole purpose is to act as an invisible

35123
00:12:04,990 --> 00:12:12,100
box that can contain content in between the opening and the closing tags.

35124
00:12:12,250 --> 00:12:20,290
In the middle, we can put as many elements as we want and we can group them into separate boxes known

35125
00:12:20,290 --> 00:12:21,640
as Divs.

35126
00:12:22,540 --> 00:12:30,640
So here I've got the HTML code from that website I showed you earlier with the two versions of our world

35127
00:12:30,640 --> 00:12:32,980
the Morning and the Evening View.

35128
00:12:32,980 --> 00:12:38,620
And it's really simple and I've only just taken the body section of the HTML.

35129
00:12:38,620 --> 00:12:45,610
But here notice that we've got a paragraph tag and an image tag and they're grouped together through

35130
00:12:45,610 --> 00:12:46,060
the use.

35131
00:12:46,260 --> 00:12:52,800
Of this div element and notice that the div element doesn't really do anything else other than act as

35132
00:12:52,800 --> 00:13:00,690
a container to group this section together so that it's separated from other content.

35133
00:13:00,690 --> 00:13:03,240
For example, this section right here.

35134
00:13:04,290 --> 00:13:11,400
And now we've not only added meaning to our HTML by saying this is one section of content and this is

35135
00:13:11,400 --> 00:13:17,070
another section of content, but in addition we can style them differently in CSS.

35136
00:13:17,700 --> 00:13:21,210
When we run our code, this is what the website would look like.

35137
00:13:21,240 --> 00:13:29,220
You would not see any of these div elements, but if we were able to see them then they would look like

35138
00:13:29,220 --> 00:13:29,640
this.

35139
00:13:29,640 --> 00:13:35,010
Grouping our elements together because these divs are invisible.

35140
00:13:35,010 --> 00:13:41,010
Sometimes it can be really hard to debug them and understand what's going on or more likely what's going

35141
00:13:41,010 --> 00:13:42,690
wrong with your CSS.

35142
00:13:42,900 --> 00:13:50,640
So there's a free Chrome extension that I recommend you download to make this process of debugging a

35143
00:13:50,640 --> 00:13:54,510
little bit easier and hence that's why it's called pesticide.

35144
00:13:54,540 --> 00:13:57,630
We're going to use it to get rid of bugs in our CSS.

35145
00:13:58,200 --> 00:14:05,410
I'll add a link to this Chrome extension and all you have to do is click add to Chrome and then add

35146
00:14:05,410 --> 00:14:06,430
extension.

35147
00:14:06,430 --> 00:14:12,910
And once you've got it, then you should be able to look inside your extensions and then open it up

35148
00:14:12,910 --> 00:14:14,410
to activate it.

35149
00:14:14,440 --> 00:14:16,000
Now what does it do?

35150
00:14:16,030 --> 00:14:17,320
Well, let's demo it.

35151
00:14:17,410 --> 00:14:23,800
In addition to the suite of developer tools you've got now, you've also got the pesticide working for

35152
00:14:23,800 --> 00:14:24,300
you.

35153
00:14:24,310 --> 00:14:32,950
And once you activate it, you can see these div boxes now show up on screen and you can also see the

35154
00:14:32,950 --> 00:14:38,890
different elements highlighted in boxes and it really helps you diagnose what's wrong with your box

35155
00:14:38,890 --> 00:14:40,750
model when it does go wrong.

35156
00:14:40,840 --> 00:14:46,360
In addition, if you close down the Chrome developer tools and hold down the control key, when you

35157
00:14:46,390 --> 00:14:53,980
hover on each of these boxes down at the bottom of the screen, you can see how it tells you which node

35158
00:14:53,980 --> 00:14:55,360
you're actually hovering on.

35159
00:14:55,360 --> 00:15:02,200
So in this case, I'm inside a div and it shows you if there are any classes or IDs on that div as well.

35160
00:15:02,200 --> 00:15:09,070
And then here I'm hovering on an image element and here I'm hovering on a paragraph element and this

35161
00:15:09,070 --> 00:15:15,850
can be really helpful for you to see exactly what's on screen and almost like put on night vision goggles

35162
00:15:15,850 --> 00:15:21,010
so that we can see our divs and our elements and their alignment and their sizing.

35163
00:15:21,640 --> 00:15:27,090
Finally, we're going to use everything that we've learned and put it all together in this exercise.

35164
00:15:27,230 --> 00:15:30,070
We're going to write some code and apply our knowledge.

35165
00:15:30,250 --> 00:15:37,300
Go ahead and download this zip file from this current lesson, extract it and open it inside vs code.

35166
00:15:37,630 --> 00:15:43,930
Now, once you've done that, open up the index.html and you should see a bunch of to do's.

35167
00:15:44,110 --> 00:15:50,800
I want you to follow each of the steps one by one, just as if you were a web developer following client

35168
00:15:50,800 --> 00:15:51,790
instructions.

35169
00:15:51,790 --> 00:15:57,250
And we're going to use everything you've learned so far in order to create something that looks like

35170
00:15:57,250 --> 00:15:57,860
this.

35171
00:15:57,880 --> 00:16:03,420
Now, I've marked up this page a little bit so I can show you the important parts of the requirements.

35172
00:16:03,430 --> 00:16:11,050
For example, notice that here I've said 20 pixel padding, and that applies to the distance between

35173
00:16:11,050 --> 00:16:14,110
that paragraph tag and the border.

35174
00:16:14,620 --> 00:16:20,740
And then here I've said it should have a 20 pixel border at the top and at the bottom, but then only

35175
00:16:20,740 --> 00:16:23,560
a ten pixel border on the left and the right.

35176
00:16:23,680 --> 00:16:27,270
And notice that the layout is very specific here.

35177
00:16:27,280 --> 00:16:31,330
Each of these boxes should be touching corner to corner.

35178
00:16:31,330 --> 00:16:37,570
So you're going to have to figure out how to use the margin property in order to push these boxes around

35179
00:16:37,570 --> 00:16:42,400
so that they're literally aligned right up to each other on the same pixel.

35180
00:16:42,850 --> 00:16:50,200
I'm going to leave you to pause the video and go through each of these requirements and hopefully you

35181
00:16:50,200 --> 00:16:54,730
will be able to create a website that looks like the goal image.

35182
00:16:54,850 --> 00:16:58,930
Pause the video now and complete this challenge.

35183
00:17:01,460 --> 00:17:01,850
All right.

35184
00:17:01,850 --> 00:17:04,230
So let's go through the solution together.

35185
00:17:04,250 --> 00:17:12,319
Now, the first thing you'll notice is we've created three Divs and I've added a paragraph tag into

35186
00:17:12,319 --> 00:17:16,490
the first div so that we can see our padding a bit more easily.

35187
00:17:16,790 --> 00:17:23,569
The next thing is we've set each of the divs height and width to a pixel size, namely 200 pixels.

35188
00:17:23,900 --> 00:17:31,400
Next I've added a paragraph element inside the first div so that we can see any padding that gets added

35189
00:17:31,400 --> 00:17:32,600
very easily.

35190
00:17:32,810 --> 00:17:40,280
And I've set the first div to have 20 pixels of padding all around with a black ten pixel border and

35191
00:17:40,280 --> 00:17:42,860
that you can see under here.

35192
00:17:42,950 --> 00:17:50,780
Now notice how I've used different IDs for the different boxes or divs, and this way I can uniquely

35193
00:17:50,780 --> 00:17:54,440
identify each div and set different styling to them.

35194
00:17:55,510 --> 00:17:56,410
Next step.

35195
00:17:56,410 --> 00:18:03,460
I've targeted the paragraph element so that I remove any of the margins that go on it, because if we

35196
00:18:03,460 --> 00:18:13,240
preview our solution and open this up inside Chrome, you can see that by default, each paragraph element

35197
00:18:13,240 --> 00:18:17,800
actually gets one m of margin at the start and the end.

35198
00:18:17,800 --> 00:18:23,650
So if I cancel this, you can see how it pushes that away from the containing div.

35199
00:18:23,680 --> 00:18:29,380
So we wanted to add the zero margin so that we would have it centered and it would not be affected by

35200
00:18:29,380 --> 00:18:30,750
its default styling.

35201
00:18:30,760 --> 00:18:38,230
Next we had you set the second div to have a 20 pixel border, top and bottom and ten pixel border left

35202
00:18:38,230 --> 00:18:39,250
and right.

35203
00:18:39,250 --> 00:18:46,510
And if you remember from the lesson this is achieved through that multi-value method of setting border

35204
00:18:46,510 --> 00:18:46,870
width.

35205
00:18:46,870 --> 00:18:50,110
So the first value is top and bottom.

35206
00:18:50,110 --> 00:18:53,890
And then after space we have the second value for the left and right.

35207
00:18:53,890 --> 00:18:59,900
And even if you hover over this, usually the code is quite helpful for pulling up the reference on

35208
00:18:59,900 --> 00:19:02,570
this and it tells you how the rules work.

35209
00:19:02,570 --> 00:19:03,980
So that's a quick tip.

35210
00:19:04,670 --> 00:19:11,900
Finally, we set the third div to have a ten pixel border and I wanted you to set the margins so that

35211
00:19:11,900 --> 00:19:14,360
they would each touch corner to corner.

35212
00:19:14,390 --> 00:19:18,020
Now that could be done either by trial and error.

35213
00:19:18,050 --> 00:19:24,290
Alternatively, you can also work it out because if you think about this first div right here, it's

35214
00:19:24,290 --> 00:19:29,990
got a width of 200 pixels, so this part is 200.

35215
00:19:29,990 --> 00:19:35,420
But in addition it's also got a border of ten pixels all around.

35216
00:19:35,420 --> 00:19:39,590
So then we have to add ten and ten here.

35217
00:19:39,770 --> 00:19:42,590
Now that takes us up to 220.

35218
00:19:42,590 --> 00:19:47,060
But in addition, remember that we added 20 pixels of padding all around.

35219
00:19:47,060 --> 00:19:51,080
So then there's 20 here and 20 here.

35220
00:19:51,080 --> 00:20:00,710
So then if we add it all up, 200 plus 20 plus 20 plus ten, ten, that ends up with 260 pixels.

35221
00:20:00,710 --> 00:20:08,630
So then we know that we have to push the second div over by 260 pixels and we can do that using the

35222
00:20:08,630 --> 00:20:13,610
margin left setting, which is how we manage to push this box over.

35223
00:20:13,610 --> 00:20:19,340
And in a similar way we can work out how much to push this third box as well.

35224
00:20:20,300 --> 00:20:26,330
I hope this challenge was sufficiently challenging enough for you, but don't worry if it's not because

35225
00:20:26,330 --> 00:20:31,430
there's way more challenging layouts are coming up in the rest of the course and you're going to be

35226
00:20:31,460 --> 00:20:37,010
able to flex your box model muscles in the coming sections as well.

35227
00:20:37,040 --> 00:20:42,740
But once you're ready and you've reviewed your code and fixed any errors, head over to the next lesson

35228
00:20:42,740 --> 00:20:45,590
where we've got the final project for the section.


35229
00:00:00,290 --> 00:00:00,680
All right.

35230
00:00:00,680 --> 00:00:07,070
So for the final project, we're going to be building a motivational poster website and we're going

35231
00:00:07,070 --> 00:00:09,000
to make our own memes.

35232
00:00:09,020 --> 00:00:11,880
You might have seen some of these around the Internet.

35233
00:00:11,900 --> 00:00:17,780
There are the serious ones which are based off these 90 seconds motivational posters where you have

35234
00:00:17,780 --> 00:00:23,280
some sort of title and you have some sort of motivational text like potential.

35235
00:00:23,300 --> 00:00:27,620
We all have the tools for greatness within us, and I believe that is true.

35236
00:00:27,620 --> 00:00:29,650
And you've got a cute little Arctic fox.

35237
00:00:29,660 --> 00:00:33,510
But also there are some pretty hilarious ones like Coolness.

35238
00:00:33,530 --> 00:00:36,410
You may be cool, but you'll never be for popped collars.

35239
00:00:36,410 --> 00:00:37,850
Cool like this guy.

35240
00:00:37,970 --> 00:00:43,850
So the goal is to make our own website where we can create our own motivational poster.

35241
00:00:44,030 --> 00:00:50,090
The important part of a motivational poster is there is a image that is going to be big.

35242
00:00:50,090 --> 00:00:53,870
There is a border around the image.

35243
00:00:53,870 --> 00:00:56,970
So we now know all about borders and we can do that.

35244
00:00:56,990 --> 00:01:04,690
We have a black background and that is easy because we know all about CSS color properties.

35245
00:01:04,709 --> 00:01:13,560
We have a big main title, which we're going to use a custom font for to mimic this font a little bit

35246
00:01:13,560 --> 00:01:14,250
better.

35247
00:01:14,250 --> 00:01:20,910
And finally, we have a paragraph at the bottom and we're going to figure out how we're going to center

35248
00:01:20,910 --> 00:01:26,850
things on the screen, how to add borders and how to apply basically everything that we've learned so

35249
00:01:26,850 --> 00:01:28,260
far in this section.

35250
00:01:28,620 --> 00:01:35,520
Go ahead and download the starting project files for the Motivation Meme Project and extract it and

35251
00:01:35,520 --> 00:01:38,100
then open it up inside vs code.

35252
00:01:38,310 --> 00:01:44,190
I've created the task in a sort of to do list breakdown for you.

35253
00:01:44,220 --> 00:01:49,740
Now the main thing is that it's your website, it's your project, and as with all the projects in the

35254
00:01:49,740 --> 00:01:52,920
course, it's totally up to you how you want to create it.

35255
00:01:52,920 --> 00:01:59,100
But there are some caveats and it's important that you touch all of the learning points.

35256
00:01:59,100 --> 00:02:06,690
So these six points are important, and after completing these six points, you can change your website,

35257
00:02:06,690 --> 00:02:12,120
you can mess with it however you like, but want to make sure that everything you've learned so far

35258
00:02:12,120 --> 00:02:15,150
has consolidated and it all makes sense.

35259
00:02:15,570 --> 00:02:23,040
We're going to use a custom font from Google called The Libre Baskerville, which looks somewhat similar

35260
00:02:23,040 --> 00:02:26,550
to the motivational main title font.

35261
00:02:26,910 --> 00:02:32,850
You should add your own image into the images folder under the assets folder.

35262
00:02:32,850 --> 00:02:38,760
I've got an example image in here for you just in case you want to use it, but I recommend putting

35263
00:02:38,760 --> 00:02:41,190
in your own images just for practice.

35264
00:02:41,280 --> 00:02:50,280
And that image should have a five pixel white border and the text should be center aligned and you should

35265
00:02:50,280 --> 00:02:54,060
adjust the margin so that the image and text are centered on the page.

35266
00:02:54,060 --> 00:03:01,050
Now, this is going to be the trickiest part because centering elements using CSS is a whole science

35267
00:03:01,050 --> 00:03:03,450
in itself, but we're going to do it simply.

35268
00:03:03,480 --> 00:03:09,990
We're going to horizontally center the div by giving that div a width of 50% to take up 50% of the screen.

35269
00:03:09,990 --> 00:03:13,620
And then if you think about it, there's only 25% left on each side.

35270
00:03:13,620 --> 00:03:19,770
So if we have a margin left of 20% on that div, then it should push it into the center.

35271
00:03:20,040 --> 00:03:25,680
In addition, you might find it useful to set the image to have a width of 100% so that it fills the

35272
00:03:25,680 --> 00:03:30,660
entire container div so that you're not having to center the image along with the div.

35273
00:03:30,690 --> 00:03:35,670
Some of these hints are only going to make sense once you get started writing the code for it, so don't

35274
00:03:35,670 --> 00:03:36,540
worry too much about it.

35275
00:03:36,540 --> 00:03:42,030
Now I'm just highlighting certain points in the to do so that when you get to it, to pay more attention

35276
00:03:42,030 --> 00:03:47,100
to these parts and these helpful tips, which you'll probably need because especially at this point,

35277
00:03:47,130 --> 00:03:52,860
number five, it's quite a difficult task and it will take some time for you to figure out how to get

35278
00:03:52,860 --> 00:03:54,630
it to look like this.

35279
00:03:55,380 --> 00:04:02,850
And if you want to push the div down vertically, then I recommend just adding a top margin to push

35280
00:04:02,850 --> 00:04:04,770
it down by a pixel amount.

35281
00:04:04,800 --> 00:04:10,590
It doesn't have to be spot bang in the middle of the center because as I said, that is a whole science

35282
00:04:10,590 --> 00:04:15,750
in itself and we're going to be covering it in coming sections, but it's just a little bit more complicated.

35283
00:04:15,750 --> 00:04:21,269
So we're going to judge it by eye for this project for now, in order to get something that looks like

35284
00:04:21,269 --> 00:04:29,340
the goal image, I recommend putting the H1, the paragraph and the image inside a div.

35285
00:04:29,370 --> 00:04:36,300
That way you can center the div on the screen and you won't have to mess with all three elements and

35286
00:04:36,300 --> 00:04:39,330
their centering, which is already a hard enough task.

35287
00:04:40,230 --> 00:04:49,710
Finally, you're going to use your developer doc reading skills and learn by yourself about a property

35288
00:04:49,710 --> 00:04:58,140
called text Transform and figure out how to make the H1 look uppercase like what I've got in the solution

35289
00:04:58,140 --> 00:04:59,640
goal website.

35290
00:05:00,130 --> 00:05:01,900
All of these elements are on screen.

35291
00:05:01,900 --> 00:05:07,660
We've got the white board around the image, we've got the black background, the white text, the custom

35292
00:05:07,660 --> 00:05:15,520
font, and our H1 is totally in uppercase without us having to type it in uppercase.

35293
00:05:15,520 --> 00:05:18,730
So that's where that text transform property comes in.

35294
00:05:18,730 --> 00:05:25,510
And notice how this entire content div is roughly somewhere in the center, horizontally and vertically,

35295
00:05:25,510 --> 00:05:26,800
just judging it by eye.

35296
00:05:26,830 --> 00:05:33,100
It's not perfect, but as long as you find the perfect avocado, everything else is easy in life.

35297
00:05:33,520 --> 00:05:40,420
Pause the video now and complete this project and once you're done, come back and I'm going to walk

35298
00:05:40,420 --> 00:05:41,980
through the solution code with you.

35299
00:05:44,810 --> 00:05:45,140
All right.

35300
00:05:45,140 --> 00:05:47,290
So hopefully that wasn't too hard.

35301
00:05:47,300 --> 00:05:56,570
If we take a look at the solution HTML, you can see that I've completed all of those tasks with a small

35302
00:05:56,690 --> 00:06:01,010
HTML and a small CSS file, so it shouldn't be too hard.

35303
00:06:01,160 --> 00:06:06,650
Now, some of the steps are pretty self-explanatory, but there's a couple of things I want to just

35304
00:06:06,650 --> 00:06:07,750
briefly touch on.

35305
00:06:07,760 --> 00:06:17,930
One is you will need the Google font links in the head section if you want to be able to have that custom

35306
00:06:17,930 --> 00:06:19,520
font on screen.

35307
00:06:19,520 --> 00:06:21,530
And this is the custom font.

35308
00:06:22,040 --> 00:06:29,600
In addition, we want to have all our elements inside a div so that we can style it all together.

35309
00:06:29,600 --> 00:06:32,090
And that's quite important in terms of positioning.

35310
00:06:32,090 --> 00:06:34,580
So I've created a class for the div.

35311
00:06:35,180 --> 00:06:41,450
In this case you could have also used an ID, but if you were going to extend this website then it's

35312
00:06:41,450 --> 00:06:42,920
safer to use a class.

35313
00:06:42,920 --> 00:06:46,380
So you might be able to reuse the CSS in the future.

35314
00:06:46,740 --> 00:06:54,570
The poster is the part that is more or less center aligned and we use that trick with setting its width

35315
00:06:54,570 --> 00:06:59,670
and setting its margin, using percentages to get it more or less in the horizontal center.

35316
00:06:59,670 --> 00:07:05,580
And then I simply set a 100 pixel margin top, just judging it by eye to get it somewhere in the middle.

35317
00:07:06,030 --> 00:07:16,200
And I added the custom font and the border to the image and made the image 100% wide so that it would

35318
00:07:16,200 --> 00:07:21,840
fit fully into that poster div if you had any problems.

35319
00:07:21,840 --> 00:07:26,910
This is a time where you can look at the solution code and look at your own code and see if there's

35320
00:07:26,910 --> 00:07:28,860
any fixes you want to make.

35321
00:07:28,890 --> 00:07:35,850
And once you have, then you can also modify the website any way you like to personalize it and make

35322
00:07:35,850 --> 00:07:36,720
it your own.



35323
00:00:00,060 --> 00:00:00,750
Hey guys,

35324
00:00:00,750 --> 00:00:05,330
welcome to Day 45 of 100 Days of Code. Now,

35325
00:00:05,330 --> 00:00:08,450
today, we're going to be getting back to coding with Python,

35326
00:00:08,900 --> 00:00:12,080
and we're going to be learning how to scrape the web for data

35327
00:00:12,320 --> 00:00:14,810
using a module called BeautifulSoup.

35328
00:00:15,770 --> 00:00:19,040
Now we've been working with APIs for quite a while now,

35329
00:00:19,550 --> 00:00:20,600
and we know that 

35330
00:00:20,630 --> 00:00:25,630
we can use a website's API to access their data or to interact with the

35331
00:00:26,120 --> 00:00:27,860
website using code.

35332
00:00:28,520 --> 00:00:32,810
But some websites don't have an API or their API

35333
00:00:32,810 --> 00:00:35,630
doesn't let us do all the things that we want to do.

35334
00:00:36,500 --> 00:00:40,460
So this is where we start thinking about using web scraping

35335
00:00:41,090 --> 00:00:44,540
where we look through the underlying HTML code

35336
00:00:44,570 --> 00:00:48,110
of a website to get hold of the information that we want.

35337
00:00:49,130 --> 00:00:52,880
So the aim of today is to learn how to make soup,

35338
00:00:53,390 --> 00:00:57,410
but not this kind of soup. We're going to be making BeautifulSoup.

35339
00:00:57,980 --> 00:00:59,960
What exactly is BeautifulSoup? Well,

35340
00:00:59,990 --> 00:01:04,989
it's a module that helps developers like us make sense of websites.

35341
00:01:06,170 --> 00:01:09,770
We could think of a lot of websites as a bit of a spaghetti soup,

35342
00:01:10,190 --> 00:01:14,000
even something seemingly as simple as the Google front page,

35343
00:01:14,270 --> 00:01:16,850
when you right click on it and view page source,

35344
00:01:17,120 --> 00:01:20,060
you can see that it's horrendously complicated.

35345
00:01:20,570 --> 00:01:25,100
And if you wanted to make sense of this webpage and pull out the relevant parts

35346
00:01:25,100 --> 00:01:25,933
of the data,

35347
00:01:26,270 --> 00:01:31,130
then you'll need an HTML parser like BeautifulSoup so that you can

35348
00:01:31,130 --> 00:01:36,130
find and pull out the HTML elements that you're interested in from this

35349
00:01:36,680 --> 00:01:39,140
soup of jumbled HTML code.

35350
00:01:39,770 --> 00:01:42,380
And once we've mastered this skill,

35351
00:01:42,500 --> 00:01:46,040
then we'll be able to take any website, for example,

35352
00:01:46,070 --> 00:01:48,980
Empire's 100 Greatest Movies Of All Time,

35353
00:01:49,220 --> 00:01:53,000
this is a huge list of a hundred movies that apparently everyone should have

35354
00:01:53,000 --> 00:01:54,950
watched at some point in their life,

35355
00:01:55,400 --> 00:01:58,460
and we can pull out the relevant parts to us

35356
00:01:58,700 --> 00:02:02,540
namely the title and the ranking of each movie

35357
00:02:02,840 --> 00:02:07,840
and we're going to use it to compile a list of movies that we have to watch so

35358
00:02:07,880 --> 00:02:11,390
that we can look at the list, cross out the ones that we've already seen,

35359
00:02:11,720 --> 00:02:16,280
and then pick at random one from the list so that we can watch all of the

35360
00:02:16,280 --> 00:02:19,550
hundred movies of all time. That's the goal.

35361
00:02:19,760 --> 00:02:24,290
And once you're ready head over to the next lesson and we're going to get started

35362
00:02:24,350 --> 00:02:25,850
using BeautifulSoup.


35363
00:00:00,480 --> 00:00:01,230
In this lesson,

35364
00:00:01,230 --> 00:00:06,230
we're going to get started using a library called Beautiful Soup to pass an HTML

35365
00:00:06,930 --> 00:00:08,280
file. Parsing

35366
00:00:08,280 --> 00:00:13,280
the HTML file is the first step to extracting the data contained in a website. To

35367
00:00:13,620 --> 00:00:17,160
get started, the first thing I want you to do is to head over to

35368
00:00:17,160 --> 00:00:21,480
the course resources and download the starting project for today.

35369
00:00:21,930 --> 00:00:26,010
It's called bs4-start and once you've extracted it and opened it in

35370
00:00:26,010 --> 00:00:30,600
PyCharm, then I want you to take a look inside. First, we've got an empty

35371
00:00:30,600 --> 00:00:31,800
main.py file

35372
00:00:31,830 --> 00:00:36,810
which we're going to write  in order to use Beautiful Soup and extract the data

35373
00:00:36,810 --> 00:00:41,670
that we want. And the data is going to come from this website.html.

35374
00:00:42,270 --> 00:00:46,590
Now, a really nice thing about PyCharm is when you have an HTML file,

35375
00:00:46,620 --> 00:00:49,620
you can always just click on your favorite browser icon here

35376
00:00:50,160 --> 00:00:52,770
and it will open up the website as it is.

35377
00:00:53,430 --> 00:00:58,430
And you can see that this is a simplified version of our HTML CV page that we

35378
00:00:59,130 --> 00:01:02,190
built on day 41. Now,

35379
00:01:02,220 --> 00:01:05,550
if you've skipped day 41 to 44

35380
00:01:05,580 --> 00:01:08,070
because you already know HTML and CSS,

35381
00:01:08,640 --> 00:01:11,190
then have a quick read through the HTML.

35382
00:01:11,520 --> 00:01:15,420
It's a very simple document with a bunch of different HTML tags,

35383
00:01:15,840 --> 00:01:18,030
attributes like class and ID,

35384
00:01:18,570 --> 00:01:23,190
and also a list. I've kept this as simple as possible

35385
00:01:23,220 --> 00:01:25,560
just so that it's easy for us to work through it

35386
00:01:25,890 --> 00:01:27,600
when we're trying to get hold of things

35387
00:01:27,630 --> 00:01:30,840
using Beautiful Soup. In the course resources,

35388
00:01:30,900 --> 00:01:34,380
I've also got a link to the Beautiful Soup documentation.

35389
00:01:34,860 --> 00:01:39,120
So this is where you can find out everything that you can do with Beautiful 

35390
00:01:39,120 --> 00:01:43,920
Soup. But I wanna walk you through some of the most commonly used components.

35391
00:01:44,610 --> 00:01:45,360
Beautiful Soup,

35392
00:01:45,360 --> 00:01:50,360
as they say, is a Python library for pulling data out of HTML and XML files.

35393
00:01:51,420 --> 00:01:56,190
So HTML and XML are both structural languages and they're responsible for

35394
00:01:56,190 --> 00:02:00,960
structuring data like the data in a website using these tags.

35395
00:02:01,680 --> 00:02:03,330
And the great thing about Beautiful Soup

35396
00:02:03,380 --> 00:02:07,850
is it's super easy to use, and it can save you hours or,

35397
00:02:07,910 --> 00:02:12,910
days of work to get hold of the data that you want from a particular website.

35398
00:02:13,520 --> 00:02:18,410
And you can see the documentation's also been translated by kind users into some

35399
00:02:18,440 --> 00:02:21,320
other languages as well. So if you find it easier,

35400
00:02:21,590 --> 00:02:24,170
then these languages might help you as well. Now,

35401
00:02:24,170 --> 00:02:29,170
the first thing I have to do here in my main.py is to actually get hold of

35402
00:02:30,290 --> 00:02:32,270
this particular file.

35403
00:02:32,840 --> 00:02:35,600
Now you might remember from previous lessons,

35404
00:02:35,660 --> 00:02:38,240
how we open a file in Python.

35405
00:02:38,900 --> 00:02:43,900
So have a quick think and see if you can figure out how to get a hold of the

35406
00:02:44,330 --> 00:02:49,330
content in this HTML file as a string or as a piece of text.

35407
00:02:50,060 --> 00:02:53,840
Pause the video and see if you can complete this challenge. Just as a hint,

35408
00:02:53,960 --> 00:02:57,380
you might need the keyword with and the 

35409
00:02:57,380 --> 00:02:58,330
keyword open.

35410
00:03:01,030 --> 00:03:04,660
All right. So the way we do this, as we say with open,

35411
00:03:05,020 --> 00:03:09,010
and then we provide the name of the file, which is website.html.

35412
00:03:09,520 --> 00:03:13,540
And we can open this as a alias name which we'll call file,

35413
00:03:14,140 --> 00:03:18,580
and now we have access to this file and we can say file.read.

35414
00:03:19,240 --> 00:03:21,010
Now, once we've read this file,

35415
00:03:21,040 --> 00:03:24,730
we can save this to a variable

35416
00:03:24,730 --> 00:03:29,590
which we'll call contents. And once we've gotten hold of these contents,

35417
00:03:29,770 --> 00:03:32,740
then we can start using Beautiful Soup.

35418
00:03:33,460 --> 00:03:36,940
So as always, we always start with the import,

35419
00:03:37,120 --> 00:03:42,120
so the name of the library that we're going to install is called bs4

35420
00:03:43,600 --> 00:03:45,850
and this is Beautiful Soup version four

35421
00:03:45,970 --> 00:03:49,210
which is currently the latest version of Beautiful Soup.

35422
00:03:49,870 --> 00:03:53,620
And from this particular package, we want to import the class

35423
00:03:53,620 --> 00:03:57,130
which is called Beautiful Soup. Now,

35424
00:03:57,160 --> 00:04:00,460
if you downloaded this project from the course resources,

35425
00:04:00,820 --> 00:04:05,820
you should see that there's no errors underlining this line because bs4 has

35426
00:04:06,430 --> 00:04:09,610
already been installed. If you see some squiggly underlines,

35427
00:04:09,670 --> 00:04:13,660
just click on the red light bulb and install the required module

35428
00:04:13,750 --> 00:04:17,230
which is called bs4. Now,

35429
00:04:17,230 --> 00:04:20,380
once we've got hold of our BeautifulSoup class

35430
00:04:20,500 --> 00:04:24,220
then we're ready to make soup. In order to make soup,

35431
00:04:24,280 --> 00:04:29,280
we use our BeautifulSoup class and we create a new object from that class

35432
00:04:29,770 --> 00:04:34,360
and we pass in a string. So this is the markup,

35433
00:04:34,720 --> 00:04:39,460
and that's the same M that you find in HTML and XML.

35434
00:04:39,760 --> 00:04:44,760
It's the hypertext markup language and the extensible markup language.

35435
00:04:47,170 --> 00:04:51,580
So the markup refers to basically all of this.

35436
00:04:52,570 --> 00:04:55,480
We've already gotten hold of it through this contents

35437
00:04:55,720 --> 00:04:57,520
so let's go ahead and pass that in.

35438
00:04:58,300 --> 00:05:02,680
So now that we've specified what it is we want to use to create our soup,

35439
00:05:03,370 --> 00:05:06,340
the next thing we have to provide is the parser.

35440
00:05:06,850 --> 00:05:09,370
This is going to help the BeautifulSoup module

35441
00:05:09,430 --> 00:05:14,430
understand what language this particular content is structured in.

35442
00:05:15,370 --> 00:05:18,490
As they mentioned, it can parse HTML and XML

35443
00:05:18,700 --> 00:05:22,660
so we have to tell it what particular type of document we've got.

35444
00:05:23,260 --> 00:05:26,920
And the easiest way is just to use the Python

35445
00:05:27,040 --> 00:05:28,420
html.parser.

35446
00:05:29,650 --> 00:05:34,030
So after we've parsed in the text that we want to turn into soup,

35447
00:05:34,600 --> 00:05:39,600
we're going to add the parser as html.parser.

35448
00:05:41,740 --> 00:05:45,940
And this is going to help Beautiful Soup understand these contents.

35449
00:05:47,200 --> 00:05:50,590
Now, depending on the website that you're working with, occasionally,

35450
00:05:50,590 --> 00:05:55,390
you might need to use the lxml's parser. And do that,

35451
00:05:55,480 --> 00:05:59,990
all you have to do is say import lxml

35452
00:06:00,290 --> 00:06:05,290
and then install this particular package, and here in a string

35453
00:06:06,290 --> 00:06:10,730
instead of using html.parser, you can use lxml.

35454
00:06:11,450 --> 00:06:16,400
And this is basically just a different way of parsing or understanding the

35455
00:06:16,400 --> 00:06:18,380
content that you're passing to Beautiful Soup.

35456
00:06:18,890 --> 00:06:23,750
And I found that with certain websites the html.parser might not work

35457
00:06:23,750 --> 00:06:26,990
and you might get an error that tells you something about your parser not

35458
00:06:26,990 --> 00:06:31,070
working. So then you might consider using lxml instead.

35459
00:06:32,450 --> 00:06:36,710
So this one line of code basically completes our parsing.

35460
00:06:37,280 --> 00:06:42,280
And this soup is now an object that allows us to tap in to various parts of the

35461
00:06:43,550 --> 00:06:47,270
website, but using Python code. For example,

35462
00:06:47,270 --> 00:06:51,470
if I wanted this title tag out of this whole website,

35463
00:06:51,770 --> 00:06:55,610
all I have to do is say soup.title.

35464
00:06:57,680 --> 00:07:01,760
And now if I print this soup.title,

35465
00:07:02,360 --> 00:07:07,360
you can see that we'll get the title tag being printed out in its entirety.

35466
00:07:09,710 --> 00:07:14,710
Once Beautiful Soup has made sense of this website by parsing the HTML,

35467
00:07:17,300 --> 00:07:19,460
we can now tap into that object

35468
00:07:19,520 --> 00:07:23,510
which is the HTML code as if it were a Python object.

35469
00:07:23,840 --> 00:07:25,730
So we can tap into the title,

35470
00:07:26,000 --> 00:07:30,200
but we can dig even deeper. Instead of just tapping into the title,

35471
00:07:30,500 --> 00:07:35,500
we can also get hold of other things like the title.name,

35472
00:07:36,200 --> 00:07:41,200
and this is going to give us the name of that particular title tag.

35473
00:07:41,960 --> 00:07:44,900
So remember this gave us the title tag,

35474
00:07:44,930 --> 00:07:49,930
so all of this, and this next stage drilling even deeper into the name of this

35475
00:07:50,900 --> 00:07:54,200
tag, you'll see that it gives us title.

35476
00:07:54,710 --> 00:07:57,590
So the name of this title tag is called title,

35477
00:07:58,250 --> 00:08:01,460
and we can also get hold of the string

35478
00:08:01,700 --> 00:08:06,700
which is contained in the title tag by simply using .title.string.

35479
00:08:07,280 --> 00:08:11,840
And you can see this is the actual string that's inside that title tag.

35480
00:08:13,280 --> 00:08:16,130
If we think about it, this entire soup

35481
00:08:16,190 --> 00:08:19,520
object now represents our HTML code.

35482
00:08:20,030 --> 00:08:24,440
So I can also actually just print out the entire soup object.

35483
00:08:24,950 --> 00:08:29,180
And you can see that this is basically just all HTML.

35484
00:08:29,990 --> 00:08:34,100
And if you want to, there's even a method called prettify

35485
00:08:34,460 --> 00:08:37,820
which will indent your soup HTML code.

35486
00:08:38,120 --> 00:08:43,120
So now, compared this where everything's all on one line, with this prettified

35487
00:08:43,909 --> 00:08:47,900
version where everything's all indented properly and easier to read.

35488
00:08:49,130 --> 00:08:53,780
In addition to getting the title tag, we can also get hold of,

35489
00:08:53,810 --> 00:08:56,700
for example, the a tag.

35490
00:08:57,060 --> 00:09:02,060
So this is going to give us the first anchor tag that it finds in our website,

35491
00:09:02,700 --> 00:09:05,220
which happens to be this one right here.

35492
00:09:06,180 --> 00:09:11,180
And we can swap that with maybe the first li or the first paragraph.

35493
00:09:14,910 --> 00:09:18,450
Essentially what we're doing with beautiful soup is we're just drilling down

35494
00:09:18,480 --> 00:09:23,370
into this HTML file, finding the HTML tags that we're interested in,

35495
00:09:23,850 --> 00:09:26,040
and then getting hold of the

35496
00:09:26,100 --> 00:09:30,660
either name of the tag or the actual text of the tag.

35497
00:09:31,470 --> 00:09:36,470
But what if we wanted all of the paragraphs or all of the anchor tags in our

35498
00:09:37,380 --> 00:09:41,880
website, how would we do that? In the next lesson,

35499
00:09:42,030 --> 00:09:47,030
we're going to dive deeper into searching through websites for all of the

35500
00:09:47,190 --> 00:09:49,500
components that we're looking for. For example,

35501
00:09:49,740 --> 00:09:52,410
all of the P tags or all of the anchor tags.

35502
00:09:52,770 --> 00:09:57,770
And we're going to see how we can refine our search and specify exactly what it

35503
00:09:58,140 --> 00:10:02,610
is that we want. So for all of that and more, I'll see you on the next lesson.


35504
00:00:00,210 --> 00:00:02,190
Now there's two things you'll notice here.

35505
00:00:02,580 --> 00:00:06,900
One is we're only getting hold of the first, for example,

35506
00:00:06,900 --> 00:00:11,730
p tag or a tag, but we're not getting hold of any of the other ones.

35507
00:00:12,120 --> 00:00:14,970
So what if we wanted to get all of the anchor tags,

35508
00:00:15,000 --> 00:00:18,420
all of the paragraphs in our website? Well,

35509
00:00:18,450 --> 00:00:23,450
then we can use a function that comes with Beautiful Soup called find_all.

35510
00:00:24,570 --> 00:00:27,990
This is probably one of the most commonly used methods when it comes to

35511
00:00:27,990 --> 00:00:28,823
Beautiful Soup 

35512
00:00:29,730 --> 00:00:34,730
And here we can search by a bunch of things. We could search by name,

35513
00:00:34,950 --> 00:00:35,783
so we can say

35514
00:00:35,790 --> 00:00:40,790
find all of the tags where the tag name is equal to a.

35515
00:00:43,080 --> 00:00:46,050
So this is going to give us all of the anchor tags,

35516
00:00:46,190 --> 00:00:47,023
right?

35517
00:00:49,220 --> 00:00:50,840
And if I print that,

35518
00:00:51,140 --> 00:00:56,140
you can see that it gives us a list and it gives us all three of the links that

35519
00:00:57,650 --> 00:00:59,450
exists in our website.

35520
00:01:00,350 --> 00:01:03,290
And if I change this to p for example,

35521
00:01:03,470 --> 00:01:08,470
then it'll find all of the paragraphs and we can change this to basically any of

35522
00:01:09,650 --> 00:01:13,850
the tag names in our website. Now,

35523
00:01:13,850 --> 00:01:16,280
what if we wanted to drill a little bit deeper?

35524
00:01:16,820 --> 00:01:19,190
We've got a list of all the anchor tags,

35525
00:01:19,490 --> 00:01:23,870
but what if I only wanted the text in that anchor tag?

35526
00:01:23,870 --> 00:01:28,730
So I just wanted this part. Well, how would I get hold of all of them? Well,

35527
00:01:28,760 --> 00:01:31,730
firstly, we would probably need a for loop.

35528
00:01:32,030 --> 00:01:37,030
So we could say for tag in all anchor tags and we can loop through all of those

35529
00:01:39,560 --> 00:01:44,560
anchor tags and use a method called tag.getText.

35530
00:01:46,220 --> 00:01:49,040
And now if I go ahead and print this,

35531
00:01:49,130 --> 00:01:54,130
you can see that it's basically going to print out all three of the text that is

35532
00:01:55,490 --> 00:01:59,810
in all three of the anchor tags that it found. Now,

35533
00:01:59,810 --> 00:02:02,420
what if I didn't want to get the text,

35534
00:02:02,510 --> 00:02:07,340
but instead I wanted to get hold of the actual href,

35535
00:02:07,370 --> 00:02:11,870
so the link, right? So let's print our all_anchor_tags again.

35536
00:02:12,650 --> 00:02:13,483
All right.

35537
00:02:15,800 --> 00:02:20,150
And you can see that there is a attribute called href

35538
00:02:20,420 --> 00:02:25,190
which stores the actual link that the tag goes to.

35539
00:02:25,700 --> 00:02:30,200
So very often, you'll want to isolate that link. So how would you do that?

35540
00:02:30,800 --> 00:02:31,280
Well,

35541
00:02:31,280 --> 00:02:36,280
you can tap into each of the tags and you can use another method called get.

35542
00:02:38,390 --> 00:02:42,140
And here you can get the value of any of the attributes.

35543
00:02:42,590 --> 00:02:46,250
So if I pass in href here and I print this,

35544
00:02:46,940 --> 00:02:51,200
then it's going to give me all of the links and it's not going to give me

35545
00:02:51,200 --> 00:02:54,080
anything else. It's basically just stripped out the link

35546
00:02:54,200 --> 00:02:59,090
which is what I'm interested in. Similarly, when we use find_all

35547
00:02:59,920 --> 00:03:04,920
we can also find things by their attribute, so the moment we're searching by

35548
00:03:05,410 --> 00:03:08,950
the tag name, but we can also get hold of things

35549
00:03:09,040 --> 00:03:11,860
by the attribute name. For example,

35550
00:03:11,860 --> 00:03:16,780
if I wanted to get hold of this item, I can of course search for an h1.

35551
00:03:17,080 --> 00:03:19,660
But what if I had lots of h1s? Well,

35552
00:03:19,660 --> 00:03:24,430
then I could isolate it by this ID. So I could say,

35553
00:03:27,210 --> 00:03:27,990
soup

35554
00:03:27,990 --> 00:03:32,990
.find_all which will give me a list of all of the items that match the search

35555
00:03:34,680 --> 00:03:35,513
query,

35556
00:03:35,760 --> 00:03:40,760
or I can use the find method to only find the first item that matches the query.

35557
00:03:42,900 --> 00:03:45,450
In my case, there's only one thing I'm looking for.

35558
00:03:45,690 --> 00:03:50,610
And this particular tag has a name of h1

35559
00:03:51,270 --> 00:03:56,270
but it's also got a ID of name.

35560
00:03:58,440 --> 00:03:59,280
As you can see,

35561
00:03:59,520 --> 00:04:03,510
this ID is equal to name and it's also an h1 tag.

35562
00:04:04,110 --> 00:04:07,290
So this will give us that particular element.

35563
00:04:07,380 --> 00:04:12,380
So if I print out this heading and let's comment out everything else,

35564
00:04:16,920 --> 00:04:21,600
then now you can see I've just isolated that one h1.

35565
00:04:22,260 --> 00:04:25,830
And this also means if I just add another h1 here,

35566
00:04:26,130 --> 00:04:26,963
...

35567
00:04:29,220 --> 00:04:31,080
and I run this code again,

35568
00:04:31,350 --> 00:04:36,150
that is not going to show up because I've said it has to have a name of h1

35569
00:04:36,570 --> 00:04:40,020
and an ID that matches this particular value.

35570
00:04:41,670 --> 00:04:42,900
Now, as you can imagine,

35571
00:04:42,900 --> 00:04:47,040
you can also do the same thing with the class attribute.

35572
00:04:47,640 --> 00:04:49,110
So we can say,

35573
00:04:52,920 --> 00:04:53,430
...

35574
00:04:53,430 --> 00:04:56,520
soup.find because again, I'm only looking for one.

35575
00:04:57,240 --> 00:05:01,290
And the thing that I'm looking for has a name

35576
00:05:01,680 --> 00:05:04,290
which is a h3

35577
00:05:04,380 --> 00:05:05,213
...

35578
00:05:07,140 --> 00:05:12,140
but it's also got a class that's equal to heading.

35579
00:05:13,200 --> 00:05:17,220
So I'm just going to copy that and paste that in here. Now,

35580
00:05:17,250 --> 00:05:22,250
one of the things you'll get here is an error because this class keyword is a

35581
00:05:23,700 --> 00:05:25,710
reserved keyword in Python.

35582
00:05:26,190 --> 00:05:29,100
And what that means is that it's a special word

35583
00:05:29,370 --> 00:05:34,170
which can only be used for creating classes. Now, in this case,

35584
00:05:34,200 --> 00:05:38,100
we're definitely not creating a class or an object here. Instead,

35585
00:05:38,100 --> 00:05:39,990
we're trying to tap into an attribute.

35586
00:05:40,470 --> 00:05:43,410
So in order to not clash with the class keyword,

35587
00:05:43,680 --> 00:05:46,980
this attribute is actually called class_re.

35588
00:05:48,330 --> 00:05:52,920
Now it's going to look for all of the h3s where the class attribute is

35589
00:05:52,920 --> 00:05:54,360
equal to heading.

35590
00:05:54,970 --> 00:05:59,970
Let's go ahead and print this section_heading and you should see now we'll get that 

35591
00:06:01,220 --> 00:06:05,810
h3 with the class of heading show up. And again,

35592
00:06:05,810 --> 00:06:09,080
if we wanted to get hold of the text

35593
00:06:09,110 --> 00:06:14,060
that's contained in that h3, then we simply use the getText method,

35594
00:06:14,600 --> 00:06:19,490
or if we want to know the name of that particular tag,

35595
00:06:19,550 --> 00:06:21,080
then we can say .name.

35596
00:06:23,920 --> 00:06:24,370
Okay.

35597
00:06:24,370 --> 00:06:29,230
And if we want to get hold of the value of an attribute, for example,

35598
00:06:29,260 --> 00:06:32,680
get the class value,

35599
00:06:32,830 --> 00:06:36,430
then we can do something like this. Now,

35600
00:06:36,460 --> 00:06:41,460
while that's a pretty good way of selecting elements from the entire website,

35601
00:06:42,130 --> 00:06:46,360
there's certain cases where it might not work. For example,

35602
00:06:46,990 --> 00:06:51,100
at the moment here, we've got our three anchor tags.

35603
00:06:51,640 --> 00:06:55,300
If we wanted to get hold of a specific anchor tag,

35604
00:06:55,540 --> 00:06:59,950
let's say we wanted this anchor tag, then what do we do?

35605
00:07:00,340 --> 00:07:00,640
Well,

35606
00:07:00,640 --> 00:07:05,640
then we could just simply find all of the anchor tags and then find the first

35607
00:07:06,820 --> 00:07:09,280
one. But as you can imagine,

35608
00:07:09,310 --> 00:07:12,400
this is a incredibly simple website.

35609
00:07:12,700 --> 00:07:15,490
Most websites will have thousands

35610
00:07:15,520 --> 00:07:19,000
if not tens of thousands of links. In that situation,

35611
00:07:19,180 --> 00:07:24,180
it's really hard to know which particular link you want from the list of all of

35612
00:07:24,880 --> 00:07:25,713
the anchor tags.

35613
00:07:26,320 --> 00:07:31,320
So we want to have a way where we can drill down into a particular element.

35614
00:07:32,440 --> 00:07:35,770
What's unique about this particular anchor tag? Well,

35615
00:07:35,800 --> 00:07:40,800
it sits inside a strong tag and it sits inside an emphasis tag and it sits

35616
00:07:41,830 --> 00:07:46,390
inside a paragraph tag, which itself is in the body.

35617
00:07:47,080 --> 00:07:52,080
We can narrow it down using these steps. In our current website,

35618
00:07:52,540 --> 00:07:57,340
nowhere else is there an anchor tag that sits inside a paragraph tag.

35619
00:07:57,940 --> 00:08:02,940
And you'll remember from our previous lessons on CSS that you can use CSS

35620
00:08:03,670 --> 00:08:08,670
selectors in order to narrow down on a particular element in order to specify

35621
00:08:09,580 --> 00:08:13,600
its style. And if we were to write CSS code,

35622
00:08:15,370 --> 00:08:17,680
then it would look something like this.

35623
00:08:19,000 --> 00:08:24,000
So we would select first the paragraph and then we would select the anchor tag

35624
00:08:24,670 --> 00:08:29,670
and then we can specify what the style should be

35625
00:08:32,200 --> 00:08:32,830
.

35626
00:08:32,830 --> 00:08:34,690
Now. When, we're using  Beautiful Soup,

35627
00:08:34,840 --> 00:08:37,990
we can also use the CSS selectors.

35628
00:08:38,620 --> 00:08:43,270
I can get hold of that company URL by simply saying soup,

35629
00:08:43,720 --> 00:08:48,370
and instead of using find or find_all, I'm going to use select_one.

35630
00:08:49,210 --> 00:08:54,210
There's select and select_one. Select_one will give us the first matching

35631
00:08:54,430 --> 00:08:58,620
item and select will give us all of the matching items in a list.

35632
00:08:59,280 --> 00:09:04,050
Now we get to specify the selector as a string. And again,

35633
00:09:04,080 --> 00:09:07,020
I'm going to use the same selector that I showed you before.

35634
00:09:07,350 --> 00:09:11,820
So we're looking for a a tag  which sits inside p tag.

35635
00:09:12,240 --> 00:09:17,040
And this string is the CSS selector. So you can write anything in here

35636
00:09:17,040 --> 00:09:21,810
really. This means that we'll be able to get that anchor tag.

35637
00:09:22,080 --> 00:09:27,080
And then once I've gotten hold of the company URL and print it out,

35638
00:09:27,720 --> 00:09:31,290
you can see its that exact anchor tag that we wanted.

35639
00:09:32,610 --> 00:09:36,270
We don't have to just stick to the HTML selectors.

35640
00:09:36,300 --> 00:09:40,890
You can also use the class or the ID in your CSS selector.

35641
00:09:41,280 --> 00:09:44,220
So remember, to select on an ID,

35642
00:09:44,520 --> 00:09:47,550
we use the pound sign. So let's say

35643
00:09:47,880 --> 00:09:51,720
we want to get hold of this h1, which has an ID of name,

35644
00:09:51,990 --> 00:09:53,820
we can say #name,

35645
00:09:54,180 --> 00:09:58,740
and now this is going to be equal to my name.

35646
00:09:59,160 --> 00:10:01,740
And if I now run it, you can see that last one,

35647
00:10:01,950 --> 00:10:06,570
the element that was picked out is the h1 with the ID of name.

35648
00:10:07,650 --> 00:10:12,210
And finally you can use a CSS selector to select an element by class.

35649
00:10:12,390 --> 00:10:16,680
So for example, here, we've got heading and here we've got heading as well.

35650
00:10:17,160 --> 00:10:22,160
So if we want to select all of the elements that have a class of heading,

35651
00:10:22,980 --> 00:10:26,940
then we could say soup.select so this will give us a list

35652
00:10:27,060 --> 00:10:32,060
and then the selector is the first item that goes into the method.

35653
00:10:32,520 --> 00:10:37,470
So similar to this, we can have this keyword argument there or we can delete it.

35654
00:10:38,070 --> 00:10:43,070
And this selector will be using the .heading in order to select the element

35655
00:10:45,060 --> 00:10:47,130
that has a class of heading.

35656
00:10:49,410 --> 00:10:53,430
And this is now going to be a list if we print it out.

35657
00:10:55,620 --> 00:10:56,580
Right here.

35658
00:10:56,630 --> 00:10:58,530
So,

35659
00:10:58,880 --> 00:11:03,500
you can use everything that you've learned about CSS selectors to select a

35660
00:11:03,500 --> 00:11:06,560
particular item out of an HTML file.

35661
00:11:07,040 --> 00:11:11,330
And this is usually really useful because a lot of these elements will be nested

35662
00:11:11,330 --> 00:11:14,600
inside divs and the div will have an ID

35663
00:11:14,870 --> 00:11:19,190
and then all you have to do is to narrow down on the div and then narrow down on the

35664
00:11:19,190 --> 00:11:20,023
element you want.

35665
00:11:20,240 --> 00:11:25,240
So you can basically drill through using CSS selectors to get to any item you

35666
00:11:26,180 --> 00:11:27,260
want on the page.

35667
00:11:28,460 --> 00:11:33,460
Now that we've looked at how to find various items from HTML using Beautiful

35668
00:11:33,980 --> 00:11:37,610
Soup, in the next lesson, I've got a quiz for you

35669
00:11:37,910 --> 00:11:42,910
for you to have a go and have some practice at selecting and finding elements

35670
00:11:43,850 --> 00:11:46,760
from an HTML file using Beautiful Soup.

35671
00:11:47,240 --> 00:11:50,330
So for all of that and more, head over to the next lesson.


35672
00:00:00,420 --> 00:00:05,420
In the last lesson, we got started using Beautiful Soup and we saw how we could

35673
00:00:05,430 --> 00:00:10,430
use it to parse through the HTML of a website and pull out the pieces that we're

35674
00:00:10,560 --> 00:00:11,393
interested in.

35675
00:00:12,210 --> 00:00:16,920
Now it's no fun scraping a website that you've already got access to locally.

35676
00:00:17,490 --> 00:00:21,900
It's much better if we can get hold of something that's currently live on the

35677
00:00:21,900 --> 00:00:26,520
internet. So I'm going to go ahead and comment out all of this code,

35678
00:00:27,960 --> 00:00:32,960
and I'm going to be using Beautiful Soup to get hold of a live website and grab

35679
00:00:33,900 --> 00:00:34,800
data from it.

35680
00:00:35,580 --> 00:00:40,170
And the website that we're going to be using is the YCombinator's Hacker

35681
00:00:40,170 --> 00:00:41,003
News website.

35682
00:00:41,670 --> 00:00:46,650
This is where anybody can post a link to a news piece that they've discovered

35683
00:00:46,650 --> 00:00:51,300
that's tech related, or you could show off things that you've built.

35684
00:00:51,660 --> 00:00:52,200
For example,

35685
00:00:52,200 --> 00:00:56,430
I've just been looking at this guy's website that he built called My Desk Tour

35686
00:00:57,030 --> 00:00:59,760
where you can post a picture of your desk setup,

35687
00:01:00,150 --> 00:01:04,110
and you can see all of the tools and gear that they've got.

35688
00:01:04,860 --> 00:01:08,160
So we're going to be scraping the main Hacker News website

35689
00:01:08,190 --> 00:01:10,980
which is under this particular URL.

35690
00:01:11,520 --> 00:01:15,450
And this is usually where I go to find the latest tech news.

35691
00:01:16,200 --> 00:01:20,760
We're going to copy this URL, and we're going to go back to our main.py.

35692
00:01:21,270 --> 00:01:25,050
And in order to download the data from that website,

35693
00:01:25,080 --> 00:01:28,860
we're going to be using our handy friend, which is requests.

35694
00:01:29,520 --> 00:01:34,520
Now requests allows us to get hold off of the data from a particular URL,

35695
00:01:36,060 --> 00:01:39,240
which in this case is news.ycombinator.com.

35696
00:01:40,500 --> 00:01:43,080
And once we've made that request,

35697
00:01:43,110 --> 00:01:48,110
then we can save the data that we get back in a response variable.

35698
00:01:49,070 --> 00:01:50,840
And once we've got the response,

35699
00:01:50,870 --> 00:01:54,350
we can actually print out the text of the response

35700
00:01:54,890 --> 00:01:59,890
and this is basically equivalent to what we did when we opened up our HTML file

35701
00:02:00,590 --> 00:02:04,040
and we read the file contents, the text of the file.

35702
00:02:04,700 --> 00:02:06,950
So now if I go ahead and run this,

35703
00:02:07,010 --> 00:02:10,850
then you can see that it's going to print out loads of stuff,

35704
00:02:11,150 --> 00:02:15,860
but this is basically the code that represents this particular page.

35705
00:02:16,310 --> 00:02:19,700
So in fact, if you right click and click view page source,

35706
00:02:19,730 --> 00:02:24,470
you'll see that this is exactly the same HTML code that we're getting back over

35707
00:02:24,470 --> 00:02:28,790
here. So we don't actually want all of this jumbled mess.

35708
00:02:29,180 --> 00:02:34,180
What we're more interested in is the specific titles and the links

35709
00:02:34,760 --> 00:02:37,100
for each of these pieces.

35710
00:02:37,730 --> 00:02:41,480
It shows by default 30 of the top articles,

35711
00:02:41,870 --> 00:02:43,940
and this is ranked by an algorithm.

35712
00:02:43,970 --> 00:02:48,970
So it's most recent and also getting a lot of traction,

35713
00:02:49,040 --> 00:02:50,420
so a lot of upvotes,

35714
00:02:50,840 --> 00:02:55,730
but it doesn't represent the most upvoted items. So you can see here, in fact,

35715
00:02:55,760 --> 00:02:58,340
the most upvoted at least today anyways,

35716
00:02:58,430 --> 00:03:01,210
is Mozilla laying off of 250 employees.

35717
00:03:01,960 --> 00:03:06,960
So what if I wanted to get hold of the article title and the link of the post

35718
00:03:07,840 --> 00:03:10,300
from this page that has the highest point.

35719
00:03:10,690 --> 00:03:14,590
I don't want to have to manually check all of this. I want to do it with code.

35720
00:03:15,280 --> 00:03:18,040
So let's go ahead and scrape it. Now,

35721
00:03:18,070 --> 00:03:21,970
if I right click on each of these titles and I click on inspect,

35722
00:03:22,420 --> 00:03:26,530
then it takes me to the precise line of code in the HTML

35723
00:03:26,560 --> 00:03:30,070
that's responsible for rendering this component.

35724
00:03:30,550 --> 00:03:34,210
This is actually a anchor tag, so that's the

35725
00:03:34,240 --> 00:03:39,240
a tag. And the text in the anchor tag is the title of the article,

35726
00:03:41,470 --> 00:03:45,430
and then the href is the link that will take me to the actual story. So

35727
00:03:45,460 --> 00:03:47,230
if I click on this, you can see

35728
00:03:47,230 --> 00:03:51,820
it takes me to the actual news piece about Joan Feynman.

35729
00:03:52,960 --> 00:03:54,880
So what about this point? Well,

35730
00:03:54,880 --> 00:03:57,850
let's go ahead and right click on it and click inspect.

35731
00:03:58,180 --> 00:04:03,180
You can see this is in a span and it has a class of score while this title is in

35732
00:04:06,910 --> 00:04:10,570
a a ref and it has a class of story link.

35733
00:04:11,170 --> 00:04:13,420
So with those two pieces of information,

35734
00:04:13,570 --> 00:04:17,350
we can use Beautiful Soup to scrape all of the titles,

35735
00:04:17,500 --> 00:04:20,019
all of the links and all of their points.

35736
00:04:20,470 --> 00:04:24,550
And we can compare all those points and figure out which one has the highest

35737
00:04:24,550 --> 00:04:28,030
point on this page. So let's go ahead and do that.

35738
00:04:29,020 --> 00:04:33,310
So I'm gonna save the yc_webpage as the response.text,

35739
00:04:34,300 --> 00:04:38,710
and then I'm going to use Beautiful Soup to parse that webpage.

35740
00:04:39,220 --> 00:04:40,480
So BeautifulSoup

35741
00:04:40,540 --> 00:04:45,540
and then I'm going to pass in the actual HTML document that we want to parse.

35742
00:04:45,910 --> 00:04:48,220
So this is the YC webpage,

35743
00:04:48,820 --> 00:04:52,750
and then we provide the method to which we're going to parse it.

35744
00:04:52,750 --> 00:04:56,890
So html.parser, with an ER at the end.

35745
00:04:57,580 --> 00:05:01,930
And this is our soup. Once we've created our soup,

35746
00:05:02,620 --> 00:05:06,580
the next step is actually to dig in the soup and find the parts that we want.

35747
00:05:06,730 --> 00:05:11,290
So if, for example, if I want to get hold of the title of all of that,

35748
00:05:11,290 --> 00:05:16,060
then I can just say print soup.title. And now you'll see

35749
00:05:16,060 --> 00:05:19,000
it gives me the title which is Hacker News.

35750
00:05:19,780 --> 00:05:24,100
And that's the same as what you see here in the tab bar.

35751
00:05:24,910 --> 00:05:26,710
Now, what if I didn't want the title?

35752
00:05:26,710 --> 00:05:31,150
What if I actually wanted to get hold of this text here,

35753
00:05:31,750 --> 00:05:34,120
the title of each of these articles?

35754
00:05:34,810 --> 00:05:39,810
See if you can figure out how to get hold of this text and print it out in your

35755
00:05:40,330 --> 00:05:44,590
code. Remember it has the class that's a story link,

35756
00:05:44,950 --> 00:05:46,360
and it's an anchor tag.

35757
00:05:46,960 --> 00:05:50,410
Pause the video and see if you can get this title,

35758
00:05:50,590 --> 00:05:53,380
so yours might be different from what I've got on screen of course.

35759
00:05:53,440 --> 00:05:57,590
It depends on what's showing up on Hacker News on the day you are doing this.

35760
00:05:58,010 --> 00:06:02,810
But get the title of the first article printed out using BeautifulSoup.

35761
00:06:03,490 --> 00:06:04,323
Okay.

35762
00:06:05,800 --> 00:06:08,920
All right. What we want to do is we want to use find.

35763
00:06:09,430 --> 00:06:14,430
So we're going to find the first instance from this webpage where the actual

35764
00:06:15,850 --> 00:06:20,080
name of the tag is equal to a, so that's an anchor tag,

35765
00:06:20,770 --> 00:06:25,770
and then the class is equal to the story link.

35766
00:06:27,250 --> 00:06:29,530
So I'm just gonna copy that and paste it in.

35767
00:06:30,220 --> 00:06:34,600
Remember that in order to not clash with the reserved class keyword,

35768
00:06:34,630 --> 00:06:37,210
we have to add a underscore afterwards.

35769
00:06:38,200 --> 00:06:41,350
Now this should be our article tag.

35770
00:06:42,100 --> 00:06:44,230
And if we go ahead and print it,

35771
00:06:44,470 --> 00:06:49,470
then you can see that we get this exact anchor tag.

35772
00:06:50,350 --> 00:06:54,130
But if we want to get hold of the text that's actually in the anchor tag,

35773
00:06:54,190 --> 00:06:58,450
then we have to go one step further and call the getText method

35774
00:06:58,570 --> 00:07:03,190
that's also from Beautiful Soup. So now when I run that, you can see

35775
00:07:03,310 --> 00:07:06,670
I only get the actual text of the article.

35776
00:07:07,510 --> 00:07:12,310
Let's work on some of the other pieces. So this is the article text.

35777
00:07:13,840 --> 00:07:18,840
And then if we want to get hold of the article_link and the article_upvotes.

35778
00:07:22,300 --> 00:07:26,020
See if you can figure out how to complete these two parts as well.

35779
00:07:26,200 --> 00:07:30,880
So we want the HTML link that is, of course, all of this HTTP,

35780
00:07:30,880 --> 00:07:34,330
et cetera. And then we also want to get hold of the upvote

35781
00:07:34,390 --> 00:07:37,150
which is this little number right here.

35782
00:07:38,110 --> 00:07:41,080
It's inside a span with a class of score.

35783
00:07:41,380 --> 00:07:42,213
Right?

35784
00:07:44,500 --> 00:07:48,190
All right. So let's do the first thing, which is article link. Well,

35785
00:07:48,190 --> 00:07:52,840
we can actually already tap into the same article tag we already got up here.

35786
00:07:53,260 --> 00:07:55,060
And instead of saying getText,

35787
00:07:55,090 --> 00:08:00,090
we can use the get method to get the specific value of a attribute.

35788
00:08:02,080 --> 00:08:04,990
So what we want is of course, the href.

35789
00:08:06,520 --> 00:08:09,190
And then the article_upvote,

35790
00:08:09,250 --> 00:08:14,250
we'll have to tap into our soup and find the tag with a name that is span

35791
00:08:17,140 --> 00:08:21,400
because this is what we're looking for, and has a class of score.

35792
00:08:21,880 --> 00:08:22,713
Right?

35793
00:08:24,400 --> 00:08:29,400
Like this. Finding this particular tag is not enough.

35794
00:08:29,680 --> 00:08:34,570
This actually just gets us the tag. If we want to go further

35795
00:08:34,570 --> 00:08:38,350
and we actually want to get the text that's inside that span

35796
00:08:38,650 --> 00:08:41,230
which is of course the 19 points,

35797
00:08:41,799 --> 00:08:45,280
then we have to dig one step deeper and call the

35798
00:08:45,310 --> 00:08:49,450
getText method like this. Now,

35799
00:08:49,480 --> 00:08:54,480
if I go ahead and print out the article_text and the article_link,

35800
00:08:55,710 --> 00:08:59,550
and also finally the article_upvote,

35801
00:09:00,090 --> 00:09:01,200
then you can see

35802
00:09:01,200 --> 00:09:05,730
I get all three pieces of data that I'm interested in. Now,

35803
00:09:05,790 --> 00:09:10,620
instead of getting the first occurrence, I want to get all of the ones that are

35804
00:09:10,650 --> 00:09:15,570
on this page, so all 30 results. Now, in order to do that,

35805
00:09:15,810 --> 00:09:20,810
I have to change the find to find_all both here and here.

35806
00:09:23,280 --> 00:09:23,790
This way

35807
00:09:23,790 --> 00:09:28,790
we get a list of all of the articles and I'll get a list of all of the article

35808
00:09:31,860 --> 00:09:32,693
_upvotes.

35809
00:09:33,990 --> 00:09:38,040
So now it's going to be a little bit different. In order to get all of the text

35810
00:09:38,070 --> 00:09:41,730
and all of the link, then I have to use a for loop.

35811
00:09:42,450 --> 00:09:46,410
So I'll say for article tag in articles,

35812
00:09:46,740 --> 00:09:47,940
so articles is of course,

35813
00:09:47,940 --> 00:09:52,410
this list where we find all of the anchor tags with a class of storylink,

35814
00:09:53,130 --> 00:09:56,820
and then I'm going to loop through each one of those and for each of the tags,

35815
00:09:56,850 --> 00:10:00,030
I'm going to get the text and also get the Href.

35816
00:10:02,100 --> 00:10:06,150
I'm going to create two new lists, articles_text, and article_links.

35817
00:10:08,550 --> 00:10:12,930
And then I'm going to save each of the new articles into those lists.

35818
00:10:19,700 --> 00:10:20,533
...

35819
00:10:20,690 --> 00:10:23,000
Like this. And in fact,

35820
00:10:23,030 --> 00:10:28,030
we could probably simplify this a little bit by refactoring and renaming the

35821
00:10:30,020 --> 00:10:31,040
article text,

35822
00:10:31,070 --> 00:10:35,240
so the singular version into just text and the article_link

35823
00:10:36,770 --> 00:10:38,420
to just the link.

35824
00:10:39,740 --> 00:10:44,300
So now let's print out the lists. So the article_texts,

35825
00:10:45,530 --> 00:10:49,010
the article_links and the article_upvotes.

35826
00:10:49,760 --> 00:10:51,440
And this find_all

35827
00:10:51,440 --> 00:10:55,760
gives me a list and I can't call getText on the list.

35828
00:10:56,120 --> 00:10:59,720
So I'll also need to create a new list.

35829
00:11:00,050 --> 00:11:02,360
So I'm going to choose to use list comprehension here.

35830
00:11:03,260 --> 00:11:08,260
So I'm going to say for score in all of the scores,

35831
00:11:10,370 --> 00:11:13,850
we're going to create a list using each of those scores

35832
00:11:14,090 --> 00:11:17,450
and we're going to call getText in order to get each of them.

35833
00:11:18,500 --> 00:11:21,560
This is the same as writing out a for loop like this

35834
00:11:21,650 --> 00:11:26,180
but it's obviously much shorter. Now, when I hit run,

35835
00:11:26,210 --> 00:11:28,880
you can see that each of my lists are ordered.

35836
00:11:29,150 --> 00:11:33,950
So this is the first article's text, this is the first article's link,

35837
00:11:34,220 --> 00:11:36,560
and this is the first article's points.

35838
00:11:38,660 --> 00:11:43,660
What we want to do is we want to get the article_upvotes into a number format,

35839
00:11:45,080 --> 00:11:47,750
so an integer. And to do that,

35840
00:11:47,780 --> 00:11:51,380
we of course have to get rid of the points that comes afterwards.

35841
00:11:51,830 --> 00:11:56,740
But notice how each of these items are strings. So that means we can split the string

35842
00:11:56,890 --> 00:12:01,270
by the space and only get hold of the first item in that space.

35843
00:12:02,110 --> 00:12:06,070
Let me show you what I mean. So we've got all of the article upvotes,

35844
00:12:06,190 --> 00:12:09,670
let's go ahead and just print out the first item.

35845
00:12:10,380 --> 00:12:11,213
Right.

35846
00:12:13,770 --> 00:12:18,090
So now we just get the first item, which is 40 points. Now,

35847
00:12:18,090 --> 00:12:21,840
if I take that item and I call the split method,

35848
00:12:21,900 --> 00:12:26,400
then it's going to split every word in the sentence. By default,

35849
00:12:26,400 --> 00:12:31,350
it splits by the space. Now, if I run this code,

35850
00:12:32,220 --> 00:12:32,910
you can see

35851
00:12:32,910 --> 00:12:37,910
I get a list where I've got the first item being 40 and the second being points.

35852
00:12:39,390 --> 00:12:42,900
So it's basically split that string by the space.

35853
00:12:43,740 --> 00:12:48,300
Now the next stage is I could get hold of just the first item that comes from

35854
00:12:48,300 --> 00:12:50,130
that list, which is now 40.

35855
00:12:50,820 --> 00:12:54,180
If I now finally wrap it around an int,

35856
00:12:54,270 --> 00:12:59,130
then I can turn that into an actual number. Don't worry if your number changes

35857
00:12:59,130 --> 00:13:03,600
because you're pulling data live from a website. That upvote number can change in

35858
00:13:03,600 --> 00:13:06,540
any second. So this is the method

35859
00:13:06,540 --> 00:13:10,260
how we can get hold of the actual number from the upvotes.

35860
00:13:10,890 --> 00:13:14,790
Now we're going to apply all of this .split

35861
00:13:14,850 --> 00:13:19,740
and also getting hold of the first item into our list comprehension.

35862
00:13:20,100 --> 00:13:22,920
So for each of the scores that soup finds,

35863
00:13:23,160 --> 00:13:27,420
we're going to get hold of the text and then split the text and then get the first

35864
00:13:27,420 --> 00:13:30,150
item from the text. And then finally,

35865
00:13:30,180 --> 00:13:35,180
we wrap all of this around an int and turn it into an integer. Then if I go ahead

35866
00:13:36,960 --> 00:13:39,120
and uncomment all these lines of code,

35867
00:13:39,540 --> 00:13:43,350
then you can see I've got all of these numbers being printed out,

35868
00:13:43,980 --> 00:13:46,110
which means I can now sort them.

35869
00:13:47,670 --> 00:13:51,930
I want to get the index of the list item that has the highest value.

35870
00:13:52,140 --> 00:13:55,950
And then I want to use that index to pick out the title, text,

35871
00:13:56,100 --> 00:13:58,920
and also the link from these two lists,

35872
00:13:59,400 --> 00:14:02,610
because they're all ordered in exactly the same way.

35873
00:14:02,610 --> 00:14:07,610
So this first item corresponds to this first link corresponds to this first 

35874
00:14:07,950 --> 00:14:12,690
upvote. And I want to pose this to you as a challenge.

35875
00:14:13,050 --> 00:14:16,080
Can you print out the title and link for the Hacker

35876
00:14:16,080 --> 00:14:18,840
News story with the highest number of upvotes?

35877
00:14:19,350 --> 00:14:22,080
Since we're working with three different lists at this point,

35878
00:14:22,320 --> 00:14:27,320
you'll have to find the index of the largest number inside the article_upvotes

35879
00:14:27,390 --> 00:14:28,830
list to accomplish this.

35880
00:14:29,310 --> 00:14:32,910
I'll give you a few seconds to pause the video before I show you the solution.

35881
00:14:36,330 --> 00:14:36,750
All right,

35882
00:14:36,750 --> 00:14:41,750
here's the solution. We can use the max function that Python comes with to get

35883
00:14:42,660 --> 00:14:46,440
the largest number from our article_upvotes.

35884
00:14:48,450 --> 00:14:52,970
And then we can print this largest number and see if it works.

35885
00:14:53,660 --> 00:14:58,040
So we've got 1,312. Now,

35886
00:14:58,040 --> 00:15:00,650
once we've gotten hold of the largest number,

35887
00:15:00,800 --> 00:15:04,160
then we can find its index from this list.

35888
00:15:04,610 --> 00:15:07,640
So we can say article_upvotes.index

35889
00:15:07,700 --> 00:15:11,300
and then we find the index of this largest number.

35890
00:15:11,410 --> 00:15:12,243
Right.

35891
00:15:16,270 --> 00:15:19,780
Now, if we hit run, you can see that we're getting index number 27.

35892
00:15:20,470 --> 00:15:22,870
So instead of just printing out that index,

35893
00:15:22,960 --> 00:15:27,960
we can print, instead, the article_texts with that index, so passing in the largest

35894
00:15:30,010 --> 00:15:35,010
index, and also the article_links and passing in the same index.

35895
00:15:37,690 --> 00:15:38,980
So now if I hit run,

35896
00:15:39,070 --> 00:15:44,070
you can see that the most popular article at the moment on this page has this

35897
00:15:45,100 --> 00:15:48,640
title text and this particular link. Of course for you

35898
00:15:48,640 --> 00:15:52,870
it will be different because it depends on what's currently showing up on Hacker

35899
00:15:52,870 --> 00:15:55,600
News. But if I refresh this page,

35900
00:15:55,630 --> 00:16:00,630
you can see that this article with 1,313 points is of course the most popular

35901
00:16:02,500 --> 00:16:05,890
article and it is the one that's about Mozilla.

35902
00:16:07,030 --> 00:16:12,030
You can imagine a use case for this where every day we scrape all the data on Y

35903
00:16:12,250 --> 00:16:16,840
Combinator and then we send ourselves through a text message through an email,

35904
00:16:17,170 --> 00:16:20,860
the most upvoted title and article

35905
00:16:21,100 --> 00:16:24,040
so that we can just look at that one thing.

35906
00:16:25,150 --> 00:16:30,150
And you've seen now how we can use the requests module to get hold of the text

35907
00:16:31,090 --> 00:16:34,750
the HTML code from a particular website,

35908
00:16:35,020 --> 00:16:38,350
and then use Beautiful Soup to parse through that website

35909
00:16:38,770 --> 00:16:43,770
and then to get hold of these specific parts that we want by using find_all or

35910
00:16:44,470 --> 00:16:45,303
find,

35911
00:16:45,460 --> 00:16:49,900
and then getting hold of the text or getting hold of the link or getting hold of

35912
00:16:49,900 --> 00:16:51,640
any other thing that we want.

35913
00:16:52,480 --> 00:16:56,920
So now that we've seen how we can do web scraping using Beautiful Soup, in the

35914
00:16:56,920 --> 00:16:57,670
next lesson

35915
00:16:57,670 --> 00:17:02,670
I want to talk a little bit about the ethics of scraping websites and when to do

35916
00:17:03,370 --> 00:17:06,339
it and what you can use the data you get from this

35917
00:17:06,339 --> 00:17:10,420
for. So for all of that and more, I'll see you on the next lesson.


35918
00:00:00,510 --> 00:00:05,250
Now that we've learned how to do web scraping with requests and Beautiful Soup,

35919
00:00:05,880 --> 00:00:10,880
it's time to step back for a moment and have a think about what we're allowed to

35920
00:00:11,490 --> 00:00:16,490
do and what might not be a good idea when we're scraping data from other

35921
00:00:16,710 --> 00:00:20,640
websites. Because after all, we don't own that data, right?

35922
00:00:21,450 --> 00:00:26,370
When you think about services like Google or Bing or any other search engine,

35923
00:00:26,790 --> 00:00:31,790
essentially what they're doing is they're constantly scraping data from all of the

35924
00:00:32,940 --> 00:00:35,280
websites that are listed on the internet.

35925
00:00:35,850 --> 00:00:39,780
And that's how they manage to get the information about what's on each page

35926
00:00:40,110 --> 00:00:43,740
and for it to show up for users who use their search service.

35927
00:00:44,490 --> 00:00:49,490
Now we have to step back for a moment and think about what is the law on web

35928
00:00:49,920 --> 00:00:52,530
scraping? What is legal and what is illegal?

35929
00:00:53,250 --> 00:00:55,530
Even as we were looking at Hacker News

35930
00:00:55,530 --> 00:00:59,850
just now I noticed that one of the articles in fact talks about the Genius law

35931
00:00:59,880 --> 00:01:04,170
suit with Google. And in terms of recent history,

35932
00:01:04,170 --> 00:01:08,310
there's two really famous cases, which is Genius suing Google

35933
00:01:08,640 --> 00:01:12,810
because they're saying that Google is scraping the song lyrics from their

35934
00:01:12,810 --> 00:01:17,340
website and they're actually displaying it without taking people to Genius.

35935
00:01:17,910 --> 00:01:21,270
So for example, if we're looking at the lyrics for Code m
Monkey,

35936
00:01:21,930 --> 00:01:26,930
you can see that Google automatically shows the lyrics straight inside of

35937
00:01:26,940 --> 00:01:27,773
Google.

35938
00:01:27,810 --> 00:01:32,760
That means that a user can potentially just get all the information they need,

35939
00:01:33,120 --> 00:01:34,410
say all of the song

35940
00:01:34,410 --> 00:01:39,410
lyrics to this song, without ever needing to visit the website where this lyric

35941
00:01:39,960 --> 00:01:40,793
might come from.

35942
00:01:41,430 --> 00:01:45,600
And that lyric might've been compiled by somebody on Genius.

35943
00:01:46,170 --> 00:01:50,190
Genius has a lyric annotation website. And of course,

35944
00:01:50,280 --> 00:01:51,510
as with all websites,

35945
00:01:51,510 --> 00:01:56,510
they rely on users actually visiting their website to make money or to show ads.

35946
00:01:57,630 --> 00:02:00,570
And if Google simply just shows it in their search results,

35947
00:02:00,870 --> 00:02:03,930
then this can be a problem for websites like Genius.

35948
00:02:04,470 --> 00:02:09,470
So they sued them over this and actually ended up losing the lawsuit.

35949
00:02:10,560 --> 00:02:15,560
Another really famous example of a lawsuit over scraping is hiQ versus

35950
00:02:17,130 --> 00:02:22,080
LinkedIn. So hiQ was scraping data from LinkedIn to use commercially.

35951
00:02:22,620 --> 00:02:27,360
So LinkedIn sued them and ended up losing in the lawsuit.

35952
00:02:28,050 --> 00:02:29,250
Based on these lawsuits,

35953
00:02:29,280 --> 00:02:33,960
we have a little bit of a better idea of what is legal when it comes to web

35954
00:02:33,960 --> 00:02:36,180
scraping and what is not legal.

35955
00:02:36,780 --> 00:02:41,460
The law actually seems to favor web scraping in the sense that you're allowed to

35956
00:02:41,460 --> 00:02:43,350
scrape a website data

35957
00:02:43,920 --> 00:02:47,430
as long as you think about a couple of things.

35958
00:02:48,090 --> 00:02:53,090
A lot of people have been writing about web scraping being legal based on the

35959
00:02:53,370 --> 00:02:55,860
LinkedIn versus hiQ case.

35960
00:02:56,250 --> 00:03:01,060
But the important thing to remember is that this is not a blanket sort of,

35961
00:03:01,300 --> 00:03:04,690
you can do whatever you want, scraping any website's data.

35962
00:03:05,320 --> 00:03:10,320
It only means that data that is publicly available and not copyrighted is

35963
00:03:11,560 --> 00:03:16,390
probably legal for companies to scrape. Now,

35964
00:03:16,420 --> 00:03:18,400
if you are using this data privately

35965
00:03:18,400 --> 00:03:22,510
like we are creating some sort of service for ourselves, then it doesn't really

35966
00:03:22,510 --> 00:03:24,160
matter. You're  just a user.

35967
00:03:24,820 --> 00:03:28,150
The difficulty comes when you're trying to commercialize that data,

35968
00:03:28,150 --> 00:03:32,590
when you set up a business and your business kind of involves somebody else's

35969
00:03:32,590 --> 00:03:35,890
data. That is a bit of a gray area. Now,

35970
00:03:35,950 --> 00:03:38,170
the things that we definitely know are

35971
00:03:38,170 --> 00:03:40,720
that you can't commercialize copyrighted content.

35972
00:03:40,990 --> 00:03:45,790
So if you scrape data from YouTube and you scraped the video data,

35973
00:03:45,820 --> 00:03:50,820
you can't just use that video on your own website. That is still not allowed

35974
00:03:51,040 --> 00:03:56,040
because that video is copyrighted and it's created by a YouTube user and the

35975
00:03:56,650 --> 00:04:00,820
copyright belongs to that user, not to you. So this is still illegal.

35976
00:04:01,600 --> 00:04:05,620
This might also apply to other things like a Medium blog post that somebody else

35977
00:04:05,620 --> 00:04:09,310
wrote or a piece of music that's being hosted on Spotify.

35978
00:04:09,760 --> 00:04:12,430
So copyrighted content you can't commercialize.

35979
00:04:13,030 --> 00:04:17,110
The second thing is that you can't scrape data that's behind authentication.

35980
00:04:17,470 --> 00:04:21,100
So if you have to log into Facebook in order to scrape the data,

35981
00:04:21,310 --> 00:04:22,810
then that's pretty much illegal.

35982
00:04:23,380 --> 00:04:27,460
And the reason for this is when you sign up as a user to any of these services

35983
00:04:27,460 --> 00:04:30,400
like Facebook or Twitter or Instagram,

35984
00:04:30,820 --> 00:04:35,020
there's a policy in there that you are agreeing to when you sign up that says

35985
00:04:35,050 --> 00:04:39,610
I agree to not use this data that I obtained on this website commercially.

35986
00:04:40,180 --> 00:04:43,120
But the data that is not behind authentication,

35987
00:04:43,420 --> 00:04:46,720
so any website that you can access as it is,

35988
00:04:47,140 --> 00:04:51,490
they can't bind you to a policy because you haven't agreed to anything.

35989
00:04:51,970 --> 00:04:56,260
So if the website has data that just out there in the open that you can access

35990
00:04:56,260 --> 00:05:00,430
without logging in and the content is not something that can be copyrighted,

35991
00:05:00,670 --> 00:05:03,640
then it is fair game legally. Now,

35992
00:05:03,670 --> 00:05:07,780
just because it's legal doesn't mean that you can actually do it.

35993
00:05:08,350 --> 00:05:13,350
A lot of websites will use captcha or recaptcha in order to prevent bots like

35994
00:05:13,750 --> 00:05:18,610
our Python code to get data from their websites. Every single time,

35995
00:05:18,640 --> 00:05:21,850
you're agreeing to one of these captchas, it's testing

35996
00:05:21,850 --> 00:05:24,100
whether to see if your actually a real human

35997
00:05:24,340 --> 00:05:28,840
or if you just a bit of code that is trying to access their data. Captcha was the

35998
00:05:28,840 --> 00:05:33,340
old version where you had the type in some squiggle letters and recaptcha is the

35999
00:05:33,340 --> 00:05:36,130
new version where you just have to tick a checkbox.

36000
00:05:36,460 --> 00:05:38,560
And it's actually really interesting how it works.

36001
00:05:39,400 --> 00:05:43,210
It looks at things like how your mouse approaches the checkbox,

36002
00:05:43,210 --> 00:05:47,020
how you maybe quiver a little bit before you actually check it

36003
00:05:47,260 --> 00:05:51,280
and other things like your cookies and the store data that they have on you.

36004
00:05:51,970 --> 00:05:56,170
Essentially, this service is used by websites to prevent people

36005
00:05:56,230 --> 00:06:00,590
to scrape their data using a bot. The other thing to remember is that,

36006
00:06:00,830 --> 00:06:03,560
you know, if you get sued by somebody like LinkedIn

36007
00:06:03,560 --> 00:06:08,420
because you're using their data and you're building a business on it

36008
00:06:08,450 --> 00:06:10,970
like hiQ is, then you can

36009
00:06:10,970 --> 00:06:14,060
at any moment be hit with a really expensive lawsuit

36010
00:06:14,450 --> 00:06:18,620
and you are going to have to pay a lot of money to lawyer up in order to contest

36011
00:06:18,620 --> 00:06:20,420
this and actually to fight them in court.

36012
00:06:20,930 --> 00:06:25,400
Unless you have the money to lawyer up and fight a company like LinkedIn,

36013
00:06:26,000 --> 00:06:29,810
it's really important to know what are the implications of web scraping,

36014
00:06:29,930 --> 00:06:33,590
especially when you're selling that data as a part of your business.

36015
00:06:34,250 --> 00:06:37,040
But in addition to the sort of legal side of things,

36016
00:06:37,190 --> 00:06:40,940
the other part that you should really think about is the ethics of web scraping.

36017
00:06:41,390 --> 00:06:44,810
This is basically putting aside what is legal and what is illegal,

36018
00:06:45,020 --> 00:06:46,640
but more thinking about what is right

36019
00:06:46,640 --> 00:06:51,640
and what's wrong because let's say that you've built a website and you've got

36020
00:06:51,770 --> 00:06:56,000
some sort of bot that's constantly scraping it for data, data that you know,

36021
00:06:56,300 --> 00:06:58,730
has been generated by your own users

36022
00:06:58,970 --> 00:07:03,950
that's really precious and that you might even charge for it, then,

36023
00:07:03,980 --> 00:07:07,400
is it really right for somebody to do that?

36024
00:07:07,940 --> 00:07:11,780
So I often follow the rule where if I don't want something to happen to me,

36025
00:07:11,840 --> 00:07:16,160
I try to not do that to others. In terms of the ethics, a couple of things

36026
00:07:16,170 --> 00:07:18,470
I would recommend abiding by is

36027
00:07:18,770 --> 00:07:21,800
if you come across a website and they have a public API

36028
00:07:21,860 --> 00:07:26,210
which we've already learned about and we know how to use, then always

36029
00:07:26,210 --> 00:07:30,770
always go for the API. If it requires an application, then apply for it.

36030
00:07:31,100 --> 00:07:35,570
Don't just go ahead and try to take their data when there's already a route for

36031
00:07:35,570 --> 00:07:37,310
you to use and access their data.

36032
00:07:38,480 --> 00:07:42,590
The second thing is to respect the web owner, because you know,

36033
00:07:42,590 --> 00:07:46,550
you don't want somebody to access your website a million times a second,

36034
00:07:46,610 --> 00:07:49,520
potentially making your website go down

36035
00:07:49,670 --> 00:07:51,680
or it could count as a DDoS

36036
00:07:51,680 --> 00:07:55,310
attack where it affects other users using the website.

36037
00:07:56,090 --> 00:07:57,290
When you are on a website,

36038
00:07:57,590 --> 00:08:02,360
they actually provide a way for you to tell what it is that you can scrape and

36039
00:08:02,360 --> 00:08:02,810
what it is

36040
00:08:02,810 --> 00:08:07,810
you can't. At the very end of the URLs after the.com or.co.uk,

36041
00:08:08,930 --> 00:08:13,220
if you put a forward slash and put robots.txt, you can see

36042
00:08:13,220 --> 00:08:18,220
this is the advice that they give to any bots that are potentially scraping

36043
00:08:18,260 --> 00:08:19,093
their website.

36044
00:08:19,610 --> 00:08:24,610
User agent is the person who is scraping, the person or the bot that's scraping,

36045
00:08:25,280 --> 00:08:27,890
and it tells you what are the things that it disallows.

36046
00:08:28,220 --> 00:08:32,690
So it doesn't want you to access the /vote?, /reply?, 

36047
00:08:32,690 --> 00:08:35,299
/submitted?, /threads?.

36048
00:08:35,600 --> 00:08:39,950
So basically any of these end points are ones that they don't really want you to

36049
00:08:39,950 --> 00:08:41,840
use. For example,

36050
00:08:41,840 --> 00:08:45,050
here I've access the /reply?

36051
00:08:45,380 --> 00:08:48,890
which is a way to log in and reply to a particular comment.

36052
00:08:49,280 --> 00:08:51,740
Now that really shouldn't be a bot kind of action

36053
00:08:51,740 --> 00:08:54,230
because then it means the data that's generated

36054
00:08:54,530 --> 00:08:57,690
or the replies on here will be automated, right?

36055
00:08:57,690 --> 00:09:01,980
You actually want humans to comment and reply on the articles rather than some

36056
00:09:01,980 --> 00:09:02,813
sort of robot.

36057
00:09:03,660 --> 00:09:07,590
So these are the paths that they don't want you to access as a bot.

36058
00:09:08,040 --> 00:09:10,890
And finally, it even tells you a crawl-delay.

36059
00:09:10,920 --> 00:09:15,630
So this is the number of seconds that you should leave between each time you hit

36060
00:09:15,630 --> 00:09:16,463
up the website.

36061
00:09:17,250 --> 00:09:22,200
If we're writing Python code and we're using Beautiful Soup and response to

36062
00:09:22,200 --> 00:09:24,210
scrape data from YCombinator,

36063
00:09:24,480 --> 00:09:28,590
we could potentially get that code to run every fraction of a second right?

36064
00:09:28,590 --> 00:09:33,450
I could just write a for loop and just get this to keep scraping again and again

36065
00:09:33,450 --> 00:09:34,283
and again.

36066
00:09:34,350 --> 00:09:38,880
But that means that you're adding a lot of extra traffic and a lot of extra

36067
00:09:38,880 --> 00:09:43,560
demand on their servers which could potentially mean that real users,

36068
00:09:43,560 --> 00:09:48,560
real humans who want to access their website might not be able to do it at a fast

36069
00:09:48,780 --> 00:09:51,090
speed. So this is the reason why

36070
00:09:51,120 --> 00:09:53,880
when a lot of people accessing the same website,

36071
00:09:53,910 --> 00:09:58,910
say when a new ticket has been released for Glastonbury or some sort of big

36072
00:09:59,100 --> 00:10:01,950
concert, that the website can go down.

36073
00:10:02,010 --> 00:10:05,430
Its because a lot of servers can't cope with so much demand.

36074
00:10:05,850 --> 00:10:08,070
And when that demand is coming from a for loop,

36075
00:10:08,340 --> 00:10:12,150
then you can imagine that you're just adding a lot of extra work onto the web

36076
00:10:12,150 --> 00:10:15,480
server. So always respect their crawl-delay

36077
00:10:15,480 --> 00:10:20,190
if you see one in the robots.txt, and even if you don't see one,

36078
00:10:20,280 --> 00:10:24,450
just try to limit your rate so that you don't max out their server.

36079
00:10:24,840 --> 00:10:27,450
I recommend not scraping more than once a minute.

36080
00:10:28,200 --> 00:10:32,340
The YCombinator's of robots.txt is actually quite permissive.

36081
00:10:32,370 --> 00:10:35,430
It allows you to do pretty much anything you want,

36082
00:10:35,760 --> 00:10:37,950
but that's not true for all websites.

36083
00:10:38,160 --> 00:10:40,260
If you look at the robots.txt for LinkedIn,

36084
00:10:40,590 --> 00:10:43,770
you can see that they really don't want anyone to scrape it.

36085
00:10:43,770 --> 00:10:45,450
There is a bit of legal jargon,

36086
00:10:45,480 --> 00:10:49,470
there's a lot more disallows that you can see, right?

36087
00:10:49,950 --> 00:10:53,820
This is probably not a website where I would scrape their data and try to build a

36088
00:10:53,820 --> 00:10:54,690
company around.

36089
00:10:55,620 --> 00:10:59,940
So remember that this is a piece of text that the website owners have written

36090
00:11:00,180 --> 00:11:04,920
for you to look at to see what you can do and you can't do with their website.

36091
00:11:05,280 --> 00:11:06,990
So before you scrape a website,

36092
00:11:07,320 --> 00:11:12,320
always go to the root of their URL and check out their robots.txt and follow

36093
00:11:14,490 --> 00:11:18,420
the ethical codes of conduct when you're trying to commercialize a project.

36094
00:11:18,810 --> 00:11:22,770
So this is just the quick tip on the law and ethics of web scraping

36095
00:11:22,980 --> 00:11:24,960
just so that you don't get into trouble in the future.


36096
00:00:00,690 --> 00:00:01,859
Now here's a question.

36097
00:00:02,310 --> 00:00:07,310
Have you ever gotten into a situation where it's evening time and you wanna

36098
00:00:07,920 --> 00:00:10,710
watch a movie, but you don't know what to watch?

36099
00:00:11,160 --> 00:00:15,000
Like there's just no ideas coming to your mind and everybody's sitting around

36100
00:00:15,000 --> 00:00:16,500
the TV, like, what do we do?

36101
00:00:17,400 --> 00:00:22,400
So what if we scraped a list of the top 100 movies of all time and you pick one

36102
00:00:25,320 --> 00:00:26,153
from there?

36103
00:00:26,700 --> 00:00:31,700
So I recently came across this article on empire where they list the 100

36104
00:00:32,040 --> 00:00:34,590
greatest movies of all time.

36105
00:00:35,220 --> 00:00:40,220
And you can see that it goes from 100 all the way down to one.

36106
00:00:41,820 --> 00:00:45,960
These are supposed to be the top rated movies that have ever been produced

36107
00:00:46,440 --> 00:00:51,440
and I always wanted to watch through all 100 of them and check off each one as I

36108
00:00:51,810 --> 00:00:56,790
go along. So this is what we're going to be doing for our final project today.

36109
00:00:57,180 --> 00:01:02,040
You're going to be scraping from this website the 100 movies

36110
00:01:02,430 --> 00:01:06,570
and you are going to be using Python code to create a text file called movies

36111
00:01:06,570 --> 00:01:11,040
.text that lists them in order, starting from one.

36112
00:01:11,760 --> 00:01:16,760
Notice how each of these are just the titles of each of these movies.

36113
00:01:17,730 --> 00:01:20,160
Essentially, it's this part that you want.

36114
00:01:20,730 --> 00:01:23,520
And because the listing starts from 100,

36115
00:01:23,790 --> 00:01:27,090
you have to figure out how to flip it the other way so that you get it

36116
00:01:27,090 --> 00:01:30,270
starting from one. But essentially this is the goal.

36117
00:01:30,450 --> 00:01:32,910
And this is the project for today.

36118
00:01:32,970 --> 00:01:35,190
You're going to have to use what you learned about web scraping,

36119
00:01:35,460 --> 00:01:38,580
but also other things that you've learned along the way about Python.

36120
00:01:39,330 --> 00:01:42,540
Pause the video now and try to complete this challenge.

36121
00:01:45,230 --> 00:01:45,770
Okay.

36122
00:01:45,770 --> 00:01:49,340
So here I've created a brand new blank project,

36123
00:01:49,370 --> 00:01:52,670
which I've called top100-movies, but of course, that doesn't matter.

36124
00:01:53,210 --> 00:01:56,900
But in the main.py is where we're going to be doing all the serious stuff.

36125
00:01:57,200 --> 00:02:01,160
So the first thing we'll need is to copy the URL.

36126
00:02:01,670 --> 00:02:05,870
And at the time when you're doing this project, this URL might change.

36127
00:02:06,110 --> 00:02:08,090
So don't get it from here. Instead,

36128
00:02:08,360 --> 00:02:11,480
go to the course resources and copy the URL from there.

36129
00:02:12,380 --> 00:02:13,790
Once you've got the URL,

36130
00:02:13,820 --> 00:02:18,020
we're going to paste it into our main.py and save it as a constant.

36131
00:02:18,710 --> 00:02:21,980
In addition, we're going to have to import all the things that we need,

36132
00:02:22,010 --> 00:02:23,480
including requests,

36133
00:02:23,870 --> 00:02:27,500
and also the bs4 module

36134
00:02:28,790 --> 00:02:31,280
where we can get hold of our Beautiful Soup.

36135
00:02:33,980 --> 00:02:37,640
I'm going to need to install both of these because I don't have them yet.

36136
00:02:38,510 --> 00:02:42,440
So I'm going to click on the red squiggly line, install requests,

36137
00:02:43,070 --> 00:02:47,330
and also install beautiful soup. Once that's all done,

36138
00:02:47,390 --> 00:02:52,390
then my red squiggly lines should be gone and I can now start using my request

36139
00:02:52,880 --> 00:02:53,870
module to

36140
00:02:53,870 --> 00:02:58,870
make a get request to this particular URL. And I'll save the response

36141
00:02:59,100 --> 00:03:01,750
I get back as the response.

36142
00:03:03,280 --> 00:03:05,200
The actual HTML files,

36143
00:03:05,200 --> 00:03:10,200
so the website HTML, is actually under response.text.

36144
00:03:11,560 --> 00:03:14,440
So this is going to be the raw HTML text,

36145
00:03:14,800 --> 00:03:18,820
and this is what I'm going to be using to use Beautiful Soup to parse.

36146
00:03:19,480 --> 00:03:24,010
So now we make soup and we're going to use Beautiful Soup and we're going to

36147
00:03:24,010 --> 00:03:26,110
parse in our website HTML

36148
00:03:26,530 --> 00:03:29,170
and also the html.parser

36149
00:03:29,620 --> 00:03:33,220
which is the method which we're going to use to parse through this website.

36150
00:03:34,360 --> 00:03:35,710
Now that we've made soup,

36151
00:03:35,740 --> 00:03:40,720
let's go ahead and print out our soup in a predefined format so that we can just

36152
00:03:40,720 --> 00:03:41,980
see what it looks like.

36153
00:03:42,160 --> 00:03:46,660
So let's run our main.py and we can see that we've got basically that

36154
00:03:46,660 --> 00:03:49,750
entire website's HTML being printed out

36155
00:03:49,750 --> 00:03:54,750
here. Now comes the part where we need to use our Google Chrome inspector.

36156
00:03:56,020 --> 00:04:00,700
The part that we want from this website is just these lines. Now,

36157
00:04:00,730 --> 00:04:02,500
of course, if we didn't know how to code,

36158
00:04:02,740 --> 00:04:06,490
we would be here copying and pasting for hours on end,

36159
00:04:06,910 --> 00:04:11,890
and we would die of boredom or we'd get repetitive strain injury from doing so

36160
00:04:11,890 --> 00:04:15,760
much copy and pasting. But because we know code, we know better than that.

36161
00:04:15,910 --> 00:04:19,510
So let's get hold of the part that we want. Let's right-

36162
00:04:19,510 --> 00:04:22,270
click and click inspect. Now,

36163
00:04:22,270 --> 00:04:27,220
we can see that this lives inside and h3  with the class of title.

36164
00:04:27,790 --> 00:04:31,630
Now let's just check against one of the other pieces that we want and just make

36165
00:04:31,630 --> 00:04:33,880
sure that they've got the same structure.

36166
00:04:34,330 --> 00:04:38,470
So this is also inside an h3 with the class of title.

36167
00:04:38,950 --> 00:04:43,180
So basically as long as we can scrape this entire page and get all of the 

36168
00:04:43,210 --> 00:04:48,040
h3 with the class of title and get the text that's contained inside the 

36169
00:04:48,070 --> 00:04:52,120
h3 element, then we're golden. Let's go ahead and do that.

36170
00:04:52,600 --> 00:04:55,120
So instead of printing our soup.prettify,

36171
00:04:55,150 --> 00:04:57,550
I'm going to tap into soup and I'm going to say

36172
00:04:57,550 --> 00:05:02,550
find all. The thing that I want to find has the tag name of an h3 and it

36173
00:05:04,360 --> 00:05:07,300
has the class of title.

36174
00:05:08,080 --> 00:05:11,710
So that all came from our inspections right here.

36175
00:05:12,400 --> 00:05:15,940
This should get us a list of all of the 

36176
00:05:15,970 --> 00:05:17,620
h3 elements with this class

36177
00:05:18,160 --> 00:05:23,110
and we should be able to save that into a variable called all_movies.

36178
00:05:23,980 --> 00:05:28,450
Let's print all_movies and see what we get.

36179
00:05:30,190 --> 00:05:33,430
Now, we've got a list of all of our h3s,

36180
00:05:33,970 --> 00:05:38,970
and we're now going to go one step further and fetch the text from within these

36181
00:05:41,380 --> 00:05:45,340
h3 elements. We do that using the

36182
00:05:45,640 --> 00:05:49,000
getText method. But we can't do that on the list

36183
00:05:49,030 --> 00:05:51,820
so we're going to use list comprehension.

36184
00:05:52,390 --> 00:05:57,390
So we're going to say the movie_titles is equal to a new list

36185
00:05:58,850 --> 00:05:59,780
and in this list,

36186
00:05:59,930 --> 00:06:04,930
each item is going to be formed from a movie in the all_movies list.

36187
00:06:09,710 --> 00:06:13,970
And this new item is going to be created by taking each of the movies in the

36188
00:06:13,970 --> 00:06:17,900
list and then calling getText on it. Now,

36189
00:06:17,900 --> 00:06:21,380
if I go ahead and print my movie_titles

36190
00:06:21,410 --> 00:06:25,940
instead of all_movies, then this is what we get.

36191
00:06:25,940 --> 00:06:29,930
We get all of the titles of all 100 movies.

36192
00:06:32,120 --> 00:06:37,120
Now we want to reverse this list so that we can put it into a text file starting

36193
00:06:38,060 --> 00:06:40,490
from 1, going down to 100.

36194
00:06:41,000 --> 00:06:43,070
So there's a couple of ways that we could do this.

36195
00:06:43,130 --> 00:06:46,520
One is we can use the Python splice operator.

36196
00:06:46,910 --> 00:06:49,100
So we add a set of square brackets

36197
00:06:49,520 --> 00:06:52,220
and then we add a ::-1,

36198
00:06:54,650 --> 00:06:58,400
and this will reverse the order. And as always,

36199
00:06:58,760 --> 00:07:03,260
you can find out this information either by Googling or through what you've

36200
00:07:03,260 --> 00:07:07,700
learned before in previous lessons. So this is the syntax that we're using,

36201
00:07:08,180 --> 00:07:12,380
which comes from the slice operator where we have a start,

36202
00:07:12,680 --> 00:07:15,620
a stop, and a step. So in this case,

36203
00:07:15,800 --> 00:07:18,410
the start is at the very beginning of the list,

36204
00:07:18,470 --> 00:07:20,330
the stop is at the very end of the list so

36205
00:07:20,360 --> 00:07:22,940
we don't have to specify those cause they're the defaults,

36206
00:07:23,360 --> 00:07:28,360
and then the step is basically -1 and this syntax will reverse that list.

36207
00:07:31,040 --> 00:07:32,480
Now, alternatively, you can,

36208
00:07:32,480 --> 00:07:37,480
of course also use a for loop where you create some sort of n in a range and the

36209
00:07:40,370 --> 00:07:44,150
range again, can take a start, stop and step.

36210
00:07:44,630 --> 00:07:46,820
So you could start at the end,

36211
00:07:46,850 --> 00:07:50,930
so the length of our movie_titles-1

36212
00:07:51,020 --> 00:07:55,370
because remember lists in Python start numbering from zero.

36213
00:07:55,730 --> 00:08:00,680
So the very last item is actually at the total number minus one.

36214
00:08:01,370 --> 00:08:05,690
And next is going to be the end, which is going to be zero, and finally

36215
00:08:05,690 --> 00:08:09,770
it's going to be the step, which is minus one each time.

36216
00:08:09,890 --> 00:08:13,790
So this time we start off from the very end of the list,

36217
00:08:13,790 --> 00:08:18,620
go back to the beginning, stepping by minus one each time. And this way,

36218
00:08:18,620 --> 00:08:19,880
if we print n,

36219
00:08:19,940 --> 00:08:24,940
you can see that this is going to give us basically all the way from 99 down to

36220
00:08:26,090 --> 00:08:26,923
1.

36221
00:08:27,590 --> 00:08:32,590
And we can use that to tap into our movie titles and get hold of each of the items

36222
00:08:35,330 --> 00:08:36,620
at index n.

36223
00:08:41,110 --> 00:08:45,580
And because range actually doesn't go beyond the end

36224
00:08:45,610 --> 00:08:50,110
we actually have to put -1 there if we want to get the very final one

36225
00:08:50,110 --> 00:08:55,000
which is number 100. And you'll notice also that there's a

36226
00:08:55,200 --> 00:08:58,110
bit of a typo here for number 93,

36227
00:08:58,530 --> 00:09:00,990
and this is actually not our fault at all.

36228
00:09:00,990 --> 00:09:04,380
It's in fact, in the original empire post.

36229
00:09:04,440 --> 00:09:09,440
They actually screwed up and this should be number 93. Because we're scraping

36230
00:09:10,650 --> 00:09:12,150
data we can't really be picky.

36231
00:09:12,480 --> 00:09:15,090
We're just going to end up with what we end up with.

36232
00:09:15,870 --> 00:09:20,870
So I'm going to choose the method where we actually take the movie title

36233
00:09:20,910 --> 00:09:25,910
and then we use the splice to get hold of it in reverse.

36234
00:09:27,090 --> 00:09:29,460
And I'll call that the movies.

36235
00:09:30,690 --> 00:09:35,640
And now we can create our new text file. So with open

36236
00:09:35,730 --> 00:09:38,670
we're going to create a new file called movies.txt,

36237
00:09:39,090 --> 00:09:44,090
and we of course have to change the mode two write mode so that we can actually

36238
00:09:44,490 --> 00:09:47,370
create this file. And then

36239
00:09:47,430 --> 00:09:51,810
because this file movies.txt doesn't exist, once this line runs

36240
00:09:51,810 --> 00:09:55,230
it's going to create that file and then we're going to write to it.

36241
00:09:55,230 --> 00:09:57,060
So we're going to say file.write

36242
00:09:57,510 --> 00:10:02,510
and we're going to write each of the lines in our list of movies.

36243
00:10:03,060 --> 00:10:05,160
We can again use a for loop

36244
00:10:05,460 --> 00:10:08,370
so for movie in movies,

36245
00:10:08,850 --> 00:10:13,850
let's go ahead and write the name of the movie

36246
00:10:16,800 --> 00:10:20,040
and then lets add a new line operator,

36247
00:10:20,040 --> 00:10:25,040
so \n, so that we get each of the movies onto its own line.

36248
00:10:26,250 --> 00:10:28,710
Now, finally, if I run this code,

36249
00:10:28,830 --> 00:10:32,790
then it's going to create our movies.txt. And if I take a look at it,

36250
00:10:32,820 --> 00:10:37,820
you can see it's now got all of the 100 movies listed on here from 1 down to

36251
00:10:38,250 --> 00:10:39,083
100.

36252
00:10:39,900 --> 00:10:43,710
And now you can go through this list and delete the ones that you've already

36253
00:10:43,710 --> 00:10:47,970
watched and then continue watching through the rest of the list.

36254
00:10:48,660 --> 00:10:52,470
I hope you had fun trying out web scraping by yourself in this project.

36255
00:10:52,740 --> 00:10:56,100
So that's all for today. Take a look at what you've done.

36256
00:10:56,130 --> 00:11:00,600
If there's anything confusing about the class or ID or HTML,

36257
00:11:00,750 --> 00:11:04,410
then be sure to review some of the lessons in the previous four days.

36258
00:11:05,400 --> 00:11:06,420
That's all for today.



36259
00:00:00,720 --> 00:00:01,350
Hey guys,

36260
00:00:01,350 --> 00:00:05,730
welcome to Day 46 of 100 Days of Code. Today

36261
00:00:05,730 --> 00:00:08,310
we've got a pretty special project for you.

36262
00:00:08,880 --> 00:00:13,380
It's a musical time machine project. So what does that mean?

36263
00:00:14,040 --> 00:00:14,520
Well,

36264
00:00:14,520 --> 00:00:19,520
recently I received a mixed tape from a friend and the mix tape contained all of

36265
00:00:21,750 --> 00:00:25,950
the top songs from the period of time when we went to school together.

36266
00:00:26,400 --> 00:00:28,230
And it was a really, really beautiful gift

36267
00:00:28,230 --> 00:00:33,000
and it was a really nice way of jogging your memories for that particular time

36268
00:00:33,000 --> 00:00:35,820
point in your life. This got me thinking,

36269
00:00:35,880 --> 00:00:40,880
and I thought about how music can take you back into a particular time in your

36270
00:00:41,580 --> 00:00:46,580
life as if it just transported you. By listening to the same songs that were hits

36271
00:00:48,300 --> 00:00:49,770
during that period of time

36272
00:00:50,100 --> 00:00:55,100
it was like as if I was being transported back and could relive a moment in my

36273
00:00:56,340 --> 00:00:59,910
childhood. And you might have the same experience.

36274
00:01:00,120 --> 00:01:04,470
Maybe there's certain songs that were really popular in your childhood that

36275
00:01:04,470 --> 00:01:08,880
brings back memories, or maybe for a particular relationship,

36276
00:01:08,940 --> 00:01:13,940
or maybe a holiday that you went on. Trying to jog these memories by using music

36277
00:01:15,810 --> 00:01:16,470
is a really,

36278
00:01:16,470 --> 00:01:21,470
really fantastic way of reminiscing and savoring some of your favorite moments

36279
00:01:21,540 --> 00:01:22,373
in time.

36280
00:01:22,740 --> 00:01:27,420
So what we're going to be building today is a Python time machine,

36281
00:01:28,050 --> 00:01:32,100
not the sort of time machine that might take a human back in time,

36282
00:01:32,340 --> 00:01:37,340
but it will go back in time to find the music that was in the top 100 shots that

36283
00:01:39,120 --> 00:01:44,120
was being played all over the radio so that you can relive that period of time

36284
00:01:44,550 --> 00:01:47,760
once more through music. Billboard

36285
00:01:47,790 --> 00:01:51,480
compiles a list of the top 100 songs.

36286
00:01:51,480 --> 00:01:55,650
So these are the most played songs during a particular week.

36287
00:01:56,160 --> 00:02:01,110
And if you go to chart/hot-100, you'll see it for the current week,

36288
00:02:01,560 --> 00:02:06,560
but there's also a feature where you can change the date to any data in the past

36289
00:02:06,960 --> 00:02:07,793
20 years.

36290
00:02:08,280 --> 00:02:12,180
So if we select a random date in year 2000,

36291
00:02:12,540 --> 00:02:17,280
you can see that the songs that come up here, and it depends on your age

36292
00:02:17,310 --> 00:02:18,360
but some of these artists

36293
00:02:18,360 --> 00:02:23,360
you might have never heard of like N Sync or Destiny's child or Vertical

36294
00:02:23,790 --> 00:02:28,020
Horizon. But if you listen to these tracks in order,

36295
00:02:28,260 --> 00:02:33,260
then it will be almost like you've been transported back to year 2000,

36296
00:02:33,420 --> 00:02:37,380
August 12 and you're just listening to the things on the radio.

36297
00:02:38,190 --> 00:02:42,020
This is how we are going to approach this task. First,

36298
00:02:42,050 --> 00:02:47,050
we're going to use Beautiful Soup to scrape the top 100 songs from a particular

36299
00:02:48,470 --> 00:02:49,640
date of your choice.

36300
00:02:50,360 --> 00:02:54,950
And then we're going to extract all of the song titles from the list,

36301
00:02:55,430 --> 00:03:00,430
and then we're going to use the Spotify API to create a playlist for that

36302
00:03:00,670 --> 00:03:01,503
particular date.

36303
00:03:02,310 --> 00:03:07,290
And we're going to see right through Spotify for each of the songs and add

36304
00:03:07,290 --> 00:03:12,150
those songs to our new playlist. So that by the end of this whole process,

36305
00:03:12,390 --> 00:03:17,390
we end up with a playlist that has the top 100 songs for a particular date in

36306
00:03:19,440 --> 00:03:20,273
the past.

36307
00:03:20,610 --> 00:03:24,510
So if you've got an anniversary coming up or a birthday coming up,

36308
00:03:24,720 --> 00:03:29,720
this might just be the perfect present where you create a playlist of the

36309
00:03:30,090 --> 00:03:35,090
top of that 100 songs that was playing on the day that you met your wife or your

36310
00:03:35,160 --> 00:03:40,020
husband, or maybe when you started a friendship or started a new job,

36311
00:03:40,440 --> 00:03:45,440
and you can send them this playlist as your gift to jog their memories and

36312
00:03:46,200 --> 00:03:48,660
remind them of that day in the past.

36313
00:03:49,710 --> 00:03:51,630
So are you ready to build the time machine?

36314
00:03:52,080 --> 00:03:55,860
If you are, head over to the next lesson while you will find step by step

36315
00:03:55,860 --> 00:03:58,800
instructions and a lot of challenges

36316
00:03:59,280 --> 00:04:03,630
that's going to get you to use all the skills you learned about how do you use 

36317
00:04:03,630 --> 00:04:04,463
Beautiful Soup

36318
00:04:04,740 --> 00:04:09,150
as well as the Spotify API in order to complete this project.

36319
00:04:09,510 --> 00:04:10,500
So head over there now.


36320
00:00:00,300 --> 00:00:01,080
Hey guys,

36321
00:00:01,080 --> 00:00:05,580
welcome to Day 47 of 100 Days of Code. Today

36322
00:00:05,580 --> 00:00:09,600
we're going to be building a project that I personally find really useful.

36323
00:00:10,680 --> 00:00:15,350
It's a Amazon price tracker project.

36324
00:00:15,380 --> 00:00:17,390
So I don't know about you,

36325
00:00:17,390 --> 00:00:22,310
but I find it much more time-efficient to go online and search for the thing

36326
00:00:22,310 --> 00:00:25,580
that I need rather than have to go and browse through the shops,

36327
00:00:25,880 --> 00:00:30,050
find the thing I want and I just find the whole shopping experience,

36328
00:00:30,050 --> 00:00:33,170
really tiring. Whereas with buying stuff online,

36329
00:00:33,170 --> 00:00:36,230
you can simply go on Amazon, type in the thing you want,

36330
00:00:36,470 --> 00:00:39,470
and then a few days later you'll get it delivered straight to your door.

36331
00:00:40,160 --> 00:00:44,720
But one of the things I've noticed with online shopping is that the prices of

36332
00:00:44,720 --> 00:00:49,130
things vary dramatically from day to day. For example,

36333
00:00:49,130 --> 00:00:53,690
one of the things I've been really tempted to buy is a instant pot.

36334
00:00:53,960 --> 00:00:57,350
Um, it's basically it like a souped up pressure cooker.

36335
00:00:57,950 --> 00:01:00,890
It can do all the normal things like cook your rice

36336
00:01:01,190 --> 00:01:05,660
or work as a slow cooker, or pressure-cook your meat until it's really tender,

36337
00:01:06,230 --> 00:01:11,230
but it can even do crazy stuff like bake a cake in the pressure cooker or make

36338
00:01:12,980 --> 00:01:17,150
yogurt. This is something that I've had my eye on for a while,

36339
00:01:17,180 --> 00:01:21,320
but I haven't really even able to pull the trigger just because I can't really

36340
00:01:21,320 --> 00:01:26,320
justify paying $120 for something that I can sort of do with the other things

36341
00:01:26,960 --> 00:01:30,980
I have, right? You can bake a cake with an oven, you can, um,

36342
00:01:31,100 --> 00:01:32,540
you can make everything on the stove,

36343
00:01:32,990 --> 00:01:35,420
but it's something that I've really been fascinated by 

36344
00:01:35,420 --> 00:01:40,040
and I wonder if I could cut down the amount of time I spend cooking so I can do

36345
00:01:40,040 --> 00:01:43,400
some other things like making Programming tutorials.

36346
00:01:44,000 --> 00:01:49,000
But one of the things I've noticed about this item or a lot of items on Amazon

36347
00:01:49,100 --> 00:01:51,650
is that the price really fluctuates.

36348
00:01:52,010 --> 00:01:55,310
So I've been keeping my eye on this product for a while now

36349
00:01:55,340 --> 00:01:59,540
and I've seen it go up and down even on a day to day basis sometimes.

36350
00:02:00,080 --> 00:02:05,080
And there is a really cool website that I discovered called camelcamelcamel.com,

36351
00:02:05,420 --> 00:02:08,660
where you can simply take a product's URL,

36352
00:02:08,660 --> 00:02:13,430
so you select the size you want, the style, the item, whatever it may be,

36353
00:02:13,490 --> 00:02:17,990
and then you take the URL and you paste it into camelcamelcamel.com

36354
00:02:18,440 --> 00:02:21,350
and it will give you the price history of that 

36355
00:02:21,380 --> 00:02:22,580
product. isn't that cool?

36356
00:02:22,880 --> 00:02:27,880
So now you can look and get actual data on how much that product costs over the

36357
00:02:28,790 --> 00:02:33,560
past few months or year and you can now see what was the lowest price,

36358
00:02:33,860 --> 00:02:38,210
what was the highest price and see how it just fluctuates almost randomly.

36359
00:02:38,660 --> 00:02:41,600
Now, normally I would think that on big sale days

36360
00:02:41,660 --> 00:02:46,370
like black Friday or prime day, that you would get the cheapest price,

36361
00:02:46,730 --> 00:02:51,020
but actually, that's not always the case. For example, in this case,

36362
00:02:51,020 --> 00:02:55,400
the cheapest price for this item happened on May 25th,

36363
00:02:55,760 --> 00:02:58,310
which is, I think, just a normal day.

36364
00:02:58,310 --> 00:03:01,870
I don't really why it got price-dropped to that amount.

36365
00:03:03,060 --> 00:03:08,060
So let's say that we have set a price in our mind at which point I'm ready to

36366
00:03:09,150 --> 00:03:10,920
make a purchase. So for me,

36367
00:03:11,400 --> 00:03:15,930
maybe if this item drops down from $119

36368
00:03:16,020 --> 00:03:20,910
um, to let's say $99, then I'll actually buy it.

36369
00:03:21,720 --> 00:03:24,870
Now we can actually do this using what we've learned,

36370
00:03:25,290 --> 00:03:30,270
and then on that day, I get an email and it tells me Instant Pot price alert,

36371
00:03:30,330 --> 00:03:35,250
the product price is now $99.99 below your target price, go ahead and buy now.

36372
00:03:35,850 --> 00:03:40,350
So this is basically the functionality that we want to build using our knowledge

36373
00:03:40,350 --> 00:03:42,150
of Python and web scraping.

36374
00:03:42,930 --> 00:03:47,400
And our Python bot is going to be the one that's going to be constantly checking

36375
00:03:47,400 --> 00:03:49,710
for the price. And when the time is right,

36376
00:03:49,740 --> 00:03:53,280
it's going to be the one that's going to alert us, using an email,

36377
00:03:53,460 --> 00:03:57,900
telling us to buy so that we don't have to spend every day looking at the

36378
00:03:57,900 --> 00:03:58,440
website,

36379
00:03:58,440 --> 00:04:02,850
checking the price and doing something that our Python bot could do by itself.

36380
00:04:04,170 --> 00:04:09,090
The idea here is our little Python body is going to have a set time, let's say 

36381
00:04:09,090 --> 00:04:13,290
9:00 AM every day where it checks that URL that we got.

36382
00:04:13,740 --> 00:04:18,000
So it's going to look at a specific thing on that webpage,

36383
00:04:18,029 --> 00:04:22,290
which is the price. So at the moment, it's right, registering as 

36384
00:04:22,290 --> 00:04:24,690
$119.99

36385
00:04:25,110 --> 00:04:30,110
and the moment when it checks that price and it sees 99.9 something,

36386
00:04:31,290 --> 00:04:34,920
so anything that's below our set target of a hundred dollars,

36387
00:04:35,280 --> 00:04:39,480
then it's going to send us an email and give us an alert.

36388
00:04:40,440 --> 00:04:45,000
So then we can go to the URL and purchase is that product.

36389
00:04:45,300 --> 00:04:47,040
Instead of having to check it out ourselves,

36390
00:04:47,370 --> 00:04:50,760
we now get notified when our condition is met.

36391
00:04:51,720 --> 00:04:55,350
As you can imagine, this is going to involve a little bit of web scraping,

36392
00:04:55,500 --> 00:05:00,500
where we try to get hold of the value of this price and we turn it into a number

36393
00:05:02,250 --> 00:05:07,230
and we check it against our target price. And then when the conditions are met,

36394
00:05:07,290 --> 00:05:10,950
then we use the SMTP module to send ourselves an email.

36395
00:05:11,880 --> 00:05:14,100
So that's the goal of today's project

36396
00:05:14,250 --> 00:05:18,210
and I think if you're somebody like me who buys a lot of stuff online,

36397
00:05:18,510 --> 00:05:20,940
then this is going to be pretty interesting for you.

36398
00:05:21,090 --> 00:05:23,970
And I hope that will actually come in handy at some point as well.

36399
00:05:24,840 --> 00:05:29,370
So head over to the next lesson and let's get started building our Amazon price

36400
00:05:29,370 --> 00:05:30,090
tracking bot.


36401
00:00:00,030 --> 00:00:00,660
Hey guys,

36402
00:00:00,660 --> 00:00:05,190
welcome to Day 48 of 100 Days of Code. Today

36403
00:00:05,190 --> 00:00:10,190
we're going to be introducing a new technology for advanced web scraping,

36404
00:00:10,890 --> 00:00:13,200
and that is Selenium WebDriver.

36405
00:00:13,680 --> 00:00:16,170
Now you might have heard of Selenium WebDriver before

36406
00:00:16,200 --> 00:00:21,030
because it's probably one of the most well-known automation and testing tools

36407
00:00:21,300 --> 00:00:25,200
for web developers out there. But you might be wondering, well,

36408
00:00:25,230 --> 00:00:29,550
we already have Beautiful Soup. So why do we need to learn a new technology?

36409
00:00:30,180 --> 00:00:30,450
Well,

36410
00:00:30,450 --> 00:00:35,450
one of the things that we've really been limited by is we can't actually use all

36411
00:00:35,970 --> 00:00:38,370
the capabilities that browsers can do.

36412
00:00:38,580 --> 00:00:42,930
So when we load up a website with beautiful soup, we can't, for example,

36413
00:00:42,990 --> 00:00:47,990
type something into the website and then click on something. And to create these

36414
00:00:48,120 --> 00:00:49,920
chains of continuous actions

36415
00:00:50,280 --> 00:00:55,280
where we basically automate the entire flow of a particular job or a particular

36416
00:00:55,950 --> 00:00:58,320
task. To do that,

36417
00:00:58,380 --> 00:01:01,230
we're going to need to use Selenium WebDriver.

36418
00:01:02,070 --> 00:01:07,070
Now, this is a free tool and it basically allows us to automate the browser,

36419
00:01:08,250 --> 00:01:11,520
get the browser to do things automatically

36420
00:01:11,760 --> 00:01:16,760
depending on a script or a piece of code that we write. Now,

36421
00:01:17,580 --> 00:01:22,580
this is going to enable us to type as well as click as well as scroll.

36422
00:01:25,560 --> 00:01:30,560
Basically anything that a human pretty much can do on a website, you can do using

36423
00:01:30,930 --> 00:01:33,030
a Selenium driven browser.

36424
00:01:33,600 --> 00:01:37,860
It's kind of like we're building a robot and telling it what to do on a browser.

36425
00:01:38,310 --> 00:01:43,290
And selenium is the tool that allows the robot to interact and communicate with

36426
00:01:43,290 --> 00:01:46,080
the browser. And once we've leveled up,

36427
00:01:46,140 --> 00:01:49,290
we'll be able to do all sorts of things like, for example,

36428
00:01:49,590 --> 00:01:54,590
play web-based games like cookie clicker automatically to click on this cookie

36429
00:01:56,820 --> 00:02:01,820
all by itself using the code instead of us having to manually do it and then to

36430
00:02:02,820 --> 00:02:07,820
select upgrades and to purchase them, again, completely automatically.

36431
00:02:09,090 --> 00:02:13,530
If you ever wanted to be the best at cookie-clicker or any other web-based

36432
00:02:13,530 --> 00:02:18,150
game and you don't want to invest the time in scaling up and getting good at it

36433
00:02:18,420 --> 00:02:23,220
yourself, well then this is where automation might help you.

36434
00:02:23,940 --> 00:02:25,560
But on a more serious note,

36435
00:02:25,590 --> 00:02:29,100
you might use something like selenium to automate

36436
00:02:29,100 --> 00:02:34,100
filling in forms or transferring information from an Excel spreadsheet to a

36437
00:02:35,190 --> 00:02:36,600
online Google form,

36438
00:02:36,630 --> 00:02:40,470
or basically doing anything that is repetitive and tedious,

36439
00:02:40,770 --> 00:02:42,390
and you don't want to do it yourself.

36440
00:02:43,050 --> 00:02:45,690
So once you are ready, head over to the next lesson

36441
00:02:45,900 --> 00:02:49,440
and let's start learning about this new superpower.


36442
00:00:00,360 --> 00:00:03,360
In order to start using Selenium WebDriver,

36443
00:00:03,660 --> 00:00:07,290
we're going to have to go through a number of steps in order to set up our

36444
00:00:07,290 --> 00:00:11,970
browser and also to install and set up Selenium. Now,

36445
00:00:12,120 --> 00:00:16,830
the first step, if you haven't already, is to install the Chrome browser.

36446
00:00:17,100 --> 00:00:19,860
Now, while you can work with selenium using other browsers

36447
00:00:19,880 --> 00:00:22,460
like Firefox or Safari,

36448
00:00:22,850 --> 00:00:25,850
we're going to be using a number of Chrome developer tools. And also

36449
00:00:26,390 --> 00:00:29,900
in order for you to work alongside, to do exactly what I'm doing,

36450
00:00:30,200 --> 00:00:33,260
it'll be much easier if you're working on the same browser and the same

36451
00:00:33,260 --> 00:00:36,020
technology. If you haven't already got Chrome,

36452
00:00:36,050 --> 00:00:40,100
then head over to the course resources where you'll find a link to download the

36453
00:00:40,100 --> 00:00:44,390
latest version for your computer. And then once you've done that,

36454
00:00:44,510 --> 00:00:47,810
the next step is to download the Chrome driver.

36455
00:00:48,260 --> 00:00:53,180
And this is different from the actual browser. Again, in the course resources,

36456
00:00:53,210 --> 00:00:58,210
you'll find a link to all the Chromedrivers and we have to download the

36457
00:00:58,280 --> 00:01:00,350
version of Chromedriver that matches

36458
00:01:00,980 --> 00:01:05,690
the version of Chrome that we have. In order to find out the version of Chrome,

36459
00:01:05,720 --> 00:01:08,840
all you have to do head over to the top-right corner,

36460
00:01:08,870 --> 00:01:11,420
click on these three dots, go to help,

36461
00:01:11,690 --> 00:01:14,930
and then go to about Google Chrome. Here

36462
00:01:14,930 --> 00:01:18,170
it's going to tell you which version you are currently running.

36463
00:01:18,590 --> 00:01:21,650
And because you're going to be watching the video in the future,

36464
00:01:21,920 --> 00:01:26,920
this version might not be the same for you as you see right here. Currently,

36465
00:01:27,080 --> 00:01:29,630
I am completely up to date, so the latest 

36466
00:01:29,630 --> 00:01:33,950
version that I'm running is version 84. Now,

36467
00:01:33,980 --> 00:01:38,980
all I have to do is go back here and find the version of 84 and download it.

36468
00:01:39,800 --> 00:01:43,850
So I just have to click here and it will take me to a

36469
00:01:43,910 --> 00:01:47,030
page where I've got three options. Now

36470
00:01:47,030 --> 00:01:51,470
if I'm running a Linux computer, then I click on this one. If I'm running a Mac,

36471
00:01:51,500 --> 00:01:55,160
I click on this one and Windows users will click on this one.

36472
00:01:55,310 --> 00:01:59,150
So I'm running a Mac so I'm going to take that particular file.

36473
00:01:59,870 --> 00:02:02,420
Now I'm going to have to unzip the file

36474
00:02:02,720 --> 00:02:05,420
and I end up with the actual Chrome driver.

36475
00:02:06,350 --> 00:02:11,350
Now the final step is to move this Chrome driver to a location of our choice.

36476
00:02:12,800 --> 00:02:16,580
I don't recommend keeping the driver inside the downloads folder

36477
00:02:16,610 --> 00:02:21,080
just because I'm sure you, as well as I, will and delete everything in the

36478
00:02:21,080 --> 00:02:23,630
downloads folder without a lot of inspection.

36479
00:02:24,080 --> 00:02:26,870
So we should move this Chrome driver to somewhere else,

36480
00:02:26,990 --> 00:02:31,120
somewhere where it's not likely to get deleted accidentally. In my case,

36481
00:02:31,250 --> 00:02:36,250
I'm going to go up a level with command up and here 

36482
00:02:36,380 --> 00:02:39,350
I've got a folder that I've created called Development.

36483
00:02:39,860 --> 00:02:43,730
Now you can create a folder anywhere you like, um,

36484
00:02:43,820 --> 00:02:48,820
and then call it anything you like and move this Chrome driver over to the new

36485
00:02:49,940 --> 00:02:53,540
location. Now, the most important thing though is

36486
00:02:53,810 --> 00:02:58,810
to actually get the file path for this particular file. To do that on a Mac

36487
00:02:59,800 --> 00:03:03,730
all we have to do is right-click and go to get info.

36488
00:03:04,210 --> 00:03:09,210
And then where it says where we're going to copy all of that hit command+C to

36489
00:03:09,850 --> 00:03:14,530
copy. And then we're going to go into a new project that we've created

36490
00:03:14,650 --> 00:03:18,130
which I've named day-48. In the main.py

36491
00:03:18,190 --> 00:03:23,190
I'm going to paste this entire file path and I'm gonna save it as the Chrome

36492
00:03:24,070 --> 00:03:26,200
driver path like this.

36493
00:03:27,790 --> 00:03:32,790
Now the final step we have to add to this path is to add a forward slash to the

36494
00:03:33,850 --> 00:03:35,590
actual Chrome driver.

36495
00:03:36,430 --> 00:03:39,580
PyCharm should auto suggest the name of Chrome driver,

36496
00:03:39,940 --> 00:03:44,320
but this is now the full path that will take us to that particular driver.

36497
00:03:45,970 --> 00:03:49,840
Now, if you are on Windows, the process is pretty much the same.

36498
00:03:50,050 --> 00:03:54,820
Once you've downloaded the driver for your system, so Windows 32,

36499
00:03:55,420 --> 00:03:59,980
then you're going to go ahead and open it up and unzip it.

36500
00:03:59,980 --> 00:04:04,980
So click on this extract button so that you can actually extract everything

36501
00:04:05,830 --> 00:04:07,900
that's inside. Now,

36502
00:04:07,900 --> 00:04:12,400
it's going to ask you for a destination for where you want to put the extracted

36503
00:04:12,400 --> 00:04:12,820
file.

36504
00:04:12,820 --> 00:04:17,230
So we're going to click on browse and you're gonna select a location on your

36505
00:04:17,230 --> 00:04:20,440
computer. Now, if you don't have a preference,

36506
00:04:20,440 --> 00:04:25,440
I recommend just going to your C drive and then here creating a new folder

36507
00:04:30,880 --> 00:04:32,230
called Development.

36508
00:04:32,740 --> 00:04:37,210
And then inside this folder is where you're going to extract the Chrome driver.

36509
00:04:38,020 --> 00:04:42,100
So go ahead and click extract. And then once that's done,

36510
00:04:42,130 --> 00:04:44,800
we'll go and navigate to that location.

36511
00:04:45,100 --> 00:04:49,090
So it was in the C drive and it was inside the development folder.

36512
00:04:49,420 --> 00:04:53,440
And you can check and just make sure that your Chrome driver is sitting inside

36513
00:04:53,440 --> 00:04:53,830
here

36514
00:04:53,830 --> 00:04:58,830
and it's an application that you've extracted from the zip file. Now to find out

36515
00:04:59,050 --> 00:05:03,250
its file path, we're going to right-click and go to properties.

36516
00:05:03,760 --> 00:05:07,330
And then in the properties you see the location right here.

36517
00:05:07,960 --> 00:05:10,180
So here is the location

36518
00:05:10,240 --> 00:05:15,160
and all we have to do is just to select everything that's here and then go ahead

36519
00:05:15,160 --> 00:05:17,500
and use control+c to copy it

36520
00:05:18,070 --> 00:05:22,060
and then we can paste it into our file in PyCharm.

36521
00:05:22,720 --> 00:05:27,190
So we're going to paste it inside a string like this. And again,

36522
00:05:27,220 --> 00:05:31,540
we're going to save it into the name that is chrome_

36523
00:05:31,990 --> 00:05:36,010
driver_path like this.

36524
00:05:36,610 --> 00:05:39,370
And again, we're doing the same thing that we did with the Mac.

36525
00:05:39,400 --> 00:05:44,400
We're going to add another backslash and then add the name of our Chrome driver

36526
00:05:45,760 --> 00:05:46,593
like this.

36527
00:05:47,230 --> 00:05:51,220
So now that we've installed Chrome and we've downloaded the Chrome driver,

36528
00:05:51,760 --> 00:05:56,760
the next and last step is to install and set up Selenium. In my main.py

36529
00:05:57,560 --> 00:06:02,560
I'm going to import Selenium. And make sure that you spelled it correctly

36530
00:06:02,990 --> 00:06:04,460
so it looks like this.

36531
00:06:04,820 --> 00:06:09,620
And then we're going to click on this red light bulb as always to install our

36532
00:06:09,620 --> 00:06:12,020
package. Now,

36533
00:06:12,020 --> 00:06:14,750
once Selenium has been installed successfully,

36534
00:06:15,200 --> 00:06:17,270
I'm going to change the import statement.

36535
00:06:17,600 --> 00:06:21,980
I'm going to say that from this newly installed selenium package,

36536
00:06:22,280 --> 00:06:27,280
I'm going to import a module called WebDriver and it's this webdriver

36537
00:06:28,310 --> 00:06:33,050
which is going to be driving the Chrome browser and doing all of our automated

36538
00:06:33,050 --> 00:06:33,883
tasks.

36539
00:06:34,250 --> 00:06:38,870
Let's create a new driver from that new module.

36540
00:06:39,410 --> 00:06:44,410
So driver = webdriver. and then we can now instantiate any browser of our

36541
00:06:45,980 --> 00:06:50,510
choice. So in our case, we're going to be creating a Chrome browser to drive,

36542
00:06:50,930 --> 00:06:55,930
but you can see that you can also have Firefox or Safari and a large number of

36543
00:06:56,270 --> 00:06:57,140
other browsers.

36544
00:06:58,280 --> 00:07:02,930
We're going to choose Chrome and notice that this is Chrome with a capital C.

36545
00:07:02,960 --> 00:07:05,150
So we're initializing a new object here.

36546
00:07:05,900 --> 00:07:10,900
And the only required argument we have to give is the executable path.

36547
00:07:11,450 --> 00:07:14,720
So this is the path of the executable

36548
00:07:14,870 --> 00:07:17,630
that is the Chrome driver that we downloaded previously.

36549
00:07:18,200 --> 00:07:22,910
This is going to be the path and notice that it's the location where that Chrome

36550
00:07:22,910 --> 00:07:24,800
driver lives. And then at the very end,

36551
00:07:24,830 --> 00:07:27,860
we've got the actual name of the executable

36552
00:07:27,890 --> 00:07:32,750
which on a Mac is called chromedriver, on Windows it's chromedriver.exe.

36553
00:07:33,590 --> 00:07:38,150
Let's go ahead and pass this in here. And now that we've created our driver,

36554
00:07:38,180 --> 00:07:42,050
we're pretty much done with installing and setting up selenium WebDriver.

36555
00:07:42,800 --> 00:07:45,770
But if you're wondering what this Chrome driver is, well,

36556
00:07:45,800 --> 00:07:49,340
here's the way to think about it. We've got our Selenium package

36557
00:07:49,580 --> 00:07:53,180
which contains code for us to be able to interact with browsers.

36558
00:07:53,750 --> 00:07:57,890
Now it can interact with the Chrome browser which is what we're choosing to do,

36559
00:07:58,250 --> 00:08:02,450
but it can also interact with a bunch of other ones like Safari or Firefox.

36560
00:08:03,140 --> 00:08:03,500
Now,

36561
00:08:03,500 --> 00:08:08,500
how do we make sure that this package which can handle all three knows

36562
00:08:08,540 --> 00:08:12,800
specifically how to work with the Chrome browser? Well,

36563
00:08:12,800 --> 00:08:17,800
we're going to need some sort of a bridge that bridges the selenium code to work

36564
00:08:19,550 --> 00:08:21,380
with the Chrome browser.

36565
00:08:21,860 --> 00:08:25,220
And this bridge is provided by the Chrome driver.

36566
00:08:25,940 --> 00:08:28,280
So there'll be a different driver for a Safari,

36567
00:08:28,310 --> 00:08:30,500
and there'll be a different driver for Firefox.

36568
00:08:30,920 --> 00:08:33,320
And just by switching up those drivers,

36569
00:08:33,620 --> 00:08:37,880
it will tell selenium how to work with the latest version of these browsers.

36570
00:08:38,539 --> 00:08:40,580
All we have to do is now use it.

36571
00:08:41,210 --> 00:08:45,560
So the first thing I'm going to use my driver to do is I'm just going to get it

36572
00:08:45,620 --> 00:08:49,490
to open up a webpage. We'll use driver.get

36573
00:08:49,640 --> 00:08:52,070
and then we can pass in the URL here.

36574
00:08:52,730 --> 00:08:55,100
So it's going to be HTTPS

36575
00:08:55,140 --> 00:08:59,430
and then I'm going to go to amazon.com. Now,

36576
00:08:59,730 --> 00:09:02,370
if you're on Windows and you go ahead and run the code,

36577
00:09:02,430 --> 00:09:06,240
then it should run without any issues. But if you're on a Mac, 

36578
00:09:06,270 --> 00:09:07,530
this is what happens.

36579
00:09:09,720 --> 00:09:14,040
You'll get a popup that says chromedriver cannot be opened because the developer

36580
00:09:14,040 --> 00:09:18,870
cannot be verified even though we know that this is actually created by Google,

36581
00:09:18,900 --> 00:09:22,860
specifically for the Chrome browser. So if this happens,

36582
00:09:22,890 --> 00:09:24,210
you're going to click cancel

36583
00:09:24,540 --> 00:09:29,430
and you'll get all of these errors because it's unable to access that file. Now,

36584
00:09:29,460 --> 00:09:34,170
in order to enable it, we're going to go to the Apple symbol, system preferences.

36585
00:09:35,940 --> 00:09:39,390
And then we're going to go to security and privacy and here,

36586
00:09:39,390 --> 00:09:41,370
because we try to run it before,

36587
00:09:41,610 --> 00:09:45,060
we've got something that says chromedriver was blocked from use.

36588
00:09:45,450 --> 00:09:48,120
So we're going to click on the allow anyways.

36589
00:09:48,690 --> 00:09:52,890
And now if we run this again, then it'll give us this popup

36590
00:09:53,070 --> 00:09:55,350
and all we have to do is click open.

36591
00:09:56,190 --> 00:09:58,380
And once we've done all of that,

36592
00:09:58,680 --> 00:10:03,680
now it's going to finally open up the site that we wanted to go to, amazon.com,

36593
00:10:05,010 --> 00:10:08,370
using this automated version of Chrome.

36594
00:10:08,760 --> 00:10:11,910
And you can see this because right at the top here,

36595
00:10:11,970 --> 00:10:15,330
it says Chrome is being controlled by automated test software.

36596
00:10:15,630 --> 00:10:17,040
That is our selenium.

36597
00:10:17,700 --> 00:10:22,700
The driver.get method effectively opens up a new browser window with the URL

36598
00:10:24,300 --> 00:10:25,410
that you've specified.

36599
00:10:26,040 --> 00:10:31,040
Now you'll also want to close down the window or the entire browser once you're

36600
00:10:32,640 --> 00:10:37,640
done with whatever it is you may want to automate or do. To do that

36601
00:10:38,010 --> 00:10:42,960
all we have to do is tap into driver and then we can call the method close.

36602
00:10:43,350 --> 00:10:45,420
Now, when I hit the run button,

36603
00:10:45,480 --> 00:10:48,600
you can see now it's going to open up amazon.com

36604
00:10:48,930 --> 00:10:52,800
and as soon as that page loaded, it pretty much just closed it down.

36605
00:10:53,550 --> 00:10:58,290
Now there's also another method called driver.quit.

36606
00:10:58,740 --> 00:11:00,840
Now what's the difference between close and quit,

36607
00:11:00,870 --> 00:11:05,700
you might wonder? Well, close actually just closes a single tab,

36608
00:11:05,760 --> 00:11:09,510
the active tab where you've opened up a particular page.

36609
00:11:09,930 --> 00:11:13,020
Now quit is actually going to quit the entire browser.

36610
00:11:13,530 --> 00:11:17,280
There are certain cases where you have more than one tab running at the same

36611
00:11:17,280 --> 00:11:18,113
time.

36612
00:11:18,120 --> 00:11:22,830
Close will close that particular tab while quit will actually quit the entire

36613
00:11:22,830 --> 00:11:26,160
program. Once I'm done using my driver,

36614
00:11:26,190 --> 00:11:31,190
I prefer actually just using quit to shut down the entire browser.

36615
00:11:32,040 --> 00:11:36,240
That way we can always start again from scratch and we'll have a fresh browser

36616
00:11:36,240 --> 00:11:39,870
to work with. And in the next and coming lessons,

36617
00:11:39,990 --> 00:11:44,040
we're going to show you how to use selenium to do basically anything that we

36618
00:11:44,040 --> 00:11:46,500
could do with a mouse and keyboard as humans,

36619
00:11:46,770 --> 00:11:50,880
but instead, we're going to automate the entire process and workflow.

36620
00:11:51,450 --> 00:11:54,540
So for all of that and more, I'll see you in the next lesson.


36621
00:00:00,180 --> 00:00:05,040
Now that we've seen how we can get started using selenium webdriver to automate

36622
00:00:05,070 --> 00:00:09,330
our browser, the next step is to figure out how to use selenium

36623
00:00:09,360 --> 00:00:14,360
to find and locate specific HTML elements on the webpage.

36624
00:00:16,140 --> 00:00:21,140
Just between where we quit our driver and where we get hold of a particular

36625
00:00:21,380 --> 00:00:22,213
page,

36626
00:00:22,340 --> 00:00:27,340
I'm going to show you how easy it is to complete the previous task in day 47

36627
00:00:29,090 --> 00:00:33,650
where we try to get hold of the price of a particular item on amazon.com.

36628
00:00:34,940 --> 00:00:38,390
This was the item that we were interested in. This was the instant pot

36629
00:00:38,480 --> 00:00:40,160
and this is the price.

36630
00:00:40,430 --> 00:00:45,430
So if I go ahead and take this URL and replace this previous

36631
00:00:46,010 --> 00:00:50,750
just amazon.com URL with the URL that takes us to this page,

36632
00:00:51,050 --> 00:00:54,590
then, we can start inspecting on this particular element.

36633
00:00:55,310 --> 00:00:57,950
So here we've got the price,

36634
00:00:59,900 --> 00:01:04,900
which is that inside a span with the id of priceblock_ourprice.

36635
00:01:05,600 --> 00:01:07,310
Now, if I use that,

36636
00:01:07,340 --> 00:01:12,340
then I can simply say driver.find_element_by_id

36637
00:01:14,810 --> 00:01:18,530
and then I can paste in the id that I found just now,

36638
00:01:18,920 --> 00:01:23,420
and this is going to be equal to the price element. Now,

36639
00:01:23,420 --> 00:01:24,980
if I want to get hold of the price,

36640
00:01:25,010 --> 00:01:29,540
all I have to do is to print that element.text.

36641
00:01:30,110 --> 00:01:31,520
And now if I hit run,

36642
00:01:31,580 --> 00:01:36,580
you'll see our browser open up briefly to the page with the Instant pot

36643
00:01:36,680 --> 00:01:40,520
and then it'll close down and you can see the price printed right here.

36644
00:01:41,270 --> 00:01:41,900
Now,

36645
00:01:41,900 --> 00:01:46,900
the reason why this is so much shorter than what you did in the last project is

36646
00:01:47,240 --> 00:01:49,670
because we're driving a browser.

36647
00:01:49,700 --> 00:01:52,730
So the browser is already sending all of those headers,

36648
00:01:53,030 --> 00:01:58,030
all of the information that Amazon would expect from a actual user instead of

36649
00:01:59,600 --> 00:02:02,660
using a get request using the request package.

36650
00:02:03,260 --> 00:02:05,480
So in only three lines,

36651
00:02:05,570 --> 00:02:10,250
we can do so much more than we could do with Beautiful Soup. Essentially,

36652
00:02:10,250 --> 00:02:11,120
if you think about it,

36653
00:02:11,150 --> 00:02:16,150
Beautiful Soup is really good for just grabbing and scraping pieces of data

36654
00:02:16,790 --> 00:02:18,290
from an HTML website.

36655
00:02:18,740 --> 00:02:22,190
But it gets stuck when that website is being rendered

36656
00:02:22,190 --> 00:02:24,920
using JavaScript or Angular or React

36657
00:02:25,220 --> 00:02:30,220
and the content that was HTML was taking time to load,

36658
00:02:31,700 --> 00:02:35,540
or it requires certain conditions to load.

36659
00:02:36,140 --> 00:02:37,250
Whereas in this case,

36660
00:02:37,280 --> 00:02:42,200
we're effectively doing exactly the same thing as we would as a human,

36661
00:02:42,590 --> 00:02:44,570
going to this particular URL,

36662
00:02:44,630 --> 00:02:48,380
and then looking at this element and its value.

36663
00:02:49,760 --> 00:02:54,260
I wanted to show you a couple of other ways that you could find elements because

36664
00:02:54,260 --> 00:02:55,730
as soon as I write driver.

36665
00:02:55,760 --> 00:03:00,190
find, you can see there's a whole bunch of ways of finding elements

36666
00:03:00,250 --> 00:03:04,450
and there's a lot more methods than you have with Beautiful Soup.

36667
00:03:05,050 --> 00:03:08,920
One that I want to show you that's quite useful is find_

36668
00:03:08,950 --> 00:03:12,670
_element_by_name. If we go to python.org,

36669
00:03:13,060 --> 00:03:18,060
you'll remember from your lessons on HTML and CSS that most forms,

36670
00:03:18,700 --> 00:03:22,840
these input forms, will have a name attribute.

36671
00:03:23,140 --> 00:03:28,090
So if I go ahead and inspect on this search bar, you can see its got an ID,

36672
00:03:28,390 --> 00:03:31,600
it's got a name, it's got a type, it's got a role, it's got a class.

36673
00:03:31,600 --> 00:03:33,490
It has got a whole bunch of attributes.

36674
00:03:33,910 --> 00:03:37,660
Now I'm going to search for it by this name, which is q.

36675
00:03:38,350 --> 00:03:40,030
And I can do that by saying

36676
00:03:40,060 --> 00:03:44,200
find_element_by_name and then specify the name as q.

36677
00:03:44,860 --> 00:03:49,860
Now of course I'll have to change this URL to actually python.org.

36678
00:03:51,790 --> 00:03:55,810
And now once we've found our element by name,

36679
00:03:56,020 --> 00:03:57,820
we'll call it the search_bar,

36680
00:04:02,700 --> 00:04:03,450
...

36681
00:04:03,450 --> 00:04:06,960
and then we'll go ahead and print out this search bar.

36682
00:04:10,200 --> 00:04:11,033
Right.

36683
00:04:11,070 --> 00:04:13,800
When selenium locates a particular element,

36684
00:04:14,040 --> 00:04:17,040
it won't actually print out the actual HTML.

36685
00:04:17,399 --> 00:04:22,320
It'll give it to you as a selenium element like this. Now,

36686
00:04:22,350 --> 00:04:27,350
if you want to tap into its various attributes or text or tag name,

36687
00:04:28,260 --> 00:04:30,870
then you'll actually have to do that using a dot.

36688
00:04:31,530 --> 00:04:33,930
So we can say search_bar.tag_name,

36689
00:04:34,050 --> 00:04:38,130
and it will give us that that is an input tag.

36690
00:04:39,060 --> 00:04:42,480
Or we could say search_bar.get_attribute

36691
00:04:42,570 --> 00:04:47,430
and we can specify the attribute that we want the value for. So for example,

36692
00:04:47,430 --> 00:04:50,100
if I wanted to know what the placeholder value was,

36693
00:04:50,370 --> 00:04:54,000
then all I have to do is put, get attribute placeholder,

36694
00:04:54,060 --> 00:04:55,440
and then we can print that out.

36695
00:04:56,010 --> 00:04:58,920
And it will tell us that placeholder says search.

36696
00:04:59,850 --> 00:05:03,840
So that is something that you'll find people commonly use with Selenium, find

36697
00:05:03,840 --> 00:05:04,830
element by name.

36698
00:05:05,220 --> 00:05:10,220
And it's really useful when it comes to filling in web forms because most forms

36699
00:05:10,350 --> 00:05:14,760
will have elements that are organized by name because when the form is

36700
00:05:14,760 --> 00:05:15,593
submitted,

36701
00:05:15,660 --> 00:05:20,010
that name is carried along with the value of the inputs.

36702
00:05:20,730 --> 00:05:25,350
In addition to find element by name, you'll also see the usual ones.

36703
00:05:25,350 --> 00:05:28,320
So find element by class name, for example.

36704
00:05:28,980 --> 00:05:32,910
So if we wanted to get hold of this logo here,

36705
00:05:33,900 --> 00:05:37,380
then it has a class of python-logo.

36706
00:05:37,920 --> 00:05:40,470
So all I have to add here is the name of the class

36707
00:05:40,500 --> 00:05:42,930
which is python-logo

36708
00:05:43,530 --> 00:05:48,450
and this will give me that logo element. Now from the logo element,

36709
00:05:48,480 --> 00:05:51,930
I can actually get hold of things even like it's size.

36710
00:05:52,050 --> 00:05:54,840
So let's go ahead and print out the size of the logo.

36711
00:05:55,380 --> 00:05:56,213
Right.

36712
00:05:58,520 --> 00:06:02,030
It has a height of 82 and a width of 290.

36713
00:06:02,480 --> 00:06:06,860
So you can see that we can do a lot more with selenium than we could with

36714
00:06:06,890 --> 00:06:07,730
beautiful soup.

36715
00:06:09,410 --> 00:06:13,670
So that's fine element by ID, by name, by class name,

36716
00:06:14,690 --> 00:06:19,430
but there's also of course find element by CSS selector.

36717
00:06:20,030 --> 00:06:24,380
And this is probably one of the easiest ways of narrowing down on a particular

36718
00:06:24,380 --> 00:06:25,213
element.

36719
00:06:26,300 --> 00:06:29,720
Let's say that I wanted to get hold of this link to the docs.

36720
00:06:30,200 --> 00:06:33,890
Let's go ahead and inspect it, and it lives inside an anchor tag.

36721
00:06:34,220 --> 00:06:36,680
But you can see that this anchor tag has no class,

36722
00:06:36,710 --> 00:06:40,730
it has no ID, has no easy way of identification.

36723
00:06:41,180 --> 00:06:43,220
So how do we get hold of it? Well,

36724
00:06:43,220 --> 00:06:47,870
we can see that it lives in a paragraph element and then going further up,

36725
00:06:47,900 --> 00:06:51,230
it's inside a div with this particular class.

36726
00:06:51,710 --> 00:06:55,130
So this has a class of documentation-widget.

36727
00:06:55,460 --> 00:06:59,540
So that's pretty specific. So if we wanted to get hold of that anchor tag,

36728
00:06:59,570 --> 00:07:04,430
we could just say, well, inside this div of documentation-widget,

36729
00:07:04,790 --> 00:07:07,250
let's go ahead and find any anchor tags.

36730
00:07:08,210 --> 00:07:11,060
And to express that as a CSS selector,

36731
00:07:11,060 --> 00:07:13,970
we would specify the class documentation-widget,

36732
00:07:14,330 --> 00:07:18,410
and then inside the element with that class, we're looking for an anchor tag.

36733
00:07:18,890 --> 00:07:22,670
So this would get us our documentation link.

36734
00:07:24,290 --> 00:07:29,290
And now if I go ahead and print the documentation_link.text,

36735
00:07:29,810 --> 00:07:34,810
you can see that it's actually getting hold of this particular link.

36736
00:07:36,290 --> 00:07:37,040
And this is done

36737
00:07:37,040 --> 00:07:42,040
even though the actual link doesn't have any easily identifiable name or class

36738
00:07:43,040 --> 00:07:46,670
or ID. Now on a similar vein

36739
00:07:46,790 --> 00:07:51,790
sometimes it's extremely hard to even find an element even by CSS selector.

36740
00:07:52,790 --> 00:07:57,590
So if all else fails, one that will always work as the XPath.

36741
00:07:58,190 --> 00:08:03,190
The XPath is a way of locating a specific HTML element by a path structure.

36742
00:08:06,200 --> 00:08:09,050
So you've seen what paths look like right?

36743
00:08:09,050 --> 00:08:12,320
Users/angela/Development, et cetera. Well,

36744
00:08:12,320 --> 00:08:17,320
we can also express the navigation to a particular element drilling down from

36745
00:08:18,800 --> 00:08:23,450
the top of the tree to a particular node using the XPath.

36746
00:08:24,020 --> 00:08:28,340
Let's say I wanted to get hold of this link at the bottom, submit website bug.

36747
00:08:28,890 --> 00:08:30,410
Let's go ahead and inspect on it.

36748
00:08:30,710 --> 00:08:35,710
And you can see it's not particularly unique in terms of having an ID or a class

36749
00:08:37,039 --> 00:08:40,789
or a name. And even in terms of its structure,

36750
00:08:40,820 --> 00:08:45,820
it's sort of in this ul and then an li and it might not be that easy to get

36751
00:08:47,030 --> 00:08:50,540
to it. But here's where our XPath comes in handy.

36752
00:08:50,960 --> 00:08:55,680
Let's go ahead and right click on it and then go to copy, copy XPath.

36753
00:08:56,310 --> 00:09:01,310
And now we can go back to our code and use it to tap into that element.

36754
00:09:02,310 --> 00:09:07,110
So we'll say driver, and then we'll say, find_element_by_xpath.

36755
00:09:07,530 --> 00:09:10,740
And then inside here, we're going to paste our XPath.

36756
00:09:11,250 --> 00:09:15,720
Now notice that the XPath itself actually has some double quotes.

36757
00:09:16,050 --> 00:09:17,580
So we have the change

36758
00:09:17,610 --> 00:09:22,470
our double quotes into a single quotes so that it doesn't clash with the

36759
00:09:22,500 --> 00:09:24,900
inner double quotes. So like this.

36760
00:09:25,410 --> 00:09:27,930
Now once we found our bug link,

36761
00:09:28,410 --> 00:09:33,410
then we're going to print out the link and I'm going to get hold of the href

36762
00:09:35,730 --> 00:09:36,563
here.

36763
00:09:37,170 --> 00:09:42,170
So now I'm going to print my bug_link.txt just to prove that this worked.

36764
00:09:42,780 --> 00:09:43,890
And if I hit run,

36765
00:09:44,190 --> 00:09:49,110
you can see it opens up our browser and you can see it's managed to get hold of

36766
00:09:49,110 --> 00:09:53,490
that particular link using this very specific XPath

36767
00:09:53,820 --> 00:09:58,140
which looks very much like a file path that we've been using.

36768
00:09:58,650 --> 00:10:03,650
But it's essentially the way that we would navigate down through the divs,

36769
00:10:03,720 --> 00:10:05,100
the uls, the lis,

36770
00:10:05,220 --> 00:10:10,220
all the way down to that particular anchor tag. And the best part of all is of

36771
00:10:11,400 --> 00:10:11,640
course,

36772
00:10:11,640 --> 00:10:16,500
you can use this button here in Chrome to locate any element.

36773
00:10:16,830 --> 00:10:19,620
And then that would select its location in the code

36774
00:10:19,980 --> 00:10:24,980
and then you can right-click and then copy it XPath to get hold of that

36775
00:10:25,050 --> 00:10:26,040
particular thing.

36776
00:10:27,570 --> 00:10:32,570
Now I'm going to link to the documentation on XPath from w3schools.

36777
00:10:33,090 --> 00:10:37,710
It goes into a little bit more detail about how XPaths are constructed,

36778
00:10:38,040 --> 00:10:41,940
but you don't need to know this in order to work with them. As I've shown,

36779
00:10:41,940 --> 00:10:46,830
you can simply use the Chrome developer tools and it will help you get to the

36780
00:10:46,860 --> 00:10:49,050
particular item you're interested in.

36781
00:10:51,030 --> 00:10:55,680
Now we've been looking at finding elements using selenium,

36782
00:10:56,100 --> 00:11:01,100
but notice how we've always stuck to the singular version of that method,

36783
00:11:01,140 --> 00:11:06,140
find element. Now for every single method that I've shown you,

36784
00:11:06,210 --> 00:11:10,800
there's also a counterpart, which is the find elements.

36785
00:11:10,980 --> 00:11:15,540
So, for example, find_elements_by_css_selector. And of course,

36786
00:11:15,570 --> 00:11:19,200
this is just going to find you everything on the screen that matches your

36787
00:11:19,200 --> 00:11:21,690
criteria and give it to you in a list.

36788
00:11:22,140 --> 00:11:27,140
And there is a version of this for every single find method that we've shown

36789
00:11:27,690 --> 00:11:30,270
so far. In the next lesson

36790
00:11:30,330 --> 00:11:35,250
I've got a quick challenge for you to put into practice what you've learned and

36791
00:11:35,250 --> 00:11:39,180
to be able to locate any given elements on a webpage. So

36792
00:11:39,870 --> 00:11:42,630
for all of that and more I'll see you on the next lesson.


36793
00:00:00,390 --> 00:00:01,770
Now in the last lesson,

36794
00:00:01,800 --> 00:00:06,800
we looked at various ways of finding and locating elements on a particular HTML

36795
00:00:07,920 --> 00:00:11,760
page. Now, in this lesson, we're going to put all of that to practice

36796
00:00:12,030 --> 00:00:16,890
and you're going to get hold of all of these upcoming events. Now,

36797
00:00:16,890 --> 00:00:19,470
because these events are time-dependent,

36798
00:00:19,920 --> 00:00:23,400
the events that you'll see will of course be different from what I've got here.

36799
00:00:24,120 --> 00:00:27,750
But the idea is to get hold of all of these dates,

36800
00:00:27,780 --> 00:00:32,430
so all five of these, and then get hold of all five of these names,

36801
00:00:32,670 --> 00:00:35,550
and we're going to create a dictionary from these events.

36802
00:00:36,030 --> 00:00:40,470
And by the end of the challenge, you should be able to print out a dictionary

36803
00:00:40,470 --> 00:00:41,970
that's structured like this.

36804
00:00:42,510 --> 00:00:47,510
It's going to contain five items. Starting from zero to this is the first key

36805
00:00:49,440 --> 00:00:54,440
and then the first value is a dictionary with a key of time and a key of name.

36806
00:00:55,890 --> 00:00:59,100
And then the values corresponds to of course,

36807
00:00:59,100 --> 00:01:01,950
the first date and the first name.

36808
00:01:01,980 --> 00:01:06,000
So the first one we've got here is PyCon JP 2020

36809
00:01:06,420 --> 00:01:10,920
and you can see down here in this section, upcoming events,

36810
00:01:11,040 --> 00:01:13,110
the first one is this item.

36811
00:01:13,590 --> 00:01:18,270
So we're basically converting whatever is here in the upcoming events into this

36812
00:01:18,300 --> 00:01:21,720
dictionary format. That is the goal

36813
00:01:21,930 --> 00:01:25,800
and you're going to be needing everything that you've learned previously.

36814
00:01:26,130 --> 00:01:26,963
In addition,

36815
00:01:27,090 --> 00:01:32,070
it might be worth taking a look at the documentation for locating elements with

36816
00:01:32,070 --> 00:01:36,480
selenium. So I'll link to this page in the course resources as well,

36817
00:01:36,870 --> 00:01:41,870
and once you're ready, get inspecting and see if you can complete this challenge

36818
00:01:42,540 --> 00:01:46,200
and print out this dictionary. Pause the video now.

36819
00:01:47,600 --> 00:01:48,433
All right.

36820
00:01:53,180 --> 00:01:55,700
So our goal is to get hold 

36821
00:01:55,700 --> 00:01:59,600
of this piece of data and this piece of data,

36822
00:01:59,630 --> 00:02:00,860
but just the text.

36823
00:02:01,370 --> 00:02:05,750
So we're going to have to first figure out how to locate these items.

36824
00:02:06,170 --> 00:02:08,960
So if I go ahead and inspect on this date,

36825
00:02:09,470 --> 00:02:13,700
you can see that it's inside a HTML element called time.

36826
00:02:14,690 --> 00:02:18,230
Now, in order to get hold of this element time,

36827
00:02:18,320 --> 00:02:20,960
we can of course use an XPath.

36828
00:02:21,380 --> 00:02:26,380
But the problem is that this XPath will be specific for this first item.

36829
00:02:27,050 --> 00:02:32,050
While we actually probably want to use a find method that can find all of the

36830
00:02:33,770 --> 00:02:36,680
dates and all of the event names.

36831
00:02:37,160 --> 00:02:40,880
So we're going to be using one of these multiple element finds.

36832
00:02:41,120 --> 00:02:43,280
So where it says find elements.

36833
00:02:44,180 --> 00:02:47,660
Now I think the easiest way here, at least for me,

36834
00:02:47,870 --> 00:02:51,050
is to think about it in terms of CSS selectors.

36835
00:02:51,710 --> 00:02:56,710
This is a time element that lives inside a li

36836
00:02:57,290 --> 00:03:00,940
which is inside a ul, but we still haven't found anything

36837
00:03:00,940 --> 00:03:04,180
that's unique to this particular structure here,

36838
00:03:04,720 --> 00:03:08,680
because if you take a look over here, when we look at the latest news,

36839
00:03:08,950 --> 00:03:12,100
it's also a time inside an li inside a ul.

36840
00:03:12,520 --> 00:03:17,520
And none of this is unique until we get to this div where we have a blog widget

36841
00:03:19,450 --> 00:03:23,740
while here we've got a event widget.

36842
00:03:24,130 --> 00:03:27,190
So there finally is a unique class name.

36843
00:03:27,730 --> 00:03:32,730
So we're going to use this class name and then find the time element. Back in our

36844
00:03:34,840 --> 00:03:35,290
code,

36845
00:03:35,290 --> 00:03:40,290
let's go ahead and tap into our driver and then use the find_elements_by_css

36846
00:03:41,710 --> 00:03:46,180
selector which is going to give us a list of elements that match the selector.

36847
00:03:46,630 --> 00:03:51,630
And the selector is going to be first find a div with this particular class.

36848
00:03:52,330 --> 00:03:55,300
So it has to have the class event-widget,

36849
00:03:55,630 --> 00:03:58,990
so we write .event-widget. And then after a space,

36850
00:03:59,020 --> 00:04:02,230
we specify the next thing we want to drill down to,

36851
00:04:02,650 --> 00:04:04,390
which is a time element.

36852
00:04:04,840 --> 00:04:08,320
So let's go ahead and just put the name of the HTML element like this,

36853
00:04:08,650 --> 00:04:13,030
and we'll get the event times as a list, hopefully.

36854
00:04:13,480 --> 00:04:16,779
So let's go ahead and print this out, event_times,

36855
00:04:17,260 --> 00:04:22,029
and because this is actually going to be a selenium object

36856
00:04:22,060 --> 00:04:24,190
rather than the actual text,

36857
00:04:24,610 --> 00:04:28,690
we'll need to use a for loop in order to actually see what it is.

36858
00:04:29,020 --> 00:04:31,690
So for time in event_times,

36859
00:04:31,930 --> 00:04:35,950
let's go ahead and print each of the time.text.

36860
00:04:39,460 --> 00:04:41,350
So once selenium has done its thing,

36861
00:04:41,380 --> 00:04:46,120
you can see it's now got hold of all five dates.

36862
00:04:47,950 --> 00:04:48,280
Now,

36863
00:04:48,280 --> 00:04:53,200
the next thing we need to do is to get hold of the event names,

36864
00:04:53,710 --> 00:04:55,810
and we're going to use a similar method.

36865
00:04:55,810 --> 00:05:00,810
So let's go ahead and inspect on the name and you can see that this is now a

36866
00:05:02,200 --> 00:05:03,033
anchor tag.

36867
00:05:03,580 --> 00:05:08,580
Now you might think that the solution will be just as simple as copying what we

36868
00:05:08,950 --> 00:05:13,950
had before and replacing the time element with an anchor tag element.

36869
00:05:14,920 --> 00:05:19,840
But you'll see as I write my for loop, for name in event_names,

36870
00:05:21,370 --> 00:05:23,230
print name.text.

36871
00:05:24,070 --> 00:05:29,070
This does not actually get us what we want because it also gives us the first

36872
00:05:30,640 --> 00:05:34,540
anchor tag in that div with class name event-widget

36873
00:05:34,900 --> 00:05:39,370
which is this 'more' link here. So if we don't want that more link,

36874
00:05:39,670 --> 00:05:42,070
we're going to have to be a little bit more creative.

36875
00:05:42,760 --> 00:05:47,760
This anchor tag is also inside an li while that more link is definitely not

36876
00:05:50,500 --> 00:05:55,210
inside an li. So we can narrow down on our selector by saying,

36877
00:05:55,270 --> 00:05:59,060
okay, so it's inside a element with class event-widget,

36878
00:05:59,360 --> 00:06:03,620
but then it's inside an li and then it's inside an anchor tag.

36879
00:06:04,220 --> 00:06:09,080
Now that I've updated that CSS selector, you can see when I hit print,

36880
00:06:09,200 --> 00:06:12,770
it gets us the actual names of all of the conferences.

36881
00:06:13,520 --> 00:06:18,520
So the final thing to do is to actually create our events dictionary.

36882
00:06:20,000 --> 00:06:22,310
You could do this using dictionary comprehension,

36883
00:06:22,580 --> 00:06:25,460
but I'm going to do it in a slightly more long form way

36884
00:06:25,490 --> 00:06:28,070
just so that anybody who's a little bit confused

36885
00:06:28,340 --> 00:06:30,290
it'll make it a little bit easier to understand.

36886
00:06:31,070 --> 00:06:34,880
So we're going to create a for loop and I'm going to use n. So I'm going to say

36887
00:06:34,880 --> 00:06:36,530
for n in range

36888
00:06:36,860 --> 00:06:41,860
and the range is going to be from zero to the length of event_times.

36889
00:06:42,590 --> 00:06:45,530
So it's basically going to be a range from zero to four.

36890
00:06:46,250 --> 00:06:50,600
Once I've got that range, now I'm going to add to my events.

36891
00:06:51,320 --> 00:06:55,220
The key of the event is the actual n, so the number,

36892
00:06:55,610 --> 00:07:00,610
and then the value of the event is a dictionary with the key of time

36893
00:07:01,460 --> 00:07:06,410
and also a key of name, like this.

36894
00:07:07,010 --> 00:07:11,780
Now the time is going to be from the event times and then getting hold of the

36895
00:07:11,780 --> 00:07:13,580
item at index n,

36896
00:07:13,940 --> 00:07:18,940
and the name is going to be event_names and the item at index

36897
00:07:19,130 --> 00:07:19,963
n.

36898
00:07:21,680 --> 00:07:26,680
Now the final thing we need to do is this gets hold of a selenium object and we

36899
00:07:27,290 --> 00:07:31,340
have to get hold of the actual text. So let's write .text.

36900
00:07:31,700 --> 00:07:34,550
And now we can print our events dictionary.

36901
00:07:36,260 --> 00:07:41,000
And once that's done, you can see this is in the exact format that we wanted.

36902
00:07:41,360 --> 00:07:43,640
We've got dictionary with five items,

36903
00:07:43,820 --> 00:07:47,450
each item has a dictionary in itself, time

36904
00:07:47,690 --> 00:07:50,870
and name of the upcoming Python conferences.

36905
00:07:52,040 --> 00:07:55,370
So did you manage to complete that challenge? If not,

36906
00:07:55,460 --> 00:07:58,550
it might be worth either reviewing CSS selectors

36907
00:07:58,580 --> 00:08:02,990
which we went through in previous lessons or reviewing some of the lessons

36908
00:08:02,990 --> 00:08:04,760
previously where we discussed 

36909
00:08:04,760 --> 00:08:09,760
how to locate and how to get hold of the text from elements using selenium.


36910
00:00:00,390 --> 00:00:03,360
In this lesson, I have another super quick challenge for you

36911
00:00:03,360 --> 00:00:05,700
so you can practice setting up the selenium

36912
00:00:05,700 --> 00:00:10,530
webdriver in a blind project and scraping a different piece of data from a

36913
00:00:10,530 --> 00:00:14,400
website. This time we're going to work with the Wikipedia main page.

36914
00:00:14,970 --> 00:00:19,350
So you can head over to the course resources and find the link to this page

36915
00:00:19,620 --> 00:00:23,250
or you can just type it in. Back in our project

36916
00:00:23,280 --> 00:00:27,300
I'm going to create a new file and I'm going to call this

36917
00:00:28,070 --> 00:00:28,903
...

36918
00:00:30,110 --> 00:00:34,640
interaction.py. Now in this new Python file,

36919
00:00:34,910 --> 00:00:39,910
we're going to interact with this Wikipedia webpage and as a challenge to you,

36920
00:00:40,760 --> 00:00:45,680
the first thing I want you to do is to figure out how you can get hold of this

36921
00:00:45,710 --> 00:00:50,420
particular number and print it out inside our interaction.py.

36922
00:00:51,080 --> 00:00:56,080
Remember that you'll need to import selenium and also use the web driver to get

36923
00:00:57,620 --> 00:01:02,540
hold of this page and then find this particular number and finally print it out.

36924
00:01:03,050 --> 00:01:04,640
And then when you're ready to run it, all

36925
00:01:04,640 --> 00:01:08,150
you have to do is right-click and then run this interaction

36926
00:01:08,150 --> 00:01:09,800
.py and it'll work

36927
00:01:09,860 --> 00:01:13,970
and you should see the outcome being printed in your console.

36928
00:01:14,270 --> 00:01:16,640
So pause the video now and give that a go.

36929
00:01:17,360 --> 00:01:18,193
Right.

36930
00:01:19,880 --> 00:01:22,550
All right. So here's the solution. First,

36931
00:01:22,580 --> 00:01:25,400
we're going to go into the selenium package

36932
00:01:25,670 --> 00:01:27,950
which we've already installed into this project,

36933
00:01:28,010 --> 00:01:29,720
so we don't have to install it again.

36934
00:01:30,320 --> 00:01:35,030
And then we're going to import the web driver. Now using the web driver,

36935
00:01:35,030 --> 00:01:39,830
we're going to create a new driver from the Chrome browser.

36936
00:01:40,370 --> 00:01:43,460
So we're going to have to navigate to that path again.

36937
00:01:44,990 --> 00:01:48,980
Now this is my path and your path might be a little bit different,

36938
00:01:49,340 --> 00:01:54,110
but this is what we put to initialize a new Chrome driver. Now,

36939
00:01:54,140 --> 00:01:57,650
once we've created our driver,

36940
00:01:58,490 --> 00:02:02,930
now we can use the driver to navigate to our webpage

36941
00:02:03,020 --> 00:02:04,850
which is done using get.

36942
00:02:05,510 --> 00:02:09,259
And this is the URL which we'll copy and paste into here.

36943
00:02:10,400 --> 00:02:12,350
And once we've gotten hold of this page,

36944
00:02:12,740 --> 00:02:16,640
then we're going to try to narrow down on this particular element.

36945
00:02:17,060 --> 00:02:19,250
So let's go ahead and inspect it.

36946
00:02:19,970 --> 00:02:24,970
And you can see that it's inside an anchor tag with no particular identifiers.

36947
00:02:25,820 --> 00:02:29,030
There's no id, there's no name, there's no class.

36948
00:02:29,630 --> 00:02:33,500
But this anchor tag lives in a div that has an id.

36949
00:02:33,530 --> 00:02:38,530
So this articlecount is going to be a unique identifier for the div that holds

36950
00:02:39,890 --> 00:02:41,270
this particular anchor tag.

36951
00:02:41,690 --> 00:02:45,950
So we can narrow in on this anchor tag using our CSS selectors.

36952
00:02:46,400 --> 00:02:50,420
So we can say driver.find_element_by_css_selector,

36953
00:02:50,720 --> 00:02:54,950
make sure that it's element not elements. And then inside here,

36954
00:02:54,950 --> 00:02:56,420
we're going to put our selector

36955
00:02:56,540 --> 00:03:00,280
which is first the ID of article count

36956
00:03:00,910 --> 00:03:04,360
and that is going to be proceeded with a pound sign.

36957
00:03:04,750 --> 00:03:07,120
And then inside that div with that id,

36958
00:03:07,120 --> 00:03:09,790
we're looking for the first anchor tag.

36959
00:03:11,260 --> 00:03:14,890
Now notice that inside of that div there's actually two anchor tags.

36960
00:03:15,280 --> 00:03:19,030
But by using this find_element_by_css_selector,

36961
00:03:19,330 --> 00:03:22,780
it's only going to give us the first one that matches this criteria.

36962
00:03:23,680 --> 00:03:26,110
So this is going to be our

36963
00:03:28,480 --> 00:03:29,350
article count.

36964
00:03:32,230 --> 00:03:37,230
And now what we want to do is we want to print the article_count.text.

36965
00:03:39,040 --> 00:03:43,510
So now let's go ahead and right-click and run our interaction.py.

36966
00:03:43,870 --> 00:03:46,630
It should open up our browser to this page,

36967
00:03:47,050 --> 00:03:50,350
and now it should have found and printed out that number.

36968
00:03:51,310 --> 00:03:53,380
So this is what we've been doing so far,

36969
00:03:53,620 --> 00:03:56,410
creating our driver, opening web pages

36970
00:03:56,740 --> 00:04:01,120
and then finding specific elements and printing some sort of property.

36971
00:04:01,720 --> 00:04:06,720
But the next step is to actually form some sort of interaction with the webpage,

36972
00:04:07,720 --> 00:04:08,410
for example,

36973
00:04:08,410 --> 00:04:13,410
clicking on a link or typing something into the search bar because after all,

36974
00:04:13,630 --> 00:04:15,190
when we're working with websites,

36975
00:04:15,310 --> 00:04:19,750
it's often that we'll need to interact with it in order to navigate to new pages

36976
00:04:19,839 --> 00:04:24,700
and get hold of specific pieces of information that we're interested in.

36977
00:04:25,510 --> 00:04:28,570
And that's what I'm going to show you in the next lesson. So I'll

36978
00:04:28,570 --> 00:04:29,110
see you there.


36979
00:00:00,300 --> 00:00:01,380
In the last lesson,

36980
00:00:01,440 --> 00:00:06,440
we looked at how we can find elements using selenium on a webpage.

36981
00:00:07,110 --> 00:00:07,890
In this lesson,

36982
00:00:07,890 --> 00:00:12,890
I want to focus more on how to interact with those elements that you found.

36983
00:00:13,440 --> 00:00:14,370
For example,

36984
00:00:14,400 --> 00:00:19,400
typing into a input field or clicking on a button.

36985
00:00:20,850 --> 00:00:24,810
The first thing I want to show you is how to click on something.

36986
00:00:25,590 --> 00:00:29,100
In this case, we've already gotten hold of an anchor tag

36987
00:00:29,430 --> 00:00:32,490
which is inside a div called article_count.

36988
00:00:32,610 --> 00:00:36,990
It's basically this anchor tag. And if I want to click on it,

36989
00:00:37,050 --> 00:00:39,870
not using my mouse, but using selenium,

36990
00:00:40,260 --> 00:00:43,710
all I have to do is to get hold of the element

36991
00:00:43,980 --> 00:00:48,510
which is this article_count, and then call the .click method on it.

36992
00:00:48,720 --> 00:00:51,750
It's as simple as that. And once I hit run,

36993
00:00:51,780 --> 00:00:54,660
you'll see that my cursor is nowhere near the link,

36994
00:00:55,020 --> 00:01:00,020
but it actually clicked through and it got to the statistics page from that

36995
00:01:00,270 --> 00:01:03,660
link. So its basically the equivalent of me doing this,

36996
00:01:03,780 --> 00:01:06,060
but it was done automatically.

36997
00:01:07,140 --> 00:01:11,790
This was one way that we could have gotten hold of a link and then clicked on it.

36998
00:01:12,330 --> 00:01:16,650
Now because this is such a common requirement to click on a link on a webpage,

36999
00:01:16,980 --> 00:01:21,930
selenium actually has a specific find method that makes this really easy.

37000
00:01:22,650 --> 00:01:23,490
For example,

37001
00:01:23,490 --> 00:01:28,490
if we wanted to click on this link that says All Portals where it lists all the

37002
00:01:28,680 --> 00:01:33,210
different Wikipedia portals, basically subsections of Wikipedia,

37003
00:01:33,690 --> 00:01:38,160
well, one of the things that we could do is simply get hold of this link text

37004
00:01:38,460 --> 00:01:40,080
which says All Portals

37005
00:01:40,530 --> 00:01:45,530
and then we can create an object using our driver by tapping into find_element_

37006
00:01:45,780 --> 00:01:50,280
by_link_text. And all we have to put in there is the link text,

37007
00:01:50,610 --> 00:01:52,500
which said All Portals.

37008
00:01:53,160 --> 00:01:56,370
So now I can say all_portals.click

37009
00:01:56,610 --> 00:01:59,670
and if we go ahead and comment out this part,

37010
00:02:00,210 --> 00:02:02,820
then you can see it's going to open up our webpage

37011
00:02:02,880 --> 00:02:06,330
and it's going to click on that all portals taking us to this page.

37012
00:02:06,870 --> 00:02:08,669
So this is a find method

37013
00:02:08,669 --> 00:02:13,670
that's pretty specific to links where we just find it by the text that is in

37014
00:02:15,210 --> 00:02:18,240
between the anchor tag. So for example,

37015
00:02:18,240 --> 00:02:20,460
when I inspect on that all portals,

37016
00:02:20,490 --> 00:02:25,080
you can see that this is the anchor tag and the link text is the part between

37017
00:02:25,080 --> 00:02:29,490
the opening and closing tags. So it's now searching by that text,

37018
00:02:29,700 --> 00:02:33,450
which is a common need that you might have when you're going onto a website.

37019
00:02:34,440 --> 00:02:38,010
Now that we've seen how we can click on links once we've identified them,

37020
00:02:38,310 --> 00:02:39,420
what about typing?

37021
00:02:39,690 --> 00:02:44,690
Let's say we wanted to search for Python in this search bar.

37022
00:02:46,470 --> 00:02:47,580
How might we do that?

37023
00:02:47,940 --> 00:02:51,840
Well first let's go ahead and get hold of the search bar.

37024
00:02:52,230 --> 00:02:57,230
So I'm going to inspect on that and it takes me to this input element and the

37025
00:02:58,050 --> 00:03:02,740
thing that we can identify it by its name, which is equal to search.

37026
00:03:02,970 --> 00:03:03,803
Yeah.

37027
00:03:06,150 --> 00:03:08,550
So I can use our method which is find

37028
00:03:08,560 --> 00:03:13,560
_element_by_name and then pass in search as the name of the element I want to get

37029
00:03:14,010 --> 00:03:17,910
hold of. Now, once I've gotten a hold of that element,

37030
00:03:18,090 --> 00:03:21,630
then I can use a method called send_keys

37031
00:03:21,870 --> 00:03:26,550
and this is going to be the keys from the keyboard that you want to send to this

37032
00:03:26,550 --> 00:03:30,830
particular element. So let's say I wanted you to type Python in there. Well,

37033
00:03:30,830 --> 00:03:34,680
all I have to do is type send keys Python.

37034
00:03:34,950 --> 00:03:36,600
And now when I hit run,

37035
00:03:36,960 --> 00:03:41,430
you can see that it's going to automatically go over there and type in the word

37036
00:03:41,430 --> 00:03:42,263
Python.

37037
00:03:42,420 --> 00:03:47,100
My hands are completely off the keyboard and my cursor is nowhere near the

37038
00:03:47,100 --> 00:03:49,920
search bar. So that was all done automatically.

37039
00:03:50,790 --> 00:03:52,710
Now once we've typed in Python,

37040
00:03:52,770 --> 00:03:57,150
the next thing we want to do is hit the return key, right? Or the enter key.

37041
00:03:57,900 --> 00:03:59,280
Now, when we wanna send a key

37042
00:03:59,280 --> 00:04:03,720
that's not a letter or one of the numbers or symbols,

37043
00:04:04,110 --> 00:04:07,020
then we actually have to do a separate import.

37044
00:04:08,610 --> 00:04:11,970
From the selenium package inside the webdriver folder,

37045
00:04:12,330 --> 00:04:17,010
there's a folder called common. And inside there, there's something called keys.

37046
00:04:17,610 --> 00:04:22,610
This keys contains a class called Keys and that contains a bunch of constants.

37047
00:04:24,930 --> 00:04:28,140
What we can do is we can say search.send_keys

37048
00:04:28,440 --> 00:04:31,920
and the key that we're going to send comes from this keys class.

37049
00:04:32,370 --> 00:04:35,100
And it's one of the constants in there which is called ENTER.

37050
00:04:35,520 --> 00:04:38,640
This is basically the return key,

37051
00:04:38,700 --> 00:04:43,700
but you can see there's also other ones like shift or tab,

37052
00:04:43,980 --> 00:04:48,210
basically any key that you have on the keyboard can be replicated by the keys

37053
00:04:48,210 --> 00:04:50,010
class. Effectively

37054
00:04:50,010 --> 00:04:55,010
what we're doing here is we're finding that search bar, typing in Python and then

37055
00:04:55,110 --> 00:04:59,040
hitting the enter key. So let's run this and see it in action.

37056
00:05:01,950 --> 00:05:04,620
And that takes us to the search results.

37057
00:05:05,550 --> 00:05:09,690
So now we've seen how we can click on buttons

37058
00:05:09,720 --> 00:05:14,720
once we've located something that is clickable like a button or an anchor tag,

37059
00:05:15,570 --> 00:05:20,570
we've seen how we can type something into a field using send_keys,

37060
00:05:22,290 --> 00:05:26,310
and finally we've seen how we can import this class of Keys

37061
00:05:26,610 --> 00:05:31,440
which contains a whole bunch of constants that represents the key codes for a

37062
00:05:31,440 --> 00:05:35,700
lot of the common keys, like enter, shift, control, et cetera.

37063
00:05:36,840 --> 00:05:39,060
Now I have a challenge for you.

37064
00:05:39,690 --> 00:05:44,690
I want you to try and see if you can figure out yourself how to use selenium to

37065
00:05:45,570 --> 00:05:50,280
automatically insert your name, your last name and email address,

37066
00:05:50,340 --> 00:05:54,750
and then hit the sign up button in order to fill out this form. Now,

37067
00:05:54,810 --> 00:05:57,230
if you are successful, it should take you

37068
00:06:00,550 --> 00:06:02,560
to this success page.

37069
00:06:02,860 --> 00:06:06,400
Now don't worry if you actually type in your real email address or not.

37070
00:06:06,430 --> 00:06:10,480
This is a webpage that we created as a part of the complete web development

37071
00:06:10,480 --> 00:06:12,700
course. It's another course that I do,

37072
00:06:13,060 --> 00:06:17,710
which goes into detail on web technologies like JavaScript, Node, React,

37073
00:06:18,100 --> 00:06:20,920
and this is a site that we built in that course. Now,

37074
00:06:20,920 --> 00:06:24,700
the reason why I'm taking you to this page is because I don't want you to go

37075
00:06:24,700 --> 00:06:29,700
onto a random webpage like a real website where they're actually collecting

37076
00:06:30,130 --> 00:06:31,120
valid data.

37077
00:06:31,510 --> 00:06:35,260
If we're doing our practices and our exercises on a real website,

37078
00:06:35,290 --> 00:06:38,830
we'll end up giving them a lot of bot traffic and it's not great for the

37079
00:06:38,830 --> 00:06:42,880
website. This is why I'm getting you guys to use my own website

37080
00:06:43,060 --> 00:06:44,950
which is set up for testing anyways.

37081
00:06:45,430 --> 00:06:49,630
So the link to the page is in the course resources, or you could type it in

37082
00:06:49,870 --> 00:06:52,570
as you can see here. Now, as I mentioned,

37083
00:06:52,570 --> 00:06:57,370
this is not a sign up to our actual newsletter which lives on this page,

37084
00:06:57,640 --> 00:07:02,640
where every month I personally write a letter to you updating you on what we've

37085
00:07:03,730 --> 00:07:04,570
been up to,

37086
00:07:04,570 --> 00:07:09,100
what I've been up to and some articles that I've come across on the internet

37087
00:07:09,100 --> 00:07:13,240
that I found to be really interesting in terms of Programming, design, or 

37088
00:07:13,240 --> 00:07:16,570
startup culture. If you actually want to sign up to the newsletter,

37089
00:07:16,600 --> 00:07:19,570
then head over to this link and put your email address here.

37090
00:07:19,990 --> 00:07:24,610
But in order to test your skills on selenium, we want you to head over

37091
00:07:24,610 --> 00:07:29,110
to this link and see if you can fill out this form automatically using what

37092
00:07:29,110 --> 00:07:32,740
you've learned and then get your selenium to click sign up.

37093
00:07:33,250 --> 00:07:36,340
Pause the video now and see if you can complete this challenge.

37094
00:07:39,760 --> 00:07:40,000
Right.

37095
00:07:40,000 --> 00:07:45,000
The first thing we need to do is to copy the URL and then back over here,

37096
00:07:45,700 --> 00:07:50,700
I'm going to comment out everything that I've got so far and I'm going to change

37097
00:07:51,100 --> 00:07:55,660
my driver to go to this new URL. Now,

37098
00:07:55,690 --> 00:07:57,520
once I've gotten to the new URL,

37099
00:07:57,730 --> 00:08:01,870
I want to go ahead and try to find and identify each of these fields.

37100
00:08:02,350 --> 00:08:07,350
So let's click on inspect and you can see that this first field has a name of f

37101
00:08:08,380 --> 00:08:09,213
Name,

37102
00:08:09,460 --> 00:08:14,460
the second one has a name of lName and the final one has a name of email.

37103
00:08:15,280 --> 00:08:20,280
So let's identify those using our driver.find.

37104
00:08:21,430 --> 00:08:26,350
And we're going to use the find_element_by_name passing in fName

37105
00:08:26,860 --> 00:08:31,860
and then it was lNname for the last name and then it was email.

37106
00:08:34,240 --> 00:08:38,500
So this is going to be our first name, last name and email.

37107
00:08:41,200 --> 00:08:43,360
The next step is to actually you fill it in.

37108
00:08:43,390 --> 00:08:47,250
So we're going to say first_name.send_keys, and then I'll pass 

37109
00:08:47,250 --> 00:08:51,760
in my first name. And then it's going to be last_name.send_keys

37110
00:08:51,790 --> 00:08:56,220
and then I'll pass in my last name. And finally,

37111
00:08:56,220 --> 00:09:00,450
we've got our email and I'll just pass in a dummy email.

37112
00:09:03,000 --> 00:09:08,000
So now I'm going to try and find this button by inspecting on it and seeing how

37113
00:09:08,700 --> 00:09:11,010
I can identify it using my code.

37114
00:09:11,610 --> 00:09:16,140
So it's a button with all of these classes and a type,

37115
00:09:16,350 --> 00:09:21,350
but no ID or name. Given that this is the only button element inside this form,

37116
00:09:22,890 --> 00:09:26,730
then I'm going to go ahead and identify it by using CSS selector.

37117
00:09:30,950 --> 00:09:31,400
Right.

37118
00:09:31,400 --> 00:09:35,090
So it's inside the form and it's a button element.

37119
00:09:36,530 --> 00:09:40,040
And finally, once I found it, I'm simply gonna click on it.

37120
00:09:40,700 --> 00:09:42,740
So our script is going to go in order.

37121
00:09:42,800 --> 00:09:46,730
So it's first going to load up the page, type in all of these things and then

37122
00:09:46,730 --> 00:09:50,330
finally click on it. So let's hit run and see if that worked.

37123
00:09:52,970 --> 00:09:57,970
That was lightening fast because obviously it's not me typing and it clicked on

37124
00:09:58,520 --> 00:10:03,230
the button and it took us to the success page. How did you get on with that?

37125
00:10:04,040 --> 00:10:08,450
So now we've seen how to use selenium to find elements, to 

37126
00:10:08,510 --> 00:10:11,780
interact with them by clicking and typing,

37127
00:10:12,080 --> 00:10:17,080
and also we saw how we can import the keys constant to interact with the

37128
00:10:17,270 --> 00:10:19,880
website with any key on our keyboard.

37129
00:10:20,870 --> 00:10:23,150
So there's quite a few methods we've gone through.

37130
00:10:23,240 --> 00:10:28,100
It might be worth taking some notes and having a quick review of how we've

37131
00:10:28,100 --> 00:10:32,420
managed to do all of these things using selenium because in the next lesson

37132
00:10:32,450 --> 00:10:37,070
we've got the final project coming up and it's going to be all up to you to try

37133
00:10:37,070 --> 00:10:41,120
and solve it. So for all of that and more, I'll see you on the next lesson.


37134
00:00:00,240 --> 00:00:04,800
It's now time for the final project where we put everything into practice.

37135
00:00:05,160 --> 00:00:08,430
Now, before I reveal the next message, just a word of warning.

37136
00:00:08,850 --> 00:00:12,930
It has explicit content. If you are hungry,

37137
00:00:12,930 --> 00:00:16,590
if you haven't eaten, if you are intermittent fasting like me,

37138
00:00:17,130 --> 00:00:19,950
it might be worth skipping over the next image.

37139
00:00:24,470 --> 00:00:26,630
Let us describe what we're going to do

37140
00:00:26,630 --> 00:00:30,020
in this project, we're going to be baking some cookies.

37141
00:00:30,620 --> 00:00:33,170
We're going to be playing the cookie clicker game,

37142
00:00:33,560 --> 00:00:36,560
but we're not going to do it normally like a normal person.

37143
00:00:36,560 --> 00:00:40,130
We're not going to go and click on our cookies and tirelessly end up with

37144
00:00:40,130 --> 00:00:44,960
repetitive strain injury and play the game as if we're a human. No,

37145
00:00:44,990 --> 00:00:49,010
we're going to play it using a Python bot created with selenium.

37146
00:00:49,610 --> 00:00:54,610
So recently I've been looking on Reddit and there's a lot of posts talking about

37147
00:00:54,920 --> 00:00:59,180
how addictive this cookie clicker game is. Why is this game

37148
00:00:59,180 --> 00:01:03,860
so addicting, cookie clicker ruined my life. And when you think about it,

37149
00:01:03,860 --> 00:01:05,960
it's such a simple game.

37150
00:01:06,680 --> 00:01:11,540
All it is is a big giant cookie, you click on it as fast as you can.

37151
00:01:11,990 --> 00:01:15,020
And once you've gotten a number of cookies,

37152
00:01:15,230 --> 00:01:18,950
then you can buy certain upgrades like a cursor,

37153
00:01:19,010 --> 00:01:22,940
which will click on the cookie automatically for you.

37154
00:01:23,390 --> 00:01:27,560
And if you get even more cookies, you can end up buying other things.

37155
00:01:27,800 --> 00:01:29,990
For example, once you have a hundred cookies,

37156
00:01:32,660 --> 00:01:36,860
you can by a grandma which will bake more cookies for you.

37157
00:01:37,760 --> 00:01:42,760
But we're not going to do it manually because I can physically not click at this

37158
00:01:43,370 --> 00:01:47,210
rate. We're going to get our bot to decide which add-ons to

37159
00:01:47,210 --> 00:01:51,860
buy that makes sense, and to buy as many of these add ons as we have money,

37160
00:01:52,280 --> 00:01:55,760
and we're going to get all bots to continuously click the cookie to bake even

37161
00:01:55,760 --> 00:01:56,593
more cookies.

37162
00:01:57,110 --> 00:02:01,760
So the goal is we're trying to max out on this cookies per second rating,

37163
00:02:01,820 --> 00:02:05,030
because the more of these add ons that you buy,

37164
00:02:05,030 --> 00:02:07,280
the more often that you click on the cookie,

37165
00:02:07,640 --> 00:02:10,729
the more cookies per seconds you can bake.

37166
00:02:11,810 --> 00:02:16,810
So basically what we want to do is to not even touch our mouse and use selenium

37167
00:02:18,440 --> 00:02:20,180
to play this game for us.

37168
00:02:20,360 --> 00:02:24,230
And we're going to try and get some high scores by cheating basically.

37169
00:02:25,160 --> 00:02:29,990
So the goal is to max out the cookies per second,

37170
00:02:30,410 --> 00:02:35,410
and we're going to be playing this game by clicking on this cookie automatically

37171
00:02:35,690 --> 00:02:36,680
using selenium.

37172
00:02:37,100 --> 00:02:41,330
And once we've clicked for five seconds,

37173
00:02:41,360 --> 00:02:45,620
we're going to see what is the highest value add on we can by,

37174
00:02:45,950 --> 00:02:49,220
and then we'll buy it to help us with the game.

37175
00:02:49,730 --> 00:02:54,110
So the goal at the end of the day is we're going to run the program for five

37176
00:02:54,110 --> 00:02:56,240
minutes. And at the end of the five minutes,

37177
00:02:56,510 --> 00:02:59,180
we're going to check our cookies per second.

37178
00:02:59,800 --> 00:03:04,090
And we're going to compete with each other on that number because of course you

37179
00:03:04,090 --> 00:03:08,770
can get selenium to play the game in different ways. So what I recommend first

37180
00:03:08,770 --> 00:03:13,450
before you get started with the project is just to head over to this link

37181
00:03:13,480 --> 00:03:15,070
which is in the course resources,

37182
00:03:15,310 --> 00:03:20,310
and actually play the game first as a human so that you can understand how it

37183
00:03:20,350 --> 00:03:25,350
works and see how these add ons really help us improve our rate of baking

37184
00:03:25,930 --> 00:03:29,950
cookies. Pause the video now, head over to this link,

37185
00:03:30,130 --> 00:03:34,090
play the game for maybe five minutes and then head over to the next lesson where

37186
00:03:34,090 --> 00:03:37,720
there's the full instructions for how to complete this challenge.



37187
00:00:00,780 --> 00:00:04,500
Hey guys, welcome to Day 49 of 100 Days of Code.

37188
00:00:05,040 --> 00:00:09,960
We're almost halfway and today we've got a really special project for you.

37189
00:00:10,350 --> 00:00:10,500
Now,

37190
00:00:10,500 --> 00:00:15,500
I know a lot of you guys are learning Programming to get a new job or change the

37191
00:00:17,010 --> 00:00:18,660
area in which you work,

37192
00:00:18,960 --> 00:00:22,110
and basically just find better opportunities for yourself.

37193
00:00:22,620 --> 00:00:27,000
So today's project is going to test what you've learned about how to work with

37194
00:00:27,000 --> 00:00:27,833
selenium,

37195
00:00:27,930 --> 00:00:32,310
and we're going to be building an automated job application bot.

37196
00:00:32,940 --> 00:00:36,480
This is going to put all the skills that we've learned yesterday into use

37197
00:00:36,780 --> 00:00:40,740
where we get selenium web driver to drive a browser

37198
00:00:40,800 --> 00:00:43,680
to open up a website and apply for jobs.

37199
00:00:44,280 --> 00:00:48,090
So applying jobs can be quite tedious working through each of the

37200
00:00:48,090 --> 00:00:48,930
applications,

37201
00:00:48,960 --> 00:00:53,960
filling in the required details and hoping that your application stands out.

37202
00:00:55,950 --> 00:01:00,300
So let's see if we can make this easier for ourselves by automating the process.

37203
00:01:01,200 --> 00:01:05,519
Now, one of the ways that a lot of people apply for jobs is on LinkedIn.

37204
00:01:05,820 --> 00:01:09,600
So they have this section called jobs. And when you go there,

37205
00:01:09,600 --> 00:01:12,660
you can search for the kind of jobs you're looking for,

37206
00:01:12,990 --> 00:01:16,560
where you're looking to work, you can even add in filters

37207
00:01:16,560 --> 00:01:20,880
like show remote jobs only where you can work from anywhere in the world.

37208
00:01:21,240 --> 00:01:24,840
And they've also got this really neat feature called easy apply.

37209
00:01:25,500 --> 00:01:29,640
And all you have to do is just to click on this button, easy apply,

37210
00:01:29,910 --> 00:01:32,910
fill in any of the fields that you haven't filled in before

37211
00:01:33,150 --> 00:01:35,370
and then just click submit application.

37212
00:01:36,090 --> 00:01:39,210
Some applications are a little bit more complicated than this.

37213
00:01:39,240 --> 00:01:41,550
This is the simplest format. Now,

37214
00:01:41,580 --> 00:01:45,360
in order to actually show you the whole process without messing with anybody

37215
00:01:45,360 --> 00:01:46,890
else's job applications,

37216
00:01:47,250 --> 00:01:51,330
I decided to create a job posting on LinkedIn from our own company.

37217
00:01:51,810 --> 00:01:56,430
So we're currently looking for a marketing intern to help us launch courses.

37218
00:01:56,880 --> 00:02:01,170
And when I click on this job, you can see this easy apply button show up.

37219
00:02:01,680 --> 00:02:06,000
So if I click on easy apply and I fill in my dummy phone number,

37220
00:02:06,540 --> 00:02:08,520
then I click on next.

37221
00:02:09,210 --> 00:02:11,910
Then I can include a resume.

37222
00:02:12,390 --> 00:02:15,930
Now the resume comes from your settings.

37223
00:02:15,960 --> 00:02:20,960
So if you go to your settings and privacy and you go to job seeking preferences

37224
00:02:22,410 --> 00:02:26,370
then here, you can actually already pre-upload your resume.

37225
00:02:27,060 --> 00:02:30,060
Once you've done that, then when you click easy apply,

37226
00:02:31,260 --> 00:02:35,070
you'll see the resume already uploaded. So we don't even have to do that

37227
00:02:35,100 --> 00:02:37,080
using our bot. Finally,

37228
00:02:37,080 --> 00:02:42,080
we click review and we're ready to go ahead and send and submit our application.

37229
00:02:44,100 --> 00:02:47,130
So that's how easy it is to submit our application

37230
00:02:47,520 --> 00:02:52,080
and you can see that there's only four or five steps that we need to automate in

37231
00:02:52,080 --> 00:02:56,880
order to apply for a job. That's the project for today

37232
00:02:56,910 --> 00:03:00,990
and I hope you're as excited as I am to tackle this project.

37233
00:03:01,500 --> 00:03:04,770
And you might even see a practical use for it in the future.

37234
00:03:05,370 --> 00:03:09,180
Once you're ready, head over to the next lesson where you'll find step by step

37235
00:03:09,180 --> 00:03:11,640
instructions on how to complete this project.


37236
00:00:00,180 --> 00:00:04,770
Hey guys, welcome to Day 50 of 100 Days of Code. You've made it.

37237
00:00:04,770 --> 00:00:08,430
It's half way. You've gone so far from the beginning.

37238
00:00:08,820 --> 00:00:13,050
And today I've got a special project just to celebrate that. We're going to be

37239
00:00:13,050 --> 00:00:15,450
building a auto tinder bot.

37240
00:00:16,170 --> 00:00:19,350
So for those of you guys who don't know what Tinder is

37241
00:00:19,410 --> 00:00:21,360
and I'm not sure if I believe you,

37242
00:00:22,470 --> 00:00:26,520
but Tinder is basically an app which helps people date online.

37243
00:00:26,850 --> 00:00:30,450
The idea is that you see somebody's profile, you hit like,

37244
00:00:30,540 --> 00:00:33,060
and if they like your profile as well,

37245
00:00:33,300 --> 00:00:37,500
then you've made a match and you can chat to each other and potentially set up a

37246
00:00:37,500 --> 00:00:41,100
date. Super simple and it's probably one of the top

37247
00:00:41,130 --> 00:00:42,870
most downloaded apps currently.

37248
00:00:43,530 --> 00:00:48,530
So there's a bit of a backstory about how this project came about. A few weeks

37249
00:00:48,660 --> 00:00:49,050
ago,

37250
00:00:49,050 --> 00:00:53,940
I was at a barbecue and some friends started talking about how they were so

37251
00:00:53,940 --> 00:00:58,260
frustrated with online dating. One of my friends, let's call him

37252
00:00:58,410 --> 00:01:03,410
Jason says that he spends about two hours a day swiping and chatting on Tinder.

37253
00:01:04,739 --> 00:01:07,200
But even after all of that time and effort,

37254
00:01:07,320 --> 00:01:10,020
he just doesn't end up getting any dates.

37255
00:01:10,710 --> 00:01:15,180
And at a time I remember looking around and pretty much all the boys in the

37256
00:01:15,180 --> 00:01:19,920
group actually agreed with him and said they were also spending a lot of time

37257
00:01:19,940 --> 00:01:24,450
swiping on Tinder, but they all have the same problem, very few matches.

37258
00:01:25,050 --> 00:01:28,710
So this got me really curious, and I did a bit of Googling.

37259
00:01:29,010 --> 00:01:32,730
It turns out that Jason and my friends are actually not alone.

37260
00:01:33,090 --> 00:01:35,880
It's not just them who's not getting enough swipes.

37261
00:01:36,570 --> 00:01:41,550
I found a guy on Reddit who requested their data from Tinder and he posted his

37262
00:01:41,550 --> 00:01:42,420
stats online.

37263
00:01:42,900 --> 00:01:47,900
So apparently he only got a total of 110 matches out of 26,800 swipes over for

37264
00:01:51,690 --> 00:01:55,200
four years, that's 0.41%.

37265
00:01:55,500 --> 00:01:59,520
This poor lad has almost a better chance of winning the lottery at that rate.

37266
00:02:00,090 --> 00:02:01,680
And this is not just a one off.

37267
00:02:01,710 --> 00:02:06,690
I found another guy who posted his tender stats and this guy did a little bit

37268
00:02:06,690 --> 00:02:07,710
better, um,

37269
00:02:07,740 --> 00:02:12,740
where he got 133 matches out of 12,631 swipes.

37270
00:02:13,500 --> 00:02:17,340
So basically just one match for every a hundred swipes.

37271
00:02:18,090 --> 00:02:22,380
All of the swiping means that they must've spent a lot of time inside the app as

37272
00:02:22,380 --> 00:02:23,213
well.

37273
00:02:23,340 --> 00:02:28,320
And I looked around for Tinder stats that they give their investors to show how

37274
00:02:28,320 --> 00:02:32,700
great their user engagement is and why they're worth how much they were.

37275
00:02:33,120 --> 00:02:36,390
So back in 2014, the New York times interview the company

37276
00:02:36,450 --> 00:02:40,680
and they said that users login about 11 times per day

37277
00:02:41,040 --> 00:02:44,100
and men spend around 7.2 minutes per session

37278
00:02:44,400 --> 00:02:47,670
and women spend about 8.5 minutes per session

37279
00:02:47,970 --> 00:02:52,230
cause we're a bit more picky with a total average daily engagement time of

37280
00:02:52,230 --> 00:02:54,090
around 90 minutes.

37281
00:02:54,570 --> 00:02:59,560
That's one and a half hours of swiping per day. That's crazy.

37282
00:03:00,340 --> 00:03:03,880
I didn't know that much about Tinder, but after all this research,

37283
00:03:03,940 --> 00:03:08,440
it gave me an idea. What if Jason didn't have to do all this wiping manually.

37284
00:03:08,560 --> 00:03:12,850
What if he could just write a program that would automate this whole process and

37285
00:03:12,850 --> 00:03:15,220
swipe for him? Long story short,

37286
00:03:15,280 --> 00:03:18,580
I introduced Jason to selenium and Python,

37287
00:03:18,910 --> 00:03:22,870
and now he's happily married with three children. Just kidding.

37288
00:03:22,960 --> 00:03:26,680
Uhm, actually, Jason is still trialing our little program,

37289
00:03:27,160 --> 00:03:31,210
but he's doing pretty well and much better than before and saving himself a lot

37290
00:03:31,210 --> 00:03:33,460
of time. But most importantly,

37291
00:03:33,520 --> 00:03:38,320
I think it makes for a fun project for us to practice our Python and selenium

37292
00:03:38,320 --> 00:03:39,153
skills.

37293
00:03:39,880 --> 00:03:44,830
Now the first time I realized that people actually want to automate this instead

37294
00:03:44,830 --> 00:03:49,420
of choosing the people they want to swipe on is when I came across this product

37295
00:03:49,540 --> 00:03:51,070
called the Tinder finger,

37296
00:03:51,520 --> 00:03:55,780
which is something that you plug into your phone and it powers the finger to

37297
00:03:55,780 --> 00:03:57,340
just keep swiping right

37298
00:03:57,730 --> 00:04:02,730
which basically means I'm liking everybody until somebody likes you back

37299
00:04:03,400 --> 00:04:07,390
and then you've got a match and you can chat with them instead of endlessly

37300
00:04:07,390 --> 00:04:09,820
swiping right. In fact,

37301
00:04:09,910 --> 00:04:12,910
I found a whole bunch of YouTube videos out there of people building

37302
00:04:12,910 --> 00:04:15,190
contraptions to swipe for them.

37303
00:04:15,880 --> 00:04:20,440
So we're going to try and create this only using software more specifically

37304
00:04:20,470 --> 00:04:25,120
using Python and selenium. Now just the word of warning.

37305
00:04:25,330 --> 00:04:27,460
If you are going to be swiping right on Tinder,

37306
00:04:27,460 --> 00:04:31,060
it might be worth telling your other half about it just in case they

37307
00:04:31,060 --> 00:04:34,630
accidentally find you on Tinder through the corner of their eye

37308
00:04:34,630 --> 00:04:39,520
and you end up in some sort of bad situation where they really get angry at you.

37309
00:04:40,300 --> 00:04:43,270
Also, I know that you might not be looking for a date right now

37310
00:04:43,300 --> 00:04:46,030
or you might have your doubts about signing up to a dating app

37311
00:04:46,030 --> 00:04:50,050
using your real name and photo just to practice some Python programming.

37312
00:04:50,470 --> 00:04:52,450
In that case, you can try a website called

37313
00:04:52,480 --> 00:04:56,980
thispersondoesnotexist.com to auto-generate some profile pictures for you.

37314
00:04:57,340 --> 00:04:58,270
These images,

37315
00:04:58,270 --> 00:05:03,270
every time you refresh is an image that's generated by a neural network using

37316
00:05:03,400 --> 00:05:07,150
machine learning. And these are not real people's faces,

37317
00:05:07,450 --> 00:05:11,380
but they look pretty real to me anyways. And you could in fact,

37318
00:05:11,380 --> 00:05:15,070
use this profile for this auto Tinder swiping project.

37319
00:05:15,880 --> 00:05:17,800
Pick somebody, sign up to Tinder,

37320
00:05:18,310 --> 00:05:23,310
and then we're going to use selenium to automate the entire process by swiping

37321
00:05:24,010 --> 00:05:27,730
on the Tinder website. This is what it looks like.

37322
00:05:28,630 --> 00:05:31,120
Your bot is going to log in using Facebook.

37323
00:05:32,620 --> 00:05:37,620
And then it's going to click on all the things that needs to be clicked so that

37324
00:05:38,260 --> 00:05:40,990
you can actually reveal the buttons for swiping.

37325
00:05:42,250 --> 00:05:46,540
And then it just swipes through everybody. And once it hits a match,

37326
00:05:46,780 --> 00:05:47,830
that's going to be a popup.

37327
00:05:47,950 --> 00:05:52,900
So it's going to click on back to Tinder and continue swiping. Now,

37328
00:05:52,900 --> 00:05:56,470
remember that Tinder has a maximum of a hundred swipes per day.

37329
00:05:56,560 --> 00:06:00,470
So unless upgrade to one of that paid tiers your bot is only going to work on a

37330
00:06:00,470 --> 00:06:04,340
hundred swipes per day, no matter how much you're automated.

37331
00:06:04,760 --> 00:06:08,390
But I'm sure you're a busy person saving your hundred swipes is probably

37332
00:06:08,390 --> 00:06:10,070
already worth creating the bot.

37333
00:06:10,580 --> 00:06:14,210
And if you're somebody who's on Tinder premium or whatever it is they call it,

37334
00:06:14,570 --> 00:06:18,290
then you could actually continue swiping all day. Now,

37335
00:06:18,320 --> 00:06:22,550
if you are somebody who doesn't want to hurt anybody's feelings by auto matching

37336
00:06:22,550 --> 00:06:26,570
with them using a Tinder bot like the one that we're about to write,

37337
00:06:26,930 --> 00:06:31,930
then feel free to complete the challenge just by hitting dislike on everyone so

37338
00:06:32,090 --> 00:06:33,980
that you don't match with anybody.

37339
00:06:34,910 --> 00:06:37,580
So that's the project that we're going to be building today.

37340
00:06:37,970 --> 00:06:39,860
And if you head over to the next lesson, we can get

37341
00:06:39,880 --> 00:06:43,120
started with the step by step challenges.


37342
00:00:00,180 --> 00:00:02,250
Hey guys welcome to day 51

37343
00:00:02,250 --> 00:00:05,400
of 100 Days of Code. Today

37344
00:00:05,400 --> 00:00:09,090
we're going to be building a Complaining Twitter bot.

37345
00:00:09,870 --> 00:00:12,810
I dunno about you, but I'm the sort of person who really,

37346
00:00:12,810 --> 00:00:16,920
really hates dealing with customer service. Very often,

37347
00:00:17,010 --> 00:00:20,070
if I buy a product and it doesn't work

37348
00:00:20,100 --> 00:00:22,020
or it gets shipped to me broken,

37349
00:00:22,440 --> 00:00:26,610
I will actually just put it down to bad luck to avoid having to deal with

37350
00:00:26,630 --> 00:00:31,040
customer service. I find it really hard calling up customer service,

37351
00:00:31,130 --> 00:00:32,299
waiting on the line,

37352
00:00:32,689 --> 00:00:35,990
and it's just generally a really difficult experience for me.

37353
00:00:36,740 --> 00:00:40,580
But what if it's something that really bothers you that you need to complain

37354
00:00:40,580 --> 00:00:42,860
about in order to get it fixed? Well,

37355
00:00:42,860 --> 00:00:47,860
this particular internet user was promised a internet speed from Comcast,

37356
00:00:48,770 --> 00:00:53,770
so Xfinity in the US where he was meant to get 150 kilobits down and 10

37357
00:00:55,190 --> 00:00:56,300
kilobits up.

37358
00:00:56,780 --> 00:01:00,230
But what he found was that actually for a lot of the time,

37359
00:01:00,230 --> 00:01:03,140
he wasn't getting the promised internet speeds.

37360
00:01:03,470 --> 00:01:08,470
So he would do a speed test and then send his internet speeds by Twitter

37361
00:01:08,810 --> 00:01:12,380
to Comcast to complain. Now,

37362
00:01:12,410 --> 00:01:16,190
depending on who your internet provider is and how much you're paying,

37363
00:01:16,220 --> 00:01:20,870
they tend to guarantee a minimum internet speed. Now,

37364
00:01:20,930 --> 00:01:25,030
very often though, most people aren't testing their internet speeds every day.

37365
00:01:25,110 --> 00:01:28,310
Just occasionally you feel like, oh, it feels a bit slow today.

37366
00:01:28,310 --> 00:01:32,990
Or why is my download taking so long? If you look in your contract,

37367
00:01:32,990 --> 00:01:37,990
you'll often find that guaranteed minimum speed in terms of megabits per second.

37368
00:01:39,680 --> 00:01:44,000
For most people, it's probably going to be around 30 megabits or 60 megabits

37369
00:01:44,240 --> 00:01:48,350
depending on how much you pay. Now for a lot of providers,

37370
00:01:48,380 --> 00:01:53,380
they actually have a guarantee where if you can prove that the internet speed

37371
00:01:53,540 --> 00:01:55,820
that you're getting is not what they promised,

37372
00:01:56,060 --> 00:01:59,630
they'll actually give you your money back or even better

37373
00:01:59,660 --> 00:02:01,190
they might try and fix it.

37374
00:02:01,850 --> 00:02:06,850
So what this Comcast user did is he would test his internet speed and then tweet

37375
00:02:07,280 --> 00:02:12,280
automatically to Comcast and complain that his internet speed is only 23 down

37376
00:02:13,490 --> 00:02:17,780
5 up when he's paying 150 down 10 up. Now,

37377
00:02:17,780 --> 00:02:21,680
the reason why people interact with Twitter in terms of customer service is

37378
00:02:21,680 --> 00:02:22,760
because it's public.

37379
00:02:22,790 --> 00:02:26,810
Everybody else can see your complaint to a particular company

37380
00:02:27,080 --> 00:02:29,540
and if they're a large brand or a large company,

37381
00:02:29,810 --> 00:02:32,930
then they tend to have a social media monitor.

37382
00:02:32,990 --> 00:02:37,280
And often the customer service you get by complaining on Twitter can actually be

37383
00:02:37,280 --> 00:02:40,160
even better than if you call them up or if you email them.

37384
00:02:40,610 --> 00:02:44,180
One of the best customer service teams on Twitter is JetBlue.

37385
00:02:44,540 --> 00:02:45,470
And on the internet,

37386
00:02:45,470 --> 00:02:49,970
you've got lots of examples of people having a really great experience with the

37387
00:02:49,970 --> 00:02:53,450
customer service team on Twitter from JetBlue, for example,

37388
00:02:53,450 --> 00:02:57,020
this guy who was on a flight and his TV didn't work,

37389
00:02:57,320 --> 00:02:59,590
and they actually ended up offering him, um,

37390
00:02:59,680 --> 00:03:03,250
flight credits just on the spot for having a broken TV,

37391
00:03:03,550 --> 00:03:06,220
all achieved using a couple of tweets. Now,

37392
00:03:06,220 --> 00:03:09,430
recently I was even reading this article in time magazine

37393
00:03:09,460 --> 00:03:13,510
where it's talking about 'Does tweeting at companies really work?' And very often,

37394
00:03:13,540 --> 00:03:17,890
yes, it really does. And even when you look at this basically Python

37395
00:03:17,950 --> 00:03:18,783
Twitter bot,

37396
00:03:19,150 --> 00:03:23,950
you can see that he often got replies from Comcast and other users chipping in

37397
00:03:23,950 --> 00:03:28,720
trying to get ahold of Comcast to fix their internet as well. Now,

37398
00:03:28,810 --> 00:03:33,760
Comcast is probably quite well known to having pretty bad customer service.

37399
00:03:34,120 --> 00:03:36,850
In fact, there's this post which I'll link to, um,

37400
00:03:36,880 --> 00:03:40,630
where a journalist was trying to cancel their Comcast service

37401
00:03:40,810 --> 00:03:45,810
and it took something like 5 or 10 minutes where the customer service guy was

37402
00:03:46,300 --> 00:03:48,010
just trying really,

37403
00:03:48,010 --> 00:03:53,010
really hard to not let them cancel even sometimes being quite condescending and

37404
00:03:53,770 --> 00:03:56,860
a bit mean. But in this conversation,

37405
00:03:56,860 --> 00:04:00,580
you actually hear the Comcast person saying we're the only people who can

37406
00:04:00,580 --> 00:04:05,140
promise you a hundred megabit download speed. And in fact,

37407
00:04:05,140 --> 00:04:07,060
when you look at the Comcast users tweets,

37408
00:04:07,300 --> 00:04:09,490
you can see often that is actually not the case.

37409
00:04:09,790 --> 00:04:13,030
So this can also bolster your argument when you want to leave an internet

37410
00:04:13,030 --> 00:04:15,160
service or when you want to get money back

37411
00:04:15,250 --> 00:04:17,800
or when you just want somebody to fix your internet speeds.

37412
00:04:18,490 --> 00:04:21,700
The website we're going to be using is speedtest.net

37413
00:04:21,730 --> 00:04:25,330
which is probably one of the best speed test websites out there.

37414
00:04:25,780 --> 00:04:30,670
And what we're going to do is we're going to use our bots using selenium to

37415
00:04:30,700 --> 00:04:31,780
press go.

37416
00:04:32,110 --> 00:04:37,110
You can see it's going to start working out my download speeds and my upload

37417
00:04:37,180 --> 00:04:41,890
speeds. Now this often takes anywhere between sort of half a minute to

37418
00:04:41,920 --> 00:04:44,560
two minutes depending on your internet speed.

37419
00:04:46,960 --> 00:04:48,190
But once it's done,

37420
00:04:48,220 --> 00:04:53,220
then we'll end up with a result ID as well as our download speed and our upload

37421
00:04:53,830 --> 00:04:54,550
speed.

37422
00:04:54,550 --> 00:04:58,630
And you can then compare these against what you were promised by your internet

37423
00:04:58,660 --> 00:05:03,370
service provider. And then we're going to tweet at our provider.

37424
00:05:03,580 --> 00:05:08,530
So if it's Comcast or AT&T or in the UK, it could be BT or Sky,

37425
00:05:08,530 --> 00:05:09,400
whatever it may be.

37426
00:05:09,820 --> 00:05:13,660
And then we're going to tell them about our terrible internet speeds compared to

37427
00:05:13,660 --> 00:05:17,290
what we pay for. So that's the goal.

37428
00:05:18,370 --> 00:05:21,850
And when I run my internet speed Twitter bot, you can see

37429
00:05:21,850 --> 00:05:22,870
this is what happens.

37430
00:05:23,160 --> 00:05:28,160
[inaudible],

37431
00:05:33,330 --> 00:05:35,970
That's the goal. Once you're ready head over

37432
00:05:35,970 --> 00:05:38,310
to the next lesson and let's get started.


37433
00:00:00,420 --> 00:00:02,310
Hey guys, welcome to day 52

37434
00:00:02,310 --> 00:00:05,850
of 100 Days of Code. Today

37435
00:00:05,880 --> 00:00:08,970
I've got yet another pretty fun project for you.

37436
00:00:09,300 --> 00:00:12,780
It is a Instagram follower bot.

37437
00:00:13,380 --> 00:00:16,920
So here's the thing is. Have you ever felt a little bit lonely?

37438
00:00:17,370 --> 00:00:22,020
Have you ever wanted more friends? Well, I can't really get you more friends,

37439
00:00:22,110 --> 00:00:26,970
but I could figure out a way of getting you more followers on Instagram.

37440
00:00:27,840 --> 00:00:32,640
So recently I was talking to a Instagram consultant.

37441
00:00:32,759 --> 00:00:37,200
This is somebody who actually advises businesses and startups on 

37442
00:00:37,230 --> 00:00:40,080
how they can build their Instagram presence.

37443
00:00:40,590 --> 00:00:43,380
And they've worked with a lot of successful companies.

37444
00:00:43,680 --> 00:00:46,200
And one of the secrets that they shared with me,

37445
00:00:46,470 --> 00:00:51,000
which I thought was really cool actually, is let's say that you are somebody

37446
00:00:51,000 --> 00:00:54,840
who's trying to build a brand around cooking.

37447
00:00:55,350 --> 00:01:00,350
So you could do is you could look at all the accounts on Instagram that are

37448
00:01:01,170 --> 00:01:03,810
already, um, cooking related.

37449
00:01:04,290 --> 00:01:09,290
One of my favorite probably to this day is a company called ChefSteps.

37450
00:01:10,620 --> 00:01:15,300
They just have the coolest content and they have amazing YouTube videos with

37451
00:01:15,300 --> 00:01:19,320
tutorials. And a lot of the stuff that they make are just gorgeous,

37452
00:01:19,350 --> 00:01:23,760
like real molecular gastronomy and everything looks amazing.

37453
00:01:24,330 --> 00:01:29,070
Let's say that you are trying to build a company where it was also doing

37454
00:01:29,070 --> 00:01:33,720
something that was food related and you want to get more followers for your

37455
00:01:33,720 --> 00:01:38,010
company. One of the ways that you could do it is if you think about it,

37456
00:01:38,040 --> 00:01:43,040
if you find a company that has a similar demographic or a similar audience to

37457
00:01:43,170 --> 00:01:43,860
yours,

37458
00:01:43,860 --> 00:01:48,200
basically people who like food or people who like cooking, well,

37459
00:01:48,200 --> 00:01:52,470
what you could do is you could go to their Instagram account and then look at

37460
00:01:52,470 --> 00:01:53,580
their followers.

37461
00:01:54,930 --> 00:01:59,930
And then you can go through this list of people who follow ChefSteps and follow

37462
00:02:00,090 --> 00:02:03,510
each of these accounts. Now, for a lot of these people,

37463
00:02:03,510 --> 00:02:07,680
they are small individuals who are just interested in cooking or food.

37464
00:02:07,980 --> 00:02:12,240
So if you have something that's food related and you're following somebody,

37465
00:02:12,570 --> 00:02:15,570
then they might notice you as well. And in turn,

37466
00:02:15,570 --> 00:02:19,380
you'll probably get more followers. So I thought this was a really cool idea

37467
00:02:19,380 --> 00:02:21,930
and it's something that's really ripe for automation,

37468
00:02:21,930 --> 00:02:26,930
because who wants to go through a list of 247,000 people and click on each of

37469
00:02:28,140 --> 00:02:30,090
these buttons. Nobody, right?

37470
00:02:30,450 --> 00:02:34,350
So we're going to do this using code. More specifically,

37471
00:02:34,380 --> 00:02:38,970
Selenium and Python. Here's what it looks like when I run my code.

37472
00:02:39,480 --> 00:02:42,180
It's gonna log into Instagram automatically

37473
00:02:47,970 --> 00:02:52,140
and then it's going to go to the account that I want to replicate followers for.

37474
00:02:52,830 --> 00:02:55,440
And then it's going to click on that link followers

37475
00:02:55,650 --> 00:03:00,650
and it's going to start following each of these individual accounts one by one

37476
00:03:01,030 --> 00:03:03,610
automatically. And you can see my mouse is nowhere near there.

37477
00:03:03,630 --> 00:03:04,463
Yeah.

37478
00:03:05,880 --> 00:03:08,280
That's the goal for today. If you're building a business,

37479
00:03:08,310 --> 00:03:11,460
if you're building a startup or if you're building your own custom brand,

37480
00:03:11,820 --> 00:03:14,010
or if you just want more followers on Instagram,

37481
00:03:14,070 --> 00:03:16,590
this might be something that you would be interested in.

37482
00:03:17,010 --> 00:03:21,570
And it definitely helps you tap into some new skills with Selenium and Python.

37483
00:03:21,960 --> 00:03:23,010
So once you're ready,

37484
00:03:23,040 --> 00:03:26,370
head over to the next lesson and put your skills to the test.


37485
00:00:00,330 --> 00:00:02,880
Hey guys, welcome to day 53

37486
00:00:02,940 --> 00:00:05,820
of 100 Days of Code. Today

37487
00:00:05,820 --> 00:00:08,640
it's time for your capstone project.

37488
00:00:09,030 --> 00:00:12,840
And it's time when you review everything that we've learned over the last 10

37489
00:00:12,840 --> 00:00:16,100
days or so... everything to do with web scraping.

37490
00:00:17,060 --> 00:00:21,110
The project that we're going to be tackling is a data entry job.

37491
00:00:21,320 --> 00:00:25,610
Now there's a lot of data entry jobs out there where you're kind of just meant

37492
00:00:25,610 --> 00:00:29,000
to transfer data from one format to another.

37493
00:00:29,000 --> 00:00:32,689
So maybe you have it in a physical print copy,

37494
00:00:32,689 --> 00:00:34,550
or maybe it's on a website, maybe it's on

37495
00:00:34,550 --> 00:00:37,580
a PDF and you just have to transfer it somewhere else,

37496
00:00:37,610 --> 00:00:40,130
usually typing it into a spreadsheet.

37497
00:00:40,790 --> 00:00:43,820
The inspiration for this project came from, um,

37498
00:00:43,850 --> 00:00:48,020
when I was browsing Reddit actually on the /r/Python subreddit

37499
00:00:48,050 --> 00:00:52,190
which is a really good community for you to actually look at and see what other

37500
00:00:52,190 --> 00:00:57,170
people are doing with Python and seeing the latest and greatest things built or

37501
00:00:57,200 --> 00:00:59,330
news about Python. Now,

37502
00:00:59,330 --> 00:01:03,740
one of the posts I saw was asking whether if anyone has automated their job

37503
00:01:03,770 --> 00:01:06,350
completely, basically using Python.

37504
00:01:06,830 --> 00:01:09,500
Now we've seen how powerful Python can be

37505
00:01:09,560 --> 00:01:13,940
especially when we apply it to web scraping using Beautiful Soup and Selenium.

37506
00:01:14,360 --> 00:01:16,880
And looking through or the comments

37507
00:01:17,000 --> 00:01:19,250
there's actually a lot of people who have done this,

37508
00:01:19,580 --> 00:01:24,580
including this one guy who basically pretty much automated his entire job. And

37509
00:01:27,860 --> 00:01:31,190
the jobs that tend to be easily automated using Python

37510
00:01:31,490 --> 00:01:35,600
are data entry jobs, moving data from one format to another.

37511
00:01:36,260 --> 00:01:39,650
And if you think about it, if that job is in fact remote,

37512
00:01:39,680 --> 00:01:44,390
so if you search on indeed.com for a remote data entry job

37513
00:01:44,750 --> 00:01:49,430
and you get up and running with the company and you start doing it manually,

37514
00:01:49,430 --> 00:01:53,960
and then once you've understood what it is you have to do. For example, um,

37515
00:01:53,990 --> 00:01:55,670
gathering statistical data,

37516
00:01:55,670 --> 00:01:58,280
preparing reports and maintaining these spreadsheets.

37517
00:01:58,820 --> 00:02:02,000
If you realize that this is a large part of your job

37518
00:02:02,180 --> 00:02:05,210
and you can automate it pretty much with Python,

37519
00:02:05,570 --> 00:02:08,810
then you could probably get Python to do 70% of your job

37520
00:02:08,930 --> 00:02:12,440
and you spend the rest 30% of the day doing the rest of the job,

37521
00:02:12,650 --> 00:02:16,460
but still being paid as a full on worker with full benefits.

37522
00:02:16,910 --> 00:02:20,180
So this is something that a lot of people in the Python community has talked

37523
00:02:20,180 --> 00:02:21,560
about and explored,

37524
00:02:21,980 --> 00:02:26,210
and this is something that we're going to be trying out using both Beautiful

37525
00:02:26,210 --> 00:02:30,050
Soup and Selenium in this project. In our case,

37526
00:02:30,080 --> 00:02:34,850
we're going to be tackling a research data entry job where we're researching

37527
00:02:34,940 --> 00:02:39,940
house prices that fit a particular criteria for a client on the Zillow website.

37528
00:02:41,600 --> 00:02:45,110
And then we're going to be transferring that data into a form

37529
00:02:45,290 --> 00:02:48,050
which will create a spreadsheet in Google sheets

37530
00:02:48,410 --> 00:02:52,280
and that is usually how as a data entry person,

37531
00:02:52,340 --> 00:02:55,430
this is how we would make our money. Now,

37532
00:02:55,460 --> 00:03:00,460
because this is a capstone project, we're going to be using everything that we've learned in

37533
00:03:00,760 --> 00:03:05,380
this section. So that means Beautiful Soup as well as Selenium.

37534
00:03:05,830 --> 00:03:08,860
So you might have to revise up on some of the things you learned

37535
00:03:08,920 --> 00:03:12,640
especially the stuff on Beautiful Soup which we covered a few days ago.

37536
00:03:13,000 --> 00:03:15,910
And we're going to combine all the skills that you've done so far.

37537
00:03:16,420 --> 00:03:19,870
And this project really is going to test all of your web scraping skills that

37538
00:03:19,870 --> 00:03:24,700
you've acquired so far and see how far you can run with it. Because it's capstone

37539
00:03:24,700 --> 00:03:27,040
project there's not going to be a lot of guidance.

37540
00:03:27,310 --> 00:03:30,640
So you're going to have to persevere and try to see if you can solve your own

37541
00:03:30,640 --> 00:03:33,610
problems and see if you can get to the end outcome.

37542
00:03:34,600 --> 00:03:37,570
This is what we're aiming for. We're going to go to Zillow,

37543
00:03:37,600 --> 00:03:42,600
which is one of the largest real estate listing sites in the US, and we're going

37544
00:03:42,610 --> 00:03:46,750
to search to see if we can find a place to rent in San Francisco. Now,

37545
00:03:46,780 --> 00:03:51,160
San Francisco is notorious for really expensive housing,

37546
00:03:51,490 --> 00:03:55,210
and it was also really difficult often to actually find somewhere that you want

37547
00:03:55,210 --> 00:03:55,990
to live.

37548
00:03:55,990 --> 00:04:00,990
Let's say that you have a client who wants you to compile a list of all the

37549
00:04:01,810 --> 00:04:06,810
places that they can rent in San Francisco up to $3,000 per month

37550
00:04:07,630 --> 00:04:11,530
and it has to have at least one bedroom. On Zillow

37551
00:04:11,530 --> 00:04:15,310
you can already filter on these things. So for example, you could say

37552
00:04:15,310 --> 00:04:19,180
this is the area San Francisco California, that I want to rent.

37553
00:04:19,420 --> 00:04:21,640
And then of course changing it to for rent

37554
00:04:21,640 --> 00:04:26,640
rather than for sale switching the maximum price up to $3,000,

37555
00:04:28,000 --> 00:04:32,890
and then adding in the extra requirement that it must have at least one bedroom.

37556
00:04:33,430 --> 00:04:37,900
So once you've added all of those filters in, then all of those filters will go

37557
00:04:37,900 --> 00:04:38,770
into the URL

37558
00:04:39,040 --> 00:04:43,360
and this is the URL that you will be able to use to try and find properties that

37559
00:04:43,360 --> 00:04:47,080
match our client's criteria. Now,

37560
00:04:47,140 --> 00:04:48,790
in addition to using that URL,

37561
00:04:49,030 --> 00:04:53,980
you are also going to be using Beautiful Soup to scrape through all of this

37562
00:04:53,980 --> 00:04:58,630
data. And what we want is the price, the address,

37563
00:04:59,050 --> 00:05:03,670
and also the URL that this will link to. So, for example,

37564
00:05:03,670 --> 00:05:08,260
when I click on this, it will link it to the actual listing of the place.

37565
00:05:08,770 --> 00:05:11,770
And then once you've scraped all of that data using Beautiful Soup,

37566
00:05:12,130 --> 00:05:17,130
then you are going to be using Selenium to autofill in a Google form.

37567
00:05:17,860 --> 00:05:19,960
So we're going to be adding in the address of the property,

37568
00:05:19,960 --> 00:05:22,810
the price per month and the link to property. And of course,

37569
00:05:22,810 --> 00:05:27,550
we're going to fill out one of these forms per listing that we have on Zillow.

37570
00:05:28,120 --> 00:05:30,550
And once all of that form's been compiled,

37571
00:05:30,820 --> 00:05:34,840
then you will have the option to turn it into a spreadsheet.

37572
00:05:35,590 --> 00:05:38,830
Whenever you create a form in Google forms,

37573
00:05:38,860 --> 00:05:41,170
you can see that when you go to the responses tab,

37574
00:05:41,380 --> 00:05:46,210
you can click on this button in order to create a Google sheet from the

37575
00:05:46,210 --> 00:05:47,920
responses that have been submitted

37576
00:05:48,250 --> 00:05:53,250
and this is what you end up with: a spreadsheet with the address of the property,

37577
00:05:53,410 --> 00:05:57,290
the price per month, and a link to the property. So this way,

37578
00:05:57,290 --> 00:05:58,880
once you've done this research,

37579
00:05:58,910 --> 00:06:02,270
then you can send it to your client so that they are going to filter down on

37580
00:06:02,300 --> 00:06:06,680
each of the listings that match their criteria and decide which one they want to

37581
00:06:06,680 --> 00:06:11,270
go and make a viewing. So this of course makes their job a little bit easier,

37582
00:06:11,660 --> 00:06:15,680
and this is our research task that we're going to complete today.

37583
00:06:16,460 --> 00:06:21,080
So the first part of scraping the data for the relevant listings is going to be

37584
00:06:21,080 --> 00:06:22,460
done using Beautiful Soup,

37585
00:06:22,820 --> 00:06:27,470
and then the second part where we're going to be filling in this form is going

37586
00:06:27,470 --> 00:06:31,580
to be done using Selenium. So that is the project.

37587
00:06:32,120 --> 00:06:33,440
And once you're ready,

37588
00:06:33,530 --> 00:06:37,220
head over to the next lesson and take a look at the requirements of the

37589
00:06:37,220 --> 00:06:41,150
project and we can get started with the capstone project.


37590
00:00:00,510 --> 00:00:04,590
Hey guys, welcome to day 54 of 100 days of Code.

37591
00:00:05,010 --> 00:00:10,010
And today we're going to be moving on to a new topic and that is going to be web

37592
00:00:10,200 --> 00:00:11,033
development.

37593
00:00:11,220 --> 00:00:13,920
And we're going to be working on this for the next few days as well.

37594
00:00:14,520 --> 00:00:16,320
Now there's quite a lot to cover today.

37595
00:00:16,350 --> 00:00:20,670
We're going to be talking about the command line, Python decorators,

37596
00:00:20,970 --> 00:00:23,730
as well as web development using Flask,

37597
00:00:23,850 --> 00:00:28,170
one of the most popular frameworks for creating websites using Python.

37598
00:00:29,460 --> 00:00:32,490
Now, before we get started though, you might be thinking, well,

37599
00:00:32,549 --> 00:00:34,020
I already know how to make websites.

37600
00:00:34,110 --> 00:00:38,250
I learned about HTML and CSS on days 41 through to 44.

37601
00:00:38,250 --> 00:00:40,590
So I really know how to make websites.

37602
00:00:40,860 --> 00:00:44,520
So what exactly is it that you're teaching me now? Well,

37603
00:00:44,550 --> 00:00:45,720
if you think of a website,

37604
00:00:45,930 --> 00:00:49,950
a simple website just contains HTML and CSS.

37605
00:00:50,310 --> 00:00:53,310
Now that is also what we call the front-end.

37606
00:00:53,610 --> 00:00:58,380
This is the beautiful mermaid that the user gets to see. Now for the website to

37607
00:00:58,380 --> 00:01:02,760
actually have some functionality, for example, if you're building a web app

37608
00:01:02,790 --> 00:01:05,489
instead of just a simple display website,

37609
00:01:05,910 --> 00:01:08,070
then it's also got to have a backend.

37610
00:01:08,550 --> 00:01:12,300
And the backend is the part that we're going to be learning how to build right

37611
00:01:12,300 --> 00:01:13,133
now.

37612
00:01:13,620 --> 00:01:17,760
So if the front end is just the part that displays information to the user,

37613
00:01:18,060 --> 00:01:21,210
the backend is the part that does a lot of the business logic,

37614
00:01:21,240 --> 00:01:22,560
a lot of the calculations,

37615
00:01:22,890 --> 00:01:26,670
and a lot of the things that we've been doing with Python. Now,

37616
00:01:26,670 --> 00:01:29,370
when people talk about full stack web development

37617
00:01:29,430 --> 00:01:31,230
which is a term that you would've heard of

37618
00:01:31,260 --> 00:01:35,700
if you were searching for web development jobs. Now full stack basically just

37619
00:01:35,700 --> 00:01:37,830
means frontend and backend.

37620
00:01:37,890 --> 00:01:42,540
So somebody who can deal with both frontend and backend technologies. Now,

37621
00:01:42,540 --> 00:01:46,890
usually there's quite a few languages that are used for the front and the back

37622
00:01:46,890 --> 00:01:49,620
end. So the front it's usually HTML,

37623
00:01:49,620 --> 00:01:53,460
CSS and JavaScript. HTML gives the website structure,

37624
00:01:53,490 --> 00:01:58,410
CSS gives it style and JavaScript allows it to have some sort of interactivity.

37625
00:01:59,070 --> 00:02:02,880
Now the backend can also be created by a bunch of different languages,

37626
00:02:03,240 --> 00:02:08,190
and here is more of a choice. Um, you could choose between JavaScript, Java,

37627
00:02:08,220 --> 00:02:09,479
Python, Ruby,

37628
00:02:09,660 --> 00:02:13,110
there's whole bunch of different languages. To make it even more

37629
00:02:13,110 --> 00:02:15,930
complicated, in addition to languages,

37630
00:02:16,140 --> 00:02:19,560
there's also different frameworks that you could use for the front and back end.

37631
00:02:19,980 --> 00:02:21,930
So some popular frameworks you might have heard of

37632
00:02:21,930 --> 00:02:26,930
are things like Angular and Rreact from the front end and Node and Flask or Django

37633
00:02:27,240 --> 00:02:28,073
for the backend.

37634
00:02:29,430 --> 00:02:34,290
So these frameworks are basically tools that really come with a lot of code

37635
00:02:34,350 --> 00:02:38,700
prebuilt for a lot of the common functionalities that you find when building

37636
00:02:38,700 --> 00:02:39,900
the front and back end.

37637
00:02:40,290 --> 00:02:44,610
So that way, we don't always have to reinvent the wheel and we can simply just

37638
00:02:44,700 --> 00:02:49,200
use the wheel and build a bicycle or build a car or built a scooter and whatever

37639
00:02:49,200 --> 00:02:52,170
it is that we want. Now,

37640
00:02:52,170 --> 00:02:54,270
when we're considering Python backend,

37641
00:02:54,330 --> 00:02:58,350
there's a whole myriad of different frameworks that you could choose from.

37642
00:02:58,650 --> 00:03:02,410
For example, Flask, Django, Bottle, Cherry pie, pyramid,

37643
00:03:02,770 --> 00:03:07,120
and a whole bunch more. But the most popular ones, if you look at job search

37644
00:03:07,150 --> 00:03:07,720
anyways,

37645
00:03:07,720 --> 00:03:12,720
is Flask and Django where Flask is better suited to beginners and also small

37646
00:03:14,800 --> 00:03:19,800
projects and Django suited much more to larger commercial projects. In order to

37647
00:03:20,830 --> 00:03:25,030
build out a website which has a front end and a backend,

37648
00:03:25,330 --> 00:03:28,330
we have to kind of understand what exactly is the backend.

37649
00:03:29,380 --> 00:03:32,800
There's three components that you really need to understand when it comes to the

37650
00:03:32,800 --> 00:03:35,770
backend. And that is the client,

37651
00:03:36,220 --> 00:03:38,440
the server and the database.

37652
00:03:39,100 --> 00:03:43,390
These three components together will determine how your backend will work.

37653
00:03:44,020 --> 00:03:45,280
Now, firstly, the client,

37654
00:03:45,280 --> 00:03:49,630
you can sort of imagine just as a user going onto a browser,

37655
00:03:49,930 --> 00:03:53,110
this is the client's side. This is the part that faces the user.

37656
00:03:53,890 --> 00:03:55,570
And then there's the server.

37657
00:03:55,930 --> 00:04:00,040
So you can think of the server as basically just a powerful computer

37658
00:04:00,310 --> 00:04:03,430
that's hooked up to the internet and it's on 24/7

37659
00:04:03,790 --> 00:04:07,780
always ready to receive requests over the internet. Finally,

37660
00:04:07,780 --> 00:04:08,950
you've got the database

37661
00:04:09,100 --> 00:04:12,670
which is kind of like a souped up spreadsheet where you are storing all the

37662
00:04:12,670 --> 00:04:15,130
information related to your website.

37663
00:04:15,730 --> 00:04:19,300
So let's say the client wanted to go to google.com. Well,

37664
00:04:19,300 --> 00:04:22,480
when they type that into the URL bar and they hit enter,

37665
00:04:22,750 --> 00:04:26,080
that gets sent to the server as a request,

37666
00:04:26,620 --> 00:04:30,490
and this goes across the internet to this other computer.

37667
00:04:30,940 --> 00:04:35,940
And this server has to respond. And it responds by sending over the HTML, CSS and

37668
00:04:38,410 --> 00:04:42,220
JavaScript files that it has for that particular website.

37669
00:04:42,640 --> 00:04:45,340
And once that gets sent back to the browser,

37670
00:04:45,430 --> 00:04:50,380
then that can be rendered by the browser as the actual webpage. Now,

37671
00:04:50,410 --> 00:04:54,430
if you're a website that has a lot of use of data or different types of data

37672
00:04:54,430 --> 00:04:59,140
that could be requested by a user, then usually you'll have a database.

37673
00:04:59,470 --> 00:05:02,020
So when the client requests, for example,

37674
00:05:02,020 --> 00:05:05,320
to see all the tickets they have on Eventbrite, well,

37675
00:05:05,320 --> 00:05:09,100
the page that they're viewing, that is the front end. That is the client side.

37676
00:05:09,550 --> 00:05:12,610
But in order to render all the tickets they have,

37677
00:05:12,910 --> 00:05:17,890
the client makes the request to the server and the server fetches the data from

37678
00:05:17,890 --> 00:05:21,310
the database. Once it gets the data back from the database,

37679
00:05:21,550 --> 00:05:25,450
it puts the data into the HTML, CSS and JavaScript files,

37680
00:05:25,780 --> 00:05:30,780
and it sends the whole bundle back to the browser to be viewed by the user.

37681
00:05:31,930 --> 00:05:36,160
If this whole process seems a little bit convoluted and complex, don't worry.

37682
00:05:36,400 --> 00:05:40,270
We're going to be diving deep into creating our server, creating our database,

37683
00:05:40,570 --> 00:05:44,170
and we're going to be creating all of these parts from scratch step-by-step

37684
00:05:44,200 --> 00:05:47,620
ourselves. So at the end of the web-dev section,

37685
00:05:47,860 --> 00:05:50,080
you'll find that if you come back to this video,

37686
00:05:50,170 --> 00:05:52,120
everything's going to make a lot more sense.

37687
00:05:53,140 --> 00:05:57,100
Now in order for you to have a good overview of what the whole system looks

37688
00:05:57,110 --> 00:06:00,530
like, I'd like to use the analogy of a restaurant.

37689
00:06:01,250 --> 00:06:05,480
So imagine if you have a restaurant and you've got the front of house

37690
00:06:05,480 --> 00:06:06,830
which is where the tables are,

37691
00:06:06,880 --> 00:06:09,100
when the customer sit. And then

37692
00:06:09,130 --> 00:06:10,240
you've got the kitchen

37693
00:06:10,270 --> 00:06:13,690
which is where the chefs work and where you're creating all the dishes.

37694
00:06:14,050 --> 00:06:15,790
And finally, you've also got the larder

37695
00:06:15,790 --> 00:06:20,080
which is where you store all the ingredients in the fridge or on the shelves.

37696
00:06:20,770 --> 00:06:23,590
Now this front of house part

37697
00:06:23,710 --> 00:06:28,300
which is where the user seats in is the client site. Now in the middle,

37698
00:06:28,300 --> 00:06:32,770
we've got the kitchen, which is the server. And finally we've got the larder

37699
00:06:32,800 --> 00:06:35,590
which is basically the database of ingredients.

37700
00:06:36,130 --> 00:06:41,050
Now the client side is completely separate from the rest. So as a user,

37701
00:06:41,050 --> 00:06:42,310
when I go onto a website,

37702
00:06:42,580 --> 00:06:46,900
I'm not interacting with the server or the database directly. Instead,

37703
00:06:46,900 --> 00:06:50,740
I'm interacting with my browser, which is on the client side. Now,

37704
00:06:50,770 --> 00:06:55,270
when you go to a website and you request to see some piece of information,

37705
00:06:55,300 --> 00:06:58,600
for example, you log in to Spotify and you want to view your playlists,

37706
00:06:58,990 --> 00:07:01,020
what actually happens is, you know,

37707
00:07:01,020 --> 00:07:04,420
you don't have the chef sort of cooking up the dish in front of you on the

37708
00:07:04,420 --> 00:07:05,860
client side. No,

37709
00:07:05,920 --> 00:07:10,920
instead what happens is that the server fetches the relevant ingredients from

37710
00:07:12,160 --> 00:07:16,330
the database, so the data that's related to your Spotify playlist,

37711
00:07:16,720 --> 00:07:21,100
and then it takes that data and it renders it into a HTML,

37712
00:07:21,130 --> 00:07:23,020
CSS and JavaScript files.

37713
00:07:23,440 --> 00:07:26,410
And then once that endproduct is created,

37714
00:07:26,680 --> 00:07:30,910
it ships it out to the browser on the client side, which you

37715
00:07:30,940 --> 00:07:33,040
as the user, can now view.

37716
00:07:33,700 --> 00:07:38,700
So this is basically an overview of how our frontend and our backend interact in

37717
00:07:39,790 --> 00:07:43,810
order to create a website experience for people. And in the coming lessons,

37718
00:07:43,810 --> 00:07:47,710
we're going to be building out each of these parts and you gonna see in greater

37719
00:07:47,710 --> 00:07:51,850
detail how they work together. So head over to the next lesson

37720
00:07:52,000 --> 00:07:54,940
and we'll get started building our very first website.


37721
00:00:00,600 --> 00:00:04,670
All right. Let's get started developing websites using Flask.

37722
00:00:05,330 --> 00:00:09,350
Now Flask is one of the most popular web development frameworks,

37723
00:00:09,860 --> 00:00:13,490
but what does it mean to be a framework? Well,

37724
00:00:13,880 --> 00:00:18,710
we've seen libraries before like Beautiful Soup. Tools that we can use and tap

37725
00:00:18,710 --> 00:00:22,760
into whenever we need a particular piece of functionality. Now,

37726
00:00:22,820 --> 00:00:26,990
a framework is a little bit like a library in the sense that it's a package of

37727
00:00:26,990 --> 00:00:30,770
code that you didn't write, but it also got some differences.

37728
00:00:31,100 --> 00:00:35,960
So here I've got a graphic from the differencebetween.net and one of the

37729
00:00:35,960 --> 00:00:40,960
biggest differences is the fact that a library is something which you call upon

37730
00:00:43,580 --> 00:00:45,140
to do something specific.

37731
00:00:45,620 --> 00:00:50,120
Whereas a framework is something which you have to abide by their rules,

37732
00:00:50,390 --> 00:00:52,610
you have to use their architecture.

37733
00:00:53,000 --> 00:00:56,990
And when it comes to triggering some sort of functionality,

37734
00:00:57,260 --> 00:01:00,530
it's the framework that calls upon your code.

37735
00:01:01,190 --> 00:01:02,960
So what does that mean? Well,

37736
00:01:02,990 --> 00:01:07,990
remember when we used the requests library and we would say something like requests

37737
00:01:08,210 --> 00:01:12,980
.get and then we would tell it which webpage to go and fetch.

37738
00:01:13,400 --> 00:01:13,820
Well,

37739
00:01:13,820 --> 00:01:18,650
this is us tapping into that library and then giving it a command to do

37740
00:01:18,650 --> 00:01:22,100
something. Now, when we're working with a framework,

37741
00:01:22,130 --> 00:01:25,400
it doesn't really work like that. We don't really say, hey framework,

37742
00:01:25,430 --> 00:01:27,530
do this thing for us. Instead,

37743
00:01:27,560 --> 00:01:32,560
we make sure that our code is defined in a way that the framework wants it to

37744
00:01:32,690 --> 00:01:34,910
be. And then when the time is right,

37745
00:01:35,090 --> 00:01:38,390
the framework is actually going to call our methods

37746
00:01:38,780 --> 00:01:41,090
instead of us calling the framework.

37747
00:01:41,600 --> 00:01:45,950
All we have to do is to plan ahead for certain situations.

37748
00:01:46,280 --> 00:01:51,020
If it was this situation, what do we want to happen? If it was that situation,

37749
00:01:51,200 --> 00:01:52,640
what code it should be run?

37750
00:01:53,060 --> 00:01:57,530
So it might be that all you have to do is just write some functions like hello

37751
00:01:57,530 --> 00:02:00,110
world and when the user goes to the website,

37752
00:02:00,440 --> 00:02:03,440
then it's going to display this text Hello world.

37753
00:02:04,700 --> 00:02:07,700
Let's try this in practice. Now by

37754
00:02:07,700 --> 00:02:10,070
now you would of known that as developers,

37755
00:02:10,400 --> 00:02:14,420
especially now that we're in the advanced stages of becoming a Python developer,

37756
00:02:14,790 --> 00:02:19,790
the most important thing when we approach a new tool or a new technology is to

37757
00:02:19,790 --> 00:02:21,140
read the documentation.

37758
00:02:21,770 --> 00:02:26,770
So Flask actually has a really good piece of documentation in order to tell us

37759
00:02:27,110 --> 00:02:32,090
how to get started quickly using Flask. As you can see,

37760
00:02:32,090 --> 00:02:36,200
they've described what a minimal Flask application looks like.

37761
00:02:36,530 --> 00:02:40,730
And this is a very simple server set up with flask.

37762
00:02:41,300 --> 00:02:46,040
So let's go ahead and copy this code. And I'm going to create a new project

37763
00:02:46,100 --> 00:02:50,360
which I've decided to call hello_flask. And then in this project folder,

37764
00:02:50,420 --> 00:02:54,710
I'm going to create a new file which I'll call hello.py.

37765
00:02:55,640 --> 00:03:00,640
Now it's important that the name of your file does not conflict with the name of

37766
00:03:01,180 --> 00:03:04,720
the framework or library in fact. So for example,

37767
00:03:04,720 --> 00:03:08,170
if I was to create a file called requests.py

37768
00:03:08,620 --> 00:03:10,540
and I had, um,

37769
00:03:10,750 --> 00:03:13,750
imported the requests library.

37770
00:03:14,350 --> 00:03:17,650
And then I tried to do something like requests.get.

37771
00:03:19,210 --> 00:03:20,650
Now when I run this,

37772
00:03:20,680 --> 00:03:25,680
because the name of my file conflicts with the name of the module, what will happen is

37773
00:03:26,530 --> 00:03:30,610
I will get this error. And it might be a little bit confusing

37774
00:03:30,610 --> 00:03:34,660
cause it says, well, request has no attribute get. Well

37775
00:03:34,660 --> 00:03:37,330
we know it does because it's in the documentation.

37776
00:03:37,750 --> 00:03:42,750
And the reason why we're getting this error is because we've named this file

37777
00:03:43,690 --> 00:03:45,730
the same name as the module.

37778
00:03:46,120 --> 00:03:48,850
So this is something that happens to a lot of people

37779
00:03:49,120 --> 00:03:54,120
so make sure that you don't commit this mistake and you could name it anything

37780
00:03:54,460 --> 00:03:59,350
like main or server or hello in our case. Notice that now

37781
00:03:59,350 --> 00:04:03,730
if I change the name, it actually automatically changed the import

37782
00:04:04,000 --> 00:04:08,380
which is not what we want. We want the import to be requests

37783
00:04:08,620 --> 00:04:12,760
and we want to make sure that we install our package  requests.

37784
00:04:14,140 --> 00:04:15,640
And once that's done,

37785
00:04:15,700 --> 00:04:19,720
you can see our module and our file have completely different names.

37786
00:04:20,110 --> 00:04:22,060
So now, if I run this file,

37787
00:04:22,120 --> 00:04:25,450
it works perfectly and it ends with exit code zero,

37788
00:04:25,510 --> 00:04:27,490
which means everything was successful.

37789
00:04:28,240 --> 00:04:31,510
So now I'm going to go ahead and delete this file

37790
00:04:33,670 --> 00:04:38,410
and go back to our hello.py. Now inside our hello.py

37791
00:04:38,470 --> 00:04:43,470
I'm going to paste in the minimal Flask application from the Flask 

37792
00:04:44,020 --> 00:04:47,080
documentation. So paste that right here.

37793
00:04:47,740 --> 00:04:49,510
And as you might remember,

37794
00:04:49,570 --> 00:04:54,310
there's several ways that we can install new modules. So in this case,

37795
00:04:54,310 --> 00:04:59,310
the module is Flask and we can either click on the red light bulb to install

37796
00:05:00,160 --> 00:05:05,050
this package. Alternatively, we can go to PyCharm, preferences,

37797
00:05:05,380 --> 00:05:10,380
and then go to our project and into the interpreter to add the Flask package like

37798
00:05:12,790 --> 00:05:13,380
this.

37799
00:05:13,380 --> 00:05:14,213
Right.

37800
00:05:16,470 --> 00:05:19,260
Now, if you have the PyCharm professional edition,

37801
00:05:19,770 --> 00:05:24,360
there's additional tools to make it easier to install Flask into a project and

37802
00:05:24,360 --> 00:05:28,620
to work with Flask projects. But because we're using the free community edition,

37803
00:05:28,680 --> 00:05:30,960
I'm just going to go ahead and dismiss that popup.

37804
00:05:31,620 --> 00:05:34,290
So I've shown you two ways of installing a package.

37805
00:05:34,440 --> 00:05:36,090
Now I want to show you the third way,

37806
00:05:36,660 --> 00:05:40,650
which you might come across if you're looking at the installation.

37807
00:05:41,850 --> 00:05:44,730
So notice here, in order to install Flask,

37808
00:05:44,760 --> 00:05:47,550
they're using pip install Flask.

37809
00:05:48,930 --> 00:05:53,930
So pip is something that allows us to install Python packages from pypi.

37810
00:05:55,620 --> 00:06:00,590
So any package that you on pypi.org, you can install using pip.

37811
00:06:01,280 --> 00:06:05,930
And what we have to do is to type in the name that you see right here.

37812
00:06:07,010 --> 00:06:08,930
For example, if we want to install Flask,

37813
00:06:08,990 --> 00:06:13,400
then it's pip install and it's the capital F for Flask.

37814
00:06:13,790 --> 00:06:15,980
So we can copy that into our clipboard.

37815
00:06:16,460 --> 00:06:18,680
And if we go to the terminal tab at the bottom,

37816
00:06:18,950 --> 00:06:22,700
we can paste that instruction in here and hit enter.

37817
00:06:23,630 --> 00:06:28,520
Now it should have successfully installed Flask . And once I dismiss that,

37818
00:06:28,520 --> 00:06:32,660
you can see my errors go away. So all three methods work.

37819
00:06:32,720 --> 00:06:36,140
I personally prefer the red light bulb, just because it's much quicker.

37820
00:06:36,410 --> 00:06:41,360
It's just two clicks rather than typing a lot of code. Now,

37821
00:06:41,360 --> 00:06:42,860
once we've installed Flask,

37822
00:06:43,160 --> 00:06:47,870
we can go ahead and add some space to get rid of all the warnings from Py

37823
00:06:47,870 --> 00:06:52,460
Charm. Um, we can go ahead and run our project.

37824
00:06:54,020 --> 00:06:57,050
Now, as soon as I run the project, you can see

37825
00:06:57,050 --> 00:07:00,080
it tells me the process was finished with exit code zero,

37826
00:07:00,110 --> 00:07:02,240
which means everything was successful,

37827
00:07:02,630 --> 00:07:05,540
but where's my server and where's my website.

37828
00:07:06,770 --> 00:07:11,180
So let's go back to the Quickstart to see what we actually have to do in order

37829
00:07:11,180 --> 00:07:15,350
to set up our server. So to run our Flask application,

37830
00:07:15,380 --> 00:07:20,090
we're going to firstly, need to export a environment variable.

37831
00:07:20,450 --> 00:07:23,420
So in previous lessons, we've talked about environment variables,

37832
00:07:23,720 --> 00:07:26,810
but basically this is going to tell the Flask framework

37833
00:07:27,050 --> 00:07:30,710
what is the name of the file that contains our server.

37834
00:07:31,010 --> 00:07:33,830
So in our case, as well as in the Quickstart,

37835
00:07:34,010 --> 00:07:36,710
the name of that file is hello.py.

37836
00:07:37,220 --> 00:07:41,810
So we basically have to point to that file to get Flask 

37837
00:07:41,840 --> 00:07:46,700
to be able to recognize it and to use it as the server. So on Mac

37838
00:07:46,760 --> 00:07:50,030
we're going to type export space

37839
00:07:50,270 --> 00:07:53,540
and then we're going to put in the name of the environment variable

37840
00:07:53,810 --> 00:07:58,670
which is FLASK_APP and its all caps.

37841
00:07:58,850 --> 00:08:02,000
And then with no spaces, we've got a equal sign

37842
00:08:02,420 --> 00:08:05,990
and then the name of our file, which is hello.py.

37843
00:08:06,650 --> 00:08:08,420
So now when I hit enter,

37844
00:08:08,540 --> 00:08:12,980
that's going to add that environment variable under the name that Flask is

37845
00:08:12,980 --> 00:08:16,730
expecting, which is flask.app. Now,

37846
00:08:16,790 --> 00:08:19,640
as it mentions in the Quickstart, if you're on Windows

37847
00:08:19,670 --> 00:08:23,480
the keyword is not export, but instead it's set.

37848
00:08:24,710 --> 00:08:28,730
So again, inside your terminal down here, you're going to type set.

37849
00:08:29,090 --> 00:08:32,510
And then you're going to put in the name of that environment variable

37850
00:08:32,720 --> 00:08:37,720
which was FLASK_APP and then with no space equals and it's our hello

37851
00:08:39,590 --> 00:08:44,059
.py. And once you hit enter,

37852
00:08:44,420 --> 00:08:48,320
it should give you the prompt again indicating that everything went smoothly.

37853
00:08:49,130 --> 00:08:50,990
Now, once we've done that,

37854
00:08:51,290 --> 00:08:55,380
the next step is to simply use the Flask command called run.

37855
00:08:59,180 --> 00:09:03,590
And when I hit enter, you'll see that it's created my server.

37856
00:09:03,620 --> 00:09:08,620
So it's serving up the Flask app that I've created in hello.py

37857
00:09:09,830 --> 00:09:14,810
and we're get a warning telling us that this is a development server and telling

37858
00:09:14,810 --> 00:09:18,110
us that if you want to actually launch it as a product,

37859
00:09:18,470 --> 00:09:22,430
don't use this development server. There's a few steps 

37860
00:09:22,430 --> 00:09:26,780
you have to carry out if you actually wanted to make this production ready and

37861
00:09:26,780 --> 00:09:30,350
ready for the internet and customers. But in our case,

37862
00:09:30,500 --> 00:09:33,500
we are developing. So this is perfect.

37863
00:09:33,950 --> 00:09:38,950
And it tells us where to go and find our website.

37864
00:09:39,650 --> 00:09:42,740
So if you imagine that Google is at https://

37865
00:09:42,770 --> 00:09:45,200
www.google.com. Well,

37866
00:09:45,200 --> 00:09:50,200
this is the address of our website and it's being served by our computer.

37867
00:09:53,000 --> 00:09:56,150
So when you're trying to get hold of a website on the internet,

37868
00:09:56,540 --> 00:10:00,320
then you have to point towards the IP address

37869
00:10:00,470 --> 00:10:02,150
of that particular webpage.

37870
00:10:02,630 --> 00:10:07,490
But because we've created our server locally and it's being served on our own

37871
00:10:07,490 --> 00:10:12,050
computer, then this is basically the local address

37872
00:10:12,230 --> 00:10:13,063
of that website.

37873
00:10:13,820 --> 00:10:18,230
Now a neat thing about PyCharm is if I simply just click on this link,

37874
00:10:18,440 --> 00:10:23,440
then it's going to launch my website in my browser and you can see right up

37875
00:10:24,350 --> 00:10:27,320
here, we've got hello world showing up

37876
00:10:27,680 --> 00:10:32,060
which is the same as what we've got here in this method.

37877
00:10:33,410 --> 00:10:38,410
So that proves that we've successfully managed to create our very first web

37878
00:10:39,140 --> 00:10:40,970
server using Flask.

37879
00:10:41,210 --> 00:10:45,680
And it's able to serve up our very first Flask website. Now,

37880
00:10:45,710 --> 00:10:50,120
if you go ahead and open up the Chrome developer tools and you go to elements,

37881
00:10:50,540 --> 00:10:54,920
you can see that what we wrote here which is just a string

37882
00:10:55,190 --> 00:10:59,330
was actually converted by Flask into full HTML.

37883
00:10:59,360 --> 00:11:01,790
It's got the HTML tag, it's got the head tag,

37884
00:11:01,790 --> 00:11:04,820
it's got the body tag and we didn't have to do any of this.

37885
00:11:04,850 --> 00:11:09,560
We just told Flask what we wanted to be returned onto the page

37886
00:11:09,860 --> 00:11:12,650
when the user goes to the homepage,

37887
00:11:12,860 --> 00:11:16,190
which has just the web address plus a forward slash.

37888
00:11:16,700 --> 00:11:20,570
Now the very last thing to remember is once we're done with our server,

37889
00:11:20,600 --> 00:11:22,760
because it's still ongoing

37890
00:11:22,760 --> 00:11:27,350
it's still waiting for a client to hit up this website,

37891
00:11:27,800 --> 00:11:32,800
we have to get it to stop waiting. So we can quit by holding down control and

37892
00:11:33,470 --> 00:11:38,390
then pressing C. And you can see this takes us back to our prompt

37893
00:11:38,450 --> 00:11:42,620
where we've got our name and our project. Now,

37894
00:11:42,650 --> 00:11:47,650
if you don't stop it and you try to run two Flask applications to the same

37895
00:11:47,780 --> 00:11:50,630
address then the second one is simply not going to run.

37896
00:11:51,320 --> 00:11:55,960
So just be aware that once you're done with your server, hit control+c to quit.

37897
00:11:57,130 --> 00:11:58,570
Now in the next lesson,

37898
00:11:58,630 --> 00:12:02,620
I want to talk a little bit more about the commands that you can use in the

37899
00:12:02,620 --> 00:12:06,580
terminal because this is called the command line.

37900
00:12:06,880 --> 00:12:11,880
And just as here we use the command line to run our Flask application, to export

37901
00:12:13,510 --> 00:12:18,340
our environment variables, we can also do other things like create folders,

37902
00:12:18,340 --> 00:12:22,060
create files, move files around. It's actually a very,

37903
00:12:22,090 --> 00:12:25,330
very powerful way of interacting with our computer.

37904
00:12:26,080 --> 00:12:30,370
That's what we're going to do in the next lesson. So for all of that and more,

37905
00:12:30,640 --> 00:12:31,120
I'll see you there.


37906
00:00:00,120 --> 00:00:00,450
Now,

37907
00:00:00,450 --> 00:00:05,370
in the last lesson, we saw how to get up and running with our brand new Flask

37908
00:00:05,400 --> 00:00:07,590
server. In this lesson

37909
00:00:07,650 --> 00:00:11,700
I want to take it back a little bit and talk briefly about some of these

37910
00:00:11,700 --> 00:00:14,070
commands that we put into the terminal here,

37911
00:00:14,970 --> 00:00:18,650
because the terminal is actually a really powerful tool.

37912
00:00:19,490 --> 00:00:24,490
And it's something that's also referred to as the command line and its a way of

37913
00:00:24,710 --> 00:00:29,660
typing in commands one line at a time in order to control our computer.

37914
00:00:30,740 --> 00:00:33,350
The command line is also known as the shell.

37915
00:00:34,040 --> 00:00:36,560
So what exactly is a shell?

37916
00:00:37,310 --> 00:00:40,910
If you think about your operating system as a pistachio nut,

37917
00:00:41,210 --> 00:00:45,080
then the kernels of the actual pistachio, the thing that you're going to eat,

37918
00:00:45,290 --> 00:00:47,270
I'm really sorry about all the food analogies.

37919
00:00:47,390 --> 00:00:50,840
You can clearly tell I'm pretty much hungry most of the time when I'm recording

37920
00:00:50,870 --> 00:00:53,510
these videos, but let's get back to the topic.

37921
00:00:53,570 --> 00:00:57,320
So if your operating system is a pistachio,

37922
00:00:57,680 --> 00:01:01,190
then the actual nut is the kernel. And in computing

37923
00:01:01,190 --> 00:01:06,190
the kernel refers to the actual program that interfaces with the hardware.

37924
00:01:06,740 --> 00:01:10,490
So it's the core of your operating system. Now,

37925
00:01:10,490 --> 00:01:15,350
the shell of your pistachio or the shell  in computing refers to

37926
00:01:15,500 --> 00:01:18,650
the user interface for you as a human

37927
00:01:18,680 --> 00:01:23,680
to be able to interact with the kernel and in turn with the hardware of your

37928
00:01:24,200 --> 00:01:27,710
computer. And there's two variants to the shell.

37929
00:01:28,010 --> 00:01:32,000
There are graphical user interface shells, so for example,

37930
00:01:32,000 --> 00:01:33,380
when you open up finder

37931
00:01:33,410 --> 00:01:38,410
you're using a graphical user interface to access and find your files.

37932
00:01:38,870 --> 00:01:41,750
But there's also a command line interface

37933
00:01:41,810 --> 00:01:44,540
which is what we're going to be talking about and what we're going to be

37934
00:01:44,540 --> 00:01:46,130
learning about in this module.

37935
00:01:46,430 --> 00:01:50,390
So this is an alternative way of interfacing with the kernel.

37936
00:01:50,810 --> 00:01:53,210
Now it can seem intimidating at first,

37937
00:01:53,360 --> 00:01:56,270
but I want to show you that it's actually super simple.

37938
00:01:56,510 --> 00:01:59,480
And once you understand it, you're going to see that it's actually really,

37939
00:01:59,480 --> 00:02:01,880
really useful tool at your disposal.

37940
00:02:02,660 --> 00:02:06,020
A lot of the things that you can do with command line can be done using the

37941
00:02:06,020 --> 00:02:08,620
graphical user interface. So why use

37942
00:02:08,870 --> 00:02:11,540
the command line at all? At the end of the day,

37943
00:02:11,540 --> 00:02:15,350
what it all boils down to is about greater control.

37944
00:02:15,830 --> 00:02:19,280
And in your journey of becoming a better developer,

37945
00:02:19,430 --> 00:02:24,430
you will need to understand and exert more power over your tools,

37946
00:02:25,250 --> 00:02:29,120
that is the computer hardware. But on a more day to day basis,

37947
00:02:29,150 --> 00:02:31,970
you will find that if you're a regular command-line user

37948
00:02:32,240 --> 00:02:37,240
that it's actually easier and faster to do a lot of really common things.

37949
00:02:38,480 --> 00:02:42,920
If you're a Mac user, you've actually got a dedicated terminal application.

37950
00:02:43,220 --> 00:02:47,510
So if you go to spotlight and hit the search button and look for the terminal

37951
00:02:47,810 --> 00:02:52,580
and hit enter, you can see that this is the actual terminal application.

37952
00:02:52,910 --> 00:02:56,390
Now I've styled it up to look a bit more like a hacker because I like scaring

37953
00:02:56,390 --> 00:02:59,920
people in Starbucks, but that's not the only you can change.

37954
00:02:59,950 --> 00:03:01,930
You can change the color of your terminal,

37955
00:03:02,410 --> 00:03:06,850
you can also change the type of shell you're using. Currently,

37956
00:03:06,850 --> 00:03:11,020
if you are running macOS Catalina or above, so Big Sur

37957
00:03:11,050 --> 00:03:15,250
or any of the future operating systems, you're going to be using zsh

37958
00:03:15,550 --> 00:03:17,830
which has now the default Mac shell.

37959
00:03:18,960 --> 00:03:19,793
All right,

37960
00:03:21,480 --> 00:03:25,770
Now, if you're on Windows however, the default shell is the command prompt.

37961
00:03:25,920 --> 00:03:30,450
So if you type in to search for the command prompt, you can see

37962
00:03:30,450 --> 00:03:34,440
this is the app you need to launch and this is your command prompt.

37963
00:03:35,490 --> 00:03:39,180
For the most part, you can type in the same commands on Windows and on Mac

37964
00:03:39,540 --> 00:03:41,040
and it will work on both.

37965
00:03:41,700 --> 00:03:46,140
I want to show you some common things we can do in the terminal. Here

37966
00:03:46,170 --> 00:03:51,170
I've got my terminal and the address of the terminal is determined by the part

37967
00:03:52,290 --> 00:03:57,180
that's just before the prompt. So at the moment, it's a ~ on my Mac.

37968
00:03:57,900 --> 00:04:01,380
There's a couple of things I want to show you that you can do with the terminal.

37969
00:04:01,920 --> 00:04:06,920
The first thing that's really useful to know is where am I in my file path?

37970
00:04:07,710 --> 00:04:12,450
And to do this, we have to write pwd, print working directory.

37971
00:04:12,930 --> 00:04:17,100
And this tells me where I am. Once you open up your finder

37972
00:04:17,160 --> 00:04:21,660
as you can see up here, go to view and then go to show path bar.

37973
00:04:22,170 --> 00:04:27,170
And this is showing us the path from our hard drive/ users/angela,

37974
00:04:28,470 --> 00:04:33,470
which is exactly the same location as what I've got now in my terminal.

37975
00:04:34,260 --> 00:04:38,970
So the print working directory is really useful for you to locate where you are.

37976
00:04:40,140 --> 00:04:43,920
Similarly, on Windows, you can see when I do print working directory,

37977
00:04:44,220 --> 00:04:48,570
it tells me that I'm in the C:\users\username.

37978
00:04:48,900 --> 00:04:53,700
So C drive, users, username... right here.

37979
00:04:56,670 --> 00:05:00,150
The next command that is really useful is ls,

37980
00:05:00,210 --> 00:05:02,340
which stands for list.

37981
00:05:03,210 --> 00:05:08,210
And what this does is it will list all of the files and folders at your current

37982
00:05:08,940 --> 00:05:10,020
working directory.

37983
00:05:10,290 --> 00:05:14,430
So it's going to list everything that's in this current location where I am at

37984
00:05:14,700 --> 00:05:17,550
basically this. So if I go ahead and hit enter,

37985
00:05:17,610 --> 00:05:21,450
you can see all of the same folders showing up as it does

37986
00:05:21,450 --> 00:05:26,450
in finder. Pwd and ls are really useful for finding things out, for displaying

37987
00:05:28,080 --> 00:05:28,860
things.

37988
00:05:28,860 --> 00:05:33,510
But we can also use the terminal to move around in our computer.

37989
00:05:34,080 --> 00:05:37,950
And we do that using the CD command, which is changed directory.

37990
00:05:38,520 --> 00:05:43,170
So if at the moment, my working directory is users/Angela

37991
00:05:43,530 --> 00:05:45,900
and I want to get into my desktop folder

37992
00:05:46,290 --> 00:05:50,670
which is clearly one of the folders that I can access, then I can simply say

37993
00:05:50,700 --> 00:05:55,050
change directory to desktop. Now,

37994
00:05:55,080 --> 00:05:59,150
one of the things you can do to prevent yourself from getting repetitive strain injury and

37995
00:05:59,150 --> 00:06:04,070
typing a lot is you can type the start of the folder, so for example desktop-

37996
00:06:04,100 --> 00:06:06,200
De and then hit tab,

37997
00:06:06,590 --> 00:06:11,090
and it will narrow down on the possibility that you can go to so there's

37998
00:06:11,090 --> 00:06:12,830
development or there's desktop.

37999
00:06:13,250 --> 00:06:16,400
So if I add one extra S and I hit tab,

38000
00:06:16,610 --> 00:06:20,720
it's now going to automatically insert the folder that I'm looking for,

38001
00:06:20,780 --> 00:06:23,570
which is desktop. So now if I hit enter,

38002
00:06:23,720 --> 00:06:28,550
you can see that this part before my flashing prompt has changed and it's

38003
00:06:28,550 --> 00:06:32,990
changed to the desktop. So now, if I do pwd,

38004
00:06:32,990 --> 00:06:36,410
you can see I'm now in users/angela/Desktop,

38005
00:06:36,740 --> 00:06:39,740
which is the equivalent of double-clicking on this basically.

38006
00:06:39,880 --> 00:06:40,713
Okay.

38007
00:06:46,870 --> 00:06:51,610
On my desktop what if I wanted to create a new folder? Well,

38008
00:06:51,610 --> 00:06:56,610
we can do that using the make dir or make directory command.

38009
00:06:57,250 --> 00:07:01,630
So we're saying make directory and then we give it a name. So let's say

38010
00:07:01,630 --> 00:07:04,510
I want to call this Test then I'll just say mk

38011
00:07:04,510 --> 00:07:07,780
dir Test. And notice the location while you are at.

38012
00:07:07,780 --> 00:07:11,770
So I'm going to be making this test directory on my desktop.

38013
00:07:12,250 --> 00:07:14,890
And as soon as they hit enter, there you see it.

38014
00:07:15,040 --> 00:07:17,740
It's created that folder from scratch.

38015
00:07:19,420 --> 00:07:24,420
So now here's a question. If you wanted to navigate into Test so that when you

38016
00:07:24,490 --> 00:07:25,900
print the working directory,

38017
00:07:25,930 --> 00:07:30,930
it's going to output users/yourusername/desktop/test.

38018
00:07:31,600 --> 00:07:34,570
What would you do? What would be your command? Pause the video and

38019
00:07:34,570 --> 00:07:38,800
have a think about that. Alright,

38020
00:07:39,070 --> 00:07:42,970
of course, we have to change directory coz at the moment we're in the desktop

38021
00:07:43,270 --> 00:07:46,510
which is this, and if we want to go inside this test folder,

38022
00:07:46,780 --> 00:07:49,960
then we have to cd into it. So cd into test,

38023
00:07:50,380 --> 00:07:54,700
and now we're inside the test folder. And if I hit pwed, you can see

38024
00:07:54,760 --> 00:07:57,070
this is where I'm at. Now,

38025
00:07:57,100 --> 00:08:00,190
once I've cded into this new directory,

38026
00:08:00,460 --> 00:08:05,320
I'm going to create a new file in this directory. To create a new file

38027
00:08:05,350 --> 00:08:08,410
the command is a little bit different from creating a new directory.

38028
00:08:08,800 --> 00:08:13,480
The key word is touch. And after the key word, there's a space

38029
00:08:13,960 --> 00:08:16,390
and then we can provide the name of our file.

38030
00:08:16,840 --> 00:08:19,840
So let's say that we want to create a new Python file

38031
00:08:19,870 --> 00:08:22,960
which we'll call main.py. Now,

38032
00:08:22,960 --> 00:08:26,350
what it's going to do is create this file code in main

38033
00:08:26,740 --> 00:08:31,060
which is a Python file and it's going to do that inside the Test folder.

38034
00:08:31,330 --> 00:08:34,150
So let's hit enter and there you see it.

38035
00:08:34,210 --> 00:08:39,210
There's our Python file created without any clicking or dragging completely done

38036
00:08:39,490 --> 00:08:44,440
with our command line. So we've seen how we can create folders,

38037
00:08:44,470 --> 00:08:47,200
how we can create files. And by the way,

38038
00:08:47,200 --> 00:08:49,780
if you want to create a different type of file that you just change the

38039
00:08:49,780 --> 00:08:51,760
extension. So it could be .text,

38040
00:08:51,760 --> 00:08:56,760
or it could be .docx or whatever file format you want to create. Now,

38041
00:08:56,910 --> 00:08:59,970
what if we wanted delete our file? Well,

38042
00:09:00,060 --> 00:09:04,470
all we have to do is make sure we're in the correct directory to be able to

38043
00:09:04,470 --> 00:09:06,570
access that file. So when we hit ls,

38044
00:09:06,600 --> 00:09:08,760
we should be able to see the file we want to delete.

38045
00:09:09,150 --> 00:09:12,960
And then all we have to do is type rm which stands for remove

38046
00:09:13,410 --> 00:09:17,100
and then we could put our main.py. So there it is, it's gone.

38047
00:09:17,630 --> 00:09:18,463
Okay.

38048
00:09:22,190 --> 00:09:26,780
Now, what if I want to delete the Test folder? Firstly,

38049
00:09:26,840 --> 00:09:31,580
I have to navigate one step up. Instead of being inside the Test folder,

38050
00:09:31,880 --> 00:09:35,330
I can't delete the Test folder while I'm inside the Test folder.

38051
00:09:35,690 --> 00:09:38,840
I have to go one step up, which is the desktop folder.

38052
00:09:39,740 --> 00:09:42,920
Now of course I could say cd into the full path

38053
00:09:42,920 --> 00:09:47,840
which is /Users/angela/Desktop.

38054
00:09:48,140 --> 00:09:51,620
Now this would work, but this is really wordy.

38055
00:09:52,130 --> 00:09:54,470
A really simple shortcut for navigating

38056
00:09:54,470 --> 00:09:59,330
just one step up is writing cd and then two dots.

38057
00:09:59,540 --> 00:10:04,100
This is going to take us to the parent folder, which is now Desktop.

38058
00:10:06,740 --> 00:10:07,573
Right.

38059
00:10:11,330 --> 00:10:15,800
From here I'm going to delete this folder. Now to delete a folder

38060
00:10:15,800 --> 00:10:19,070
we can't just put rm. We also have to put a flag.

38061
00:10:19,190 --> 00:10:24,190
So a - and then rf. So this is going to recursively, forcibly, remove this

38062
00:10:27,710 --> 00:10:31,550
folder that we're going to add here, which is the Test folder.

38063
00:10:32,060 --> 00:10:37,060
Now the thing you have to be really careful about rm -rf is it does things

38064
00:10:37,880 --> 00:10:41,660
recursively. So if there were lots of folders inside this Test folder,

38065
00:10:41,990 --> 00:10:44,180
then it's going to delete everything in there.

38066
00:10:44,750 --> 00:10:49,750
And if, God forbid, you actually have this and you put it onto your whole computer,

38067
00:10:50,840 --> 00:10:53,210
well then that's going to be a real disaster.

38068
00:10:53,690 --> 00:10:57,890
Because the thing you have to know about the terminal is that it's a very

38069
00:10:57,890 --> 00:11:02,890
powerful. And what did Spider-Man's uncle say? With great power comes great

38070
00:11:02,990 --> 00:11:03,980
responsibility.

38071
00:11:05,390 --> 00:11:09,080
There's some pretty funny stories about people who accidentally deleted

38072
00:11:09,110 --> 00:11:12,890
everything on their computer just by messing with rm -rf.

38073
00:11:13,340 --> 00:11:18,340
So be really careful that you are in the correct location to delete the folder

38074
00:11:19,520 --> 00:11:22,190
and to double check that it's the right folder.

38075
00:11:23,060 --> 00:11:24,980
Because when I hit enter,

38076
00:11:25,040 --> 00:11:28,430
you can see it's not going to ask me for a confirmation

38077
00:11:29,030 --> 00:11:34,030
and it's also not going to put that folder or the containing files into the bin.

38078
00:11:34,940 --> 00:11:38,120
So be really careful when you're using the terminal.

38079
00:11:40,790 --> 00:11:41,623
There you have it.

38080
00:11:41,930 --> 00:11:46,930
There's an introduction to the command line using zsh on a Mac and using the

38081
00:11:49,970 --> 00:11:53,380
command prompt on Windows. Now,

38082
00:11:53,410 --> 00:11:57,460
when you open up PyCharm and you go to this emulator terminal,

38083
00:11:57,460 --> 00:12:01,330
so it's a sort of application within an application,

38084
00:12:01,630 --> 00:12:04,540
you can see that it looks pretty much the same.

38085
00:12:04,870 --> 00:12:09,370
Basically, all that PyCharm's done is just bundled the command

38086
00:12:09,370 --> 00:12:14,370
prompt into the PyCharm on windows and the zsh terminal into the PyCharm 

38087
00:12:16,150 --> 00:12:20,710
on Mac. So you can do everything that you can do in the terminal

38088
00:12:21,310 --> 00:12:22,870
inside PyCharm as well

38089
00:12:23,260 --> 00:12:28,260
which makes it really easy to pip install modules or to run our Flask server.

38090
00:12:30,040 --> 00:12:30,430
Now,

38091
00:12:30,430 --> 00:12:34,630
if you want to know about other things that you could do in the Windows command

38092
00:12:34,630 --> 00:12:38,710
prompt or the Mac terminal, you can simply just search for command prompt

38093
00:12:38,710 --> 00:12:41,200
cheatsheet or terminal cheatsheet.

38094
00:12:42,700 --> 00:12:46,000
And what it will take you to are lots of addresses

38095
00:12:46,000 --> 00:12:50,980
which contain basically a lot more things that you could do with your command

38096
00:12:50,980 --> 00:12:53,470
line. But the ones that we've talked about today

38097
00:12:53,500 --> 00:12:57,430
are some of the most common ones and 99% of the time,

38098
00:12:57,460 --> 00:13:00,100
those are going to be the commands that you're going to be sticking to.

38099
00:13:00,610 --> 00:13:04,120
So write them down if you need to review them regularly.

38100
00:13:04,390 --> 00:13:07,150
And if you just use them on a regular basis,

38101
00:13:07,450 --> 00:13:09,280
you won't have any trouble remembering them.


38102
00:00:00,330 --> 00:00:03,630
Now that we've understood a little bit more about the terminal commands,

38103
00:00:03,960 --> 00:00:08,960
let's come back to our Flask code and understand what the code is doing in a

38104
00:00:09,300 --> 00:00:14,220
little bit more detail. For example, what is this name?

38105
00:00:14,460 --> 00:00:18,870
Because we're creating this app from this Flask class

38106
00:00:19,230 --> 00:00:23,310
and in order to initialize a new Flask application,

38107
00:00:23,700 --> 00:00:27,600
there is only one required input,

38108
00:00:28,020 --> 00:00:30,210
and that is the import_name.

38109
00:00:31,380 --> 00:00:33,390
Let's go ahead and print it out.

38110
00:00:33,720 --> 00:00:38,720
So if we print this __name__ and comment out the rest of our

38111
00:00:39,600 --> 00:00:42,480
code and hit run,

38112
00:00:43,800 --> 00:00:48,000
then you can see that it prints out __main_

38113
00:00:48,030 --> 00:00:48,863
_.

38114
00:00:49,320 --> 00:00:54,320
This name is one of the special attributes that's built into Python.

38115
00:00:56,550 --> 00:00:57,990
At any given point,

38116
00:00:58,170 --> 00:01:03,170
you could tap into the name to find out what is the current class, function,

38117
00:01:06,030 --> 00:01:08,460
method, or descriptor's name.

38118
00:01:09,210 --> 00:01:12,360
And when we get main, what it's telling us is

38119
00:01:12,500 --> 00:01:17,000
basically we're executing the code in a particular module.

38120
00:01:17,510 --> 00:01:22,510
So that means it's run as a script or from an interactive prompt,

38121
00:01:23,930 --> 00:01:27,330
but it's not run from an imported module.

38122
00:01:28,190 --> 00:01:31,790
It gives us this code here, if the name is equal to main,

38123
00:01:32,090 --> 00:01:37,090
then execute something only if it's run as a script.

38124
00:01:38,240 --> 00:01:40,730
This also takes us to

38125
00:01:40,730 --> 00:01:45,440
one of the common ways that you'll see people run Flask apps.

38126
00:01:45,830 --> 00:01:50,830
You'll see if __name__ is double equal to _

38127
00:01:52,460 --> 00:01:55,250
_main__ as a string,

38128
00:01:55,250 --> 00:01:59,570
so exactly what was printed just now when we printed out this name,

38129
00:02:00,050 --> 00:02:01,400
well, if this is the case,

38130
00:02:01,400 --> 00:02:05,810
then that means we're running the code from within this current file.

38131
00:02:05,990 --> 00:02:09,199
We're running hello.py. So in that case,

38132
00:02:09,229 --> 00:02:13,100
we're going to tap into our app and we're going to call the run method.

38133
00:02:13,700 --> 00:02:15,260
Now this app.run

38134
00:02:15,260 --> 00:02:20,060
basically does exactly the same thing as when we went into the terminal and

38135
00:02:20,060 --> 00:02:25,040
we said flask run. But notice when we say flask run,

38136
00:02:25,100 --> 00:02:28,580
firstly, we have to provide the FLASK_APP environment variable

38137
00:02:29,060 --> 00:02:33,260
and secondly, we have to stop the code using control + c

38138
00:02:33,680 --> 00:02:36,680
instead of using our normal run and stop.

38139
00:02:37,010 --> 00:02:41,480
But if we use app.run, we can now use our standard controls.

38140
00:02:41,540 --> 00:02:45,050
So I can simply hit run to run this hello.py,

38141
00:02:46,070 --> 00:02:51,070
and it will start serving up our Flask app at this address just as it did

38142
00:02:51,980 --> 00:02:56,750
before, when we did flask run. And instead of using control + c to quit,

38143
00:02:56,870 --> 00:03:01,870
we can simply use the stop to stop our Flask application,

38144
00:03:02,500 --> 00:03:04,240
making it a lot easier.

38145
00:03:05,230 --> 00:03:10,180
Basically by providing the name to Flask, Flask 

38146
00:03:10,180 --> 00:03:15,180
will check that this is the current file where the app code is located.

38147
00:03:16,870 --> 00:03:21,760
And we're not in fact using an imported module. For example,

38148
00:03:21,760 --> 00:03:26,760
if I was to import the random module and I was to print the random.name,

38149
00:03:32,080 --> 00:03:36,880
then you can see the first thing that gets printed is the name of that module.

38150
00:03:37,240 --> 00:03:39,880
But the name that's printed from hello.py

38151
00:03:39,900 --> 00:03:44,470
which is the file that's being run is simply __main__.

38152
00:03:44,740 --> 00:03:49,030
So this basically denotes the file that is currently being run

38153
00:03:49,480 --> 00:03:52,600
and you say, Run 'hello' Well then inside hello

38154
00:03:52,660 --> 00:03:54,760
name is going to be equal to main.

38155
00:03:58,170 --> 00:03:58,260
Right.


38156
00:00:00,510 --> 00:00:05,510
The next part of the syntax that might be unfamiliar is this @ sign and

38157
00:00:07,050 --> 00:00:11,460
something that comes after the @ sign. Now we sort of know what it does.

38158
00:00:11,460 --> 00:00:14,790
It's basically saying when the user hits up this path

38159
00:00:14,820 --> 00:00:19,170
which is what's called the home route, basically when you go to a website,

38160
00:00:19,200 --> 00:00:21,540
for example, www.google.com

38161
00:00:21,870 --> 00:00:26,610
and you go to the first forward slash well, that is going to be the home.

38162
00:00:27,180 --> 00:00:31,080
And it knows that when you go there you want to see the home page.

38163
00:00:31,530 --> 00:00:33,480
So that's effectively what we're saying here.

38164
00:00:33,690 --> 00:00:38,670
When the user navigates to our URL with just a forward slash they want to see

38165
00:00:38,670 --> 00:00:41,580
the homepage and so we're going to show them hello world.

38166
00:00:42,210 --> 00:00:46,320
But what is this syntax exactly? Well,

38167
00:00:46,320 --> 00:00:49,230
this is code a Python decorator

38168
00:00:49,800 --> 00:00:54,210
and this is something that you'll see in more advanced Python projects.

38169
00:00:54,540 --> 00:00:57,420
So what exactly is a decorator? Well,

38170
00:00:57,450 --> 00:01:01,320
let's imagine that you have a bunch of functions in your class or in your

38171
00:01:01,320 --> 00:01:02,153
module

38172
00:01:02,460 --> 00:01:07,460
and you want to add some functionality to each of these functions. Well then you

38173
00:01:09,780 --> 00:01:12,990
might use a decorator function to do that.

38174
00:01:14,070 --> 00:01:18,570
Essentially you can think of a decorator function as a function

38175
00:01:18,570 --> 00:01:23,570
that's going to give additional functionality to an existing function. In order

38176
00:01:24,360 --> 00:01:25,920
to really understand this,

38177
00:01:25,980 --> 00:01:29,100
we have to understand a couple of other concepts as well.

38178
00:01:29,820 --> 00:01:32,430
So I'm going to do a couple of demos in this Repl.it

38179
00:01:32,850 --> 00:01:36,810
and if you head to this URL or find it in the course resources,

38180
00:01:37,050 --> 00:01:40,140
you'll be able to see all the code that I've written in this file.

38181
00:01:41,160 --> 00:01:42,600
So a long time ago,

38182
00:01:42,630 --> 00:01:47,630
we learned about Python functions and we know that a function allows us to

38183
00:01:47,820 --> 00:01:50,910
have specific packages of functionality,

38184
00:01:51,420 --> 00:01:56,250
allows us to add inputs, to increase the reusability of the function,

38185
00:01:56,700 --> 00:02:01,380
and also allows us to get outputs from the function which we can pass into

38186
00:02:01,380 --> 00:02:05,610
another function or do something with it. As an example,

38187
00:02:05,610 --> 00:02:09,570
we've got four very simple functions, add, subtract, multiply,

38188
00:02:09,600 --> 00:02:13,890
and divide that uses all three components of a function.

38189
00:02:15,270 --> 00:02:19,350
Now, what if we wanted to get a little bit fancier? Well,

38190
00:02:19,650 --> 00:02:24,650
one of the things about Python functions is that they are known as first-class

38191
00:02:25,680 --> 00:02:26,513
objects,

38192
00:02:26,550 --> 00:02:31,550
which basically means that you can pass a function around as an argument,

38193
00:02:32,640 --> 00:02:37,440
just like what you could do with an integer, a string or a float, it's treated

38194
00:02:37,710 --> 00:02:38,670
identically.

38195
00:02:39,240 --> 00:02:44,240
That means we can take these functions and we can build another function that

38196
00:02:44,910 --> 00:02:49,290
uses these functions. Let's say I create a calculate function

38197
00:02:49,410 --> 00:02:51,870
which takes a calc_function

38198
00:02:52,320 --> 00:02:54,900
and then the n1 and n2.

38199
00:02:55,590 --> 00:02:57,630
Inside this calculate function,

38200
00:02:57,960 --> 00:03:02,860
I'm going to call the function that was passed in and give it the values

38201
00:03:02,950 --> 00:03:06,670
n1 and n2 that was also passed in.

38202
00:03:07,330 --> 00:03:10,120
So now when I call the calculate function,

38203
00:03:10,150 --> 00:03:15,010
I'm going to pass in the name of one of these functions and then some numbers.

38204
00:03:15,370 --> 00:03:20,140
Those numbers are gonna become the input for this specified function

38205
00:03:20,500 --> 00:03:24,760
and then we're going to return the result of that calculation.

38206
00:03:25,420 --> 00:03:26,980
So now lower down,

38207
00:03:27,010 --> 00:03:32,010
I can call my calculate function, pass in the name of a function

38208
00:03:32,620 --> 00:03:37,300
so for example our multiply function, and then pass in some numbers,

38209
00:03:37,360 --> 00:03:42,220
for example, two and three. Now let the output that's returned

38210
00:03:42,490 --> 00:03:43,690
be our results

38211
00:03:43,840 --> 00:03:48,840
and let's go ahead and print this result. And you can see we get six.

38212
00:03:50,260 --> 00:03:54,670
So basically it has now multiplied two by three. Now,

38213
00:03:54,700 --> 00:03:58,210
if I change this to one of the other functions, add,

38214
00:03:58,750 --> 00:04:03,520
and I run this again, you can see instead of six, I'm now getting five.

38215
00:04:04,240 --> 00:04:09,240
The ability for us to treat functions as first-class objects basically means

38216
00:04:10,120 --> 00:04:14,080
that we can pass them around as if they were just any other argument

38217
00:04:14,380 --> 00:04:17,769
like a number or a string or a floating point number.

38218
00:04:18,160 --> 00:04:23,160
And then later we can activate them by adding the brackets around them and then

38219
00:04:23,470 --> 00:04:27,790
any necessary inputs. Now, the next concept

38220
00:04:27,820 --> 00:04:29,890
which you might've come across

38221
00:04:29,980 --> 00:04:34,930
but we haven't really used it a lot is the concept of nested functions.

38222
00:04:35,740 --> 00:04:39,520
Functions can also be nested inside other functions.

38223
00:04:40,030 --> 00:04:43,750
For example, if I create a function called outer_function

38224
00:04:45,190 --> 00:04:49,570
and this function is just going to print and say,

38225
00:04:49,600 --> 00:04:54,130
I'm outer. Now inside this outer_function,

38226
00:04:54,460 --> 00:04:57,970
I could create another function. So notice the indentation here

38227
00:04:58,270 --> 00:05:03,270
means that this function is now created inside this function and I'll call it

38228
00:05:03,430 --> 00:05:06,400
the nested_function.

38229
00:05:08,020 --> 00:05:13,020
So this function is simply going to print I'm

38230
00:05:15,250 --> 00:05:16,083
inner.

38231
00:05:16,780 --> 00:05:21,070
And now we have the problem of trying to call this function. Now,

38232
00:05:21,100 --> 00:05:24,850
because this function was declared inside this function,

38233
00:05:25,240 --> 00:05:30,240
its scope means that it's only accessible inside the confines of this function.

38234
00:05:31,630 --> 00:05:34,750
So if we were to go outside of the function, so by

38235
00:05:34,750 --> 00:05:39,400
indenting back to the beginning and we try to call this nested function,

38236
00:05:39,730 --> 00:05:42,490
then it's actually not going to work.

38237
00:05:42,910 --> 00:05:47,410
We're going to get a name error. It's not defined. However,

38238
00:05:47,410 --> 00:05:52,410
if we call this function inside this outer_function,

38239
00:05:53,680 --> 00:05:57,070
then it will now no longer generate an error.

38240
00:05:57,920 --> 00:06:02,920
So let's go ahead and trigger the outer_function by calling it in our main.

38241
00:06:04,670 --> 00:06:09,320
py. And when I run this, you can see it says I'm outer

38242
00:06:09,770 --> 00:06:11,270
and then it says I'm inner.

38243
00:06:12,170 --> 00:06:17,170
So this first gets executed and then this. And this I'm inner is being

38244
00:06:17,300 --> 00:06:21,650
printed when this line is being evaluated. Now,

38245
00:06:22,250 --> 00:06:27,250
one of the other things you could do is you can actually return a function from

38246
00:06:28,280 --> 00:06:29,150
another function.

38247
00:06:29,380 --> 00:06:30,213
Right.

38248
00:06:32,050 --> 00:06:35,920
Functions can actually be returned from other functions.

38249
00:06:36,370 --> 00:06:41,370
So if I make a copy of this previous function right here and comment out this

38250
00:06:42,430 --> 00:06:45,850
other function and all the steps before,

38251
00:06:46,330 --> 00:06:47,163
...

38252
00:06:54,850 --> 00:06:57,430
and we only have this bit of active code,

38253
00:06:57,850 --> 00:07:01,720
then you can see that instead of calling this nested_function here,

38254
00:07:02,170 --> 00:07:04,540
I could also return it as the output.

38255
00:07:05,050 --> 00:07:09,490
But the important part here is I'm going to get rid of the parentheses

38256
00:07:09,610 --> 00:07:13,720
which means I'm no longer activating that function right here.

38257
00:07:14,560 --> 00:07:17,440
So now when I call this outer_function,

38258
00:07:17,830 --> 00:07:22,830
the output that this line is going to evaluate to is going to become the nested_

38259
00:07:23,770 --> 00:07:28,390
function. So you could almost store it inside a variable.

38260
00:07:28,480 --> 00:07:31,570
So let's say I create a variable called inner_function

38261
00:07:31,900 --> 00:07:34,840
which is equal to the output of the outer_function

38262
00:07:34,870 --> 00:07:39,100
which is basically this nested_function that's being returned. Well

38263
00:07:39,100 --> 00:07:41,890
then, not only can I trigger the outer_function

38264
00:07:42,100 --> 00:07:44,950
which is just going to give me I'm outer,

38265
00:07:45,490 --> 00:07:50,490
now I can also trigger the inner_function separately by calling it

38266
00:07:51,100 --> 00:07:54,610
and then adding the activator which is the parentheses.

38267
00:07:55,900 --> 00:07:59,470
So now it says I'm outer after it evaluates this line,

38268
00:07:59,830 --> 00:08:03,070
I'm inner after it evaluates this line. Now,

38269
00:08:03,100 --> 00:08:04,900
if this is confusing to you,

38270
00:08:04,960 --> 00:08:09,400
I recommend heading over to the course resources where I've got a link to this

38271
00:08:09,490 --> 00:08:14,350
Python Tutor where I've entered all the code that we've seen just now

38272
00:08:14,830 --> 00:08:17,800
and we can execute this code line by line.

38273
00:08:18,340 --> 00:08:22,390
So you can see that the first thing that happens is it looks at this outer_

38274
00:08:22,390 --> 00:08:26,740
function and it creates a reference to that function. Now

38275
00:08:26,740 --> 00:08:31,740
next, it's on this line where our outer_function is actually being executed

38276
00:08:32,650 --> 00:08:34,780
because it has the parentheses at the end.

38277
00:08:35,169 --> 00:08:39,370
So now it's actually going to go inside this outer function and go through it

38278
00:08:39,370 --> 00:08:44,370
line by line where it prints I'm outer and then sets up a reference to this second

38279
00:08:45,610 --> 00:08:48,400
function, which is the nested_function.

38280
00:08:49,270 --> 00:08:52,840
The nested_function can now be called by its name

38281
00:08:52,840 --> 00:08:57,180
which is nested_function. But the very end of the outer_function,

38282
00:08:57,300 --> 00:09:01,830
that function is going to be the return value. So it's going to be outputted.

38283
00:09:02,640 --> 00:09:03,390
Finally,

38284
00:09:03,390 --> 00:09:08,390
we get to the end of this line nine and we set up a reference from this variable

38285
00:09:09,570 --> 00:09:14,400
called inner_function to this nested_function. And finally,

38286
00:09:14,400 --> 00:09:18,120
when we get to the line 10 we trigger that function.

38287
00:09:18,210 --> 00:09:22,560
So here is our inner_function which points to this nested function

38288
00:09:22,860 --> 00:09:24,930
and so when we trigger this inner_function,

38289
00:09:25,230 --> 00:09:28,440
it's the same as triggering the nested_function.

38290
00:09:28,800 --> 00:09:32,520
And that is when we end up going into this function

38291
00:09:32,820 --> 00:09:35,190
and printing out what it says inside.

38292
00:09:35,820 --> 00:09:40,320
Have a play around with that to fully get to grips with all the things that you

38293
00:09:40,320 --> 00:09:41,760
can do with a function.

38294
00:09:42,930 --> 00:09:47,490
And once you're happy with all of this and you've reviewed it and you understand

38295
00:09:47,490 --> 00:09:48,630
everything that's going on,

38296
00:09:48,960 --> 00:09:52,800
then you've got the foundations to head over to the next lesson where we're

38297
00:09:52,800 --> 00:09:55,620
going to talk about Python decorators.


38298
00:00:00,180 --> 00:00:01,410
In the last lesson,

38299
00:00:01,470 --> 00:00:06,120
we had a primer on functions so that we can understand the next step

38300
00:00:06,150 --> 00:00:07,920
which is the Python decorator.

38301
00:00:08,430 --> 00:00:11,700
So we've seen that functions can have functionality, inputs,

38302
00:00:11,700 --> 00:00:16,700
and outputs, functions are first-class objects and can be passed around as arguments,

38303
00:00:17,280 --> 00:00:19,650
functions can be nested in other functions,

38304
00:00:19,920 --> 00:00:24,900
and finally, functions can be returned as the output from another function

38305
00:00:25,200 --> 00:00:29,700
without needing to trigger it. With these four things in mind,

38306
00:00:29,790 --> 00:00:33,180
we're finally ready to tackle the Python decorator.

38307
00:00:34,200 --> 00:00:34,950
First of all,

38308
00:00:34,950 --> 00:00:39,950
I'm actually going to create a Python decorator for you so that we can talk

38309
00:00:40,140 --> 00:00:41,460
about how it works.

38310
00:00:42,060 --> 00:00:45,300
Here's what a Python decorator function looks like.

38311
00:00:45,780 --> 00:00:49,590
We started off by creating just a normal function.

38312
00:00:50,910 --> 00:00:53,580
Let's say I call it my decorator_function.

38313
00:00:56,190 --> 00:01:00,000
This function is going to take another function as an input.

38314
00:01:00,960 --> 00:01:05,760
Now, inside the decorator_functionn, I'm going to nest a wrapper_function.

38315
00:01:07,530 --> 00:01:12,530
And this wrapper_function is then going to trigger the actual function that was

38316
00:01:13,770 --> 00:01:16,440
passed in to the decorator function.

38317
00:01:17,760 --> 00:01:22,020
And at the end of calling all the lines in my decorator_function,

38318
00:01:22,290 --> 00:01:26,490
I'm going to return my wrapper_function. But remember

38319
00:01:26,520 --> 00:01:30,090
without the parentheses. Now,

38320
00:01:30,120 --> 00:01:33,750
basically what we've done is we've created a decorator_function

38321
00:01:33,840 --> 00:01:38,840
which can do some stuff and it could control the calling

38322
00:01:39,270 --> 00:01:40,860
of the function that was passed in.

38323
00:01:41,550 --> 00:01:46,550
Remember that a decorator_function is just a function that wraps another

38324
00:01:46,890 --> 00:01:51,390
function and gives that function some additional functionality.

38325
00:01:51,810 --> 00:01:56,550
That's quite a mouthful, but let's take a look at an example.

38326
00:01:57,390 --> 00:02:00,630
Let's say that I wanted to create a simple function

38327
00:02:00,720 --> 00:02:02,880
which I'll call say_hello.

38328
00:02:03,510 --> 00:02:06,360
Now this function is going to be the simplest form of function.

38329
00:02:06,390 --> 00:02:09,000
It has no inputs and it has no outputs

38330
00:02:09,270 --> 00:02:13,620
and all it does is just going to print hello. Now,

38331
00:02:13,620 --> 00:02:17,280
what if I don't want to run this immediately

38332
00:02:17,310 --> 00:02:21,630
the moment when I hit run, what if I wanted to add a delay to this function?

38333
00:02:22,170 --> 00:02:25,980
Well, one way of doing that would be importing the time module

38334
00:02:26,460 --> 00:02:28,680
and then before we print hello,

38335
00:02:29,010 --> 00:02:32,520
we can go ahead and run time.sleep

38336
00:02:32,850 --> 00:02:36,660
and we can sleep for a prespecified number of seconds.

38337
00:02:37,290 --> 00:02:40,950
So now when I call this method, say_hello,

38338
00:02:41,370 --> 00:02:45,420
and when I run it, you'll see that immediately nothing happens.

38339
00:02:45,720 --> 00:02:49,440
And then after a two second delay, you can see the print

38340
00:02:49,470 --> 00:02:52,290
hello actually gets triggered. Now,

38341
00:02:52,290 --> 00:02:55,320
what if I wanted to create a whole bunch of functions

38342
00:02:55,380 --> 00:02:58,080
like say_bye and say_greeting.

38343
00:02:59,830 --> 00:03:04,510
And I wanted to add a delay onto each of these. Well,

38344
00:03:04,510 --> 00:03:09,130
then I would have to copy and paste this code into all three places.

38345
00:03:09,790 --> 00:03:12,010
Now, this is a very simple example,

38346
00:03:12,280 --> 00:03:17,280
but frequently we'll want to add some additional piece of functionality to a

38347
00:03:17,380 --> 00:03:22,270
number of our functions. So this is where the decorator comes in handy.

38348
00:03:23,140 --> 00:03:27,850
What we could do is before we trigger the function that's passed in to

38349
00:03:27,850 --> 00:03:31,420
the decorator_function, we can add the delay.

38350
00:03:31,960 --> 00:03:36,960
So now whenever we decorate a function with this particular decorator_function,

38351
00:03:38,590 --> 00:03:43,030
then it's going to delay for two seconds before it runs the function.

38352
00:03:43,600 --> 00:03:48,010
So let's give this decorator function a little bit more of a descriptive name.

38353
00:03:48,220 --> 00:03:51,940
Let's call it a delay_decorator. Well,

38354
00:03:51,970 --> 00:03:56,970
now what we can do is we can simply use an @ sign

38355
00:03:58,660 --> 00:04:03,660
and we can call the delay_decorator in front of the methods

38356
00:04:05,320 --> 00:04:09,730
which we want to delay. So we can add it to all three of them,

38357
00:04:09,760 --> 00:04:12,040
or we can only add it to some of them.

38358
00:04:12,400 --> 00:04:17,050
But now when I actually run my function, say_hello

38359
00:04:17,050 --> 00:04:20,649
for example, you can see that this one

38360
00:04:20,649 --> 00:04:22,630
because it's got the delay decorator

38361
00:04:22,900 --> 00:04:26,260
it's going to wait for two seconds before it prints hello.

38362
00:04:26,650 --> 00:04:28,930
But if I call say_greeting

38363
00:04:29,050 --> 00:04:31,900
which is the one that doesn't have the decorator above it,

38364
00:04:32,260 --> 00:04:34,660
then you can see it gets triggered immediately.

38365
00:04:35,350 --> 00:04:40,350
So this is a really nice way of adding something that you could do before you

38366
00:04:40,600 --> 00:04:41,560
run the function,

38367
00:04:42,360 --> 00:04:43,193
Right?

38368
00:04:45,630 --> 00:04:50,630
or adding some functionality which you can do after the function. Or

38369
00:04:51,510 --> 00:04:56,340
alternatively, you can modify the function so maybe you wanna run it twice.

38370
00:04:56,910 --> 00:04:59,070
So now when I say hello,

38371
00:05:01,950 --> 00:05:04,530
it's going to not only delay by two seconds,

38372
00:05:04,800 --> 00:05:06,750
but it's also going to run it twice.

38373
00:05:09,270 --> 00:05:14,220
This syntax is what we saw when we were creating our Flask

38374
00:05:14,250 --> 00:05:19,250
app. It's got the @ sign and it basically decorates the function below with a

38375
00:05:20,850 --> 00:05:22,050
decorator function.

38376
00:05:22,080 --> 00:05:27,080
So putting this function through a machine that could modify the function or add

38377
00:05:28,200 --> 00:05:32,400
some functionality before or after. Coming back to our definition,

38378
00:05:32,820 --> 00:05:37,820
a decorator function is simply a function which wraps another function and gives

38379
00:05:40,500 --> 00:05:44,640
it some additional functionality or modifies the functionality.

38380
00:05:46,500 --> 00:05:51,390
Now, coming back to this syntax, this @ sign, it's

38381
00:05:51,390 --> 00:05:54,150
what's known as syntactic sugar.

38382
00:05:54,930 --> 00:05:59,930
It's some syntax that you can write to make it easier to write an alternative

38383
00:06:01,430 --> 00:06:02,263
line of code.

38384
00:06:02,810 --> 00:06:07,760
So let's say we wanted to add the decorator to this say_greeting. Well,

38385
00:06:07,910 --> 00:06:11,450
if instead of using this syntactic sugar with the @ sign

38386
00:06:11,450 --> 00:06:12,920
and then the name of the function,

38387
00:06:13,280 --> 00:06:18,280
we could also just call the name of the decorator and then we could pass in the

38388
00:06:20,570 --> 00:06:23,510
name of our function, say_greeting,

38389
00:06:24,620 --> 00:06:29,620
and then we would end up with the decorated function as the output from this

38390
00:06:31,310 --> 00:06:32,143
method.

38391
00:06:32,660 --> 00:06:37,660
And we can now call the decorated function with the parentheses.

38392
00:06:38,570 --> 00:06:43,310
So now we've triggered this say_greeting function

38393
00:06:43,400 --> 00:06:45,860
and we've passed it through the delay decorator.

38394
00:06:46,520 --> 00:06:51,520
But it's much easier to see at a glance what's going on by using this @ sign

38395
00:06:51,980 --> 00:06:56,270
because you can see now you can just trigger this method by its own name

38396
00:06:56,630 --> 00:07:00,020
and because the @delay_decorator is on top of it,

38397
00:07:00,260 --> 00:07:02,540
then it's going to go through that filter.

38398
00:07:03,950 --> 00:07:07,250
I recommend spending a few minutes looking at this code

38399
00:07:07,520 --> 00:07:11,180
which you can access at this URL which is in the course resources,

38400
00:07:11,660 --> 00:07:16,370
and then trying to recreate this functionality from scratch based on your

38401
00:07:16,370 --> 00:07:20,360
understanding of what we just talked about. And then once you're done,

38402
00:07:20,420 --> 00:07:23,510
when we head back to our Flask application

38403
00:07:23,870 --> 00:07:27,890
you can now see that pretty much all of the code is easily understood.

38404
00:07:28,340 --> 00:07:31,580
We know what this __name__ refers to,,

38405
00:07:31,910 --> 00:07:34,160
we know that this is a decorator

38406
00:07:34,400 --> 00:07:38,270
which is going to make sure that we only trigger this function

38407
00:07:38,570 --> 00:07:41,840
if the user's trying to access the URL

38408
00:07:42,020 --> 00:07:45,010
that is the homepage/.

38409
00:07:46,160 --> 00:07:50,540
If we wanted to create another function, let's call it say_bye.

38410
00:07:53,480 --> 00:07:56,840
This function could also get a decorator

38411
00:07:57,350 --> 00:08:01,970
and this decorator will check to see well, if somebody goes to the URL 

38412
00:08:01,970 --> 00:08:03,260
/bye, well

38413
00:08:03,260 --> 00:08:07,160
then we're going to be triggering this method. Effectively

38414
00:08:07,610 --> 00:08:12,610
the Flask framework is the one that determines which of these methods to call

38415
00:08:14,180 --> 00:08:19,180
and these methods are only called when the decorator says that it's appropriate to do

38416
00:08:19,820 --> 00:08:24,080
so. Now, if I go ahead and run this code once more,

38417
00:08:26,390 --> 00:08:29,390
and we go to the URL that is our server,

38418
00:08:29,720 --> 00:08:33,650
so this we know is the home route or the homepage,

38419
00:08:33,980 --> 00:08:36,559
but if we go to /bye

38420
00:08:36,919 --> 00:08:41,919
then we go to the bye route and this method gets rendered.

38421
00:08:43,730 --> 00:08:47,330
Now in order to make sure that you get a chance writing decorator functions

38422
00:08:47,330 --> 00:08:50,090
yourself, if you head over to the next lesson,

38423
00:08:50,120 --> 00:08:53,720
I've got a coding exercise for you to challenge you

38424
00:08:53,750 --> 00:08:55,760
to create your own decorator functions.

38425
00:08:56,270 --> 00:08:59,540
And it's going to be a really useful decorator function because it's going to

38426
00:08:59,540 --> 00:09:03,290
measure the amount of time that it takes a particular function to run.

38427
00:09:03,920 --> 00:09:06,830
So for all of that and more, I'll see you on the next lesson.



38428
00:00:00,240 --> 00:00:02,100
Hey guys, welcome today.

38429
00:00:02,130 --> 00:00:05,700
55 of a hundred days of code today.

38430
00:00:05,760 --> 00:00:10,020
We've got yet another jam packed day for you because we're going to be diving

38431
00:00:10,020 --> 00:00:13,820
right deeper into web development with flask. And along the way,

38432
00:00:13,850 --> 00:00:16,460
we're going to be learning some new concepts as well,

38433
00:00:17,000 --> 00:00:22,000
including how to render HTML on your website that you serve up using flask.

38434
00:00:24,020 --> 00:00:25,130
And in addition,

38435
00:00:25,130 --> 00:00:30,130
how to get hold of and pass the URL that the user typed in finally,

38436
00:00:31,010 --> 00:00:33,980
right? It also going to be looking into advanced decorators,

38437
00:00:34,010 --> 00:00:39,010
so decorators where we can pass in inputs as positional and keyword arguments.

38438
00:00:39,770 --> 00:00:42,080
And we're going to be doing some exercises around that.

38439
00:00:42,680 --> 00:00:47,540
But what all of this knowledge is going to culminate into is a guest,

38440
00:00:47,540 --> 00:00:51,650
the number of web, right? All right. When we go to the, a home route,

38441
00:00:51,650 --> 00:00:53,990
so just a single slash afterwards,

38442
00:00:54,260 --> 00:00:57,080
it asks us to guess a number between zero and nine.

38443
00:00:57,560 --> 00:01:02,420
And then if we type in eight guests into the path, let's say,

38444
00:01:02,420 --> 00:01:07,010
we decide to guess the number three, it tells us to low try again.

38445
00:01:07,460 --> 00:01:11,510
So this is HTML with styling with an H one,

38446
00:01:11,690 --> 00:01:14,690
as well as a gift being rendered. Now,

38447
00:01:14,720 --> 00:01:19,370
what if we try too high or, you know, a gift? And then finally,

38448
00:01:19,370 --> 00:01:22,070
if we land onto the correct number,

38449
00:01:22,520 --> 00:01:26,450
then we get a scene that tells us we found the correct number.

38450
00:01:27,170 --> 00:01:28,580
So that's the goal.

38451
00:01:28,730 --> 00:01:32,150
Once you already heard of it to the next lesson and let's get started.


38452
00:00:00,810 --> 00:00:04,110
Now, one of the first things I want to tackle is getting it out.

38453
00:00:04,160 --> 00:00:07,430
Hold on the user typed in too, the URL,

38454
00:00:07,700 --> 00:00:11,330
or rather known as parsing a URL in this case,

38455
00:00:11,360 --> 00:00:16,360
if the user typed in ww.mysite.com and then they had a forward slash with a

38456
00:00:18,050 --> 00:00:19,400
path, for example,

38457
00:00:19,400 --> 00:00:24,400
forward slash Angela or forward slash mail forward slash messages forward slash

38458
00:00:25,010 --> 00:00:29,900
pictures, then we want to be able to get hold of the information in that path,

38459
00:00:30,380 --> 00:00:34,190
because we might be able to do something different with it and render something

38460
00:00:34,190 --> 00:00:38,840
specific. Based on that URL previously,

38461
00:00:38,840 --> 00:00:43,840
we already saw that we could change the route of our website by serving up

38462
00:00:45,020 --> 00:00:48,290
different information. So if the user went to the home route,

38463
00:00:48,290 --> 00:00:51,440
which is just the URL and then a forward slash,

38464
00:00:51,680 --> 00:00:55,670
then we would show them something. But if they went to a different route,

38465
00:00:55,670 --> 00:00:59,480
for example, forward slash hello, then we could show them something else.

38466
00:01:00,710 --> 00:01:04,220
This is where we left off in our previous lessons.

38467
00:01:04,849 --> 00:01:09,850
If I wanted to create a BI function that just simply returns by

38468
00:01:13,400 --> 00:01:16,880
then I could set up the route decorator.

38469
00:01:16,880 --> 00:01:21,880
So this is the decorator function to look for when the user goes to a specific

38470
00:01:23,240 --> 00:01:26,120
path, for example, for what slash buy,

38471
00:01:27,140 --> 00:01:29,960
remember that this is a decorator function,

38472
00:01:29,960 --> 00:01:32,810
which lives inside a App Object,

38473
00:01:32,900 --> 00:01:37,190
which is declared in the flask class. Now,

38474
00:01:37,190 --> 00:01:39,680
if all of that sounded like it didn't make any sense,

38475
00:01:39,710 --> 00:01:44,270
then be sure to review the lessons that we did in previous days on classes and

38476
00:01:44,270 --> 00:01:45,020
methods.

38477
00:01:45,020 --> 00:01:48,950
I'm going to assume that all of this is pretty straightforward to you by now.

38478
00:01:49,910 --> 00:01:51,620
Now when we run this website,

38479
00:01:51,860 --> 00:01:56,860
we can now go to the URL and we can go to the homepage,

38480
00:01:57,350 --> 00:02:01,430
which says, hello world. And we could go to the buy route,

38481
00:02:01,490 --> 00:02:06,380
which just says, buy with an exclamation. Okay. What if we want,

38482
00:02:06,380 --> 00:02:09,860
I wanted to have a variable in that route.

38483
00:02:10,130 --> 00:02:15,020
What if we want to get hold of what the user types in him, for example,

38484
00:02:15,170 --> 00:02:20,170
let's say that instead of just catching by and forward slash what if we wanted

38485
00:02:21,170 --> 00:02:22,610
to greet our user,

38486
00:02:22,880 --> 00:02:27,880
let's say I create a greet function that takes their name and it returns

38487
00:02:28,730 --> 00:02:32,540
something like hello, but then it adds the name.

38488
00:02:33,800 --> 00:02:36,740
Let's turn this into an F string to make that work.

38489
00:02:37,430 --> 00:02:40,640
The question is how would we create the route?

38490
00:02:41,390 --> 00:02:46,160
Would it be forward slash name or would it be something else?

38491
00:02:46,670 --> 00:02:51,410
Well, this is what is described in this section of variable rules.

38492
00:02:51,950 --> 00:02:55,580
We can add variable sections to a URL.

38493
00:02:55,640 --> 00:03:00,640
So basically it's the equivalent of creating a variable that URL by marking it

38494
00:03:01,990 --> 00:03:03,400
with this syntax.

38495
00:03:03,760 --> 00:03:07,210
So putting some angle brackets around the variable name,

38496
00:03:08,020 --> 00:03:11,740
then all function is going to receive the variable name.

38497
00:03:11,890 --> 00:03:14,680
Once the decorator is done with it,

38498
00:03:15,250 --> 00:03:18,520
and then we can use it inside our function.

38499
00:03:19,240 --> 00:03:20,470
So for example,

38500
00:03:20,800 --> 00:03:25,030
let's say that we had a route which is forward slash username,

38501
00:03:25,390 --> 00:03:29,170
and then forward slash the actual name of the user,

38502
00:03:29,920 --> 00:03:32,620
which we'll put inside some angle brackets.

38503
00:03:32,980 --> 00:03:37,180
This means a flask is now going to turn, whatever it is that comes after.

38504
00:03:37,180 --> 00:03:41,500
Use a name forward slash into a variable for us to tap into.

38505
00:03:41,980 --> 00:03:44,440
And that variable has the name of name.

38506
00:03:44,980 --> 00:03:48,310
So now when our greet function goes through that decorator,

38507
00:03:48,550 --> 00:03:53,440
it's going to receive that value and we can use it in this greet function.

38508
00:03:54,130 --> 00:03:56,890
Now, if I go ahead and rerun my code

38509
00:03:59,350 --> 00:04:04,350
and go back to that URL and I go to user name forward slash,

38510
00:04:06,730 --> 00:04:09,550
and then I'll put in a user name, for example, Angela,

38511
00:04:10,060 --> 00:04:15,060
then that Angela is going to be taken and it's going to be rendered dynamically

38512
00:04:15,430 --> 00:04:19,089
into my webpage. So it doesn't matter what it is I put here.

38513
00:04:19,120 --> 00:04:24,120
It's always going to respond accordingly and treat this as if it was the value

38514
00:04:25,060 --> 00:04:25,960
to a variable.

38515
00:04:28,060 --> 00:04:32,650
Now notice how every single time we update our code. So for example,

38516
00:04:32,650 --> 00:04:37,420
if I didn't want this to be under the route forward slash username fall in slash

38517
00:04:37,450 --> 00:04:38,170
name,

38518
00:04:38,170 --> 00:04:43,170
instead if I just wanted to put it at forward slash name,

38519
00:04:43,810 --> 00:04:48,340
this is not going to work as it is. It's going to give us a four Oh four,

38520
00:04:48,340 --> 00:04:49,450
which is not found.

38521
00:04:50,020 --> 00:04:55,020
And the reason for this is because we have to stop and refresh all server for

38522
00:04:56,320 --> 00:04:58,570
these changes to be reflected.

38523
00:04:59,110 --> 00:05:02,590
So I have to stop and then rerun my server.

38524
00:05:02,680 --> 00:05:07,680
And now if I go to here and I start typing something like John,

38525
00:05:08,860 --> 00:05:11,920
then this update to the route is now live.

38526
00:05:12,550 --> 00:05:16,960
If we are testing and developing our website, this is really painful.

38527
00:05:16,960 --> 00:05:21,820
Having to stop and rerun the server every single time we make a change in our

38528
00:05:21,820 --> 00:05:22,900
server file.

38529
00:05:23,470 --> 00:05:27,340
So one of the things that you might notice here is that there is something

38530
00:05:27,340 --> 00:05:31,900
called a debug mode, and we can set this to be on or off.

38531
00:05:32,380 --> 00:05:37,380
Now there's a couple advantages of having the debug mode on and it's described

38532
00:05:38,020 --> 00:05:42,520
in the Quickstart. It allows us to activate the debugger,

38533
00:05:42,610 --> 00:05:46,000
which helps us narrow down on any issues.

38534
00:05:46,450 --> 00:05:51,450
It activates the automatic reloader so that whenever we edit off a file and hit

38535
00:05:52,090 --> 00:05:55,810
save, it's going to reload our server. And finally,

38536
00:05:55,810 --> 00:05:59,630
it also enables debug mode on the flask application.

38537
00:06:00,230 --> 00:06:05,060
Let's give that a go in order to change our app to run on debug mode.

38538
00:06:05,270 --> 00:06:07,610
All we have to do is to change right,

38539
00:06:07,660 --> 00:06:10,600
the debug property to true, right?

38540
00:06:11,530 --> 00:06:15,610
And now if I go ahead and rerun this application,

38541
00:06:16,150 --> 00:06:19,000
then you can see my debug mode is now on.

38542
00:06:19,540 --> 00:06:24,520
And I've got this debugger is active and also a debug, a pin,

38543
00:06:24,580 --> 00:06:28,480
which we'll come back to in just a minute. If I go to my website,

38544
00:06:29,440 --> 00:06:34,270
you can see that I can go there two, a route like this,

38545
00:06:34,330 --> 00:06:35,470
and it still works.

38546
00:06:35,890 --> 00:06:40,330
But if I was to change something in my code,

38547
00:06:40,630 --> 00:06:43,990
for example, just adding a new word into the return.

38548
00:06:44,440 --> 00:06:49,440
If I go ahead and hit command S on Mac or control us on windows to save this

38549
00:06:49,960 --> 00:06:51,850
file, then it will right.

38550
00:06:51,910 --> 00:06:56,440
Reload the server because it's tech did a change in that file,

38551
00:06:56,680 --> 00:07:01,600
and it's going to reload our server automatically so that we don't have to stop

38552
00:07:01,600 --> 00:07:04,360
and start all over again. So now,

38553
00:07:04,360 --> 00:07:08,050
if we go back over here and we refresh this page,

38554
00:07:08,230 --> 00:07:11,650
then you can see that update in the code is now reflected.

38555
00:07:12,220 --> 00:07:16,780
This is pretty neat. But in addition, we could also do other things.

38556
00:07:16,930 --> 00:07:21,580
For example, if we actually need to debug an issue, for example,

38557
00:07:21,580 --> 00:07:25,360
let's say that here in my variable path,

38558
00:07:25,420 --> 00:07:28,930
instead of saying name, I quote it username.

38559
00:07:29,320 --> 00:07:30,940
But then in my greed function,

38560
00:07:30,970 --> 00:07:33,850
I'm still trying to tap into this variable code name.

38561
00:07:34,450 --> 00:07:36,220
So now if I hit save,

38562
00:07:36,220 --> 00:07:40,870
it's going to reload my server and you can see that there's actually nothing

38563
00:07:40,870 --> 00:07:44,320
wrong with what I've done. This is all syntactically valid.

38564
00:07:44,890 --> 00:07:48,250
But if I go to my website here and I hit enter,

38565
00:07:48,670 --> 00:07:51,460
I actually get the flight task debug view.

38566
00:07:52,000 --> 00:07:56,140
So it's it actually telling me in this nicely formatted way?

38567
00:07:56,200 --> 00:08:00,160
What is the issue? So the main issue, right, is that I got a type II error.

38568
00:08:00,730 --> 00:08:01,570
Yeah, it happens.

38569
00:08:01,570 --> 00:08:06,570
If we scroll through the bottom is that the green function got an unexpected

38570
00:08:06,580 --> 00:08:08,980
keyword argument called username.

38571
00:08:10,210 --> 00:08:14,440
So that debugger might help us to figure out that, Oh, actually,

38572
00:08:14,770 --> 00:08:16,360
I've named this wrong.

38573
00:08:17,110 --> 00:08:21,340
Now this is an issue with the path here. But alternatively,

38574
00:08:21,370 --> 00:08:25,420
I could have made an error in my code as well. For example,

38575
00:08:25,420 --> 00:08:29,020
let's say that we want to take the name that's being passed in him.

38576
00:08:29,020 --> 00:08:33,220
We decided that we were going to add 12, two, it for some reason or other. Now,

38577
00:08:33,220 --> 00:08:38,020
if I hit save so that my server reloads and I tried to refresh this website,

38578
00:08:38,440 --> 00:08:43,059
you can see again, I've got a type II error. And this time though,

38579
00:08:43,059 --> 00:08:46,330
it's telling me that I can only concatenate string,

38580
00:08:46,360 --> 00:08:50,500
not an integer to a string. And if we go through these files,

38581
00:08:50,530 --> 00:08:55,000
you can see one of these lines, the first to a file that we wrote, hello, dot.

38582
00:08:55,860 --> 00:08:59,370
And it tells us that online 18 in the greet function,

38583
00:08:59,760 --> 00:09:03,210
this is the line. That's tripping it up. Now,

38584
00:09:03,210 --> 00:09:07,290
one of the things I can do at this point is I can actually open up the flask,

38585
00:09:07,290 --> 00:09:11,070
a debugger. And I do that by clicking on this button right here.

38586
00:09:11,880 --> 00:09:15,570
And what this is going to ask is for that pin that I showed you earlier on,

38587
00:09:15,780 --> 00:09:17,760
which is in our console.

38588
00:09:18,420 --> 00:09:21,510
This means that if somebody else is accessing your website,

38589
00:09:21,660 --> 00:09:24,780
live on the internet and you happen to have it in debug mode,

38590
00:09:25,050 --> 00:09:27,270
they can't just go and mess around with your code.

38591
00:09:27,930 --> 00:09:32,930
Let's go and scroll to the bottom and copy our debugging code and then paste it

38592
00:09:33,690 --> 00:09:38,190
in here as the pin, and then confirm to gain access to the debugger.

38593
00:09:38,850 --> 00:09:39,240
Now,

38594
00:09:39,240 --> 00:09:44,240
what it's done is basically its open up a console that is live on this line.

38595
00:09:45,660 --> 00:09:48,870
So now what I can do is I can print out for example,

38596
00:09:48,870 --> 00:09:52,590
the variables that it could access on that line, for example, name,

38597
00:09:52,950 --> 00:09:57,360
and it tells me that name is Angela. I can start diagnosing, well,

38598
00:09:57,600 --> 00:10:00,960
why is this wrong? So if I wanted you to add name to 12,

38599
00:10:01,380 --> 00:10:03,030
well I can narrow it down.

38600
00:10:03,120 --> 00:10:07,800
And it shows me that you can only add a string to a string or an integer to an

38601
00:10:07,800 --> 00:10:09,900
integer. You can't mix up the types.

38602
00:10:10,350 --> 00:10:15,350
So that might make me realize that actually I need to change this also to a

38603
00:10:15,750 --> 00:10:19,260
strength. Now,

38604
00:10:19,260 --> 00:10:21,060
if I go ahead and refresh,

38605
00:10:21,150 --> 00:10:25,290
you can see there's no problems there and I've managed to fix the problem with

38606
00:10:25,290 --> 00:10:27,450
the help of the flask debugger.

38607
00:10:29,160 --> 00:10:31,800
Now just a few more things on this URL.

38608
00:10:32,400 --> 00:10:36,960
One of the things that we could do is we could add some texts to the path

38609
00:10:36,990 --> 00:10:41,880
before. So you remember that I said username slash name. So that works.

38610
00:10:42,180 --> 00:10:44,400
We can also add paths afterwards.

38611
00:10:44,640 --> 00:10:48,120
So it could be one or two, whatever it may be.

38612
00:10:48,480 --> 00:10:53,480
And we can now access this route by going to our URL and then going to the first

38613
00:10:54,030 --> 00:10:56,010
part, which was username.

38614
00:10:56,580 --> 00:10:59,370
And then it was the variable that we could put in.

38615
00:10:59,640 --> 00:11:03,180
And then finally we can add even more to the path afterwards.

38616
00:11:03,450 --> 00:11:06,720
So we're in our case, the path is one. So now if I hit enter,

38617
00:11:06,750 --> 00:11:08,730
you can see it still goes to the same page,

38618
00:11:08,970 --> 00:11:13,970
but it's only this middle pot that's being taken as the value to this name

38619
00:11:14,520 --> 00:11:17,820
variable. Now,

38620
00:11:17,820 --> 00:11:20,580
if we go back to the flask Quickstart,

38621
00:11:20,910 --> 00:11:25,200
you can see that the final thing you mentioned is there is something called a

38622
00:11:25,230 --> 00:11:27,720
converter on the converter,

38623
00:11:27,750 --> 00:11:32,750
basically converts the URL into any data type that you specify by default,

38624
00:11:33,930 --> 00:11:37,380
it converts that variable value into a string,

38625
00:11:37,860 --> 00:11:42,660
which means it's going to accept any text without a slash. Now,

38626
00:11:42,690 --> 00:11:46,440
if you want to keep the slash, because if you are using a path,

38627
00:11:46,470 --> 00:11:49,500
then that might be quite important. So for example,

38628
00:11:49,500 --> 00:11:54,130
you wanted to get this entire part as your variable slash Juan.

38629
00:11:54,580 --> 00:11:59,170
Well then in that case, instead of using this, you would have to specify, well,

38630
00:11:59,170 --> 00:12:03,460
the data type is going to be a path and then I'm gonna save that as the name.

38631
00:12:03,970 --> 00:12:07,300
So now if I hit save and I use this same URL,

38632
00:12:07,330 --> 00:12:12,330
you can see the rest of that path is now being rendered in my variable and it's

38633
00:12:12,910 --> 00:12:16,420
being pulled in for whatever it is that I may need it for.

38634
00:12:18,280 --> 00:12:22,840
Now, alternatively, you can also have more than one variable, of course.

38635
00:12:23,200 --> 00:12:27,250
So maybe this first part, I'm going to keep it as a name,

38636
00:12:27,280 --> 00:12:30,910
which is a string. And then the second part, I want a number.

38637
00:12:30,910 --> 00:12:35,530
So maybe I'll keep it as the datatype integer and I'll give the variable a name,

38638
00:12:35,560 --> 00:12:36,580
a code number.

38639
00:12:37,120 --> 00:12:42,120
So now I can tap into the name and then I can also tap into a number like,

38640
00:12:45,220 --> 00:12:47,920
so now coming back here,

38641
00:12:47,950 --> 00:12:51,160
if I change this URL with a bit and I hit enter,

38642
00:12:51,460 --> 00:12:54,280
you can see it's taken this and placed it here.

38643
00:12:54,520 --> 00:12:56,590
It's taken this and placed it here.

38644
00:12:57,670 --> 00:13:02,670
So that's a quick little bit on how we can extract the parts that we want from a

38645
00:13:02,920 --> 00:13:07,920
URL by using these variable paths in the next lesson,

38646
00:13:08,320 --> 00:13:13,030
we're going to see how we can control the HTML that gets rendered instead of

38647
00:13:13,030 --> 00:13:15,820
just letting flask render what is the default.

38648
00:13:16,510 --> 00:13:19,510
So for all of that and more, I'll see you on the next lesson.


38649
00:00:00,150 --> 00:00:01,470
Now in the last lesson,

38650
00:00:01,530 --> 00:00:05,910
we talked a little bit about how to get different routes to work by using the

38651
00:00:05,910 --> 00:00:07,470
app dot route decorator,

38652
00:00:08,039 --> 00:00:13,040
as well as how we can create variable paths by using this angle bracket syntax

38653
00:00:13,530 --> 00:00:18,530
and how we can convert the path into a pre-specified data type by using this

38654
00:00:19,830 --> 00:00:21,840
particular structure. Now,

38655
00:00:21,840 --> 00:00:26,840
we also looked at how to run the App in debug mode so that we can auto reload

38656
00:00:26,970 --> 00:00:31,530
our server and also get access to the flask debugger. Now,

38657
00:00:31,560 --> 00:00:32,340
in this lesson,

38658
00:00:32,340 --> 00:00:36,630
I want to talk a little bit about how we can render actual HTML,

38659
00:00:36,840 --> 00:00:38,040
because at the moment,

38660
00:00:38,070 --> 00:00:43,070
what happens is we're simply just returning a string and we're getting flask to

38661
00:00:43,530 --> 00:00:46,710
do whatever it wants with it. And what that means.

38662
00:00:46,710 --> 00:00:48,900
If we go into the Chrome inspector,

38663
00:00:48,930 --> 00:00:53,930
by going to view and then developer and then develop a tools is we can see it.

38664
00:00:55,130 --> 00:00:57,290
It just stuffed that whole

38665
00:00:57,380 --> 00:01:02,380
F-string into a body tag without any real HTML tags that gives it structure.

38666
00:01:04,190 --> 00:01:08,240
So that's usually not what you would want when you're creating a website.

38667
00:01:08,840 --> 00:01:13,010
So let's see if we can start creating some HTML. Instead.

38668
00:01:13,760 --> 00:01:18,760
Now the simplest way to do this is flask actually accepts HTML in the return.

38669
00:01:20,510 --> 00:01:23,450
So we could just a simply say,

38670
00:01:23,450 --> 00:01:28,450
if we wanted to create an H one by adding an H one opening and closing tag here,

38671
00:01:29,510 --> 00:01:34,430
and if I hit save to refresh my server and then go to my home route,

38672
00:01:34,730 --> 00:01:38,900
then you can see this is now inside and H one inside the body.

38673
00:01:40,010 --> 00:01:43,670
Now, of course you can change this to whatever target is you want,

38674
00:01:43,880 --> 00:01:46,520
and it should still work. Now,

38675
00:01:46,520 --> 00:01:48,920
once we can start rendering HTML,

38676
00:01:48,950 --> 00:01:52,610
we can also start using the HTML attributes, by the way,

38677
00:01:52,670 --> 00:01:57,670
if any of this that I'm talking about HTML or CSS or attributes or tags sounds

38678
00:01:58,220 --> 00:02:02,600
unfamiliar, it might be because you've skipped the sessions on each balance CSS,

38679
00:02:02,840 --> 00:02:04,130
which we went through a few,

38680
00:02:04,130 --> 00:02:06,360
Two days ago. So have a quick search for that.

38681
00:02:06,470 --> 00:02:10,639
If all of this is confusing and it might be a good time to do a revision on

38682
00:02:10,639 --> 00:02:14,600
that. Anyways. Now coming back to my H one tag,

38683
00:02:15,050 --> 00:02:19,280
let's say I wanted to give it some CSS, which is just inline CSS.

38684
00:02:19,760 --> 00:02:24,110
So I'm going to set the style and give it some CSS code. For example,

38685
00:02:24,170 --> 00:02:28,610
I could set the text, the line CSS property to center,

38686
00:02:29,120 --> 00:02:32,780
and now if I hit save and I refresh on my homepage,

38687
00:02:33,200 --> 00:02:35,870
my text is now center aligned,

38688
00:02:36,950 --> 00:02:39,590
and you can see if I select this H one,

38689
00:02:39,860 --> 00:02:43,130
you can see that style being applied right here.

38690
00:02:44,840 --> 00:02:49,840
Anything that we can do with inline styling that you saw in the CSS modules or

38691
00:02:49,970 --> 00:02:54,970
changing the code to any sort of HTML tag we can do in the return.

38692
00:02:55,910 --> 00:03:00,400
Now, what if you wanted to render more than one HTML element? Well,

38693
00:03:00,460 --> 00:03:05,020
that's possible as well. All you have to do is just continue typing.

38694
00:03:05,020 --> 00:03:09,220
So let's say we wanted to create a paragraph tag. Well,

38695
00:03:09,250 --> 00:03:11,230
we could simply create it like this.

38696
00:03:11,410 --> 00:03:16,210
So if I hit save and refresh, you can see, this is my H one,

38697
00:03:16,270 --> 00:03:17,890
and this is a paragraph,

38698
00:03:18,700 --> 00:03:22,210
and this is the updated structure of my HTML file

38699
00:03:23,860 --> 00:03:28,860
now because pie charm doesn't really like you going too far over and creating

38700
00:03:29,230 --> 00:03:32,350
very long lines of code because it's difficult to read.

38701
00:03:32,650 --> 00:03:36,880
One of the neat tricks that it has is if you want to split a string at any

38702
00:03:36,880 --> 00:03:39,040
point, all you have to do is hit enter,

38703
00:03:39,400 --> 00:03:41,470
and it will add in this backslash for you,

38704
00:03:41,770 --> 00:03:45,820
which basically is the equivalent of the same code that we had before.

38705
00:03:46,090 --> 00:03:47,830
But it's now much easier to read.

38706
00:03:48,280 --> 00:03:52,630
So you can add in as many lines of HTML as you want in this fashion.

38707
00:03:54,280 --> 00:03:57,490
For example, if we wanted to add a another line,

38708
00:03:57,910 --> 00:04:02,910
then we would go inside the paragraph quotation Mark hit enter to insert another

38709
00:04:04,210 --> 00:04:07,870
line. And here we can add our image element.

38710
00:04:09,160 --> 00:04:13,000
Our image element is a self closing tags. We don't need the closing tag,

38711
00:04:13,240 --> 00:04:15,010
but it does need a source.

38712
00:04:15,640 --> 00:04:19,120
And this source could be a image that we find online.

38713
00:04:19,540 --> 00:04:24,100
So let's see if we can find a picture of a kitten.

38714
00:04:24,940 --> 00:04:26,140
This one looks pretty good.

38715
00:04:26,170 --> 00:04:29,740
Let's go ahead and copy the image address here by right clicking.

38716
00:04:30,100 --> 00:04:34,750
And then let's piece that in here as the image source. Now,

38717
00:04:34,780 --> 00:04:39,190
if I go ahead and hit, save and go back to my website and reload it,

38718
00:04:39,490 --> 00:04:42,220
you can see that is my little cat.

38719
00:04:42,970 --> 00:04:47,410
Now you can add other attributes, do the image tag. For example,

38720
00:04:47,470 --> 00:04:52,470
you can change the width to you only 200 pixels so that it would fit in to this

38721
00:04:52,810 --> 00:04:56,860
site a little bit better, or you can manipulate it in any way you want.

38722
00:04:57,610 --> 00:05:02,230
Now, the great thing about the image tag is we can also add gifts as well,

38723
00:05:02,320 --> 00:05:04,120
and it'll be rendered in our browser.

38724
00:05:04,630 --> 00:05:09,490
So Giphy is a great source of gifts from all over the internet.

38725
00:05:09,850 --> 00:05:12,880
So let's find an animated kitten on him.

38726
00:05:16,120 --> 00:05:20,770
This one is very cute. If we go to copy link and then copy the gift link,

38727
00:05:21,220 --> 00:05:23,530
and we replace this URL,

38728
00:05:23,560 --> 00:05:28,330
that's currently inside the source with this new URL,

38729
00:05:28,750 --> 00:05:33,010
then we would end up with our gift of being rendered as an image. Now,

38730
00:05:33,010 --> 00:05:37,900
one thing to note is that as we're changing these source attributes or the style

38731
00:05:37,900 --> 00:05:38,733
attributes,

38732
00:05:38,860 --> 00:05:43,270
the tax let's going in there is going in as a string with the quotation marks.

38733
00:05:43,720 --> 00:05:47,200
So this will clash with any outer quotation marks.

38734
00:05:47,560 --> 00:05:52,560
So be sure that if you've got a return as a single quoted string,

38735
00:05:53,590 --> 00:05:56,260
that in the middle, if you need to have quotes,

38736
00:05:56,500 --> 00:06:00,440
it will be double quotes basically has to be opposite of each other.

38737
00:06:01,490 --> 00:06:03,500
If you have single quotes on the outside,

38738
00:06:03,530 --> 00:06:05,750
then you're going to be using double quotes on the inside.

38739
00:06:05,990 --> 00:06:07,550
If you are using the opposite,

38740
00:06:07,580 --> 00:06:10,610
then it's double quotes on the outside that it has to be single quote on the

38741
00:06:10,610 --> 00:06:14,300
insight let's hit, save and see if this worked,

38742
00:06:14,510 --> 00:06:17,270
go back to our home page, hit refresh,

38743
00:06:17,510 --> 00:06:22,510
and you can see there is a fairy cute kitten being rendered in HTML from a flask

38744
00:06:25,250 --> 00:06:26,083
server.

38745
00:06:27,440 --> 00:06:32,180
So we've now leveled up a website a little bit more. We can now render HTML.

38746
00:06:32,210 --> 00:06:36,890
We can put an inline styling and we can add HTML elements to our heart's

38747
00:06:36,920 --> 00:06:41,600
content. Now in the next lesson, I've got a little bit of a challenge for you.

38748
00:06:42,110 --> 00:06:46,670
And the idea is for you to practice what you learned yesterday about decorators.

38749
00:06:47,120 --> 00:06:51,560
It's a bit of a advanced topic, but once you get used to it, it's really,

38750
00:06:51,560 --> 00:06:56,090
really handy. So for all of that and more head of it in the next lesson,


38751
00:00:00,570 --> 00:00:03,570
All right guys. So in yesterday's lessons that we talked about,

38752
00:00:03,570 --> 00:00:07,980
Python decorators, and we did quite a few exercises around that.

38753
00:00:08,520 --> 00:00:09,000
Now,

38754
00:00:09,000 --> 00:00:11,850
in order to test your knowledge and make sure that you haven't forgotten how to

38755
00:00:11,850 --> 00:00:16,710
use it, I've got a challenge for you to apply your knowledge of decorators.

38756
00:00:17,370 --> 00:00:21,240
Here's the challenge in this route that I've got here,

38757
00:00:21,270 --> 00:00:23,550
which is just forward slash bye.

38758
00:00:24,330 --> 00:00:28,860
One of the things that we learnt in the last lesson is that we can turn this

38759
00:00:28,890 --> 00:00:33,450
into an HTML element by simply wrapping it around HTML tags.

38760
00:00:33,870 --> 00:00:34,950
So for example,

38761
00:00:35,010 --> 00:00:39,090
if I wanted to turn this BI into a bolded,

38762
00:00:39,150 --> 00:00:42,210
by that I could add the B tag around it.

38763
00:00:42,630 --> 00:00:47,630
So now if I hit save and I go to my forest slash buy route,

38764
00:00:48,150 --> 00:00:52,500
then you can see that this text is now bolded. Like, so

38765
00:00:54,030 --> 00:00:57,600
now I can continue wrapping the text around more tags.

38766
00:00:58,140 --> 00:01:02,520
If I wanted a turn in a tallit, then I can wrap it around some emphasis tags.

38767
00:01:02,550 --> 00:01:07,260
So the EMT tag, and this will make it look like this.

38768
00:01:07,680 --> 00:01:08,550
And finally,

38769
00:01:08,550 --> 00:01:13,550
I can also make it underlined by wrapping it inside a you tag like this.

38770
00:01:15,060 --> 00:01:18,480
So now it's bold emphasized and underlined,

38771
00:01:18,540 --> 00:01:23,250
which looks like this. Now, what I want to do though,

38772
00:01:23,250 --> 00:01:28,250
is I don't really want to add all of this using strings because it's prone to

38773
00:01:29,370 --> 00:01:33,870
errors and it could be making typos, and it's just a bit of a pain to edit.

38774
00:01:34,440 --> 00:01:39,440
So what I want to do instead is under the first App dot route decorator,

38775
00:01:40,740 --> 00:01:45,740
which is important to identify the route to render what's in this method.

38776
00:01:46,590 --> 00:01:49,950
I want to be able to add some other decorators. For example,

38777
00:01:49,950 --> 00:01:54,950
let's say I added a decorator that I created somewhere up there called make

38778
00:01:55,050 --> 00:01:59,760
bolt. And if I hit save, you can see it's done the same thing.

38779
00:01:59,760 --> 00:02:02,610
It's added the B tag around that text.

38780
00:02:03,090 --> 00:02:06,270
I can also add some my other ones that I made earlier,

38781
00:02:06,540 --> 00:02:09,870
like make emphasis and make underlined.

38782
00:02:10,380 --> 00:02:14,610
So now I can add a whole bunch of decorators to my by function.

38783
00:02:15,060 --> 00:02:18,810
And once that's rendered, you can see it's got the bold,

38784
00:02:18,870 --> 00:02:21,810
it's got the emphasis and it's got the underline.

38785
00:02:22,710 --> 00:02:26,580
And that was much easier because I've got the auto suggest from PI jam.

38786
00:02:26,910 --> 00:02:30,150
And also I've got my decorator working in the background.

38787
00:02:30,690 --> 00:02:32,220
So your task is this,

38788
00:02:32,310 --> 00:02:36,000
your task is to create these three decorators,

38789
00:02:36,390 --> 00:02:39,330
which each will achieve the named effect.

38790
00:02:39,600 --> 00:02:44,340
So either making the text bold, making emphasize, or making an underlined.

38791
00:02:44,850 --> 00:02:47,490
So this is a bit of a revision and a bit of a challenge.

38792
00:02:47,670 --> 00:02:50,640
I'll let you pause the video and complete this challenge.

38793
00:02:51,090 --> 00:02:55,710
And in the next lesson, I'll reveal the solution code. Give that 10 minutes,

38794
00:02:55,770 --> 00:02:58,830
give it a good go and see if you can complete this challenge.


38795
00:00:00,450 --> 00:00:04,500
Previously, we looked at simple Python decorator functions.

38796
00:00:05,070 --> 00:00:08,970
And the reason why it's simple is because all that we're doing when we're

38797
00:00:08,970 --> 00:00:13,350
calling the function in the decorator is we're just calling it straight up.

38798
00:00:14,040 --> 00:00:18,480
But this doesn't take into account in the cases where, for example,

38799
00:00:18,480 --> 00:00:23,480
we want to add a condition before we called the function or even more advanced.

38800
00:00:23,910 --> 00:00:27,510
What if we needed to call the function with some sort of inputs?

38801
00:00:27,690 --> 00:00:31,860
How would we get hold of that? If it was inside a decorator?

38802
00:00:32,369 --> 00:00:36,510
So let's say that we had a class called user.

38803
00:00:37,140 --> 00:00:39,090
Now, if you are not familiar with classes,

38804
00:00:39,150 --> 00:00:43,260
I strongly recommend going back to the lessons where we covered classes and

38805
00:00:43,260 --> 00:00:45,180
Object in great detail.

38806
00:00:45,220 --> 00:00:48,960
We did over several days just to make sure that you're up to date with that

38807
00:00:49,020 --> 00:00:52,830
before you continue. But this is a pretty simple class.

38808
00:00:53,130 --> 00:00:56,910
All it does is it has two properties, a name, property,

38809
00:00:57,120 --> 00:00:58,890
and it is logged in property.

38810
00:00:59,430 --> 00:01:03,240
So basically what we're trying to simulate is a condition where let's say we had

38811
00:01:03,240 --> 00:01:08,240
a blog website and we had these user objects and the user has a username and

38812
00:01:09,540 --> 00:01:12,660
also some sort of property that keeps track of whether,

38813
00:01:12,660 --> 00:01:16,950
or if the user is going onto the website and not logged in,

38814
00:01:17,070 --> 00:01:19,110
or whether if they all have already logged in.

38815
00:01:20,520 --> 00:01:23,280
So certain methods on the website,

38816
00:01:23,370 --> 00:01:27,840
you can only be achieved by users who are logged in it's. For example,

38817
00:01:27,840 --> 00:01:30,540
if they wanted you to create a new blog post we'll,

38818
00:01:30,540 --> 00:01:33,270
then that user has to be checked.

38819
00:01:33,660 --> 00:01:38,660
And we have to make sure that they are in fact logged in and authenticated to

38820
00:01:39,180 --> 00:01:41,310
create a new blog post.

38821
00:01:41,790 --> 00:01:46,790
If I go ahead and create a new user from the user class,

38822
00:01:47,580 --> 00:01:50,940
then I can give it a name, which I'll put as Angela.

38823
00:01:51,540 --> 00:01:56,540
And then I could create the blog post and pass in my user.

38824
00:01:58,080 --> 00:02:01,710
Now, when I hit run, you'll see, this is Angela's new blog,

38825
00:02:01,740 --> 00:02:04,230
post being printed right here.

38826
00:02:05,460 --> 00:02:10,050
Now what if I wanted to create a decorator function that could be used to

38827
00:02:10,050 --> 00:02:14,970
decorate any function on our website that requires authentication.

38828
00:02:15,150 --> 00:02:20,150
So it requires that this users is logged in property is set to true.

38829
00:02:22,260 --> 00:02:26,400
So let's say that I decided to create my decorator function right here,

38830
00:02:26,430 --> 00:02:30,600
which I'll call the is authenticated decorator.

38831
00:02:32,220 --> 00:02:36,690
And this is of course going to need to take a function as an input.

38832
00:02:37,020 --> 00:02:39,960
And then inside, we've got our wrapper function.

38833
00:02:41,190 --> 00:02:46,110
Now inside our wrapper function is where we call this function.

38834
00:02:46,110 --> 00:02:48,090
That's the past and right here.

38835
00:02:48,810 --> 00:02:51,660
And finally to complete our decorator.

38836
00:02:51,690 --> 00:02:56,690
We have to return the wrapper as a function without the parentheses.

38837
00:02:57,990 --> 00:03:01,540
Now, in order to check for the is authenticated,

38838
00:03:01,600 --> 00:03:04,450
what we actually want to do is we want to say, well,

38839
00:03:04,480 --> 00:03:09,480
if the user.is logged in is equal to true will in that case,

38840
00:03:12,040 --> 00:03:16,570
we're going to trigger the function. But if it's actually not true, well,

38841
00:03:16,570 --> 00:03:19,390
then we're not going to trigger the function. Now,

38842
00:03:19,420 --> 00:03:23,080
the only problem here is that this user is undefined.

38843
00:03:23,800 --> 00:03:26,650
We were only able to pass in the function,

38844
00:03:27,040 --> 00:03:32,040
but what if we needed to pass in some arguments associated with that function?

38845
00:03:33,730 --> 00:03:38,170
Notice here that all function create blog posts, which is what we want to add.

38846
00:03:38,170 --> 00:03:42,910
The decorator to accepts an input in the form of the user. Object.

38847
00:03:43,480 --> 00:03:48,280
If I decorate this function with the is authenticated decorator,

38848
00:03:48,850 --> 00:03:50,830
and I tried to run this,

38849
00:03:51,190 --> 00:03:55,840
then it's not really gonna work because that user is not defined.

38850
00:03:56,440 --> 00:04:01,440
And it tells us that the wrapper function takes zero positional arguments,

38851
00:04:03,460 --> 00:04:05,590
but one was given.

38852
00:04:06,220 --> 00:04:09,580
And the one that's given is this user right here,

38853
00:04:10,990 --> 00:04:15,990
this era might already be a good hint for us to figure out how to fix this.

38854
00:04:17,709 --> 00:04:22,710
One of the things that we talked about in previous lessons is the concept of OGs

38855
00:04:22,990 --> 00:04:26,470
and clogs, unlimited positional arguments.

38856
00:04:26,890 --> 00:04:29,830
Normally all add it in as asterix,

38857
00:04:29,890 --> 00:04:34,890
OGs and unlimited keyword arguments are usually added in as two Astrix and then

38858
00:04:37,360 --> 00:04:41,380
Crocs. So now we can have all function,

38859
00:04:41,740 --> 00:04:45,130
which is decorated with this decorate to function.

38860
00:04:45,790 --> 00:04:47,590
And when we call the function,

38861
00:04:47,740 --> 00:04:52,740
we could provide some inputs and those inputs can be tapped into via these OGs

38862
00:04:55,390 --> 00:04:57,820
and Crocs. Now, in this case,

38863
00:04:57,850 --> 00:05:02,170
this is a positional argument and it's the argument App positions zero.

38864
00:05:02,800 --> 00:05:06,790
So instead of using this user, which is what we would do,

38865
00:05:06,790 --> 00:05:09,910
if we were inside this function, instead,

38866
00:05:09,940 --> 00:05:12,400
we would use the wrappers OGs,

38867
00:05:13,330 --> 00:05:17,260
and then we would use the position set to zero.

38868
00:05:18,040 --> 00:05:23,040
So now it's going to look at the function that is going to be passed in which is

38869
00:05:24,430 --> 00:05:26,170
going to have some inputs.

38870
00:05:26,740 --> 00:05:31,740
And it's going to take that first position input and then see if it is logged in

38871
00:05:32,380 --> 00:05:33,970
property is equal to true.

38872
00:05:35,320 --> 00:05:39,760
Now that my wrapper is taking positional arguments and keyword arguments,

38873
00:05:40,120 --> 00:05:45,120
and I can tap into the first positional argument by using Oxy zero.

38874
00:05:45,700 --> 00:05:48,490
Well inside the rapt function,

38875
00:05:48,820 --> 00:05:53,820
I can now also use this first argument in order to give it as an input to that

38876
00:05:54,610 --> 00:05:55,443
function.

38877
00:05:55,630 --> 00:06:00,440
Remember that this function is simply this create blog post function without the

38878
00:06:00,440 --> 00:06:04,370
decorator. Now, if I go ahead and hit run,

38879
00:06:05,240 --> 00:06:10,240
you will see that nothing happens unless I change this users is logged in

38880
00:06:11,420 --> 00:06:15,740
property to equal. True. And now that that's true,

38881
00:06:15,890 --> 00:06:18,080
then it's going to be checked right here.

38882
00:06:18,410 --> 00:06:23,410
And then it's going to call the function because that user is now logged in this

38883
00:06:24,740 --> 00:06:28,280
idea of being able to pass in positional arguments,

38884
00:06:28,340 --> 00:06:30,170
as well as keyword arguments,

38885
00:06:30,500 --> 00:06:34,310
by simply adding the odds and quarks to the wrapper function,

38886
00:06:34,640 --> 00:06:39,640
and then using it inside the wrapper or using it to call the function itself is

38887
00:06:40,670 --> 00:06:45,110
one step higher in terms of understanding Python,

38888
00:06:45,110 --> 00:06:46,340
decorator functions.

38889
00:06:47,120 --> 00:06:50,420
I recommend spending a few minutes looking at this code,

38890
00:06:50,690 --> 00:06:54,350
which you can access at this URL, which is in the course resources,

38891
00:06:54,830 --> 00:06:59,510
and then trying to recreate this functionality from scratch based on your

38892
00:06:59,510 --> 00:07:03,680
understanding of what we just talked about in the next lesson,

38893
00:07:03,740 --> 00:07:08,360
I've got a coding exercise for you so that you can try out this new advanced

38894
00:07:08,360 --> 00:07:12,200
form of Python decorators and try creating one yourself.



38895
00:00:00,090 --> 00:00:00,840
Hey guys,

38896
00:00:00,840 --> 00:00:05,840
and welcome to day 56 of 100 Days of Code. It's Angela here

38897
00:00:05,970 --> 00:00:10,970
and today we are diving deeper into web development with Flask.

38898
00:00:12,390 --> 00:00:14,070
We're going to be covering a bunch of things,

38899
00:00:14,160 --> 00:00:17,610
including how to include static files on your website

38900
00:00:17,940 --> 00:00:20,910
like local images or local videos,

38901
00:00:21,360 --> 00:00:26,250
as well as how to render HTML and CSS files. Previously,

38902
00:00:26,310 --> 00:00:28,350
when we looked into web design

38903
00:00:28,650 --> 00:00:32,189
and we learned about creating websites using HTML and CSS,

38904
00:00:32,490 --> 00:00:37,350
we were able to create it as a separate file with the proper structure and

38905
00:00:37,350 --> 00:00:38,220
styling.

38906
00:00:38,580 --> 00:00:43,410
And we want to apply that now to our Flask applications.

38907
00:00:43,980 --> 00:00:46,710
And we want to be able to show the user

38908
00:00:46,800 --> 00:00:49,620
a HTML website with CSS styling.

38909
00:00:50,490 --> 00:00:52,470
Now at the very end of today

38910
00:00:52,500 --> 00:00:57,500
we're going to be building out a beautiful personal name card application.

38911
00:00:58,470 --> 00:01:03,090
It's the 21st century and we no longer have to hand people name cards.

38912
00:01:03,420 --> 00:01:05,190
Instead, you could create a website,

38913
00:01:05,400 --> 00:01:09,660
put your name on it and have all the links to the relevant pages that you

38914
00:01:09,660 --> 00:01:12,120
need and to show off your beautiful design

38915
00:01:12,210 --> 00:01:16,620
as well as give people your contact details. That's the goal for today.

38916
00:01:16,740 --> 00:01:19,200
Head over to the next lesson and let's get started.


38917
00:00:00,390 --> 00:00:04,650
Now, the first thing I want to show you is how to render HTML files.

38918
00:00:05,400 --> 00:00:10,140
Go ahead and create a new PyCharm project. I've called mine my-personal-site,

38919
00:00:10,470 --> 00:00:14,580
but you can call yours anything you like. And in the project,

38920
00:00:14,610 --> 00:00:19,290
we're going to create a new file which is going to be our Python server.

38921
00:00:19,410 --> 00:00:24,410
So I'll call it server.py. And then inside our server.py

38922
00:00:24,840 --> 00:00:29,730
we're going to go through all the stages of building up a simple Flask server.

38923
00:00:30,390 --> 00:00:34,140
This might be a good time to revise how to do that. So go ahead,

38924
00:00:34,200 --> 00:00:38,400
pause the video and see if you can set up a simple Flask application

38925
00:00:38,670 --> 00:00:41,670
which just serves up hello world to the homepage.

38926
00:00:44,430 --> 00:00:46,110
All right. So let's start from the beginning.

38927
00:00:46,380 --> 00:00:51,300
We'll import the Flask class from the flask application.

38928
00:00:51,630 --> 00:00:56,400
And as usual, I'm going to use my red light bulb to install the Flask package.

38929
00:00:57,120 --> 00:00:58,230
Now, once I've done that,

38930
00:00:58,260 --> 00:01:03,260
I'm going to create my Flask application by saying app = Flask.

38931
00:01:03,780 --> 00:01:08,670
And then inside the initialization for my Flask application,

38932
00:01:08,700 --> 00:01:12,630
I'm going to put in the name of my current directory.

38933
00:01:13,920 --> 00:01:14,400
Next,

38934
00:01:14,400 --> 00:01:19,400
we're going to use the route decorator to target the home route.

38935
00:01:20,850 --> 00:01:23,190
And when the user hits up the home route,

38936
00:01:23,460 --> 00:01:25,890
we're going to render the home page.

38937
00:01:26,580 --> 00:01:28,920
So inside this definition,

38938
00:01:28,950 --> 00:01:33,870
we're simply just going to return hello world. And finally,

38939
00:01:33,900 --> 00:01:38,900
we're ready to go ahead and check to see if the name is equal to main, then in

38940
00:01:42,720 --> 00:01:46,980
that case we're going to run our app. That's it.

38941
00:01:47,040 --> 00:01:48,300
That's all there is to it.

38942
00:01:49,110 --> 00:01:52,260
Let's go ahead and run this application

38943
00:01:52,290 --> 00:01:57,270
which is our server.py. And if we head over to this URL,

38944
00:01:57,570 --> 00:02:00,870
we can see hello world when we go to our homepage.

38945
00:02:02,010 --> 00:02:07,010
The next step is to figure out how can we render an HTML webpage

38946
00:02:08,400 --> 00:02:13,400
which is crafted inside an HTML file rather than simply just returning strings

38947
00:02:14,460 --> 00:02:16,860
or small bits of HTML elements.

38948
00:02:17,760 --> 00:02:22,760
Let's go into our file and go ahead and create a new HTML file.

38949
00:02:24,120 --> 00:02:24,390
Now,

38950
00:02:24,390 --> 00:02:28,500
the reason why we creating it like this is because it's going to add in all of

38951
00:02:28,500 --> 00:02:32,250
the boilerplate code that is required to an HTML website.

38952
00:02:32,880 --> 00:02:36,870
So let's go ahead and call our web page index.html.

38953
00:02:37,410 --> 00:02:41,040
And you can see as soon as I create it, it's added in the doctype,

38954
00:02:41,040 --> 00:02:43,980
it's added in the HTML, the head and the body. Now,

38955
00:02:44,010 --> 00:02:45,690
if this is unfamiliar to you,

38956
00:02:46,140 --> 00:02:51,000
be sure to check out the lessons where we covered HTML and CSS in detail.

38957
00:02:51,210 --> 00:02:54,210
But I'm going to assume that all of this is pretty straightforward by now.

38958
00:02:55,110 --> 00:02:59,650
Now the first thing we're going to change in our new website is the title.

38959
00:03:00,160 --> 00:03:03,370
So I'm going to go ahead and give this a title.

38960
00:03:03,880 --> 00:03:08,830
You can put anything you want, but I'm just going to put my own name here. Now,

38961
00:03:08,860 --> 00:03:10,150
inside the body,

38962
00:03:10,210 --> 00:03:15,210
I'm going to create a h1 and you can see that the HTML files on PyCharm has that

38963
00:03:17,200 --> 00:03:20,800
tag completion that we see here. In my h1

38964
00:03:20,830 --> 00:03:25,180
I'm just going to write I'm Angela. Pretty straightforward.

38965
00:03:25,510 --> 00:03:29,350
This is a complete HTML file now. Now,

38966
00:03:29,380 --> 00:03:34,060
if I want to render this instead of just hello world, how would I do that?

38967
00:03:35,020 --> 00:03:38,650
Well, how do we find out? As always it's through

38968
00:03:38,680 --> 00:03:43,000
the documentation. In the documentation of the quickstart for Flask 

38969
00:03:43,090 --> 00:03:45,370
there's a section on rendering templates.

38970
00:03:46,000 --> 00:03:50,290
And this allows us to render an HTML file as a template.

38971
00:03:51,190 --> 00:03:54,580
There's a couple of requirements though. Tthe first thing is that

38972
00:03:54,940 --> 00:03:58,690
remember that Flask is a framework and not a library.

38973
00:03:59,110 --> 00:04:04,110
So it will put certain restrictions and requirements on your code so that it

38974
00:04:04,240 --> 00:04:08,110
will actually work. And in this case, our HTML files,

38975
00:04:08,140 --> 00:04:12,610
which is known as our templates, must be inside a folder called templates.

38976
00:04:12,940 --> 00:04:16,180
That's where Flask is gonna look for it when we try to render it.

38977
00:04:16,660 --> 00:04:20,950
So let's first do that. Let's create a new directory

38978
00:04:21,279 --> 00:04:24,130
which we'll call templates, all lower case,

38979
00:04:24,610 --> 00:04:28,420
and let's move our index.html into that new folder.

38980
00:04:29,590 --> 00:04:34,590
So there is. The next thing we have to do is we have to import this method called

38981
00:04:35,830 --> 00:04:38,410
render_template from the Flask module.

38982
00:04:38,890 --> 00:04:41,050
So let's go back to our server.py

38983
00:04:41,230 --> 00:04:45,010
and in addition to importing the Flask class,

38984
00:04:45,280 --> 00:04:49,570
let's go ahead and import the render_template method as well.

38985
00:04:50,470 --> 00:04:52,750
The next thing we have to do is to,

38986
00:04:52,780 --> 00:04:57,490
instead of returning a string or a string that contains HTML,

38987
00:04:57,760 --> 00:05:02,760
we have to call this method render_template and pass in the file name that we

38988
00:05:03,760 --> 00:05:08,050
have and then that is going to be rendered into our website.

38989
00:05:08,650 --> 00:05:12,010
So let's go ahead and do this. Let's delete that hello world

38990
00:05:12,310 --> 00:05:16,750
and instead, let's return the output from this render_template method.

38991
00:05:17,470 --> 00:05:21,520
And inside here, we're going to put the name of our HTML file

38992
00:05:21,760 --> 00:05:24,460
which lives inside our templates folder.

38993
00:05:25,150 --> 00:05:29,380
That's going to be index.html because that's what we called it.

38994
00:05:30,340 --> 00:05:33,610
Now let's go ahead and run our code. Alternatively,

38995
00:05:33,610 --> 00:05:38,440
let's switch on the debug mode so that it will refresh and rerun our

38996
00:05:38,440 --> 00:05:42,490
server every time we make a change. So let's rerun

38997
00:05:42,550 --> 00:05:44,950
and now let's go to our website,

38998
00:05:45,370 --> 00:05:50,370
refresh the main page and you can see it's now got an h1 in here and in the

38999
00:05:52,030 --> 00:05:54,940
head, there is now the title, which is Angela,

39000
00:05:55,180 --> 00:05:57,100
which is the title of the tab as well.

39001
00:05:58,130 --> 00:06:03,130
Imagine if you had to type all of this HTML into this return as a string.

39002
00:06:04,310 --> 00:06:05,750
It's pretty painful.

39003
00:06:05,750 --> 00:06:09,770
It doesn't have any of the assistants that you get from your editor.

39004
00:06:11,030 --> 00:06:15,140
Now here's a challenge for you. Back in days 41 and 42

39005
00:06:15,500 --> 00:06:20,500
we learned about HTML and we created a CV website that looks something like

39006
00:06:21,650 --> 00:06:26,120
this, which we managed to publish and upload to GitHub. Now,

39007
00:06:26,120 --> 00:06:29,960
what I want you to do is to go and find your own CV website

39008
00:06:30,320 --> 00:06:35,320
and then go to the link either on your GitHub page or find the original HTML

39009
00:06:35,900 --> 00:06:39,110
file and I want you to go ahead and get hold of it.

39010
00:06:39,560 --> 00:06:43,400
So if it's on GitHub, then you can go ahead and simply save as

39011
00:06:43,760 --> 00:06:47,120
and save this webpage into your downloads.

39012
00:06:48,440 --> 00:06:53,180
Now, if it saved as a HTML file somewhere in your system, that's also fine.

39013
00:06:54,290 --> 00:06:57,650
But essentially what we want to do is we want to take this file,

39014
00:06:57,650 --> 00:06:59,240
which is an HTML file,

39015
00:07:01,070 --> 00:07:04,880
and we want to move it into our templates. Now,

39016
00:07:04,880 --> 00:07:08,390
one of the things that you'll notice is if you downloaded this file off the

39017
00:07:08,390 --> 00:07:09,223
internet,

39018
00:07:09,230 --> 00:07:13,910
then you might have to rename it because firstly it's really long

39019
00:07:13,970 --> 00:07:16,220
and we don't want to have to type that into our code.

39020
00:07:16,490 --> 00:07:19,880
So I'm going to shorten the name to angela. And then at the very end,

39021
00:07:19,910 --> 00:07:24,560
you can see the file extension at least when it comes off GitHub, is .htm.

39022
00:07:24,740 --> 00:07:29,270
And the reason for this is because some servers don't accept four-lettered file

39023
00:07:29,270 --> 00:07:33,710
extensions, but it's exactly the same as .html.

39024
00:07:34,130 --> 00:07:38,720
So we're going to change it to .HTML and then we're going to re factor that.

39025
00:07:39,320 --> 00:07:42,320
So now that we've got hold of this HTML page,

39026
00:07:42,560 --> 00:07:46,670
we're going to try and render it instead of the index.html.

39027
00:07:47,270 --> 00:07:50,900
Pause the video and see if you can complete this as a challenge.

39028
00:07:53,230 --> 00:07:53,620
Right.

39029
00:07:53,620 --> 00:07:55,720
All right. That's pretty simple.

39030
00:07:55,750 --> 00:08:00,750
All we have to do is just replace the index.html to the new file

39031
00:08:01,030 --> 00:08:02,680
which is angela.html.

39032
00:08:03,100 --> 00:08:07,120
And if that file happened to be inside a folder for example,

39033
00:08:07,330 --> 00:08:12,070
if we had a subfolder inside templates which we've called, I don't know cv,

39034
00:08:12,430 --> 00:08:14,260
and we had this inside here,

39035
00:08:14,740 --> 00:08:17,770
then we would have to specify that in the file path.

39036
00:08:18,220 --> 00:08:22,180
If we just have it in the top level of our templates folder,

39037
00:08:22,600 --> 00:08:26,320
then it's as simple as what we did with the index.html.

39038
00:08:27,070 --> 00:08:30,670
So now, while our server is running in debug mode,

39039
00:08:30,700 --> 00:08:35,700
we can go ahead and hit save on this website and it should restart our server.

39040
00:08:36,970 --> 00:08:41,970
And now if we go back to our main homepage and reload the website,

39041
00:08:42,789 --> 00:08:47,790
you can see it's now rendering our personal CV site with only one exception.

39042
00:08:50,110 --> 00:08:54,550
What has happened to this profile picture? It looks pretty broken.

39043
00:08:55,330 --> 00:08:58,240
Now in order to be able to render static images,

39044
00:08:58,510 --> 00:09:01,510
we're going to have to learn how to render static files

39045
00:09:01,600 --> 00:09:05,950
such as images like this. That's what we're going to do in the next lesson.


39046
00:00:00,390 --> 00:00:05,390
As we saw previously when we rendered the HTML page of our CV,

39047
00:00:06,360 --> 00:00:11,360
one of the components is an image tag and it has a image file that it needs to

39048
00:00:11,910 --> 00:00:16,079
render. But it looks pretty broken when we rendered HTML.

39049
00:00:17,040 --> 00:00:19,830
So if we go ahead and open up the Chrome developer tool

39050
00:00:20,310 --> 00:00:24,180
which is under view, developer, and developer tools,

39051
00:00:24,630 --> 00:00:26,190
then if we go to console

39052
00:00:26,280 --> 00:00:30,690
you'll see that we actually get a bunch of 404 errors and they relate

39053
00:00:30,690 --> 00:00:35,130
to the styles.css file as well as the angela.png file.

39054
00:00:35,610 --> 00:00:37,710
That is what this is referring to.

39055
00:00:39,570 --> 00:00:40,920
And you can actually see

39056
00:00:40,920 --> 00:00:45,920
we get the same 404 errors when we look at the debug log in here as

39057
00:00:46,200 --> 00:00:50,520
well. So we're missing some stuff basically. Well, firstly,

39058
00:00:50,550 --> 00:00:51,990
let's see if we can recover it.

39059
00:00:52,530 --> 00:00:56,460
We can go ahead and save this image from the website

39060
00:00:56,790 --> 00:00:59,550
which I'll just call angela.png.

39061
00:00:59,940 --> 00:01:03,960
And then we can drag this image into our personal site.

39062
00:01:06,870 --> 00:01:09,930
And there it is right there. Now, in my case,

39063
00:01:09,960 --> 00:01:12,600
my image actually happens to be a circular one

39064
00:01:12,960 --> 00:01:15,210
which I edited in Photoshop,

39065
00:01:15,270 --> 00:01:18,180
but you might just have a square one and it doesn't matter at all.

39066
00:01:19,050 --> 00:01:22,380
Now that we've got our image inside our project,

39067
00:01:22,650 --> 00:01:27,650
how do we make sure that that image actually gets rendered in our HTML site?

39068
00:01:30,330 --> 00:01:35,330
Because here is the image tag and it's looking inside Angela's personal site

39069
00:01:36,570 --> 00:01:41,460
files for angela.png, which is not what we have here.

39070
00:01:42,030 --> 00:01:46,470
In fact, if we had moved this PNG file to the same

39071
00:01:46,470 --> 00:01:51,120
folder so they're on the same hierarchy, basically inside the same folder,

39072
00:01:51,630 --> 00:01:56,280
well then we could probably just change this to angela.png.

39073
00:01:56,700 --> 00:02:01,700
If I go ahead and restart and rerun my server after I've added in all these

39074
00:02:02,010 --> 00:02:06,150
files and I go to my personal site and I hit reload,

39075
00:02:06,480 --> 00:02:10,979
you'll see that there's still no photo. So why is that? Well,

39076
00:02:11,039 --> 00:02:13,050
back to the Flask documentation we go.

39077
00:02:13,710 --> 00:02:17,940
The reason is because, just like our templates have to be inside a folder called

39078
00:02:17,970 --> 00:02:21,840
templates, Flask will look for all your static files

39079
00:02:21,840 --> 00:02:26,840
like your images or your CSS files inside a folder called static.

39080
00:02:27,780 --> 00:02:31,410
So you have to put it inside a folder called static.

39081
00:02:32,280 --> 00:02:36,450
They made the framework, they make the rules. So inside our project

39082
00:02:36,480 --> 00:02:41,480
my-personal-site, let's create a new directory called static and let's move our

39083
00:02:42,030 --> 00:02:44,610
image into that static folder.

39084
00:02:46,170 --> 00:02:51,120
Now inside our angela.html, when we want to point to that image,

39085
00:02:51,630 --> 00:02:56,630
then the path is going to be static/ the name of the file inside

39086
00:02:57,870 --> 00:03:02,170
that folder, which in my case is angela.png. Now,

39087
00:03:02,170 --> 00:03:05,440
if I go ahead and rerun my application,

39088
00:03:05,800 --> 00:03:09,100
then go back to my homepage and refresh,

39089
00:03:09,370 --> 00:03:12,160
you should see that image being rendered.

39090
00:03:13,600 --> 00:03:18,010
It was able to look inside the static folder and find that image.

39091
00:03:19,900 --> 00:03:23,470
Whenever you create a Flask application, 9 out of 10 times

39092
00:03:23,500 --> 00:03:27,100
you'll need to create it with the templates folder and the static folder.

39093
00:03:27,490 --> 00:03:31,570
And you put all your static files like your CSS files or your images or your

39094
00:03:31,570 --> 00:03:33,700
videos inside that folder

39095
00:03:33,970 --> 00:03:37,030
and your file path is relative to that folder.

39096
00:03:37,750 --> 00:03:40,000
And then when you create your HTML templates,

39097
00:03:40,030 --> 00:03:42,400
you're going to put it inside the templates folder.

39098
00:03:43,420 --> 00:03:45,640
Now going back to my project,

39099
00:03:46,000 --> 00:03:49,960
I'm going to delete all the extra files that we created just now in the demo.

39100
00:03:50,550 --> 00:03:51,383
Right.

39101
00:03:55,770 --> 00:03:59,880
And I should now only end up with my index.html

39102
00:04:00,120 --> 00:04:03,270
which is our simple website. Now,

39103
00:04:03,300 --> 00:04:07,170
the reason why I wanna keep it simple is just so that you really understand

39104
00:04:07,170 --> 00:04:08,850
everything from the ground up.

39105
00:04:09,450 --> 00:04:14,450
And the challenge I've got for you is to go ahead and create a CSS style sheet,

39106
00:04:16,529 --> 00:04:18,510
and then using the style sheet

39107
00:04:18,839 --> 00:04:23,840
change the background of the body of this index.html website to purple.

39108
00:04:26,190 --> 00:04:29,850
That's the goal. You are going to have to change the server.py,

39109
00:04:30,330 --> 00:04:33,150
you're going to have to change the index.html,

39110
00:04:33,540 --> 00:04:35,850
and you're going to have to create a CSS file.

39111
00:04:36,480 --> 00:04:39,570
Pause the video and see if you can complete this challenge.

39112
00:04:40,020 --> 00:04:40,853
Right.

39113
00:04:43,680 --> 00:04:47,820
All right. The first thing we're going to do is create a CSS file.

39114
00:04:48,330 --> 00:04:50,880
That is going to be a static file.

39115
00:04:51,390 --> 00:04:53,670
We're going to create it inside the static folder.

39116
00:04:54,360 --> 00:04:57,750
So I'm going to call it styles.css

39117
00:04:59,580 --> 00:05:04,580
and now I'm going to go ahead and target the body of my website to the body tag,

39118
00:05:07,680 --> 00:05:12,120
and then I'm going to change the background color to purple

39119
00:05:13,770 --> 00:05:14,490
like this.

39120
00:05:14,490 --> 00:05:19,490
So very simple CSS code here. Now that when it's run is going to target this body

39121
00:05:22,140 --> 00:05:24,720
tag which is basically the body of our website

39122
00:05:24,810 --> 00:05:28,560
and hopefully it's going to turn the background purple. Now,

39123
00:05:28,620 --> 00:05:30,630
in order for that CSS to work though,

39124
00:05:30,690 --> 00:05:35,340
we're going to have to add it into the head of our HTML file just as we've done

39125
00:05:35,340 --> 00:05:39,660
it thousands of times before when we did the lessons on CSS and HTML.

39126
00:05:40,620 --> 00:05:43,710
In order to add that in, we're going to create a link element

39127
00:05:44,160 --> 00:05:47,670
which is going to have a relationship. Now,

39128
00:05:47,700 --> 00:05:50,820
the relationship is going to be a style sheet.

39129
00:05:50,970 --> 00:05:55,530
So it's basically telling the HTML file that this link points to a style sheet.

39130
00:05:55,980 --> 00:06:00,980
And then the href of the style sheet is going to be inside static/

39131
00:06:01,370 --> 00:06:03,170
styles.css.

39132
00:06:04,190 --> 00:06:09,170
Now let's go ahead and save both of these files and go back to our server and

39133
00:06:09,170 --> 00:06:14,120
make sure that we're rendering that HTML template which is index.html.

39134
00:06:14,930 --> 00:06:19,930
And now if we go ahead and stop and restart this project so that it takes into

39135
00:06:21,080 --> 00:06:25,190
account all the new files, and then we go to our homepage,

39136
00:06:25,430 --> 00:06:29,630
hopefully it should show you a page that has a purple background

39137
00:06:29,990 --> 00:06:32,420
like you see here. Now,

39138
00:06:32,420 --> 00:06:37,280
one of the things you have to be careful about Chrome is that it likes to cache

39139
00:06:37,580 --> 00:06:40,190
your static files. So what does this mean? Well,

39140
00:06:40,640 --> 00:06:44,420
let's go back to the styles.css and I'm going to change that background-color

39141
00:06:44,420 --> 00:06:47,870
to red. Now I'm going to hit save on this file.

39142
00:06:48,140 --> 00:06:51,290
I'm even going to stop and rerun my file,

39143
00:06:51,620 --> 00:06:55,130
but you can see if I refresh this page, it's still purple.

39144
00:06:55,760 --> 00:07:00,760
And if I go into the Chrome developer tools and we take a look at our elements,

39145
00:07:02,510 --> 00:07:07,310
you can see that the body still has CSS saying that the background color should

39146
00:07:07,310 --> 00:07:11,660
be purple. If we go to the sources inside the static folder,

39147
00:07:11,720 --> 00:07:14,290
there's our styles.css. And you can see

39148
00:07:14,300 --> 00:07:18,500
this is an older version of our style sheet. So what's going on?

39149
00:07:18,590 --> 00:07:22,970
Is it because we didn't save this change? No, we definitely saved it.

39150
00:07:23,570 --> 00:07:28,400
What's actually happening is that to save your internet usage,

39151
00:07:28,700 --> 00:07:33,700
Chrome likes to cache the style sheets and other static files,

39152
00:07:34,310 --> 00:07:35,960
so images or JavaScript.

39153
00:07:36,530 --> 00:07:39,770
and the reason why it does that is because when you visit a website,

39154
00:07:40,130 --> 00:07:41,990
if you're visiting it on the same day,

39155
00:07:42,290 --> 00:07:45,200
these static files are unlikely to change.

39156
00:07:45,530 --> 00:07:50,530
A website is unlikely to update their CSS or their images over one day.

39157
00:07:51,470 --> 00:07:54,380
So once the browser downloads it,

39158
00:07:54,620 --> 00:07:56,990
it keeps hold of those static files.

39159
00:07:57,350 --> 00:08:01,910
This just means that you don't have to keep downloading these large files every

39160
00:08:01,910 --> 00:08:04,340
single time you hit up the same website.

39161
00:08:05,090 --> 00:08:10,090
That's kind of good if we are in fact visiting a real live website.

39162
00:08:11,120 --> 00:08:14,330
But when we're testing, it's a little bit confusing.

39163
00:08:14,900 --> 00:08:19,610
So one of the things you have to do is you have to get Chrome to hard reload.

39164
00:08:20,330 --> 00:08:25,330
And you can do that by holding down the shift key and clicking on this refresh

39165
00:08:25,850 --> 00:08:29,450
button, which is going to do a hard reload.

39166
00:08:29,660 --> 00:08:34,220
And it's going to get rid of all the cached files and pull in any new files.

39167
00:08:34,970 --> 00:08:39,970
So now the background changes to red. And we can confirm that by... let's change

39168
00:08:40,309 --> 00:08:44,930
this to blue hit save on that file, holding down shift, reload,

39169
00:08:45,050 --> 00:08:47,450
and we get the blue background updating.

39170
00:08:48,590 --> 00:08:52,640
So that's just something to be careful about when you find that your CSS files

39171
00:08:52,640 --> 00:08:56,300
or your other static files are not being changed or not being rendered.


39172
00:00:00,420 --> 00:00:00,990
All right guys,

39173
00:00:00,990 --> 00:00:04,890
it's time for another challenge to review what we learned in the last lesson.

39174
00:00:05,520 --> 00:00:10,520
Back when we learned CSS on days 43 and 44, the end project that we created

39175
00:00:12,060 --> 00:00:15,990
was a personal site that looks something like this.

39176
00:00:15,990 --> 00:00:19,890
It's beautifully designed with CSS styling,

39177
00:00:20,220 --> 00:00:24,480
images, gifs, and a whole lot more. Now,

39178
00:00:24,480 --> 00:00:29,480
what I want you to do is to take your version of this personal site and get it

39179
00:00:29,940 --> 00:00:33,930
to run with your Python server. And in the process,

39180
00:00:33,960 --> 00:00:37,170
you'll review what you learned about rendering HTML files

39181
00:00:37,560 --> 00:00:39,510
as well as serving up static files.

39182
00:00:40,470 --> 00:00:43,860
Hopefully, you've got all your files lying around somewhere in your computer.

39183
00:00:44,340 --> 00:00:45,240
If you don't,

39184
00:00:45,330 --> 00:00:50,010
you can go ahead and head over to the course resources where I've included a

39185
00:00:50,010 --> 00:00:53,940
link to download all of these files as a zip file.

39186
00:00:54,810 --> 00:00:57,630
Once you have unzipped that zip file,

39187
00:00:57,660 --> 00:01:01,020
you should end up with a folder that looks like this.

39188
00:01:01,050 --> 00:01:05,880
We've got our favicon, our CSS folder with our styles.css,

39189
00:01:06,270 --> 00:01:09,000
our image folder with all four images,

39190
00:01:09,420 --> 00:01:14,420
and you want to move these files to their respective places inside the personal

39191
00:01:14,520 --> 00:01:15,353
site.

39192
00:01:15,360 --> 00:01:20,360
Feel free to go ahead and delete the index.html and the styles.css

39193
00:01:20,850 --> 00:01:25,850
and see if you're able to use the files that you've got here to render it using

39194
00:01:27,360 --> 00:01:30,960
your Python server. Pause the video and give that a go.

39195
00:01:31,130 --> 00:01:31,963
All right.

39196
00:01:35,510 --> 00:01:35,780
All right.

39197
00:01:35,780 --> 00:01:40,760
So the first thing we need to do is to move the files in here to their respective

39198
00:01:40,790 --> 00:01:45,470
places. The index.html is going to go inside the templates folder,

39199
00:01:46,040 --> 00:01:49,730
but pretty much everything else is going to go inside the static folder.

39200
00:01:49,970 --> 00:01:54,230
So that includes the CSS, the favicon, as well as the images folder.

39201
00:01:57,650 --> 00:01:59,810
Now that we've moved everything in here,

39202
00:02:00,500 --> 00:02:04,100
there's actually nothing we need to do inside our server.py

39203
00:02:04,130 --> 00:02:08,449
because it's still trying to render a webpage called index.html,

39204
00:02:08,780 --> 00:02:13,370
which in our case, it's still called index.html. Now,

39205
00:02:13,430 --> 00:02:17,840
the thing that we do have to change though is inside our index.html

39206
00:02:18,140 --> 00:02:22,460
it's pointing straight towards css/styles.css,

39207
00:02:22,820 --> 00:02:26,600
and also for the favicon, it's pointing straight to the favicon file.

39208
00:02:26,960 --> 00:02:31,280
What we need to do is to take into account that it's now living inside a folder

39209
00:02:31,340 --> 00:02:32,390
called static.

39210
00:02:33,590 --> 00:02:38,060
So we're going to have to add the full file path to anywhere where we have a

39211
00:02:38,120 --> 00:02:40,850
local static file being used.

39212
00:02:41,150 --> 00:02:43,340
So that includes the CSS,

39213
00:02:43,400 --> 00:02:48,400
that includes the favicon, also any of the images that we're using in here.

39214
00:02:49,190 --> 00:02:51,860
And if you want for sort of convenience sake,

39215
00:02:51,890 --> 00:02:54,680
you can actually just copy this part

39216
00:02:54,710 --> 00:02:58,340
which is the source of the images and then you can hold down

39217
00:02:58,400 --> 00:03:03,400
Command+ R on Mac or Control + R on Windows to bring up the find and replace.

39218
00:03:05,650 --> 00:03:10,650
And we're gonna replace this with static/images/. So we're basically

39219
00:03:13,090 --> 00:03:18,090
adding static to this images/. And if we go ahead and replace it in all five

39220
00:03:19,750 --> 00:03:24,370
places, then we should now be done with all of our refactorings.

39221
00:03:25,930 --> 00:03:30,930
Now let's go ahead and restart our file so that it looks at all of these new

39222
00:03:32,740 --> 00:03:36,370
image, and let's go to our website

39223
00:03:36,400 --> 00:03:38,500
which is being served up by Python

39224
00:03:38,890 --> 00:03:42,160
and hopefully you have the same result as I do

39225
00:03:42,610 --> 00:03:44,950
which is the same personal site,

39226
00:03:45,340 --> 00:03:48,760
but now served up with our Python server.

39227
00:03:50,440 --> 00:03:54,040
Now this process has been pretty pain-free

39228
00:03:54,040 --> 00:03:58,330
I would say. We simply moved in the required index.html,

39229
00:03:58,330 --> 00:04:01,120
the CSS images and the favicons,

39230
00:04:01,180 --> 00:04:04,180
so all the files that make up a particular website.

39231
00:04:04,630 --> 00:04:08,890
And we simply added it to our Flask project.

39232
00:04:09,730 --> 00:04:10,300
Now,

39233
00:04:10,300 --> 00:04:15,300
what you can also do is you can get templates of HTML and CSS files from the

39234
00:04:16,600 --> 00:04:20,050
internet. For example, a website like html

39235
00:04:20,050 --> 00:04:21,700
5up.net,

39236
00:04:22,089 --> 00:04:26,800
where they have beautiful free templates that you can tap into.

39237
00:04:27,640 --> 00:04:30,370
Now consider if you were creating your own personal site,

39238
00:04:30,490 --> 00:04:34,780
then you can pick from all of these beautiful HTML templates

39239
00:04:35,080 --> 00:04:40,000
which you can then update and personalize. For example,

39240
00:04:40,030 --> 00:04:44,200
if we take this first one, we can go ahead and see it as a live demo.

39241
00:04:44,530 --> 00:04:49,120
So we can see this website as it is, and we can see how cool it looks.

39242
00:04:49,420 --> 00:04:54,130
It's got buttons, it's got JavaScript, it's got beautiful CSS styling,

39243
00:04:54,460 --> 00:04:58,870
and this might be a really good website for say, keeping track of our portfolio,

39244
00:04:58,900 --> 00:05:02,560
like the website's that we're building; to have images of the websites,

39245
00:05:02,650 --> 00:05:05,500
a link to the website, some brief description.

39246
00:05:05,770 --> 00:05:09,670
And then we could just put this up online and whenever we want to get hired as a

39247
00:05:09,670 --> 00:05:12,250
web developer, we could point people towards it.

39248
00:05:13,000 --> 00:05:16,900
So how do we make this work with Python? Well,

39249
00:05:16,900 --> 00:05:19,870
the first thing we have to do is simply hit download,

39250
00:05:20,410 --> 00:05:24,460
and it's going to download all of the files that make up this website.

39251
00:05:25,180 --> 00:05:28,240
Now remember that because we're getting it for free,

39252
00:05:28,480 --> 00:05:32,800
we need to attribute the designer who created this website.

39253
00:05:33,310 --> 00:05:37,000
If you don't want to attribute it and you want to use it for commercial use,

39254
00:05:37,390 --> 00:05:42,390
then you can pay just $19 and access all of their templates as well as support

39255
00:05:43,210 --> 00:05:47,950
from the creator. Now compare that to a service like Squarespace

39256
00:05:48,400 --> 00:05:52,690
where you're basically getting the same service templates for your website.

39257
00:05:53,080 --> 00:05:54,160
But in this case,

39258
00:05:54,340 --> 00:05:58,100
you're going to be paying anywhere between $10 to $30 per month

39259
00:05:58,190 --> 00:06:02,480
which is a lot more expensive, but it's great if you don't know web development.

39260
00:06:02,870 --> 00:06:05,000
But we're not going to be in that camp anymore.

39261
00:06:06,110 --> 00:06:09,410
Let's go ahead and unzip that file that we just downloaded,

39262
00:06:09,860 --> 00:06:11,600
which was called paradigm shift.

39263
00:06:11,990 --> 00:06:16,990
And we're going to try and transfer these files to our website over here.

39264
00:06:18,140 --> 00:06:18,890
So again,

39265
00:06:18,890 --> 00:06:22,760
I'm going to go ahead and delete all of the previous files that's inside my

39266
00:06:22,760 --> 00:06:24,830
static and templates folders,

39267
00:06:24,880 --> 00:06:25,713
...

39268
00:06:28,480 --> 00:06:33,130
and I'm going to try and move the relevant parts of this new website over.

39269
00:06:33,880 --> 00:06:36,760
So here, they've got an index.html,

39270
00:06:36,850 --> 00:06:39,280
a read me text and a license text.

39271
00:06:39,730 --> 00:06:43,930
So all we need is to move our index.html to the templates

39272
00:06:45,670 --> 00:06:49,600
and the images and assets over to the static folder.

39273
00:06:50,200 --> 00:06:51,033
Right.

39274
00:06:52,360 --> 00:06:55,330
Now, one of the things to note is when you're looking at the demo,

39275
00:06:55,330 --> 00:06:57,100
there's all of these beautiful pictures,

39276
00:06:57,430 --> 00:07:01,660
but of course the designer doesn't have the rights to these pictures to

39277
00:07:01,660 --> 00:07:06,430
distribute. So you'll notice that all the images inside the images folder

39278
00:07:06,700 --> 00:07:08,620
are these sort of gradients.

39279
00:07:08,770 --> 00:07:11,920
So don't be worried if when you run your website,

39280
00:07:11,950 --> 00:07:15,610
you just see a bunch of blurry gradients. It's not a problem.

39281
00:07:16,930 --> 00:07:21,580
Now what we want to do is we want to see if we can get this index.html to

39282
00:07:21,580 --> 00:07:25,270
work when it's being served up by our server. Now,

39283
00:07:25,300 --> 00:07:29,410
the first thing we can do is simply just restart our project,

39284
00:07:29,440 --> 00:07:31,900
rerun it and see what it looks like.

39285
00:07:32,350 --> 00:07:37,350
So let's refresh this static page and you can see it's got all of the HTML,

39286
00:07:38,020 --> 00:07:40,210
but no styling and no images.

39287
00:07:40,660 --> 00:07:45,660
So that is probably because we're not specifying the static folder in the path.

39288
00:07:47,290 --> 00:07:49,360
So here we've got our assets,

39289
00:07:51,070 --> 00:07:55,570
and here we've got an image, but they're both inside the static folder.

39290
00:07:56,260 --> 00:08:00,700
So we can do that quick trick with find and replace.

39291
00:08:01,210 --> 00:08:04,210
So for anything that's inside the images folder,

39292
00:08:04,240 --> 00:08:09,100
we're going to replace it with static/images and for anything that's

39293
00:08:09,100 --> 00:08:10,750
inside the assets folder,

39294
00:08:11,050 --> 00:08:14,230
we're going to replace it with static/assets.

39295
00:08:14,950 --> 00:08:15,783
Right?

39296
00:08:17,140 --> 00:08:21,370
And now if we go ahead and hit save and refresh this page,

39297
00:08:21,700 --> 00:08:25,750
you can see it's now rendering the images as these sort of gradients

39298
00:08:26,170 --> 00:08:30,910
and it also rendering the styling and CSS. Now,

39299
00:08:30,940 --> 00:08:34,059
how would you edit this? Well, the easiest way is of course,

39300
00:08:34,090 --> 00:08:36,820
to actually just edit this raw HTML.

39301
00:08:37,299 --> 00:08:42,250
So you can take any of this HTML and you already understand what most of it

39302
00:08:42,280 --> 00:08:46,480
does. You've got tables, you've got headings, you got h1s,

39303
00:08:46,750 --> 00:08:48,190
all sorts of tags in here.

39304
00:08:49,930 --> 00:08:53,650
And you can edit it just like that. For example,

39305
00:08:53,650 --> 00:08:55,890
if we scroll up to very top,

39306
00:08:56,130 --> 00:09:00,900
we can change the title to a name for example,

39307
00:09:00,900 --> 00:09:05,580
Angela's portfolio. And we can change the h1 

39308
00:09:05,610 --> 00:09:10,050
which says paradigm shift to our own name for example.

39309
00:09:10,560 --> 00:09:13,410
And now when I hit save and I refresh over here,

39310
00:09:13,710 --> 00:09:15,840
you can see all of that being reflected.

39311
00:09:16,560 --> 00:09:20,670
Now there's an even better way of editing HTML in Chrome.

39312
00:09:21,330 --> 00:09:23,520
All thanks to the Chrome developer tools.

39313
00:09:24,000 --> 00:09:27,120
If we open up the Chrome developer tools and go to the console,

39314
00:09:27,180 --> 00:09:32,180
we can actually type a little bit of JavaScript to make anything on our webpage

39315
00:09:32,400 --> 00:09:37,050
editable. So to write this, we tap into the document

39316
00:09:37,080 --> 00:09:41,490
which is this entire HTML document, and then we tap into the body

39317
00:09:41,790 --> 00:09:45,690
which has everything inside the body tag, which is the content of the website.

39318
00:09:46,230 --> 00:09:51,230
And then we can call on a property called contentEditable,

39319
00:09:52,830 --> 00:09:57,300
and we can set that to true. Now note here that in JavaScript,

39320
00:09:57,630 --> 00:10:02,630
the true booelan is spelled out with a lower t, not capital T like in Python.

39321
00:10:04,320 --> 00:10:06,480
But the rest of it is pretty standard code

39322
00:10:06,510 --> 00:10:11,340
and we can all understand that. Now once I hit enter and that goes through,

39323
00:10:11,700 --> 00:10:14,640
I can close down this pane and now watch this.

39324
00:10:15,210 --> 00:10:17,820
I can now edit anything that's on this website.

39325
00:10:18,380 --> 00:10:19,213
Cool.

39326
00:10:21,590 --> 00:10:26,590
All of these paragraphs or any bits of text is now completely editable.

39327
00:10:27,890 --> 00:10:30,530
Now, what if you want to delete some of these elements,

39328
00:10:30,560 --> 00:10:33,440
what would be the easiest way to do that? Well,

39329
00:10:33,440 --> 00:10:36,860
you can simply open up the Chrome developer tools,

39330
00:10:37,340 --> 00:10:41,960
and then we can use this little button here to select any element.

39331
00:10:42,380 --> 00:10:46,160
So maybe we want to get rid of this paragraph here, select it,

39332
00:10:46,520 --> 00:10:51,520
it locates it in the HTML and I can just hit backspace. So I can select any part

39333
00:10:53,270 --> 00:10:56,450
of the HTML elements that I don't like for example,

39334
00:10:56,450 --> 00:11:00,020
if I want to get rid of this whole section well I would select it and then

39335
00:11:00,020 --> 00:11:00,853
delete it.

39336
00:11:01,130 --> 00:11:05,180
Maybe I could delete some more sections and make this a lot simpler.

39337
00:11:05,420 --> 00:11:08,780
Now you can see this website just has two sections,

39338
00:11:08,810 --> 00:11:10,550
my name and my contact details.

39339
00:11:12,560 --> 00:11:14,210
One of the unfortunate things though,

39340
00:11:14,300 --> 00:11:18,440
is that all of the changes that you're making here, even though you can see it

39341
00:11:18,440 --> 00:11:21,290
and it's great, as soon as you hit refresh,

39342
00:11:21,740 --> 00:11:23,840
all of those changes will disappear.

39343
00:11:24,350 --> 00:11:26,810
And the reason is because when you hit refresh,

39344
00:11:27,110 --> 00:11:31,790
what's happening is your browser is going to your server at this address and

39345
00:11:31,790 --> 00:11:34,940
requesting all of the HTML and CSS files,

39346
00:11:35,480 --> 00:11:37,760
which of course comes from over here.

39347
00:11:38,330 --> 00:11:41,810
So this is unchanged by what we've done just now,

39348
00:11:41,900 --> 00:11:44,540
it's completely not changed at all.

39349
00:11:45,020 --> 00:11:48,380
So if you want all of these changes that you've made in the HTML,

39350
00:11:48,470 --> 00:11:53,470
then what you have to do is actually save this webpage as it is.

39351
00:11:54,670 --> 00:11:58,480
And then you can move this HTML into your templates

39352
00:11:58,930 --> 00:12:03,930
and you can see that this is now a lot shorter with all of the changes that we

39353
00:12:04,900 --> 00:12:06,280
made previously.

39354
00:12:06,880 --> 00:12:10,720
And you can replace this with what's inside your index.html.

39355
00:12:11,530 --> 00:12:16,530
This is probably one of the easiest ways of modifying a prebuilt template.

39356
00:12:18,910 --> 00:12:23,320
And you can see that there's plenty of templates for you to play around with.

39357
00:12:23,890 --> 00:12:28,270
In fact, in the next lesson, when we're creating our final project,

39358
00:12:28,690 --> 00:12:33,310
you're going to be editing this identity template completely from scratch.

39359
00:12:33,820 --> 00:12:36,940
And you are going to be creating a digital name card.

39360
00:12:37,660 --> 00:12:39,070
So have a play around.

39361
00:12:39,580 --> 00:12:42,940
And once you're done, head over to the next lesson and complete the final

39362
00:12:42,940 --> 00:12:43,510
project.


39363
00:00:00,450 --> 00:00:02,969
All right, so let's go ahead and run through the solution.

39364
00:00:03,270 --> 00:00:05,939
The first thing I'm going to do is to head over

39365
00:00:05,939 --> 00:00:08,310
to the website and download the template.

39366
00:00:09,270 --> 00:00:11,040
Once I've downloaded the template,

39367
00:00:11,070 --> 00:00:16,070
I'm going to unzip the file and get access to all the files inside.

39368
00:00:17,490 --> 00:00:20,370
Now I've already set up my Flask server

39369
00:00:20,400 --> 00:00:23,760
which is pretty simple by now. I've created my app,

39370
00:00:24,090 --> 00:00:29,090
I've set up the home routes and I've set my app to run on debug mode.

39371
00:00:30,270 --> 00:00:34,230
Now I have to create the necessary directories.

39372
00:00:34,260 --> 00:00:37,020
So I'm going to need a directory called templates,

39373
00:00:37,560 --> 00:00:41,100
and I'm also going to need one called static.

39374
00:00:42,750 --> 00:00:44,880
With those two folders in place

39375
00:00:44,880 --> 00:00:49,880
I can now start moving over the relevant parts of these files; index.html

39376
00:00:51,390 --> 00:00:55,080
goes into templates, assets

39377
00:00:55,170 --> 00:00:57,150
and images go into static.

39378
00:00:59,510 --> 00:01:00,343
Right

39379
00:01:00,470 --> 00:01:00,740
Now,

39380
00:01:00,740 --> 00:01:05,740
one of the first things we're going to try and do is just to see if this works.

39381
00:01:06,290 --> 00:01:11,090
So we're gonna start up our server and try to render that index.html.

39382
00:01:12,080 --> 00:01:15,530
And if you've got another project running in the background

39383
00:01:15,530 --> 00:01:18,230
which is using our server address,

39384
00:01:18,470 --> 00:01:21,740
then you are going to get an error that says address already in use.

39385
00:01:21,980 --> 00:01:26,210
So just make sure you stop any other files from running and then run this again.

39386
00:01:28,250 --> 00:01:32,540
So here's our webpage with just the HTML. It's very,

39387
00:01:32,540 --> 00:01:36,290
very simple, and it doesn't have any of the styling or the images.

39388
00:01:36,710 --> 00:01:41,240
So we're going to have to fix that by going into the index.html and figuring

39389
00:01:41,240 --> 00:01:44,300
out which parts of it need to be changed.

39390
00:01:44,900 --> 00:01:48,860
Now notice that in the download, we got two folders;

39391
00:01:48,950 --> 00:01:52,370
assets and images which are now both inside static.

39392
00:01:52,700 --> 00:01:57,700
So we're going to have to find and replace anything that is assets and change

39393
00:02:00,170 --> 00:02:03,350
that to static/assets,

39394
00:02:03,770 --> 00:02:04,603
...

39395
00:02:06,560 --> 00:02:09,169
and also do the same with images,

39396
00:02:14,510 --> 00:02:14,870
right?

39397
00:02:14,870 --> 00:02:17,300
There's actually not a lot of code in here.

39398
00:02:17,330 --> 00:02:21,080
You can pretty much scroll from the top to the bottom and you can see there's

39399
00:02:21,080 --> 00:02:23,090
not a lot of stuff here.

39400
00:02:23,750 --> 00:02:26,660
So now that we've fixed those paths,

39401
00:02:26,720 --> 00:02:30,920
let's see if we can hit save and go back to refresh our website.

39402
00:02:31,880 --> 00:02:34,310
Now, if you are getting what I'm seeing here

39403
00:02:34,310 --> 00:02:39,310
which is the CSS file being rendered from the previous project where we got hold

39404
00:02:40,640 --> 00:02:45,640
of the portfolio site, that remember is because the CSS file is a static file and

39405
00:02:46,730 --> 00:02:50,660
it's being cached by the Chrome browser. So as I mentioned before,

39406
00:02:50,660 --> 00:02:55,660
you have to hold down shift and hit refresh in order to get the new static files

39407
00:02:56,090 --> 00:03:00,040
to come over. So now that we've got all of this,

39408
00:03:00,160 --> 00:03:05,160
it's time to actually edit the text and the links. Going into here,

39409
00:03:05,890 --> 00:03:10,360
we can see that here is the h1 which we can change quite easily,

39410
00:03:10,410 --> 00:03:11,243
...

39411
00:03:13,440 --> 00:03:18,210
and you can of course add your hrefs to these links for Twitter,

39412
00:03:18,210 --> 00:03:19,650
Instagram, Facebook,

39413
00:03:20,190 --> 00:03:25,190
copy your Twitter URL and change the Href here to that

39414
00:03:26,670 --> 00:03:27,503
if you wish.

39415
00:03:28,350 --> 00:03:32,010
And you can change the footer as well. Now,

39416
00:03:32,040 --> 00:03:36,360
remember because we didn't buy these templates and we're using it for personal

39417
00:03:36,360 --> 00:03:40,560
use, we should really attribute the source where we got it from.

39418
00:03:40,590 --> 00:03:45,570
So I'll just leave that as it is. Now, if I hit save,

39419
00:03:45,600 --> 00:03:49,710
you can see I've pretty much updated all the text to what I want.

39420
00:03:50,670 --> 00:03:53,760
And you can see that this avatar image has disappeared

39421
00:03:54,210 --> 00:03:57,660
and the reason is because when I was doing the finding and replacing,

39422
00:03:57,960 --> 00:03:59,520
I wasn't careful enough

39423
00:03:59,550 --> 00:04:02,970
and I didn't add in the final trailing slash

39424
00:04:03,240 --> 00:04:06,960
which should in fact be right here.

39425
00:04:07,980 --> 00:04:12,390
So this is going to now render the avatar image.

39426
00:04:12,600 --> 00:04:14,070
But of course at the moment,

39427
00:04:14,070 --> 00:04:18,390
it's just this blank gradient image inside the images folder.

39428
00:04:19,019 --> 00:04:23,610
So what we can do is we can simply replace it with our own image.

39429
00:04:25,290 --> 00:04:29,490
So, here in my downloads folder, I've got an image called angela.png.

39430
00:04:29,970 --> 00:04:34,970
So I'm going to move my own image into the images folder and refactor that.

39431
00:04:36,120 --> 00:04:38,610
And then back in our index.html,

39432
00:04:38,670 --> 00:04:43,410
I'm going to point towards that image by changing this file path.

39433
00:04:43,860 --> 00:04:47,070
So now I can go ahead and delete this avatar image.

39434
00:04:47,640 --> 00:04:51,120
And if I hit save and go back to my website,

39435
00:04:51,420 --> 00:04:55,320
you can see my photo now shows up inside the image.

39436
00:04:56,670 --> 00:05:01,110
The next thing I want to add is a background image under this gradient here.

39437
00:05:01,590 --> 00:05:06,590
So one of the best places to find great images for commercial use is a website

39438
00:05:07,530 --> 00:05:08,760
called Unsplash.

39439
00:05:09,150 --> 00:05:13,860
So if we look for some sort of image that we could put as the background,

39440
00:05:14,250 --> 00:05:17,280
maybe a beach or a sea,

39441
00:05:18,360 --> 00:05:22,290
you can see there's thousands of images that you can choose from.

39442
00:05:22,560 --> 00:05:26,700
And they all look incredibly beautiful, and they're all large, all HD.

39443
00:05:27,630 --> 00:05:30,870
I've decided to go with this picture of the seashore.

39444
00:05:31,020 --> 00:05:33,390
And if I go ahead and click on download free,

39445
00:05:33,720 --> 00:05:38,460
it should download the large JPEG image onto my computer.

39446
00:05:39,090 --> 00:05:43,920
So now I'm going to go ahead and rename that image to

39447
00:05:44,010 --> 00:05:46,950
the same name as the original background image

39448
00:05:46,980 --> 00:05:49,290
which is just a bg.jpeg.

39449
00:05:50,130 --> 00:05:50,963
Right.

39450
00:05:52,740 --> 00:05:53,573
Like that.

39451
00:05:53,730 --> 00:05:58,730
And now I can delete this file and replace it with my own background.

39452
00:05:59,870 --> 00:06:04,870
So remember that the background image here it is actually being rendered from

39453
00:06:04,880 --> 00:06:06,080
the CSS files.

39454
00:06:06,380 --> 00:06:10,640
And if you look inside the main.css you can see here where it sets the

39455
00:06:10,640 --> 00:06:11,690
background image,

39456
00:06:12,020 --> 00:06:17,020
it's actually generating a gradient and it's overlaying that on top of something

39457
00:06:18,080 --> 00:06:21,260
inside the images folder called bg.jpeg.

39458
00:06:21,530 --> 00:06:23,930
So instead of changing it all over here,

39459
00:06:24,230 --> 00:06:29,230
all we just did is just name our image the same as what they had before.

39460
00:06:29,870 --> 00:06:33,290
Now, if we go ahead and rerun our website,

39461
00:06:33,980 --> 00:06:37,730
go back to our website and hard reload,

39462
00:06:37,730 --> 00:06:41,300
remember by holding down shift and clicking on the reload button,

39463
00:06:41,660 --> 00:06:45,770
you can see that image has now been brought in behind this gradient.

39464
00:06:46,820 --> 00:06:51,820
Now the last step is to change that title so that it says our name instead of a

39465
00:06:53,750 --> 00:06:57,200
placeholder text. So let's go ahead and change the title

39466
00:07:01,450 --> 00:07:02,110
...

39467
00:07:02,110 --> 00:07:04,960
to our name and there we have it.

39468
00:07:05,410 --> 00:07:07,960
We're now serving up this beautiful website

39469
00:07:08,140 --> 00:07:12,880
which we got completely from a template that somebody else's developed.

39470
00:07:13,300 --> 00:07:17,770
And all we needed to do was to have enough understanding of HTML,

39471
00:07:17,770 --> 00:07:22,770
CSS and how Python servers work in order to customize it for our own purposes.

39472
00:07:24,340 --> 00:07:25,990
I hope you enjoyed building this with me

39473
00:07:26,080 --> 00:07:29,950
and I hope you'll look through some of the other templates and start messing

39474
00:07:29,950 --> 00:07:33,910
around with some of them to create your own custom websites.



39475
00:00:00,090 --> 00:00:04,860
Hey guys, welcome to day 57 of 100 Days of Code. Today

39476
00:00:04,860 --> 00:00:09,480
we're going to be digging deeper into building more advanced Flask applications.

39477
00:00:10,050 --> 00:00:12,720
And in order to do that, we're going to be learning about URL

39478
00:00:12,720 --> 00:00:15,630
building and templating with Jinja.

39479
00:00:16,470 --> 00:00:19,470
So very often when you're creating a website,

39480
00:00:19,800 --> 00:00:24,800
you'll get cases where you actually don't want to create the page entirely from

39481
00:00:24,810 --> 00:00:26,520
scratch. For example,

39482
00:00:26,520 --> 00:00:31,520
if you had a blog and you wanted to have several different posts in the blog,

39483
00:00:32,430 --> 00:00:36,660
you don't want to create a separate HTML file for each blog post.

39484
00:00:37,140 --> 00:00:37,920
So in that case,

39485
00:00:37,920 --> 00:00:42,920
it's really helpful to have a templating language where you can replace bits of

39486
00:00:43,650 --> 00:00:46,290
that blog with dynamic content.

39487
00:00:47,250 --> 00:00:48,960
And that's where Jinja comes in.

39488
00:00:49,230 --> 00:00:52,080
This is a templating language built for Python,

39489
00:00:52,530 --> 00:00:55,890
and it's going to allow us to create the general layout of our blog,

39490
00:00:56,070 --> 00:01:00,720
the styling and the structure, and then to replace the content, for example,

39491
00:01:00,720 --> 00:01:05,720
the title or the subtitle or the body with dynamic content

39492
00:01:05,910 --> 00:01:09,420
that's generated each time we load a specific page.

39493
00:01:10,320 --> 00:01:12,210
And by the end of today,

39494
00:01:12,240 --> 00:01:16,980
you will have built a very simple blog with a number of blog posts.

39495
00:01:17,220 --> 00:01:19,560
So here we can see the title and subtitle.

39496
00:01:19,920 --> 00:01:23,460
And then when we click on read to see the blog post in detail,

39497
00:01:23,730 --> 00:01:25,650
we go to a different page.

39498
00:01:25,980 --> 00:01:29,970
And depending on which of these blog posts we've clicked on,

39499
00:01:30,240 --> 00:01:33,690
you can see that we're rendering basically the same layout,

39500
00:01:33,720 --> 00:01:36,300
the same styling and the same structure,

39501
00:01:36,540 --> 00:01:39,570
but each time for each of these pages,

39502
00:01:39,930 --> 00:01:44,160
we're getting some different content. So that's the goal.

39503
00:01:44,550 --> 00:01:48,270
And once you're ready, head over to the next lesson and we'll get started.


39504
00:00:00,270 --> 00:00:04,710
Now to begin, all we need is a simple Flask application.

39505
00:00:05,100 --> 00:00:08,340
You can either write this out from scratch for practice,

39506
00:00:08,610 --> 00:00:13,610
or you can head over to the course resources and you can download this file as a

39507
00:00:13,800 --> 00:00:17,640
zip file. Once you've unzipped it and opened it in PyCharm,

39508
00:00:17,850 --> 00:00:20,520
you should see a server.py file

39509
00:00:20,790 --> 00:00:25,790
which contains all of the basic code that is required to render hello world onto

39510
00:00:26,610 --> 00:00:27,443
the screen.

39511
00:00:27,930 --> 00:00:32,930
So if we go ahead and just run this file and go to the local URL of our website,

39512
00:00:34,410 --> 00:00:39,090
you should just be able to see hello world. Now,

39513
00:00:39,120 --> 00:00:42,720
the next thing I want you to do is to create an HTML file

39514
00:00:42,900 --> 00:00:46,530
which you'll call index, and inside this HTML file,

39515
00:00:46,740 --> 00:00:51,740
we're going to give it a title of just my website and the more important part is

39516
00:00:52,560 --> 00:00:55,830
going to occur in the body. For practice,

39517
00:00:55,860 --> 00:00:59,490
go ahead and see if you can create an h1 that says hello world

39518
00:00:59,820 --> 00:01:04,819
instead of returning just a hello world as text, and render this index HTML onto

39519
00:01:06,540 --> 00:01:11,160
the screen instead. Pause the video and see if you can complete this challenge.

39520
00:01:14,040 --> 00:01:14,370
All right.

39521
00:01:14,370 --> 00:01:18,630
So the first thing we have to do was to create an h1 that said hello world.

39522
00:01:19,440 --> 00:01:22,290
And once we've created our index.html,

39523
00:01:22,530 --> 00:01:27,510
we want to render it as a template instead of just returning this text.

39524
00:01:27,990 --> 00:01:32,340
So to do that, we're gonna need this render template function at the top.

39525
00:01:32,850 --> 00:01:34,800
So if we're going to say render template,

39526
00:01:35,070 --> 00:01:39,180
and then the template we want to render is called index.html.

39527
00:01:39,570 --> 00:01:44,040
But one thing you have to remember is that this file has to be inside a folder

39528
00:01:44,070 --> 00:01:49,070
called templates because Flask has specific requirements for things like

39529
00:01:49,680 --> 00:01:51,180
static files and templates.

39530
00:01:53,340 --> 00:01:58,020
So now we should be ready to rerun our app so that it will take into account the

39531
00:01:58,020 --> 00:02:03,020
new files and then go to our website and you should see this hello world is

39532
00:02:03,180 --> 00:02:07,230
being rendered from our index.html. Now,

39533
00:02:07,260 --> 00:02:11,039
one of the things you might be wondering is why is this a template?

39534
00:02:11,100 --> 00:02:12,870
Why are we rendering a template

39535
00:02:13,200 --> 00:02:17,370
when in fact what we're doing is just sending over an HTML file?

39536
00:02:17,910 --> 00:02:21,930
Well, the HTML files can actually act as a template

39537
00:02:22,320 --> 00:02:25,800
as long as we know how to work with a templating language.

39538
00:02:26,820 --> 00:02:30,330
The templating language that we're going to use is called Jinja

39539
00:02:30,780 --> 00:02:33,210
and this is specific for Python.

39540
00:02:33,750 --> 00:02:38,750
It allows us to use some syntax like these curly braces, percentage signs,

39541
00:02:40,110 --> 00:02:45,000
or double curly braces in order to specify inside the HTML file

39542
00:02:45,330 --> 00:02:50,010
which parts should actually be evaluated as Python code.

39543
00:02:50,640 --> 00:02:51,690
Let me show you something.

39544
00:02:52,380 --> 00:02:56,190
We've already seen that just by putting this text in between the h1

39545
00:02:56,520 --> 00:03:00,310
we get this rendered as text in the h1.

39546
00:03:01,090 --> 00:03:05,410
And if I go ahead and I wrote something like 5 * 6,

39547
00:03:05,710 --> 00:03:08,980
what would you expect our website to look like? Well,

39548
00:03:08,980 --> 00:03:12,610
if I go ahead and hit save, and because we're in debug mode,

39549
00:03:12,670 --> 00:03:16,960
then our server should allow us to refresh the page and you see,

39550
00:03:16,960 --> 00:03:21,490
it's just the plain text of what I wrote right here. Now, however,

39551
00:03:21,580 --> 00:03:26,580
if I go ahead and add two curly braces around this expression,

39552
00:03:27,700 --> 00:03:31,690
then this now suddenly becomes evaluated as Python code.

39553
00:03:32,140 --> 00:03:36,790
So let's hit save again and let's hit refresh and you can see now

39554
00:03:36,790 --> 00:03:40,030
instead of 5 * 6, I get 30.

39555
00:03:40,510 --> 00:03:43,600
So this is actually being seen as Python code

39556
00:03:43,900 --> 00:03:47,680
and the calculated outcome is being put into this h1.

39557
00:03:48,550 --> 00:03:51,310
This is why this is known as a templating language,

39558
00:03:51,640 --> 00:03:53,800
because it means that we can have an HTML

39559
00:03:53,800 --> 00:03:58,720
which acts as the template where the title doesn't change, the head doesn't

39560
00:03:58,720 --> 00:03:59,080
change,

39561
00:03:59,080 --> 00:04:04,080
the styling doesn't change, and only the parts which we specify inside these curly

39562
00:04:04,510 --> 00:04:09,510
braces actually get evaluated as Python code and inserted into the template.

39563
00:04:12,250 --> 00:04:15,520
I'm going to add back the hello world inside an h1

39564
00:04:15,940 --> 00:04:20,940
and also our Python expression inside this Jinja markup so that you can see

39565
00:04:22,420 --> 00:04:23,410
both versions.

39566
00:04:24,040 --> 00:04:29,040
The next thing I want to do is what if I wanted to generate a random number?

39567
00:04:29,890 --> 00:04:32,950
Let's say I was to create an h3 and inside here

39568
00:04:32,950 --> 00:04:37,630
I wanted to generate a random number. How would I do that?

39569
00:04:38,950 --> 00:04:43,120
Well, when we're working with something that requires an import, for example,

39570
00:04:43,120 --> 00:04:46,420
to get a random number, we're going to need to import the random module,

39571
00:04:46,690 --> 00:04:51,220
then it's best to write our code inside our Python server.

39572
00:04:52,120 --> 00:04:53,500
Let me show you how this works.

39573
00:04:53,590 --> 00:04:58,240
Let's go ahead and import random so that we can generate a random number.

39574
00:04:58,660 --> 00:05:03,520
And I'm going to do that inside this home function. Now,

39575
00:05:03,550 --> 00:05:07,030
in this case, I'm just going to generate a random number between 1 and 10.

39576
00:05:07,570 --> 00:05:11,380
But the most important thing is I want to be able to send this random number

39577
00:05:11,650 --> 00:05:16,650
over to my index.html and incorporate it into this template when I render

39578
00:05:17,680 --> 00:05:22,270
it. So what I can do after the first parameter

39579
00:05:22,330 --> 00:05:25,390
which is the name of the template file,

39580
00:05:25,930 --> 00:05:29,470
I can add as many keyword arguments as I need.

39581
00:05:30,550 --> 00:05:32,620
If we take a look at this render template,

39582
00:05:32,860 --> 00:05:35,380
you can see that after the name of the template,

39583
00:05:35,470 --> 00:05:38,890
the next parameter has the double star context.

39584
00:05:39,160 --> 00:05:44,160
This is basically the same as when you see the double star keyword arguments or

39585
00:05:44,680 --> 00:05:45,513
kwargs.

39586
00:05:45,940 --> 00:05:50,080
Basically it says that you can add as many keyword arguments as you want

39587
00:05:50,440 --> 00:05:54,970
and each of these keyword arguments need to have a name for the variable and a

39588
00:05:54,970 --> 00:05:56,110
value for the variable.

39589
00:05:56,560 --> 00:06:01,560
And the reason why they need have a name and value is because we can refer to

39590
00:06:02,300 --> 00:06:07,300
that variable by its name inside the templated HTML file.

39591
00:06:08,630 --> 00:06:12,650
So for example, if I go ahead and send over a variable

39592
00:06:12,650 --> 00:06:17,650
which I'll call num and then set it equal to this random number we've generated

39593
00:06:19,490 --> 00:06:23,720
here. Well, now, once this template gets rendered,

39594
00:06:23,990 --> 00:06:28,040
it's going to pass over this variable with this name and with this value.

39595
00:06:28,550 --> 00:06:32,750
So now in our index.html, I can tap into that variable name

39596
00:06:32,780 --> 00:06:33,650
which is num

39597
00:06:33,980 --> 00:06:38,980
and I can insert it using these double curly braces into the position that I

39598
00:06:39,260 --> 00:06:42,530
want it to be. So that's going to go inside that h3.

39599
00:06:43,010 --> 00:06:47,030
And now if I hit save and go ahead and refresh my website,

39600
00:06:47,270 --> 00:06:51,290
you can see I've got this random number and then a number show up.

39601
00:06:51,680 --> 00:06:53,330
And every time I hit refresh,

39602
00:06:53,570 --> 00:06:58,570
you can see that number changes to a different random number between 1 and 10.

39603
00:06:59,600 --> 00:07:04,430
So we've seen how we can render an HTML file just by using render

39604
00:07:04,430 --> 00:07:07,640
template, but we've also seen that inside the template,

39605
00:07:07,910 --> 00:07:12,860
we can use these double curly braces in order to create single lines of Python

39606
00:07:12,860 --> 00:07:13,693
expressions

39607
00:07:13,880 --> 00:07:18,620
which can be evaluated and then inserted into the position that we desire.

39608
00:07:19,160 --> 00:07:23,270
Now, we've also seen that we can pass over any variable

39609
00:07:23,270 --> 00:07:27,920
we desire as keyword arguments after the name of the template.

39610
00:07:28,610 --> 00:07:32,930
So now I've got a challenge for you. On a lot of websites, for example

39611
00:07:32,930 --> 00:07:36,500
if you go to the Jinja website which you'll find in the course resources

39612
00:07:36,650 --> 00:07:41,270
and you scroll to the very bottom, there's usually a line of copyright text.

39613
00:07:41,570 --> 00:07:44,270
So it will say copyright and the current year

39614
00:07:44,660 --> 00:07:47,030
and then the name of the creator or the company.

39615
00:07:47,840 --> 00:07:52,840
Now that year is supposed to be the current year to say that this website's

39616
00:07:54,440 --> 00:07:57,470
copyright is valid in this current year.

39617
00:07:58,010 --> 00:08:01,100
But very often, even Jinja included,

39618
00:08:01,430 --> 00:08:06,170
they don't actually update their footer because it's probably just some hard-

39619
00:08:06,170 --> 00:08:10,670
coded text, as you can see right here. Now,

39620
00:08:10,700 --> 00:08:15,260
this is something that annoys a lot of web developers and web designers.

39621
00:08:15,920 --> 00:08:20,870
And they are outraged by the idea that people would have just some plain text

39622
00:08:21,200 --> 00:08:23,960
as their copyright. We're programmers, right?

39623
00:08:23,990 --> 00:08:28,990
We should be able to update our footer dynamically by using code.

39624
00:08:29,780 --> 00:08:34,780
And this is a website which has a pretty much a sort of campaign against

39625
00:08:35,510 --> 00:08:40,340
websites with outdated footers. And if you take a look at their footer,

39626
00:08:40,429 --> 00:08:43,460
you can see that this is not just a piece of plain text.

39627
00:08:43,789 --> 00:08:48,790
This is actually a script using JavaScript to work out the value of the current

39628
00:08:50,030 --> 00:08:55,010
year. And so it's always going to be up to date no matter what year it is.

39629
00:08:55,560 --> 00:08:59,250
So we also want to have a dynamic footer year,

39630
00:08:59,790 --> 00:09:03,960
but we're not going to be doing it with JavaScript and definitely not with PHP.

39631
00:09:04,350 --> 00:09:06,150
We're going to be doing it with Python.

39632
00:09:07,290 --> 00:09:11,580
So this is the challenge for you. Using what you've learned in this lesson,

39633
00:09:11,880 --> 00:09:16,880
see if you can create a footer element so we can put it inside a footer tag

39634
00:09:17,340 --> 00:09:19,920
like this. And inside this footer tag,

39635
00:09:20,040 --> 00:09:24,570
I want you to create a paragraph element that can say any piece of text

39636
00:09:24,990 --> 00:09:29,250
as long as it contains the copyright year, which should be the current year

39637
00:09:29,310 --> 00:09:32,310
worked out programmatically using Python.

39638
00:09:32,970 --> 00:09:36,390
Pause the video and have a think about how you might solve that challenge.

39639
00:09:41,520 --> 00:09:41,910
All right.

39640
00:09:41,910 --> 00:09:45,960
So the first thing we're going to do is create our paragraph and we're going to

39641
00:09:45,960 --> 00:09:50,370
say something like copyright and then the year

39642
00:09:50,700 --> 00:09:52,680
and then we're going to say, um,

39643
00:09:52,740 --> 00:09:57,740
something like built by... This is a pretty common footer.

39644
00:09:59,190 --> 00:10:02,370
Now what we want to do is we want to replace these YYYYs

39645
00:10:02,370 --> 00:10:06,480
with the actual year. So, as you can imagine,

39646
00:10:06,510 --> 00:10:11,510
I'm going to be using these double curly braces to insert the year into here.

39647
00:10:12,180 --> 00:10:16,230
But first I have to generate that. So going back to our server.py,

39648
00:10:16,590 --> 00:10:19,050
I'm going to import the datetime module

39649
00:10:19,050 --> 00:10:24,050
which you've used many times before to generate the current date and time.

39650
00:10:24,600 --> 00:10:27,300
And we're going to use it specifically this time though,

39651
00:10:27,330 --> 00:10:28,890
to generate the current year.

39652
00:10:30,840 --> 00:10:34,920
And it's going to be done using the datetime module, the datetime class,

39653
00:10:35,250 --> 00:10:39,330
and then we're going to call the now method in order to get the current date

39654
00:10:39,330 --> 00:10:42,120
time and then we're going to tap into the year property.

39655
00:10:42,900 --> 00:10:47,730
So now in addition to passing over that random number as num,

39656
00:10:48,060 --> 00:10:53,060
I'm also going to pass over a new variable with the name of year and the value

39657
00:10:53,520 --> 00:10:56,310
of the current year that we just worked out from here.

39658
00:10:56,940 --> 00:10:59,460
So now when this template is rendered,

39659
00:10:59,490 --> 00:11:02,400
it's also going to receive a variable called year

39660
00:11:02,730 --> 00:11:06,720
which we can insert right here into the copyright like that.

39661
00:11:07,410 --> 00:11:11,310
So now if I go ahead and hit save, go back to our website,

39662
00:11:11,610 --> 00:11:16,470
hit refresh, you can see our footer show up copyright 2020,

39663
00:11:16,530 --> 00:11:20,820
which is the current year I'm living in, and it has the rest of the text.

39664
00:11:21,240 --> 00:11:23,580
So now no matter which year it is

39665
00:11:23,640 --> 00:11:28,640
we will never need to update our footer ever again because it's being automatically

39666
00:11:28,890 --> 00:11:30,480
updated using code.


39667
00:00:00,360 --> 00:00:03,690
Now that you've seen that we can write code in our server,

39668
00:00:04,080 --> 00:00:07,950
work out some sort of value or get some piece of data,

39669
00:00:08,340 --> 00:00:12,000
and then we can send it over to our template to be rendered,

39670
00:00:12,660 --> 00:00:16,650
I've got a challenge for you to test some of the things that you've learned from

39671
00:00:16,650 --> 00:00:20,340
previous days as well as what we've been doing with Flask

39672
00:00:20,400 --> 00:00:21,570
over the last few days.

39673
00:00:22,440 --> 00:00:25,800
I found a pretty interesting API called the agify

39674
00:00:26,280 --> 00:00:30,600
and there's also genderize. This is a really simple API.

39675
00:00:30,630 --> 00:00:34,620
It doesn't require you to sign up and it doesn't require any authentication.

39676
00:00:35,370 --> 00:00:40,370
What you can do with it is you can hit up the URL of the API and then you can

39677
00:00:41,610 --> 00:00:44,640
pass over a value for name.

39678
00:00:45,090 --> 00:00:47,880
And it's going to predict the age of a name.

39679
00:00:48,810 --> 00:00:51,690
You can go ahead and hit try me to see what you get.

39680
00:00:52,230 --> 00:00:55,200
You can see its a very simple JSON that you get back.

39681
00:00:55,410 --> 00:01:00,410
And this describes the name that you entered, the estimated age of that person

39682
00:01:01,560 --> 00:01:02,393
with that name,

39683
00:01:02,730 --> 00:01:07,440
and also how many times they've sampled this name when they were calculating

39684
00:01:07,470 --> 00:01:08,303
this data.

39685
00:01:09,270 --> 00:01:14,040
Now another one is genderize where you can pass in a name and it'll give you the

39686
00:01:14,040 --> 00:01:15,480
predicted gender.

39687
00:01:16,170 --> 00:01:21,000
So I have to say from testing that I think genderize is a lot more accurate than

39688
00:01:21,030 --> 00:01:21,863
agify,

39689
00:01:22,080 --> 00:01:26,640
but maybe I'm just a little bit upset because it says that people with my name

39690
00:01:26,640 --> 00:01:30,920
on average are 63 years old. But hey, you know,

39691
00:01:30,950 --> 00:01:35,420
I'm doing pretty well for a 63-year-old. So, I can't complain.

39692
00:01:36,350 --> 00:01:36,620
Now,

39693
00:01:36,620 --> 00:01:41,620
what I want you to do is to turn this into a dynamic Flask application.

39694
00:01:43,580 --> 00:01:48,580
We're going to set up a new route in our application and it's under the 

39695
00:01:50,630 --> 00:01:54,410
/guess route. Now after /guess

39696
00:01:54,500 --> 00:01:57,080
we're going to put in a name. So for example,

39697
00:01:57,080 --> 00:02:01,820
/guess/Angela and what it should give us is

39698
00:02:02,030 --> 00:02:05,600
Hey, and then the name that was entered into the URL.

39699
00:02:06,170 --> 00:02:08,360
And then it should say, I think you are

39700
00:02:08,570 --> 00:02:11,840
and then the predicted gender from genderize.io.

39701
00:02:12,530 --> 00:02:16,640
And then it should tell me how old it predicts that name to be.

39702
00:02:17,180 --> 00:02:22,180
Now this works for any name so I could change it to James or Katie.

39703
00:02:26,660 --> 00:02:29,030
And it doesn't really matter what I enter here.

39704
00:02:29,180 --> 00:02:33,320
This piece of data come from these two APIs.

39705
00:02:34,010 --> 00:02:37,370
Now you might have to think back a little bit when we learned about 

39706
00:02:37,370 --> 00:02:41,870
how do you use the requests module to get hold of the data that we want from an

39707
00:02:41,870 --> 00:02:46,640
API. And then you're going to incorporate it into a website that you can design

39708
00:02:46,850 --> 00:02:47,960
however you want,

39709
00:02:48,290 --> 00:02:52,970
but be aware that the first line needs to have the name that was entered into

39710
00:02:52,970 --> 00:02:57,970
the URL and the name should ideally be capitalized into title case like this,

39711
00:02:59,230 --> 00:03:02,830
and then it should have the predicted gender and the predicted age.

39712
00:03:03,370 --> 00:03:07,930
So this is your challenge and it might take you a little while to work out all

39713
00:03:07,930 --> 00:03:10,360
the components, but I think you can do it.

39714
00:03:10,750 --> 00:03:15,750
Pause the video and spend at least 15 or 20 minutes working out this challenge

39715
00:03:16,090 --> 00:03:17,470
and see if you can complete it.

39716
00:03:17,860 --> 00:03:21,610
Remember that you've always got the help of the documentation.

39717
00:03:21,610 --> 00:03:26,200
So there is the Flask documentation, there's the Jinja documentation, well

39718
00:03:26,200 --> 00:03:31,060
also there's the documentation from the agify and genderize.io.

39719
00:03:31,540 --> 00:03:35,380
And if there's anything else, you can always search through the course for the

39720
00:03:35,380 --> 00:03:39,940
part where we dealt with APIs and getting hold of data from APIs,

39721
00:03:40,420 --> 00:03:44,710
as well as using Google and Stack Overflow to help you achieve this.

39722
00:03:45,520 --> 00:03:47,500
Don't just give up. If you get stuck,

39723
00:03:47,710 --> 00:03:51,730
try to work like a real world developer and work out the solution to your

39724
00:03:51,730 --> 00:03:55,570
problems. All right.

39725
00:03:55,600 --> 00:04:00,100
So the first thing we have to do is set up this /guess/

39726
00:04:00,160 --> 00:04:03,760
name route. Back inside our server

39727
00:04:04,000 --> 00:04:06,100
after where we've defined our home route,

39728
00:04:06,340 --> 00:04:08,410
let's go ahead and create app.route

39729
00:04:08,800 --> 00:04:13,800
and here we're going to target /guess and then /name.

39730
00:04:14,440 --> 00:04:19,440
Now because we need to pass the URL to get hold of the name that the user

39731
00:04:19,750 --> 00:04:23,710
entered, if we take a look at the Flask documentation,

39732
00:04:24,010 --> 00:04:29,010
you might remember that yesterday we covered this idea of variable rules and

39733
00:04:29,230 --> 00:04:31,150
passing a URL.

39734
00:04:31,930 --> 00:04:36,910
The way we do it is by adding some angle brackets around the part of the URL

39735
00:04:37,180 --> 00:04:41,860
which is going to be taken in as a variable. And here's their example.

39736
00:04:42,520 --> 00:04:43,480
So in our case,

39737
00:04:43,510 --> 00:04:48,510
we're going to put this name part of the URL inside some angle brackets to turn

39738
00:04:49,480 --> 00:04:54,250
it into a variable. And then we can create our function

39739
00:04:54,790 --> 00:04:58,870
which I'll just call guess. Um, it doesn't really matter what you call it.

39740
00:04:59,350 --> 00:05:04,180
And then inside this guess method, I'm going to put in this name.

39741
00:05:04,870 --> 00:05:09,870
So essentially when my guess function goes through this decorator method,

39742
00:05:10,840 --> 00:05:15,160
it's going to give it a value for this name variable,

39743
00:05:15,790 --> 00:05:20,350
and then I'm going to catch onto that name and I'm going to send it over when I

39744
00:05:20,350 --> 00:05:21,580
render my template.

39745
00:05:23,380 --> 00:05:26,650
So let's go ahead and create a new template to render.

39746
00:05:27,010 --> 00:05:31,360
So it's going to be an HTML file which I'll just call guess.html.

39747
00:05:33,010 --> 00:05:36,670
And I'll leave the title as guess. Now inside the body

39748
00:05:36,700 --> 00:05:39,310
I want to be able to type the name.

39749
00:05:39,370 --> 00:05:42,760
So it was Hey, and then the name.

39750
00:05:44,500 --> 00:05:47,560
And then it was, I think you are and then the gender,

39751
00:05:49,570 --> 00:05:53,650
and then finally it was, and maybe and your age.

39752
00:05:54,580 --> 00:05:58,190
So something like this. Now we just need to replace the name,

39753
00:05:58,490 --> 00:06:00,110
the gender and the age.

39754
00:06:00,500 --> 00:06:05,500
So I'm going to keep those names and I'm just going to wrap them like this.

39755
00:06:10,130 --> 00:06:12,830
Now remembering the names of these variables,

39756
00:06:12,860 --> 00:06:17,860
I'm going to go back to my server and I'm going to try and render my guess.

39757
00:06:18,680 --> 00:06:21,440
html. So it was render_template,

39758
00:06:21,560 --> 00:06:25,040
the name of the template is called guess.html,

39759
00:06:25,370 --> 00:06:28,700
and then I'm going to add a bunch of keyword arguments.

39760
00:06:29,210 --> 00:06:30,800
So the first one was the name,

39761
00:06:30,830 --> 00:06:34,340
so this is the name of the keyword argument.

39762
00:06:34,700 --> 00:06:38,720
And then the value is also going to be name because it's going to come from

39763
00:06:38,720 --> 00:06:41,150
this URL. If you find that confusing,

39764
00:06:41,180 --> 00:06:43,790
you can always change this. For example,

39765
00:06:43,820 --> 00:06:46,670
you could change this to person_name

39766
00:06:48,680 --> 00:06:50,990
and we could use that right here.

39767
00:06:51,770 --> 00:06:55,700
Now you might be able to see that this name comes from the URL

39768
00:06:55,700 --> 00:07:00,680
which gets passed through the input, and this person_name is the one that we use

39769
00:07:00,740 --> 00:07:05,270
when we put it into the template. Let's go ahead and test this out.

39770
00:07:05,840 --> 00:07:10,840
Let's comment out these two lines of code by hitting command forward slash or

39771
00:07:11,030 --> 00:07:15,140
control forward slash and then hit save and run the code

39772
00:07:15,200 --> 00:07:20,180
and let's try going to this URL. So you can see it says

39773
00:07:20,180 --> 00:07:23,900
Hey, and then it says whatever it is that we typed after guess.

39774
00:07:24,200 --> 00:07:26,390
So if you type a whole bunch of gobbledy goop,

39775
00:07:26,600 --> 00:07:29,960
then that's also what we're going to see right here. Now,

39776
00:07:29,990 --> 00:07:34,190
one of the things about the name is it will be nice to have it in title case.

39777
00:07:34,610 --> 00:07:39,610
So we can change things to title case by using the Python title method

39778
00:07:41,090 --> 00:07:43,760
where we simply just say txt.title.

39779
00:07:44,840 --> 00:07:48,200
We can do that inside our guess.html

39780
00:07:48,230 --> 00:07:52,790
because we know that we can evaluate Python expressions in between the double

39781
00:07:52,790 --> 00:07:56,450
curly quotes. We can say person_name.title

39782
00:07:56,840 --> 00:07:58,550
and then it's the parentheses.

39783
00:07:59,120 --> 00:08:04,120
So now, if we save that, coming back over here and we go back to our Katie and hit

39784
00:08:05,660 --> 00:08:08,210
enter, you can see it's now capitalized

39785
00:08:08,210 --> 00:08:13,130
that K and the first character is always now going to be capitalized.

39786
00:08:14,720 --> 00:08:16,220
We've solved the first part.

39787
00:08:16,520 --> 00:08:20,450
Now we need to figure out the gender and the age. And to do that,

39788
00:08:20,560 --> 00:08:24,650
we're going to need the help of these two APIs; genderize and agify.

39789
00:08:25,250 --> 00:08:28,640
So the API is probably the simplest API you've worked with.

39790
00:08:28,970 --> 00:08:31,880
You've worked with a lot more complex APIs in the past.

39791
00:08:32,150 --> 00:08:33,679
So there shouldn't be too hard.

39792
00:08:34,130 --> 00:08:38,000
Now what we want to do is we want to replace this part that says Peter

39793
00:08:38,030 --> 00:08:42,380
with whatever it is that the user typed into the URL right here.

39794
00:08:43,070 --> 00:08:47,630
We're going to need to take this entire string and we're going to paste it in

39795
00:08:47,960 --> 00:08:50,240
and this is going to be the URL.

39796
00:08:52,730 --> 00:08:56,400
Now we're going to replace this part by an f-string.

39797
00:08:56,970 --> 00:09:01,470
So we have an F in front of the string, and then inside the curly braces,

39798
00:09:01,740 --> 00:09:05,430
we can put in the name which got passed from the URL.

39799
00:09:06,150 --> 00:09:07,890
So that's the gender URL.

39800
00:09:08,460 --> 00:09:11,550
And in order to get the data from that URL,

39801
00:09:11,730 --> 00:09:13,950
we're going to need the requests library.

39802
00:09:14,070 --> 00:09:16,800
So let's go ahead and import requests

39803
00:09:18,690 --> 00:09:21,660
and install it if it's red and squiggly.

39804
00:09:25,730 --> 00:09:26,090
Right.

39805
00:09:26,090 --> 00:09:30,500
Now, once it's installed, we can now use requests.get

39806
00:09:30,800 --> 00:09:35,330
and we can get hold of the data at this gender_url.

39807
00:09:35,930 --> 00:09:39,830
And this is going to be our gender_response.

39808
00:09:40,160 --> 00:09:40,993
Right.

39809
00:09:43,400 --> 00:09:45,050
Now, from this gender_response,

39810
00:09:45,080 --> 00:09:50,080
we can get hold of the gender_data and we want it in JSON format.

39811
00:09:50,270 --> 00:09:53,870
So we can say gender_response.json.

39812
00:09:54,380 --> 00:09:57,650
I'm not going to explain this too much because we've gone into excruciating

39813
00:09:57,650 --> 00:10:00,260
detail before on how to work with JSONs,

39814
00:10:00,260 --> 00:10:03,140
how to work with APIs, and how to work with the requests library.

39815
00:10:03,440 --> 00:10:04,940
I'm hoping that this stage

39816
00:10:04,940 --> 00:10:08,300
it's just a bit of revision and you just have to look up some of the methods,

39817
00:10:08,600 --> 00:10:11,240
but you've already seen this before and it should be quite familiar.

39818
00:10:12,560 --> 00:10:15,140
So now finally, from the gender_data,

39819
00:10:15,170 --> 00:10:20,090
we want to extract the part of that dictionary that is interesting,

39820
00:10:20,330 --> 00:10:23,390
which is actually just the one under the key gender.

39821
00:10:23,930 --> 00:10:27,980
So let's go ahead and add our square brackets and then put gender in here.

39822
00:10:28,310 --> 00:10:31,910
And this is going to be equal to our gender.

39823
00:10:32,630 --> 00:10:34,880
And that is what we're going to pass over.

39824
00:10:36,320 --> 00:10:38,960
So we're going to say gender = gender.

39825
00:10:39,740 --> 00:10:43,850
And that means that once we get into the guess.html,

39826
00:10:44,150 --> 00:10:48,770
it'll be able to put the value into this placeholder. Now,

39827
00:10:48,770 --> 00:10:50,960
all that's left is to work out the age.

39828
00:10:52,010 --> 00:10:54,560
So let's get our agify URL.

39829
00:10:57,110 --> 00:10:57,943
Right.

39830
00:10:58,010 --> 00:11:01,250
And this is going to be pretty straightforward because it's going to be pretty

39831
00:11:01,250 --> 00:11:03,530
much the same as what we did for the gender.

39832
00:11:08,420 --> 00:11:09,110
Yeah.

39833
00:11:09,110 --> 00:11:12,800
And if you take a look at the JSON you get back from calling this API,

39834
00:11:13,190 --> 00:11:18,110
the important piece of data is inside that key age. Now,

39835
00:11:18,110 --> 00:11:22,430
all we need to do is pass over a new variable called age

39836
00:11:22,760 --> 00:11:25,130
and the value is going to come from right here.

39837
00:11:27,980 --> 00:11:28,370
Cool.

39838
00:11:28,370 --> 00:11:33,370
So now if we hit save and we go back to our website and we hit enter,

39839
00:11:34,700 --> 00:11:38,930
it should say, Hey, Katie, I think you're female. And maybe 32 years old.

39840
00:11:39,500 --> 00:11:44,360
Why is Katie younger than me? Anyways. I hope you managed to get that to work.

39841
00:11:44,570 --> 00:11:45,230
If not,

39842
00:11:45,230 --> 00:11:49,550
take a look at the final code in the course resources and see where you went

39843
00:11:49,550 --> 00:11:53,360
wrong and maybe revise the section in the course on APIs.


39844
00:00:00,210 --> 00:00:01,350
In the previous lessons,

39845
00:00:01,380 --> 00:00:06,380
we've seen how we can use the Jinja markup in order to insert bits of Python

39846
00:00:06,780 --> 00:00:10,860
code into the HTML template. Now,

39847
00:00:10,890 --> 00:00:14,670
in this lesson, I want to demystify some of the other markup

39848
00:00:15,030 --> 00:00:19,410
like the {% and some of these keywords.

39849
00:00:20,160 --> 00:00:20,520
Now,

39850
00:00:20,520 --> 00:00:25,170
what we've been able to do with this markup is to specify single line

39851
00:00:25,200 --> 00:00:27,240
expressions in Python.

39852
00:00:27,780 --> 00:00:32,430
But what if we wanted to create multiline statements like an if statement or a

39853
00:00:32,430 --> 00:00:36,780
for loop? Well, we would have to use some slightly different markup.

39854
00:00:37,500 --> 00:00:42,090
I'm going to go ahead and create a new HTML file which I'll call blog.

39855
00:00:43,050 --> 00:00:46,440
And this will have the title of blog and in the body

39856
00:00:46,470 --> 00:00:51,470
what I want to do is to render all the titles of all the blogs I have. Now in

39857
00:00:53,370 --> 00:00:56,040
order to get hold of some data for our blogs,

39858
00:00:56,340 --> 00:01:00,750
we're going to use a service called endpoint. And this is a really neat service

39859
00:01:00,810 --> 00:01:03,600
which just acts as JSON storage bin.

39860
00:01:04,110 --> 00:01:08,400
So basically you can create your own API with your own JSON data

39861
00:01:08,820 --> 00:01:11,940
and you don't even have to log in. It's as simple as clicking on,

39862
00:01:12,180 --> 00:01:16,980
create JSON bin, and then here you can create some, um, keys,

39863
00:01:17,040 --> 00:01:19,980
some values or a list of values.

39864
00:01:20,490 --> 00:01:22,170
And once you've done that,

39865
00:01:22,200 --> 00:01:25,980
you can go ahead and access this bin at this particular API

39866
00:01:26,370 --> 00:01:29,070
and you can see it sends you that JSON back.

39867
00:01:29,160 --> 00:01:34,160
So you can update anything in here and you can get that data coming back to you

39868
00:01:35,610 --> 00:01:37,140
via this API.

39869
00:01:37,950 --> 00:01:42,950
That means that I could create some blog posts where each blog post has an ID,

39870
00:01:44,400 --> 00:01:46,500
a title, a subtitle and body.

39871
00:01:46,920 --> 00:01:50,100
And I've only got three blog posts in my list.

39872
00:01:50,460 --> 00:01:55,460
But you can now use this as if it were an API simply by heading to this address,

39873
00:01:56,220 --> 00:01:58,890
which you'll find in the course resources. Now,

39874
00:01:58,890 --> 00:02:03,510
what we're going to do is we're going to pull down these blog posts as if it was

39875
00:02:03,510 --> 00:02:04,343
an API,

39876
00:02:04,590 --> 00:02:08,669
and we're going to try and display all of the titles and all of the subtitles.

39877
00:02:09,720 --> 00:02:11,490
Inside our server.py,

39878
00:02:11,970 --> 00:02:16,200
if we go ahead and set up a new app.route,

39879
00:02:16,590 --> 00:02:20,760
and this route is going to be /blog, then here

39880
00:02:20,760 --> 00:02:23,460
we're going to create a blog function

39881
00:02:23,850 --> 00:02:27,480
which is going to fetch all the blogs from this URL.

39882
00:02:27,960 --> 00:02:30,690
So I'm going to copy the URL of my API

39883
00:02:30,750 --> 00:02:33,030
and you can do that in the course resources.

39884
00:02:33,450 --> 00:02:37,650
And then we're going to put this as the blog URL.

39885
00:02:38,310 --> 00:02:40,050
Now I'm going to use requests.

39886
00:02:40,050 --> 00:02:43,440
get to get hold of the data at that URL,

39887
00:02:44,430 --> 00:02:48,720
and then I can tap into the data by saying response.json

39888
00:02:48,810 --> 00:02:51,750
and this will give me all of the blog posts.

39889
00:02:52,020 --> 00:02:54,180
So we'll call that all posts.

39890
00:02:55,830 --> 00:03:00,490
And now I'm going to render my blog.html

39891
00:03:02,860 --> 00:03:07,860
and I'm going to pass in all the posts under a keyword called posts... like this.

39892
00:03:10,900 --> 00:03:13,420
So I've fetched all of those posts,

39893
00:03:13,600 --> 00:03:17,500
I've passed it into a variable called all_post,

39894
00:03:17,770 --> 00:03:22,570
and I'm sending that value over to the blog.html under the name posts.

39895
00:03:22,960 --> 00:03:27,850
So now going to my blog.html, I should be able to catch that post.

39896
00:03:28,120 --> 00:03:31,030
And if we were just writing Python straightaway,

39897
00:03:31,030 --> 00:03:36,030
then we would be able to say something like for blog posts in posts,

39898
00:03:37,090 --> 00:03:42,090
let's go ahead and create an h1 where we have the blog post title,

39899
00:03:45,100 --> 00:03:50,100
and let's create a h2 where we have the blog post subtitle.

39900
00:03:54,010 --> 00:03:58,780
And it would, in an ideal world, loop through all the posts it received and for

39901
00:03:58,780 --> 00:04:00,490
each of the blog posts, render

39902
00:04:00,490 --> 00:04:05,410
an h1 for the title and h2 for the subtitle. Now, in fact,

39903
00:04:05,440 --> 00:04:08,680
using Jinja, we can pretty much do exactly this,

39904
00:04:09,010 --> 00:04:11,950
but we have to alter things a little bit. Firstly,

39905
00:04:11,950 --> 00:04:14,110
when we have a multiline statement,

39906
00:04:14,170 --> 00:04:19,170
we're going to have to add a curly brace and then a percentage sign for each of

39907
00:04:19,720 --> 00:04:22,810
the lines. So not just from the beginning to the end,

39908
00:04:23,140 --> 00:04:28,090
but for each of the lines that's Python code that spans multi lines

39909
00:04:28,150 --> 00:04:31,390
we have to enclose it inside this kind of markup.

39910
00:04:31,600 --> 00:04:36,600
So notice the direction of the curly braces and also notice the presence of the

39911
00:04:37,240 --> 00:04:40,180
percentage signs. Now inside the part

39912
00:04:40,180 --> 00:04:42,610
where we insert it into HTML elements,

39913
00:04:42,700 --> 00:04:47,700
we can do just as we did before, pass through the blog post and render it as a

39914
00:04:49,060 --> 00:04:51,400
single line expression like this.

39915
00:04:51,910 --> 00:04:54,670
But because we're working inside an HTML file,

39916
00:04:54,670 --> 00:04:58,490
we also have to specify when our for loop actually ends.

39917
00:04:58,930 --> 00:05:03,930
And that very end is also going to be enclosed inside one of these percentage

39918
00:05:04,240 --> 00:05:05,073
curly brace.

39919
00:05:05,440 --> 00:05:09,550
And there's a special key word that comes from Jinja 

39920
00:05:09,580 --> 00:05:14,580
which is called endfor in order to specify at the end of the for loop.

39921
00:05:16,120 --> 00:05:19,630
We'll just have to add it in like this. Now,

39922
00:05:19,660 --> 00:05:21,310
if we go ahead and hit save,

39923
00:05:21,640 --> 00:05:26,500
and now if we run our code and try to bring up our blog website,

39924
00:05:27,070 --> 00:05:31,870
you should see that it's pulled in all of the articles in our fake blog,

39925
00:05:32,290 --> 00:05:33,520
the life of cactus,

39926
00:05:33,670 --> 00:05:37,810
top 15 things to do when you're bored, and introduction to intermittent fasting.

39927
00:05:37,840 --> 00:05:41,740
It's a really random blog that we're starting and it's created an h1 for

39928
00:05:41,740 --> 00:05:45,340
each of the titles and h2 for each of the subtitles.

39929
00:05:46,000 --> 00:05:51,000
And it's done this without us having to pass out each of the title, subtitles.

39930
00:05:51,970 --> 00:05:54,400
We've actually been able to do all of that just with a

39931
00:05:54,400 --> 00:05:57,190
for loop inside our template.

39932
00:05:57,770 --> 00:06:01,040
Now you can do the same thing using an if statement.

39933
00:06:01,580 --> 00:06:03,620
All you have to do is to, again,

39934
00:06:03,620 --> 00:06:08,360
enclose every line in the statement with {%,

39935
00:06:08,750 --> 00:06:12,500
and then at the very end of your block of code, of your statement,

39936
00:06:12,800 --> 00:06:16,040
you have to add the endif keyword as well.

39937
00:06:17,240 --> 00:06:22,240
See if you can modify this so that we only print out the title for the blog

39938
00:06:23,120 --> 00:06:26,030
post which has an ID of 2.

39939
00:06:28,960 --> 00:06:30,070
All right, in this case,

39940
00:06:30,490 --> 00:06:33,490
all we have to do is add an if statement down here.

39941
00:06:34,180 --> 00:06:39,180
We're going to say if the blog post that we're currently looping on has an ID

39942
00:06:41,890 --> 00:06:45,820
that's equal to 2, well, in that case,

39943
00:06:45,880 --> 00:06:49,630
we actually want to render the title and subtitle,

39944
00:06:50,020 --> 00:06:54,370
but otherwise, we're not going to. All we have to do is add in the markup.

39945
00:06:54,640 --> 00:06:56,860
So starting at the first if statement,

39946
00:06:56,860 --> 00:07:01,390
we add the {% at the beginning and at the end, and at

39947
00:07:01,390 --> 00:07:02,830
the very end of the if statement

39948
00:07:02,860 --> 00:07:07,420
we add the {% and that keyword endif

39949
00:07:07,660 --> 00:07:10,330
to say that this is the end of the if statement.

39950
00:07:10,960 --> 00:07:14,530
So now if we hit save and we go back to our blog,

39951
00:07:14,860 --> 00:07:18,340
you can see that it's only going to show the second article,

39952
00:07:18,640 --> 00:07:20,230
the one with ID of 2.


39953
00:00:00,780 --> 00:00:04,290
So now that we've seen some of the things that we can do with templating and

39954
00:00:04,290 --> 00:00:08,010
Jinja, I want to talk to you about something called URL building.

39955
00:00:08,910 --> 00:00:13,910
And this is a way that allows us to direct the user to a specific page in our

39956
00:00:15,830 --> 00:00:20,540
website and web app. Now, what that means is that for example,

39957
00:00:20,720 --> 00:00:22,730
on our main homepage,

39958
00:00:23,000 --> 00:00:26,210
we could actually have a link to the blogs page.

39959
00:00:27,200 --> 00:00:32,200
The way that we would do that is in our index.html here, we could create a

39960
00:00:34,220 --> 00:00:38,270
anchor tag, for example, in the body here. And we could say

39961
00:00:38,300 --> 00:00:39,950
Go to blog.

39962
00:00:40,550 --> 00:00:43,580
And then for the Href of this anchor tag,

39963
00:00:43,850 --> 00:00:48,850
this is where we're going to use the Jinja template to build out the href.

39964
00:00:50,630 --> 00:00:55,630
So we're going to add the curly braces in and dynamically work out the href. And

39965
00:00:57,140 --> 00:00:58,730
in every Jinja template,

39966
00:00:58,790 --> 00:01:03,790
we have access to a method called url_for.

39967
00:01:04,459 --> 00:01:09,080
So we can say url_for, and then because this is Python,

39968
00:01:09,170 --> 00:01:12,470
we can add some parameters when we call this method.

39969
00:01:13,130 --> 00:01:18,050
And what it's expecting is the name of a function in your Flask server.

39970
00:01:18,800 --> 00:01:20,030
So you could, for example,

39971
00:01:20,030 --> 00:01:24,410
hit up home or guess or blog.

39972
00:01:24,890 --> 00:01:27,680
And in our case, this blog is what we want.

39973
00:01:27,950 --> 00:01:29,780
So to make it right a little bit more clear

39974
00:01:29,780 --> 00:01:33,380
because we've got the route which is called /blog, and we've

39975
00:01:33,380 --> 00:01:35,810
got the function which is called blog.

39976
00:01:35,990 --> 00:01:38,450
I'm going to change this to get_blog.

39977
00:01:39,140 --> 00:01:43,880
So once you render this blog page, we can call this method

39978
00:01:43,910 --> 00:01:48,680
get_blog by saying URL for, and then passing a string.

39979
00:01:49,130 --> 00:01:53,120
So because we've got some quotation marks around the outside,

39980
00:01:53,480 --> 00:01:58,480
we're going to use some single quotes on the inside. And in between a single

39981
00:01:58,520 --> 00:02:02,120
quotes is the name of that method, get_blog,

39982
00:02:03,980 --> 00:02:06,140
like this. Now,

39983
00:02:06,140 --> 00:02:10,250
what it's going to do is it's going to generate a hyperlink

39984
00:02:10,550 --> 00:02:13,130
that's going to be based on what it takes

39985
00:02:13,130 --> 00:02:18,130
to get to this particular route and call this particular method.

39986
00:02:18,860 --> 00:02:23,860
So now if I go ahead and update this and go to my homepage here,

39987
00:02:24,380 --> 00:02:28,970
you'll see there's a new link that says go to blog. And when I click on it,

39988
00:02:29,150 --> 00:02:32,330
it takes me to the blog page. Now,

39989
00:02:32,390 --> 00:02:37,390
another thing that you might want to do is when you navigate to a URL inside

39990
00:02:38,030 --> 00:02:41,390
your web app, you might want to add in some parameters.

39991
00:02:41,840 --> 00:02:46,840
You can add parameters when you are using url_for in the same way that you did it

39992
00:02:47,450 --> 00:02:51,800
when you did render_template. So that you can create the name of the parameter

39993
00:02:52,070 --> 00:02:53,060
and the value

39994
00:02:53,390 --> 00:02:57,350
and it is a keyword argument that comes after the first parameter.

39995
00:02:58,160 --> 00:03:02,230
So here we could say, for example, url_for get_blog,

39996
00:03:02,680 --> 00:03:06,070
and then we could just say a number equals three.

39997
00:03:07,060 --> 00:03:10,120
So now when the user clicks on this anchor tag,

39998
00:03:10,450 --> 00:03:14,860
it's going to look for a method called get_blog on our server.py

39999
00:03:14,860 --> 00:03:15,940
which is right here,

40000
00:03:16,480 --> 00:03:21,480
and then it's going to pass over any subsequent keyword arguments as parameters.

40001
00:03:22,180 --> 00:03:26,440
So we can catch those parameters inside the app route.

40002
00:03:26,590 --> 00:03:30,460
So we can say / and then we can use our angle brackets

40003
00:03:30,490 --> 00:03:34,990
which we've always done to give parts of the URL a identifier,

40004
00:03:35,410 --> 00:03:38,650
and we can call this num or number, whatever you like.

40005
00:03:39,430 --> 00:03:43,660
And we'll also need to add that to the input to this method

40006
00:03:43,960 --> 00:03:46,810
and just to prove that it works, I'm going to print it out.

40007
00:03:47,890 --> 00:03:50,440
So now let's go ahead and rerun our code.

40008
00:03:51,280 --> 00:03:55,990
And if we go back to our homepage and I click on go to blog and it goes to the

40009
00:03:55,990 --> 00:04:00,990
blog website and it inserts that three into that part of the URL,

40010
00:04:01,750 --> 00:04:05,650
and if I take a look in the console, you can see it printed out that number

40011
00:04:06,070 --> 00:04:10,780
which got passed all the way from the index.html to the server.

40012
00:04:11,320 --> 00:04:13,720
And finally, inside this method

40013
00:04:13,720 --> 00:04:18,010
it was caught and it could be printed. And it could also be further propagated

40014
00:04:18,040 --> 00:04:20,589
into another template if need be.

40015
00:04:22,570 --> 00:04:25,840
So now that we've done all the theory, in the next lesson,

40016
00:04:25,870 --> 00:04:30,340
it's time to tackle the final project and we're going to be building out our

40017
00:04:30,350 --> 00:04:34,300
blog website with styling and also with templating.

40018
00:04:35,080 --> 00:04:37,900
So for all of that and more, head over to the next lesson.



40019
00:00:00,260 --> 00:00:00,920
Hey, guys.

40020
00:00:00,920 --> 00:00:04,780
In this section we're going to be learning about the bootstrap framework.

40021
00:00:04,790 --> 00:00:13,670
And this is one of many external CSS layout systems, but this is probably one of the most popular and

40022
00:00:13,670 --> 00:00:17,030
the one that you'll most likely to come across out in the wild.

40023
00:00:17,630 --> 00:00:26,030
Bootstrap, as I said, is a CSS framework created in 2010 by two Twitter developers Mark Otto and Jacob

40024
00:00:26,030 --> 00:00:26,780
Thornton.

40025
00:00:26,990 --> 00:00:34,100
Now the power of Bootstrap and the reason why it became so popular is it contained pre-made CSS files,

40026
00:00:34,100 --> 00:00:40,820
which you can simply include into your project in order to use their pre-built components and styling.

40027
00:00:40,820 --> 00:00:46,790
For example, if you wanted to have some tags in your website, you could create a look like this by

40028
00:00:46,790 --> 00:00:49,400
simply adding a few classes to your HTML.

40029
00:00:49,520 --> 00:00:56,150
On top of that, one of the biggest reasons why bootstrap took off is because of their 12 column layout

40030
00:00:56,150 --> 00:00:58,520
system built on top of Flexbox.

40031
00:00:58,520 --> 00:01:05,820
That makes it really easy to create responsive websites and websites that simply just work and look

40032
00:01:05,820 --> 00:01:11,130
great on mobile as well as desktop, the so-called mobile first approach.

40033
00:01:11,130 --> 00:01:13,320
So how exactly does it work?

40034
00:01:13,320 --> 00:01:18,120
Well, let's say you had a button which just said home.

40035
00:01:18,240 --> 00:01:23,580
You can see that the standard button rendered from HTML doesn't look fantastic.

40036
00:01:23,820 --> 00:01:32,040
But if we included just five classes which come from the bootstrap CSS, so we include the pre-built

40037
00:01:32,040 --> 00:01:39,570
CSS into our project and we add the styling and the components by adding these classes to our HTML.

40038
00:01:39,600 --> 00:01:47,340
Then all of a sudden what you'll end up with is something that looks beautiful and pre styled like this.

40039
00:01:47,820 --> 00:01:53,880
And because we don't have to worry about writing all of the CSS code, all we need to know is which

40040
00:01:53,880 --> 00:01:56,670
classes we need to add to our HTML.

40041
00:01:56,700 --> 00:02:02,730
Then it makes everything so much easier and so much quicker when we want to build components into our

40042
00:02:02,730 --> 00:02:03,450
website.

40043
00:02:03,600 --> 00:02:08,940
Now, as I mentioned, bootstrap is a type of CSS framework.

40044
00:02:09,030 --> 00:02:10,840
What exactly are these?

40045
00:02:10,860 --> 00:02:17,150
Well, they're pre-made CSS files which you can include into your projects.

40046
00:02:17,160 --> 00:02:23,910
If we had a look at the bootstrap GitHub and because bootstrap is completely open source, then all

40047
00:02:23,910 --> 00:02:30,750
of the code is visible and you can see it's got styling defined for all of the different components.

40048
00:02:30,750 --> 00:02:38,640
For example, this is inside the card component and it's got classes that define what a card body should

40049
00:02:38,640 --> 00:02:44,880
look like, what kind of layout it should have, what kind of color it should have, as well as what

40050
00:02:44,880 --> 00:02:48,000
the card title should look like, subtitle.

40051
00:02:48,000 --> 00:02:54,780
And it's got all of this predefined CSS, which we can simply insert straight into our HTML.

40052
00:02:55,230 --> 00:03:02,010
Now, the two most popular external CSS frameworks are bootstrap and foundation, but there are lots

40053
00:03:02,010 --> 00:03:06,210
more like MUI and Tailwind and a whole bunch more.

40054
00:03:06,210 --> 00:03:11,220
And the reason why they're so great is because they allow us to add in pre-built components and develop

40055
00:03:11,220 --> 00:03:13,950
websites quickly and efficiently.

40056
00:03:14,070 --> 00:03:21,480
If we look at the usage percentages across the Internet, you can see that the biggest CSS external

40057
00:03:21,480 --> 00:03:26,340
framework is still bootstrap with close to 80% of the market share.

40058
00:03:26,640 --> 00:03:32,850
But just because we learn about bootstrap, it doesn't mean that everything we learned about CSS is

40059
00:03:32,880 --> 00:03:33,600
null and void.

40060
00:03:33,600 --> 00:03:40,440
In fact, if you look at the top here, when we look at the absolute usage percentages of all of the

40061
00:03:40,440 --> 00:03:46,200
different frameworks across the Internet, you can see the largest percentage are still websites that

40062
00:03:46,200 --> 00:03:49,440
don't use any external CSS frameworks.

40063
00:03:49,560 --> 00:03:53,160
What does it mean when there are no CSS frameworks being used?

40064
00:03:53,160 --> 00:03:59,250
Well, it means you're probably using native CSS like Flexbox and Grid and Float and all of the great

40065
00:03:59,250 --> 00:04:00,610
things that we learnt before.

40066
00:04:00,630 --> 00:04:06,420
So bootstrap doesn't replace any of that knowledge and in fact we should be in a situation where we

40067
00:04:06,420 --> 00:04:13,290
don't actually need to depend on any sort of external framework, but they are really useful when we

40068
00:04:13,290 --> 00:04:19,890
want to develop websites quickly and easily and we don't want to spend a ton of time designing our websites

40069
00:04:19,890 --> 00:04:25,470
because it comes with all of the pre-made styling and all of the styling rules that we can easily conform

40070
00:04:25,470 --> 00:04:27,510
to by using their components.

40071
00:04:27,630 --> 00:04:31,260
So what are the pros of external CSS frameworks?

40072
00:04:31,260 --> 00:04:37,710
Well, they're easy and they're fast to use and you get a ton of pre-built components like this pricing

40073
00:04:37,710 --> 00:04:40,770
plan, which took us ages to build ourselves.

40074
00:04:40,770 --> 00:04:44,370
And you also get really consistent styling across your website.

40075
00:04:44,370 --> 00:04:51,090
It's almost like you hired a professional developer who kept everything looking on brand and finally

40076
00:04:51,090 --> 00:04:57,060
you have really good browser compatibility because they've tested all of the different browsers Safari,

40077
00:04:57,060 --> 00:04:59,370
Chrome, Brave and whichever browsers that.

40078
00:04:59,390 --> 00:05:00,770
Your user might be using.

40079
00:05:00,770 --> 00:05:04,270
So you don't actually have to do all of this complicated testing.

40080
00:05:04,280 --> 00:05:07,070
You can just trust that it works out of the box.

40081
00:05:07,310 --> 00:05:10,510
Now, what are some of the downsides of frameworks?

40082
00:05:10,520 --> 00:05:13,850
Well, one of the biggest downsides is something called class bloat.

40083
00:05:14,240 --> 00:05:20,390
Remember previously we mentioned that it's a really good idea to separate structure from style where

40084
00:05:20,390 --> 00:05:23,570
we said that HTML is for structure.

40085
00:05:23,660 --> 00:05:33,170
So adding in elements that describe what the purpose is and CSS is for style using external CSS frameworks

40086
00:05:33,170 --> 00:05:39,380
because we're adding everything into the classes, then very quickly you end up with what's called class

40087
00:05:39,380 --> 00:05:47,570
bloat, where you have a lot of styling going into the actual HTML file and it looks a lot less clean

40088
00:05:47,570 --> 00:05:53,450
than if we had just use something like Grid or Flexbox where we have all of our predefined classes and

40089
00:05:53,450 --> 00:05:58,400
we go easy on the classes that we add in to our HTML file.

40090
00:05:58,490 --> 00:06:01,910
The other downside is customization.

40091
00:06:01,920 --> 00:06:09,060
If you want to build a website where you want to have full control over every pixel and layout and everything

40092
00:06:09,060 --> 00:06:16,680
to be exactly the way you designed it, then external CSS frameworks is probably not the way to go because

40093
00:06:16,680 --> 00:06:21,630
in order to customize each and every component, it can be really time consuming.

40094
00:06:21,630 --> 00:06:26,340
So when should you use the CSS frameworks like Bootstrap and when should you not?

40095
00:06:26,370 --> 00:06:35,520
Well, when you are building a mobile first responsive website that you want to put online very quickly

40096
00:06:35,520 --> 00:06:41,730
and access beautiful components designed by professional designers, keeping everything on your website

40097
00:06:41,730 --> 00:06:47,640
looking slick and uniform, then you probably want to consider using bootstrap.

40098
00:06:47,670 --> 00:06:53,520
But if you're building a very simple website where you just need HTML and CSS and you can quickly throw

40099
00:06:53,520 --> 00:07:00,630
it up, or if you're building a really complex custom design website and you want complete control over

40100
00:07:00,630 --> 00:07:07,500
the design, then it's probably not a good idea to use an external CSS framework like Bootstrap.

40101
00:07:07,590 --> 00:07:13,290
So we've spoken so much about the pros and cons, when to use, when not to use, but how do you actually

40102
00:07:13,290 --> 00:07:13,890
use it?

40103
00:07:13,920 --> 00:07:18,460
Well, one of the easiest ways is to include it via a link.

40104
00:07:18,480 --> 00:07:23,220
We've seen how we can use the link tag in order to add our stylesheets.

40105
00:07:23,220 --> 00:07:31,560
And in a similar way we can use these link tags that simply gets hold of the stylesheet from an external

40106
00:07:31,560 --> 00:07:32,370
resource.

40107
00:07:32,370 --> 00:07:38,760
So in this case it's through CN, which stands for Content Delivery Network.

40108
00:07:39,600 --> 00:07:47,610
And what these are is little hubs all across the entire world and it knows where your users are located.

40109
00:07:47,610 --> 00:07:54,000
So when they load up your website and try to access this particular CSS file that contains all of the

40110
00:07:54,000 --> 00:08:00,690
bootstrap code, then it can find the closest location with the shortest distance to the server that

40111
00:08:00,690 --> 00:08:02,070
has that content.

40112
00:08:02,070 --> 00:08:07,320
And that just means that even though this has to be downloaded from somewhere, it can be delivered

40113
00:08:07,320 --> 00:08:10,740
to your user and rendered very, very quickly.

40114
00:08:10,740 --> 00:08:17,550
And from our point of view as developers, all we need to do is simply include this link into the head

40115
00:08:17,550 --> 00:08:19,740
section of our HTML.

40116
00:08:19,740 --> 00:08:26,520
And if we want any of the functionality like dropdown menus or clickable buttons, then we want to include

40117
00:08:26,520 --> 00:08:31,920
the bootstrap script just before the end of the body section.

40118
00:08:32,429 --> 00:08:34,740
So somewhere right about here.

40119
00:08:34,770 --> 00:08:42,900
Now let's go ahead and try an exercise and see if we can upgrade our website quickly by using bootstrap

40120
00:08:42,900 --> 00:08:51,060
download 11.0 Bootstrap intro and if you open it inside of vs code, open the index.html, you can see

40121
00:08:51,060 --> 00:08:54,090
there are four to do's for you to complete.

40122
00:08:54,210 --> 00:09:01,740
And once you've completed all of these four steps, you should end up with a card that displays a sunflower

40123
00:09:01,740 --> 00:09:02,340
image.

40124
00:09:02,340 --> 00:09:06,300
And this is one of the pre-built bootstrap components.

40125
00:09:06,750 --> 00:09:08,970
Now how are you going to do this?

40126
00:09:08,970 --> 00:09:15,390
Well, firstly, you're going to head over to Getbootstrap.com, which is the main bootstrap website,

40127
00:09:15,390 --> 00:09:21,030
and then I want you to include the bootstrap files using CDN.

40128
00:09:21,060 --> 00:09:26,010
You only need the CSS file through this link element for now.

40129
00:09:26,010 --> 00:09:32,160
And then I want you to go into the documentation if you want to look up anything regarding the card

40130
00:09:32,160 --> 00:09:38,970
component, which is all the way down here in components under the card section.

40131
00:09:39,570 --> 00:09:41,940
Now you know what the goal should look like.

40132
00:09:41,970 --> 00:09:47,250
You've got all of the resources to get started and you should be able to work through each of the to

40133
00:09:47,250 --> 00:09:48,690
do's one by one.

40134
00:09:48,990 --> 00:09:52,260
Pause the video and see if you can complete this challenge.

40135
00:09:57,790 --> 00:09:58,150
All right.

40136
00:09:58,180 --> 00:10:05,230
Hopefully you've given that a go and you've seen that the bootstrap card has some example code, which

40137
00:10:05,230 --> 00:10:08,900
you can straight up just drop into your file.

40138
00:10:08,920 --> 00:10:12,210
If you haven't given this a go, pause the video now.

40139
00:10:12,220 --> 00:10:17,050
Don't continue because things will get harder and harder as we go on in the course.

40140
00:10:17,050 --> 00:10:23,050
And if you just watch the videos, eventually, at some point things are not going to make sense because

40141
00:10:23,050 --> 00:10:24,610
you haven't had the practice.

40142
00:10:24,790 --> 00:10:30,610
Make things easy for your future self by putting in lots of effort and practice now.

40143
00:10:31,090 --> 00:10:32,500
All right, enough said.

40144
00:10:32,530 --> 00:10:37,900
First thing, let's walk through the solution together and hopefully you can check it against your work.

40145
00:10:37,990 --> 00:10:43,240
Now the first thing we're going to do is add the bootstrap link, which comes from the homepage.

40146
00:10:43,240 --> 00:10:48,970
And we just want this first link that is going to include the stylesheet.

40147
00:10:48,970 --> 00:10:53,260
And you can see this is a link with a relationship of stylesheet.

40148
00:10:53,260 --> 00:10:58,100
So instead of using our own stylesheet, we're now using the bootstrap CSS.

40149
00:10:58,400 --> 00:11:04,640
And if you're wondering what that min stands for, it's basically a file where all of the spaces are

40150
00:11:04,640 --> 00:11:08,630
taken away so that it's as short as possible.

40151
00:11:08,630 --> 00:11:14,000
So it loads up quicker because there's no spaces and everything's all jumbled, which is impossible

40152
00:11:14,000 --> 00:11:15,080
for humans to read.

40153
00:11:15,080 --> 00:11:19,020
But it works just fine for the computer to do.

40154
00:11:19,040 --> 00:11:22,670
Number two is to add the bootstrap pre-built card.

40155
00:11:22,670 --> 00:11:29,690
So if we go into our docs and find our card component, you can see the first example is pretty much

40156
00:11:29,690 --> 00:11:31,120
the card we want to build.

40157
00:11:31,130 --> 00:11:37,790
If we look at the goal, we've got our card title, some example, text, a button and an image, and

40158
00:11:37,790 --> 00:11:40,700
this is exactly the same as this example.

40159
00:11:40,700 --> 00:11:46,950
So let's copy the HTML and paste it into here under to do number two.

40160
00:11:46,970 --> 00:11:51,350
Now let's check our work, let's show it in preview and see what it looks like.

40161
00:11:51,380 --> 00:11:52,430
It looks pretty good.

40162
00:11:52,460 --> 00:11:56,570
Other than the fact that the image is pretty much completely broken.

40163
00:11:56,570 --> 00:12:02,840
So step three is to change the image source to display the flower JPEG image.

40164
00:12:02,990 --> 00:12:10,510
The image is right here and right now the source is completely empty because it's an example.

40165
00:12:10,520 --> 00:12:15,230
Let's go ahead and change it to our image, which is flower jpeg.

40166
00:12:15,260 --> 00:12:21,590
You see it show up immediately and as always with images, let's add a alt text so that people with

40167
00:12:21,590 --> 00:12:23,780
screen readers know what it's all about.

40168
00:12:24,260 --> 00:12:24,740
All right.

40169
00:12:24,770 --> 00:12:32,690
Now the final step is a little bit of a revision step because I wanted you to use Flexbox to center

40170
00:12:32,690 --> 00:12:35,870
the card in the vertical and horizontal center.

40171
00:12:35,870 --> 00:12:42,230
If we take a look at this URL on our browser, you can see it's stuck all the way to the top left,

40172
00:12:42,230 --> 00:12:44,990
which is default layout.

40173
00:12:44,990 --> 00:12:50,590
But if we want it right here in the middle, then we're going to need to use some Flexbox magic and

40174
00:12:50,600 --> 00:12:56,240
we're going to do that inside an internal style element right here under to do number four.

40175
00:12:56,450 --> 00:12:58,420
What do we need to target?

40176
00:12:58,430 --> 00:13:01,310
Well, we need to target the entire card.

40177
00:13:01,310 --> 00:13:04,790
And the topmost level is this flex container.

40178
00:13:05,000 --> 00:13:13,310
The reason why it's of class flex container is because this comes from the bootstrap CSS and it's got

40179
00:13:13,310 --> 00:13:17,270
some styling in there that defines that container.

40180
00:13:17,270 --> 00:13:19,910
But we can always override it.

40181
00:13:19,910 --> 00:13:25,580
And this is really, really important when we want to override a particular bootstrap style, we have

40182
00:13:25,580 --> 00:13:28,160
to make sure that it's more specific.

40183
00:13:28,160 --> 00:13:36,740
So either it goes inside an internal style element or it goes inside an inline style property, or if

40184
00:13:36,740 --> 00:13:44,420
we're using our standard external CSS and we use a link linking to, I don't know, say forward slash,

40185
00:13:45,050 --> 00:13:51,620
forward slash style.css and we have a style CSS file somewhere in our project, then you've got to make

40186
00:13:51,620 --> 00:13:58,130
sure that your custom CSS file occurs below the bootstrap link.

40187
00:13:58,130 --> 00:14:06,350
That way this is first looked at and then the browser looks at your custom stylesheet and you can override

40188
00:14:06,350 --> 00:14:09,410
any of the classes that come from bootstrap.

40189
00:14:10,070 --> 00:14:14,720
So this is an important point to remember for the future when you're creating your own custom style

40190
00:14:14,720 --> 00:14:15,320
sheets.

40191
00:14:15,650 --> 00:14:21,680
All right, so now in order to override the style here, now we might be building on top of existing

40192
00:14:21,680 --> 00:14:26,270
bootstrap styles or we might be specifying something they don't even care about, and it's not defined

40193
00:14:26,270 --> 00:14:28,340
in the bootstrap CSS at all.

40194
00:14:28,640 --> 00:14:35,450
In our case, we want to change this flex container to display flex because we know that this is one

40195
00:14:35,450 --> 00:14:39,980
of the simplest ways to center anything in CSS.

40196
00:14:40,340 --> 00:14:45,770
And the first thing we need to change is the justify content set to center.

40197
00:14:45,770 --> 00:14:49,790
And the second one is align items set to center.

40198
00:14:49,820 --> 00:14:56,660
And finally, we need to make sure that the entire container takes up the full height and not just some

40199
00:14:56,660 --> 00:14:56,860
proportion.

40200
00:14:57,000 --> 00:14:57,830
Portion of the height.

40201
00:14:57,840 --> 00:14:59,960
That's enough for the content.

40202
00:14:59,970 --> 00:15:04,740
So let's set the height to 100 viewport height.

40203
00:15:04,740 --> 00:15:11,460
And now you can see our card is perfectly centered in the middle using Flexbox.

40204
00:15:11,490 --> 00:15:18,330
It's a component that we've borrowed and customized from bootstrap, and you can see how easy it was.

40205
00:15:18,360 --> 00:15:23,460
And quick to create this layout by leveraging the power of bootstrap.

40206
00:15:23,640 --> 00:15:28,660
In the next lesson, we're going to dive deeper into bootstrap and we're going to look at how the bootstrap.

40207
00:15:28,680 --> 00:15:32,040
12 column layout system actually works in practice.

40208
00:15:32,040 --> 00:15:35,150
So for all of that and more, I'll see you in the next lesson.


40209
00:00:00,260 --> 00:00:00,620
All right.

40210
00:00:00,620 --> 00:00:07,130
So now that we've had a little bit of a taste of what Bootstrap can do, let's dive deep into one of

40211
00:00:07,130 --> 00:00:12,590
the most powerful features of Bootstrap, which is the 12 column layout system.

40212
00:00:13,070 --> 00:00:17,450
The 12 column system is made of three components.

40213
00:00:17,570 --> 00:00:26,540
Firstly, we need a div that has a class of container and this is going to be the starting point.

40214
00:00:26,630 --> 00:00:36,320
Next inside that container we need another div which is going to be of class row and inside the row

40215
00:00:36,350 --> 00:00:42,570
is where we will have our items and they will be laid out using the column system.

40216
00:00:42,590 --> 00:00:46,160
So what does this look like in code?

40217
00:00:46,190 --> 00:00:48,410
Well, it's pretty simple.

40218
00:00:48,410 --> 00:00:57,980
We have a container that contains a single row and then within the row we can have as many items as

40219
00:00:57,980 --> 00:00:58,700
we like.

40220
00:00:58,700 --> 00:01:02,250
And they're laid out using the column class.

40221
00:01:02,520 --> 00:01:04,019
Pretty simple so far.

40222
00:01:04,019 --> 00:01:08,130
And you're probably thinking, well, there's nothing very groundbreaking here.

40223
00:01:08,340 --> 00:01:15,090
Now, the interesting thing starts happening when you have multiple columns laid out inside these rows,

40224
00:01:15,240 --> 00:01:24,240
because automatically Bootstrap will try to give every column inside the row equal spacing and space

40225
00:01:24,240 --> 00:01:28,110
them across the entire width of the container.

40226
00:01:28,850 --> 00:01:38,210
So if you had a container which included a row that had one, two, three, four, five, six divs in

40227
00:01:38,240 --> 00:01:45,230
there, each with the class set as call short for column, then it will divide up the entire width by

40228
00:01:45,230 --> 00:01:45,850
six.

40229
00:01:45,860 --> 00:01:50,450
And if you had three of them then it would give each of them a third of the space.

40230
00:01:50,810 --> 00:01:54,410
Now the bootstrap container is responsive.

40231
00:01:54,410 --> 00:02:01,730
So by defining a div with the class of container, you're actually telling it to have a different size

40232
00:02:01,760 --> 00:02:04,070
on different sized screens.

40233
00:02:04,100 --> 00:02:13,010
If we had an XL or an XL screen, so like a desktop or a TV or something, then that container is going

40234
00:02:13,010 --> 00:02:20,390
to be this size and you can see that there's several breakpoints that are responsive to the different

40235
00:02:20,390 --> 00:02:22,280
device screen sizes.

40236
00:02:22,310 --> 00:02:32,160
On mobile, maybe the container would be 540 pixels on an iPad, maybe it would be 720 or 960 pixels.

40237
00:02:32,160 --> 00:02:36,300
And on desktop, maybe it would be about 1000 pixels.

40238
00:02:36,510 --> 00:02:44,370
You can use the dash plus these different letters to specify at which point you want your container

40239
00:02:44,370 --> 00:02:44,610
to be.

40240
00:02:44,610 --> 00:02:45,810
100%.

40241
00:02:45,990 --> 00:02:55,050
Container is the same as the normal container, but container MD or medium means that on small screens

40242
00:02:55,050 --> 00:02:59,190
the container would already reach 100% of the width of the screen.

40243
00:02:59,190 --> 00:03:05,010
And again, remember, all of these sizes here are referring to the width of the viewport.

40244
00:03:05,010 --> 00:03:07,650
So only this dimension.

40245
00:03:07,860 --> 00:03:15,930
And then as we go down the line, we're starting to specify a 100% width on larger and larger screens

40246
00:03:15,930 --> 00:03:23,340
until we reach this container fluid, which basically says that on all screen sizes, we want it to

40247
00:03:23,340 --> 00:03:28,320
reach from edge to edge, which is 100% width in most cases.

40248
00:03:28,320 --> 00:03:34,800
You will see these two being used quite frequently because the container gives a nice sort of margin

40249
00:03:34,800 --> 00:03:36,630
around the left and the right.

40250
00:03:36,630 --> 00:03:40,260
And the container fluid is when you want that edge to edge behavior.

40251
00:03:41,300 --> 00:03:45,920
The layout system gets more interesting when we start using sized columns.

40252
00:03:45,920 --> 00:03:52,550
Instead of just writing Col as the class, we can actually set the class as for example, Col dash two

40253
00:03:52,550 --> 00:03:54,140
or cold dash four.

40254
00:03:54,170 --> 00:04:05,000
And what this is saying is if we think of each of our rows as having 12 columns and we split them all

40255
00:04:05,000 --> 00:04:09,620
up into the 12 equal size columns like this.

40256
00:04:09,620 --> 00:04:11,960
So if you count this is actually a total of 12.

40257
00:04:11,990 --> 00:04:18,279
Then when we create a div we can specify well how many of these columns do we want to occupy?

40258
00:04:18,290 --> 00:04:26,180
In this case this div wants two of those columns and then this one wants four of them and then the final

40259
00:04:26,180 --> 00:04:27,950
one wants six.

40260
00:04:28,100 --> 00:04:35,930
Based on the classes that you choose, Bootstrap will know how much space to allocate each div on a

40261
00:04:35,930 --> 00:04:37,460
percentage basis.

40262
00:04:37,460 --> 00:04:45,810
So you could view the COL six as a 50% and the col two as one sixth of the entire width and so on and

40263
00:04:45,810 --> 00:04:46,440
so forth.

40264
00:04:46,440 --> 00:04:53,730
So you can use all of the numbers col one all the way up to col 12 and you can split up the proportion

40265
00:04:53,730 --> 00:04:56,700
of your screen and the content inside.

40266
00:04:56,700 --> 00:05:04,290
So maybe you would have a navigation section on the left that you only want to take up two out of 12

40267
00:05:04,290 --> 00:05:11,280
width and then the main content here maybe could take up ten out of 12 of the width and so on and so

40268
00:05:11,280 --> 00:05:11,520
forth.

40269
00:05:11,520 --> 00:05:18,540
And this is a really, really easy and intuitive way of sizing your content using bootstrap, and this

40270
00:05:18,540 --> 00:05:20,220
is what the code would look like.

40271
00:05:20,220 --> 00:05:25,530
So we have three divs and we're giving this one two out of 12, four out of 12, six out of 12.

40272
00:05:25,530 --> 00:05:28,590
And this is the layout that we end up with.

40273
00:05:28,590 --> 00:05:31,050
And we didn't have to write any CSS.

40274
00:05:31,080 --> 00:05:34,680
All we had to do was add in the pre-built layout classes.

40275
00:05:34,770 --> 00:05:42,090
Again, it's really important to know that Bootstrap has predefined breakpoints and these dimensions

40276
00:05:42,090 --> 00:05:45,480
are defined based on common screen sizes.

40277
00:05:45,480 --> 00:05:51,630
And even though these numbers are constantly changing, generally I would say that small is for mobile

40278
00:05:51,630 --> 00:05:56,310
devices, medium is for tablets and iPads.

40279
00:05:56,710 --> 00:06:05,880
A large is for laptop, extra large is for desktop, and extra extra large is for anything crazy like

40280
00:06:05,880 --> 00:06:07,470
maybe a TV or something.

40281
00:06:07,470 --> 00:06:11,880
An extra small is for devices that are maybe longer than they are wide.

40282
00:06:11,880 --> 00:06:16,590
So maybe foldable phones and even really narrow phone screens.

40283
00:06:16,890 --> 00:06:24,030
Now, one thing I want to draw your attention to is the directionality of the signs here.

40284
00:06:24,180 --> 00:06:31,620
All of these breakpoints, which will often use, for example, coal dash, SM dash two.

40285
00:06:31,800 --> 00:06:40,410
This section refers to the screens which are greater than this dimension.

40286
00:06:40,410 --> 00:06:51,150
So that means the small breakpoint is between here and here and covers the range between 576 and 768,

40287
00:06:51,150 --> 00:06:53,370
and each of them always go up.

40288
00:06:53,370 --> 00:06:58,260
So this is important point to keep in mind when you're dealing with the bootstrap breakpoints.

40289
00:06:58,530 --> 00:07:03,660
Now, one of the great things about bootstrap breakpoints is we don't really need the media queries

40290
00:07:03,660 --> 00:07:10,440
as much because this covers pretty much a lot of the different device dimensions and we don't have to

40291
00:07:10,440 --> 00:07:15,120
manually write all the pixel sizes and add media queries into our CSS.

40292
00:07:15,150 --> 00:07:21,840
We can target the different sizes and make our website responsive by using the pre-built breakpoints.

40293
00:07:22,410 --> 00:07:26,250
Here's an example of the bootstrap breakpoints here.

40294
00:07:26,250 --> 00:07:35,850
We're saying that on a small screen and above we want the dimension ratio to be two, four and six.

40295
00:07:35,850 --> 00:07:40,860
So this means that on desktop, on laptop, on TV, it's all going to have this size.

40296
00:07:40,860 --> 00:07:42,570
And even on mobile as well.

40297
00:07:42,600 --> 00:07:49,740
But below the size of mobile, it is not defined as having these proportions.

40298
00:07:49,740 --> 00:07:54,660
So it will default to giving each of these divs 100%.

40299
00:07:55,260 --> 00:07:58,050
And similarly, if you don't add a number here.

40300
00:07:58,050 --> 00:08:02,490
So we could for example, here it's 12 columns, 12 divided by three.

40301
00:08:02,490 --> 00:08:05,040
So these are actually call fours.

40302
00:08:05,040 --> 00:08:10,350
But if we don't define a number, you remember that they will automatically distribute.

40303
00:08:12,210 --> 00:08:17,910
But what would it look like if we reduce the screen size to less than a mobile size?

40304
00:08:17,940 --> 00:08:26,040
Well, all of these divs will go to 100% width when the overall width is less than 576.

40305
00:08:26,250 --> 00:08:32,730
Then all of these items default to as if they just had a column defined.

40306
00:08:32,730 --> 00:08:41,669
So call as the class and the call class by default is going to take up 100% of the width in the small

40307
00:08:41,669 --> 00:08:42,600
sized screen.

40308
00:08:43,150 --> 00:08:48,330
Now in a single div, you can actually also have multiple breakpoints.

40309
00:08:48,340 --> 00:08:58,750
So in this case, what it's saying is on the large devices and above, then it should take up four out

40310
00:08:58,750 --> 00:09:00,760
of 12 of the width.

40311
00:09:01,030 --> 00:09:04,600
On medium sizes and above.

40312
00:09:04,600 --> 00:09:06,550
Well, because the above is already defined.

40313
00:09:06,550 --> 00:09:13,840
So then this case is only on medium devices, then it should take up eight out of 12 of the width and

40314
00:09:13,870 --> 00:09:17,710
on small devices it should take up 12 out of 12.

40315
00:09:17,710 --> 00:09:18,940
So full width.

40316
00:09:19,450 --> 00:09:22,870
Here we're simulating a large screen.

40317
00:09:22,870 --> 00:09:28,540
So maybe on a laptop or a desktop, then it's taking up four out of 12.

40318
00:09:28,570 --> 00:09:30,790
It's this kind of proportion.

40319
00:09:30,790 --> 00:09:34,410
And then we go over to the next size down.

40320
00:09:34,420 --> 00:09:39,850
So on an iPad, then it's going to take up eight out of 12 of the screen.

40321
00:09:39,850 --> 00:09:46,400
And just for example, sakes, let's go down even further to a mobile size where we want it to take

40322
00:09:46,400 --> 00:09:49,820
up 100% or full width of the screen.

40323
00:09:49,820 --> 00:09:55,160
Because as you imagine, when we have more screen real estate, it's easier to see things.

40324
00:09:55,160 --> 00:10:00,500
And when we're working on smaller screens, we want to make things generally a bit larger so that it's

40325
00:10:00,500 --> 00:10:03,260
easier for users to see our content.

40326
00:10:03,830 --> 00:10:10,730
In addition to having multiple breakpoints in each div, you can also mix and match the types of definitions.

40327
00:10:10,730 --> 00:10:16,040
So for example, here we've got two sized columns, call two and call four.

40328
00:10:16,040 --> 00:10:21,530
So it's always going to take up two out of 12, the Section four out of 12 here.

40329
00:10:21,530 --> 00:10:25,620
But this last one, notice how we've just left it as the column class.

40330
00:10:25,640 --> 00:10:31,490
Now this means that it's going to automatically adjust in size in order to take up whatever proportion

40331
00:10:31,490 --> 00:10:32,450
remains.

40332
00:10:33,130 --> 00:10:40,270
Bootstrap layout is a little bit complicated when you're first working with it, and it's really important

40333
00:10:40,270 --> 00:10:46,780
that you read the docs and also have plenty of practice before things start to make more sense.

40334
00:10:46,780 --> 00:10:54,730
So in order for you to practice, I've created a website at github.io forward slash bootstrap dash layout,

40335
00:10:54,970 --> 00:11:00,220
and if you go to this website you'll see that I've got three exercises in total for you.

40336
00:11:00,490 --> 00:11:07,570
The idea of the exercises is that at the top there will be a demo area, which is the effect that you're

40337
00:11:07,570 --> 00:11:08,740
trying to achieve.

40338
00:11:08,770 --> 00:11:15,250
For example, in this case we want these Divs to be 50% on desktop and 100% on mobile.

40339
00:11:15,250 --> 00:11:24,310
So as I reduce the width, you'll see that it gets to a point where we reach that breakpoint where it

40340
00:11:24,310 --> 00:11:27,280
goes into 100% width.

40341
00:11:27,520 --> 00:11:33,050
As you scroll down, each of the different exercises will have different proportions.

40342
00:11:33,050 --> 00:11:41,090
And what you want to do is to modify the HTML code inside here, which is responsible for the styling

40343
00:11:41,090 --> 00:11:45,410
of the area that you control, which are the divs underneath the examples.

40344
00:11:45,410 --> 00:11:52,910
And I want you to add the classes for using the 12 column layout system so that your area behaves exactly

40345
00:11:52,910 --> 00:11:55,700
the same as the top area.

40346
00:11:55,700 --> 00:12:00,380
When you reduce the size and hit the various different breakpoints.

40347
00:12:00,860 --> 00:12:08,030
If you get stuck, be sure to check out the layout section of the bootstrap documentation and here you'll

40348
00:12:08,030 --> 00:12:10,700
see the different bootstrap breakpoints.

40349
00:12:10,700 --> 00:12:19,490
Also, you can read up more on how the columns work, how the containers work, and how the grid system

40350
00:12:19,490 --> 00:12:20,270
works.

40351
00:12:20,510 --> 00:12:23,600
Pause the video now and give this challenge a go.

40352
00:12:26,320 --> 00:12:30,910
So hopefully you've given this a go and you've managed to get everything to work correctly.

40353
00:12:30,940 --> 00:12:33,070
Let's go through the solution together.

40354
00:12:33,250 --> 00:12:38,560
The first example says it should be 50% on desktop and 100% on mobile.

40355
00:12:38,590 --> 00:12:47,860
We know that the desktop breakpoint is the XL, so we can define column dash XL dash six and six out

40356
00:12:47,860 --> 00:12:50,560
of 12 is of course 50%.

40357
00:12:50,590 --> 00:12:59,350
Now in order to get it to be 100% on mobile, we could say column dash dash 12, which is 100% and we

40358
00:12:59,350 --> 00:13:01,150
can add that to both divs.

40359
00:13:01,180 --> 00:13:07,360
Now if I go ahead and set apply changes, you can see now when I reduce the width of the window that

40360
00:13:07,360 --> 00:13:14,860
it's going to hit that breakpoint where below which it's no longer going to be 50% and it's going to

40361
00:13:14,860 --> 00:13:17,680
start taking up the full width.

40362
00:13:18,580 --> 00:13:25,420
Now, you might remember from previously we said that the bootstrap breakpoints, target sizes, this

40363
00:13:25,420 --> 00:13:27,450
particular size and above.

40364
00:13:27,470 --> 00:13:35,120
So when we define Column XL six, we're saying anything that's above the XL breakpoint, which is greater

40365
00:13:35,120 --> 00:13:39,110
than 1200 pixels, should be 50%.

40366
00:13:39,200 --> 00:13:44,270
You might have realized that you don't actually need to define this because everything else is going

40367
00:13:44,270 --> 00:13:45,860
to default to 100%.

40368
00:13:45,860 --> 00:13:51,530
So if I apply changes again, you can see that my purple example still behaves the same as the green

40369
00:13:51,530 --> 00:13:52,310
example.

40370
00:13:52,310 --> 00:13:58,220
And I've only changed the behavior of the XL size and above and changed its layout.

40371
00:13:58,820 --> 00:14:02,020
All right, so let's go to exercise number two.

40372
00:14:02,030 --> 00:14:07,310
And in this case, I haven't given you exactly what they should do or how they should behave.

40373
00:14:07,310 --> 00:14:14,240
And instead, I wanted you to simply just reduce the width of the screen to see how it changes through

40374
00:14:14,240 --> 00:14:15,710
the different sizes.

40375
00:14:15,800 --> 00:14:17,100
The first one's easy.

40376
00:14:17,120 --> 00:14:23,240
Pretty much all of the larger sizes, all the way down to the large breakpoint takes up the full 12

40377
00:14:23,240 --> 00:14:26,570
width column and you can take out a ruler if you want to measure the screen.

40378
00:14:26,570 --> 00:14:30,800
But we can see that column one is roughly half of the width of the row.

40379
00:14:30,830 --> 00:14:37,010
Column two and three are pretty much equal size, so it's probably going to be six, three and three.

40380
00:14:37,340 --> 00:14:41,960
Let's modify this so that we target the large breakpoint first.

40381
00:14:41,960 --> 00:14:47,510
So we'll say Col Dash, LG Dash six for the first column.

40382
00:14:47,540 --> 00:14:54,860
The second column is going to be called Dash, LG Dash three and the same for the third column.

40383
00:14:54,860 --> 00:15:00,350
So now if I click apply changes, you can see it's now taking up the same proportions.

40384
00:15:00,350 --> 00:15:08,360
But when we hit this breakpoint that's below the large breakpoint, our columns by default go to 100%,

40385
00:15:08,390 --> 00:15:11,390
whereas the example actually does something different.

40386
00:15:11,420 --> 00:15:16,460
The top column takes up 100% and the other two take up half of the width.

40387
00:15:16,460 --> 00:15:21,260
And you can see that behavior continues all the way until the very small size.

40388
00:15:21,260 --> 00:15:24,710
So that means that we've got an SM breakpoint there defined.

40389
00:15:24,740 --> 00:15:29,450
Now, once you've worked with this for a long time, you can spot each of the breakpoints pretty much

40390
00:15:29,450 --> 00:15:30,290
by eye.

40391
00:15:30,320 --> 00:15:36,020
But initially you can always just switch around, try different ones, try the SM, try the XL and see

40392
00:15:36,020 --> 00:15:38,880
which ones actually behave like the example.

40393
00:15:38,900 --> 00:15:44,030
There's nothing wrong with trial and error when it hits the smaller screen size.

40394
00:15:44,120 --> 00:15:51,650
Our column one is going to take up the full width of the row and then the other two on the smaller breakpoint

40395
00:15:51,650 --> 00:15:54,110
are going to take up half of the width.

40396
00:15:54,110 --> 00:15:56,000
So call SM six.

40397
00:15:56,590 --> 00:15:59,440
And similarly, the third one does the same thing.

40398
00:15:59,440 --> 00:16:00,940
So let's apply the change.

40399
00:16:00,940 --> 00:16:05,410
And you can see now at this breakpoint, they also behave exactly the same.

40400
00:16:05,410 --> 00:16:12,430
So now all we have left is the final one, which is just the smallest breakpoint for the columns.

40401
00:16:12,430 --> 00:16:19,560
And here what's actually happening is each of these columns are taking up ten out of 12 of the columns.

40402
00:16:19,570 --> 00:16:23,590
Now, I can spot that by eye, but also I created this exercise, so I know.

40403
00:16:23,590 --> 00:16:26,770
But if you try some different numbers, you'll probably get there as well.

40404
00:16:26,770 --> 00:16:35,380
So if we define the smallest size as column, let's just try an eight to start with so I can show you

40405
00:16:35,380 --> 00:16:37,210
this trial and error process.

40406
00:16:37,210 --> 00:16:40,690
And we know that all the columns behave the same at that breakpoint.

40407
00:16:40,690 --> 00:16:45,640
If we click apply changes and we go here, we can see, well, eight is clearly too small.

40408
00:16:45,640 --> 00:16:50,590
So let's go up a size and let's change to ten out of 12.

40409
00:16:50,590 --> 00:16:58,880
And once I hit apply changes, you can see we now have both sets of columns behaving exactly the same

40410
00:16:58,880 --> 00:17:00,710
at all the different breakpoints.

40411
00:17:00,710 --> 00:17:05,990
This one was a little bit harder, admittedly, and it required a little bit more thinking and probably

40412
00:17:05,990 --> 00:17:07,520
trial and error on your part.

40413
00:17:07,520 --> 00:17:12,950
But hopefully by the end of it you will understand a bit better about how these different breakpoints

40414
00:17:12,950 --> 00:17:15,260
work and at which points they hit.

40415
00:17:15,260 --> 00:17:20,180
So now for the final exercise and this one, we've got two columns.

40416
00:17:20,180 --> 00:17:29,150
Initially they start out in one line taking up a particular proportion and then we hit a certain breakpoint

40417
00:17:29,150 --> 00:17:31,820
and it changes the proportion.

40418
00:17:32,120 --> 00:17:37,700
Column one gets a little bit wider, takes up more space compared to column two.

40419
00:17:37,700 --> 00:17:44,390
And then if we reduce a little bit more, that changes again at the next breakpoint and then again and

40420
00:17:44,390 --> 00:17:46,430
then finally taking up full width.

40421
00:17:46,640 --> 00:17:52,010
So let's start with the largest breakpoint we know, which is the XL.

40422
00:17:52,340 --> 00:17:56,210
Let's say that coal dash XL.

40423
00:17:56,210 --> 00:18:02,240
And let's define as one out of 12 and then give the other half.

40424
00:18:02,360 --> 00:18:05,150
Um, 12 minus one is 11.

40425
00:18:05,150 --> 00:18:09,770
And now let's apply the change and you can see that is the correct proportion.

40426
00:18:10,040 --> 00:18:12,740
Again, this might require trial and error on your part.

40427
00:18:12,770 --> 00:18:14,090
Don't be too hard on yourself.

40428
00:18:14,090 --> 00:18:17,150
If you didn't manage to get it first time, I wouldn't be able to either.

40429
00:18:17,150 --> 00:18:19,760
If it was somebody else's exercise like this.

40430
00:18:19,850 --> 00:18:26,630
Now let's hit the next breakpoint just about here, and this is going to be the next breakpoint down.

40431
00:18:26,630 --> 00:18:28,070
This is the XL.

40432
00:18:28,100 --> 00:18:34,580
We've just hit 1200 and a tip for working with responsiveness.

40433
00:18:34,580 --> 00:18:39,580
When you're wondering how do I know that it's the 1200 pixel breakpoint that got hit?

40434
00:18:39,590 --> 00:18:46,880
If you go into the Chrome developer tools and click on this button to toggle the device toolbar and

40435
00:18:46,880 --> 00:18:54,080
change the dimensions to responsive, then you can click this drag bar and look at the top here.

40436
00:18:54,080 --> 00:19:01,850
This is the important width that we need to look at once I expand it to 1200, you can see that jump

40437
00:19:01,850 --> 00:19:04,340
in size happen just around there.

40438
00:19:04,340 --> 00:19:12,140
So we know that the 1200 breakpoint is the XL breakpoint and you can work this out this way as well.

40439
00:19:12,140 --> 00:19:16,250
So just a tip for the future when you're working with any kind of responsiveness.

40440
00:19:16,250 --> 00:19:21,650
This is really useful to know, but most of the time I would judge responsiveness just by eye when you're

40441
00:19:21,650 --> 00:19:24,350
designing the layout to see what looks good.

40442
00:19:25,010 --> 00:19:30,830
All right, so let's hit the next breakpoint at the XL size 1200 pixels.

40443
00:19:30,830 --> 00:19:36,650
So this is called Dash XL, and I reckon this is a ratio of 2 to 10.

40444
00:19:36,650 --> 00:19:44,330
So let's do call XL to call XL ten, let's apply our changes and that's pretty good.

40445
00:19:44,330 --> 00:19:52,070
So now let's keep reducing until we hit the next breakpoint and this is going to be the next level down,

40446
00:19:52,070 --> 00:19:53,690
which is large.

40447
00:19:53,720 --> 00:19:58,040
LG And I reckon this is probably 4 to 8.

40448
00:19:58,040 --> 00:20:06,620
So call Dash, LG Dash four and the next one will be called LG Dash eight.

40449
00:20:06,620 --> 00:20:11,900
And notice that each of these always add up to 12 because you can see in the example layout, they're

40450
00:20:11,900 --> 00:20:13,610
only taking up one row.

40451
00:20:13,640 --> 00:20:18,500
If it didn't add up to 12, then it will go to the next row in order to take up the amount of space

40452
00:20:18,500 --> 00:20:19,760
that we specified.

40453
00:20:20,000 --> 00:20:23,030
Now we have the next breakpoint, which is the cold dash.

40454
00:20:23,030 --> 00:20:28,550
MD And this one's easy to spot because it's half half, so it's going to be six.

40455
00:20:28,550 --> 00:20:35,150
And finally we have the rest are by default going to take up 100%.

40456
00:20:35,150 --> 00:20:38,420
So you could define the SM, but that's also the default behavior.

40457
00:20:38,420 --> 00:20:39,770
So you could also leave it out.

40458
00:20:40,130 --> 00:20:41,000
There you have it.

40459
00:20:41,000 --> 00:20:42,620
That's the final solution.

40460
00:20:42,620 --> 00:20:48,650
Code for exercise three and exercise two and exercise one.

40461
00:20:48,650 --> 00:20:52,670
Hopefully you manage to get there in the end, even if there was a little bit of trial and error and

40462
00:20:52,670 --> 00:20:53,810
some difficulty.

40463
00:20:53,810 --> 00:20:55,880
But once you've used bootstrap layout.

40464
00:20:55,890 --> 00:20:56,580
A few times.

40465
00:20:56,580 --> 00:20:58,170
You'll get used to this idea.

40466
00:20:58,170 --> 00:21:01,680
And it's a really intuitive way to lay out our screen.

40467
00:21:01,680 --> 00:21:06,270
And it's really easy to manipulate and to create different layout designs.

40468
00:21:06,660 --> 00:21:11,130
Now, in the next lesson, we're going to be talking through the different bootstrap components.

40469
00:21:11,130 --> 00:21:13,650
So for all of that and more, I'll see you there.


40470
00:00:00,260 --> 00:00:00,890
Hey, guys.

40471
00:00:00,890 --> 00:00:06,230
In this lesson, we're going to be learning about one of the most powerful features of Bootstrap and

40472
00:00:06,230 --> 00:00:11,090
one of the biggest reasons why we would be using bootstrap in our project in the first place.

40473
00:00:11,090 --> 00:00:19,460
And that is the concept of the bootstrap components, the pre-built pre-styled components like buttons

40474
00:00:19,460 --> 00:00:26,030
and cards and carousels and a whole load of beautiful things that we get access to simply by adding

40475
00:00:26,030 --> 00:00:29,390
in a bootstrap class into our HTML.

40476
00:00:29,510 --> 00:00:35,480
Let's start with one of the most commonly used components, which is the bootstrap button.

40477
00:00:35,480 --> 00:00:42,410
And this is a really good place to start because you also see the default bootstrap styling and the

40478
00:00:42,410 --> 00:00:47,920
color scheme in most of the components that you'll get access to through bootstrap.

40479
00:00:47,930 --> 00:00:51,440
If you want to give it a particular color.

40480
00:00:51,440 --> 00:00:59,360
It's really easy to access all of these default colors by simply using their name in most cases in a

40481
00:00:59,360 --> 00:01:06,690
bootstrap design website, the primary button, the go to, you know, the buy or the contact us or

40482
00:01:06,690 --> 00:01:13,470
download whatever will be this blue color and you can access all of the other colors through each of

40483
00:01:13,470 --> 00:01:18,930
their bootstrap names and they give you a little bit of a hint as to what they're used for.

40484
00:01:18,930 --> 00:01:22,560
So success is usually like an okay button danger.

40485
00:01:22,560 --> 00:01:29,130
Maybe if you click this button, something really bad happens or warning, etcetera, and you get access

40486
00:01:29,130 --> 00:01:37,950
to this button and this button styling simply by creating a button HTML element, giving it the class

40487
00:01:37,980 --> 00:01:45,210
BTN for a bootstrap button, and then adding the class for the color scheme from this list that you

40488
00:01:45,210 --> 00:01:46,200
want to choose.

40489
00:01:46,200 --> 00:01:47,730
Let's try this out.

40490
00:01:47,760 --> 00:01:54,990
Go ahead and download the starting files from the 11.2 bootstrap components zip file and once you've

40491
00:01:54,990 --> 00:01:57,690
extracted it, open it inside vs code.

40492
00:01:57,720 --> 00:01:59,970
Head over to index.html.

40493
00:02:00,000 --> 00:02:06,090
Now here you'll notice that I've already added in the bootstrap link, we've got a style section which

40494
00:02:06,090 --> 00:02:12,780
we can add custom CSS to and in the body area I want you to use the bootstrap documentation.

40495
00:02:12,780 --> 00:02:18,780
So if you go to the bootstrap main website at getbootstrap.com, go to docs and then scroll down to

40496
00:02:18,780 --> 00:02:26,370
the components, find the buttons, and I want you to put in a green button that says, okay, somewhere

40497
00:02:26,370 --> 00:02:27,630
onto this website.

40498
00:02:27,630 --> 00:02:34,170
Remember, you can preview it in real time to see if it's working and pause the video now and complete

40499
00:02:34,170 --> 00:02:35,100
this challenge.

40500
00:02:36,600 --> 00:02:36,930
All right.

40501
00:02:36,930 --> 00:02:38,760
So this is pretty simple.

40502
00:02:38,760 --> 00:02:42,480
We have a button which we said is going to say, okay.

40503
00:02:42,780 --> 00:02:49,500
And in order to style it using bootstrap, the first thing we do is add the BTN class and you can see

40504
00:02:49,500 --> 00:02:52,500
automatically the font changes, the background color changes.

40505
00:02:52,500 --> 00:02:55,830
And then we said we wanted to have a green button.

40506
00:02:55,830 --> 00:02:59,490
So the green button is BTN success.

40507
00:02:59,490 --> 00:03:02,820
So let's go ahead and add BTN success.

40508
00:03:02,820 --> 00:03:09,030
And once we're done, you can see we've got a beautiful green button with a hover animation with nice

40509
00:03:09,030 --> 00:03:15,330
styling, a good size, rounded corners, all of that goodness without doing a lot of work at all.

40510
00:03:15,330 --> 00:03:20,940
It was super, super simple to create this, and this should give you a taste of what's yet to come.

40511
00:03:21,240 --> 00:03:26,820
The next component I want to talk about is a really useful one, which is the card which you already

40512
00:03:26,820 --> 00:03:29,250
saw in the previous lessons exercise.

40513
00:03:29,250 --> 00:03:35,880
And as always, all we need to do is go to that particular component's page and then we can simply copy

40514
00:03:35,980 --> 00:03:42,490
the code, paste it into our website and replace certain parts of the code, such as the image source

40515
00:03:42,490 --> 00:03:43,720
or the alt text.

40516
00:03:43,840 --> 00:03:49,390
Now, one component that you're probably going to be using whenever you're building a website is a nav

40517
00:03:49,420 --> 00:03:54,940
bar, and the bootstrap nav bars are some of the best designed nav bars I've seen.

40518
00:03:54,940 --> 00:04:01,500
And it also is super easy to include simply using their example snippet codes.

40519
00:04:01,510 --> 00:04:09,610
If you head over to the nav bar, you can read on how it works And also what's some of the examples

40520
00:04:09,610 --> 00:04:17,260
they have are for example, this one with a search bar with some dropdowns, and this one which describes

40521
00:04:17,260 --> 00:04:23,200
how you can have the brand at the top left or if you want an image, image and text brand and you can

40522
00:04:23,200 --> 00:04:29,860
scroll through this to find the kind of nav bar you want to create and to use the example code.

40523
00:04:29,950 --> 00:04:36,820
Now another area for the nav bars is if you head over to examples and you go to the header section,

40524
00:04:36,820 --> 00:04:45,040
you can see some even more Fancily laid out nav bars over here in order to show you some of the different

40525
00:04:45,070 --> 00:04:49,060
types of components and how they can be used in real life.

40526
00:04:49,060 --> 00:04:53,920
We are going to be building a moving startup's website.

40527
00:04:53,950 --> 00:05:00,700
They're called Move It, which is pretty simple and it's got a one page website with many different

40528
00:05:00,700 --> 00:05:06,940
sections and I'm going to show you just how easy it is to build this entire fully fledged website using

40529
00:05:06,940 --> 00:05:08,770
just bootstrap components.

40530
00:05:08,770 --> 00:05:15,280
So the first thing we need is that nav bar, and you'll notice that I've taken the nav bar that is pretty

40531
00:05:15,280 --> 00:05:17,050
much this standard one.

40532
00:05:17,050 --> 00:05:20,710
So it's got a field which you can search for, say the postcode.

40533
00:05:20,710 --> 00:05:27,070
If our company works in your area, it's got some dropdown menus, it's got some other little areas

40534
00:05:27,070 --> 00:05:28,570
which you can click on.

40535
00:05:28,570 --> 00:05:37,540
So let's go ahead and copy the code for the starting point of our nav bar and let's paste it into the

40536
00:05:37,540 --> 00:05:39,700
body of our code.

40537
00:05:39,700 --> 00:05:43,540
So you can see as soon as I've done that, I've got my nav bar show up.

40538
00:05:43,540 --> 00:05:48,640
But one thing you'll notice as soon as you start playing around with it is when a bootstrap nav bar

40539
00:05:48,640 --> 00:05:57,370
is in a smaller width, it will automatically show a hamburger menu and that menu should have a dropdown

40540
00:05:57,370 --> 00:06:00,010
with all of the buttons from the navigation bar.

40541
00:06:00,010 --> 00:06:03,460
Now why is our button not working?

40542
00:06:03,460 --> 00:06:09,910
Now remember previously I said when we get started with Bootstrap there's two links to include via CDN.

40543
00:06:09,940 --> 00:06:14,410
The first one is the style sheet and that gives us all of the styling.

40544
00:06:14,410 --> 00:06:20,950
But the second one is the scripting code that gives us all of the functionality because this gives us

40545
00:06:20,950 --> 00:06:24,760
access to the bootstrap JavaScript code.

40546
00:06:24,760 --> 00:06:28,990
Now we don't need to understand anything about JavaScript just yet in order to use it.

40547
00:06:28,990 --> 00:06:37,030
All we need to do is copy that link and go to right at the end just before the closing body tag and

40548
00:06:37,030 --> 00:06:39,190
paste that script link in there.

40549
00:06:39,190 --> 00:06:45,160
And you can see as soon as I've done that, my buttons now work, my dropdowns work and all of these

40550
00:06:45,160 --> 00:06:52,360
clicking functionality bits start working and this again comes straight out of the box from Bootstrap.

40551
00:06:52,900 --> 00:06:56,710
Let's take a look at this website in a larger format.

40552
00:06:56,710 --> 00:07:03,370
By opening Inside Chrome, you can see that for the most part, these two nav bars look pretty similar.

40553
00:07:03,370 --> 00:07:07,630
All I did is got rid of some of the components and changed some of the other things.

40554
00:07:07,630 --> 00:07:13,000
For example, this button is disabled so that users can't click on it.

40555
00:07:13,000 --> 00:07:15,880
And in our version we actually just got rid of it.

40556
00:07:15,910 --> 00:07:18,850
We can do that quite easily by finding that button.

40557
00:07:18,850 --> 00:07:24,970
And you can see the reason why it's not enabled is because it has this class of disabled.

40558
00:07:24,970 --> 00:07:30,490
So if we get rid of that, then you can see this button is now active once more, but we don't actually

40559
00:07:30,490 --> 00:07:31,510
want it at all.

40560
00:07:31,510 --> 00:07:34,810
So let's delete that entire list item.

40561
00:07:34,810 --> 00:07:35,800
And now.

40562
00:07:35,960 --> 00:07:37,880
We only have three links.

40563
00:07:38,300 --> 00:07:40,160
Home link and dropdown.

40564
00:07:40,160 --> 00:07:43,910
So let's rename those links to about and services.

40565
00:07:43,910 --> 00:07:50,420
And again, because this is just a simple anchor tag, you know exactly how to work with this.

40566
00:07:50,420 --> 00:07:52,400
So the first one is link.

40567
00:07:52,400 --> 00:08:01,370
So we'll change this to about and the dropdown instead of reading dropdown will say is called services.

40568
00:08:01,370 --> 00:08:07,310
And you can imagine in the future we would have our different services in the dropdown, like moving

40569
00:08:07,310 --> 00:08:12,440
with a van, moving by, hauling everything yourself or something else.

40570
00:08:12,440 --> 00:08:16,130
But this is just an example of how our nav bar could look.

40571
00:08:16,370 --> 00:08:23,660
Now the first part of the nav bar is the nav bar brand and we can see that right up here.

40572
00:08:23,660 --> 00:08:27,680
We've got an anchor tag which is called the NAV Bar brand, for example.

40573
00:08:27,680 --> 00:08:32,120
If I change it to move it, then that's going to change our brand text.

40574
00:08:32,150 --> 00:08:39,059
In addition, we can also have a image in here so you can simply just add an image, give it a source,

40575
00:08:39,059 --> 00:08:42,690
maybe let's use one of the images we already have in our folder.

40576
00:08:42,690 --> 00:08:44,810
For example, the dog dot JPEG.

40577
00:08:44,820 --> 00:08:51,600
Now, because this image is super, super large and we haven't really resized it, then it's not really

40578
00:08:51,600 --> 00:08:55,230
going to work in the nav bar, but you can always change this.

40579
00:08:55,230 --> 00:08:57,630
So let's change the height to just 20 pixels.

40580
00:08:57,630 --> 00:09:01,140
Then you can see our nav bar brand image show up right there.

40581
00:09:01,170 --> 00:09:03,960
Now in our case, we're not going to use an image.

40582
00:09:03,960 --> 00:09:08,490
Instead, I'm going to delete that tag and I'm going to use an SVG.

40583
00:09:09,120 --> 00:09:14,010
This is a good time to show you the Svgs which are available through Bootstrap.

40584
00:09:14,010 --> 00:09:20,670
So if you go back to the home page and you click on icons, you can see you got all of these free icons

40585
00:09:20,670 --> 00:09:25,950
for you to use in any of your websites, paid, monetized, whatever.

40586
00:09:25,950 --> 00:09:31,830
And it's really hard actually, sometimes finding well-designed icons that you can simply add to your

40587
00:09:31,830 --> 00:09:35,430
project without having to pay royalties and buy it from a designer.

40588
00:09:35,430 --> 00:09:43,170
So this is also really, really neat and you can search through the different icons by using the filter.

40589
00:09:43,170 --> 00:09:49,650
So the one that I found is actually this box with seams on it, which looks very much like a moving

40590
00:09:49,650 --> 00:09:51,150
company box to me.

40591
00:09:51,150 --> 00:09:57,780
And you can either simply just copy the SVG straight up into your HTML.

40592
00:09:57,780 --> 00:10:00,540
So if I paste it in here, you'll see it show up right there.

40593
00:10:00,570 --> 00:10:07,890
Alternatively, you can also include it as an image and you set the source to the SVG that you have

40594
00:10:07,890 --> 00:10:10,800
saved in your folder, which is right here.

40595
00:10:11,310 --> 00:10:17,370
I'm going to use the image in the folder by setting it as a source and I'm going to set the alt text

40596
00:10:17,370 --> 00:10:25,500
to move it brand icon, and then I'm going to change the height to, let's say 30 so that it's a little

40597
00:10:25,500 --> 00:10:26,280
bit bigger.

40598
00:10:26,280 --> 00:10:30,870
And we now have a nav bar that looks the same as the example.

40599
00:10:30,990 --> 00:10:36,900
Now on the right hand side, there is a form here and I know we haven't spoken much about forms that's

40600
00:10:36,900 --> 00:10:37,620
all yet to come.

40601
00:10:37,620 --> 00:10:43,110
When we learn more about how to have the actual form functionality later on, especially in the back

40602
00:10:43,110 --> 00:10:46,170
end section, this is all going to come in really, really handy.

40603
00:10:46,170 --> 00:10:53,580
But for now, we're just going to change this search bar from search to say, post code and check.

40604
00:10:53,580 --> 00:10:55,500
So that's pretty easy to find.

40605
00:10:55,500 --> 00:11:01,350
You can either use command F to find those words or you can scroll through your code to find it as well.

40606
00:11:01,470 --> 00:11:09,540
Let's change the button to say check and let's change the placeholder for that search bar into, say,

40607
00:11:09,540 --> 00:11:10,590
a post code.

40608
00:11:12,420 --> 00:11:13,500
There we go.

40609
00:11:13,500 --> 00:11:16,320
And now we've completed our nav bar.

40610
00:11:16,320 --> 00:11:21,960
And if you had a design, all of that from scratch and all of the CSS that's included and you can see

40611
00:11:21,990 --> 00:11:27,990
just how much CSS there is actually, if you click on one of these items, you can see the nav link

40612
00:11:27,990 --> 00:11:35,220
that I just clicked on has all the padding defined, has all of this defined, has toggle styling.

40613
00:11:35,220 --> 00:11:37,980
And that's just one part of this entire nav bar.

40614
00:11:37,980 --> 00:11:44,340
So you can see just how much time we're saving ourselves and we're able to leverage a professional design

40615
00:11:44,340 --> 00:11:48,270
and create something that looks really contemporary and beautiful.

40616
00:11:48,420 --> 00:11:50,580
Now let's move on to the next section.

40617
00:11:50,580 --> 00:11:54,030
And this entire section is made up of different components.

40618
00:11:54,030 --> 00:11:59,160
So maybe an H1 heading, a paragraph, two buttons and an image.

40619
00:11:59,160 --> 00:12:04,710
But if we want to just take this layout, I actually got it from the examples.

40620
00:12:04,740 --> 00:12:11,130
The examples area is really, really good for taking bits and bobs of the different code snippets,

40621
00:12:11,130 --> 00:12:17,400
the different components that they've already styled and created for you, and simply putting it into

40622
00:12:17,430 --> 00:12:19,770
your website where it makes sense.

40623
00:12:19,770 --> 00:12:21,780
So this is a hero.

40624
00:12:21,780 --> 00:12:24,240
And as you can see, it's this one.

40625
00:12:24,240 --> 00:12:31,560
It's pretty much exactly the same title text, two buttons and an image, and everything is styled beautifully

40626
00:12:31,560 --> 00:12:33,810
already for you in order to use it.

40627
00:12:33,810 --> 00:12:35,730
All we need to do is right click.

40628
00:12:36,130 --> 00:12:37,360
On inspect.

40629
00:12:37,870 --> 00:12:41,560
And now we want to expand our elements area.

40630
00:12:41,570 --> 00:12:49,660
And what I tend to do is just to go upwards on the hover until the highlight actually highlights the

40631
00:12:49,660 --> 00:12:52,900
area that I want, which is this div right here.

40632
00:12:53,050 --> 00:13:00,010
Let's go ahead and copy this div and put it into our code just below our nav bar.

40633
00:13:00,430 --> 00:13:07,040
Now once I've done that, you can see we've got our centered screenshot text button and image.

40634
00:13:07,060 --> 00:13:11,530
Let's first fix that image so we can see what things should look like.

40635
00:13:11,530 --> 00:13:15,040
And their source is from the bootstrap docs.

40636
00:13:15,040 --> 00:13:22,900
But instead we want to use the one of the moving van so that we can show our users what our services

40637
00:13:22,900 --> 00:13:24,190
are all about.

40638
00:13:24,370 --> 00:13:28,330
And now all we have to do is just to replace the text.

40639
00:13:28,360 --> 00:13:36,260
If you look inside the starting file folder, there is a file called Website Text, and here you can

40640
00:13:36,260 --> 00:13:41,180
simply copy all of the website text and replace the relevant parts.

40641
00:13:41,720 --> 00:13:49,310
The H1 should say move with joy and then we've got a long bit of text which we're going to replace with

40642
00:13:49,310 --> 00:13:50,660
our paragraph.

40643
00:13:50,660 --> 00:13:56,060
So let's just copy everything in that paragraph element and replace it.

40644
00:13:56,060 --> 00:14:00,770
And then our buttons should say, get a quote and contact us.

40645
00:14:04,350 --> 00:14:08,940
And now we have a hero section done in two seconds.

40646
00:14:09,150 --> 00:14:13,740
Okay, maybe it was a little bit longer, but you can probably see just how powerful this is.

40647
00:14:13,890 --> 00:14:15,450
So now let's keep going.

40648
00:14:15,450 --> 00:14:20,880
In the next section of our example website, we've got some features and this is where you would usually

40649
00:14:20,880 --> 00:14:24,270
tell people what's so special about your particular startup?

40650
00:14:24,270 --> 00:14:26,580
Well, our startup is really professional.

40651
00:14:26,580 --> 00:14:30,240
We are available countrywide and we have a personal touch.

40652
00:14:30,240 --> 00:14:35,220
And you might have guessed this comes from the Bootstrap Examples page.

40653
00:14:35,220 --> 00:14:41,460
They have a section called Features, and this first feature is perfect for our needs.

40654
00:14:41,460 --> 00:14:47,070
And I think a lot of bootstrap design kind of comes from Apple because when you look at the Apple website,

40655
00:14:47,100 --> 00:14:54,450
a lot of the buttons, the shading, the kind of fonts, they all look really, really similar to the

40656
00:14:54,450 --> 00:14:55,590
bootstrap components.

40657
00:14:55,590 --> 00:15:02,940
And I think this is probably one of their design inspirations and we can get that simply with some copy

40658
00:15:02,940 --> 00:15:06,100
and pasting and a little bit of customization.

40659
00:15:06,310 --> 00:15:12,940
Again, let's go into the section of the features that we want and then we're going to keep hovering

40660
00:15:12,940 --> 00:15:20,320
up until we find the div that contains all the things that we want, right click, copy, copy element,

40661
00:15:20,320 --> 00:15:24,220
and we're going to put it below the previous section.

40662
00:15:24,430 --> 00:15:26,860
Now let's take a look at our good work.

40663
00:15:26,860 --> 00:15:30,580
We have our columns with icons and we've got three features.

40664
00:15:31,420 --> 00:15:34,420
Let's change the text of all of this.

40665
00:15:34,420 --> 00:15:39,490
First, and I'm going to fast forward through this section so you don't have to watch me copy paste.

40666
00:15:45,010 --> 00:15:46,240
And there you have it.

40667
00:15:46,270 --> 00:15:53,500
We've now got all the text replaced and we should have all of our copy, which is the text for your

40668
00:15:53,500 --> 00:15:57,190
website inserted into the relevant parts.

40669
00:15:57,310 --> 00:16:04,000
Now, one thing that you'll notice is very obvious is that this part does not look like this part.

40670
00:16:04,000 --> 00:16:07,030
And it also doesn't look like the part that we copied the code from.

40671
00:16:07,030 --> 00:16:09,120
So what is going on here?

40672
00:16:09,130 --> 00:16:15,900
Well, as I mentioned, most of the bootstrap styling and components come from bootstrap classes.

40673
00:16:15,910 --> 00:16:19,780
For example, this one looks like this because it has a class of icon link.

40674
00:16:19,780 --> 00:16:27,550
But sometimes sometimes we might want to customize the styling that we get so that we have some of our

40675
00:16:27,550 --> 00:16:31,660
own design features on top of what Bootstrap already addresses.

40676
00:16:31,660 --> 00:16:40,150
If we right click on these styled squares from the example website, and if you scroll up to find the

40677
00:16:40,150 --> 00:16:48,010
div where it highlights the entire square, you can see that this div actually has some custom styling.

40678
00:16:48,020 --> 00:16:53,570
Now the reason why we know it's custom is because all of the default bootstrap classes come from something

40679
00:16:53,570 --> 00:17:00,560
like utilities dot CSS, for example, the background gradient, for example, the margins, the align,

40680
00:17:00,560 --> 00:17:01,340
etcetera.

40681
00:17:01,340 --> 00:17:08,420
But the parts that come from custom CSS for this page is going to have a file that looks like this.

40682
00:17:08,420 --> 00:17:15,859
So for this features page, they've created some custom CSS and in that custom CSS file they've got

40683
00:17:15,869 --> 00:17:23,270
little bits of CSS just to make things look a little bit more custom rather than coming from bootstrap.

40684
00:17:23,510 --> 00:17:28,850
So the part that we're missing, as you can see, is something called feature icon.

40685
00:17:28,850 --> 00:17:37,670
So if we copy all of this CSS and put it into our CSS here between the style tags, then we look at

40686
00:17:37,670 --> 00:17:43,040
our website, we can see those squares styled the way we want.

40687
00:17:43,220 --> 00:17:51,530
Now what we're going to have to do is to remove the SVG in the examples and replace it with our own

40688
00:17:51,590 --> 00:17:53,680
svgs that we've downloaded.

40689
00:17:53,690 --> 00:17:57,560
So let's go ahead and find the first one which is here.

40690
00:17:57,830 --> 00:18:04,820
Let's go ahead and delete this and simply add an image with the source set as the first one, which

40691
00:18:04,820 --> 00:18:09,850
is the briefcase, because we're saying how professional we are.

40692
00:18:09,860 --> 00:18:20,630
So let's change the alt text and the second SVG will replace with the image that is the bus front.

40693
00:18:20,630 --> 00:18:25,340
And this is because we're saying that our services are available countrywide.

40694
00:18:25,580 --> 00:18:33,710
And then for the final feature icon, we're going to change it to the chat square.

40695
00:18:33,740 --> 00:18:41,840
Hard to say how much of a personal touch our company has, and now we should have all of the icons set

40696
00:18:41,840 --> 00:18:44,840
up, but they're a little bit small.

40697
00:18:44,990 --> 00:18:51,950
So in order to get it to the right size, we'll do the same thing that we did with the icon up there.

40698
00:18:51,950 --> 00:18:54,230
We'll give it a different height.

40699
00:18:54,350 --> 00:19:05,150
So let's go ahead and add a height of 30 to each of these svgs and now they are all correctly sized.

40700
00:19:05,150 --> 00:19:10,400
And while you've been doing the copy and pasting, you might notice there's another SVG here, which

40701
00:19:10,400 --> 00:19:11,960
is the Chevron, right?

40702
00:19:11,960 --> 00:19:15,170
Which is this little forward button here.

40703
00:19:15,170 --> 00:19:21,830
We can also replace that with our images, which is the Chevron, right?

40704
00:19:21,830 --> 00:19:29,900
And we'll give it an alt text and copy and paste this to all three places where they exist.

40705
00:19:31,760 --> 00:19:40,970
Now, the reason why the svgs that we copied from the features section doesn't work on our website is

40706
00:19:40,970 --> 00:19:44,450
because svgs can be installed in many different ways.

40707
00:19:44,450 --> 00:19:52,640
We can download it just as I have done and put them into the project folder and you can access it through

40708
00:19:52,640 --> 00:19:55,430
the SVG element or through an image element.

40709
00:19:55,760 --> 00:20:01,460
Alternatively, you can simply copy the entire HTML code for a clean look.

40710
00:20:01,460 --> 00:20:07,520
I've simply downloaded each of the Svgs into our resources folder and added them as images.

40711
00:20:07,520 --> 00:20:10,610
It really is up to you how you want to do it.

40712
00:20:10,910 --> 00:20:16,880
Now that you've seen a little bit about how we can use the different code snippets from the bootstrap

40713
00:20:16,880 --> 00:20:21,830
components or from bootstrap examples, I've got a exercise for you.

40714
00:20:21,950 --> 00:20:29,420
We know that the next section after features is our carousel and it's simply a component that allows

40715
00:20:29,420 --> 00:20:31,670
you to scroll through different pages.

40716
00:20:31,680 --> 00:20:37,980
Now the one that I've chosen here has an indicator at the bottom, so you can easily switch to whichever

40717
00:20:37,980 --> 00:20:38,850
page you want.

40718
00:20:38,880 --> 00:20:45,330
It's got the side buttons here so you can go left and right and all it has are just three large images,

40719
00:20:45,330 --> 00:20:49,440
but be aware that the images don't go all the way to the edge.

40720
00:20:49,440 --> 00:20:53,490
Instead, they are aligned with the rest of the content.

40721
00:20:53,490 --> 00:20:55,620
So have a think about what you've learnt before.

40722
00:20:55,650 --> 00:20:59,310
Have a read of the carousel documentation.

40723
00:20:59,310 --> 00:21:06,560
Find the example that you think looks the most like the outcome and see if you can complete this challenge.

40724
00:21:06,570 --> 00:21:07,740
Pause the video now.

40725
00:21:08,960 --> 00:21:09,440
All right.

40726
00:21:09,440 --> 00:21:15,440
If you completed this challenge successfully, we've now got another section here, which is a bootstrap

40727
00:21:15,440 --> 00:21:21,140
carousel, which is really neat when you want to display some gallery images or maybe you have some

40728
00:21:21,140 --> 00:21:26,060
testimonials you want users to be able to flip through and maybe you want to show all the members of

40729
00:21:26,060 --> 00:21:26,990
your team.

40730
00:21:26,990 --> 00:21:33,530
And if you look inside the carousel example here, you can see there's an example with different text,

40731
00:21:33,530 --> 00:21:37,070
but the example that I use is actually even simpler than that.

40732
00:21:37,070 --> 00:21:39,770
It's in the docs inside the components.

40733
00:21:39,770 --> 00:21:45,470
So going back to the components now, we can take a look at how the carousel works if you want to have

40734
00:21:45,470 --> 00:21:46,070
a read.

40735
00:21:46,070 --> 00:21:53,540
But I've chosen one of the basic examples which has an indicator where you can toggle to different pages

40736
00:21:53,540 --> 00:21:57,650
and we simply have a big image covering the entire carousel.

40737
00:21:57,650 --> 00:22:03,050
Let's copy this code and paste it into our website.

40738
00:22:03,410 --> 00:22:06,860
Now when you paste it, you won't see anything happen at all.

40739
00:22:06,860 --> 00:22:12,930
And the reason is because there's no images, the images are broken and that's because the images have

40740
00:22:12,930 --> 00:22:15,180
no source set by default.

40741
00:22:15,180 --> 00:22:18,420
So let's go ahead and set our carousel image source.

40742
00:22:18,420 --> 00:22:24,030
So the first one we're going to set to the couple and.

40743
00:22:25,950 --> 00:22:30,630
The second one we're going to set as the dog.

40744
00:22:32,820 --> 00:22:39,750
This is almost like an evolution of a family going from a couple to a dog to a family.

40745
00:22:39,750 --> 00:22:43,920
And finally, we have all of our photos set up.

40746
00:22:43,920 --> 00:22:50,760
And now if we take a look, you can see our carousel is showing and it's working, but it's maybe a

40747
00:22:50,760 --> 00:22:52,850
little bit too big.

40748
00:22:52,860 --> 00:22:56,670
It's kind of taking up more than the height of the website.

40749
00:22:56,670 --> 00:22:59,880
And that's because this is set to cover the entire width.

40750
00:23:00,030 --> 00:23:08,190
If you remember from previous lessons, one of the best components to size everything evenly is from

40751
00:23:08,190 --> 00:23:12,210
the layout section, and it is our container.

40752
00:23:12,210 --> 00:23:17,460
We know that we're going to get a uniform look if we put things inside a container div.

40753
00:23:17,490 --> 00:23:19,590
So that's exactly what we're going to do.

40754
00:23:19,590 --> 00:23:29,370
I'm going to create a div and I'm going to set it to class of container and I'm going to move the final

40755
00:23:29,370 --> 00:23:33,250
closing div just below the carousel.

40756
00:23:33,520 --> 00:23:41,140
And now when we go back you can see our carousel is nicely enclosed inside the container and you can

40757
00:23:41,140 --> 00:23:49,120
see that no matter which size I change to, we've always got a consistent look with that container responsiveness.

40758
00:23:49,630 --> 00:23:55,060
We're now ready for the final section of our website, which is just the footer.

40759
00:23:55,060 --> 00:23:58,930
And I haven't done a lot of work on the footer.

40760
00:23:58,930 --> 00:24:06,370
I've simply gone into the snippets, found the footer section, picked one that I liked and then hit

40761
00:24:06,370 --> 00:24:14,620
inspect to find the starting point of the footer and pasted that code into the correct position.

40762
00:24:14,890 --> 00:24:19,600
I'm not going to modify this too much because you already know how you can do that, but just look at

40763
00:24:19,600 --> 00:24:27,580
how easy it was to create this beautiful website in a matter of minutes using bootstrap components.

40764
00:24:28,000 --> 00:24:33,910
The components are really, really handy, as are the snippets and the example code because they allow

40765
00:24:33,910 --> 00:24:40,030
you to pick a style out of their palette that you like and simply add it into your website.

40766
00:24:40,030 --> 00:24:46,570
And this makes it super easy to build well-thought out designs very, very quickly.

40767
00:24:46,870 --> 00:24:53,110
In addition to the layout classes, that Bootstrap gives you the component classes, there are also

40768
00:24:53,110 --> 00:24:54,970
utility classes and helpers.

40769
00:24:54,970 --> 00:24:59,470
And one really important aspect of this is spacing.

40770
00:24:59,590 --> 00:25:04,180
Very often when we're designing websites, we want to add margin, we want to add padding.

40771
00:25:04,180 --> 00:25:06,220
And this is all spacing, right?

40772
00:25:06,370 --> 00:25:14,770
As you might remember from previous lessons, padding sets up the part between the item and the containing

40773
00:25:14,770 --> 00:25:15,160
div.

40774
00:25:15,160 --> 00:25:25,660
So this part and the margin sets up the spacing between the outline of your item and any other components.

40775
00:25:25,810 --> 00:25:30,610
So you can set all of those values using very simple bootstrap notation.

40776
00:25:30,610 --> 00:25:32,590
So let's run through this quickly.

40777
00:25:32,590 --> 00:25:40,120
It's a format where you have the property, which sides you want, a dash and then the size.

40778
00:25:40,120 --> 00:25:42,580
And this is really easy to figure out.

40779
00:25:42,580 --> 00:25:50,110
So for example, if I wanted to set margin only to the top of my element, then I can say m T So.

40780
00:25:50,140 --> 00:25:52,150
M For classes that set margin.

40781
00:25:52,180 --> 00:25:59,040
T that sets margin top or padding top and then using a dash, I can say how much margin I want.

40782
00:25:59,050 --> 00:26:05,560
So zero is eliminating the margin and then we can add a little bit more, a little bit more, a little

40783
00:26:05,560 --> 00:26:06,070
bit more.

40784
00:26:06,070 --> 00:26:11,080
So if I had margin top five, that's usually the maximum that you'll need.

40785
00:26:11,230 --> 00:26:15,580
And then there's this concept of X and Y.

40786
00:26:15,610 --> 00:26:22,540
So if you want to set the margin for both the top and the bottom, you'll use the x axis.

40787
00:26:22,540 --> 00:26:28,900
And if you want to set the margin or padding for the left and the right, then you can use that y axis.

40788
00:26:28,900 --> 00:26:32,740
So maybe you'll have MY-3.

40789
00:26:32,890 --> 00:26:40,090
It looks like my three, but it actually says set the margin for the y axis to a size of three.

40790
00:26:40,090 --> 00:26:45,940
It's relatively easy once you understand it, but when you just see it in the code, it can be really,

40791
00:26:45,940 --> 00:26:46,870
really confusing.

40792
00:26:46,870 --> 00:26:55,600
But now you should be able to see that in our footer we've got MB-2 and that of course stands for adding

40793
00:26:55,600 --> 00:26:59,620
margin to the bottom.

40794
00:27:00,670 --> 00:27:03,790
And it's a size of two.

40795
00:27:04,090 --> 00:27:06,220
That's how we can decode all this.

40796
00:27:07,210 --> 00:27:14,560
Now, the final neat trick I want to show you in this lesson is how you can add dark mode to your website,

40797
00:27:14,590 --> 00:27:21,970
flipping the colors around by simply adding one property into your HTML tag.

40798
00:27:22,120 --> 00:27:28,150
If you go into the customize section, go into color modes, you'll see that Bootstrap now supports

40799
00:27:28,150 --> 00:27:31,210
dark mode and it can flip the entire.

40800
00:27:31,230 --> 00:27:38,610
Project's theme to the opposite color simply by setting the data bootstrap theme to dark.

40801
00:27:38,910 --> 00:27:41,520
Let's try that out on our website.

40802
00:27:41,820 --> 00:27:46,440
Let's go all the way up to our HTML after the language is set.

40803
00:27:46,470 --> 00:27:53,880
Let's change the theme to Dark and you can see our entire website has now been reformatted to a dark

40804
00:27:53,880 --> 00:27:56,100
theme, which is super neat.

40805
00:27:56,100 --> 00:28:01,560
If this is the design that you want or if later on when we learn about JavaScript and we can put in

40806
00:28:01,560 --> 00:28:08,670
buttons to change the theme of our website to whichever the user prefers so that the user can change

40807
00:28:08,670 --> 00:28:11,190
that theme to whichever they prefer.

40808
00:28:11,670 --> 00:28:18,660
So now you're starting to see how powerful bootstrap can be using these examples, using snippets,

40809
00:28:18,660 --> 00:28:23,730
using the pre-built components and styling as well as the layout system.

40810
00:28:23,910 --> 00:28:29,280
But if you've tried to build websites before, you've probably come across full page themes completely

40811
00:28:29,280 --> 00:28:30,410
built out for you.

40812
00:28:30,420 --> 00:28:33,120
For example, with Squarespace.

40813
00:28:33,150 --> 00:28:39,000
The catch, though, is you're going to have to pay something like £12 a month or $10 a month in order

40814
00:28:39,000 --> 00:28:45,390
to just be able to use these templates of theirs and to have your website on the Internet.

40815
00:28:45,510 --> 00:28:51,390
What I want to show you is that with Bootstrap there are a whole bunch of free themes and paid for themes

40816
00:28:51,390 --> 00:28:57,210
that you can use that are one off costs for you to build beautiful websites and simply customize the

40817
00:28:57,210 --> 00:28:57,790
themes.

40818
00:28:57,810 --> 00:29:04,860
Now that you know all about bootstrap, one handy template is from W3 schools and they have some of

40819
00:29:04,860 --> 00:29:07,890
the most common website layouts like a blog.

40820
00:29:07,890 --> 00:29:13,620
You might have a sidebar main, a footer or what a portfolio might look like or what a web page might

40821
00:29:13,620 --> 00:29:14,160
look like.

40822
00:29:14,190 --> 00:29:15,090
A social website.

40823
00:29:15,090 --> 00:29:15,570
ET cetera.

40824
00:29:15,570 --> 00:29:16,200
ET cetera.

40825
00:29:16,200 --> 00:29:23,400
And they've built these simple examples for you to be able to simply take the code and customize in

40826
00:29:23,400 --> 00:29:25,500
order for you to use their examples.

40827
00:29:25,500 --> 00:29:31,530
You can simply do, as we have done, find a template that you want to replicate and then customize

40828
00:29:31,530 --> 00:29:36,390
it and maybe add some more custom CSS in order to achieve the look that you want.

40829
00:29:36,510 --> 00:29:43,170
If you think that these are a little bit basic because they are, the idea is they're mostly for layout,

40830
00:29:43,170 --> 00:29:47,940
getting the big structure done using the bootstrap layout system.

40831
00:29:48,090 --> 00:29:54,330
There are a lot of other beautiful bootstrap themes that are more complete in a way, starting with

40832
00:29:54,330 --> 00:29:56,590
the official bootstrap themes itself.

40833
00:29:56,610 --> 00:30:00,000
If we head back to the main bootstrap website, click on themes.

40834
00:30:00,000 --> 00:30:06,360
You can see that they've got these professionally designed websites and many of them look absolutely

40835
00:30:06,360 --> 00:30:07,500
incredible.

40836
00:30:07,500 --> 00:30:13,890
So depending on what it is that you're trying to build, you could use one of these templates.

40837
00:30:13,890 --> 00:30:20,400
But the only downside to this is they are in fact all paid for because there's a lot of work that's

40838
00:30:20,400 --> 00:30:21,600
gone into it, right?

40839
00:30:21,750 --> 00:30:23,760
But these are mostly one off costs.

40840
00:30:23,760 --> 00:30:30,450
And if you don't want to pay to get a theme, you can always search through Google for free bootstrap

40841
00:30:30,480 --> 00:30:36,540
templates and you'll find a whole range of websites that have free and paid for bootstrap websites.

40842
00:30:36,540 --> 00:30:40,590
And again, you can do the same thing as we've been doing so far in this lesson.

40843
00:30:40,590 --> 00:30:46,200
Just getting hold of the components you want, customizing it and getting the design that you're looking

40844
00:30:46,200 --> 00:30:46,710
for.

40845
00:30:47,520 --> 00:30:53,850
So hopefully in this lesson you've seen that bootstrap can be incredibly easy to create components and

40846
00:30:53,850 --> 00:31:00,210
features in our websites very, very quickly, and it has consistent and beautiful design to boot.

40847
00:31:00,850 --> 00:31:06,360
And if you've really taken to bootstrap and web design, you can even create and sell your own themes.

40848
00:31:06,370 --> 00:31:12,430
If you really enjoy working with bootstrap and designing websites and creating websites using the bootstrap

40849
00:31:12,430 --> 00:31:19,540
components, you can create the templates yourself and put them onto marketplaces and sell them as a

40850
00:31:19,540 --> 00:31:21,040
potential source of income.

40851
00:31:21,040 --> 00:31:25,600
So have a play around with the other components, see what bootstrap themes are out there.

40852
00:31:25,600 --> 00:31:31,540
And in the next lesson, we've got the final project for this section where you're going to be building

40853
00:31:31,570 --> 00:31:36,520
a fully fledged startup website or by yourself using your knowledge of bootstrap.

40854
00:31:36,520 --> 00:31:39,100
So for all of that and more, I'll see you there.


40855
00:00:00,230 --> 00:00:00,560
All right.

40856
00:00:00,560 --> 00:00:06,740
So now that you've learned all about bootstrap, it's time to apply what we've learned and build a project.

40857
00:00:06,770 --> 00:00:12,620
I want you to imagine that a startup has approached you to build their landing page.

40858
00:00:12,620 --> 00:00:20,480
So the company is called Tin Dog, and they make basically tinder for dogs, helping dogs meet new and

40859
00:00:20,480 --> 00:00:22,460
interesting dogs nearby.

40860
00:00:22,640 --> 00:00:26,720
Obviously this is a fake startup that I've created.

40861
00:00:26,750 --> 00:00:30,520
Now, if you want to go ahead and steal this idea, then I fully support you.

40862
00:00:30,530 --> 00:00:32,770
But essentially the idea is very simple.

40863
00:00:32,780 --> 00:00:37,100
You have a dog, you want your dog to have friends, so let's use tin dog.

40864
00:00:37,130 --> 00:00:42,770
Now our website is pretty fully fledged and if you want to look at what the finished product looks like,

40865
00:00:42,770 --> 00:00:46,700
head over to App Github.io forward slash tin dog.

40866
00:00:46,820 --> 00:00:48,480
And this is what you'll see.

40867
00:00:48,500 --> 00:00:56,600
It's a really simple startup website with a animated gradient background with buttons to download the

40868
00:00:56,600 --> 00:01:03,230
app as well as features testimonials, pricing and a footer.

40869
00:01:03,530 --> 00:01:09,710
We're going to be creating this beautiful website, and the way we're going to do it is through the

40870
00:01:09,710 --> 00:01:17,510
use of the different snippets that are provided by bootstrap as well as the different components and

40871
00:01:17,510 --> 00:01:25,160
using bootstrap layout to get it responsive and looking beautiful on desktop and mobile straight out

40872
00:01:25,160 --> 00:01:26,150
of the box.

40873
00:01:26,540 --> 00:01:34,070
To get started first download the Tin Dog project, unzip the file and open it inside vs code.

40874
00:01:34,490 --> 00:01:43,430
Now here I want you to open up the index.html and you can see I've provided some comments and some section

40875
00:01:43,700 --> 00:01:44,810
HTML elements.

40876
00:01:44,840 --> 00:01:53,300
These section elements are mostly used to separate different sections of a website, so it's just a

40877
00:01:53,300 --> 00:01:55,790
group or area of the website.

40878
00:01:55,790 --> 00:01:59,660
And in modern websites you'll see very often these sections.

40879
00:01:59,760 --> 00:02:06,750
So this one is a section, this is a section, this is a section and it keeps the code nice and organized

40880
00:02:06,750 --> 00:02:11,790
and you're going to be writing your code in between these section elements in order to create each of

40881
00:02:11,790 --> 00:02:13,000
these areas.

40882
00:02:13,020 --> 00:02:15,150
Now, what are you aiming for?

40883
00:02:15,150 --> 00:02:22,530
Well, you can always refer to the live website at GitHub.com Forward slash Tin Dog to see what everything

40884
00:02:22,530 --> 00:02:23,850
should look like.

40885
00:02:23,850 --> 00:02:31,170
But I've also provided goal images for each individual section that's marked up to point you to certain

40886
00:02:31,170 --> 00:02:33,030
areas that need more attention.

40887
00:02:33,030 --> 00:02:36,900
For example, what's the name of the image that's going to be displayed here?

40888
00:02:36,900 --> 00:02:43,200
Well, it's iPhone dot PNG and you can find it inside the images folder, but also things like this

40889
00:02:43,200 --> 00:02:48,900
little Apple icon is actually an SVG and you can find those inside the README.

40890
00:02:48,930 --> 00:02:55,890
So I've included all the SVG code in here and I want you to be copy and pasting these svgs because some

40891
00:02:55,890 --> 00:03:01,440
of them have different heights, they have different sizes and instead of getting it from the bootstrap

40892
00:03:01,440 --> 00:03:05,220
website, which this is from, I want you to use this version.

40893
00:03:05,220 --> 00:03:08,070
So just copy and paste it into your code.

40894
00:03:08,190 --> 00:03:15,840
Also, if you scroll down, there's the text copy that you'll need on your website and so you can either

40895
00:03:15,840 --> 00:03:22,680
copy it straight from the final finished website or you can use the text from the README and just copy

40896
00:03:22,710 --> 00:03:23,580
it from here.

40897
00:03:23,820 --> 00:03:27,540
If you're working as a web developer, this is a very common workflow.

40898
00:03:27,570 --> 00:03:33,120
You'll want your client to create the text copy because they know the most about what they want on their

40899
00:03:33,120 --> 00:03:38,730
website, and all you have to do is just place it and style it in the right ways.

40900
00:03:39,000 --> 00:03:45,180
Now, the final thing I want to mention is if you look inside the style.css, this is going to be your

40901
00:03:45,180 --> 00:03:47,820
CSS style sheet for the website.

40902
00:03:47,820 --> 00:03:49,770
You can see that already in there.

40903
00:03:49,770 --> 00:03:57,900
I've got a class called Gradient Background, and this code comes from a codepen by Manuel Pinto where

40904
00:03:57,900 --> 00:04:05,550
he created a pure CSS gradient background PSD, and we're simply just using this code but defining some

40905
00:04:05,550 --> 00:04:07,530
unique colors of our own.

40906
00:04:07,530 --> 00:04:14,730
And you can see in here we are having our animated gradient hovers between these three colors, a blue,

40907
00:04:14,760 --> 00:04:16,829
a red and a sort of peachy color.

40908
00:04:17,160 --> 00:04:21,570
And that's how we're going to get this gradient background similar to other things you've been doing

40909
00:04:21,570 --> 00:04:22,470
with Bootstrap.

40910
00:04:22,470 --> 00:04:28,590
In order to get this gradient to show, all you have to do is to add this class to your HTML element

40911
00:04:28,590 --> 00:04:33,300
and then it will automatically animate with this beautiful color scheme.

40912
00:04:33,600 --> 00:04:40,140
This project is going to require a little bit of exploration, a little bit of looking around the bootstrap

40913
00:04:40,140 --> 00:04:47,760
example, seeing which ones might work and comparing them, for example, which of the heroes might

40914
00:04:47,760 --> 00:04:54,840
be the one that we could use, or which of the features might match the one that we've got here and

40915
00:04:54,840 --> 00:04:59,270
customizing it and checking its CSS and.

40916
00:04:59,280 --> 00:05:03,990
Making sure that things look pretty much the same as the final outcome.

40917
00:05:04,350 --> 00:05:09,030
Now it's time for you to pause the video and give this challenge a good go.

40918
00:05:09,060 --> 00:05:12,000
You might have to spend half an hour, an hour on it.

40919
00:05:12,000 --> 00:05:14,610
Just give yourself lots of time to make mistakes.

40920
00:05:14,610 --> 00:05:15,600
Try things out.

40921
00:05:15,600 --> 00:05:17,030
Don't be too harsh on yourself.

40922
00:05:17,040 --> 00:05:19,830
This is a big project, but I believe in you.

40923
00:05:19,830 --> 00:05:21,000
I think you can do it.

40924
00:05:21,030 --> 00:05:23,280
Pause the video now and see how you get on.

40925
00:05:28,770 --> 00:05:29,130
All right.

40926
00:05:29,130 --> 00:05:34,880
Hopefully you've completed this challenge and you're just here to see how I'm doing it.

40927
00:05:34,890 --> 00:05:41,460
If you haven't given this a go, I really recommend you to stop, pause the video and actually try it

40928
00:05:41,460 --> 00:05:47,190
first because you can listen to me all day long, but you're not going to learn until you actually take

40929
00:05:47,190 --> 00:05:49,560
the first step and write the code yourself.

40930
00:05:49,560 --> 00:05:55,020
I know it can be really, really tempting, but I promise you this is the only way you're going to be

40931
00:05:55,020 --> 00:06:00,480
able to move on to harder things in the future by struggling through each and every single step.

40932
00:06:00,480 --> 00:06:06,660
Because once we start moving on, I'm going to assume that all of these things are in your tool belt.

40933
00:06:06,660 --> 00:06:09,600
So make sure you practice, practice, practice.

40934
00:06:09,600 --> 00:06:11,790
And this is a perfect opportunity.

40935
00:06:12,060 --> 00:06:12,420
All right.

40936
00:06:12,420 --> 00:06:13,230
Pep talk over.

40937
00:06:13,230 --> 00:06:16,200
Let's go ahead and build out this website.

40938
00:06:16,320 --> 00:06:19,590
Now, the first thing I'm going to do is build out this title section.

40939
00:06:19,590 --> 00:06:25,260
So if we take a look at the title goal, we can see it's pretty much what we call a hero section.

40940
00:06:25,260 --> 00:06:32,500
If we take a look inside the the bootstrap examples and we look inside the hero's area, you can see

40941
00:06:32,500 --> 00:06:35,200
it looks incredibly similar to the layout here.

40942
00:06:35,200 --> 00:06:40,780
It's got some big text, some buttons and an image to the right, which is pretty much what we have.

40943
00:06:40,780 --> 00:06:48,760
So let's go ahead and right click, inspect and scroll up to the top level that contains everything

40944
00:06:48,760 --> 00:06:53,320
just after the divider and let's copy the entire element.

40945
00:06:53,560 --> 00:07:01,720
I'm going to paste that element into this section area and let's hit save and see what it looks like.

40946
00:07:01,720 --> 00:07:08,350
So I'm going to show preview just to get this URL and I'm going to open it inside Chrome so I can see

40947
00:07:08,350 --> 00:07:09,790
it in full screen.

40948
00:07:09,790 --> 00:07:13,030
Now you can see this doesn't look like bootstrap at all.

40949
00:07:13,060 --> 00:07:15,490
The text is not the right font.

40950
00:07:15,670 --> 00:07:16,780
The buttons are not styled.

40951
00:07:16,780 --> 00:07:18,580
This is just pure HTML.

40952
00:07:18,580 --> 00:07:22,450
This should give you a big hint as to what is wrong.

40953
00:07:22,450 --> 00:07:27,670
And that is because we have not yet added a link to the bootstrap CSS.

40954
00:07:27,820 --> 00:07:29,920
So let's go ahead and do that now.

40955
00:07:29,920 --> 00:07:37,750
So if we go back to the main bootstrap docs and go to the home page, we should be able to grab hold

40956
00:07:37,750 --> 00:07:42,310
of the link and we can paste it into our project.

40957
00:07:42,310 --> 00:07:46,090
So now let's hit, save and go back to our tin dog.

40958
00:07:46,090 --> 00:07:52,630
We should see that we have what is closer to the example that we saw right here.

40959
00:07:53,200 --> 00:07:55,720
There's a couple of things that we will need to fix.

40960
00:07:55,720 --> 00:08:00,430
First, let's go ahead and get rid of this broken image and put in the image that we want.

40961
00:08:00,730 --> 00:08:02,920
Here is the image.

40962
00:08:02,920 --> 00:08:09,670
So let's go ahead and change the source to our image, which is inside the images folder.

40963
00:08:09,670 --> 00:08:11,530
And it's called iPhone dot PNG.

40964
00:08:12,040 --> 00:08:15,430
And let's change the alt to app demo.

40965
00:08:15,430 --> 00:08:20,680
Let's hit, save and go back and we can see this is absolutely massive.

40966
00:08:20,680 --> 00:08:23,470
So now we're going to have to adjust the size.

40967
00:08:23,470 --> 00:08:27,760
So here it's set to width, 700 height, 500.

40968
00:08:27,760 --> 00:08:29,620
I'm going to keep the aspect ratio.

40969
00:08:29,620 --> 00:08:35,740
So I'm going to delete just the width and hopefully it will adjust proportionally and I'm going to change

40970
00:08:35,740 --> 00:08:37,870
the height to 200 pixels.

40971
00:08:37,870 --> 00:08:40,750
And this looks more or less the right size.

40972
00:08:40,780 --> 00:08:43,480
Now yours might be a little bit bigger, a little bit smaller.

40973
00:08:43,480 --> 00:08:46,810
It doesn't really matter as long as it looks good to your eye.

40974
00:08:46,990 --> 00:08:53,080
Now the next thing we're going to do is let's change all of this text so that it reads the same as the

40975
00:08:53,080 --> 00:08:54,220
final copy.

40976
00:08:54,220 --> 00:09:01,210
And to do that, I'm going to find the text inside my readme me, go ahead and copy and paste it into

40977
00:09:01,210 --> 00:09:02,530
the right areas.

40978
00:09:02,530 --> 00:09:09,160
So we've got an H1 and that's where we're going to replace with our big heading meet new and interesting

40979
00:09:09,160 --> 00:09:10,360
dogs nearby.

40980
00:09:10,360 --> 00:09:16,510
And then I'm going to delete this paragraph element because we don't actually have it in our final design.

40981
00:09:16,510 --> 00:09:20,170
And I'm going to change the two buttons to both say download.

40982
00:09:20,470 --> 00:09:28,780
In addition to the download, there's obviously two svgs as well, and these are the icons from Bootstrap.

40983
00:09:28,780 --> 00:09:34,840
But remember I mentioned that you can get hold of these svgs in the README file, so I'm going to wholesale

40984
00:09:34,840 --> 00:09:39,880
just copy this apple SVG and paste it into here.

40985
00:09:39,880 --> 00:09:48,610
Add a space between the SVG and download and now hopefully we have a good looking apple symbol in the

40986
00:09:48,640 --> 00:09:53,650
download button and I'm going to do the same with the Google Play logo.

40987
00:09:56,050 --> 00:09:57,520
Hit save and that's it.

40988
00:09:57,520 --> 00:09:58,310
There it is.

40989
00:09:58,330 --> 00:10:00,730
We're going to change the color scheme here a little bit.

40990
00:10:00,760 --> 00:10:06,550
We've got a button light and we've got a button outline light so that it would look the same as the

40991
00:10:06,550 --> 00:10:07,760
final design.

40992
00:10:07,780 --> 00:10:16,060
Now, right now, this button is a button primary, so we're going to have to change that to light.

40993
00:10:16,060 --> 00:10:19,660
And this one, is it a button outline secondary.

40994
00:10:19,690 --> 00:10:23,110
We're going to change that to button outline light.

40995
00:10:23,290 --> 00:10:26,260
Let's hit, save and see what we have.

40996
00:10:26,290 --> 00:10:32,650
Now you'll notice that this button is almost completely disappeared if not for this rollover effect.

40997
00:10:32,650 --> 00:10:36,400
And the reason is because it's more or less a white outline.

40998
00:10:36,520 --> 00:10:39,400
In order for this to show we need a background.

40999
00:10:39,400 --> 00:10:44,380
So let's go ahead and set it up with this gradient background.

41000
00:10:44,470 --> 00:10:51,040
Remember I mentioned that if you look inside the Style.css file, there is already a class called gradient

41001
00:10:51,040 --> 00:10:56,540
background, which we can add into our HTML for it to show up.

41002
00:10:56,540 --> 00:11:00,350
Now where do we add it before we can add it?

41003
00:11:00,380 --> 00:11:07,400
We need to import our CSS and as always, we put our custom CSS after the bootstrap.

41004
00:11:07,400 --> 00:11:13,940
So in case there are any collisions in terms of targeting the same selectors, the final one wins out,

41005
00:11:13,940 --> 00:11:17,180
which hopefully is our CSS.

41006
00:11:17,420 --> 00:11:23,960
So I'm going to link to the style CSS and then I'm going to put that class gradient background into

41007
00:11:23,960 --> 00:11:25,820
my title section.

41008
00:11:25,820 --> 00:11:27,560
So where do I put it now?

41009
00:11:27,560 --> 00:11:33,350
If I put it inside the container, you'll see that it's only inside the container and the container's

41010
00:11:33,350 --> 00:11:35,270
got these big margins on the left and right.

41011
00:11:35,270 --> 00:11:37,850
So this is not the look that we want.

41012
00:11:37,880 --> 00:11:42,710
Instead, we're going to put this inside the section.

41013
00:11:42,860 --> 00:11:47,660
We can't put it into the ID because it's not an ID, it's actually a class.

41014
00:11:47,660 --> 00:11:51,980
So make sure you've got it set inside the class property.

41015
00:11:52,040 --> 00:11:53,420
Now let's take a look.

41016
00:11:53,420 --> 00:11:55,520
And this looks pretty good.

41017
00:11:55,580 --> 00:12:01,820
Now, the only difference between what we have and what we're aiming for is a lot of padding.

41018
00:12:02,030 --> 00:12:08,600
Now, the reason I can tell this padding and not margin is because padding extends the background.

41019
00:12:08,600 --> 00:12:12,560
So if this was an extra margin, then this area would be white.

41020
00:12:12,560 --> 00:12:16,570
But instead it's actually the same as the background color.

41021
00:12:16,580 --> 00:12:19,070
So where does this margin come from?

41022
00:12:19,070 --> 00:12:26,300
Let's go ahead and hit, inspect and make this just a little bit smaller so we can see this padding.

41023
00:12:26,300 --> 00:12:33,080
And if we scroll up until we see the padding show up, you can see that orange down there when I hover

41024
00:12:33,080 --> 00:12:33,740
over it.

41025
00:12:33,770 --> 00:12:36,490
Well, that is what we need to get rid of.

41026
00:12:36,500 --> 00:12:39,800
So you can see we've got padding top and padding bottom.

41027
00:12:39,800 --> 00:12:45,530
And if we get rid of the top and bottom, it will look a little bit too much.

41028
00:12:45,530 --> 00:12:51,530
So if we just target the bottom, then we've got more or less the right layout.

41029
00:12:51,620 --> 00:12:56,720
So let's go in here and find that P five for the container which is right here.

41030
00:12:56,720 --> 00:13:01,880
And remember, the P stands for padding, the Y stands for the Y axis.

41031
00:13:01,880 --> 00:13:05,210
So it means it's adding padding to the top and the bottom.

41032
00:13:05,210 --> 00:13:12,770
So if we want to change this to only have it on the top, then we change this to padding top and then

41033
00:13:12,770 --> 00:13:16,760
we've got another div that has the padding on top and bottom as well.

41034
00:13:16,760 --> 00:13:18,200
So let's change it there.

41035
00:13:18,200 --> 00:13:23,690
And then when we go back we should see that we have pretty much the same layout.

41036
00:13:23,780 --> 00:13:30,140
And now if we compare our layout to the final outcome, it looks pretty much exactly the same.

41037
00:13:30,500 --> 00:13:35,120
So we can now move on to our next section, which is the features section.

41038
00:13:35,780 --> 00:13:43,580
If we open up our features goal, you can see that we've got three different areas with all of the features

41039
00:13:43,580 --> 00:13:48,200
that we want to show off, and we've got this sort of rough layout.

41040
00:13:48,500 --> 00:13:55,160
If we go back to the bootstrap examples and if we look inside the snippets at the features, you can

41041
00:13:55,160 --> 00:13:59,090
see this is pretty much the same layout as what we're aiming for.

41042
00:13:59,090 --> 00:14:05,710
So let's go ahead and inspect and find that row that we need to get hold of.

41043
00:14:05,720 --> 00:14:11,330
Let's copy the element and put it inside our index.html.

41044
00:14:12,200 --> 00:14:16,640
Now once we paste it in, let's hit, save and see it.

41045
00:14:16,670 --> 00:14:23,090
You can see this is occupying pretty much the entire full width, which is not quite what we want.

41046
00:14:23,120 --> 00:14:28,220
We actually want it all to be roughly along the same vertical line.

41047
00:14:28,220 --> 00:14:29,740
So why is this?

41048
00:14:29,750 --> 00:14:35,240
Well, it's because the top level here is a bootstrap row.

41049
00:14:35,270 --> 00:14:40,160
If we want it to be contained, then we need to add a container.

41050
00:14:40,160 --> 00:14:47,930
So let's add that container class and then let's move this closing tag to wrap it around all of this

41051
00:14:47,960 --> 00:14:48,950
hit save.

41052
00:14:48,950 --> 00:14:53,000
And now you can see we've got that perfect alignment.

41053
00:14:53,570 --> 00:14:55,520
The next thing we need to do is.

41054
00:14:55,540 --> 00:15:00,820
Is that we need to get rid of all of these buttons and that is pretty easy.

41055
00:15:00,820 --> 00:15:02,730
They're just these anchor tags.

41056
00:15:02,740 --> 00:15:07,120
So there's one there, there's one here and there's one up here.

41057
00:15:08,170 --> 00:15:11,470
So now we're pretty much on the design we're looking for.

41058
00:15:11,500 --> 00:15:14,080
All we need to do is replace the text.

41059
00:15:14,170 --> 00:15:19,600
This is probably a little bit boring, so I'm going to use video editing to speed things up a bit for

41060
00:15:19,600 --> 00:15:20,050
you.

41061
00:15:21,560 --> 00:15:21,950
All right.

41062
00:15:21,950 --> 00:15:28,780
So now that we've got all of our custom copy in, the final thing we need to fix are these svgs.

41063
00:15:28,790 --> 00:15:35,350
So let's go ahead and replace the svgs that are in the example with the ones that we want.

41064
00:15:35,360 --> 00:15:40,580
So the first one is going to be the check mark SVG Let's copy and paste it in.

41065
00:15:40,970 --> 00:15:44,720
The second one is the graduation hat.

41066
00:15:47,260 --> 00:15:51,490
And the final one is the heart with an arrow through it.

41067
00:15:52,420 --> 00:16:00,370
So now that we've replaced all of our svgs, you can see them show up, but the background doesn't look

41068
00:16:00,370 --> 00:16:01,270
quite the same.

41069
00:16:01,270 --> 00:16:05,020
It should have these rounded corners, it should be a little bit larger.

41070
00:16:05,020 --> 00:16:08,980
And we will look on the bootstrap example where we copied our code from.

41071
00:16:08,980 --> 00:16:10,570
They look perfect.

41072
00:16:10,570 --> 00:16:14,920
But why is it that when it's in our website it doesn't quite look the same?

41073
00:16:15,040 --> 00:16:20,470
Now this might be something that you got stuck on, but in order to figure this out, the easiest way

41074
00:16:20,470 --> 00:16:22,090
is to inspect on it.

41075
00:16:22,090 --> 00:16:29,770
In Chrome, you can see right now I'm highlighting the SVG, but if I go one level above and hover on

41076
00:16:29,770 --> 00:16:34,270
that div, that is the one with all of that fancy styling.

41077
00:16:34,360 --> 00:16:41,350
And if we look inside the styles, you can see there's actually some custom CSS in here because it's

41078
00:16:41,350 --> 00:16:45,190
not in the utilities which comes from bootstrap.

41079
00:16:45,220 --> 00:16:49,970
This is actually custom CSS just for this feature section.

41080
00:16:49,970 --> 00:16:57,320
So what we need to do is we need to copy all of the CSS and put it inside our style.css.

41081
00:16:57,740 --> 00:17:05,720
So now this icon square, which is the class for this div, can be activated.

41082
00:17:05,720 --> 00:17:12,650
And when we look at it now, you can see that they all have the right styling that we expected.

41083
00:17:12,770 --> 00:17:19,040
So the final thing we need to sort out is just to add a little bit more margin in this features section

41084
00:17:19,040 --> 00:17:20,710
and then we're pretty much done.

41085
00:17:20,720 --> 00:17:28,069
So if we look at the features goal, you can see I've given you a hint that it's actually margin top

41086
00:17:28,069 --> 00:17:29,000
five.

41087
00:17:29,210 --> 00:17:36,200
If we want to add some margin to this entire container, then we can go up to the div class where we

41088
00:17:36,200 --> 00:17:41,210
have the container and then we add margin top five, empty dash five.

41089
00:17:41,210 --> 00:17:47,180
And now we should have enough space between that top title section and our feature section.

41090
00:17:47,180 --> 00:17:51,320
So we're now ready to move on to the testimonial section.

41091
00:17:51,770 --> 00:17:55,210
Again, let's take a look at the goal that we're looking for.

41092
00:17:55,220 --> 00:18:00,800
So the first section is an H2 with an image and some paragraph text.

41093
00:18:01,160 --> 00:18:09,740
This area comes from this Jumbotron section, and if we scroll down, we can see this full width jumbotron

41094
00:18:09,740 --> 00:18:10,790
right here.

41095
00:18:10,790 --> 00:18:18,950
So let's go ahead and inspect on it and let's take the entire section just after the divider.

41096
00:18:18,950 --> 00:18:25,670
So let's copy the element and paste it into our testimonial section.

41097
00:18:26,180 --> 00:18:28,430
Let's take a look at what that looks like.

41098
00:18:28,460 --> 00:18:32,900
It looks pretty good, but we need to modify it for our purposes.

41099
00:18:32,900 --> 00:18:35,690
So let's change the text inside.

41100
00:18:35,690 --> 00:18:43,550
If we go over to our README, we should see our quote here from Pebbles and we can replace the text

41101
00:18:43,550 --> 00:18:45,050
inside the H1.

41102
00:18:45,530 --> 00:18:51,710
Remember from our HTML classes we should only have one H1 per website.

41103
00:18:51,710 --> 00:18:56,600
And remember at the beginning in our title section we've already got our big heading.

41104
00:18:56,600 --> 00:19:00,170
So here it should really not be an H1.

41105
00:19:00,170 --> 00:19:05,060
Let's turn it into a subheading by changing that to an H2.

41106
00:19:06,620 --> 00:19:14,150
Now this paragraph element, I could delete it, but I'm actually going to keep it and use it for showing

41107
00:19:14,150 --> 00:19:19,640
the name where the quote comes from, which is Pebbles from New York.

41108
00:19:19,670 --> 00:19:28,910
And all I have to do now is add an image in between, and the image is going to be our dog image and

41109
00:19:28,910 --> 00:19:31,460
I'm going to add the alt text as well.

41110
00:19:32,510 --> 00:19:34,790
Let's take a look at what that looks like.

41111
00:19:34,820 --> 00:19:35,700
It looks great.

41112
00:19:35,720 --> 00:19:41,960
Other than the fact that this should be rounded and it should be a little bit smaller, if we look at

41113
00:19:41,960 --> 00:19:46,460
the goal, we can see it should be 100 pixels high and it should be circular.

41114
00:19:46,550 --> 00:19:49,730
So how do we make it custom?

41115
00:19:49,730 --> 00:19:52,980
Well, we're going to need to create some styling, right?

41116
00:19:53,000 --> 00:20:03,110
So let's create a class called profile Dash Image and let's set it to have a height of 100 pixels.

41117
00:20:03,110 --> 00:20:09,240
And in order to make it circular, remember, we need to set the border radius to 50%.

41118
00:20:09,300 --> 00:20:19,470
Now, if we apply that class to our image profile dash image and we look at our website and you can

41119
00:20:19,470 --> 00:20:24,570
see that looks pretty much perfect and similar to what we've got here.

41120
00:20:24,780 --> 00:20:28,800
Now, the only thing we need to add is just a little bit more margin.

41121
00:20:29,580 --> 00:20:36,120
We should have a margin of five between these two sections and a margin of two between these two sections.

41122
00:20:36,120 --> 00:20:39,540
So I'm just going to add some margin top to the image.

41123
00:20:39,540 --> 00:20:49,610
So a size five margin to the image so I can hit space on the class and then do margin top dash five.

41124
00:20:49,620 --> 00:20:56,370
And then for the text, I'm going to do a class of margin top dash two.

41125
00:20:56,670 --> 00:21:04,320
And now we should have enough space in between everything and it looks pretty much the same as the example.

41126
00:21:04,710 --> 00:21:12,480
Now we need to add in all of these outlets that have featured our startup, and you can see from the

41127
00:21:12,510 --> 00:21:21,510
goal image here that we've got a 12 column grid here from Bootstrap and they're each occupying a fourth

41128
00:21:21,510 --> 00:21:22,710
of the space.

41129
00:21:22,740 --> 00:21:29,790
But notice here where I've said it should take up three columns on desktop, but a full width, 12 columns

41130
00:21:29,790 --> 00:21:30,630
on mobile.

41131
00:21:30,630 --> 00:21:36,540
So it should be responsive and we can find all these images in the images folder.

41132
00:21:36,660 --> 00:21:46,140
Let's go ahead and add that below this container in order to create the bootstrap 12 column layout system,

41133
00:21:46,140 --> 00:21:49,430
the first thing we always need is a container.

41134
00:21:49,440 --> 00:21:58,860
So let's create a div of class container and inside here is where we need our div that has a class of

41135
00:21:58,860 --> 00:21:59,810
row.

41136
00:21:59,820 --> 00:22:02,810
So now we're ready to create our columns.

41137
00:22:02,820 --> 00:22:13,110
Each of the columns are going to be three columns in the desktop format, so that's called Dash Large

41138
00:22:13,110 --> 00:22:18,360
or LG and it's going to be dash three, but on mobile.

41139
00:22:18,360 --> 00:22:22,500
So call Dash, SM Small is going to be full width.

41140
00:22:22,500 --> 00:22:29,730
So 12 and inside here we can place our image which is from the images folder and we're going to start

41141
00:22:29,730 --> 00:22:34,860
off with TechCrunch and I'm going to add the alt text as that.

41142
00:22:35,100 --> 00:22:42,750
Now I'm going to copy this and paste it three times and now I'm just going to replace each of these

41143
00:22:42,750 --> 00:22:45,480
images with the ones that we have here.

41144
00:22:45,480 --> 00:22:49,140
So Mashable, Business Insider and TMW.

41145
00:22:50,100 --> 00:22:50,580
All right.

41146
00:22:50,580 --> 00:22:56,250
So now we should have all of our images, but they are a little bit large.

41147
00:22:57,000 --> 00:23:03,780
One thing we can do is we can limit their height so that they are all equal in height instead of having

41148
00:23:03,780 --> 00:23:06,660
this uneven start and end line.

41149
00:23:06,660 --> 00:23:15,780
So I'm going to set the height to 30 and that should be enough height to be visible, but not so much

41150
00:23:15,780 --> 00:23:21,090
height that it takes up too much space and that looks pretty good.

41151
00:23:21,210 --> 00:23:27,660
So now we're done with our testimonial section and we are on our penultimate section, which is the

41152
00:23:27,660 --> 00:23:28,920
pricing plan.

41153
00:23:28,920 --> 00:23:35,940
And as you'll remember, Bootstrap has the pricing plan section right here.

41154
00:23:36,600 --> 00:23:40,560
And these three cards are the ones that we want to get hold of.

41155
00:23:40,590 --> 00:23:46,970
So let's inspect on that and find the area that we need, which is probably this div row.

41156
00:23:46,980 --> 00:23:50,880
So let's copy it and put it inside the pricing section.

41157
00:23:50,880 --> 00:23:56,630
But as you remember, a div row needs to go inside a container.

41158
00:23:56,640 --> 00:23:58,740
So let's go ahead and do that.

41159
00:23:58,740 --> 00:24:04,050
And if we look at our pricing table then it's already in and looks pretty good.

41160
00:24:04,260 --> 00:24:11,820
The other section we need is a title for the pricing table, which is this area right here, and this

41161
00:24:11,820 --> 00:24:15,210
is the div that contains all of that content.

41162
00:24:15,210 --> 00:24:21,960
So let's just copy it and put it at the beginning of our container right here.

41163
00:24:22,290 --> 00:24:26,430
So now we've pretty much got the pricing table down.

41164
00:24:26,430 --> 00:24:33,000
We just need to update all of the text here to the ones that we have in our copy.

41165
00:24:33,030 --> 00:24:35,370
So I'm going to do this again quickly.

41166
00:24:35,370 --> 00:24:38,890
I'm going to fast forward and replace all the text.

41167
00:24:47,070 --> 00:24:53,460
All right, so now all the text has been replaced and you should see all of that text inside the pricing

41168
00:24:53,460 --> 00:24:54,240
section.

41169
00:24:54,240 --> 00:24:56,790
So now we need to update the design a little bit.

41170
00:24:56,790 --> 00:25:04,620
And the main difference is the color scheme here is all using the bootstrap primary color, which is

41171
00:25:04,620 --> 00:25:05,640
this blue.

41172
00:25:05,640 --> 00:25:12,030
But we need to change it all to the dark kind of color, which is this kind of black color.

41173
00:25:12,270 --> 00:25:18,300
And if you look inside the pricing goal, you can see the parts that we need to change.

41174
00:25:18,960 --> 00:25:20,910
This needs to become outline dark.

41175
00:25:20,940 --> 00:25:22,980
This needs to be button, dark, button dark.

41176
00:25:22,980 --> 00:25:24,570
And this also needs to be dark.

41177
00:25:24,810 --> 00:25:32,790
A shortcut here is to simply use the control F on windows or command F on Mac in order to bring up our

41178
00:25:32,790 --> 00:25:33,660
search bar.

41179
00:25:33,660 --> 00:25:41,460
And if we search for the word primary and we replace it with dark, then we can actually go through

41180
00:25:41,460 --> 00:25:45,700
each of these examples and see if we want to replace it.

41181
00:25:45,700 --> 00:25:50,770
What I recommend doing is to actually do this one by one.

41182
00:25:50,770 --> 00:25:56,230
So instead of doing replace all, because that way you can see which parts you're replacing.

41183
00:25:56,230 --> 00:26:02,200
And many times I've done replace all only to find out that I've messed up the entire project in some

41184
00:26:02,200 --> 00:26:02,860
big way.

41185
00:26:02,860 --> 00:26:04,840
So just a word of advice.

41186
00:26:04,870 --> 00:26:06,340
Go through it one by one.

41187
00:26:06,340 --> 00:26:10,150
Make sure that it makes sense and it's the right area that you're changing.

41188
00:26:10,150 --> 00:26:15,550
But hopefully when we go back to our website, we can see we've now updated all of the right places

41189
00:26:15,550 --> 00:26:17,650
to this dark color scheme.

41190
00:26:18,220 --> 00:26:26,740
Coming back to our pricing goal, we can see that this title needs to be an H2 and this subtitle needs

41191
00:26:26,740 --> 00:26:28,120
to be a paragraph element.

41192
00:26:28,120 --> 00:26:35,470
So let's go into our section and make sure that is the case, because when we copied it over, it actually

41193
00:26:35,470 --> 00:26:37,240
gave us an H1.

41194
00:26:37,270 --> 00:26:42,790
Now the styling is not going to change because it actually comes from the display for class.

41195
00:26:42,790 --> 00:26:49,660
So you won't see the size change that much or the color scheme because it is actually not dependent

41196
00:26:49,660 --> 00:26:51,760
on the HTML element.

41197
00:26:51,760 --> 00:26:57,400
And this happens very frequently with bootstrap, so we're able to adjust that pretty easily.

41198
00:26:57,490 --> 00:27:01,870
And now we're ready for our final section, which is the footer.

41199
00:27:01,870 --> 00:27:08,920
So let's find ourselves the footer snippets and let's find the one that looks like one that we want,

41200
00:27:08,920 --> 00:27:14,260
or one that is similar to the one in the example, which is this one right here.

41201
00:27:14,260 --> 00:27:21,220
And let's find the container that we can copy and put into our footer section.

41202
00:27:21,940 --> 00:27:29,560
So now straight up we can see our footer section show up and all we need to do is to adapt it to our

41203
00:27:29,560 --> 00:27:30,460
design.

41204
00:27:30,700 --> 00:27:35,950
Firstly, you'll notice there's this area that you can't really see, but when you hover it, it seems

41205
00:27:35,950 --> 00:27:37,120
to be clickable.

41206
00:27:37,120 --> 00:27:44,080
And if we refer to our code, you can see this is actually a link that links to the bootstrap logo.

41207
00:27:44,080 --> 00:27:46,810
So let's go ahead and delete that.

41208
00:27:46,810 --> 00:27:54,880
But let's change this paragraph class to copyright and then the name of our company, Tin Dog.

41209
00:27:55,030 --> 00:28:01,030
And I'm going to leave these links alone because I don't know, maybe in the future you'll want to use

41210
00:28:01,030 --> 00:28:05,440
this website and put in some different links to different sections.

41211
00:28:05,440 --> 00:28:11,230
But for now it just kind of looks more or less the right kind of style that we would want on a startup

41212
00:28:11,230 --> 00:28:11,950
website.

41213
00:28:11,950 --> 00:28:16,240
So let's leave that alone, but let's get rid of this border line here.

41214
00:28:16,240 --> 00:28:18,220
And this border came from the footer.

41215
00:28:18,220 --> 00:28:20,530
So there should be a hint in here.

41216
00:28:20,530 --> 00:28:26,590
If we look at the footer element, you can see there's the border top class, which again comes from

41217
00:28:26,590 --> 00:28:31,750
bootstrap, but it's a really simple way of adding some borders to the top left or right.

41218
00:28:31,750 --> 00:28:34,630
But once we delete it and that's completely gone.

41219
00:28:34,630 --> 00:28:40,990
So the final thing we need to do is just to add that gradient background to the footer area and then

41220
00:28:40,990 --> 00:28:42,430
we are pretty much done.

41221
00:28:42,430 --> 00:28:51,240
So let's take that section footer and add the class gradient background and now hit save.

41222
00:28:51,240 --> 00:28:58,260
And we should see that we have almost the same website as the final result.

41223
00:28:58,410 --> 00:29:03,840
The only thing that we need to do now is to get rid of this little bit of space at the bottom.

41224
00:29:03,960 --> 00:29:07,950
And the fact that it's white should give you a hint as to what it is.

41225
00:29:08,910 --> 00:29:17,430
If we select our footer section and we go into the section, look inside the container, at some point

41226
00:29:17,430 --> 00:29:21,180
our hover is going to show us where that margin comes from.

41227
00:29:21,180 --> 00:29:26,220
And right here you can see that orange box showing that margin at the bottom.

41228
00:29:26,220 --> 00:29:30,780
So if we select it, we should see there are some margin classes applied.

41229
00:29:30,780 --> 00:29:36,600
So there's a margin top, which I think we should probably keep because it adds a good amount of spacing

41230
00:29:36,600 --> 00:29:38,130
between the different sections.

41231
00:29:38,130 --> 00:29:44,100
But the margin bottom we could probably get rid of so that we don't have that white space down there.

41232
00:29:44,100 --> 00:29:45,570
So let's find this.

41233
00:29:45,990 --> 00:29:55,050
Y-5 class in our footer element and it's right here and let's change it instead of y to just having

41234
00:29:55,050 --> 00:29:56,340
it on top.

41235
00:29:56,340 --> 00:29:59,220
And now let's hit, save and refresh.

41236
00:29:59,220 --> 00:30:04,470
And you can see we have now completed our design for our website.

41237
00:30:04,890 --> 00:30:06,720
In less than half an hour.

41238
00:30:06,720 --> 00:30:14,760
We've managed to build a incredibly complex and beautiful website for our tin dog startup.

41239
00:30:14,790 --> 00:30:21,090
I hope our clients will be pleased because we've created this amazing, incredibly modern looking website

41240
00:30:21,090 --> 00:30:28,170
for them and we should be pleased because it only took us so little time to do by leveraging the power

41241
00:30:28,170 --> 00:30:34,980
of the bootstrap components and using the different helper classes, utilities, as well as snippets

41242
00:30:34,980 --> 00:30:36,210
that they provide.

41243
00:30:36,420 --> 00:30:42,720
Hopefully this gives you an insight into how we can use bootstrap to create beautiful, complex websites

41244
00:30:42,720 --> 00:30:43,560
quickly.

41245
00:30:43,560 --> 00:30:50,830
And also you see the difference between what CSS grid, Flexbox and Bootstrap are all good for.

41246
00:30:50,860 --> 00:30:58,330
They all have different strengths and weaknesses and I think bootstrap is really good for throwing some

41247
00:30:58,330 --> 00:31:03,220
components down and creating something that looks incredibly modern very, very quickly.

41248
00:31:03,220 --> 00:31:08,980
Whereas Flexbox and Grid are great when you want to get into the nitty gritty of creating a very, very

41249
00:31:08,980 --> 00:31:12,370
custom layout for your website.

41250
00:31:12,670 --> 00:31:15,130
So well done on completing this section.

41251
00:31:15,130 --> 00:31:20,110
And in the next section we've got the Capstone project for CSS.

41252
00:31:20,110 --> 00:31:22,660
So once you're ready, head over to the next section.









41253
00:00:01,460 --> 00:00:06,780
Hey guys. In this module I've got something a little bit different for you. Now, 

41254
00:00:06,790 --> 00:00:13,220
up till now we've been working on how to build websites that have great functionality and how to use

41255
00:00:13,220 --> 00:00:17,590
CSS, HTML, to build up the structure of the website.

41256
00:00:17,630 --> 00:00:24,680
Now today I want to talk about something a little bit different namely how to design websites so that

41257
00:00:24,680 --> 00:00:30,710
not only does your website have great functionality but it also looks beautiful.

41258
00:00:30,800 --> 00:00:37,910
The most important thing to making a website loved by users is pretty much the design.

41259
00:00:37,910 --> 00:00:39,010
After all, think about it.

41260
00:00:39,020 --> 00:00:43,600
When was the last time you heard somebody tell you, "Hey I came across this great website.

41261
00:00:43,610 --> 00:00:45,220
It worked really really well.

41262
00:00:45,250 --> 00:00:47,180
So smooth and no bugs."

41263
00:00:47,180 --> 00:00:49,000
Nobody ever says that right?

41264
00:00:49,040 --> 00:00:55,050
They say things like: "It looked so beautiful. It just worked like I wanted it to."

41265
00:00:55,910 --> 00:01:02,570
So today we're going to talk about design and I want to show you some of the different aspects of design

41266
00:01:02,630 --> 00:01:04,450
when it comes to websites.

41267
00:01:04,480 --> 00:01:07,340
Now more often than not, you've heard the saying right?

41268
00:01:07,370 --> 00:01:10,260
"Don't judge a book by its cover."

41269
00:01:10,340 --> 00:01:16,250
Now at the same time, you might have also heard of this saying: "You only have three seconds to make a

41270
00:01:16,250 --> 00:01:17,770
good impression."

41271
00:01:17,840 --> 00:01:22,400
Now when it comes to web design, the latter is probably more accurate.

41272
00:01:22,460 --> 00:01:30,290
It's just like a job interview or a first date, your website has a crucial few seconds before the user

41273
00:01:30,290 --> 00:01:33,720
is going to judge your company, your brand, your product.

41274
00:01:34,250 --> 00:01:36,820
So take a look at this example.

41275
00:01:36,860 --> 00:01:43,930
This is a website called Penny juice and it's a company that sells children's juice cartons.

41276
00:01:43,940 --> 00:01:52,880
Now look at the design of it. There's clashing colors, there's different typefaces, there's different colors

41277
00:01:52,880 --> 00:01:57,980
for the text and they have different fonts and it's all, to be honest, a bit of a mess.

41278
00:01:58,670 --> 00:02:02,300
So this is a question I often ask students at this point.

41279
00:02:02,300 --> 00:02:08,250
Take a look at this website and ask yourself if you were to buy a product from this company,

41280
00:02:08,449 --> 00:02:12,200
if you were to buy a carton of juice, how much would you pay for it?

41281
00:02:13,100 --> 00:02:15,920
Now take a look at this website.

41282
00:02:15,920 --> 00:02:20,990
This is the same website reimagined by a professional web designer.

41283
00:02:20,990 --> 00:02:28,100
Look at how the color scheme is now consistent, how the fonts and the typefaces now look a lot better.

41284
00:02:28,100 --> 00:02:34,860
And ask yourself again, how much would you pay for a single carton of juice from this website.

41285
00:02:34,860 --> 00:02:39,740
Now I've asked this question to a number of people and this is the result I got.

41286
00:02:39,740 --> 00:02:46,570
People are willing to pay anywhere up to only a dollar for a carton of juice from the first wesite

41287
00:02:46,940 --> 00:02:51,150
but anywhere up to $3 for the second website.

41288
00:02:51,150 --> 00:02:57,480
Now I run a startup and a lot of friends and colleagues of mine also work on their own businesses.

41289
00:02:57,710 --> 00:03:02,630
And we usually spend a lot of time brainstorming, how can we make our product better,

41290
00:03:02,630 --> 00:03:04,930
how do we make our brand stronger.

41291
00:03:05,000 --> 00:03:11,600
And there's very very few things that we can think of that can actually produce a three times improvement

41292
00:03:11,720 --> 00:03:15,120
in the value of your product or in the value of your company.

41293
00:03:15,140 --> 00:03:17,660
So design is really really powerful.

41294
00:03:17,660 --> 00:03:24,980
It's one of the cheapest ways to make your company or your product look expensive because it's elevating.

41295
00:03:25,250 --> 00:03:30,820
And it doesn't take a lot to get good at design as you'll see in the coming lessons.

41296
00:03:30,860 --> 00:03:36,140
So we're going to be exploring some of the principles of web design in this module.

41297
00:03:36,140 --> 00:03:44,210
And I want to take you through everything from color theory to typography to user interface design and

41298
00:03:44,210 --> 00:03:46,330
user experience design.

41299
00:03:46,490 --> 00:03:51,020
These are the four pillars of good web design.

41300
00:03:51,020 --> 00:03:55,220
So once you are ready, head over to the next lesson and let's get started.


41301
00:00:00,810 --> 00:00:08,520
Now one of the first things I want to talk about is Color Theory. And color theory is the art and science

41302
00:00:08,610 --> 00:00:11,760
of creating the right palette for your website.

41303
00:00:12,450 --> 00:00:15,040
So take a look at this example.

41304
00:00:15,090 --> 00:00:21,690
Now let's say you had a logo where you have flowers which are brown, paintball which is pink.

41305
00:00:21,810 --> 00:00:24,960
It looks all very weird and very inconsistent.

41306
00:00:25,020 --> 00:00:30,960
And take a look at the actual logos. Like what are you thinking when you see these color palettes on

41307
00:00:30,960 --> 00:00:37,560
the words. The color of the flowers looks a bit like dirt I guess but it also looks a bit like something

41308
00:00:37,560 --> 00:00:40,460
else. And the paint ball being pink

41309
00:00:40,530 --> 00:00:45,120
I'm not really sure who that target audience is. But take a look at this.

41310
00:00:45,390 --> 00:00:50,630
If we flip the color palette, it suddenly all looks like it's meant to be like this.

41311
00:00:50,730 --> 00:00:53,710
It suddenly all looks a lot better right?

41312
00:00:53,730 --> 00:00:56,940
It looks consistent with the actual message.

41313
00:00:57,000 --> 00:01:02,770
So when you're picking colors you have to be aware of the mood of your color palette.

41314
00:01:02,940 --> 00:01:09,780
So the predominant color that is going to be in your design really tells a story and it conveys a message

41315
00:01:09,840 --> 00:01:11,530
to the user.

41316
00:01:11,700 --> 00:01:20,490
For example, Red conveys love, energy, intensity. Which is why you see a lot of car adverts which have a

41317
00:01:20,520 --> 00:01:22,980
red car on a red background.

41318
00:01:23,340 --> 00:01:25,250
It's because they're trying to tell you,

41319
00:01:25,260 --> 00:01:28,560
"Hey buy this car and you'll feel energetic

41320
00:01:28,620 --> 00:01:38,220
and the intensity of this car even if you're 89." Now yellow is more about joy, intellect, attention.

41321
00:01:39,060 --> 00:01:46,290
And the most important thing about yellow though is how attention grabbing it is because it's almost

41322
00:01:46,290 --> 00:01:50,550
impossible to not look at something that is very yellow.

41323
00:01:50,580 --> 00:01:53,530
For example this ad. Now a few years back

41324
00:01:53,550 --> 00:01:59,220
this ad caused an uproar because it has this lady in a yellow bikini

41325
00:01:59,220 --> 00:02:01,500
and it says, "Are you 

41326
00:02:01,500 --> 00:02:03,560
beach body ready?"

41327
00:02:03,570 --> 00:02:06,740
And a lot of people got really really upset about it.

41328
00:02:06,750 --> 00:02:08,090
They took to the Internet,

41329
00:02:08,100 --> 00:02:09,419
they raved about it.

41330
00:02:09,570 --> 00:02:15,390
And I remember thinking to myself at the time, "You know, this is not so different from a lot of the other

41331
00:02:15,390 --> 00:02:17,880
ads that are trying to tell women how to look."

41332
00:02:18,500 --> 00:02:20,100
And it's not a great message.

41333
00:02:20,160 --> 00:02:26,580
But why is it causing so much anger and causing so much attention drawn to it?

41334
00:02:26,580 --> 00:02:30,270
And I think the reason is because it's actually bright yellow.

41335
00:02:30,900 --> 00:02:35,450
It's impossible to ignore this advert when you come across it.

41336
00:02:35,610 --> 00:02:42,420
So when you're creating a logo or when you're creating some sort of headline, then yeah yellow is a great

41337
00:02:42,420 --> 00:02:48,090
choice. But when you're creating something that's designed to be looked at for a long period of time

41338
00:02:48,540 --> 00:02:53,290
then yellow can be too attention grabbing. It might actually hurt your user's eyes

41339
00:02:53,400 --> 00:02:58,000
if you tried to read a whole article that's backgrounded in yellow.

41340
00:02:58,350 --> 00:03:05,670
Now the next color that we're going to talk about is green which is all about freshness, growth, safety.

41341
00:03:05,880 --> 00:03:13,110
And that's why you see a lot of grocery companies like Hello Fresh or Amazon groceries use this color

41342
00:03:13,230 --> 00:03:19,120
as their predominant color palette. Because it's trying to tell you, "Hey look! This thing is edible.

41343
00:03:19,140 --> 00:03:21,620
This is what we're selling."

41344
00:03:21,690 --> 00:03:28,870
And so if you have a company that has anything to do with food, this is usually a safe bet to go with.

41345
00:03:28,890 --> 00:03:37,440
Now Blue is about stability, trust, serenity. And so you see a lot of companies which need to convey that

41346
00:03:37,440 --> 00:03:39,980
"Hey, we're really trustworthy"

41347
00:03:40,020 --> 00:03:41,930
use this color. For example,

41348
00:03:41,940 --> 00:03:47,640
look at all the financial companies, look at companies like PayPal or the cryptocurrency companies like

41349
00:03:47,640 --> 00:03:52,680
Coinbase. They all choose this color because they want you to know that they're not going to run away

41350
00:03:52,680 --> 00:03:54,060
with your money.

41351
00:03:54,090 --> 00:04:01,170
In fact, there was a really interesting psychology study where they compared interviewees wearing different

41352
00:04:01,170 --> 00:04:02,550
colored shirts.

41353
00:04:02,580 --> 00:04:05,700
So for example, a group of them would wear a green shirt,

41354
00:04:05,700 --> 00:04:12,410
another group would wear a blue shirt and they compared how they were perceived by the interviewers.

41355
00:04:12,510 --> 00:04:19,050
And it showed that just by changing the color of your shirt to a blue one you vastly increase the amount

41356
00:04:19,050 --> 00:04:20,180
of trust in you

41357
00:04:20,250 --> 00:04:21,970
that's given by other people.

41358
00:04:21,990 --> 00:04:26,390
So have a think about that the next time you're going for an interview.

41359
00:04:26,460 --> 00:04:34,950
Now the final color is purple and it's meant to signify royalty, wealth, femininity. And strangely enough

41360
00:04:34,980 --> 00:04:41,160
I've come across a number of payday loan companies which use this color palette especially ones which

41361
00:04:41,160 --> 00:04:42,900
are targeted at women.

41362
00:04:42,990 --> 00:04:48,690
So, the important thing to think about is that you're making a conscious decision when you're choosing

41363
00:04:48,690 --> 00:04:49,920
a color palette.

41364
00:04:50,010 --> 00:04:56,040
It's not just whichever color you like or your favorite color. But it's actually 'what message am I trying

41365
00:04:56,040 --> 00:05:03,930
to convey to the user' and then picking an appropriate color. Now, usually you're not just going to be

41366
00:05:03,930 --> 00:05:09,180
using a single color for your design. You're probably going to be using two or three.

41367
00:05:09,300 --> 00:05:14,850
So at some point you have to think about which different colors to combine.

41368
00:05:14,850 --> 00:05:19,680
And this is probably the most scientific part of color theory.

41369
00:05:19,740 --> 00:05:28,740
Now very often, designers will rely on scientific ways of combining colors. For example taking two colors

41370
00:05:28,770 --> 00:05:31,560
that are right next to each other on the color wheel.

41371
00:05:32,130 --> 00:05:36,170
And this way you create what's called an analogous color palette.

41372
00:05:36,390 --> 00:05:42,600
And these designs look incredibly harmonious and they really work well together.

41373
00:05:42,600 --> 00:05:48,450
So this color palette can be really good for things like navigation bars and the body of your website

41374
00:05:48,930 --> 00:05:52,300
or things like a logo and it's background.

41375
00:05:52,350 --> 00:05:59,160
Now, what it's not so good at though is standing out. If you really want your design to pop, you're better

41376
00:05:59,160 --> 00:06:05,490
off taking two colors from opposite ends of the color wheel creating what's called a complementary color

41377
00:06:05,490 --> 00:06:08,280
palette or a clashing palette.

41378
00:06:08,280 --> 00:06:12,270
Now this complementary color palette really creates that pop.

41379
00:06:12,600 --> 00:06:16,490
And it really brings out each of the colors.

41380
00:06:16,620 --> 00:06:23,130
So the next time you go to a supermarket, I want you to take a look at the meat aisle and see if they've

41381
00:06:23,130 --> 00:06:27,910
used this complementary color palette to make things pop.

41382
00:06:27,930 --> 00:06:34,620
So, one of the things that you often see is they'll take these fake plastic bits of greenery like fake

41383
00:06:34,620 --> 00:06:42,720
grass or fake bushes and they'll put it in between the meat. And because the green and the red are complementary

41384
00:06:42,720 --> 00:06:50,160
colors it makes the red meat pop out a lot more and gives you this idea of freshness

41385
00:06:50,310 --> 00:06:57,750
even if it's a little bit past the best dates. But what you shouldn't do with clashing colors or complementary

41386
00:06:57,750 --> 00:07:04,710
colors is to try to style text and text background with it because it actually looks very very jarring

41387
00:07:04,920 --> 00:07:08,440
and you can feel your eyes sort of getting a little bit fuzzy

41388
00:07:08,550 --> 00:07:13,940
looking at this particular combination. So don't do this when it concerns text.

41389
00:07:14,100 --> 00:07:20,670
Instead, keep it to things like logos or icons or things that you really really want to stand out from

41390
00:07:20,670 --> 00:07:21,990
each other.

41391
00:07:22,020 --> 00:07:28,350
Now, there's a lot of other ways that you can combine colors like drawing an equilateral triangle to

41392
00:07:28,350 --> 00:07:34,170
create a triadic color palette or drawing a perfect square.

41393
00:07:34,180 --> 00:07:40,200
Now if you want to, you can head over to a website called Adobe color which lets you mess around with

41394
00:07:40,290 --> 00:07:47,430
all of these different color combinations. So select a triadic color palette or a square color palette

41395
00:07:47,820 --> 00:07:52,990
and then drag it around the color wheel so that you get different combinations of colors.

41396
00:07:53,100 --> 00:07:59,100
And once you come across a palette that fits the mood of your project, then you can pick the hex codes

41397
00:07:59,220 --> 00:08:02,790
and just put them straight into your website.

41398
00:08:02,790 --> 00:08:07,950
Now if all of that sounds like it was a little bit too much work ,then I got you covered.

41399
00:08:07,980 --> 00:08:11,470
You can also use a website called colorhunt.co.

41400
00:08:11,490 --> 00:08:17,550
This is a website where professional designers have curated some of their favorite color palettes

41401
00:08:17,730 --> 00:08:21,130
and you can nab the hex codes straight off the website.

41402
00:08:22,110 --> 00:08:28,530
So take a look at the hot and popular sections of this website and use it to guide the pilot scheme

41403
00:08:28,540 --> 00:08:30,810
for your next project.

41404
00:08:30,810 --> 00:08:37,350
Now when you create a website that has a beautiful consistent color scheme like the one for the LIEBE

41405
00:08:37,350 --> 00:08:44,760
yogurt, you can see how much it makes the design stand out and it becomes really colorful and really

41406
00:08:44,760 --> 00:08:51,000
playful and you can convey different messages using your choice of colors and your color scheme.

41407
00:08:51,010 --> 00:08:54,060
So think about your color choice and your color palette

41408
00:08:54,060 --> 00:08:59,760
the next time you design your website to make sure that it is consistent with what your brand is about

41409
00:08:59,850 --> 00:09:04,140
and what your product is about and it conveys the message you want to convey.


41410
00:00:00,650 --> 00:00:01,000
All right.

41411
00:00:01,020 --> 00:00:05,190
The next topic I want to talk about is typography.

41412
00:00:05,190 --> 00:00:07,670
Now, I know a lot of students always say to me

41413
00:00:07,710 --> 00:00:10,460
"But why do I need to learn about typography?

41414
00:00:10,470 --> 00:00:14,020
I just open up Word, click the dropdown,

41415
00:00:14,070 --> 00:00:15,450
find Times New Roman,

41416
00:00:15,450 --> 00:00:16,850
my favorite font.

41417
00:00:17,070 --> 00:00:20,770
And then just put that on everything. It's done right?"

41418
00:00:21,480 --> 00:00:24,350
Well let's think about this.

41419
00:00:24,400 --> 00:00:30,030
Well let's say it's Valentine's Day and you decide that you want to write a letter to your beloved Valentine

41420
00:00:30,420 --> 00:00:34,150
and you change the font to something cursive like this.

41421
00:00:34,290 --> 00:00:35,490
"You'll always be mine."

41422
00:00:35,490 --> 00:00:37,530
I don't know if she or he will be

41423
00:00:37,610 --> 00:00:40,070
but you have a good chance.

41424
00:00:40,210 --> 00:00:43,350
Now let's say that you chose the wrong font.

41425
00:00:43,380 --> 00:00:45,730
That's a bit of a problem.

41426
00:00:45,780 --> 00:00:51,040
Not only do I not think your Valentine is going to take very kindly to this,

41427
00:00:51,120 --> 00:00:55,230
you might also have the police on your back which is a bit of a problem.

41428
00:00:55,650 --> 00:01:03,780
So fonts really do matter and it's important to consider not only their mood but also how to combine

41429
00:01:03,780 --> 00:01:04,910
different fonts.

41430
00:01:04,989 --> 00:01:12,180
And it's a really really easy way to make your designs look very professional and really slick. Out of

41431
00:01:12,210 --> 00:01:14,520
all of the fonts in the world

41432
00:01:14,530 --> 00:01:19,020
there's pretty much two large families that you should really know about.

41433
00:01:19,020 --> 00:01:26,700
One is the Serif family where they have these little feet at the end of their central beams.

41434
00:01:26,700 --> 00:01:34,380
And the reason why they have these old feet is because the Serif typeface were inspired by the marble

41435
00:01:34,380 --> 00:01:37,350
carvings of days of yore.

41436
00:01:37,350 --> 00:01:44,190
So if you next go out and you take a look at the buildings around you especially if you're in a historical

41437
00:01:44,190 --> 00:01:51,810
area, take a look at places where they've carved into stone or marble and you'll notice that they also

41438
00:01:51,810 --> 00:01:55,560
have these little feet at the end of the central beams.

41439
00:01:55,560 --> 00:01:57,100
So why is that?

41440
00:01:57,120 --> 00:02:03,540
I don't know how many of you carved marble in your spare time but if you did you would know that once

41441
00:02:03,540 --> 00:02:12,210
you chisel has gone into the Rock and you need to exit your engraving it's actually not possible to

41442
00:02:12,210 --> 00:02:15,540
create 90 degree angles when you're carving into rock.

41443
00:02:16,260 --> 00:02:21,310
So this is where the Serif typeface gets their inspiration from.

41444
00:02:21,420 --> 00:02:27,780
And this is also the reason why when you're choosing a Serif typeface you're making your design look

41445
00:02:27,780 --> 00:02:34,320
more serious, more authoritative and also a little bit older as well.

41446
00:02:34,320 --> 00:02:41,550
So it's really good if you're designing something like a letterhead for a legal company or a magazine

41447
00:02:41,550 --> 00:02:43,590
for architectural design.

41448
00:02:43,830 --> 00:02:48,520
But when we take a look at the big family of Serif typefaces

41449
00:02:48,600 --> 00:02:55,710
they're actually further subdivided into smaller sub families like Old style, Transitional, Modern and

41450
00:02:55,710 --> 00:02:57,310
Slab-Serif.

41451
00:02:57,330 --> 00:03:05,820
Now the really interesting thing is you can actually tell how old a typeface would look by looking at

41452
00:03:05,910 --> 00:03:11,370
the difference between the thickest and the thinnest parts of each letter.

41453
00:03:11,370 --> 00:03:15,050
So compare the Old Style 'o' versus the Transitional

41454
00:03:15,060 --> 00:03:16,720
'o' versus the modern

41455
00:03:16,780 --> 00:03:23,070
'o'. And look at how that difference between the thickest part of the letter and the thinnest part gets

41456
00:03:23,070 --> 00:03:28,650
more and more exaggerated as you get towards a more modern font.

41457
00:03:28,830 --> 00:03:34,920
So if you want something that looks authoritative but modern then maybe you want to go for a modern

41458
00:03:35,010 --> 00:03:43,980
Serif typeface like Didot. But if you want it to come across as a little bit older, a little bit more aged

41459
00:03:44,610 --> 00:03:49,890
maybe you have a winery, maybe you want to go for an Old Style Serif instead.

41460
00:03:49,890 --> 00:03:57,270
Now just as different colors have different moods and emotions, different fonts also have different moods

41461
00:03:57,630 --> 00:04:02,850
and they also convey a different message to a user depending on which one you choose.

41462
00:04:02,850 --> 00:04:09,800
So the Serif family generally come across as traditional, stable, respectable, authoritative.

41463
00:04:09,810 --> 00:04:15,490
These are the words that get thrown around by designers when they're thinking about the Serif typeface.

41464
00:04:15,510 --> 00:04:20,370
So for example, the next time you go to a magazine rack pick up the Vogue magazine.

41465
00:04:20,430 --> 00:04:26,480
Take a look at their title and see how it's a modern Serif typeface.

41466
00:04:26,520 --> 00:04:33,000
It's got hugely exaggerated difference between the thick and thin parts of the lettering and it looks

41467
00:04:33,090 --> 00:04:36,950
authoritative and it knows what it is talking about.

41468
00:04:37,170 --> 00:04:43,230
Now on the other hand, if we think about the San-Serifs, they're kind of a different family because instead

41469
00:04:43,230 --> 00:04:49,290
of having the Serifs or the little feet at the end the central beams, they have perfect right angles.

41470
00:04:49,290 --> 00:04:56,100
And it's this right angle that makes the San-Serif family look so much more friendly, more approachable,

41471
00:04:56,490 --> 00:04:59,120
more novel and more contemporary.

41472
00:04:59,610 --> 00:05:06,120
So for example, you will tend to get words like sensible, simple, straightforward. And this is why a lot

41473
00:05:06,120 --> 00:05:11,390
of startups love using the San-Serif typeface in their websites.

41474
00:05:11,490 --> 00:05:18,330
For example, a Humanist typeface which is a subfamily of the San-Serifs. It's something that is known

41475
00:05:18,390 --> 00:05:25,740
as a highly readable typeface. And in fact, even within the Serifs and the San-Serifs, you will tend to

41476
00:05:25,740 --> 00:05:32,340
see designers going for the San-Serifs if they want to write body text which needs to be more legible

41477
00:05:32,370 --> 00:05:34,920
and more readable.

41478
00:05:34,920 --> 00:05:42,300
Now within this sub family, there's even differences in terms of legibility and readability.

41479
00:05:42,420 --> 00:05:49,910
So how easy are the words to read and how pleasant is it to read the letters.

41480
00:05:49,920 --> 00:05:56,760
There was a really interesting study done by MIT a few years back where they took two groups of users,

41481
00:05:57,300 --> 00:06:05,190
one they put them into a car which had a dashboard made of a Humanist typeface and the other car had

41482
00:06:05,190 --> 00:06:13,920
a dashboard which had a Grotesque San-Serif typeface. And what they did is they tracked the pupils of

41483
00:06:13,920 --> 00:06:21,120
the people who were driving the cars and they tested how long each driver needed to look down at the

41484
00:06:21,120 --> 00:06:27,840
dashboard before they got enough information from the speedometer or the odometer and before they could

41485
00:06:27,930 --> 00:06:35,160
come back and look at the road again. And really surprisingly they found that just by changing the font

41486
00:06:36,000 --> 00:06:42,330
from a Grotesque San-Serif to a Humanist San-Serif, they could save the drivers somewhere around

41487
00:06:42,330 --> 00:06:48,370
30 to 40 percent of the time that's required to understand the information.

41488
00:06:48,420 --> 00:06:54,690
So imagine that car is on a freeway that's driving at 60 miles, 100 miles an hour.

41489
00:06:54,750 --> 00:07:00,750
That difference in the amount of time the user needs to look down at the dashboard could be the difference

41490
00:07:00,750 --> 00:07:02,670
between life and death.

41491
00:07:02,700 --> 00:07:07,580
And as designers, we rarely get to make that kind of difference in the world right?

41492
00:07:07,650 --> 00:07:13,600
So knowing that the Humanist typeface, all of the fonts that belong in that category like Gill Sans,

41493
00:07:13,680 --> 00:07:21,620
Tahoma, Verdana, these are highly readable and highly legible fonts which you can use in the body types

41494
00:07:21,630 --> 00:07:23,220
for example of your sales pitch.

41495
00:07:23,760 --> 00:07:27,740
Now, even though we're not saving lives with our sales pitches,

41496
00:07:27,900 --> 00:07:32,610
if you manage to get the user to read through more of your sales copy then they're probably going to

41497
00:07:32,610 --> 00:07:36,120
be more convinced and more likely to buy your product

41498
00:07:36,120 --> 00:07:36,420
right?

41499
00:07:36,960 --> 00:07:42,990
So readability and legibility when you're choosing fonts is incredibly important. And the things that

41500
00:07:42,990 --> 00:07:49,260
you're looking for in the letters when you're looking for legibility are open shapes and a lot of space

41501
00:07:49,290 --> 00:07:54,690
between each of the letters and also the forms look unambiguous so they look different

41502
00:07:54,690 --> 00:08:00,940
for example here the 'g' and the 9 actually look different on the second line. And finally, varying proportions.

41503
00:08:00,960 --> 00:08:06,540
So having an 'O' that's very wide and a '0' that's a bit more narrow so you can actually tell the difference

41504
00:08:06,540 --> 00:08:08,340
between the two.

41505
00:08:08,430 --> 00:08:15,990
Now while we've talked about using fonts it's often that you see people go a bit overboard where they

41506
00:08:15,990 --> 00:08:22,920
choose 10 fonts in the same design. And that makes your design look very cluttered and very unprofessional.

41507
00:08:22,980 --> 00:08:26,910
I recommend actually sticking to just two fonts in one design.

41508
00:08:26,910 --> 00:08:32,580
So if you're making a poster keeping that to two fonts. If you're making a section of your website keeping

41509
00:08:32,580 --> 00:08:36,559
then again to two fonts. It just looks a lot cleaner and a lot tighter.

41510
00:08:37,110 --> 00:08:44,190
And when you're combining these two different fonts you want to try to go for similar moods. So find

41511
00:08:44,190 --> 00:08:48,990
fonts that have a similar mood to each other and also a similar time era.

41512
00:08:48,990 --> 00:08:53,610
You don't want something that looks ultramodern with something that looks like it's from the days of

41513
00:08:53,610 --> 00:08:56,780
yore combined together. It looks a little bit weird.

41514
00:08:56,890 --> 00:08:59,730
Now the things you want to contrast are the serifness.

41515
00:08:59,730 --> 00:09:05,190
So for example you on the heading to be a Serif and the body to be a San-Serif or the opposite way

41516
00:09:05,190 --> 00:09:08,030
round. It just creates more interest in your design.

41517
00:09:08,640 --> 00:09:14,010
And similarly, you can also create interest by just changing up the weights between the heading and the

41518
00:09:14,010 --> 00:09:21,150
body. So making the heading really really bold or even using a black typeface and making the body text

41519
00:09:21,240 --> 00:09:27,660
using something like thin or regular or light. These different weights can create contrast in your design.

41520
00:09:29,270 --> 00:09:34,850
Now if you don't remember anything from this talk on typefaces, I just want you to look at these six

41521
00:09:34,850 --> 00:09:42,050
fonts and try to wipe them from your memory because it is very very difficult to make these designs

41522
00:09:42,050 --> 00:09:46,830
look good unless I guess if you're running a lemonade stand.

41523
00:09:47,090 --> 00:09:52,940
But if you want to look professional, if you want to look designs, try to use one of the other fonts that

41524
00:09:52,940 --> 00:09:58,190
we've talked about and try to ignore these ones which are difficult to read and have moods that are

41525
00:09:58,190 --> 00:10:00,830
difficult to fit in in a professional setting.

41526
00:10:00,830 --> 00:10:05,780
The next time you're designing a website think about what typefaces you're going to choose.

41527
00:10:05,780 --> 00:10:11,750
Think about what you're trying to convey with those typefaces and then pick a font from the San-Serif

41528
00:10:11,840 --> 00:10:14,660
or the Serif family and maybe try to combine them

41529
00:10:14,660 --> 00:10:20,000
so you have a heading that's a San-Serif and a body that's a Serif and try to create contrast in your

41530
00:10:20,000 --> 00:10:21,310
designs.

41531
00:10:21,350 --> 00:10:28,310
So keep this in mind and hopefully they'll make your designs a lot more interesting and a lot more professional.


41532
00:00:01,020 --> 00:00:07,410
So now that we've talked about some of the fundamentals of design like Color Theory and Typography, the

41533
00:00:07,410 --> 00:00:11,790
next thing I want to talk about is User Interface Design.

41534
00:00:11,820 --> 00:00:14,340
Now take a look at this picture.

41535
00:00:14,400 --> 00:00:21,200
In most cases, 99% of you would have read "YOUR EYE HERE" first, "then here" then

41536
00:00:21,240 --> 00:00:22,360
"Isn't that fascinating?"

41537
00:00:23,010 --> 00:00:25,620
So this is just a way that our brains work.

41538
00:00:25,650 --> 00:00:30,560
We're always drawn to the bigger bolder square of things.

41539
00:00:30,630 --> 00:00:39,450
And As designers, we can use this knowledge to define hierarchy. So let's say that you were to write a

41540
00:00:39,480 --> 00:00:42,770
birthday invites to Jane.

41541
00:00:42,780 --> 00:00:48,340
You could write it like this. But all of the information has equal weighting.

41542
00:00:48,420 --> 00:00:54,060
So as a reader, I have to go through the entire paragraph and I can't just skim through it to get the

41543
00:00:54,060 --> 00:00:55,470
important bits.

41544
00:00:55,500 --> 00:00:57,300
So it's gonna take me a lot longer

41545
00:00:57,330 --> 00:01:04,980
right? Now on the other hand if I apply the rules of hierarchy then the most important information gets

41546
00:01:04,980 --> 00:01:12,420
conveyed over first and I make sure that Jane actually knows whose birthday party it is, where it is

41547
00:01:12,690 --> 00:01:15,570
and when they should go.

41548
00:01:15,570 --> 00:01:19,000
So we can establish hierarchy in a number of ways.

41549
00:01:19,110 --> 00:01:21,930
The most obvious is through the use of color.

41550
00:01:22,110 --> 00:01:29,400
So colors that really pop and stand out and have contrast with that background tend to be used for high

41551
00:01:29,400 --> 00:01:30,640
hierarchy.

41552
00:01:30,660 --> 00:01:37,100
So for example in this case if all the colors were the same, then it feels like they all have equal importance.

41553
00:01:37,500 --> 00:01:43,110
But on the other hand, if we have something that's very bright very standoutish versus something that's

41554
00:01:43,110 --> 00:01:50,370
a bit more grade, a bit more muted, then we know exactly where our eyes will go to first.

41555
00:01:50,460 --> 00:01:56,880
Now if you take a look at this example this is the ASOS website. And their predominant color palette

41556
00:01:56,940 --> 00:02:03,570
is the sort of gray and white color. But they've really cleverly used their accent tone, this green and

41557
00:02:03,570 --> 00:02:07,560
red, to really tell the user what they think you should really look at.

41558
00:02:08,030 --> 00:02:13,860
And it seems like ASOS really cares that you know that they have an outlet and also that you add your

41559
00:02:13,860 --> 00:02:17,250
product to the bag so that they can actually make money off you.

41560
00:02:18,000 --> 00:02:23,850
So, in this case, they're using that green accent tone to really pull the eyes to that button and make sure

41561
00:02:23,850 --> 00:02:30,430
that the user actually completes their transaction. Now in addition to color, you should also think about

41562
00:02:30,430 --> 00:02:36,460
size because as I said, the bigger items often draw your eyes to it.

41563
00:02:36,590 --> 00:02:42,740
So, for example, if you look at the Coinbase website which you can use to buy cryptocurrency, we can see

41564
00:02:42,770 --> 00:02:48,740
the first thing they want to tell you is you can use this website to buy and sell cryptocurrency.

41565
00:02:48,740 --> 00:02:55,960
Now the next biggest thing on the page is this huge email input and a button that says "Get started".

41566
00:02:56,030 --> 00:03:02,570
So because a lot of these companies run ads and they're paying for users to land on their page, it's really

41567
00:03:02,570 --> 00:03:05,630
important for them to capture the emails.

41568
00:03:05,630 --> 00:03:08,930
This is kind of what this design is representing

41569
00:03:08,930 --> 00:03:09,760
right?

41570
00:03:09,830 --> 00:03:15,560
As long as you land on this page, you're probably going to want to look at this place where you put in

41571
00:03:15,560 --> 00:03:22,380
your email address and get started so that the company can capture your information.

41572
00:03:22,400 --> 00:03:28,970
Now in addition to establishing hierarchy in terms of user interface, you should think about the layout

41573
00:03:29,090 --> 00:03:30,460
of your website.

41574
00:03:30,530 --> 00:03:36,710
You can of course, on one hand, have this big block of text which is just your website where everything

41575
00:03:36,710 --> 00:03:40,040
is all laid out in the same kind of way

41576
00:03:40,100 --> 00:03:46,970
or you can create more interest by creating a block of text and then interspersed with pictures and

41577
00:03:46,970 --> 00:03:52,160
then create some different sizes and different shapes and different hierarchies to make your design

41578
00:03:52,160 --> 00:04:02,820
look more interesting. Now the Wikipedia pages are a example in bad design because just look at how bland

41579
00:04:02,820 --> 00:04:03,300
it looks.

41580
00:04:03,300 --> 00:04:08,760
It really is trying to be an encyclopedia but it doesn't have to be like this. Now

41581
00:04:08,760 --> 00:04:15,600
one of the most noticeable things about Wikipedia is just the length of each block of text.

41582
00:04:15,630 --> 00:04:18,870
Just look at how long each line of text is.

41583
00:04:18,870 --> 00:04:24,830
It's very hard for a user to keep their eyes tracking along the same line.

41584
00:04:25,110 --> 00:04:32,250
And in fact, in terms of user interface design, there's an optimal line length. Too long and it gets a

41585
00:04:32,250 --> 00:04:38,870
little bit tedious to read. But too short it feels a bit too choppy and it's a bit awkward to read.

41586
00:04:39,090 --> 00:04:44,940
So you want to aim for something around 40 to 60 characters per line so that it feels comfortable to

41587
00:04:44,940 --> 00:04:51,910
the user and they'll be able to get through the information and still be interested in your website.

41588
00:04:51,950 --> 00:04:58,850
Now when you have good layout like Grammarly's website, it's not only interesting but it also chops

41589
00:04:58,850 --> 00:05:04,880
up the content into smaller pieces so that you actually get through more of the website and you take

41590
00:05:04,880 --> 00:05:06,050
more of it in.

41591
00:05:07,100 --> 00:05:10,610
Now another thing I want to talk about is alignment.

41592
00:05:10,610 --> 00:05:17,360
This has to do with how you position each of the elements on the screen relative to each other.

41593
00:05:17,360 --> 00:05:24,200
So take a look at the example on the left. The top title is center-aligned whereas the body text is

41594
00:05:24,200 --> 00:05:30,370
left-aligned. And it makes it look a little bit awkward like they're not really meant to be together.

41595
00:05:30,500 --> 00:05:38,000
Now on the right however just by shifting the alignment so that both starting points are the same for

41596
00:05:38,000 --> 00:05:43,410
the title and the body, it suddenly looks a lot more consistent and a lot more designed.

41597
00:05:43,520 --> 00:05:50,960
Now one of the easiest ways of making any sort of design you create look professional is just to reduce

41598
00:05:51,050 --> 00:05:53,780
the number of alignment points.

41599
00:05:53,850 --> 00:05:59,840
So let's say that you're creating a slide deck for your next presentation or you're creating a poster

41600
00:05:59,870 --> 00:06:01,680
for your birthday party,

41601
00:06:01,700 --> 00:06:09,290
take a look at all the things that are on the design and identify a line which goes through the beginning

41602
00:06:09,380 --> 00:06:10,870
of each item.

41603
00:06:10,880 --> 00:06:17,240
Now if you can reduce the number of lines like we have done here on the right then suddenly the design

41604
00:06:17,240 --> 00:06:21,490
looks a lot more coherent like all the pieces are meant to be together.

41605
00:06:21,680 --> 00:06:25,100
And it just looks a lot more professional.

41606
00:06:25,100 --> 00:06:31,400
So use these grid lines in your designed to help you visualize where the starting points of each element

41607
00:06:31,400 --> 00:06:33,490
is and try to line them all up.

41608
00:06:33,740 --> 00:06:40,490
Because even if you do nothing else but just alignment, you can see in this case the left looks a lot

41609
00:06:40,490 --> 00:06:47,780
more sloppy and the right looks a lot more designed and more professional. And all that's changed, there's

41610
00:06:47,780 --> 00:06:54,950
no change in the color, there's no change in typography, it's just the alignment. Now a really important

41611
00:06:54,950 --> 00:07:03,630
concept in all design is White Space. And white space refers to the empty space that's around text or round

41612
00:07:03,630 --> 00:07:05,210
your elements.

41613
00:07:05,210 --> 00:07:12,230
Now sometimes when I'm on the high street I come across one of these luxury handbag or shoe shops and

41614
00:07:12,290 --> 00:07:13,580
I look through the window.

41615
00:07:22,860 --> 00:07:24,540
Now here's an experiment.

41616
00:07:24,540 --> 00:07:30,780
Take a look at this shop that sells handbags and take a look at this one.

41617
00:07:30,840 --> 00:07:36,790
Now how much are you willing to pay for a handbag from this shop versus this one.

41618
00:07:37,080 --> 00:07:41,330
Now this is really a use case for white space.

41619
00:07:41,340 --> 00:07:45,030
A lot of luxury shops, luxury designer stores,

41620
00:07:45,030 --> 00:07:53,850
one of their simplest tools is just injecting white space around their products, space things out and it

41621
00:07:53,850 --> 00:08:00,690
makes everything suddenly look a lot more expensive. Whereas when you have everything all tightly crammed

41622
00:08:00,690 --> 00:08:06,120
together and you have a lot of product on show, it makes it look like it's some sort of discount store.

41623
00:08:07,050 --> 00:08:12,030
And the same principle applies when it comes to digital design as well.

41624
00:08:12,030 --> 00:08:15,290
Let's say you have an ad for noise cancelling headphones.

41625
00:08:15,570 --> 00:08:21,490
If you have loads of things on screen, there's "New", "Only $20", "100% noise cancellation".

41626
00:08:21,540 --> 00:08:28,590
It makes the product look really cheap. Whereas if you injected some white space, all of a sudden it looks

41627
00:08:28,590 --> 00:08:35,370
like Apple made it right? Just by adding that space around each element on the screen

41628
00:08:35,370 --> 00:08:41,090
you can make your design a lot more minimalist and at the same time elevate it.

41629
00:08:41,100 --> 00:08:46,650
Now the last thing on User Interface design I want to talk about and probably the most important is

41630
00:08:46,650 --> 00:08:49,170
design for your audience.

41631
00:08:49,170 --> 00:08:53,110
A lot of things I've said, including not using comic-sans,

41632
00:08:53,130 --> 00:08:54,830
it really depends on your audience.

41633
00:08:54,840 --> 00:09:00,810
Let's say you're designing a children's concert poster, the one on the right looks like something that

41634
00:09:00,810 --> 00:09:06,530
children might actually want to go to. The one on the left looks a bit like a funeral advertisement.

41635
00:09:06,540 --> 00:09:15,030
It's so serious. It's so black and white and it's so severe looking that no child is kind of want to

41636
00:09:15,030 --> 00:09:16,290
go to that concert.

41637
00:09:17,250 --> 00:09:19,360
So think about your audience.

41638
00:09:19,500 --> 00:09:25,380
Think about what would appeal to them and what's important to convey to them. That it's going to be a

41639
00:09:25,380 --> 00:09:32,530
fun concert or that it's going to be boring adults who are going to be reading newspapers and some sort

41640
00:09:32,580 --> 00:09:39,480
of classical band in the background. When you're designing websites design it for your audience even

41641
00:09:39,480 --> 00:09:44,940
if it's something a little bit messier, a little bit bolder in terms of color, as long as it fits your

41642
00:09:44,940 --> 00:09:47,360
audience and that's perfectly fine.

41643
00:09:47,430 --> 00:09:54,300
So have the flexibility in your design so that you're not just creating one style all the time. You're

41644
00:09:54,300 --> 00:10:00,870
creating one style for a particular audience like teenagers who want to buy clothes and you're creating

41645
00:10:00,960 --> 00:10:06,990
a different style for people who want to buy and sell cryptocurrency or have a medical website.

41646
00:10:07,530 --> 00:10:14,100
So the flexibility in your design skills is really important when it comes to User Interface design.

41647
00:10:14,100 --> 00:10:22,350
But keep in mind those five things: hierarchy, layout, alignment, white space and your audience and you'll

41648
00:10:22,350 --> 00:10:27,420
be well on the way to creating more beautiful user interfaces for your websites.


41649
00:00:00,540 --> 00:00:08,039
Now, so far we've talked about the three pillars of web design: Color Theory, Typography, User Interface

41650
00:00:08,039 --> 00:00:13,600
design and now I want to talk about the last pillar, User Experience design.

41651
00:00:13,740 --> 00:00:19,520
Now a lot of people often get confused about what exactly is UX or User Experience?

41652
00:00:20,460 --> 00:00:27,720
And one of the best ways I've heard it explained is through the story of the renovation of a college.

41653
00:00:28,410 --> 00:00:35,640
So this is a picture of Reed College in the US and let's just use it as our imaginary backdrop.

41654
00:00:35,640 --> 00:00:41,550
So this college decided that it needed to undergo serious renovation. Tearing down the buildings, building

41655
00:00:41,550 --> 00:00:45,500
new ones and completely reform the campus.

41656
00:00:45,570 --> 00:00:51,660
So they invited this well-known architect who is very respected in his field.

41657
00:00:51,780 --> 00:00:57,540
He came and he did a great job with all the buildings and the provost was really really happy.

41658
00:00:57,540 --> 00:00:59,240
He was like "This looks great."

41659
00:00:59,700 --> 00:01:02,710
But he had one question.

41660
00:01:02,790 --> 00:01:10,470
"Hey Mr. Architect. It seemed like you've just left lawn across the entire campus. Where are all the path that

41661
00:01:10,470 --> 00:01:15,090
people are going to walk on to get between the buildings?" At this point

41662
00:01:15,090 --> 00:01:20,810
the architect says "Don't worry. I'll come back in a year and all will be revealed."

41663
00:01:20,880 --> 00:01:28,320
So in a year the paths where people need to naturally walk becomes trotted down and the grass gets worn

41664
00:01:28,320 --> 00:01:31,540
down revealing these paths that people need.

41665
00:01:31,800 --> 00:01:37,790
And it's at this point when the architect actually lays down all the tiles and paves these paths.

41666
00:01:38,370 --> 00:01:43,230
So this is kind of the difference between user experience and design. Design

41667
00:01:43,230 --> 00:01:49,820
we often think of having an aesthetic, what we think looks good and enforcing that on the user.

41668
00:01:50,040 --> 00:01:54,000
Now user experience is meant to be invisible.

41669
00:01:54,000 --> 00:01:59,790
If you have a good experience with a website it's meant to be unobtrusive and it just lets you do your

41670
00:01:59,790 --> 00:02:05,490
thing and it feels like as if everything is easy and everything is effortless.

41671
00:02:05,490 --> 00:02:07,690
So this is what we're aiming for.

41672
00:02:07,860 --> 00:02:12,120
And in order to do that we have to think about again five things.

41673
00:02:12,120 --> 00:02:21,000
The first is simplicity. Keeping things simple is always better than making it more complex or more cluttered.

41674
00:02:21,000 --> 00:02:27,570
So this is a website called Sina and it's one of the biggest News websites in China.

41675
00:02:27,570 --> 00:02:33,320
Now every time I look at it though I get a headache because it is just so dense.

41676
00:02:33,480 --> 00:02:39,030
There are so many links and my brain gets overwhelmed and I say "Nope, can't do it."

41677
00:02:39,540 --> 00:02:42,270
So take a look at this alternative.

41678
00:02:42,330 --> 00:02:45,630
This is Monocle, which is also a News website.

41679
00:02:46,020 --> 00:02:51,510
But look at how they've managed to chop up the content, provides some interest for the eyes.

41680
00:02:51,510 --> 00:02:55,290
There's a little bit of dialogue, some images, some videos, a little bit of text.

41681
00:02:55,680 --> 00:02:57,330
It's never overwhelming.

41682
00:02:57,360 --> 00:03:03,960
And with that consistent color scheme and typography, it's really delightful to actually read rather

41683
00:03:03,960 --> 00:03:09,300
than this experience of sort of hurting your eyes with design.

41684
00:03:09,300 --> 00:03:13,720
This is a much nicer user experience because it's simple.

41685
00:03:13,770 --> 00:03:18,700
So whenever you're having to choose, should I make it more complex or should I make it more simple,

41686
00:03:18,810 --> 00:03:21,720
always try to pare it down.

41687
00:03:22,000 --> 00:03:24,710
The second point is consistency.

41688
00:03:24,790 --> 00:03:31,320
Keep your designs consistent but also keep the functionality of your product consistent.

41689
00:03:31,390 --> 00:03:33,140
So here's an example.

41690
00:03:33,190 --> 00:03:42,520
This is the webpage for Xfinity. Xfinity is a really big communications company in the US and they

41691
00:03:42,520 --> 00:03:48,130
are responsible for various things like providing TV and providing internet.

41692
00:03:48,130 --> 00:03:52,090
Here are three screenshots from various parts of their website.

41693
00:03:52,090 --> 00:03:53,440
One is their home page,

41694
00:03:53,440 --> 00:03:58,320
the second is their TV offerings and the last one is their News site.

41695
00:03:58,420 --> 00:04:04,420
And if you take a look at the top navigation bar not only do you see that they've changed up the design

41696
00:04:04,420 --> 00:04:08,360
of the navigation bar between the different parts of their website,

41697
00:04:08,530 --> 00:04:11,160
they also made it work a little bit differently.

41698
00:04:11,170 --> 00:04:15,460
The buttons are not all in the same place, the search bar moves around.

41699
00:04:15,580 --> 00:04:21,880
And that inconsistency means that a user is going to be confused when they go from one part of the website

41700
00:04:21,940 --> 00:04:25,850
to another, having to re-learn how to use your website.

41701
00:04:26,050 --> 00:04:31,210
If you think about the target audience of this company Xfinity, a lot of them are going to be a little

41702
00:04:31,210 --> 00:04:32,680
bit older right?

41703
00:04:32,800 --> 00:04:38,530
And having this inconsistent functionality and inconsistent design will really make those users have

41704
00:04:38,530 --> 00:04:41,440
a bad experience with this website.

41705
00:04:41,440 --> 00:04:46,270
Now the next thing to think about when you're designing your website is to take into account people's

41706
00:04:46,270 --> 00:04:47,770
reading patterns.

41707
00:04:47,770 --> 00:04:54,020
Now they've looked at how human eyes track a webpage and which parts they look at when they're browsing.

41708
00:04:54,190 --> 00:05:00,580
And one of the most common reading patterns is what's called the F-pattern where the eye starts at the

41709
00:05:00,580 --> 00:05:05,370
top left of the corner and then it tracks the right and then it flips back again

41710
00:05:05,500 --> 00:05:07,360
browsing down the left gutter.

41711
00:05:07,570 --> 00:05:14,020
So you have often things like bullet points or pictures or icons, buttons, they're all on the left.

41712
00:05:14,170 --> 00:05:17,280
So you can design for this by using the F-layout.

41713
00:05:17,380 --> 00:05:24,490
So have the most important parts of your content on the left gutter, have the logo at the top and have

41714
00:05:24,520 --> 00:05:26,800
everything follow this pattern.

41715
00:05:26,800 --> 00:05:30,340
For example like this website for Bigcommerce.

41716
00:05:30,340 --> 00:05:35,560
See how the eye is being naturally accommodated going from left to right.

41717
00:05:35,920 --> 00:05:42,610
Now another really common pattern for reading is the Z-pattern where our eyes go from left to right and then

41718
00:05:42,610 --> 00:05:45,370
zigzagging down all the way the website.

41719
00:05:45,370 --> 00:05:47,670
Now this of course depends on the type of website.

41720
00:05:47,680 --> 00:05:52,540
So you have something that's more sparse with more video content or if somebody is trying to browse

41721
00:05:52,540 --> 00:05:54,440
a website a little bit faster,

41722
00:05:54,520 --> 00:06:01,050
you see them using this layout. And this layout is used pretty famously in the Facebook website

41723
00:06:01,180 --> 00:06:05,520
using that Z-pattern to accommodate for people's natural reading pattern.

41724
00:06:05,680 --> 00:06:10,810
So have a think about this. Have a think about how people naturally looks at the page and place your

41725
00:06:10,810 --> 00:06:16,680
content in that pattern to make it easier for people who are using your website.

41726
00:06:16,700 --> 00:06:21,760
Now in today's day and age, it's really important to think about All Platform Design.

41727
00:06:21,940 --> 00:06:27,330
It's not enough anymore to just design a website that's meant to go into a desktop computer.

41728
00:06:27,490 --> 00:06:30,700
Instead you have to think about mobile as well.

41729
00:06:30,790 --> 00:06:37,990
So having a website that scales up nicely onto mobile, what we call mobile responsive, is really important.

41730
00:06:37,990 --> 00:06:45,070
You don't want a big website that's designed to take up a landscape kind of screen to be crammed into

41731
00:06:45,070 --> 00:06:45,860
a phone

41732
00:06:45,940 --> 00:06:48,700
that's actually more like a portrait shape.

41733
00:06:48,820 --> 00:06:50,110
This looks really bad.

41734
00:06:50,110 --> 00:06:55,500
It's very hard to read the individual links and, more often than not, my fingers are actually too big to tap

41735
00:06:55,510 --> 00:06:56,680
onto the length that I want.

41736
00:06:57,190 --> 00:06:59,700
So this is a really bad user experience.

41737
00:07:00,670 --> 00:07:03,220
Now this can happen the opposite way as well.

41738
00:07:03,670 --> 00:07:10,030
So a design that looks much better on mobile but then when it's rendered on a desktop with a wide kind

41739
00:07:10,030 --> 00:07:14,550
of screen, it doesn't use up enough of the screen real estate. For example,

41740
00:07:14,560 --> 00:07:18,270
this is the Facebook latest redesign of their website.

41741
00:07:18,430 --> 00:07:23,980
And you've got all of this empty space that's not being used at all and everything is crammed into the

41742
00:07:23,980 --> 00:07:24,750
middle.

41743
00:07:24,760 --> 00:07:31,260
This is not very efficient. So have a think about how you're using the available space and make sure

41744
00:07:31,260 --> 00:07:39,210
that your website rearranges itself when it's being rendered on a portrait smaller screen vs. a larger

41745
00:07:39,240 --> 00:07:46,980
desktop screen. And try to avoid one of my pet peeves in terms of design which is having so many banners

41746
00:07:46,980 --> 00:07:53,010
on your website that show up on the mobile version that your content becomes impossibly small.

41747
00:07:53,160 --> 00:07:57,480
And even when you're scrolling it's like you're scrolling it on an Apple Watch or something.

41748
00:07:57,480 --> 00:08:03,360
Whereas all of this extra content is taken up by warnings and banners and cookies and it's just not

41749
00:08:03,360 --> 00:08:05,590
a very good user experience.

41750
00:08:05,730 --> 00:08:07,830
But on the other hand, don't go crazy either.

41751
00:08:07,830 --> 00:08:15,870
Don't make your entire website just one part like a picture or a piece of text scaling it up massively

41752
00:08:15,870 --> 00:08:21,960
like this is also very very awkward because then I have to just keep scrolling until forever before

41753
00:08:21,960 --> 00:08:25,080
I can actually read and take in all of the content.

41754
00:08:25,110 --> 00:08:26,630
So strike a happy medium.

41755
00:08:26,700 --> 00:08:29,430
And most importantly test, test, test.

41756
00:08:29,430 --> 00:08:30,820
Give it to other users.

41757
00:08:30,960 --> 00:08:35,960
You can employ professional testers to try out your website and give you feedback.

41758
00:08:35,970 --> 00:08:40,799
Now if you can't afford that, just use your family and friends. And bake some cookies for them,

41759
00:08:40,799 --> 00:08:46,800
get them to test out your website and start getting some feedback on how you can improve the design.

41760
00:08:46,800 --> 00:08:51,840
Now finally we've talked a lot about user experience and how to get people to have a good time.

41761
00:08:51,870 --> 00:08:57,900
Now some designers though use the knowledge they have about human psychology and User Interface and

41762
00:08:57,900 --> 00:09:04,670
User Experience design to do bad things.

41763
00:09:05,130 --> 00:09:13,410
And in the design world, we call these dark patterns. So patterns which get a user to perform an action

41764
00:09:13,410 --> 00:09:17,790
or behavior that is beneficial to the company or the designer

41765
00:09:18,120 --> 00:09:20,960
but it's not necessarily what the user wants.

41766
00:09:21,030 --> 00:09:25,450
And this I would say is another form of bad user experience.

41767
00:09:25,470 --> 00:09:27,510
So let me give you some examples.

41768
00:09:27,540 --> 00:09:32,790
This is a real life example. Let's say that you walked into Waitrose which is a big supermarket in the

41769
00:09:32,790 --> 00:09:35,880
UK and you bought yourself a sandwich.

41770
00:09:35,880 --> 00:09:40,560
Now when you look at it at the point when you're buying it, it looks like this sandwich is going to be

41771
00:09:40,560 --> 00:09:42,510
full length from edge to edge

41772
00:09:42,510 --> 00:09:43,410
right?

41773
00:09:43,470 --> 00:09:49,320
But then when you rip open the packaging you're disappointed when you find that actually all that's

41774
00:09:49,320 --> 00:09:55,540
in the middle is just air and your sandwich turns out to be a lot smaller than you initially thought.

41775
00:09:55,610 --> 00:09:57,910
It is the worst feeling in the world.

41776
00:09:58,000 --> 00:10:02,840
This is a feeling that I can't stand when my food suddenly gets reduced in size.

41777
00:10:02,940 --> 00:10:07,770
It's like as if somebody came along and took food out of your plate. In the digital world,

41778
00:10:07,770 --> 00:10:13,770
people do the same thing. The same kind of trickery that's meant to get you to perform an action that

41779
00:10:13,770 --> 00:10:20,430
you don't necessarily want and you end up feeling really disappointed and really upset. With Amazon every

41780
00:10:20,430 --> 00:10:21,110
single time

41781
00:10:21,120 --> 00:10:26,550
I have to re-click the free delivery button which I've earned by buying so much product from them.

41782
00:10:27,060 --> 00:10:32,310
But they still try to trick you using the things that we've learned about hierarchy

41783
00:10:32,310 --> 00:10:39,060
for example. Here the button that makes the more money "Express delivery" is highlighted in orange.

41784
00:10:39,060 --> 00:10:40,860
It pops out a lot more.

41785
00:10:40,920 --> 00:10:44,000
It's a lot more likely that you'll want to click on it.

41786
00:10:44,700 --> 00:10:50,880
But in all likelihood, you're probably happy with just normal delivery and you're now tricked into paying

41787
00:10:50,880 --> 00:10:53,040
more for this delivery.

41788
00:10:53,040 --> 00:10:54,260
Now here's another example

41789
00:10:54,270 --> 00:10:56,230
that's actually true the evil.

41790
00:10:56,400 --> 00:10:59,410
This is a Snapchat ad for some shoes.

41791
00:10:59,760 --> 00:11:08,340
But what the designer has cleverly done on the advertising is they've placed a one pixel curved line

41792
00:11:08,460 --> 00:11:15,090
on this ad which makes it kind of look a bit like a hair is on your screen. But when you go into that

41793
00:11:15,090 --> 00:11:19,140
screen and you try to get rid of that piece of hair, well you've tapped on an avenue.

41794
00:11:19,170 --> 00:11:26,550
So the ad takes you to the website and the advertisers make money off each click.

41795
00:11:26,550 --> 00:11:32,020
And this is truly a dog pattern because it's just tricking you to do something you didn't want to.

41796
00:11:32,250 --> 00:11:37,770
Whereas good design is about helping people do what they want to do and giving them a good experience

41797
00:11:37,800 --> 00:11:39,400
while they're at it.

41798
00:11:39,420 --> 00:11:47,250
Now the king of dog patterns is RyanAir and it's a low cost airline in Europe which is really known for

41799
00:11:47,580 --> 00:11:50,720
sort of charging you for every single little thing.

41800
00:11:50,730 --> 00:11:55,880
I wouldn't be surprised if tomorrow they suddenly charged you for using the toilet on the plane.

41801
00:11:56,580 --> 00:12:03,150
But here's what the website looks like when you tried to buy an airplane ticket. In order to buy your

41802
00:12:03,150 --> 00:12:08,370
airplane ticket you have to go through all of these extra add ons including saying "No I don't want to

41803
00:12:08,370 --> 00:12:13,920
buy travel insurance." But look at how they've hidden it inside this big dropdown list and it's not even

41804
00:12:13,920 --> 00:12:15,170
at the beginning of the list.

41805
00:12:15,180 --> 00:12:18,920
It's actually sorted alphabetically below Denmark for some reason.

41806
00:12:19,530 --> 00:12:23,650
And this just makes it so much harder for you to find that option

41807
00:12:23,820 --> 00:12:27,910
and for you to actually accidentally end up buying travel insurance.

41808
00:12:28,330 --> 00:12:34,930
Now the final example and probably one of the dog patterns I dislike the most is these checkboxes. You

41809
00:12:34,930 --> 00:12:36,660
know right below you filled in a form,

41810
00:12:36,670 --> 00:12:42,130
you get these checkboxes and sometimes the wording is so confusing that I really don't know what I'm

41811
00:12:42,130 --> 00:12:43,120
signing up for.

41812
00:12:43,330 --> 00:12:49,720
Like this one: If you would like us to no longer continue to stop not sending you special deals and offers

41813
00:12:49,750 --> 00:12:53,150
every week, please indicate you are inclined to yes

41814
00:12:53,170 --> 00:12:57,440
by not checking the box. I have no idea what clicking that box does.

41815
00:12:57,460 --> 00:12:59,160
I really just... I don't know.

41816
00:12:59,170 --> 00:13:00,490
I might click it, I might not.

41817
00:13:00,490 --> 00:13:06,490
I don't know what it does. But it's horribly confusing and it's not a good user experience at all.

41818
00:13:06,490 --> 00:13:10,440
I will bet you that after I sign up I'm never going to come back to this website again

41819
00:13:10,510 --> 00:13:11,390
right?

41820
00:13:11,410 --> 00:13:13,210
Are you with me? Now

41821
00:13:13,240 --> 00:13:15,850
we've seen what good websites look like.

41822
00:13:15,850 --> 00:13:18,130
We've seen what bad websites look like.

41823
00:13:18,140 --> 00:13:20,650
We've even seen what evil websites look like.

41824
00:13:21,100 --> 00:13:27,520
But it's time to put our knowledge to the test by designing our own website from scratch and applying

41825
00:13:27,520 --> 00:13:31,460
these four pillars of web design to this project.

41826
00:13:31,510 --> 00:13:36,190
So have a think about what you've learned so far and head over to the next lesson where we're going

41827
00:13:36,190 --> 00:13:38,860
to design a hotel website from scratch.


41828
00:00:00,540 --> 00:00:07,410
Now that we've learned about some of the principles of web design such as Color Theory, Typography, User

41829
00:00:07,410 --> 00:00:14,730
Interface design and User Experience design, the four pillars, it's time to apply what we've learned and

41830
00:00:14,790 --> 00:00:17,040
build a design together.

41831
00:00:17,040 --> 00:00:23,220
Now there's a website called Daily UI which gives you a task to design every day for 100 days.

41832
00:00:23,790 --> 00:00:29,610
It's free to sign up and it's something that really does improve designing skills by just that repeated

41833
00:00:29,610 --> 00:00:31,060
practice.

41834
00:00:31,110 --> 00:00:37,070
Now if you take a look at a website called Collect UI you can see they've collected together all the

41835
00:00:37,170 --> 00:00:43,290
designers attempts at designing each of these daily challenges and you can see examples what each of

41836
00:00:43,290 --> 00:00:44,800
these challenges are.

41837
00:00:44,910 --> 00:00:52,810
For example, anything from creating a sign up screen to a flight website to a hotel booking website.

41838
00:00:52,830 --> 00:00:59,630
So we're going to take some of these ideas as inspiration and create our own website design

41839
00:00:59,700 --> 00:01:05,190
applying the four pillars that we've learned in this module. The first thing I want you to do is head

41840
00:01:05,190 --> 00:01:07,980
over to a website called canva.com.

41841
00:01:07,980 --> 00:01:14,430
Now this is a online graphics editing program and you don't have to download anything and it's completely

41842
00:01:14,430 --> 00:01:15,660
free to sign up.

41843
00:01:15,870 --> 00:01:20,580
So sign up for a new account and then go ahead and create a new design.

41844
00:01:20,610 --> 00:01:27,720
So we're going to pick custom dimensions and I'm going to choose 1400 pixels by 800 pixels high.

41845
00:01:27,720 --> 00:01:33,750
Once we're inside our design we're going to take this as the first screen that the user sees in our

41846
00:01:33,750 --> 00:01:34,740
website.

41847
00:01:34,740 --> 00:01:39,270
And then when they scroll down they'll see the next page and then they scroll down and see the final

41848
00:01:39,270 --> 00:01:40,350
part of our website.

41849
00:01:41,010 --> 00:01:44,060
So let's design the first title screen.

41850
00:01:44,340 --> 00:01:50,780
Now I'm going to choose this free template which gives me a backdrop already but I'm actually just going

41851
00:01:50,780 --> 00:01:55,380
to use it for some texture. I quite like the way that this pattern looks.

41852
00:01:55,410 --> 00:02:00,030
So I'm going to apply the pattern and then I'm going to change the background.

41853
00:02:00,030 --> 00:02:04,080
Now I think the background looks a little bit bland with just a single color.

41854
00:02:04,500 --> 00:02:12,600
So I'm going to choose a photo instead and I'm going to search for a beach, like this one.

41855
00:02:12,600 --> 00:02:18,960
So now that I've got my image I'm going to drag it out so that it's sized as large as it needs to be.

41856
00:02:19,410 --> 00:02:25,200
So going all the way to each of the edges. And then I'm going to reposition it so that it fills up the

41857
00:02:25,200 --> 00:02:28,200
entire screen. Like this.

41858
00:02:28,200 --> 00:02:31,500
So now I have a background image, some sort of texture on it

41859
00:02:31,880 --> 00:02:35,810
and I can go to the elements to keep adding to this design.

41860
00:02:35,820 --> 00:02:38,920
Let's take a look at some of the gradients here.

41861
00:02:39,180 --> 00:02:42,930
And I'm going to pick something that'll fit in with this theme.

41862
00:02:43,020 --> 00:02:46,590
Now, of course, how you design this is completely up to you.

41863
00:02:46,650 --> 00:02:52,710
And I'm just providing an example of how I go through this process of designing.

41864
00:02:52,710 --> 00:02:54,510
So now I've got a circle here.

41865
00:02:54,540 --> 00:03:02,670
I'm going to add some more shapes maybe a square of some sort. We can click on see all to see all the

41866
00:03:02,670 --> 00:03:03,870
other ones.

41867
00:03:04,320 --> 00:03:12,270
And then I'm going to put a square which I'm going to make it so that it goes right to the end of each

41868
00:03:12,360 --> 00:03:13,340
of the sites.

41869
00:03:13,350 --> 00:03:19,310
So here and then we're going to make it line up with the center of the circle roughly like this.

41870
00:03:19,350 --> 00:03:23,460
And let's just change that color to white.

41871
00:03:23,460 --> 00:03:29,080
Now we have this nice white border, some abstract shapes and patterns and an image.

41872
00:03:29,100 --> 00:03:34,530
Now I'm going to add a heading text. This heading text is going to be the name of our hotel.

41873
00:03:34,530 --> 00:03:41,140
After all we're designing a website for this unknown Hotel which I'll call "A Hotel".

41874
00:03:41,580 --> 00:03:49,410
A really easy way of making something look authoritative and like it's been around forever is by changing

41875
00:03:49,410 --> 00:03:52,170
the typeface to a Serif typeface.

41876
00:03:52,620 --> 00:03:58,470
So I'm going to highlight this font and I'm going to click the dropdown and find a serif typeface like

41877
00:03:58,560 --> 00:03:59,790
this one cardo.

41878
00:04:00,480 --> 00:04:06,870
And notice how instantly our hotel looks a lot more established like it's been around for longer.

41879
00:04:06,960 --> 00:04:09,530
Now I'm going to change the color of this also to white.

41880
00:04:09,690 --> 00:04:16,709
So notice how we're starting to establish a color palette of greens and turquoise and blue and white.

41881
00:04:17,339 --> 00:04:26,870
And we're going to increase the font size to maybe something really large like 120 or 144. And

41882
00:04:26,900 --> 00:04:30,070
I'm going to change this so that it's all caps like so.

41883
00:04:30,850 --> 00:04:33,050
So that's actually a little bit too big

41884
00:04:33,050 --> 00:04:41,360
so let's drop it down a notch. And I can increase the spacing of the letters to again make it look more

41885
00:04:41,360 --> 00:04:46,450
fancy, more expensive and more authoritative.

41886
00:04:47,150 --> 00:04:51,710
Here's the name of our hotel, A Hotel,  centered in this box.

41887
00:04:51,710 --> 00:04:57,400
And now I'm ready to add a subheading and my subheading is going to be some sort of tagline

41888
00:04:57,400 --> 00:04:58,560
right?

41889
00:04:58,790 --> 00:05:05,020
And I'm going to go with something really obnoxious like "Lose Yourself to find yourself".

41890
00:05:05,020 --> 00:05:07,070
I feel like I'm ready to open a hotel tomorrow.

41891
00:05:07,850 --> 00:05:17,170
Let's Now contrast this serif typeface for the title with a San-Serif sort of body or subtitle.

41892
00:05:17,330 --> 00:05:20,010
And this is what we learned about in the typography section.

41893
00:05:20,030 --> 00:05:22,260
It creates contrast in the design.

41894
00:05:22,340 --> 00:05:28,820
So I'm going to pick this Glacial indifference typeface and I'm again going to choose white and then

41895
00:05:28,820 --> 00:05:34,590
make both these lines left-aligned so that I can align them to the same position.

41896
00:05:34,820 --> 00:05:40,700
And that is how when you drag elements around on canvas it automatically gives you these alignment grids

41897
00:05:41,060 --> 00:05:46,670
so that you can more easily position it so that they are actually all aligned together.

41898
00:05:46,670 --> 00:05:48,710
And notice how big a difference that looks

41899
00:05:48,710 --> 00:05:54,190
just having it off alignment and then on alignment. It's suddenly just looks a lot more proper

41900
00:05:54,210 --> 00:05:58,170
right? Now I'm more or less done with my title page.

41901
00:05:58,190 --> 00:06:04,830
I'm going to move on to the next one which is going to be a page for selling the features of the hotel.

41902
00:06:04,850 --> 00:06:11,330
Let's start off by adding some images. And I've got some that I've already found before.

41903
00:06:11,330 --> 00:06:18,290
I've got a picture of a bedroom which I'm going to make it a little bit smaller like so and then I've

41904
00:06:18,290 --> 00:06:21,950
got a picture of a breakfast of some sort.

41905
00:06:22,130 --> 00:06:24,290
So you've got food at this hotel.

41906
00:06:24,290 --> 00:06:25,460
You're not going to starve.

41907
00:06:25,460 --> 00:06:27,770
That's pretty important for people to know.

41908
00:06:29,460 --> 00:06:33,510
And I'm going to size it so that it's actually the same size as the other one.

41909
00:06:33,510 --> 00:06:34,930
So I'm just going to put it on top.

41910
00:06:35,680 --> 00:06:38,000
Now the last one is going to be a pool.

41911
00:06:38,050 --> 00:06:39,610
So you've also got a pool.

41912
00:06:39,640 --> 00:06:41,830
You don't get bored if it gets too hot.

41913
00:06:41,830 --> 00:06:43,650
You can always just go into the pool.

41914
00:06:43,660 --> 00:06:45,780
This is turning out to be a great hotel

41915
00:06:45,790 --> 00:06:47,690
by the way, I really want to stay here.

41916
00:06:47,690 --> 00:06:52,600
Now the goal of our features page is to have three images which are probably going to be about the same

41917
00:06:52,600 --> 00:06:53,470
size.

41918
00:06:53,500 --> 00:06:59,920
So I'm actually going to need to crop this last photo so that I get rid of maybe a little bit of this

41919
00:06:59,950 --> 00:07:05,520
right edge but have it just about the same size as my other photos.

41920
00:07:05,800 --> 00:07:10,780
And now I need to resize each of these photos so that it actually can fit onto this page.

41921
00:07:11,500 --> 00:07:14,850
So I'm just going to throw them one on top of the other and resize them

41922
00:07:14,860 --> 00:07:16,670
so they're all the same size.

41923
00:07:16,990 --> 00:07:21,210
And now I can place them around this web page.

41924
00:07:21,340 --> 00:07:25,730
So when you move towards the edge of each page you can see this grid show up.

41925
00:07:25,810 --> 00:07:29,500
So I'm going to line up the left with the left side of the grid the right with the right side of the

41926
00:07:29,500 --> 00:07:32,410
grid and the middle right in the middle.

41927
00:07:32,410 --> 00:07:39,160
So now these three are evenly spaced apart and I can now add some more design features to it because

41928
00:07:39,160 --> 00:07:42,430
it's looking a little bit bland just as photos.

41929
00:07:42,460 --> 00:07:48,180
Now one of the easiest things to make photos look nice is to just jazz it up with a frame.

41930
00:07:48,180 --> 00:07:51,440
Now because all hotel is very modern, it's contemporary,

41931
00:07:51,520 --> 00:07:53,210
it's been featured in Vogue,

41932
00:07:53,230 --> 00:07:57,820
I want to make sure that the framing also looks equally contemporary.

41933
00:07:57,820 --> 00:08:04,780
So I'm going to find a circle and I'm going to put this circle around this square image which is going

41934
00:08:04,780 --> 00:08:11,590
to make it look quite nice and contemporary. And then I'm going to give it a background color like that.

41935
00:08:11,590 --> 00:08:14,520
And we've now framed our picture.

41936
00:08:14,740 --> 00:08:22,150
So now, all I have to do is just copy it and put it onto all the other images like so.

41937
00:08:22,150 --> 00:08:24,490
And now I've got three features.

41938
00:08:24,550 --> 00:08:26,830
You've got a bed, you've got food, you've got pool.

41939
00:08:26,830 --> 00:08:31,650
What more do you want? The next part is probably going to be some sort of explainer

41940
00:08:31,660 --> 00:08:32,210
right?

41941
00:08:32,230 --> 00:08:39,789
So add a subheading of these sections and the subheading is going to be something like you get beautiful

41942
00:08:39,789 --> 00:08:45,160
food, you have beautiful rooms and you have a beautiful pool.

41943
00:08:45,580 --> 00:08:50,070
So three things that we've got. And I'm going to left-align

41944
00:08:50,080 --> 00:08:59,500
each of these again so that I can make it aligned with the left edge of each of the pictures like this.

41945
00:08:59,590 --> 00:09:07,240
So all three of these pieces of text are on the same horizontal level and they're also vertically aligned

41946
00:09:07,300 --> 00:09:10,360
with the start of each image.

41947
00:09:10,360 --> 00:09:16,240
Now each of these will need to be designed so that they have the same typeface as what we had in the

41948
00:09:16,240 --> 00:09:18,370
title page so that it's consistent

41949
00:09:18,370 --> 00:09:18,950
right?

41950
00:09:18,970 --> 00:09:21,670
We're reflecting the same thing that we saw before.

41951
00:09:22,300 --> 00:09:29,890
So I'm gonna change that again to Glacial indifference and do the same for all three bits of text.

41952
00:09:30,250 --> 00:09:36,370
And now we can afford to increase the spacing in the text a little bit to make it look a little bit

41953
00:09:36,370 --> 00:09:41,270
more roomy. So I think I had 18

41954
00:09:41,270 --> 00:09:46,940
on the other one so I'm going to put 18 here as well and 18 here as well.

41955
00:09:48,990 --> 00:09:49,350
There we go.

41956
00:09:49,550 --> 00:09:55,760
So we've got all three bits of text and now all we need is just a little bit of body text. For the bod

41957
00:09:55,760 --> 00:09:56,200
text

41958
00:09:56,210 --> 00:10:04,460
I'm going to use a Lorem Ipsum. So I'm going to use one of these generators and just get some text generated

41959
00:10:04,470 --> 00:10:12,200
and I'm going to copy a little bit of it and put it into my design. Replace that text with this

41960
00:10:12,200 --> 00:10:14,420
and that's a little bit too much.

41961
00:10:14,420 --> 00:10:22,280
So let's make it a bit smaller. And we're going to have some text which is going to go just below this

41962
00:10:22,280 --> 00:10:23,540
section.

41963
00:10:23,780 --> 00:10:25,850
So it's still a little bit too much.

41964
00:10:25,850 --> 00:10:28,730
Let's get rid of the last sentence. That looks pretty good.

41965
00:10:28,730 --> 00:10:31,340
Now again we want to keep our design consistent.

41966
00:10:31,340 --> 00:10:37,190
So we're going to make sure it's again left aligned using the same font as before.

41967
00:10:37,400 --> 00:10:44,360
And we've now got a bit of body text which I'm going to further style by changing the color of each

41968
00:10:44,360 --> 00:10:45,310
of these.

41969
00:10:45,380 --> 00:10:53,700
So I want to go for maybe like a dark-grayish like one of these and the same for the body text.

41970
00:10:53,990 --> 00:10:56,750
That way it doesn't sort of stand out so much.

41971
00:10:56,900 --> 00:10:58,350
And I'm going to copy this

41972
00:10:58,370 --> 00:11:03,620
so that I put it on all of the other features.

41973
00:11:03,620 --> 00:11:05,410
Notice the alignment here.

41974
00:11:05,450 --> 00:11:08,390
I've got all the pictures aligned with each other,

41975
00:11:08,570 --> 00:11:11,570
all of these circles center-aligned with each picture,

41976
00:11:11,870 --> 00:11:17,610
I've got all the text lined along the left and this just makes the design look a lot tighter

41977
00:11:17,780 --> 00:11:19,910
and a lot more consistent.

41978
00:11:20,090 --> 00:11:25,330
And notice how with the layout I've tried to keep it interesting by having some pictures that break

41979
00:11:25,330 --> 00:11:31,130
up the text and making sure that each body of text is not overwhelming. It's not too long

41980
00:11:31,130 --> 00:11:32,570
like a big long sentence.

41981
00:11:32,850 --> 00:11:36,440
But instead it's short enough to be easily read quickly.

41982
00:11:36,620 --> 00:11:40,790
Now, the other thing you'll notice is that there's a degree of hierarchy that's being established here

41983
00:11:40,800 --> 00:11:41,450
right?

41984
00:11:41,490 --> 00:11:46,630
Clearly the thing that I really want people to know is that my hotel is called A Hotel.

41985
00:11:46,820 --> 00:11:51,800
But in addition, I've also got beautiful food being more important than the body text

41986
00:11:51,800 --> 00:11:53,640
that explains that paragraph.

41987
00:11:53,870 --> 00:11:59,750
And each of these images also being more important because, let's face it, most people look at the pictures

41988
00:11:59,750 --> 00:12:01,100
and don't read anything right?

41989
00:12:01,340 --> 00:12:02,930
So that's our second part of the website

41990
00:12:02,930 --> 00:12:03,530
done.

41991
00:12:03,680 --> 00:12:08,270
And we're now onto the last part which is going to be the contact page.

41992
00:12:08,270 --> 00:12:15,080
So this contact page I'm again going to search for maybe a photo of something that's quite fashionable,

41993
00:12:15,080 --> 00:12:17,530
contemporary, tropical.

41994
00:12:17,810 --> 00:12:21,020
Maybe we can just find a picture of a pineapple.

41995
00:12:21,890 --> 00:12:24,130
And this one looks pretty good.

41996
00:12:24,140 --> 00:12:30,320
Let's go ahead and position this photo so that it's the same size as the design.

41997
00:12:30,560 --> 00:12:35,330
And now I can move it up so that only the bottom shows up my pineapples.

41998
00:12:35,330 --> 00:12:36,080
So there we go.

41999
00:12:36,080 --> 00:12:43,100
We've got 1, 2 and 3 and the last part is just a contact me page. The contact me page is also

42000
00:12:43,100 --> 00:12:45,280
going to need some titled text.

42001
00:12:45,350 --> 00:12:47,360
Let's just call that Stay.

42002
00:12:47,360 --> 00:12:52,940
So when they want to stay they can take a look at this section. And we're going to again copy this style

42003
00:12:52,940 --> 00:12:57,510
that we had from before so that we can actually replicate it down here

42004
00:12:57,740 --> 00:13:00,830
and we keep our design again consistent.

42005
00:13:00,830 --> 00:13:06,800
It has the same theme, the same color palette, the same typography.

42006
00:13:06,800 --> 00:13:13,280
This is a little bit too big though. So let's make it a bit smaller so it fits onto this page.

42007
00:13:13,400 --> 00:13:19,100
And again I'm going to be consistent with our geometric shapes which is lending that sort of modern

42008
00:13:19,100 --> 00:13:23,830
feel. I've got a sort of rectangle, a circle, more circles.

42009
00:13:23,900 --> 00:13:31,880
So let's pick another shape from here. Maybe some sort of a hexagon. That looks pretty good.

42010
00:13:31,880 --> 00:13:33,260
Let's add the hexagon,

42011
00:13:33,260 --> 00:13:43,490
make it a bit smaller, we can maybe move our pineapples down a bit and change this so that it's white

42012
00:13:44,540 --> 00:13:47,930
and make it even a bit smaller.

42013
00:13:48,170 --> 00:13:50,000
I think something like that would do quite well.

42014
00:13:50,540 --> 00:13:57,380
So now the final thing I want to add is some sort of mailing address, email address, phone number, which

42015
00:13:57,380 --> 00:14:02,200
is going to go in here and it's going to be nicely aligned with this word stay.

42016
00:14:03,590 --> 00:14:10,190
So let's go ahead and take this word and make it right aligned so that this line pops up when I try

42017
00:14:10,190 --> 00:14:16,810
to align it like so and let's just make sure that it actually still fits in.

42018
00:14:17,090 --> 00:14:23,450
So maybe we have to move this text up a little bit, reduce the spacing a little.

42019
00:14:23,450 --> 00:14:29,210
I think a lot of times you do have to play around with your design just so that it starts looking good

42020
00:14:29,210 --> 00:14:30,040
to you.

42021
00:14:30,200 --> 00:14:35,240
You might have to shift things a little bit and be flexible with those rules that we've talked about.

42022
00:14:36,050 --> 00:14:43,610
So now all we need to make sure is that the word is right-aligned and our text is also right-aligned

42023
00:14:44,000 --> 00:14:50,240
so that we can actually line them up together so that they actually look like they're on the same vertical

42024
00:14:50,360 --> 00:14:51,830
alignment.

42025
00:14:51,860 --> 00:14:59,720
Now, if we can just mess around with the size of the hexagon and make sure that everything is still within

42026
00:14:59,720 --> 00:15:05,960
the hexagon and we've pretty much finished our design now. What did that take? Maybe 20 minutes. And

42027
00:15:05,960 --> 00:15:11,330
we managed to apply a lot of things that we've learned from User Interface design or User Experience

42028
00:15:11,330 --> 00:15:19,700
design, Color Theory and Typography to create this 3-page very modern looking website for A Hotel.

42029
00:15:19,700 --> 00:15:26,000
So at this point, there's a really cool feature in Canva which lets you just publish the website.

42030
00:15:26,150 --> 00:15:33,830
So if you click on this publish button and you scroll all the way down and you click on website then

42031
00:15:33,860 --> 00:15:40,820
you can actually select the Web style as standard and then open this as an actual web page.

42032
00:15:40,820 --> 00:15:46,100
Notice how it's placed my three pages together into an actual web page

42033
00:15:46,490 --> 00:15:51,390
and I can scroll down and also navigate to it through the navigation bar.

42034
00:15:51,410 --> 00:15:53,920
Now of course we don't have mobile optimization,

42035
00:15:53,930 --> 00:16:01,130
we don't have any code that has any functionality, we can't add javascript to it. But at least we can quickly

42036
00:16:01,130 --> 00:16:06,440
throw up a design, visualize it and share it with other people to see what they think.

42037
00:16:06,590 --> 00:16:11,050
And this is probably one of the best ways of building up your design muscle.

42038
00:16:11,060 --> 00:16:17,510
Just practicing again and again until you get to a point where pretty much unanimously everybody thinks

42039
00:16:17,510 --> 00:16:22,520
that your design looks great and people start asking you to actually build websites for them.

42040
00:16:22,520 --> 00:16:24,940
So study a lot of the websites that you come across,

42041
00:16:24,940 --> 00:16:30,320
the ones that you think look really good. And think about what makes them good and then try to take some

42042
00:16:30,320 --> 00:16:37,700
of those aspects along with everything you've learned in these lessons to create designs that humans

42043
00:16:37,790 --> 00:16:38,840
love.

42044
00:16:38,840 --> 00:16:47,370
So I hope you'll take a moment now to pause the video and have a go at creating your own hotel website.

42045
00:16:47,780 --> 00:16:54,020
So use the same tools that you saw me use on Canva and try to design a slightly different type of hotel.

42046
00:16:54,020 --> 00:17:00,500
What if it had to be a more traditional hotel that was around the time of Henry the 8th or something? It's

42047
00:17:00,650 --> 00:17:07,200
like some really old hotel and they want to show how decadent they are, how glamorous they are, and trying

42048
00:17:07,200 --> 00:17:09,089
to design a different type of website.

42049
00:17:09,710 --> 00:17:16,369
So pause the video, give that a go and then try to apply everything you've learned in this module into

42050
00:17:16,369 --> 00:17:17,579
that design.

42051
00:17:17,869 --> 00:17:24,140
And once you've created your design share this link that you can see at the top of Canva so that we

42052
00:17:24,140 --> 00:17:28,950
can all see your design and we can comment on how beautiful it looks.

42053
00:17:29,000 --> 00:17:34,670
So have a go at doing that and make sure that you let us know what it looks like in the comments below

42054
00:17:34,670 --> 00:17:39,990
and have fun doing it. Now I hope you really enjoyed this module on web design.

42055
00:17:40,040 --> 00:17:42,550
It's a little bit different from what you've been used to so far.

42056
00:17:42,590 --> 00:17:48,530
There's no coding in this module but instead we tried to get you to think about all of the design principles

42057
00:17:48,590 --> 00:17:54,380
that actually ends up creating beautiful websites, websites that people will love. And hopefully

42058
00:17:54,380 --> 00:17:59,150
you'll take these pillars and this knowledge through the next time you build your product or you build

42059
00:17:59,150 --> 00:18:06,110
your website and you'll apply it alongside with your code so that you have beautiful features and beautiful

42060
00:18:06,110 --> 00:18:07,450
interface.

42061
00:18:07,460 --> 00:18:12,440
Now once you've created your own designs and you've shared it with us then it's time to get back to

42062
00:18:12,440 --> 00:18:13,310
the coding and 

42063
00:18:13,430 --> 00:18:18,570
we're going to continue tackling more web development. So for all of that and more,

42064
00:18:18,680 --> 00:18:19,280
I'll see you there.



42065
00:00:00,630 --> 00:00:01,280
All right, guys.

42066
00:00:01,320 --> 00:00:08,490
So in this module, we're going to learn all about how to build your very own RESTful API.

42067
00:00:09,180 --> 00:00:15,990
Now, in previous modules, we've seen and used APIs that other people have created, and we've also

42068
00:00:15,990 --> 00:00:21,170
started to build up our server to allow get requests and post requests.

42069
00:00:21,570 --> 00:00:27,240
But in this module, we're going to do it from beginning to end and we're going to build our very own

42070
00:00:27,240 --> 00:00:29,160
complete RESTful API.

42071
00:00:29,640 --> 00:00:35,430
Now, the first question you might have is what exactly does REST mean and what does it mean to make

42072
00:00:35,430 --> 00:00:37,100
an API RESTful,

42073
00:00:37,140 --> 00:00:37,470
right?

42074
00:00:37,920 --> 00:00:44,850
Well, REST is not lazing on the couch and watching Netflix, but it actually stands for REpresentational

42075
00:00:44,850 --> 00:00:48,630
State Transfer, which is quite a mouthful.

42076
00:00:48,630 --> 00:00:54,480
But in order to understand it, we have to backtrace a little bit and we have to go back to that classic

42077
00:00:54,480 --> 00:00:59,630
architecture that we already looked at, which is the client and server architecture.

42078
00:00:59,820 --> 00:01:03,840
And this is the architecture that the entire Internet is pretty much built on.

42079
00:01:04,379 --> 00:01:09,210
So let's just review it quickly. So the client makes a request to the server.

42080
00:01:09,450 --> 00:01:11,130
So what exactly is the client?

42081
00:01:11,160 --> 00:01:16,710
Well, if we were in a restaurant, the client would be, well, the client who's paying for the meal,

42082
00:01:16,710 --> 00:01:17,030
right?

42083
00:01:17,310 --> 00:01:20,830
And the server would be the server staff at the restaurant.

42084
00:01:21,390 --> 00:01:27,420
So when our client makes a request, say, I'd like a pizza please, then the server has to check

42085
00:01:27,420 --> 00:01:30,510
to see if this is something that the restaurant can fulfill.

42086
00:01:30,780 --> 00:01:35,330
And if so, he will smile graciously at you and fulfill that request.

42087
00:01:35,670 --> 00:01:41,310
But if the client requested something that they didn't have, for example, a sausage, and it's not on

42088
00:01:41,310 --> 00:01:48,420
the menu, then the server would give you a error code, a classic one, of course, being 404, which

42089
00:01:48,420 --> 00:01:50,640
is resource doesn't exist.

42090
00:01:50,670 --> 00:01:58,280
We don't stock sausages. Now when the client makes that request to the server classically on the Internet,

42091
00:01:58,290 --> 00:02:04,050
this is done through a HTTP request, hypertext transfer protocol request.

42092
00:02:04,680 --> 00:02:10,860
And the analogy for this is it's kind of like the language that you're using to make the request, say

42093
00:02:10,860 --> 00:02:13,110
you're saying I want a pizza,

42094
00:02:13,110 --> 00:02:13,410
right?

42095
00:02:13,590 --> 00:02:17,880
And if you're in France, you would have to say that in French, although I'm not sure what you're doing

42096
00:02:17,880 --> 00:02:22,890
eating pizzas in France. But the server would be able to understand your request and give you back

42097
00:02:22,890 --> 00:02:24,120
the correct result.

42098
00:02:24,630 --> 00:02:31,800
Now, the thing you have to remember is that HTTP, this hypertext transfer protocol, is not the only

42099
00:02:31,800 --> 00:02:34,230
language that servers can speak,

42100
00:02:34,230 --> 00:02:34,570
right?

42101
00:02:34,830 --> 00:02:40,830
Another one that you might have heard of is, for example, the FTP request, which is the file transfer

42102
00:02:40,830 --> 00:02:41,860
protocol request.

42103
00:02:42,360 --> 00:02:47,340
So if you use the wrong language, you might not get back the result that you're looking for.

42104
00:02:47,730 --> 00:02:54,810
So, for example, if a server speaks French in France and you try to speak to him in Italian, that

42105
00:02:54,810 --> 00:02:56,050
probably won't work.

42106
00:02:56,280 --> 00:03:01,410
So we have to make sure we've got the right language for making our request.

42107
00:03:01,800 --> 00:03:07,350
Now, at this point, some students might say, well, what about that other thing that HTTPs

42108
00:03:07,410 --> 00:03:08,550
request?

42109
00:03:08,820 --> 00:03:09,310
What does that

42110
00:03:09,310 --> 00:03:10,380
s stand for,

42111
00:03:10,410 --> 00:03:11,820
and is it a different language?

42112
00:03:12,210 --> 00:03:16,760
Well, HTTPs stands for HTTP secure request.

42113
00:03:17,010 --> 00:03:23,700
So remember that all your requests and responses are going across the Internet and can be potentially

42114
00:03:23,700 --> 00:03:25,670
tapped in by lots of people.

42115
00:03:25,980 --> 00:03:32,160
So if you wanted to make it secure so you don't want to be on a website entering your card details and

42116
00:03:32,160 --> 00:03:38,640
it's just going through, you know, a bog-standard HTTP request because somebody might hijack that

42117
00:03:38,640 --> 00:03:40,970
along the way and that's not very secure.

42118
00:03:41,130 --> 00:03:45,020
So we can also use cryptography and encrypt our request

42119
00:03:45,240 --> 00:03:49,980
so if anybody does intercept the request, they won't be able to know what it says.

42120
00:03:50,550 --> 00:03:54,510
Now, this is kind of equivalent to having like a secret code language.

42121
00:03:54,870 --> 00:04:01,290
For example, if both you and your waiter speak Klingon, then you could communicate securely

42122
00:04:01,590 --> 00:04:06,510
and it doesn't matter if you're overheard in the restaurant because nobody else will be able to understand

42123
00:04:06,690 --> 00:04:09,660
what you're saying other than yourself and your waiter.

42124
00:04:09,900 --> 00:04:15,690
Now, let's say that the client has successfully made the request to the server and this is something

42125
00:04:15,690 --> 00:04:18,089
that the server can serve up,

42126
00:04:18,300 --> 00:04:22,110
so it sees it as a valid request instead of a 404,

42127
00:04:22,470 --> 00:04:28,020
then in this case the server should respond with the results of what it is that you requested.

42128
00:04:28,590 --> 00:04:35,160
So in the restaurant, that might be your pizza. But on the Internet, that might be the web page HTML

42129
00:04:35,370 --> 00:04:39,300
or resources such as images or data.

42130
00:04:39,570 --> 00:04:44,610
Now, in order to give us that result, the server might do one of two things.

42131
00:04:44,610 --> 00:04:49,980
It might do some computation, run some code to work out the result that you need

42132
00:04:50,130 --> 00:04:57,780
for example, if our server was a simple calculator web application, or the server might need to communicate

42133
00:04:57,780 --> 00:04:59,970
with our database in order to grab

42134
00:05:00,030 --> 00:05:06,360
the relevant pieces of data that the client requested. So depending on what kind of request that the

42135
00:05:06,360 --> 00:05:13,320
client made, what kind of resource they wanted, the server might do one or both of these things.

42136
00:05:13,680 --> 00:05:21,330
So we've seen that the client has to talk to the server using an HTTP request, a specific language that

42137
00:05:21,330 --> 00:05:22,590
the server can understand.

42138
00:05:23,130 --> 00:05:28,230
But also, there's only a certain amount of things that the server can do, right?

42139
00:05:28,440 --> 00:05:34,320
Say at a restaurant, you would have a menu of items that this particular restaurant would serve.

42140
00:05:34,440 --> 00:05:36,830
And it's exactly the same on the Internet.

42141
00:05:37,380 --> 00:05:45,030
The server will have a whole bunch of APIs which are services that it can expose for clients to be able

42142
00:05:45,030 --> 00:05:45,900
to tap into.

42143
00:05:46,290 --> 00:05:48,300
And so when we're building an API

42144
00:05:48,300 --> 00:05:54,540
we're kind of like building the menu of things that our server can respond to when a client makes a

42145
00:05:54,540 --> 00:05:55,140
request.

42146
00:05:55,470 --> 00:06:02,330
So now that we understand all three components, what does it mean to make our API RESTful?

42147
00:06:02,970 --> 00:06:07,130
Well, REST is essentially just an architectural style.

42148
00:06:07,620 --> 00:06:13,830
So just as you have different buildings that have different architectural styles, for example, the

42149
00:06:13,830 --> 00:06:20,580
Baroque architectural style with the nice arches or other buildings might be built in the Gothic architectural

42150
00:06:20,580 --> 00:06:24,930
style with flying buttresses and these imposing beams.

42151
00:06:25,200 --> 00:06:32,100
And my favorite, the Neoclassical, have these incredibly geometric shapes and columns that really

42152
00:06:32,100 --> 00:06:34,690
remind you of old Greek architecture.

42153
00:06:35,610 --> 00:06:40,550
So these are architectural styles for designing buildings.

42154
00:06:40,890 --> 00:06:48,600
Well, REST is an architectural style for designing APIs, and it's definitely not the only architectural

42155
00:06:48,600 --> 00:06:48,960
style.

42156
00:06:49,380 --> 00:06:55,800
So the other really, really popular one before REST became the dominant style was SOAP.

42157
00:06:56,160 --> 00:07:02,280
And there's also GraphQL or FALCOR and there's a lot of other architectural styles.

42158
00:07:02,550 --> 00:07:06,240
But the gold standard for Web APIs is REST.

42159
00:07:06,420 --> 00:07:08,370
So that's what we're going to be looking at.

42160
00:07:08,610 --> 00:07:15,400
And REST actually came about really quite recently as a part of this guy's Ph.D.

42161
00:07:15,480 --> 00:07:20,580
This is Roy Fielding and he did his PhD in the University of California.

42162
00:07:20,820 --> 00:07:26,430
And as a part of his doctorate, he researched and came up with this architectural style that we now

42163
00:07:26,430 --> 00:07:27,240
call REST.

42164
00:07:27,570 --> 00:07:33,720
And it proposes a set of rules that web developers could follow when they're building their APIs.

42165
00:07:34,140 --> 00:07:41,430
And he came up with this idea that all websites across the web would use the same structure for building

42166
00:07:41,430 --> 00:07:42,260
their APIs.

42167
00:07:42,720 --> 00:07:48,240
I mean, imagine if you had a whole street and all their buildings had the same layout.

42168
00:07:48,540 --> 00:07:53,220
For example, the toilets for men and women are always on the same floors, in the same position,

42169
00:07:53,310 --> 00:07:57,750
then you would never get into a situation where you're trying to find the toilet.

42170
00:07:58,080 --> 00:08:04,200
So my personal struggles aside, essentially in his Ph.D. he proposed that the Internet could do the

42171
00:08:04,200 --> 00:08:04,740
same.

42172
00:08:05,010 --> 00:08:11,610
If every Web API was built using the same common guiding principles, then it would be so easy for everybody

42173
00:08:11,610 --> 00:08:16,890
to work together and be able to use different APIs quickly, easily, and efficiently.

42174
00:08:17,070 --> 00:08:19,310
So pretty neat for a PhD project, right?

42175
00:08:19,530 --> 00:08:21,180
There's definitely some PhD projects

42176
00:08:21,190 --> 00:08:26,370
that are a lot worse like the guy who had to look into the propulsion parameters of penguin poop.

42177
00:08:26,850 --> 00:08:29,040
But maybe if you really like penguins, that's OK.

42178
00:08:30,870 --> 00:08:34,500
So how exactly do we make our API RESTful?

42179
00:08:34,950 --> 00:08:40,890
Well, there's a lot of rules that an API has to follow to be RESTful.

42180
00:08:41,460 --> 00:08:47,160
And just as you have rules that you might follow at your workplace or your school, you might have a

42181
00:08:47,160 --> 00:08:51,390
uniform, no shorts, no singlets, don't smoke in the building,

42182
00:08:52,860 --> 00:08:57,180
you also have a whole bunch of rules for making an API RESTful.

42183
00:08:57,570 --> 00:09:03,510
But the two most important ones are using the HTTP request verbs,

42184
00:09:03,630 --> 00:09:14,340
so using that HTTP request language, and also to use a specific pattern of routes and endpoint URLs.

42185
00:09:15,120 --> 00:09:22,070
And these two things are probably the most important parts of making your API restful.

42186
00:09:22,080 --> 00:09:24,190
And we're going to look at each of them in detail.

42187
00:09:24,540 --> 00:09:28,450
So first, what exactly are the HTTP verbs?

42188
00:09:28,470 --> 00:09:30,160
Well, you've already seen some of them.

42189
00:09:30,630 --> 00:09:40,020
First is GET, then is POST, PUT, and PATCH. PATCH came relatively recently in 2010 and it was added

42190
00:09:40,020 --> 00:09:44,610
to the HTTP request language essentially very recently.

42191
00:09:44,640 --> 00:09:48,270
But it's kind of a neat twist on how we update data

42192
00:09:48,270 --> 00:09:50,160
and we're going to look at that in a little bit as well.

42193
00:09:50,580 --> 00:09:52,020
And finally, you've got DELETE.

42194
00:09:52,200 --> 00:09:59,010
So these are the five HTTP verbs that you should be using in order to make your API RESTful.

42195
00:09:59,310 --> 00:09:59,820
And you

42196
00:10:00,070 --> 00:10:07,650
might realize that they have a lot of similarities to something that we covered previously in the database

42197
00:10:07,650 --> 00:10:11,250
module, which is when we looked into CRUD, right?

42198
00:10:11,250 --> 00:10:13,620
Create, read, update and delete.

42199
00:10:14,370 --> 00:10:23,880
So we're going to look at our REST HTTP request verbs alongside our database CRUD functions and we're

42200
00:10:23,880 --> 00:10:27,870
going to see how each of these verbs work in practice.

42201
00:10:28,290 --> 00:10:35,640
So now that we've looked at the HTTP request verbs and we can see how they're used, the next thing

42202
00:10:35,640 --> 00:10:42,330
to talk about is the specific pattern of routes and endpoints that you have to use in order to make

42203
00:10:42,330 --> 00:10:43,720
your API RESTful.

42204
00:10:44,070 --> 00:10:49,830
So just as when you go on a safari, there are different routes that you would use to reach say

42205
00:10:49,830 --> 00:10:53,390
the elephant area or the camels or the hippos, in our server

42206
00:10:53,670 --> 00:11:00,150
we can specify specific routes or URL's in order to access certain resources.

42207
00:11:00,510 --> 00:11:07,470
So you might have, you know, www.google.com/elephants, then that would bring up all

42208
00:11:07,470 --> 00:11:12,020
of the elephants and /camels would be for the camels and hippos.

42209
00:11:12,240 --> 00:11:18,390
So these are routes and we've already used routes before in our server code.

42210
00:11:18,630 --> 00:11:25,260
But in order for our API to be RESTful, we have to have a specific pattern of endpoints and routes.

42211
00:11:25,440 --> 00:11:30,410
So, for example, if our API was the Wikipedia API, right?

42212
00:11:30,600 --> 00:11:34,440
And in our database, we had a whole bunch of articles.

42213
00:11:34,740 --> 00:11:40,780
Now the route for /articles applies to all of the articles.

42214
00:11:40,950 --> 00:11:48,570
Now, if we created a route for articles, then when a client makes a get request to /articles,

42215
00:11:48,780 --> 00:11:51,030
it should fetch all of the articles.

42216
00:11:51,570 --> 00:11:58,290
And when they make a post request to the /articles route, then it should create a single

42217
00:11:58,290 --> 00:11:59,490
new article

42218
00:12:01,030 --> 00:12:08,680
and add it to our database of articles. And when we make a delete request to /articles, then it

42219
00:12:08,680 --> 00:12:12,100
would delete all the articles in our database.

42220
00:12:12,340 --> 00:12:17,440
But RESTful routing also has rules for individual resources.

42221
00:12:17,650 --> 00:12:21,730
So within all of the articles, we will have specific articles,

42222
00:12:21,730 --> 00:12:21,980
right?

42223
00:12:22,180 --> 00:12:24,490
Say we had an article on Jack Bauer,

42224
00:12:24,730 --> 00:12:32,530
then if the client was targeting /articles/Jack-Bauer, then if they made a get request,

42225
00:12:32,620 --> 00:12:37,750
that would fetch the specific article on Jack Bauer from our database.

42226
00:12:38,080 --> 00:12:44,590
And you can also use put and patch to update that specific article on Jack Bauer

42227
00:12:44,800 --> 00:12:47,420
and you can delete the specific article as well.

42228
00:12:47,590 --> 00:12:53,440
Now, a little bit later on, when we create all of these routes using the HTTP verbs, it's going to

42229
00:12:53,440 --> 00:12:56,190
be a lot more clear how each of these work.

42230
00:12:56,380 --> 00:13:02,230
But for now, I just want you to get an overview of what RESTful routing actually looks like before

42231
00:13:02,230 --> 00:13:03,040
we get started.

42232
00:13:03,370 --> 00:13:11,980
So now that we've seen how HTTP request verbs work and the pattern of routes that make your API RESTful,

42233
00:13:12,370 --> 00:13:18,030
the next step is to get started and actually build our very own API.

42234
00:13:18,550 --> 00:13:22,030
So for all of that and more, I'll see you on the next lesson.


42235
00:00:00,210 --> 00:00:02,730
So what is the difference between put and patch?

42236
00:00:03,300 --> 00:00:04,870
Well, here's a good analogy.

42237
00:00:05,070 --> 00:00:10,410
Recently I went onto Amazon and I found a really nice looking bicycle.

42238
00:00:10,770 --> 00:00:17,070
And because I really wanted to poison my lungs by exercising around London, I clicked on the Buy Now

42239
00:00:17,070 --> 00:00:17,530
button.

42240
00:00:17,730 --> 00:00:23,040
So there I was, super happy, super excited for my bicycle to arrive.

42241
00:00:23,310 --> 00:00:29,880
And then on the day of arrival, I opened up that box and my bicycle was really messed up.

42242
00:00:29,880 --> 00:00:31,640
The whole front wheel was broken.

42243
00:00:31,950 --> 00:00:37,860
So I'm not really sure what happened at the Amazon warehouse, but I got in touch with them and I wanted

42244
00:00:37,860 --> 00:00:40,200
to try and figure out how we can solve this problem.

42245
00:00:40,410 --> 00:00:43,350
So there were two ways that they could fix this problem.

42246
00:00:43,560 --> 00:00:47,760
Option one was they send me an entire new bike.

42247
00:00:47,940 --> 00:00:55,860
So this is the equivalent of put. You're updating your database by sending an entire entry to replace

42248
00:00:55,860 --> 00:00:56,760
the previous one.

42249
00:00:57,570 --> 00:01:03,650
Now, the other option Amazon offered was for them to simply send me a new tire.

42250
00:01:03,840 --> 00:01:05,760
That was the only thing that was broken,

42251
00:01:06,030 --> 00:01:07,530
the rest of the bike was fine.

42252
00:01:07,770 --> 00:01:13,890
And in order to save the world from carbon emissions, shipping a wheel is much better than shipping

42253
00:01:13,890 --> 00:01:15,410
an entire bicycle.

42254
00:01:15,930 --> 00:01:18,120
And this is the same as Patch.

42255
00:01:18,360 --> 00:01:25,920
So when you're sending a patch request to the server, you're only sending the piece of data that needs

42256
00:01:25,920 --> 00:01:30,950
to be updated. Instead of the entire entry that will be replaced,

42257
00:01:31,170 --> 00:01:34,870
you're simply just updating the thing that needs to be updated.

42258
00:01:34,890 --> 00:01:41,530
So when we see this in practice, I want you to think back to this bicycle analogy and maybe it'll help you try

42259
00:01:41,530 --> 00:01:44,010
and understand the difference between these two words.




42260
00:00:00,300 --> 00:00:03,390
All right, guys, welcome to a brand new module.

42261
00:00:03,420 --> 00:00:08,640
And in this module, we're going to tackle the topic of authentication.

42262
00:00:09,030 --> 00:00:15,290
And it's something that is often thought of as incredibly complicated, but it doesn't have to be.

42263
00:00:15,330 --> 00:00:21,750
And we're going to take it step by step from beginning to end so that you get an overview of the entire

42264
00:00:21,750 --> 00:00:24,510
process of setting up authentication from scratch.

42265
00:00:25,230 --> 00:00:27,610
So why do we need to authenticate?

42266
00:00:28,110 --> 00:00:35,730
Well, as we're creating our website or web app for users to use, then these users are going to start

42267
00:00:35,730 --> 00:00:38,430
generating data in the website.

42268
00:00:38,730 --> 00:00:40,710
They might like certain posts,

42269
00:00:40,920 --> 00:00:43,080
they might interact with other users,

42270
00:00:43,230 --> 00:00:46,880
there might be messages created or recipes created.

42271
00:00:46,920 --> 00:00:49,860
There's always going to be some user data created.

42272
00:00:50,400 --> 00:00:57,150
And in order to associate those pieces of data with individual users, we need to create an account

42273
00:00:57,150 --> 00:01:02,610
for each user. So that they would sign up to our website using a username and a password

42274
00:01:02,910 --> 00:01:09,450
and we would essentially create kind of like an ID card for them to uniquely identify them on our database

42275
00:01:09,750 --> 00:01:14,520
and to save all of the data that they generate onto that account.

42276
00:01:15,060 --> 00:01:20,670
So the next time that they come back onto the website, they'll be able to use their username and password

42277
00:01:21,000 --> 00:01:28,110
and log in to our website and be able to access all of those possibly private pieces of information.

42278
00:01:28,470 --> 00:01:33,510
So this way, you don't end up with everybody being able to see, you know, what private messages you're

42279
00:01:33,510 --> 00:01:37,280
sending around on Facebook or see your direct messages on Twitter.

42280
00:01:37,650 --> 00:01:39,030
So that's pretty simple.

42281
00:01:39,270 --> 00:01:45,420
Now, the other reason why you might want to add authentication to your website is to restrict access

42282
00:01:45,630 --> 00:01:49,770
to certain areas of the website depending on the status of the user.

42283
00:01:50,040 --> 00:01:57,570
So, for example, if you were Spotify or Netflix and you charge a subscription for accessing certain

42284
00:01:57,570 --> 00:02:03,210
parts of the website, then once the user pays, you have to update their account in your database to

42285
00:02:03,210 --> 00:02:09,930
say that they have paid and they'll be allowed to access the TV shows or songs that they're entitled

42286
00:02:09,930 --> 00:02:10,229
to.

42287
00:02:10,770 --> 00:02:16,550
So those are some of the reasons why you might want to add authentication to your website.

42288
00:02:16,860 --> 00:02:21,030
But authentication can be done in a number of ways.

42289
00:02:21,030 --> 00:02:27,690
Creating a website where we sign up and log in users seems simple enough, but the difficult part of

42290
00:02:27,690 --> 00:02:32,750
authentication comes from how secure you're going to make your website.

42291
00:02:32,840 --> 00:02:38,100
But so we're going to learn how to progress from essentially a website that's basically secured with

42292
00:02:38,100 --> 00:02:45,210
a Cheeto to something that is a lot more serious and more consistent with industry standards of good

42293
00:02:45,210 --> 00:02:46,810
security on a website.

42294
00:02:47,160 --> 00:02:50,600
So the structure of our website is really, really simple.

42295
00:02:51,000 --> 00:02:59,760
It has a homepage which has two buttons that allows you to either go towards register or go towards

42296
00:02:59,760 --> 00:03:00,300
login.

42297
00:03:00,480 --> 00:03:06,120
And once the user has been registered or logged in and they have been authenticated, then they are

42298
00:03:06,150 --> 00:03:08,630
able to access the secrets page.

42299
00:03:09,150 --> 00:03:15,090
So I've kept the remainder of the website pretty simple because we're going to be focusing on a pretty

42300
00:03:15,090 --> 00:03:16,130
complex topic.

42301
00:03:16,230 --> 00:03:23,010
So I've created some starting files for you to download so that we can focus our efforts on learning

42302
00:03:23,010 --> 00:03:27,160
authentication and not get distracted by things like bootstrap and styling.

42303
00:03:27,600 --> 00:03:33,750
So once you're ready, head over to the next lesson and download the starting files, and then we're going

42304
00:03:33,750 --> 00:03:35,940
to get started with authentication.

42305
00:03:36,270 --> 00:03:37,350
So I'll see you there.


42306
00:00:01,230 --> 00:00:08,640
All right, so we've taken a look at level one encryption, which is basically just storing the password

42307
00:00:08,640 --> 00:00:11,220
as plain text in our database.

42308
00:00:11,370 --> 00:00:18,770
So maybe it'll be a little bit difficult for people to get access to our server and access our database.

42309
00:00:18,810 --> 00:00:20,160
At least you can't just simply

42310
00:00:20,160 --> 00:00:20,490
right-

42311
00:00:20,490 --> 00:00:25,690
click on a website to view page source and be able to see it in the HTML.

42312
00:00:25,710 --> 00:00:30,140
At least it's stored at server level. But that's not really good enough.

42313
00:00:30,150 --> 00:00:37,150
So let's go ahead and see what we can do to improve the security for our users on our website.

42314
00:00:37,470 --> 00:00:47,710
So let's increase to level two authentication. And level two authentication involves the use of encryption.

42315
00:00:48,480 --> 00:00:50,520
So what exactly is encryption?

42316
00:00:50,550 --> 00:00:57,900
Well, basically all it is is just scrambling something so that people can't tell what the original

42317
00:00:57,900 --> 00:01:02,890
was unless they were in on the secret and they knew how to unscramble it.

42318
00:01:03,240 --> 00:01:08,610
This is exactly the same as if you and your friend were sending each other secret messages and you had

42319
00:01:08,610 --> 00:01:14,010
a key to encode the message that you both knew that so that you could decode the message.

42320
00:01:14,970 --> 00:01:21,480
Now, on a bigger scale, if you've ever watched The Imitation Game or read about the Enigma machine,

42321
00:01:21,690 --> 00:01:24,750
well, that is basically a form of encryption.

42322
00:01:25,230 --> 00:01:31,320
And the Enigma machine, if you don't know, is just simply a machine that was used during World War

42323
00:01:31,320 --> 00:01:34,890
2 when the Germans would send each other messages,

42324
00:01:35,100 --> 00:01:41,280
they would use the machine to encrypt those messages so that when the messages are intercepted, say,

42325
00:01:41,280 --> 00:01:50,220
over the radio, unless you had the same Enigma machine and you knew what the decoding key was or what

42326
00:01:50,220 --> 00:01:54,660
the settings were for the machine, then you wouldn't be able to tell what it is that they were trying

42327
00:01:54,660 --> 00:01:56,000
to communicate with each other.

42328
00:01:56,310 --> 00:02:03,660
If you're interested, I really recommend watching two videos that were done by Numberphile on YouTube and

42329
00:02:03,660 --> 00:02:06,210
I've linked to it in the course resources list.

42330
00:02:06,540 --> 00:02:14,310
But it explains the Enigma machine and it talks about the flaw in the Enigma machine that led Alan Turing

42331
00:02:14,310 --> 00:02:20,760
and other people at Bletchley Park to be able to crack the code and create what was very much a specialized

42332
00:02:20,760 --> 00:02:25,920
computer to be able to decode those messages and helped the allies win the war.

42333
00:02:26,310 --> 00:02:32,010
And if you ever visit London, be sure to go and check out Bletchley Park and they have a computer museum

42334
00:02:32,010 --> 00:02:34,230
next to it as well, which is super fascinating.

42335
00:02:34,740 --> 00:02:36,020
Anyways, I digress.

42336
00:02:36,030 --> 00:02:36,810
So back to

42337
00:02:36,810 --> 00:02:43,590
ciphers and encryption, one of the earliest ways of encrypting messages that we know about is the Caesar

42338
00:02:43,590 --> 00:02:44,120
cipher.

42339
00:02:44,610 --> 00:02:50,850
And this comes from Julius Caesar, who was one of the generals in the Roman Empire.

42340
00:02:51,000 --> 00:02:57,770
And what he did is he would send messages to his generals and he would encrypt it

42341
00:02:58,020 --> 00:03:03,330
so if his messenger got murdered along the way, then his messages would be kept secret.

42342
00:03:03,990 --> 00:03:09,090
And this is one of the simplest forms of encryption we know about

42343
00:03:09,360 --> 00:03:10,550
and it's very simple.

42344
00:03:10,560 --> 00:03:16,080
Let's say we have the alphabet, right? ABCDEFG. All that the Caesar Cipher does

42345
00:03:16,080 --> 00:03:18,540
is a letter substitution cipher.

42346
00:03:18,660 --> 00:03:24,820
And the key for the cipher is the number of letters that you would shift by.

42347
00:03:24,870 --> 00:03:31,900
So if you knew what the shift pattern was, then you could really quickly decipher the message.

42348
00:03:32,340 --> 00:03:38,210
So if we were to encrypt the word hello, there's a really neat tool online that can help us do that.

42349
00:03:38,220 --> 00:03:41,850
It's called cryptii.com and it's got two 'i's at the end.

42350
00:03:42,300 --> 00:03:47,760
And you can basically choose the kind of cipher or encryption that you want to use

42351
00:03:48,120 --> 00:03:52,550
and then you can specify the shift and we're going to say a shift of three, let's say.

42352
00:03:52,800 --> 00:04:00,930
So if my text was hello, then it becomes shifted into khoor. And to an unknowing person and a non-cryptographer,

42353
00:04:01,200 --> 00:04:07,950
it can be quite difficult to see at a glance what exactly this is trying to say. Now in modern days and

42354
00:04:07,950 --> 00:04:14,010
with modern cryptography, this is overly simplistic and it's very, very easy to crack.

42355
00:04:14,460 --> 00:04:20,550
But there are other forms of encryption which are a little bit more complicated and it involves a lot

42356
00:04:20,550 --> 00:04:25,380
more math to make it more time consuming for somebody to crack.

42357
00:04:25,770 --> 00:04:29,760
But essentially all encryption works exactly the same way.

42358
00:04:30,150 --> 00:04:38,730
You have a way of scrambling your message and it requires a key to be able to unscramble that message.

42359
00:04:39,450 --> 00:04:39,930
All right.

42360
00:04:39,930 --> 00:04:44,520
So now it's time to level up to the next level of security.

42361
00:04:44,760 --> 00:04:48,630
And in this lesson, we're going to cover something called hashing.

42362
00:04:49,620 --> 00:04:56,910
Now, previously, we've already looked at encryption, so taking the user's password and securing it

42363
00:04:56,910 --> 00:05:00,120
using an encryption key, and then 

42364
00:05:00,140 --> 00:05:06,560
using a particular cipher method, be it a Caesar cipher or the Enigma cipher, no matter which way

42365
00:05:06,560 --> 00:05:12,440
we chose, we always had a password, a key, and we ended up with some ciphertext which will make it

42366
00:05:12,440 --> 00:05:16,940
hard for people to be able to immediately guess what our user's password is.

42367
00:05:17,120 --> 00:05:23,390
So, for example, if we took a password like qwerty and we use the Caesar cipher method and we decided to

42368
00:05:23,390 --> 00:05:27,440
shift it by one, then our encryption key is the number one.

42369
00:05:27,860 --> 00:05:32,880
And that creates the ciphertext where every single letter is shifted up by one.

42370
00:05:33,350 --> 00:05:39,110
Now, in order to decrypt this, all you have to do, as long as you know what the key is, then you

42371
00:05:39,110 --> 00:05:45,980
can simply shift all of the ciphertext down by one and you end up with the original password.

42372
00:05:46,340 --> 00:05:51,650
Now, the Caesar cipher is a very, very weak encryption method.

42373
00:05:51,650 --> 00:05:58,310
It's incredibly easy to figure out what the original text was, even if you didn't have a key.

42374
00:05:58,880 --> 00:06:04,790
And just to illustrate what bad things can happen when you have a weak encryption system, I'm going

42375
00:06:04,790 --> 00:06:11,110
to tell you a story from history that tells us why we should not be using a weak encryption system.

42376
00:06:11,690 --> 00:06:18,770
So back in the 1500's on this island that we now call the United Kingdom, there used to be two large

42377
00:06:18,770 --> 00:06:19,400
areas.

42378
00:06:19,670 --> 00:06:23,810
One was Scotland and the other was England.

42379
00:06:24,320 --> 00:06:27,080
And they were ruled over by two Queens.

42380
00:06:27,380 --> 00:06:33,860
Scotland was ruled by Mary Queen of Scots, who was a Catholic, and England was ruled over by Queen

42381
00:06:33,860 --> 00:06:35,210
Elizabeth the first.

42382
00:06:35,630 --> 00:06:41,330
Now, these two ladies between them controlled the land that we now call the UK, but they each wanted

42383
00:06:41,330 --> 00:06:43,790
to have more power and more land.

42384
00:06:44,300 --> 00:06:45,990
So what did they do?

42385
00:06:46,010 --> 00:06:53,870
Well, Mary Queen of Scots who ruled over Scotland decided to plot with her friend, Lord Babington,

42386
00:06:54,200 --> 00:06:56,800
to try and assassinate Queen Elizabeth.

42387
00:06:57,260 --> 00:07:02,720
That way, she would be the legitimate heir to both the English and Scottish throne,

42388
00:07:03,050 --> 00:07:06,920
and it was kind of a Game of Thrones kind of situation going on back then.

42389
00:07:07,460 --> 00:07:13,910
But in order to mobilize their forces or try to come up with some sort of secret plan, they decided

42390
00:07:13,910 --> 00:07:17,800
to send letters to each other using ciphertext.

42391
00:07:18,020 --> 00:07:25,850
So they came up with a system to encrypt their letters to each other such that if it fell into the wrong

42392
00:07:25,850 --> 00:07:32,800
hands, the subject of the letter wouldn't be revealed and they wouldn't end up being tried for treason.

42393
00:07:32,990 --> 00:07:39,260
But the problem was that the encryption method that they used, which was a letter substitution method

42394
00:07:39,410 --> 00:07:44,510
similar to the Caesar cipher, was a very weak form of encryption.

42395
00:07:45,110 --> 00:07:54,230
And Queen Elizabeth had a chief decoder who ended up deciphering their letters and figuring out what

42396
00:07:54,230 --> 00:07:56,220
their encryption key was.

42397
00:07:56,420 --> 00:08:04,400
So he decided to take this encryption key and write a letter back to Lord Babington to try and get him

42398
00:08:04,400 --> 00:08:07,490
to reveal all of the co-conspirators.

42399
00:08:07,880 --> 00:08:11,330
And what was the end result of having their weak encryption system?

42400
00:08:11,720 --> 00:08:19,250
Well, Queen Elizabeth decided to accuse Mary Queen of Scots of treason, and hence she ended up having

42401
00:08:19,250 --> 00:08:20,360
her head chopped off.

42402
00:08:20,750 --> 00:08:25,420
So this is not what you want to happen to you or your website.

42403
00:08:25,940 --> 00:08:33,320
So weak encryption systems can end up putting user passwords at risk and your company might end up metaphorically

42404
00:08:33,320 --> 00:08:39,230
decapitated, such as in the case of companies like TalkTalk or Equifax, where they ended up getting

42405
00:08:39,230 --> 00:08:42,200
hacked and lost a lot of the trust of their users.

42406
00:08:42,440 --> 00:08:48,410
Now, if you're interested in more stories like this and to learn more about cryptography and encryption,

42407
00:08:48,590 --> 00:08:52,820
there's a really great book recommendation I would make called The Code Book by Simon Singh.

42408
00:08:53,000 --> 00:08:56,480
It contains stories like the one that I just told you and more.

42409
00:08:56,540 --> 00:08:59,380
So if you're interested in this, go ahead and read more about it.

42410
00:08:59,720 --> 00:09:03,500
Now, how can we make our password more secure Now,

42411
00:09:03,530 --> 00:09:09,920
at the moment, the biggest flaw in our authentication method is the fact that we need an encryption

42412
00:09:09,920 --> 00:09:14,450
key to encrypt our passwords and decrypt our passwords.

42413
00:09:14,870 --> 00:09:22,040
And chances are that if somebody is motivated enough to spend time and hack into your database, then

42414
00:09:22,040 --> 00:09:29,150
it's probably not that difficult for them to also be able to get your encryption key, even if you've

42415
00:09:29,150 --> 00:09:33,480
saved it in environment variable or somewhere secure on your server.

42416
00:09:33,950 --> 00:09:38,880
So how can we address this weakest link, the need for that encryption key?

42417
00:09:39,140 --> 00:09:45,380
Well, here is where hashing comes into play. Whereas previously with encryption we needed that encryption

42418
00:09:45,380 --> 00:09:52,560
key, hashing takes it away and no longer requires the need for an encryption key.

42419
00:09:53,180 --> 00:09:59,450
Well, then you might ask, well, if we don't have an encryption key, how can we decrypt our password

42420
00:09:59,450 --> 00:09:59,990
back into

42421
00:10:00,060 --> 00:10:08,520
plain text? Well, the secret is you don't. Let's say a user registers on our website and they enter

42422
00:10:08,520 --> 00:10:16,560
a password to register with, we use something called a hash function to turn that password into a hash

42423
00:10:16,560 --> 00:10:19,500
and we store that hash in our database.

42424
00:10:20,160 --> 00:10:29,700
Now, the problem is that hash functions are mathematical equations that are designed to make it almost

42425
00:10:29,700 --> 00:10:32,280
impossible to go backwards.

42426
00:10:32,560 --> 00:10:38,910
So it's almost impossible to turn a hash back into a password.

42427
00:10:39,150 --> 00:10:41,130
How is this possible, you might ask?

42428
00:10:41,160 --> 00:10:48,690
How is it possible that you can turn a password into a hash very quickly and easily, but make it almost

42429
00:10:48,690 --> 00:10:52,080
impossible to turn that hash back into a password?

42430
00:10:52,800 --> 00:10:53,880
Well, here's a question.

42431
00:10:54,600 --> 00:11:01,710
Let me ask you, what are the factors of 377 other than one and 377?

42432
00:11:02,040 --> 00:11:05,650
So basically, I'm saying 377 is not a prime number.

42433
00:11:06,090 --> 00:11:14,490
Not only can you divide 377 by 1 and 377, but there's also two other numbers that you

42434
00:11:14,490 --> 00:11:15,450
can divide it by.

42435
00:11:15,870 --> 00:11:19,260
Now it's your job to figure out what those numbers are.

42436
00:11:20,130 --> 00:11:21,420
So, what might you do?

42437
00:11:21,450 --> 00:11:23,130
Well, you might divide it by two.

42438
00:11:23,490 --> 00:11:26,090
OK, so that becomes 188.5.

42439
00:11:26,130 --> 00:11:27,300
That's not a whole number

42440
00:11:27,300 --> 00:11:28,880
so 2 is not a factor.

42441
00:11:29,280 --> 00:11:30,610
What if you divide it by three?

42442
00:11:30,630 --> 00:11:36,290
Well, that becomes 113.3 recurring, which is also not a whole number.

42443
00:11:36,450 --> 00:11:38,870
So three is not a factor either.

42444
00:11:39,180 --> 00:11:45,940
And you might go through this process for a long time, tediously going through number by number.

42445
00:11:45,990 --> 00:11:53,010
Well, then you might arrive at the point where you divide 377 by 13 and you end up with

42446
00:11:53,010 --> 00:11:53,680
29.

42447
00:11:54,060 --> 00:12:04,140
So 13 and 29 are the answers to this question. They are the only factors of 377 other than 1 and

42448
00:12:04,140 --> 00:12:05,000
377.

42449
00:12:05,640 --> 00:12:12,750
And as you can see, that process of getting to this point of finding those two factors took us a while,

42450
00:12:12,750 --> 00:12:13,130
right?

42451
00:12:13,140 --> 00:12:14,400
It wasn't that easy.

42452
00:12:14,910 --> 00:12:17,400
But consider if I asked you a different question.

42453
00:12:17,400 --> 00:12:20,990
If I said to you, can you multiply 13 by 29?

42454
00:12:21,330 --> 00:12:24,900
Well, you would be able to do that really quickly and easily.

42455
00:12:24,900 --> 00:12:30,050
It would take you almost no time at all to figure out that the answer is 377.

42456
00:12:30,870 --> 00:12:36,880
So here is a very, very simplified version of a hash function.

42457
00:12:37,350 --> 00:12:44,790
So going forward, multiplying 13 by 29 is really quick and easy, but going backward, trying

42458
00:12:44,790 --> 00:12:46,440
to get back those numbers

42459
00:12:46,440 --> 00:12:52,360
13 and 29 starting from 377 is very, very time consuming.

42460
00:12:52,770 --> 00:12:56,120
So this is essentially how a hash function works.

42461
00:12:56,520 --> 00:13:01,340
Just add a little bit more complexity and you end up with a real hash function.

42462
00:13:01,590 --> 00:13:09,360
So they're designed to be calculated very quickly going forwards, but almost impossible to go backward.

42463
00:13:09,360 --> 00:13:10,860
And by almost impossible

42464
00:13:11,100 --> 00:13:19,110
I simply mean that using current levels of computing power, it would take far too long to make it worthwhile

42465
00:13:19,110 --> 00:13:19,810
for the hacker.

42466
00:13:20,130 --> 00:13:26,880
So let's say that to calculate the hash going forward, it takes a millisecond, but to go backward

42467
00:13:26,880 --> 00:13:31,800
it takes two years, then that hacker probably has better things to do with his time.

42468
00:13:31,980 --> 00:13:38,700
So when a user tries to register on our website, then we ask them for the registration password, which

42469
00:13:38,700 --> 00:13:44,720
we turn into a hash using our hash function, and then we store that hash on our database.

42470
00:13:45,210 --> 00:13:52,020
Now, at a later point when the user tries to log in and they type in their password, then we again

42471
00:13:52,110 --> 00:14:00,330
hash that password that they typed in to produce a hash and then we compare it against the hash that

42472
00:14:00,330 --> 00:14:02,570
we have stored in our database.

42473
00:14:03,060 --> 00:14:10,170
And if those two hashes match, then that must mean that the login password is the same as the registration

42474
00:14:10,170 --> 00:14:11,100
password as well.

42475
00:14:11,400 --> 00:14:18,810
And at no point in this process do we have to store their password in plain text or are we able to reverse

42476
00:14:18,810 --> 00:14:22,350
the process to figure out their original password?

42477
00:14:22,710 --> 00:14:26,480
The only person who knows their password is the user themselves.

42478
00:14:26,760 --> 00:14:35,400
Now, previously we saw that by using the Enigma machine, as long as we knew what the settings were

42479
00:14:35,400 --> 00:14:39,030
for the Enigma machine, which is basically the encryption key,

42480
00:14:39,030 --> 00:14:39,360
right?

42481
00:14:39,690 --> 00:14:46,800
As long as we knew what that was, then I can decode it by setting it to the same encryption key.

42482
00:14:48,270 --> 00:14:55,920
And we end up being able to retrieve the original text. Now, however, if I was to go and change this

42483
00:14:56,130 --> 00:15:04,860
to a hash function instead, then you can see that when we try to decode this using the same hash function,

42484
00:15:04,860 --> 00:15:06,900
MD5, we get the error

42485
00:15:06,900 --> 00:15:12,210
that decoding step is not defined for hash function because you can't really go back.

42486
00:15:12,570 --> 00:15:19,310
That's the whole point of the hash function and this is what will make our authentication more secure.


42487
00:00:00,210 --> 00:00:00,850
All right, guys.

42488
00:00:00,900 --> 00:00:08,340
So now that we've covered creating user passwords, encrypting our database, as well as hashing passwords,

42489
00:00:08,730 --> 00:00:14,550
we've kind of reached a level of security that most websites are at.

42490
00:00:14,790 --> 00:00:19,170
Now, there's a lot more security that we're going to learn about a little bit later on.

42491
00:00:19,710 --> 00:00:25,860
But you're actually at a point where you already know quite a lot about authentication and keeping user

42492
00:00:25,860 --> 00:00:31,950
passwords secure, and definitely a lot more than a lot of people who actually run websites.

42493
00:00:32,220 --> 00:00:35,720
And I know that some of you guys are keen to get a job.

42494
00:00:35,730 --> 00:00:41,520
And if that is you, then I want you to go onto a website called plaintextoffenders.com. I'll

42495
00:00:41,520 --> 00:00:43,280
link to it in the course resources.

42496
00:00:43,560 --> 00:00:50,880
But here what you'll find is emails that come from various companies where the users requested to reset

42497
00:00:50,880 --> 00:00:57,400
their password and they're sending the user a plain text version of their password.

42498
00:00:57,690 --> 00:01:03,840
Now, at this point, we know to be able to even get the user's password in plain text, it means that

42499
00:01:03,840 --> 00:01:07,830
they're doing some horrible things with securing the passwords.

42500
00:01:08,040 --> 00:01:13,920
Either it's encrypted and there's an encryption key somewhere that they're storing or it's simply just

42501
00:01:13,920 --> 00:01:18,520
stored on their database as plain text, which is the worst possible type of security.

42502
00:01:18,840 --> 00:01:27,030
So given that you already know a lot better than the people who run getlinuxjobs.com or world

42503
00:01:27,030 --> 00:01:34,890
sim.com or Telecom Egypt, then you could actually just email these people and tell them that I'm

42504
00:01:34,890 --> 00:01:39,650
a web developer and I know about authentication and securing users passwords.

42505
00:01:39,660 --> 00:01:41,940
You obviously seem like you might need some help.

42506
00:01:42,210 --> 00:01:43,640
Would you like me to work for you?

42507
00:01:44,010 --> 00:01:45,990
I recommend giving that a go too

42508
00:01:46,020 --> 00:01:50,790
if you're keen on getting a job. If you're not looking for a job, then have a look at these websites.

42509
00:01:50,910 --> 00:01:55,410
And if you're signed up to any of them, be sure to delete your account because it's definitely not

42510
00:01:55,410 --> 00:01:55,910
secure.

42511
00:01:56,070 --> 00:02:03,120
And this is why a lot of companies and a lot of websites get hacked because they don't continue beyond

42512
00:02:03,120 --> 00:02:03,690
this point.

42513
00:02:04,050 --> 00:02:09,509
So that means it's a really good time to talk to you about how passwords are hacked,

42514
00:02:09,690 --> 00:02:13,530
so a sort of hacking Passwords 101 class if you will.

42515
00:02:13,830 --> 00:02:16,740
Now, most of the time, I use my programming powers for good.

42516
00:02:17,070 --> 00:02:23,100
But in this case, I want to talk to you about how passwords might be hacked so that once we understand

42517
00:02:23,190 --> 00:02:29,700
how the other side approaches this problem, then we can learn more about security and make our website

42518
00:02:29,710 --> 00:02:30,780
safer for users.

42519
00:02:31,200 --> 00:02:36,230
And by the way, I have no idea why hackers are always portrayed in a balaclava.

42520
00:02:36,240 --> 00:02:38,760
It's not like they're going to burgle anybody.

42521
00:02:39,030 --> 00:02:44,580
I mean, especially this guy, he must be incredibly warm sitting next to all these computers, wearing

42522
00:02:44,580 --> 00:02:46,470
so much clothing on his face.

42523
00:02:47,130 --> 00:02:48,220
But I digress.

42524
00:02:48,600 --> 00:02:55,320
So as a company, this is probably one of the things that you least look forward to. The day when you

42525
00:02:55,320 --> 00:02:59,160
wake up and you get a call and you've been hacked.

42526
00:02:59,460 --> 00:03:06,300
And this has happened really recently to a lot of big companies like Adobe Creative Cloud got hacked

42527
00:03:06,300 --> 00:03:09,510
in 2013, LinkedIn got hacked in 2012.

42528
00:03:09,810 --> 00:03:14,150
And there's loads of accounts where their passwords get leaked.

42529
00:03:14,430 --> 00:03:21,320
Lots of unhappy users who reuse their passwords and are feeling extremely vulnerable.

42530
00:03:21,690 --> 00:03:27,360
And you can see that even to this day, people can purchase these hacked accounts where people might

42531
00:03:27,360 --> 00:03:34,200
not have realized that their LinkedIn email and their passwords are linked and people are potentially

42532
00:03:34,200 --> 00:03:40,580
buying that data up and using it to hack into their PayPal accounts or other similar payment portals.

42533
00:03:40,860 --> 00:03:48,450
So even if you don't learn anything from this lesson, I recommend just going to this website. I'll link

42534
00:03:48,450 --> 00:03:52,110
to it in the course resources just for educational purposes.

42535
00:03:52,380 --> 00:03:57,540
But put in your email address and make sure that if you do have any passwords that show up, change

42536
00:03:57,540 --> 00:03:59,360
all the places where you use that password.

42537
00:03:59,520 --> 00:04:05,670
But why is it that all of these big companies are getting hacked and leaking their users passwords?

42538
00:04:05,790 --> 00:04:09,120
Are they not at least encrypting or hashing their passwords?

42539
00:04:09,690 --> 00:04:10,740
Well, they are.

42540
00:04:11,040 --> 00:04:12,150
But consider this.

42541
00:04:12,150 --> 00:04:17,850
So you're a hacker and you've managed to get into the LinkedIn user database.

42542
00:04:18,300 --> 00:04:21,390
And just for simplicity's sake, let's say it looks like this.

42543
00:04:21,390 --> 00:04:23,340
You've got a username and you've got a hash.

42544
00:04:23,700 --> 00:04:29,730
And thankfully, they didn't store their users' passwords in plain text, so you can't access their passwords

42545
00:04:29,730 --> 00:04:30,330
straight away.

42546
00:04:30,900 --> 00:04:39,600
However, if you look at this table a little bit more closely, you will realize that three of the hashes

42547
00:04:39,630 --> 00:04:41,880
are completely identical.

42548
00:04:42,420 --> 00:04:44,400
Now, why might that be?

42549
00:04:44,790 --> 00:04:52,700
Well, remember that the same password always turns into the same hash no matter how often you try it.

42550
00:04:52,710 --> 00:04:59,240
And that's a core part of the hash function that we rely on in order to validate our users as well.

42551
00:05:00,030 --> 00:05:06,870
That means a hacker would look at this table and realize that Angela, Tony, and Emily all have the same

42552
00:05:06,870 --> 00:05:13,190
password, and what they can do is they can start to construct what we call a hash table.

42553
00:05:13,500 --> 00:05:20,100
So you would take some of the most commonly used passwords and you would use the same hash function

42554
00:05:20,400 --> 00:05:23,290
to create the hash value for each of those.

42555
00:05:23,610 --> 00:05:27,810
And these are some of the most common passwords that people love to use.

42556
00:05:27,810 --> 00:05:32,280
123456, qwerty, password, 111111.

42557
00:05:32,290 --> 00:05:41,100
And so you generate this hash table and then all you have to do is just look up the hash of the user

42558
00:05:41,340 --> 00:05:45,120
and compare it against the hash you have in your table.

42559
00:05:45,480 --> 00:05:51,660
So you search by the hash value and you land upon the password, which is qwerty.

42560
00:05:52,080 --> 00:05:59,140
So now you've figured out that three out of four users in this table all have the same password and it's

42561
00:05:59,490 --> 00:05:59,850
qwerty.

42562
00:06:00,150 --> 00:06:06,600
So what if they didn't use one of the most common passwords and instead they use something else, say

42563
00:06:06,810 --> 00:06:09,450
their date of birth or their pet's name?

42564
00:06:09,750 --> 00:06:13,940
Well, let's see how we would make a hash table if we were a hacker.

42565
00:06:14,460 --> 00:06:18,330
You would probably start with all the words from a dictionary,

42566
00:06:18,510 --> 00:06:21,650
and this is where the term dictionary attack comes from.

42567
00:06:21,930 --> 00:06:29,040
You create hashes from all the possible words in a dictionary, and that will only be about 150,000 hashes

42568
00:06:29,040 --> 00:06:30,210
that you would need to create.

42569
00:06:30,450 --> 00:06:36,170
And then you add to that hash table all the numbers from a telephone book and all the combination of

42570
00:06:36,180 --> 00:06:37,950
characters up to six places.

42571
00:06:38,220 --> 00:06:45,840
And then you add all of these together and you end up with something close to 19.8 billion

42572
00:06:45,840 --> 00:06:50,040
combinations, which admittedly sounds like a large number,

42573
00:06:50,040 --> 00:06:50,330
right?

42574
00:06:50,340 --> 00:06:54,300
How long would it take your computer to calculate that

42575
00:06:54,300 --> 00:06:55,170
many hashes?

42576
00:06:55,380 --> 00:06:56,520
So what do we do?

42577
00:06:56,550 --> 00:06:58,080
Well, let's go shopping.

42578
00:06:58,500 --> 00:07:06,990
Let's go and buy some of the latest GPUs or graphics cards which are capable of parallel processing and

42579
00:07:06,990 --> 00:07:14,070
therefore are particularly suited to not only Bitcoin mining, but also generating hashes.

42580
00:07:14,340 --> 00:07:23,090
With one of the latest GPS, you can calculate about 20 billion MD5 hashes per second.

42581
00:07:23,460 --> 00:07:31,170
So that means with our hash table of 19.8 billion combinations, it'll only take one

42582
00:07:31,170 --> 00:07:36,210
of these GPUs 0.9 seconds, which is nothing.

42583
00:07:36,600 --> 00:07:41,520
It's not a lot of time to invest in order to hash so many people's passwords.

42584
00:07:41,820 --> 00:07:48,730
And to make it even worse, large hash tables have been built for the most common passwords.

42585
00:07:49,050 --> 00:07:55,920
So because we've had so much data from previous hacks such as the Adobe one or the LinkedIn one or TalkTalk

42586
00:07:55,920 --> 00:08:00,630
or Equifax, we know what the most common passwords are that people use.

42587
00:08:00,840 --> 00:08:07,770
And every year companies like Splash Data will compile what are the most common passwords, say the

42588
00:08:07,770 --> 00:08:08,910
top 25.

42589
00:08:09,240 --> 00:08:12,990
And this is where all of those values that went into our table came from.

42590
00:08:13,200 --> 00:08:15,800
But you can actually go one step further.

42591
00:08:16,140 --> 00:08:23,790
There are pre-built hash tables that people have created for the top 10,000 most common passwords.

42592
00:08:24,180 --> 00:08:28,620
And you can see that MD5 is one of the quickest hashes to calculate.

42593
00:08:28,860 --> 00:08:34,470
And this is why it's very, very common to find MD5 hash tables.

42594
00:08:34,590 --> 00:08:38,100
And you can even use Google as a basic hash table.

42595
00:08:38,429 --> 00:08:42,150
You can paste in the hash that you found from the hacked database.

42596
00:08:42,150 --> 00:08:47,500
You perform a simple Google search and you come up with the original password.

42597
00:08:48,240 --> 00:08:53,580
Now, if at this point you're extremely scared and you're wondering, well, what exactly can you do

42598
00:08:53,580 --> 00:08:54,270
about this?

42599
00:08:54,330 --> 00:09:01,680
Well, consider that in our user table, there was one hash that was extremely difficult to find and

42600
00:09:01,680 --> 00:09:06,940
it didn't match up with any of the hashes in this little simple hash table we built.

42601
00:09:07,140 --> 00:09:14,490
So what if we put that into Google to search on a larger scale and see if it matches any of the hashes

42602
00:09:14,730 --> 00:09:17,340
in the hash tables that people have generated?

42603
00:09:17,880 --> 00:09:20,210
And it doesn't. It doesn't match anything.

42604
00:09:20,490 --> 00:09:27,690
And the reason is because when John created his password, he had a very, very strong password with

42605
00:09:27,690 --> 00:09:34,980
uppercase letters, lowercase letters, numbers, symbols, but most importantly, a long password.

42606
00:09:35,220 --> 00:09:42,510
When you think about hashing as a mathematical formula, you'll realize that as the number of characters

42607
00:09:42,540 --> 00:09:50,130
of your password increases, the computation time that it takes to crack it increases exponentially.

42608
00:09:50,290 --> 00:09:57,300
So it doesn't matter if your account on LinkedIn or Adobe  Creative Cloud or Ashley Madison was cracked,

42609
00:09:57,570 --> 00:09:59,520
as long as you had a

42610
00:09:59,820 --> 00:10:06,300
strong password, they wouldn't be able to work it out from a hash table. So as an example, there's

42611
00:10:06,300 --> 00:10:12,330
a website called Password Checker and you can put in your password and it'll tell you not only the strength,

42612
00:10:12,600 --> 00:10:18,960
but also how long it will take various types of machines to be able to crack that password.

42613
00:10:19,170 --> 00:10:24,660
So let's say that I create a six-character password composed of a random set of characters,

42614
00:10:24,660 --> 00:10:27,810
right? 123456.

42615
00:10:28,320 --> 00:10:35,460
And you can see that even for a standard desktop PC, it only takes about three seconds to perform a

42616
00:10:35,460 --> 00:10:38,510
brute force attack to crack that password.

42617
00:10:39,090 --> 00:10:43,500
But let's see what happens if I add another six more characters.

42618
00:10:43,920 --> 00:10:47,220
1, 2, 3, 4, 5, 6.

42619
00:10:48,440 --> 00:10:57,500
Now, it takes 31 years for a standard desktop PC to be able to crack it and even a fast GPU takes two

42620
00:10:57,500 --> 00:10:59,270
years to crack my password.

42621
00:10:59,600 --> 00:11:07,400
So even though all of the websites encourage you to add a capital letter, lowercase letter, some numbers

42622
00:11:07,400 --> 00:11:14,660
and some random characters, if you only have six characters in your password, so a short password,

42623
00:11:14,990 --> 00:11:17,670
it still doesn't take very long to crack.

42624
00:11:18,020 --> 00:11:25,910
So the most important thing of creating a strong password that is almost uncrackable is just to increase

42625
00:11:25,910 --> 00:11:32,460
the number of characters. And also to prevent yourself from being a victim of a dictionary attack,

42626
00:11:32,750 --> 00:11:39,710
just make sure that you don't use a dictionary word or a place name or something that is in a directory

42627
00:11:39,710 --> 00:11:41,480
somewhere like a telephone number.

42628
00:11:41,930 --> 00:11:42,290
All right.

42629
00:11:42,290 --> 00:11:46,180
So at least after this lesson, you'll know how to keep yourself more secure.

42630
00:11:46,580 --> 00:11:52,130
But in the next lesson, we're going to address these vulnerabilities that occur because of weak hashing

42631
00:11:52,130 --> 00:11:52,760
algorithms,

42632
00:11:52,970 --> 00:11:58,790
and we're going to learn how we can combat hackers who try to attack our database using a dictionary

42633
00:11:58,790 --> 00:12:00,950
attack or by creating a hash table.

42634
00:12:01,250 --> 00:12:04,300
So for all of that and more, I'll see you on the next lesson.

42635
00:12:04,460 --> 00:12:09,050
But as a quick bonus, if you ever want to trick your friends into thinking that you're some sort of

42636
00:12:09,050 --> 00:12:14,480
a hacker, at least according to Hollywood, I recommend checking out a website called hackertyper

42637
00:12:14,480 --> 00:12:21,280
.net where you can just mash the keyboard and you end up with something that looks extremely realistic.

42638
00:12:21,290 --> 00:12:26,840
But a word of warning: try not to do this on an airplane or in a government building unless you want to

42639
00:12:26,840 --> 00:12:28,380
actually get investigated.


42640
00:00:00,690 --> 00:00:06,900
All right, so now that we've seen what some of the vulnerabilities might be for hashed passwords,

42641
00:00:06,900 --> 00:00:15,360
it's time to level up and learn about a way that we can prevent these types of dictionary attacks or

42642
00:00:15,360 --> 00:00:16,590
hash table cracks.

42643
00:00:16,800 --> 00:00:20,260
And in order to do that, we have to learn about salting.

42644
00:00:21,150 --> 00:00:23,130
Now, what exactly is salting?

42645
00:00:23,370 --> 00:00:26,670
Well, we already know what hashing is. It's

42646
00:00:26,670 --> 00:00:33,450
when we take a password, we run it through a hash function and we end up with a hash that we store

42647
00:00:33,450 --> 00:00:34,350
on our database.

42648
00:00:34,890 --> 00:00:41,220
And as we saw in the last lesson, passwords that are generated by humans are extremely insecure.

42649
00:00:41,370 --> 00:00:47,190
They tend to be very short and they tend to be dictionary words that are extremely easy to look up and

42650
00:00:47,190 --> 00:00:48,540
create a hash table

42651
00:00:48,540 --> 00:00:52,680
for. Now, salting takes hashing a little bit further.

42652
00:00:52,890 --> 00:01:01,290
In addition to the password, we also generate a random set of characters, and those characters along

42653
00:01:01,290 --> 00:01:06,560
with the user's password gets combined and then put through the hash function.

42654
00:01:06,630 --> 00:01:13,470
So the resulting hash is created from both the password as well as that random unique salt.

42655
00:01:13,650 --> 00:01:20,400
So that means no matter how simple the password of the user is, adding that salt increases its complexity,

42656
00:01:20,400 --> 00:01:26,170
increases the number of characters, and we make our user database a lot more secure.

42657
00:01:26,340 --> 00:01:30,360
So consider the previous problem that we saw in the last lesson when

42658
00:01:30,600 --> 00:01:32,350
we covered hacking 101.

42659
00:01:32,370 --> 00:01:37,860
Now we know that three of our users have the same password and we figured that out because they all

42660
00:01:37,860 --> 00:01:38,970
had the same hash.

42661
00:01:39,150 --> 00:01:47,790
Now, on the other hand, if we had generated a random set of characters, which is the salt, and combined

42662
00:01:47,790 --> 00:01:53,820
the password with the salt in order to generate the hash, then they won't have the same hash in our

42663
00:01:53,820 --> 00:01:54,800
user database.

42664
00:01:55,020 --> 00:02:01,380
So let's try and generate Emily's hash from her password. So we know that her password is qwerty and

42665
00:02:01,380 --> 00:02:02,970
we generate a random salt.

42666
00:02:03,150 --> 00:02:06,540
So then let's go ahead and put in her password,

42667
00:02:07,020 --> 00:02:14,670
qwerty, and then we append at the end that random salt that we generated and we end up with a hash.

42668
00:02:15,510 --> 00:02:24,990
Now this hash, however, is not the same as Tony's hash or Angela's hash because the salt is different

42669
00:02:24,990 --> 00:02:25,830
each time.

42670
00:02:26,040 --> 00:02:32,760
Now the salt is something that the user doesn't have to remember and instead, it's stored in the database

42671
00:02:33,030 --> 00:02:34,410
along with the hash.

42672
00:02:34,800 --> 00:02:40,740
So that means when the user types in their password, when they try to log in, you combine their password

42673
00:02:40,740 --> 00:02:46,170
with the salt and if you generate the same hash, then they must have had the same password.

42674
00:02:46,470 --> 00:02:47,640
It's kind of clever, isn't it?

42675
00:02:48,060 --> 00:02:53,670
And on our database, of course, we wouldn't be storing their passwords, but only the salt and the

42676
00:02:53,670 --> 00:02:54,190
hash.

42677
00:02:54,210 --> 00:02:56,460
Now consider our previous statistics.

42678
00:02:56,610 --> 00:03:01,950
You can generate about 20 billion MD5 hashes per second.

42679
00:03:02,040 --> 00:03:10,210
So even if we added a salt and we made it harder to generate a hash table, with some of the latest GPUs

42680
00:03:10,230 --> 00:03:16,260
you can still probably generate a hash table with all salt combinations relatively quickly.

42681
00:03:16,770 --> 00:03:20,040
So what else can we do to increase the security?

42682
00:03:20,490 --> 00:03:24,270
Well, we can use something other than MD5, right?

42683
00:03:24,510 --> 00:03:30,230
Another hashing algorithm that's valued because it's incredibly slow.

42684
00:03:30,780 --> 00:03:32,760
And this is where bscript comes in.

42685
00:03:33,210 --> 00:03:40,800
This is one of the industry-standard hashing algorithms that developers use to keep their users' passwords

42686
00:03:40,800 --> 00:03:48,720
safe, because while you can calculate 20 billion MD5 hashes per second, even the latest and

42687
00:03:48,720 --> 00:03:57,330
the greatest GPUs in 2019 can still calculate only about 17000 bcrypt hashes per second, which makes

42688
00:03:57,330 --> 00:04:05,700
it dramatically harder for a hacker to generate those pre-compiled hash tables. And a salted hash table

42689
00:04:05,730 --> 00:04:08,220
instead of taking something like three seconds

42690
00:04:08,430 --> 00:04:10,230
If it was hashed with MD5,

42691
00:04:10,410 --> 00:04:15,780
if it was hash using bcrypt, it would take you something like eight months, which is not really worth

42692
00:04:15,780 --> 00:04:16,600
the hacker's while.

42693
00:04:16,740 --> 00:04:22,890
They'll probably go and search out a company that has less security enabled. And to make our passwords

42694
00:04:22,920 --> 00:04:24,480
even more secure

42695
00:04:24,480 --> 00:04:31,170
when we're using bcrypt, it has a concept of what's called salt rounds, how many rounds you're going

42696
00:04:31,170 --> 00:04:33,000
to salt your password with.

42697
00:04:33,240 --> 00:04:39,090
And obviously the more rounds you do, the saltier your password and also the more secure it is from

42698
00:04:39,090 --> 00:04:39,510
hackers.

42699
00:04:39,690 --> 00:04:42,110
So, what exactly are salt rounds?

42700
00:04:42,420 --> 00:04:50,520
Well, let's say that our original user password was qwerty, and we generate a random set of characters

42701
00:04:50,520 --> 00:04:51,450
as the salt.

42702
00:04:52,500 --> 00:04:55,350
So now we have qwerty and a random set of salt.

42703
00:04:55,800 --> 00:04:59,790
We pass it through our hash function, bcrypt, and we end up with a

42704
00:04:59,990 --> 00:05:07,820
hash. Now that one round of salting, if we wanted to have two rounds of salting, then we take the hash

42705
00:05:07,820 --> 00:05:13,100
that was generated in round one and we add the same salt from before.

42706
00:05:13,580 --> 00:05:19,400
And now we run it through, bcrypt, the hash function again, and we end up with a different hash.

42707
00:05:19,970 --> 00:05:24,650
And the number of times you do this is the number of salt rounds.

42708
00:05:25,160 --> 00:05:30,630
Now, the reason why this is genius is because as computers get faster...

42709
00:05:30,890 --> 00:05:37,730
remember that Moore's Law says that every year the number of transistors in a computer chip almost doubles

42710
00:05:37,880 --> 00:05:41,030
and the cost of that faster computer halves.

42711
00:05:41,270 --> 00:05:45,200
So every year you can get more computing power for less money.

42712
00:05:45,320 --> 00:05:47,330
And this is where salt rounds comes in.

42713
00:05:47,480 --> 00:05:54,410
When you're hashing your passwords using bcrypt, you can set the number of rounds you want to salt

42714
00:05:54,410 --> 00:05:55,240
your password.

42715
00:05:55,340 --> 00:06:02,990
So that means maybe this year in 2019, you salted ten rounds, but maybe next year you can increase that

42716
00:06:02,990 --> 00:06:04,270
number to 12.

42717
00:06:04,790 --> 00:06:12,080
And for every increase in that number, the amount of time that it takes to hash your password doubles.

42718
00:06:12,350 --> 00:06:19,640
And so that means you don't have to change your hashing algorithm or update your code other than simply

42719
00:06:19,640 --> 00:06:22,460
changing one number to keep up with the times.

42720
00:06:22,700 --> 00:06:30,410
So just to review, coming back to that user database, we'll have each user's username stored, we'll have

42721
00:06:30,410 --> 00:06:38,210
their randomly generated salt stored, and then we'll store their hash after a set number of salting

42722
00:06:38,210 --> 00:06:38,660
rounds.

42723
00:06:40,160 --> 00:06:45,200
And when it comes to checking their password when they login, we'ill take the password that they put

42724
00:06:45,200 --> 00:06:51,710
in, combine it with the salt that's stored in the database, and run it through the same number of salting

42725
00:06:51,710 --> 00:06:57,980
rounds until we end up with the final hash and we compare the hash against the one that's stored in

42726
00:06:57,980 --> 00:07:02,280
the database to see if they've entered the correct password.

42727
00:07:02,570 --> 00:07:09,920
So let's give that a go in real life and implement salting rounds into our website's authentication.




42728
00:00:01,240 --> 00:00:05,560
Hey guys, welcome to day 70 of 100 Days of Code.

42729
00:00:06,400 --> 00:00:13,180
Now, today is a crucial time point in our journey of learning to build websites because we're finally

42730
00:00:13,180 --> 00:00:18,130
going to be publishing our Flask website onto the Internet.

42731
00:00:19,220 --> 00:00:25,850
And in order to do this, we're going to be using the help of a number of tools, including Git and

42732
00:00:25,850 --> 00:00:34,610
GitHub, Heroku and also something called gunicorn. And with their powers combined, we'll end up with

42733
00:00:34,610 --> 00:00:39,170
our website being hosted live on the Internet with 

42734
00:00:39,170 --> 00:00:41,930
URL that we can share to anybody in the world

42735
00:00:42,200 --> 00:00:49,250
and they'll be able to go and access and use our blog website that we've spent so long building and

42736
00:00:49,250 --> 00:00:49,940
perfecting.

42737
00:00:51,350 --> 00:00:58,460
And you'll even be able to load it up on your phone and see it in its full glory.

42738
00:00:59,040 --> 00:01:05,780
And along the way, we're going to learn about version control using a technology called git.

42739
00:01:06,440 --> 00:01:13,190
And also we're going to be upgrading our database from something that is more suited to development

42740
00:01:13,190 --> 00:01:14,630
which is SQLite,

42741
00:01:15,050 --> 00:01:21,220
and we're going to be taking that to the next step, making it production ready using PostgreSQL.

42742
00:01:23,630 --> 00:01:25,430
So that's all yet to come.

42743
00:01:25,670 --> 00:01:31,820
So if you head over to the next lesson, let's get started by learning about Git and version control.


42744
00:00:00,240 --> 00:00:05,580
Now, before we can start deploying our website, the first thing we have to do and we have to understand

42745
00:00:05,820 --> 00:00:12,690
is something called version control. And we're going to be using the most popular technology for version

42746
00:00:12,690 --> 00:00:15,650
control, which is Git and GitHub.

42747
00:00:16,410 --> 00:00:18,240
So let's talk about version control

42748
00:00:18,240 --> 00:00:19,590
in its simplest form.

42749
00:00:19,860 --> 00:00:23,440
Let's say that I create a new code file and I write a few lines in it.

42750
00:00:23,850 --> 00:00:27,320
Now I decide to put it under version control using Git,

42751
00:00:27,330 --> 00:00:31,320
and let's say that I call this save point as number one.

42752
00:00:31,380 --> 00:00:33,370
Now this is my first version.

42753
00:00:33,930 --> 00:00:38,840
So later on, as I progress, I write maybe a few more lines of code.

42754
00:00:39,240 --> 00:00:45,350
And at this point I decide to make another save point and I call this my second version.

42755
00:00:45,990 --> 00:00:52,830
So further down the line, I accidentally screw up my entire code file and it's irrepairable.

42756
00:00:52,860 --> 00:00:59,910
And I get to the point where I would rather burn my entire code file rather than having to try and fix

42757
00:00:59,910 --> 00:01:00,100
it.

42758
00:01:01,080 --> 00:01:06,870
You do get into these situations because very often your code is interlinked and each class depends

42759
00:01:06,870 --> 00:01:07,530
on another.

42760
00:01:07,530 --> 00:01:12,180
And sometimes you can screw up in a way where, you know, all hope is lost.

42761
00:01:12,180 --> 00:01:16,620
And I simply just want to roll back to the last save point.

42762
00:01:16,980 --> 00:01:19,050
I can do that using Git.

42763
00:01:19,380 --> 00:01:21,360
I can do that using other tools as well

42764
00:01:21,480 --> 00:01:25,140
but the most popular tool and the one that we're going to be talking about is git.

42765
00:01:25,380 --> 00:01:28,620
So you can either compare your current code file,

42766
00:01:28,830 --> 00:01:31,820
so the current mess that you've made against a previous version

42767
00:01:31,830 --> 00:01:38,610
so at any of the save points before. Alternatively, you can simply just roll back to a previous version

42768
00:01:38,730 --> 00:01:41,890
and it doesn't have to be the one that was immediately previous.

42769
00:01:41,910 --> 00:01:47,860
You can go as far back or as far forwards as you like as long as you know which version you want.

42770
00:01:48,090 --> 00:01:49,380
So that's the theory.

42771
00:01:49,560 --> 00:01:55,950
And in order to put it into practice, let's see how we can create some files locally on our computer

42772
00:01:56,160 --> 00:01:57,960
and put it under version control.

42773
00:02:00,770 --> 00:02:07,310
Now, if you're Mac, Git is already preinstalled with every Mac operating system. But if you are on

42774
00:02:07,310 --> 00:02:13,400
Windows, I want you to head over to gitforwindows.org and click download to download it to your system.

42775
00:02:14,180 --> 00:02:21,350
Now, once you go through The Wizard, you should end up with a folder called Git installed to your 

42776
00:02:21,350 --> 00:02:25,490
C: drive under program files. So I can see it right here.

42777
00:02:27,010 --> 00:02:33,910
Now, inside this folder, you're going to open up a application called git-bash, and this is where

42778
00:02:33,910 --> 00:02:36,610
we're going to be executing all our commands.

42779
00:02:37,360 --> 00:02:44,620
So notice how previously we talked about the terminal and how to use command line control of your computer.

42780
00:02:44,980 --> 00:02:49,570
If you forgot about this, head back to day 54 where we covered this in detail.

42781
00:02:50,350 --> 00:02:56,470
But in order to get started and to be on the same page as the video, I want you to go ahead and cd

42782
00:02:56,470 --> 00:02:58,860
over to your home directory.

42783
00:02:59,290 --> 00:03:00,940
So that's the tilde symbol.

42784
00:03:01,240 --> 00:03:04,630
And once you're there, you should see this as your location.

42785
00:03:05,570 --> 00:03:11,870
Now, here, you're basically at the same level as being inside your C drive, inside users and then

42786
00:03:11,870 --> 00:03:15,020
under your current logged in users directory.

42787
00:03:15,470 --> 00:03:21,620
So this folder and all the things that it contains, you can see, are the same as all the things are

42788
00:03:21,620 --> 00:03:24,920
printed out when I hit ls at this location.

42789
00:03:25,640 --> 00:03:31,040
So you're now ready to follow along with the video and start working with Git.

42790
00:03:32,550 --> 00:03:38,160
Now, the first thing we're going to do is open up terminal, and inside terminal we're going to navigate

42791
00:03:38,160 --> 00:03:39,500
to our desktop.

42792
00:03:40,050 --> 00:03:45,720
So if you're not familiar with the command line and you haven't watched the module on the command line,

42793
00:03:45,960 --> 00:03:50,460
then I recommend you to take a look at it now because we're going to be using a lot of the commands

42794
00:03:50,460 --> 00:03:52,540
to create directories and navigate around.

42795
00:03:52,800 --> 00:03:56,670
So if you're not yet familiar, then it's a good time to take a look at that.

42796
00:03:58,020 --> 00:04:05,520
So the first thing I'm going to do is I'm going to cd into my desktop, and here I'm going to create

42797
00:04:05,520 --> 00:04:07,890
a new directory called Story.

42798
00:04:09,360 --> 00:04:13,740
Then I'm going to cd into this Story directory.

42799
00:04:14,070 --> 00:04:17,790
And if I show you with ls, you can see that it's completely empty.

42800
00:04:17,950 --> 00:04:21,660
And similarly, inside Finder, I can show you the same thing.

42801
00:04:22,980 --> 00:04:27,240
So let's go ahead and create some text files.

42802
00:04:27,240 --> 00:04:33,810
So I'm going to use touch to create a file called chapter1.txt, and then I'm going to open

42803
00:04:33,810 --> 00:04:35,130
chapter1.txt.

42804
00:04:36,360 --> 00:04:43,680
Now, on Windows, instead of using open as the command, it's start. So you can write the start chapter

42805
00:04:43,680 --> 00:04:50,550
1.txt and that will open it inside notepad. And you can continue following along with the video.

42806
00:04:51,830 --> 00:04:56,660
And it'll open it inside the default application which is Text Edit on a Mac.

42807
00:04:57,110 --> 00:05:02,030
Alternatively, you can use a text editor within the terminal, for example, vim.

42808
00:05:03,200 --> 00:05:06,800
Now, this is only for people who are really familiar with this.

42809
00:05:06,800 --> 00:05:09,050
So it's totally up to you what you decide to use.

42810
00:05:09,050 --> 00:05:15,260
But if you are not familiar with using terminal-based editors, then it's probably a good idea to just

42811
00:05:15,260 --> 00:05:18,360
stick with the open command and use Text Edit.

42812
00:05:18,950 --> 00:05:24,170
So let's go ahead and open Chapter one and let's write something inside, shall we?

42813
00:05:27,990 --> 00:05:33,630
OK, so there's my masterpiece done, I'm going to go ahead and hit save and I'm going to quit Text

42814
00:05:33,630 --> 00:05:33,930
Edit.

42815
00:05:34,560 --> 00:05:38,010
So that was our first chapter done.

42816
00:05:38,400 --> 00:05:45,990
So now let's create a git local repository and start tracking some of these file changes.

42817
00:05:46,440 --> 00:05:50,190
So to initialize git, we simply write git init.

42818
00:05:51,270 --> 00:05:57,070
And as you can see, it's initialized an empty git repository inside the story directory.

42819
00:05:57,480 --> 00:06:01,880
Now, if you have a look inside Finder, you actually can't see this .git at all.

42820
00:06:02,280 --> 00:06:08,520
But as we learned before, if you use ls -a, you can see all the hidden files and you can see that

42821
00:06:08,880 --> 00:06:09,960
.git is right there

42822
00:06:10,200 --> 00:06:16,470
and it's going to be used to track all your changes, to commit your changes, and to perform version

42823
00:06:16,470 --> 00:06:17,000
control.

42824
00:06:17,340 --> 00:06:22,790
So we're currently inside the story directory and you can also call this the working directory.

42825
00:06:23,100 --> 00:06:29,340
So as I mentioned before, using git and learning about version control, it comes with some of its own

42826
00:06:29,340 --> 00:06:31,140
terminology and language.

42827
00:06:31,570 --> 00:06:36,420
So I'm going to try and debunk and simplify a lot of these terms that you'll come across just so that

42828
00:06:36,420 --> 00:06:40,190
we can all be on the same page and we all understand what's going on.

42829
00:06:40,710 --> 00:06:46,430
So currently we are inside the working directory, which is the story directory.

42830
00:06:46,980 --> 00:06:54,630
And here, in order to start tracking the changes of my files, for example, chapter1.txt,

42831
00:06:54,960 --> 00:07:00,150
then I need to add this file to what's called a staging area.

42832
00:07:00,720 --> 00:07:08,280
And that is basically an intermediate place where you can pick and choose which files inside your working

42833
00:07:08,280 --> 00:07:10,830
directory that you want to commit.

42834
00:07:11,370 --> 00:07:18,270
So to see what's currently inside your staging area, you can use the git Status command and it shows

42835
00:07:18,270 --> 00:07:22,170
you that there are untracked files which will be shown in red.

42836
00:07:22,330 --> 00:07:25,850
And this is something that's simply inside your working directory,

42837
00:07:26,070 --> 00:07:30,140
so inside here, but it's not yet in the staging area.

42838
00:07:30,600 --> 00:07:37,380
So in order to add it to the staging area and to start tracking changes in it, then we have to use

42839
00:07:37,380 --> 00:07:38,870
the command git

42840
00:07:38,880 --> 00:07:43,970
add. So we're going to type git add and we're going to type the file name.

42841
00:07:43,990 --> 00:07:46,590
So in this case, it's chapter1.txt.

42842
00:07:46,950 --> 00:07:48,710
So go ahead and hit enter.

42843
00:07:48,720 --> 00:07:55,140
And then if we try using git status again, you can see that that file has been added as a new file

42844
00:07:55,410 --> 00:07:56,820
and it is now green.

42845
00:07:56,830 --> 00:08:01,250
So this is now in the staging area and it's ready to be committed.

42846
00:08:01,410 --> 00:08:04,830
So let's go ahead and commit this under version control.

42847
00:08:05,250 --> 00:08:12,960
So the command is git commit and I'm going to use the -m flag to add a commit message.

42848
00:08:13,470 --> 00:08:16,280
So the commit message is really, really important.

42849
00:08:16,590 --> 00:08:23,030
It's something that helps you keep track of what changes you have made in each commit.

42850
00:08:23,130 --> 00:08:31,560
So when you create a new save point, you want to be as explicit as possible about what changes were

42851
00:08:31,560 --> 00:08:34,940
made between the last save point and this current save point.

42852
00:08:35,340 --> 00:08:43,289
So for our initial commit, we can use something very simple like initial commit, and this shows that

42853
00:08:43,289 --> 00:08:44,680
this is our starting point.

42854
00:08:45,090 --> 00:08:51,000
Alternatively, if you want to be slightly more specific because in our case, we've actually completed

42855
00:08:51,000 --> 00:08:54,840
Chapter one, so you can write complete chapter 1.

42856
00:08:56,190 --> 00:09:01,590
Now, the thing that you'll realize is that usually with commit messages, they are written in the present

42857
00:09:01,590 --> 00:09:03,600
tense and this is the best practice.

42858
00:09:03,600 --> 00:09:04,380
So where as it

42859
00:09:04,470 --> 00:09:08,160
would probably make more sense, I guess, at least in my head

42860
00:09:08,160 --> 00:09:15,450
anyways to write completed chapter one as this save point, it's actually by convention that you should

42861
00:09:15,450 --> 00:09:17,630
always use the present tense 

42862
00:09:17,670 --> 00:09:19,500
so it's like you are doing it now.

42863
00:09:19,740 --> 00:09:21,840
You're submitting your changes now.

42864
00:09:21,990 --> 00:09:25,350
So let's go ahead and hit enter to make our first commit.

42865
00:09:25,890 --> 00:09:31,890
And you can see what commits you have made by using the git log command.

42866
00:09:32,550 --> 00:09:41,250
So you can see that this commit was made at this time by this person and it also has a hash and this

42867
00:09:41,250 --> 00:09:45,480
hash uniquely identifies this particular commit.

42868
00:09:45,870 --> 00:09:51,540
And then right at the end, you see this commit message of what this save point was all about.

42869
00:09:52,860 --> 00:10:03,300
So now I'm going to go ahead and create two more chapters. So let's just create chapter2.txt

42870
00:10:04,020 --> 00:10:10,500
and chapter3.txt and now we have three chapters.

42871
00:10:10,680 --> 00:10:14,650
And I'm going to go in and change some of these text files.

42872
00:10:14,670 --> 00:10:16,050
So let's say.

42873
00:10:26,270 --> 00:10:28,510
OK, so that's chapter two done.

42874
00:10:28,910 --> 00:10:34,120
And finally, let's go ahead and just open Chapter three and edit that as well.

42875
00:10:46,110 --> 00:10:51,180
All right, so all three files have been changed, and over here in Finder you can actually get a

42876
00:10:51,420 --> 00:10:56,460
quick peek at what the contents are, which is going to be really useful for me to be able to demonstrate

42877
00:10:56,460 --> 00:10:59,250
to you what Git is doing behind the background.

42878
00:10:59,790 --> 00:11:05,860
So now let's go ahead and add these two new files to our staging area.

42879
00:11:05,890 --> 00:11:12,720
So, again, if we use git status, you can see that there's two files that are untracked which are

42880
00:11:12,720 --> 00:11:16,870
only in the working directory and not yet inside the staging area.

42881
00:11:17,280 --> 00:11:25,170
So we can put it into the staging area by simply adding each of them, as we did before, git add and

42882
00:11:25,170 --> 00:11:28,440
writing something like chapter2.txt and then doing git

42883
00:11:28,440 --> 00:11:30,110
add chapter3.txt.

42884
00:11:30,630 --> 00:11:36,750
But as you can imagine, if you have quite a few files, then it can get incredibly tedious having to

42885
00:11:36,750 --> 00:11:38,250
do this one by one.

42886
00:11:38,580 --> 00:11:40,600
So of course there is a better way.

42887
00:11:41,070 --> 00:11:46,740
So instead of adding these files one by one, we can actually simply just say git add and then use

42888
00:11:46,740 --> 00:11:51,810
the DOT to specify everything inside this current directory,

42889
00:11:52,020 --> 00:11:54,600
so everything inside the story directory.

42890
00:11:55,080 --> 00:12:00,990
So now if I go ahead and hit enter and then let's go to git status again, you can see that there's

42891
00:12:00,990 --> 00:12:08,310
two new files that have been added to the staging area. And now we're going to commit those two files

42892
00:12:08,310 --> 00:12:11,420
to a new commit, to a new save point.

42893
00:12:11,880 --> 00:12:14,910
And you know what to do. If you're following along with me,

42894
00:12:15,120 --> 00:12:16,380
go ahead and give it a go.

42895
00:12:20,510 --> 00:12:27,860
All right, so how was that? If you remember, the command is git commit and we're going to use the

42896
00:12:28,070 --> 00:12:35,930
-m flag to specify a commit message, and we're going to write a message that is in the present tense.

42897
00:12:36,350 --> 00:12:42,440
So let's say complete chapter 2 and 3.

42898
00:12:43,940 --> 00:12:50,420
So that's everything I've done between the initial commit and this commit.

42899
00:12:50,600 --> 00:12:54,740
The only difference is the fact that I've completed now chapter 2 and chapter 3.

42900
00:12:55,250 --> 00:12:57,870
So let's go ahead and hit enter.

42901
00:12:58,550 --> 00:13:00,830
So again, let's check it out

42902
00:13:00,830 --> 00:13:08,960
using git log. We can see that we now have two commits both with different hashes because they are unique

42903
00:13:08,960 --> 00:13:09,820
and they are different.

42904
00:13:10,280 --> 00:13:15,530
So the initial one was complete chapter one, and it was done at this time.

42905
00:13:15,920 --> 00:13:21,830
And then later on, about five minutes later, I completed chapter two and three, and that was the

42906
00:13:21,830 --> 00:13:22,910
second commit.

42907
00:13:23,420 --> 00:13:26,260
And this is where we are at right now.

42908
00:13:26,270 --> 00:13:33,740
So you can see by the head, by this word HEAD, this is the position or the current state that we

42909
00:13:33,740 --> 00:13:34,190
are in.

42910
00:13:34,490 --> 00:13:37,430
So I just want to quickly recap what we've just done.

42911
00:13:37,940 --> 00:13:43,280
So we created a file in our working directory inside our story directory.

42912
00:13:43,640 --> 00:13:50,790
So the working directory is the folder or the directory where you initialize your git repository.

42913
00:13:51,080 --> 00:13:55,420
When we said git init, we did that inside the story directory.

42914
00:13:55,460 --> 00:13:57,370
So that becomes our working directory.

42915
00:13:57,710 --> 00:14:03,950
And from now on, git is going to try and track the changes that it sees between the working directory

42916
00:14:04,220 --> 00:14:06,740
and the local repository.

42917
00:14:07,490 --> 00:14:15,800
So in the beginning, we created a file inside our working directory, inside Story, and then we used

42918
00:14:15,800 --> 00:14:19,040
git add to push it to the staging area.

42919
00:14:19,310 --> 00:14:24,560
Now, the reason why there is this intermediate staging area, because you might wonder why not just

42920
00:14:24,560 --> 00:14:27,200
go from the working directory straight to the repository.

42921
00:14:27,500 --> 00:14:29,390
Why do we need this extra step?

42922
00:14:29,840 --> 00:14:37,490
Well, sometimes you might not want to add all of your files to be tracked or all of your files to be

42923
00:14:37,490 --> 00:14:38,260
committed.

42924
00:14:38,600 --> 00:14:44,120
So the staging area is a good place to try and figure out what are the things that you want git to ignore

42925
00:14:44,330 --> 00:14:46,780
and what are the things that you want to be tracked.

42926
00:14:47,180 --> 00:14:54,230
So once we've used git add, we've put our file into the staging area and we're happy with the changes

42927
00:14:54,230 --> 00:15:01,400
that we are going to commit, then the next step is to go ahead and commit it using the git commit command.

42928
00:15:02,210 --> 00:15:06,230
So now our file is inside our local repository,

42929
00:15:06,230 --> 00:15:11,870
so that .git. And that version is given a name through the commit message.

42930
00:15:12,350 --> 00:15:20,180
So that means that even if we've messed up our file, we can still use the last version that's under

42931
00:15:20,180 --> 00:15:28,280
version control and we can use a special command called git checkout to revert back or roll back to

42932
00:15:28,280 --> 00:15:31,160
the last position in our local repository.

42933
00:15:31,370 --> 00:15:36,540
So let me show you what that looks like in the command line and how we would do that in practice.

42934
00:15:37,100 --> 00:15:42,440
So at the moment, I've got three nicely written chapters and I have a feeling my book is going to be

42935
00:15:42,440 --> 00:15:43,160
a big seller.

42936
00:15:43,430 --> 00:15:51,560
So now let's say that I have, you know, been working on Chapter 3 and I have completely messed

42937
00:15:51,560 --> 00:15:52,130
everything up.

42938
00:15:52,130 --> 00:15:58,580
I just, you know, fell asleep on my keyboard and I happened to have saved my file.

42939
00:15:58,820 --> 00:16:02,930
And now if you have a look at it, it's now just mumbo-jumbo.

42940
00:16:02,930 --> 00:16:04,940
And I've ruined my masterpiece.

42941
00:16:05,390 --> 00:16:13,060
But fear not because we have a version control and we have git enabled, so we have nothing to worry about.

42942
00:16:13,580 --> 00:16:18,540
I can actually revert the changes that I've made locally in my working directory.

42943
00:16:18,800 --> 00:16:24,710
So at this point you can use git status to see that we have modifications in our chapter3.txt

42944
00:16:24,710 --> 00:16:29,410
file that have not yet been committed or added to the staging area.

42945
00:16:29,840 --> 00:16:35,650
So if we wanted to, we can actually revert this back to its previous glory.

42946
00:16:36,260 --> 00:16:42,950
But before we do that, we can use a git command to check out what are the differences between the current

42947
00:16:42,950 --> 00:16:47,720
version of Chapter three and the last save point in our git repository?

42948
00:16:48,230 --> 00:16:55,490
So to do that, you can use the command git diff, so the difference, and we'll give it the Chapter three

42949
00:16:56,330 --> 00:16:57,260
file name.

42950
00:16:57,590 --> 00:17:03,350
And if you hit enter, you can see that this is the part that was deleted, so the part in red.

42951
00:17:03,830 --> 00:17:08,700
And then this was the part that was added, which is our gobbledygook.

42952
00:17:09,079 --> 00:17:14,660
So now if I've looked at these differences, it might just be that, you know, there's only a few mistakes

42953
00:17:14,900 --> 00:17:16,730
in my new version of Chapter three

42954
00:17:17,000 --> 00:17:19,490
and I just want to maybe copy some things over

42955
00:17:20,020 --> 00:17:28,210
or have a look at how I did certain things previously and change my current file, but other times it

42956
00:17:28,210 --> 00:17:31,960
might be that, you know, it's just you want to torch the new file.

42957
00:17:31,960 --> 00:17:34,150
You just don't want anything to do with it.

42958
00:17:34,150 --> 00:17:37,470
And you would much rather roll back to the previous version.

42959
00:17:37,990 --> 00:17:44,200
So if you want to do that, then there is a command called git checkout that is going to be really,

42960
00:17:44,200 --> 00:17:45,270
really useful for you.

42961
00:17:45,790 --> 00:17:51,820
So git checkout and then we're going to specify the name of the file that we want to checkout which

42962
00:17:51,820 --> 00:17:53,440
is chapter3.txt.

42963
00:17:53,860 --> 00:17:59,620
And if you just watch over here which is the preview of the current version of chapter3.txt,

42964
00:18:00,190 --> 00:18:08,110
once I hit enter on this command that basically asks to roll back this Chapter three to the last version

42965
00:18:08,110 --> 00:18:11,120
that was committed in our local repository.

42966
00:18:11,530 --> 00:18:14,620
So if I hit enter, you can see that almost immediately

42967
00:18:14,920 --> 00:18:22,420
my chapter three has been restored to its previous glorious state and this is the version of chapter

42968
00:18:22,420 --> 00:18:26,210
three at the last checkpoint at which I committed it.

42969
00:18:26,620 --> 00:18:30,670
So that was this one, which is completed chapter 2 and 3.

42970
00:18:31,000 --> 00:18:38,950
So whereas in this lesson we've looked mostly at local implementations of git, so saving these versions

42971
00:18:38,950 --> 00:18:40,450
on our computer locally,

42972
00:18:40,930 --> 00:18:46,360
in the next lesson, I'm going to talk about GitHub and creating remote repositories.

42973
00:18:46,630 --> 00:18:47,620
So I'll see you there.


42974
00:00:00,660 --> 00:00:08,130
All right, so whereas in the last lesson we were looking at local implementations of using Git and version

42975
00:00:08,130 --> 00:00:14,640
control, in this lesson we're going to talk about how you can create a remote repository, so a repository

42976
00:00:14,640 --> 00:00:20,220
that's hosted on somebody else's server or somebody else's computer by using GitHub.

42977
00:00:20,730 --> 00:00:22,710
Now, most people would have heard of GitHub.

42978
00:00:23,100 --> 00:00:27,980
So if you haven't yet set up an account on GitHub, then this is the time to do it.

42979
00:00:28,350 --> 00:00:35,010
So head over to github.com and simply fill out this quick form to create an account on GitHub.

42980
00:00:35,370 --> 00:00:36,780
So it's completely free,

42981
00:00:36,990 --> 00:00:41,220
and all you need to do is just confirm your email so that you can access it.

42982
00:00:42,360 --> 00:00:44,740
Once you've done that, go ahead and sign in.

42983
00:00:45,030 --> 00:00:48,360
So once you've signed it, you should be looking at this page.

42984
00:00:48,690 --> 00:00:54,720
And what we're going to do is we're going to create a repository inside the browser-based GitHub.

42985
00:00:55,050 --> 00:01:01,370
So if you navigate to this top-right corner and click that plus arrow, then you can select new repository.

42986
00:01:02,100 --> 00:01:06,510
And I'm going to call my repository same name, I guess we'll call it story.

42987
00:01:06,990 --> 00:01:08,820
And let's give it a description.

42988
00:01:08,820 --> 00:01:12,750
Let's say my masterpiece.

42989
00:01:14,160 --> 00:01:20,370
Now, by default, all repositories that you create on GitHub are public, that means that anyone can

42990
00:01:20,370 --> 00:01:24,860
see all of the files inside your saved repository.

42991
00:01:25,170 --> 00:01:31,780
So everything that you commit to your remote repository or to your GitHub repository will be public.

42992
00:01:32,490 --> 00:01:38,730
So if you don't want that, then you can select private, which requires a subscription on GitHub.

42993
00:01:39,090 --> 00:01:44,550
But in most cases, if you're not doing anything that's top-secret or if you're not developing technology

42994
00:01:44,550 --> 00:01:51,010
that is completely brand new, then having a public repository is not such a big problem.

42995
00:01:51,360 --> 00:01:57,120
And on the other hand, as well, you can see loads of other people's public repositories and you can

42996
00:01:57,120 --> 00:02:02,850
see, for example, how they structure their code, what is their style, and you can see how people

42997
00:02:02,850 --> 00:02:03,460
do things.

42998
00:02:03,600 --> 00:02:06,090
So this is the beauty of open source code.

42999
00:02:06,270 --> 00:02:13,860
And as you develop in your journey of becoming a developer, then you might find that you want to contribute

43000
00:02:13,860 --> 00:02:19,980
to other open-source projects, help them out a bit, and work in a virtual team to try and contribute

43001
00:02:19,980 --> 00:02:22,320
your knowledge and your programming skills.

43002
00:02:22,950 --> 00:02:29,060
OK, so now once I've selected public, the next thing is that I'm going to leave this part empty.

43003
00:02:29,430 --> 00:02:33,190
I'm not going to initialize a README for my repository just yet.

43004
00:02:33,810 --> 00:02:39,240
So the next thing is that I'm going to go ahead and click the big green button and create my repository.

43005
00:02:40,140 --> 00:02:44,010
So now you can see that there are two ways that they tell you

43006
00:02:44,010 --> 00:02:51,780
you can set up your repository. You can either set it up in GitHub on desktop, their desktop client,

43007
00:02:52,110 --> 00:02:53,580
which I am not a big fan of.

43008
00:02:53,580 --> 00:02:59,580
But instead, what we're going to do is we're going to use the command-line instructions to set up our

43009
00:02:59,580 --> 00:03:00,320
repository.

43010
00:03:00,660 --> 00:03:07,950
So we are going to push an existing repository that we've got locally onto this remote repository.

43011
00:03:08,100 --> 00:03:14,400
And to do that, we need to copy the address of our Github repository.

43012
00:03:14,970 --> 00:03:22,710
And we're going to use these two lines of code in order to transfer or push our existing local repository

43013
00:03:22,950 --> 00:03:23,910
from the command line.

43014
00:03:24,150 --> 00:03:24,490
All right.

43015
00:03:24,490 --> 00:03:30,780
So I'm currently inside my story directory, which also happens to be the working directory for this

43016
00:03:30,780 --> 00:03:31,740
particular project.

43017
00:03:32,230 --> 00:03:39,780
And here, I am going to again take a look at git log to see what previous commits we've got.

43018
00:03:40,050 --> 00:03:42,210
And you can see that we've got two previous commits.

43019
00:03:42,450 --> 00:03:46,560
And I would like to push both of these committees onto GitHub.

43020
00:03:47,520 --> 00:03:51,690
So to do that, the first thing is creating a remote.

43021
00:03:51,990 --> 00:04:00,390
So it's telling my local git repository that I've created a remote repository somewhere on the Internet

43022
00:04:00,690 --> 00:04:04,910
and I want to transfer all of my commits over there.

43023
00:04:05,130 --> 00:04:10,000
So the command that we're going to use is git remote add origin.

43024
00:04:10,440 --> 00:04:17,339
Now, origin is simply the name of your remote and you can theoretically call it anything you want.

43025
00:04:17,579 --> 00:04:25,290
You can call it bacon if you want, but by convention and it's highly recommended that you simply keep

43026
00:04:25,290 --> 00:04:26,280
the name origin.

43027
00:04:26,520 --> 00:04:33,270
And the reason is because most programmers are used to the conventional naming, and that means it'll

43028
00:04:33,270 --> 00:04:38,130
be much easier for them to understand what's going on in your project when they have a look at it,

43029
00:04:38,220 --> 00:04:42,660
instead of you doing something completely different which will be very surprising and will be a lot

43030
00:04:42,660 --> 00:04:45,200
harder for people to understand what's going on.

43031
00:04:45,810 --> 00:04:54,570
So git remote add origin, and then we're going to paste the URL of our remote repository on GitHub

43032
00:04:54,930 --> 00:04:56,700
and then we're going to go ahead and hit enter.

43033
00:04:57,990 --> 00:05:06,270
And now that remote is created so we can push our local repository onto our remote repository, which

43034
00:05:06,270 --> 00:05:07,280
is called origin.

43035
00:05:07,710 --> 00:05:14,180
So we're going to say git push -u origin master.

43036
00:05:14,610 --> 00:05:22,320
And what this line of code does is that it pushes your local repository to the remote repository using

43037
00:05:22,320 --> 00:05:29,010
the -u flag or the u option which basically links up your remote and your local repositories.

43038
00:05:29,520 --> 00:05:35,430
And then we're going to push it towards the remote that's called origin, and we're going to push it

43039
00:05:35,430 --> 00:05:37,550
to the branch that's called master.

43040
00:05:38,070 --> 00:05:44,790
So the master branch is simply the default branch or the main branch of all of your commits.

43041
00:05:44,970 --> 00:05:51,570
So let's go ahead and hit enter, and there's going to be a little bit of work being done in the background

43042
00:05:51,780 --> 00:05:58,860
because it's actually going to have to upload your local repository to the remote repository on GitHub

43043
00:05:58,860 --> 00:05:59,430
servers.

43044
00:05:59,730 --> 00:06:05,190
And depending on the size of your local repository, this can take various amounts of time.

43045
00:06:06,420 --> 00:06:13,410
So now once we see our prompt, so the flashing cursor or the dollar sign, that means our push is 

43046
00:06:13,470 --> 00:06:20,210
successful and as you can see, it says branch master set up to track remote branch master from origin,

43047
00:06:20,430 --> 00:06:26,820
sounds really confusing, but if you head back over to GitHub and if you're on the same page, all you

43048
00:06:26,820 --> 00:06:31,080
have to do is hit command+r to refresh or just press the refresh button.

43049
00:06:31,620 --> 00:06:41,000
And you can see that all of our files are now hosted on GitHub and it's complete with all of our commit messages.

43050
00:06:41,460 --> 00:06:49,410
So if you go into insights, graphs, and go into network, you can actually see our master branch, which

43051
00:06:49,410 --> 00:06:52,830
currently only has two save points or two commits.

43052
00:06:53,190 --> 00:06:57,300
And if you hover over them, you can actually see the messages of each of these.

43053
00:06:57,750 --> 00:07:04,080
So as you build out your project, as you add more commits either locally or pushing it remotely

43054
00:07:04,110 --> 00:07:10,830
or probably doing both, then you can see the progress of your files in your GitHub repository.

43055
00:07:10,950 --> 00:07:14,250
So now you can see all of the code

43056
00:07:14,250 --> 00:07:19,830
if it's a code file or in our case, it's just a text file hosted on GitHub.

43057
00:07:20,190 --> 00:07:22,620
And you can point anybody towards this.

43058
00:07:22,620 --> 00:07:28,950
And there are actually cases where people do a lot of story writing using GitHub just because it's

43059
00:07:28,950 --> 00:07:35,910
so good at tracking your save points and being able to revert to previous versions in the past.

43060
00:07:36,210 --> 00:07:44,190
So, for example, if you head over back to the main page and you go to your commits, you can see both

43061
00:07:44,190 --> 00:07:46,500
of those commits, when they were committed,

43062
00:07:46,710 --> 00:07:51,810
and also, if you click on it, you can see the changes that were made at those time points.

43063
00:07:51,840 --> 00:07:58,110
So if we have a look at chapter one, you can see this is all we had at the point when we made our first

43064
00:07:58,110 --> 00:07:58,530
commit.

43065
00:07:58,830 --> 00:08:04,200
So previously we said that we have a working directory, which is the directory where we initialized

43066
00:08:04,210 --> 00:08:04,560
Git.

43067
00:08:05,100 --> 00:08:10,730
Then we can push our files to a staging area where we can pick and choose which files we want to commit.

43068
00:08:11,070 --> 00:08:18,660
Then once we're ready, then we can commit our files or our save point to our local repository.

43069
00:08:19,110 --> 00:08:26,850
So once you've done a few commits, then you actually have this timeline of various commits and this

43070
00:08:26,850 --> 00:08:28,700
is called your master branch.

43071
00:08:29,160 --> 00:08:36,059
So the Master Branch is your main branch of commits or save points and it is sequential.

43072
00:08:36,360 --> 00:08:41,600
And this is usually where your main progress is saved or committed.

43073
00:08:42,360 --> 00:08:48,660
Now, later on, we then introduced this idea of the remote repository.

43074
00:08:48,840 --> 00:08:54,840
The important thing to note is that you can have a local repository completely in parallel with a remote

43075
00:08:54,840 --> 00:08:55,470
repository,

43076
00:08:55,680 --> 00:09:01,440
check the differences between them, but you can also sync them or push things from your local repository

43077
00:09:01,440 --> 00:09:02,790
to your remote repository.

43078
00:09:03,060 --> 00:09:09,510
So in our case, the local repository is the Git file that we've got inside our story directory.

43079
00:09:09,870 --> 00:09:17,190
And the remote repository is GitHub which hosts our code and also hosts all of the changes that were

43080
00:09:17,190 --> 00:09:19,140
made in between the different committees.

43081
00:09:19,140 --> 00:09:24,810
So we have this master branch of various commits, first commit, second commit, third commit, in our

43082
00:09:24,810 --> 00:09:26,490
local Git repository.

43083
00:09:26,850 --> 00:09:34,980
And when we performed the command git push, then that effectively pushed all of those commits, all

43084
00:09:34,980 --> 00:09:42,680
of those various versions and changes and code pieces to our remote repository on GitHub.

43085
00:09:43,080 --> 00:09:44,580
So that's what git pushed us.














43086
00:00:01,090 --> 00:00:05,230
Hey, guys, well done for achieving a big milestone.

43087
00:00:05,750 --> 00:00:10,590
Now here's a quick tip about the upcoming projects and lessons.

43088
00:00:11,080 --> 00:00:15,460
Now you might look ahead and you might see, oh, what's going on?

43089
00:00:15,490 --> 00:00:17,260
There's no step by step guidance.

43090
00:00:17,260 --> 00:00:18,840
There's no solution code.

43091
00:00:19,120 --> 00:00:20,210
What's happening here?

43092
00:00:20,770 --> 00:00:27,730
Now, what I want you to be able to do after you complete this course is to have achieved all of the

43093
00:00:27,730 --> 00:00:32,229
skills that you need to be able to get a job as a python developer.

43094
00:00:32,740 --> 00:00:38,920
And one of the most important things you need to be able to demonstrate is that you can write your own

43095
00:00:38,920 --> 00:00:45,220
code, not code from a tutorial, not code that I've guided you through, but code that you actually

43096
00:00:45,220 --> 00:00:47,080
thought about, that you wrote.

43097
00:00:47,920 --> 00:00:53,220
So we're going to help you to build your portfolio in the upcoming section.

43098
00:00:53,740 --> 00:00:59,230
I've created some project ideas that are usually quite good when it comes to interviews.

43099
00:00:59,650 --> 00:01:06,970
And your job is to use everything that you've learned, plus research plus Googling plus reviewing

43100
00:01:06,970 --> 00:01:12,420
some lessons to create those projects and write entirely your code.

43101
00:01:12,880 --> 00:01:18,730
But what this means is that you can copyright your code, you can build it out into a real business,

43102
00:01:18,730 --> 00:01:25,120
you can put it into your portfolio or put it onto GitHub and demonstrate at your next interview that

43103
00:01:25,120 --> 00:01:29,270
you can create your own projects without the help of somebody else.

43104
00:01:30,040 --> 00:01:36,100
So I've taught courses on Web development, on iOS development, and I've often seen students come to

43105
00:01:36,100 --> 00:01:43,120
job interviews with a project that I'm like, "Oh, I think I know that I wrote the code for that."

43106
00:01:43,450 --> 00:01:49,350
Or you see online where people have the same project over and over again with exactly the same code.

43107
00:01:49,780 --> 00:01:53,140
This is what you're going to avoid by going that extra step.

43108
00:01:53,200 --> 00:01:54,640
Now, I'm not saying it's easy.

43109
00:01:54,640 --> 00:02:00,190
It's going to be really hard, but this is how you learn and this is how you progress as a developer.

43110
00:02:01,360 --> 00:02:04,280
In this course, I want it to be a safe space for you.

43111
00:02:04,300 --> 00:02:10,810
I want it to be a place where you can play, you can explore, you can fail without any repercussions,

43112
00:02:10,810 --> 00:02:15,220
because we're all here to support you on your journey.

43113
00:02:15,640 --> 00:02:19,120
So don't worry if you can't do something, don't worry

43114
00:02:19,120 --> 00:02:20,530
if you get it wrong,

43115
00:02:20,530 --> 00:02:25,360
don't worry if it doesn't look great, just share your code and we'll give you feedback and we're going

43116
00:02:25,360 --> 00:02:30,280
to get you to that place where you want to be. But you have to be willing to try as well.

43117
00:02:31,010 --> 00:02:35,380
So I hope you're going to succeed in the coming lessons and I definitely hope you're going to give it

43118
00:02:35,380 --> 00:02:38,650
a go because it is so important for your development.

43119
00:02:39,010 --> 00:02:40,930
So here's good luck to you.

43120
00:02:41,080 --> 00:02:44,380
And remember, as always, I believe in you.


